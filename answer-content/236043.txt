<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It'll add more work if you use interface since your models are different, only one property (Mobile) is the common one, and you'll add Reflection to the equation as well. Even if you used a generic method, you'll add extra work to it. So, in your case, your best approach would be to use overloads (which you've already done) and keep it simple, but you've over-done it. Rather than just duplicating the method and change the model, you'll need to set a private base method, which is going to be used as call back. The other overloads will be set to each process respectively, then it'll callback the base method. </p>

<pre><code>// UserLog overload
internal ResultStatus DownloadsLog(UserLog log)
{
    var parameters = new SqlParameter[]
    {
        new SqlParameter { ParameterName = "@CustomerID", SqlDbType = SqlDbType.NVarChar, Size = 50, Value = log.CustomerId },
        new SqlParameter { ParameterName = "@IsMobile", SqlDbType = SqlDbType.Bit, Value = log.IsMobile },
        new SqlParameter { ParameterName = "@DeviceId", SqlDbType = SqlDbType.Int, Value = log.DeviceId }
    };

    return DownloadsLog("usp_Insert_UserLog", parameters);
}

// NonUserLog overload
internal ResultStatus DownloadsLog(NonUserLog log)
{
    var parameters = new SqlParameter[]
    {
        new SqlParameter { ParameterName = "@DeviceId", SqlDbType = SqlDbType.NVarChar, Size = 50, Value = log.DeviceId },
        new SqlParameter { ParameterName = "@IsMobile", SqlDbType = SqlDbType.Bit, Value = log.IsMobile },
        new SqlParameter { ParameterName = "@AppType", SqlDbType = SqlDbType.NVarChar, Value = log.AppType }
    };

    return DownloadsLog("usp_Insert_NonUserLog", parameters);
}

// base
private ResultStatus DownloadsLog(string procedureName, SqlParameter[] parameters)
{
    using (var dataReader = new SQLHelper(conn).ExecuteReaderStoreProcedure(procedureName, parameters))
    {
        return new ResultStatus
        {
            ResultCode = 1,
            ResultMessage = "Success"
        };
    }
}
</code></pre>

<p>as you can see, the <code>UserLog</code> and <code>NonUserLog</code> overloads are there just to set the parameters with the procedure name. Then, I just callback the base method. </p>

<p><strong>Update</strong></p>

<p>This is another approach where you define the parameters and the store procedure name in the model itself, kinda like gathering everything related into one box.</p>

<pre><code>public interface ISqlDbLog
{
    string GetSqlProcedureName();

    SqlParameter[] GetSqlParameters();
}

public class UserLog : ISqlDbLog
{
    public string CustomerId { get; set; }

    public bool? IsMobile { get; set; }

    public int? DeviceId { get; set; }

    public string GetSqlProcedureName() =&gt; "usp_Insert_UserLog";

    public SqlParameter[] GetSqlParameters()
    {
        return new SqlParameter[]
        {
            new SqlParameter { ParameterName = "@CustomerID", SqlDbType = SqlDbType.NVarChar, Size = 50, Value = CustomerId },
            new SqlParameter { ParameterName = "@IsMobile", SqlDbType = SqlDbType.Bit, Value = IsMobile },
            new SqlParameter { ParameterName = "@DeviceId", SqlDbType = SqlDbType.Int, Value = DeviceId }
        };
    }
}

public class NonUserLog : ISqlDbLog
{
    public string DeviceId { get; set; }

    public bool? IsMobile { get; set; }

    public string AppType { get; set; }

    public string GetSqlProcedureName() =&gt; "usp_Insert_NonUserLog";

    public SqlParameter[] GetSqlParameters()
    {
        return new SqlParameter[]
        {
            new SqlParameter { ParameterName = "@DeviceId", SqlDbType = SqlDbType.NVarChar, Size = 50, Value = DeviceId },
            new SqlParameter { ParameterName = "@IsMobile", SqlDbType = SqlDbType.Bit, Value = IsMobile },
            new SqlParameter { ParameterName = "@AppType", SqlDbType = SqlDbType.NVarChar, Value = AppType }
        };
    }
}

class Program
{
    internal static ResultStatus DownloadsLog(ISqlDbLog log)
    {
        return DownloadsLog(log.GetSqlProcedureName(), log.GetSqlParameters());
    }

    static void Main(string[] args)
    {
        var log = new UserLog
        {
            CustomerId = "Test Customer",
            DeviceId = 5,
            IsMobile = true
        };

        var result = DownloadsLog(log);

    }
}
</code></pre>

<p>the advantage of this approach is that you have defined the data mapping within the model, which would be easier to navigate. The other thing, you're also defining the correct <code>SqlDbType</code> mapping. So, instead of using <code>AddWithValue</code>, you will pass the correct datatype, and it's already defined in the model. You can make a generic method where you use Reflection to auto-generate the SqlParameters, all you have to do is to change <code>GetSqlParameters()</code> to : </p>

<pre><code>public SqlParameter[] GetSqlParameters()
{
    return this.GetType()
        .GetProperties()
        .Where(x =&gt; x.GetValue(this, null) != null)
        .Select(x =&gt; new SqlParameter($"@{x.Name}", x.GetValue(this, null)))
        .ToArray();
}
</code></pre>

<p>you can use it as an extension, if you have a wider usage (like applying it to other models as well). like this : </p>

<pre><code>public static class SqlDbExtensions
{
    public static SqlParameter[] ToSqlParameterArray&lt;T&gt;(this T model) where T : ISqlDbLog
    {
        return model.GetType()
            .GetProperties()
            .Where(x =&gt; x.GetValue(model, null) != null)
            .Select(x =&gt; new SqlParameter($"@{x.Name}", x.GetValue(model, null)))
            .ToArray();

    }
}
</code></pre>

<p>This will be applied on all classes that implement <code>ISqlDbLog</code>. This is an insurance. So, with this, you will not need the <code>GetSqlParameter()</code> method in each class nor the <code>ISqlDbLog</code> interface. but you still need <code>ProcedureName</code>. </p>

<p>I hope this would add more helpful thoughts to your work. </p>
    </div>