<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid creating temporary vectors</h1>
<p>You should avoid creating unnecessary temporary vectors. For example, in <code>file_names_print()</code>, you can use a nested <code>std::bind()</code> to avoid the vector <code>files</code>:</p>
<pre><code>void file_names_print(const file_datas&amp; map1) //can modify 
{
    std::for_each(std::begin(map1), std::end(map1),
                  std::bind(print_filename, std::bind(split, std::placeholders::_1)));
}
</code></pre>
<p>This can be done with all the <code>std::transform()</code> + <code>std::for_each()</code> combinations. Given the restrictions you have, I don't see how to avoid the temporary vectors for <code>std::copy_if</code>.</p>
<h1>Avoid unnecessary counting</h1>
<p>In those cases where you used <code>std::copy_if()</code>, you then no longer need to call <code>std::count_if()</code> to count matching elements in the original input, you can just get the <code>std::size()</code> of the temporary vector. For example:</p>
<pre><code>size_t files_un_empty_print(const file_datas&amp; map1) //can modify
{
    std::vector&lt;record_in_file&gt; files;
    std::copy_if(std::begin(map1), std::end(map1), std::back_inserter(files), std::bind(empty_check, std::placeholders::_1, true));
    std::for_each(std::begin(files), std::end(files), std::bind(print_filename, std::bind(split, std::placeholders::_1)));

    return std::size(files);
}
</code></pre>
<h1>Removing elements from a container</h1>
<p>If you can use C++20, then you would simply write:</p>
<pre><code>void empty_removal(file_datas&amp; map1) //can modify
{
    std::erase_if(map1, std::bind(empty_check, std::placeholders::_1, true));
}
</code></pre>
<p>If you cannot use C++20, then the typical way would be to use a <code>for</code>-loop that calls <code>erase()</code> on matching elements. Of course, you are restricted from doing that, and then you indeed have to make a copy.</p>
<h1>Copy directly into a <code>std::map</code></h1>
<p>In <code>empty_removal()</code>, you first create a <code>std::vector</code> of files, and then convert that to a map. That can be avoided by creating an empty <code>std::map</code> and inserting in that instead:</p>
<pre><code>void empty_removal(file_datas&amp; map1) //can modify
{
    file_datas files;
    std::copy_if(std::begin(map1), std::end(map1),
                std::inserter(files, std::end(files)),
                std::bind(empty_check, std::placeholders::_1, true));

    std::swap(map1, files);
}
</code></pre>
<h1>About those restrictions</h1>
<p>It might be a way to force you to use STL algorithms, but there are several drawbacks. Unfortunately, due to the fact you have to pass multiple iterators to STL algorithms, and never get a container as a return value, it is very hard to compose multiple STL algorithms. You then have to use intermediate copies, which is very inefficient. A <a href="https://en.cppreference.com/w/cpp/language/range-for" rel="nofollow noreferrer">range-based <code>for</code> loop</a> is then usually clearer and more efficient. In the real world, you would be able to use all the tools that C++ provides, and select the ones that are most appropriate to the task. You would likely combine <code>for</code>-loops, algorithms and lambdas.</p>
    </div>