<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Class</h1>

<p>You use classes here without any benefit. Your methods don't use the <code>self</code> argument. If you use the class as a namespace, I would suggest you use a module.</p>

<h1><code>np</code></h1>

<p>Convention is to do <code>import numpy as np</code>. </p>

<p>You also probably did <code>from numpy import log10, exp</code>. I would not import those independently, just do <code>np.exp</code>.</p>

<h1>vectorise</h1>

<p>You can use <code>np.where</code> to select between the 2 formula's. This allows you to vectorise <code>imf</code> </p>

<pre><code>def imf_numpy(x, imf_type):

    # Chabrier (2003) IMF for young clusters plus disk stars: lognorm and power-law tail
    mnorm = 1.0
    A1 = 0.158
    mc = 0.079
    sigma = 0.69
    A2 = 4.43e-2
    x0 = -1.3

    if imf_type == 0:
        a1 = A1 * np.exp(-((x - np.log10(mc)) ** 2) / 2.0 / sigma ** 2)
        a2 = 2 * (10.0 ** x) ** (x0 - 1)
        return np.where(x &lt;= np.log10(mnorm), a1, a2)
</code></pre>

<p>I gave them <code>a1</code> and <code>a2</code> variable names, but I don't have any domain knowledge. If in the literature these get assigned other names, use these.</p>

<p>In the <code>mass_dist</code>, you can vectorise a lot.</p>

<p>By limiting your <code>x</code> and <code>y</code> to <code>size=1</code>, you don't get any particular benefit from using numpy. I would take larger jumps and then select how far you need them. You also use a list and <code>extend</code>. I would stay in <code>numpy</code>-land, and use <a href="https://numpy.org/doc/stable/reference/generated/numpy.hstack.html#numpy.hstack" rel="nofollow noreferrer"><code>hstack</code></a>. You can then limit the result to <code>SFE * Mcm</code>:</p>

<p>I would keep result as the <code>10**</code> already. this makes the rest easier to comprehend.</p>

<pre><code>def mass_dist_numpy(mmin=0.01, mmax=100, Mcm=10000, imf_type=0, SFE=0.03):
    mmin_log = numpy.log10(mmin)
    mmax_log = numpy.log10(mmax)

    chunksize = 10
    result = np.array([], dtype=np.float64)
    while result.sum() &lt; SFE * Mcm:
        x = np.random.uniform(mmin_log, mmax_log, size=chunksize)
        y = np.random.uniform(0, 1, size=chunksize)
        result = np.hstack((result, 10 ** x[y &lt; imf_numpy(x, imf_type)]))

    return result[result.cumsum() &lt; SFE * Mcm]
</code></pre>

<p>You can experiment with different chunk sizes, depending on the relative costs of calculating the <code>imf</code>, concatenating the results, the native python loop. You could pass it on as parameter and do a sensitivity analysis on it.</p>
    </div>