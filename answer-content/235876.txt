<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Interface</strong></p>

<p>There's a name conflict with <code>java.util.map</code>  I'd try to avoid using names that are the same as existing library classes.  Does <code>print</code> really belong on this interface?  If you really wanted to have it as part of the implementation, it could be there without needing to be on the interface.  However, it would be better to provide some kind of iterator (or add your <code>entries</code> method to the interface)  so that it was possible for the client to iterate over the name/values in the map and print them out if desired.</p>

<p><strong>Implementation</strong></p>

<pre><code>// its always a power of 2
</code></pre>

<p>This suggests that you're expecting the capacity of your map to always be a power of two.  If the default constructors used, then this works.  However, your custom constructor allows a capacity to be passed in.  The client can pass in '3', at which point the capacity isn't going to be a power of two.  If this linkage is important, consider rounding up/down to the nearest power when setting the initial capacity.  The custom constructor also allows 0 to be passed in as a capacity in which case you get division by zero errors when calling other methods.  You should probably default to <code>initialCapacity</code> in this scenario.</p>

<pre><code>public boolean containsKey(Object k) {
    return get(k) != null;
}
</code></pre>

<p>It's often frowned upon to call public methods of a class from other methods.  Consider pushing the implementation of <code>get</code> into a private method that can be called from both places.</p>

<p><strong>Size bug</strong></p>

<p>I don't think you're tracking size properly... </p>

<pre><code>map.put("A", 3) // size=1
map.put("A", 3) // size=2 .. even though it's overwriting the existing item
</code></pre>

<p>You're also treating null values as a special case, that doesn't increment the size</p>

<pre><code>map.put("A", null) // size=0
map.put("A", 3) // size=1
map.put("A", null) // size=1
</code></pre>

<p>It's not clear from your tests what you're expecting here...</p>

<p><strong>Tests</strong></p>

<pre><code>public class SaJavaTest {
</code></pre>

<p>Your test class name doesn't match the class you're testing.  That's OK if you're testing multiple classes intentionally, however I'd still expect the name to have something to do with the unit being tested... 'Java' probably isn't the right name here.</p>

<pre><code>public void testPut() {
</code></pre>

<p>As with most naming things, this is subjective, but I tend to not bother prefixing every test with the word <code>test</code>.  It's in a test class, so this is really implied, every public method in a test class is a test.  Instead these characters can be used to make the test name more descriptive.  I like some form of 'method_condition_expectedResult'.  So, for example:</p>

<pre><code>put_twoItems_sizeTwo
get_validKey_valueRetrieved
containsKey_validKey_true
</code></pre>

<p>Consider trying to avoid redundancy in your test assertions.  You're testing if adding two items has the right size in your <code>testPut</code>, do you really need to test it again with exactly the same setup in <code>testPutAndGet</code>.</p>

<pre><code>public void testContiansKey() {
</code></pre>

<p>Small typo in name...</p>

<pre><code>testPutNull
</code></pre>

<p>This is testing that you can use <code>null</code> as the key and that using the same key overwrites the previously added entry.  I'd suggest that these are really two distinct tests.</p>

<pre><code>@Test
public void put_null_ignored() {
    map.put("A", null);

    assertEquals(0, map.size());
}

@Test
public void put_previousValuePresentnull_overwrites() {
    map.put("A", 3);
    map.put("A", null);

    assertEquals((Integer)null, map.get("A"));
}
</code></pre>

<p>I think there are some tests missing here, about what you're expecting the behaviour to be if null is used as a value.  As it stands, the behaviour seems a bit odd.</p>
    </div>