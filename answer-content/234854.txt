<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since list one is a subset of list two, iterating over two lists can be avoided. This can be achieved by finding the next greater element of each element for the bigger list and storing the result in a hash table.</p>

<p>To calculate the next greater element of each element in a list we can iterate the list. For each element, we can find the next greater element by again iterating the list. This approach is simple but will have O(n^2) complexity.</p>

<p>Another approach is by using stack. </p>

<ul>
<li>First, push the first element of the list int the stack. </li>
<li>Now iterate the list and compare the top element of the stack with the current element of the list. </li>
<li>If the current element is greater than the top element then that means the current element is the next greater element of the top element of the stack. Store this result in a dictionary. Pop the top element out of the stack. </li>
<li>Repeat above two steps until the stack top element is greater than the current element or stack is empty. </li>
<li>At the end of each iteration push the current element in the stack.</li>
</ul>

<p>The code will make things clearer: </p>

<pre><code>
def calculate_nge_dict(arr):

    nge_dict = {}
    stack_ = []
    stack_.append(arr[0])
    nge_dict[arr[0]] = -1
    for i in arr[1:]:
        next_ = i
        nge_dict[next_] = -1
        while stack_:
            top_ = stack_.pop()
            if next_ &lt;= top_:
                stack_.append(top_)
                break
            else:
                nge_dict[top_] = next_
        stack_.append(next_)
    return nge_dict

def next_greater_element(nums1, nums2):
    nge_dict = calculate_nge_dict(nums2)
    return [nge_dict[i] for i in nums1]

</code></pre>

<p>You can get a better understanding of the algorithm from <a href="https://stackoverflow.com/a/19722651/7662129">this answer</a>.</p>
    </div>