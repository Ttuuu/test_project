<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I cannot verify this pattern for its correctnes but I find you can simplify and make the <code>TransactionLocker</code> better testable by removing the trasaction logic from it.</p>

<p>Let the <code>Locker</code> do only the locking and delegate the actions by using two lambdas: one for <code>onLocked</code> and the other one for <code>onUnlocking</code>.</p>

<pre><code>class Locker : IDisposable
{   
    private readonly object _syncRoot;
    private readonly Func&lt;object&gt; _onLocked;
    private readonly Action _onUnlocking;
    private object _lockedObject;

    public Locker(object syncRoot, Func&lt;object&gt; onLocked, Action onUnlocking)
    {
        _syncRoot = syncRoot;
        _onLocked = onLocked;
        _onUnlocking = onUnlocking;     

        lock (_syncRoot)
        {
            _lockedObject = _onLocked();
        }

        Monitor.Enter(_lockedObject);
    }

    public void Dispose()
    {
        lock (_syncRoot)
        {
            _onUnlocking();
        }

        Monitor.Exit(_lockedObject);
    }
}
</code></pre>

<p>Now you can even reuse the <code>Locker</code> somewhere else because it's not longer tightly coupled to the transation.</p>
    </div>