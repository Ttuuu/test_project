<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As it's a large chunck of code for this format, I'm sitcking to reviewing <code>_get_amazon_section_product_urls</code>
but what I mention here can be applied elsewhere. If you choose to reply with an updated version, I could then
look at the remaining.</p>

<h1>Code Style</h1>

<p>Overall, there is a good job of trying to make the code readable, and I give you bonus points for using type hinting.
However, a docstring start on the same line as the brackets, with a short sentence explaining the function, then
a blank line, then a paragraph (then I put args and return. I like numpy's style):</p>

<pre class="lang-py prettyprint-override"><code># Clear enough, no need for a docstring:
def randint():
  return 4  # Chosen by fair dice roll

# A single line is sufficiently explanatory:
def _cleanup_empty_files(dir_path):
        """Delete empty cached files in a given folder.

        dir_path: a string containing path to target directory.
        """
</code></pre>

<p>Moreover, if you use type hinting, I think it's okay to omit the type specification in the docstring:</p>

<pre class="lang-py prettyprint-override"><code>def _get_amazon_category_names_urls(self, section: str, category_class: str, print_progress=False,
                                    cache_contents=True, delimiter='&amp;&amp;&amp;', cleanup_empty=True):
    """Get  a list of pairs [category name, url] 

    If previously cached, the files will be read and required data will be returned, otherwise, 
    required data will be scraped.

    section: specify section to scrape.
        Check `self.amazon_modes` when `amazon` is specified.
    category_class: 'categories' or 'sub_categories'.
    print_progress: if True, progress will be displayed.
    cache_contents: if data is not previously cached, category names mapped to their urls will be saved to .txt.
    delimiter: delimits category name and the respective url in the .txt cached file.
    cleanup_empty: if True, delete any empty files left once done.
    """
</code></pre>

<p>I also find that the class' docstring is not so helpful. I gather it was written when getting started, but should be revisited.
It does not help to know what's being scrapped, why, and whether it's scraping search results, or the latest offers, or their css, or...</p>

<p>I'm explicitly not talking about line length, as the official recommendation is 80, I've worked with codebase going to a 100, and here 
the length seems to go up to 120. Is that what you want? Ok.</p>

<h1>The mixing of functionalities</h1>

<p>I find worriesome that certain actions are mixed up:</p>

<pre class="lang-py prettyprint-override"><code>if print_progress:
    try:
        if open(file_name + '.txt').read(1):  # This file is never closed!
            print(f'Category {category_name} ... done.')
        else:
            print(f'Category {category_name} ... failure.')
        except FileNotFoundError:
            if print_progress:
                print(f'Category {category_name} ... failure.')
            pass  # Why is there a pass?
</code></pre>

<p>Opening the file is a different action from printing. I'd do:</p>

<pre class="lang-py prettyprint-override"><code>msg = 'failure'  # Assume the worst in the default state
try:
    with open(f'{file_name}.txt') as fin:
        if fin.read(1):
            msg = 'done'
except FileNotFoundError:
    pass
if print_progress:
    print(f'Category {category_name}: {msg}.')
</code></pre>

<p>Perhaps, instead of printing, you could look into <a href="https://docs.python.org/3.5/library/logging.html" rel="nofollow noreferrer">logging</a>. You could then set the
logging level, avoid these ifs all over the place, and the <code>print_progress</code> argument become irrelevant.</p>

<p>Now that these two operations are decoupled, we can think of integrating the logging with the operation, and remove this test, as
what it effectively does it check that the user had the rights to modify this file, where an error would have been thrown earlier.
There also a code-path which is not tested: what happens if the files have never been cached, and <code>use_cached_content</code> is <code>False</code>?
Then the test returns false, even though function returns an empty list (a I think it should?)</p>

<p>The following block is prone to errors:</p>

<pre class="lang-py prettyprint-override"><code>if cache_contents:
    if folder_name not in os.listdir(self.path + 'Amazon/'):
        os.mkdir(folder_name)
os.chdir(folder_name)
</code></pre>

<p>This is because the path we're really working with is <code>os.path.join(self.path, 'Amazon', folder_name)</code>, but then we're changing directory
to <code>folder_name only</code>.</p>

<pre class="lang-py prettyprint-override"><code>path = os.path.join(self.path, 'Amazon', folder_name)
if cache_content:
    if not os.path.exists(path):
        os.mkdirs(path)
os.chdir(path)
</code></pre>

<p>I myself am not keen on changing paths all the time, because I find it hard to keep track of where I am.
That's why I'd rather build the full path, create directories and work from where I am:</p>

<pre class="lang-py prettyprint-override"><code>with open(os.path.join(path, filename)):
   ...
</code></pre>

<h1>Naming</h1>

<p>I'm more of a linux guy, and I'm uncomfortable with whitespaces in directory names, as found in <code>_get_amazon_category_names_urls</code>.
I think that <code>read_only</code> is not as telling as <code>cached_only</code> or <code>use_cache</code> or <code>use_cached_content</code>.
The operation <code>file_name + '.txt'</code> is done is several places. The extention is effectively part of the filename, consider concatenating
it once.</p>

<h1>Aerate the code</h1>

<p>Since it's a relatively large function, which has several operations and code-paths, I would add blank lines to separate the various
blocks in to logical units.</p>

<h1>With all this, that function looks like that:</h1>

<pre class="lang-py prettyprint-override"><code>        def _get_amazon_section_product_urls(self, section: str, category_class: str, cache_contents=True,
                                         cleanup_empty=True, read_only=False):
        """Get links to all products within all categories available in an Amazon section (as defined in
         self.amazon_modes).

        section: the amazon category to scrape. If previously cached, the files will be read and required
            data will be returned, otherwise, required data will be scraped.
        category_class: 'categories' or 'sub_categories'.
        cache_content: if the data was not previously cached, category names mapped to their urls will 
            be saved to a text file.
        cleanup_empty: if True, delete any empty files left once done.
        use_cached_content: only use previously cached contents. (no scraping 
            attempts in case of missing category/sub-category urls). Returns an empty list if not cache exists.
        """
        all_products = []
        names_urls = self._get_amazon_category_names_urls(section, category_class, print_progress, 
                                                          cache_contents, cleanup_empty=cleanup_empty)

        path = ' '.join([self.amazon_modes[section], category_class.title(), 'Product URLs'])

        if cache_content:
            if not os.path.exists(path):
                os.mkdir(path)

        for category_name, category_url in names_urls:
            logger.info(f'Processing category {category_name} ...')
            msg = 'done'

            filename = '-'.join([self.amazon_modes[section], category_class, category_name])
            filename += '.txt'
            filepath = os.path.join(path, filename)    

            if use_cached_content:
                try:
                    with open(filepath) as fin:
                        urls = [line.rstrip() for line in fin.readlines()]
                        all_products.append((category_name, urls))
                except UnsupportedOperation as e:
                    msg = f'failed: cannot read file ({e})'
            else:
                urls = self._get_amazon_page_product_urls(category_url, print_progress)
                all_products.append((category_name, urls))
                if cache_contents:
                    with open(filepath, 'w') as fout:
                        try:
                            for url in urls:
                                fout.write(url + '\n')
                                logger.debug(f'Saved {url}')
                        except PermissionError as e:
                            msg = f'failed: cannot write file ({e})'

            logger.info(f'Category {category_name}: {msg}.')

        if cleanup_empty:
            self._cleanup_empty_files(path)
        return all_products
</code></pre>

<p>Now, here, the errors are silenced, and the function returns an empty list. However, perhaps in the scheme of your software, it would
make sense to bubble the errors up the chain and handle the errors more appropriately? Here, an empty list is returned, is that the
desired failure mode up the chain?</p>

<p>As a bonus, I'm now toying with Visual Studio Code, and it has this neat functionality of showing me text that I highlight everywhere 
where it happens. It's a way to notice where you are <a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself" rel="nofollow noreferrer">repeating yourself</a>:
<a href="https://i.stack.imgur.com/1YeVu.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/1YeVu.png" alt="Visual Code Studio showing highlighted repeated code"></a></p>

<p>There's a lot more to review, I think it's a good start though.</p>
    </div>