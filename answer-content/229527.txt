<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I checked the solution to this problem in codesays (answered by Sheng).<br> One thing I can improve from his better solution is that he followed the same approach, but didn't check if the sum of a proper and ordered permutation was correct, so he didn't use an ordered array. <br>I used two counters, one that I knew was correct, and another one that could go wrong, but if I think about it, if no elements were repeated, nor out of range, then checking for the sum to be right wasn't necessary, because it must be a permutation if that was the case. Checking for negative numbers was something I could also do, and then decide it was not a permutation, no tests tried arrays with negative numbers, though</p>

<pre><code>class Solution {
    public static int solution(int[] A) {
        int[] counter = new int [A.length];
        for(int i= 0; i&lt; A.length; i++){
            if (A[i] &lt; 1 || A[i] &gt; A.length) {
                // Out of range
                return 0;
            }
            else if(counter[A[i]-1] == 1) {
                // met before
                return 0;
            }
            else {
                // first time meet
                counter[A[i]-1] = 1;
            }
        }
        return 1;
    }
}
</code></pre>
    </div>