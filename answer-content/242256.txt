<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to Rish's good answer, here are some <strong>software engineering</strong> (rather than coding) remarks.</p>

<ul>
<li><p>Show us that you <strong>organized the code</strong> properly by factoring out what you actually are presenting: The "library" part, consisting of two files: The header and the implementation, unless you decide to keep all functions inline which seems defensible in this case.</p>

<p>The code containing the test/usage demonstration should be in a separate file. This separation is relevant because neither the stack header nor the implementation would, for example, include <code>&lt;iostream&gt;</code>.</p></li>
<li><p>Use <a href="http://www.doxygen.nl/" rel="nofollow noreferrer">doxygen style <strong>comments</strong></a> to document your code. Good documentation focuses on the non-obvious. A function with a speaking name (e.g., <code>pop()</code>) does not need a general explanation. But you <em>should</em> document non-obvious parameters and return values, invariants, non-obvious side effects and generally any peculiarities. In short, establish <em>context.</em> E.g. leave information about <em>where an (internal) function is used or called from</em>.</p>

<p>It is generally good practice to write at least a short description for every class. </p></li>
<li><p>For anything but a toy project I would also really appreciate a <strong>module test</strong>. Such a test is essential for a library like this stack which will be used by "third parties" (perhaps yourself in a different role). A comprehensive test takes on the role of a specification: As long as the users don't do anything that does not occur in the test, they can expect that a library upgrade does not introduce bugs into their software. If the test is comprehensive it will prevent most errors from reaching the users.</p>

<p>For open source projects tests are typically deployed together with the source code, so users can run them after they built their version. </p>

<p>Typically there is limited time or interest for writing tests, so it should focus on problems. The following questions can help to identify <strong>spots worth testing:</strong></p>

<ul>
<li>Which part did I find <strong>difficult to implement</strong>/where am I least confident? </li>
<li>Which part is the <strong>hardest to understand</strong> when I look at the code? (And: Should I rework that to be simpler?)</li>
<li>What are the <strong>border conditions</strong> (empty/any max element number)? </li>
<li>What are the <strong>failure modes:</strong> Your empty stack aborts with a null pointer exception upon <code>pop()</code>, wouldn't it be nice to throw a custom exception? What about an out-of-memory condition?</li>
</ul></li>
</ul>
    </div>