<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've factored out the logic for transforming the cell-like string to a number, for example a7 -&gt; 1, z8 -&gt; 26, aa12 &gt; 27 and so on. I've also factored out the logic to replace a character if it falls within the length of the target string.
Finally I've parametrised the length of the input string. This approach makes your code more readable and easier to test and to maintain.</p>

<pre><code>import string


def str_to_num(col):
    """
    Converts the character part of a cell-like string to number.
    For example, for col='aa3', it returns 27.
    """
    num = 0
    for c in col:
        if c in string.ascii_letters:
            num = num * 26 + ord(c.upper()) - ord('A') + 1
    return num


def replace_char(txt, pos, char):
    """Replaces character in txt at position pos with char"""
    result = list(txt)
    if pos &lt; len(txt):
        result[pos] = char
    return ''.join(result)


def func(elems, length=32):
    """
    Takes an iterable elems and a length and returns a string of that length
    with all b's, except of characters at indices that are including in elems
    in the form of cell-like notation. For elements in elems that start with
    a '¬' it replaces a 'b' with a '0', for the rest it replaces a 'b' with
    an '1'.
    """       
    output = 'b' * length
    for elem in elems:
        pos = str_to_num(elem)
        if elem.startswith('¬'):
            elem = elem.split('¬')[1]
            output = replace_char(output, pos-1, '0')
        else:
            output = replace_char(output, pos-1, '1')
    return output
</code></pre>

<p>Example usage:</p>

<pre><code>&gt;&gt; input_set = {'¬g10', 'd13', 'ae6', 'f3', '¬aa5', '¬bg28', 'a2', '¬af3'}
&gt;&gt; result = func(input_set, length=32)
&gt;&gt; print(result)
1bb1b10bbbbbbbbbbbbbbbbbbb0bbb10
</code></pre>
    </div>