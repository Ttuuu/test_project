<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>    size: int
...

    self.size = 2
</code></pre>

<p>You never read <code>size</code>, and Python Lists already know their own length in case you did need it.</p>

<p>You're just duplicating functionality that <code>List</code> already gives you by manually keeping <code>size</code> in sync with the list length.</p>

<hr>

<p><strong>Separate game logic from screen rendering details</strong></p>

<p>You keep snake coordinates scaled by pixels.  This seems to complicate your code everywhere with <code>block_size</code> instead of <code>1</code>; I suspect it would be easier to keep snake coordinates in units of blocks, and only scale to pixels for drawing purposes.</p>

<p>e.g. then your outer-wall check could be something like <code>s.head[0] &gt;= bg_width</code> instead of<br>
<code>s.head[0] &gt; bg_width-block_size</code>.</p>

<p><code>1</code> is special for integers because it's the difference between <code>&gt;</code> and <code>&gt;=</code></p>

<hr>

<p>I like your <code>add_to_tail</code> idea of putting multiple snake segments in the same place initially, so <code>move</code> on future turns actually makes the snake longer on screen.  That high-level design might be worthy of a comment.</p>

<p>The other option would be a "future growth" counter that you check (and decrement) every move to decide whether to remove the last tail block.  (That's what I was expecting because I hadn't thought of your idea).  Your way is more efficient and will still work if you want food to cause multiple segments of growth.  You can still do them all when the food is eaten.</p>

<hr>

<p>Keeping a separate <code>head</code>:  I'm not sure this is helping you.  Functions that want to look at the first segment can do <code>head = snake_.body[0]</code>.</p>

<p>I don't understand why <code>move</code> needs to do this:</p>

<pre><code>       if self.body[0] != self.head:
            self.head = self.body[0]
</code></pre>

<p>when it looks to me like inserting the modified <code>head</code> as a new first element will already create that condition.  So either this is redundant (and confusing), or else it's extra work that you wouldn't need to do if you didn't redundantly keep the head coordinates in 2 places.  (Front of the List, and in its own object.)</p>

<hr>

<pre><code>    direction: str
</code></pre>

<p><strong>This should be an enum or integer, not a string</strong>.  String compares are fairly cheap, but not as cheap as integers.  There's no reason that a direction needs to be an arbitrary string when it can take only 1 of 4 possible values.  A string isn't making your code any easier to read.</p>

<p>You probably still want the if/elif chain to turn a direction into an x or y offset, but another option for an integer would be a lookup table of <code>[-1, 0]</code> , <code>[1, 0]</code> etc. so you look up the x and y offsets for the given direction and just add them to the head's x and y coordinates without any conditionals.</p>

<p><strong>Or <code>direction</code> could actually <em>be</em> an XY vector, removing the lookup step.</strong></p>

<pre><code>    head[0] += direction[0]
    head[1] += direction[1]
</code></pre>

<p>But that might complicate <code>change_dir</code>.  Or give you a different implementation: to check for reversing direction: if <code>new_dir + old_dir == [0,0]</code> then you tried to double back.  Otherwise you <em>can</em> set <code>dir = new_dir</code>.</p>

<p>I like your design for having the keyboard-input just call <code>change_dir</code> to check the game-logic of that input.  That works very cleanly, and would still work if <code>left</code> was defined as <code>[-1, 0]</code> instead of <code>"LEFT"</code>.</p>
    </div>