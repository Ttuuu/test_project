<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, thank you for providing the link to your GitHub repository, it allowed a more complete review.</p>

<p>I've noticed a real tendency in the code to avoid creating classes and to use procedural programming rather than object oriented programming. Namespaces are used instead of creating classes. The use of classes and objects can be very powerful, for one thing it allows inheritance and polymorphism. The use of classes can also decouple modules and reduce dependencies, right now the modules are strongly coupled and this has a tendency to prevent necessary changes to the architecture as the program matures and grows.</p>

<p>I've also noticed a rather strong tendency to use <code>auto</code> rather than declaring the proper types. While the <code>auto</code> type is very useful in some cases such as ranged for loops maintaining this code can be more difficult. Personally types help me to understand the code better. I would almost say this code is abusing the use of <code>auto</code>.</p>

<h2>Avoid Using Namespace <code>std</code></h2>

<p>One or more of the source files in the <code>core</code> directory and the <code>utilities</code> directory still contain the <code>using namespace std;</code> statement.</p>

<h2>Complexity</h2>

<p>Once again the function <code>main()</code> is too complex (does too much). As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>

<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>

<blockquote>
  <p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>

<p>This code should probably a function be in <code>day.cpp</code> and the function prototype should be in <code>day.h</code>:</p>

<pre><code>    auto available_days = std::vector&lt;day&gt;{{"sunday", boost::date_time::weekdays::Sunday},
                                           {"monday", boost::date_time::weekdays::Monday},
                                           {"tuesday", boost::date_time::weekdays::Tuesday},
                                           {"wednesday", boost::date_time::weekdays::Wednesday},
                                           {"thursday", boost::date_time::weekdays::Thursday},
                                           {"friday", boost::date_time::weekdays::Friday},
                                           {"saturday", boost::date_time::weekdays::Saturday}};
</code></pre>

<p>The function should return a type of <code>std::vector&lt;day&gt;</code>;</p>

<p>Or perhaps the function should perform the ensuing search for the day and return the day itself.</p>

<pre><code>    auto selected_day = get_selected_day_of_the_week()
</code></pre>

<h2>Try Catch Throw Blocks</h2>

<p>The code in <code>main()</code> currently contains a <code>throw exception</code> but there is no <code>try{} catch{}</code> code to catch the exception, this will result in the program terminating without reporting the problem. At best in the debugger it will report <code>unhandled exception</code>. The <code>main()</code> code should contain a <code>try</code> block and a <code>catch</code> block to handle any exceptions, the <code>throw</code> statement should probably be called in one of the sub functions that <code>main()</code> calls. If this code stays in <code>main()</code> it might be better to change the throw to std::cerr &lt;&lt; "MESSAGE" &lt;&lt; std::endl.</p>

<h2>Prefer <code>\n</code> Over <code>std::endl;</code></h2>

<p>For performance reasons <code>\n</code> is preferred over <code>std::endl</code>, especially in loops where more than one <code>std::cout</code> is expected. <code>std::endl</code> calls a system routine to flush the output buffer. Calling a system function means that the program will be swapped out while the system function is executing.</p>

<pre><code>        if (cmd_data.week_start_day == "help") { // Produce help days message
            std::cout &lt;&lt; "Available days:" &lt;&lt; std::endl;
            std::cout &lt;&lt; "\tSun [Sunday]" &lt;&lt; std::endl;
            std::cout &lt;&lt; "\tMon [Monday]" &lt;&lt; std::endl;
            std::cout &lt;&lt; "\tTue [Tuesday]" &lt;&lt; std::endl;
            std::cout &lt;&lt; "\tWed [Wednesday]" &lt;&lt; std::endl;
            std::cout &lt;&lt; "\tThu [Thursday]" &lt;&lt; std::endl;
            std::cout &lt;&lt; "\tFri [Friday]" &lt;&lt; std::endl;
            std::cout &lt;&lt; "\tSat [Saturday]" &lt;&lt; std::endl;
            return EXIT_SUCCESS;
        }
</code></pre>

<p>was refactored to </p>

<pre><code>        if (cmd_data.week_start_day == "help") { // Produce help days message
            std::cout &lt;&lt; "Available days:\n";
            std::cout &lt;&lt; "\tSun [Sunday]\n";
            std::cout &lt;&lt; "\tMon [Monday]\n";
            std::cout &lt;&lt; "\tTue [Tuesday]\n";
            std::cout &lt;&lt; "\tWed [Wednesday]\n";
            std::cout &lt;&lt; "\tThu [Thursday]\n";
            std::cout &lt;&lt; "\tFri [Friday]\n";
            std::cout &lt;&lt; "\tSat [Saturday]" &lt;&lt; std::endl;
            return EXIT_SUCCESS;
        }
</code></pre>

<p>to flush all the output at the end.</p>
    </div>