<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don't use static methods.  Eventually you will want to be able to apply a group of validators in a single operation i.e. testing for NonBlank then testing for Email.  Easy to do with objects, far more challenging with statics.</p>

<p>It's interesting that your Validator is very similar to that used by the popular Symfony\Validator component.  So I think it's safe to say you are on the right track.  </p>

<p>Might want to take a look at the component just to get some ideas:</p>

<p><a href="https://github.com/symfony/Validator" rel="nofollow">https://github.com/symfony/Validator</a></p>

<p><a href="http://symfony.com/doc/current/book/validation.html" rel="nofollow">http://symfony.com/doc/current/book/validation.html</a></p>

<p>=================================================================</p>

<p><strong>I don't understand why it would be more challenging with statics.</strong></p>

<p>If you needed multiple constraints then creating instances, storing them in an array and then looping over the array is easier then using statics. </p>

<p>But lets consider a different problem.  Suppose you want a UniqueEmailValidator which needs access to the database.  It's a bit awkward using statics but:</p>

<pre><code>$validator = new UniqueEmailValidator($db);  // Works well
</code></pre>

<p>And once you start using a dependency injection container you can do:</p>

<pre><code>$validator = $container-&gt;getService('unique_email_validator');
</code></pre>

<p>Which hides the $db portion.</p>
    </div>