<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't see why not using smart pointers in such a basic data structure is bad. You may use <code>std::unique_ptr</code> for allocation and de-allocation of your ListNodes, but in the end you'll just introduce a new header and STL dependency, so in this case I'd think it's fine doing without.
For primitive types, what should <code>operator-&gt;</code> return in your opinion? 
To get compatibility with standard algorithms, see on how STL containers implement common functions.</p>

<ul>
<li>Do you need access to <code>ListNode</code> from the outside of the class? Consider making it <code>private</code>. Same goes for <code>tail_</code> and <code>before_begin_</code>.</li>
<li>In <code>iterator operator++(int arg)</code> you can remove the <code>arg</code> it is not needed and compilers may complain about unused variables with the right warning settings.</li>
<li>Why <code>before_begin_</code>? Isn't a <code>ListNode* first;</code> better? </li>
<li>In your constructors you're initializing <code>before_begin_</code> and <code>tail_</code>, but in your move-constructors you're leaving the members with <code>nullptr</code>s. Consider having the move functions leaving the functions in a default constructed state (though having nullptrs is better IMO).</li>
<li>Regarding <code>operator=</code> and copy construction, please read about the copy-and-swap idiom.</li>
<li>using <code>erase_after</code> and <code>insert_after</code> is not very common. Check the STL documentation on how STL containers support erasing or inserting data.</li>
<li>In <code>operator=</code> you'll leak memory if the list is filled. Maybe provide a <code>clear</code> method and use it in <code>~List()</code> and <code>operator=()</code>.</li>
</ul>
    </div>