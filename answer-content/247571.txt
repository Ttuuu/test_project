<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Big data requires big time. But there might be ways to speed up your processing somewhat. For each DICOM file you:</p>
<ul>
<li>open the file</li>
<li>read metadata</li>
<li>read an image</li>
<li>write the image as PNG in the current directory</li>
<li>move the PNG file to it's final destination</li>
</ul>
<p>Some complex file formats benefit from being read and written on a local drive, the software assumes drive access is fast and memory is expensive, so it reads small bits of data scattered around the file instead of reading larger chunks and using only the small bits it needs. These file types can benefit from being copied over in their entirety to a local drive for reading. However, DICOM is not a complex file format, and DICOM files are commonly stored on networked drives, so I don't think this causes any specific problems.</p>
<p>However, writing PNG files might be a bit faster if done on a local drive. You create the file in the current directory (wherever that is), then move it from <code>root_dirs</code> to <code>Destination_path</code>. So I presume that <code>root_dirs</code> is the current directory? Instead, you could create the file in <a href="https://stackoverflow.com/q/847850/7328782">the temporary directory</a>, then move it to its final destination like you do:</p>
<pre class="lang-py prettyprint-override"><code>import tempfile
temp_dir = tempfile.gettempdir()  # expected to be on the local drive
# ...
name = dcm.AccessionNumber + '_' + str(counter) + '.png'
name = os.path.join(temp_dir, name)
imsave(name, img)
shutil.move(name,dest)
</code></pre>
<p>Next, <code>skimage.io.imsave</code> is very flexible, but <a href="https://scikit-image.org/docs/dev/api/skimage.io.html#skimage.io.imsave" rel="nofollow noreferrer">it just calls functions in other libraries</a>:</p>
<blockquote>
<p>By default, the different plugins are tried (starting with imageio) until a suitable candidate is found. If not given and fname is a tiff file, the tifffile plugin will be used.</p>
</blockquote>
<p>Note also that imageio further knows <a href="https://imageio.readthedocs.io/en/stable/formats.html" rel="nofollow noreferrer">a lot of formats</a>, including two different PNG implementations. So this writing function again does a lot of logic to find out what format to write the file in. And it might end up using the PIL implementation of PNG, which I hear is not very fast.</p>
<p>Therefore, it might be a bit more performant to use a different file writer. I would experiment with different ones, even a small difference in timing will accumulate over so many images. For example, with OpenCV you'd do:</p>
<pre class="lang-py prettyprint-override"><code>import cv2
# ...
cv2.imwrite(name, img)
</code></pre>
<p>Finally, since <code>dcm.pixel_array</code> is a property, not a function, it is likely that <code>dcm = pydicom.dcmread(i)</code> reads in all the data. If you have files for which <code>dcm.Modality == "XC"</code> is not true, you've read in data unnecessarily. Consider looking for a DICOM reader that can read only the metadata. I don't know anything about pydicom, so can't comment on its speed.</p>
<hr>
<p>Since this is Code Review, I'll give you some pointers towards better code:</p>
<p>Python people have strict rules they follow for code style (encoded in <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a>). You break some of these rules, but I won't go into that, I think code style is personal and as long as you're consistent, you're OK.</p>
<p>Repeating code is bad though. It is easy to fix a bug in one place, and then forget it needs fixing in the other copy too. It causes there to be more code to read, making the code harder to understand. And it makes you type more, giving you more possibilities to make errors. The following bit of code is repeated, with only a trivial change:</p>
<pre class="lang-py prettyprint-override"><code>counter = 1
# ...
        if os.path.isdir(dest):
            img = dcm.pixel_array 
            name = dcm.AccessionNumber+'_'+str(counter)+'.png'
            counter+=1
            imsave(name,img)
            shutil.move(os.path.join(root_dirs,name),dest)
        else:
            os.mkdir(dest)
            img = dcm.pixel_array
            name = dcm.AccessionNumber+'_0.png'
            imsave(name,img)
            shutil.move(os.path.join(root_dirs,name),dest)
</code></pre>
<p>Instead, write:</p>
<pre class="lang-py prettyprint-override"><code>counter = 0
# ...
        if !os.path.isdir(dest):
            os.mkdir(dest)
        img = dcm.pixel_array 
        name = dcm.AccessionNumber+'_'+str(counter)+'.png'
        counter+=1
        imsave(name,img)
        shutil.move(os.path.join(root_dirs,name),dest)
</code></pre>
<p>You could also put the <code>os.mkdir(dest)</code> call outside the loop. Having less code inside the loop makes the loop faster.</p>
    </div>