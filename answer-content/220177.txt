<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Numpy can be extremely fast, nigh on as fast as C or other low level languages (because it uses C!). But this is on the condition that the slow stuff is actually done in Numpy. By which I mean, you can't keep looping through lists and dictionaries then do select actions in Numpy, you have to stick to Numpy arrays and element-wise operations.</p>

<p>I will give some comments on style then return to that.</p>

<ul>
<li><p>First, there are zero comments throughout your entire code. I recommend both <code>"""docstrings"""</code> at the start of your functions and short <code># Comments</code> between lines where code is a little confusing.</p></li>
<li><p>f-strings are a python 3.6+ feature which greatly improve readability. They are used in place of .format() and string concatenation. For example:</p></li>
</ul>

<pre class="lang-py prettyprint-override"><code>print(f'{gen} generations are done. Cells are extinct.')
</code></pre>

<ul>
<li><p>You spread a lot of code over several lines when really, longer lines would be cleaner. You don't have very-highly nested code so the lines won't even be that long.</p></li>
<li><p>Good uses of <code>yield</code>. This is something new programmers often skip over and it's good to see it being used to effect here.</p></li>
<li><p>Your imports are clean, minimal and well separated from the rest of the code.</p></li>
<li><p>Some of the naming could use some work to help clarity. Just name your keys <code>enzyme</code> and <code>parasite</code>, rather than <code>e</code> and <code>p</code>. What <em>is</em> <code>a_p</code>? Try not to use built-in function names as argument names (<code>pop</code>) as it can cause issues and be confusing. Here, it is clearly short for population but be careful with it. Use <code>snake_case</code> for naming lower-cased objects <code>ratherthanthis</code>. </p></li>
<li><p>You are frequently returning a huge number of values. If you're always printing 0s to the file you don't need them to be returned, just write them to the file every time, then write the rest of the return values. Some things like <code>gen</code> should be kept track of externally, rather than it being returned every time. If something is static, you probably don't need to feed it into a function then spit it back out unchewed.</p></li>
<li><p>Multi-line strings can be achieved with triple quotes:</p></li>
</ul>

<pre class="lang-py prettyprint-override"><code>example = """
          Like
          This
          """
</code></pre>

<p><strong>Back to Numpy</strong></p>

<ul>
<li><p>As I say, to be fast, you need to use Numpy start-to finish in your slow sections. If you generate a list with pure python, then cast it to an array, then put it back to pure python, you often save no time. It can even be slower than just pure python.</p></li>
<li><p>You fitness function for example should instead use <a href="https://scipy-lectures.org/intro/numpy/operations.html" rel="noreferrer">element-wise operations</a>.</p></li>
<li><p>If you replace the slowest sections of pure python with pure Numpy, you should see some good improvements. You could try a Code Profiler to find exactly where the hang-ups are.</p></li>
</ul>
    </div>