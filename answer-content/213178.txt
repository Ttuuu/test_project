<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Think of encapsulation and responsibilities</h3>

<p>The <code>main</code> method parses the input and uses this piece of code to compute and print the answer:</p>

<blockquote>
<pre><code>findCombi(arr, N, "", new HashMap&lt;Integer, Boolean&gt;());

System.out.println(max);
</code></pre>
</blockquote>

<p>This is ugly in many ways:</p>

<ul>
<li><p>Where does the value of <code>max</code> come from? It's a global variable, its value gets set as a side effect of the call to <code>findCombi</code>. Try to organize code in a way to avoid side effects.</p></li>
<li><p>What are all those parameters passed to <code>findCombi</code>? They are low-level implementation details of <code>findCombi</code>. They should not be exposed outside that function. The <code>main</code> method shouldn't have to know how the solution is computed. It has the inputs (the array of words), it should pass just that to a function, and get an <code>int</code> back as the answer.</p></li>
<li><p>The parameter <code>N</code> is redundant, thanks to the <code>.length</code> field of arrays in Java.</p></li>
</ul>

<p>This is what the snippet should have looked like:</p>

<pre><code>int solution = findLongestSubstringCombination(arr);
</code></pre>

<p>There are no unnecessary parameters, and no side effects needed.</p>
    </div>