<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@Jaime's answer was quite good. I can only suggest a couple very minor changes, mostly just to show some alternative methods.</p>

<h2>Get length of longest item in a list</h2>

<p>The <code>max()</code> function takes an optional 2nd argument (if the first argument is an iterable) to specify a one-argument ordering function. So instead of computing <code>size</code> as:</p>

<pre><code>size = max(len(word) for word in words)
</code></pre>

<p>you could compute it as:</p>

<pre><code>size = len(max(words, key=len))
</code></pre>

<p>I'd make the argument that the first method (Jaime's) is more readable: it's a very simple and clear use of a list comprehension that <em>almost</em> reads like straight English â€” which is about as <em>literate programming</em> as you can hope for!</p>

<p>However, if for some reason (not in the OP's problem) you needed the actual longest string rather than its length, <code>longstr = max(words, key=len)</code> is the canonical Pythonic way to get it. If I had been used to using that, my first thought would probably be to just wrap that with a <code>len()</code>, <em>et voila</em>.</p>

<h2>Let <code>print_in_a_frame()</code> accept custom bounding character</h2>

<p>First, I suggest letting <code>print_in_a_frame()</code> take a list of strings, rather than an arbitrary number of arguments (each being one of the strings to print). The reason I suggest it is to enable the following...</p>

<p>Second, if for some reason you decide to change the bounding character from <code>*</code> to something else, why not do the following:</p>

<pre><code>def print_in_a_frame(words, borderchar = '*'):
    size = max(len(word) for word in words)
    print(borderchar * (size + 4))
    for word in words:
        print('{bc} {:&lt;{}} {bc}'.format(word, size, bc = borderchar))
    print(borderchar * (size + 4))
</code></pre>

<p>(Note the <code>words</code> argument is not preceded with the argument-packing operator <code>*</code>; thus <code>words</code> can be a list). Now you can do the following:</p>

<pre><code>&gt;&gt;&gt; print_in_a_frame("Box this message".split())
***********
* Box     *
* this    *
* message *
***********

&gt;&gt;&gt; print_in_a_frame("Box this message".split(), '+')
+++++++++++
+ Box     +
+ this    +
+ message +
+++++++++++
</code></pre>

<p>Now, as it is, there is no checking if the 2nd argument in my suggestion for <code>print_in_a_frame()</code> is a single character:</p>

<pre><code>&gt;&gt;&gt; print_in_a_frame("Box this message".split(), '*:')
*:*:*:*:*:*:*:*:*:*:*:
*: Box     *:
*: this    *:
*: message *:
*:*:*:*:*:*:*:*:*:*:*:
</code></pre>

<p>so perhaps, if you only ever wanted to box text with <code>*</code> characters, this suggestion can lead to scope creep, and before you know it you're <a href="https://en.wiktionary.org/wiki/yak_shaving" rel="nofollow">shaving a yak</a>.</p>
    </div>