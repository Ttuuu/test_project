<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code you wrote is quite large for a beginner, and its overall structure is easy to read and understand. That's quite good.</p>

<p>Of course there are lots of things you can improve. One thing that comes to mind is to split the code into several separate methods. A good candidate is the part where you convert a day and month into a string. Right now almost half of the code is concerned with keeping track of <code>st, nd, rd, th</code>. That is distracting. You could define a method like this:</p>

<pre class="lang-cs prettyprint-override"><code>namespace Exercice14
{
    class Program
    {
        /// The month goes from 1 to 12, the dayOfMonth goes from 1 to 31.
        /// There is no check for invalid numbers.
        string DateToString(int month, int dayOfMonth)
        {
            string ordinal = "th";
            if (dayOfMonth == 1)
                ordinal = "st";
            else if (dayOfMonth == 2)
                ordinal = "nd";

            return "the " + dayOfMonth + ordinal + " of " + MonthNames[month - 1];
        }
    }
}
</code></pre>

<p>This way, you don't need to handle these ordinal suffixes in the rest of the code. This means you cannot accidentally mix up the ordinal of the birthday and the ordinal of the reminder day, and this already makes your code more reliable.</p>

<p>Another good thing is that you can write automatic tests for this little method.</p>

<pre class="lang-cs prettyprint-override"><code>namespace Exercice14
{
    class Program
    {
        void TestDateToString(string expected, int month, int dayOfMonth)
        {
            string actual = DateToString(month, dayOfMonth);
            if (actual != expected)
            {
                throw new InvalidOperationException(
                    "Expected '" + expected + "'"
                    + " for month " + month + " and day " + dayOfMonth + ","
                    + " got '" + actual + "'.");
            }
        }

        void TestDateToString()
        {
            TestDateToString("1st of January", 1, 1);
            TestDateToString("22nd of July", 7, 22);
            TestDateToString("31st of December", 12, 31);
        }
    }
}
</code></pre>

<p>Having all these ingredients, you can now simply add <code>TestDateToString();</code> at the beginning of the <code>Main</code> method, just before the <code>// declaring</code> comment. This way, your program will only run if the tests run successfully.</p>

<p>This is only the first step to writing reliable code. The next step is to split your code into the main code and the testing code, and use a unit test framework such as NUnit to run your tests.</p>

<p>Whenever you are doing date calculations in your own code, you are doing something wrong. Date calculations are incredibly tricky, regarding time zones, daylight saving time, leap years, leap seconds, and so on. Therefore you should make use of the .NET standard library, which already defines a type called <a href="https://docs.microsoft.com/en-us/dotnet/api/system.datetime?view=netcore-3.1" rel="nofollow noreferrer">DateTime</a>. You need to do 3 things:</p>

<ol>
<li>construct a DateTime from its parts (month, day of month)</li>
<li>calculate the day before that date (using <a href="https://docs.microsoft.com/en-us/dotnet/api/system.datetime.adddays?view=netcore-3.1#System_DateTime_AddDays_System_Double_" rel="nofollow noreferrer">DateTime.AddDays(-1)</a>)</li>
<li>format this date back into a string (possibly using <a href="https://stackoverflow.com/a/9130114/225757">this code</a>)</li>
</ol>

<p>To cut the long story short: Your code works for a few cases but crashes for some others or even prints wrong results. Writing the automatic tests and thinking of possible interesting test cases will help you find and fix these bugs.</p>
    </div>