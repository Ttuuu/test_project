<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code is somewhat messy because almost everything is inside a single <code>Program</code> class. It can use some abstractions. Few things off the bat:</p>

<p>1) Declare and implement a strongly typed api for your service. For example:</p>

<pre><code>interface IChuckService
{
    Joke[] GetRandomJokes(Category category);
    Category[] GetCategories();
    Name[] GetNames();
    //other json-related methods
}
</code></pre>

<p>2) Declare and implement api for your screens, and create transitions. For example</p>

<pre><code>interface IChuckScreen
{
    void Show(IChuckService service);
    //this is an example of "active" state machine (you can use "passive" one instead)
    //return "this" to stay on the screen, or new state to transition away
    IChuckScreen ApplyInput(string input);
}
</code></pre>

<p>Your program class should probably look like:</p>

<pre><code>var service = new ChuckService();
var currentScreen = new MainScreen();
while(true)
{
    currentScreen.Show(service);
    var input = Console.ReadLine();
    currentScreen = currentScreen.ApplyInput(input);
}
</code></pre>
    </div>