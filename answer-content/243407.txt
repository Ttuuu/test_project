<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code Review</h2>

<p>The first mistake is that you don't implement the rule of 3 correctly.<br>
Your class owns a RAW pointer and though you implement the copy constructor you don't implement the copy assignment operator. As a result your object can easily be broken:</p>

<pre><code>{
    Vector&lt;int&gt;   a;
    Vector&lt;int&gt;   b;

    a.push_back(12);
    b = a;              // Copy assignment.
                        // The compiler implemented this function.
                        // and simply does a shallow copy.
                        //
                        // As a result b lost its original pointer (leaked)
                        // and now both `a` and `b` _data point at the same
                        // piece of memory. Not a problem yet.


    b.push_back(13);    // expect b to be {12, 13}
                        // expect a to be {12}  but is actually {12, 13}
                        // Though the size of a is still 1.
                        // But if we add a value to a it will overwrite
                        // The value in b (as they are sharing memory).


}
// `a` and `b` go out of scope and should call delete on the pointer.
// This will result in a double delete.
</code></pre>

<p>Though you don't actually implement the destructor.<br>
So you will not actually have a double delete but instead leak more memory.</p>

<hr>

<p>As a side note you don't provide move semantics:</p>

<pre><code>Vector(Vector&lt;Type&gt;&amp;&amp; move) noexcept;
Vector&amp; operator=(Vector&lt;Type&gt;&amp;&amp; move) noexcept;
</code></pre>

<p>Also when putting data into your vector you may want to think about moving the value into the vector rather than copying it.</p>

<pre><code>void push_back(Type&amp;&amp; move);
</code></pre>

<p>If you want to get advance you can set up build the <code>Type</code> inplace.</p>

<pre><code>template&lt;typename... Param&gt;
void emplace_back(Param&amp;&amp; p...);
</code></pre>

<hr>

<p>Prefer not to use a leading underscore on identifiers.</p>

<pre><code>size_t _size;
size_t _capacity;
Type* _data;
</code></pre>

<p>You don't break any rules. But the rules are non obvious. So even if you don't break them the next developer writing the code may change something slightly and break the rules.</p>

<p>See: <a href="https://stackoverflow.com/q/228783/14065">What are the rules about using an underscore in a C++ identifier?</a></p>

<p>Note: A trailing underscore is fine.</p>

<hr>

<p>You have a capacity, but no way to change the value of capacity.</p>

<p>You have a <code>resize()</code> but no <code>reserve()</code>.</p>

<pre><code>    Vector&amp; resize(size_t new_size);
</code></pre>

<p>Not sure why you return a reference from <code>resize()</code>, its not bad (it allows chaining) but a bit unexpected.</p>

<hr>

<p>I think you have this the wrong way around.</p>

<pre><code>    _size = _capacity &lt; _size ? _capacity : _size;
</code></pre>

<hr>

<p>This will never happen</p>

<pre><code>    if (!tmp) throw "Out of memory";
</code></pre>

<p>The <code>new</code> operator will never return null. If it can not allocate memory it will throw an exception. So no need to do this manual check.</p>

<p>But if it did work like you expected you should not throw until you have put the object back to its original state.</p>

<hr>

<p>It is perfectly fine to call delete on a <code>nullptr</code>.</p>

<pre><code>    if (!_data)
        delete[] _data;
</code></pre>

<p>This test is just a pesimization of the normal case.</p>

<hr>

<p>Things go badly here:</p>

<pre><code>    // You change the capacity and size here.    
    _capacity = new_size;
    _size = _capacity &lt; _size ? _capacity : _size;

    // So this new can technically throw.
    Type* tmp = new Type[_capacity];

    // If it does your object is no longer 
    // an a valid state (as size and capacity no longer match 
    // what is pointed at by _data

    // Thus you have violated the strong exception guarantee.
</code></pre>

<hr>

<p>Yes this is fine:</p>

<pre><code>    for (int i = 0; i &lt; _size; ++i)
        //tmp[i] = _data[i];
        tmp[i] = std::move(_data[i]);
</code></pre>

<p>But you should always use braces <code>{}</code> around sub expressions.</p>

<pre><code>    for (int i = 0; i &lt; _size; ++i) {
        //tmp[i] = _data[i];
        tmp[i] = std::move(_data[i]);
    }
</code></pre>

<p>But I would simply use the standard functions:</p>

<pre><code>    std::move(data, data + size, tmp);
</code></pre>

<hr>

<p>The best way way to implement this is more like this:</p>

<pre><code>template&lt;typename Type&gt;
Vector&lt;Type&gt;&amp; Vector&lt;Type&gt;::resize(size_t tryThisSize)
{
     size_t   newSize     = tryThisSize;
     size_t   newCapacity = _capacity &lt; newSize ? newSize : _capacity;
     Type*    newData     = new Type[newCapacity];

     std::move(_data, _data + _size, newData);

     // All the work has been done
     // The current object is still in the old state.
     // But all the data is correctly in the new variables.
     // So let us swap the current and new state.

     using std::swap;
     swap(newSize,     _size);
     swap(newCapacity, _capacity);
     swap(newData,     _data);

     delete [] newData;  // Remember this is the old data.
                        // We swapped this objects pointer int here.

     return *this;
 }
</code></pre>

<p>I go into a lot more details in my articles.</p>

<hr>
    </div>