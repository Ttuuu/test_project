<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation looks all right. It should be able to injected by any DI tool as you work with abstractions. </p>

<p>But I got couple of improvement notes:</p>

<ol>
<li><p>Logger type:</p>

<pre><code> private static Logger logger = LogManager.GetCurrentClassLogger();
</code></pre></li>
</ol>

<p>This would generate yournamespace.LoggingService as the logger. </p>

<p>I believe key part of your log file is to identify where the log has been originated/written. Therefore create a logger base on the caller's type (where the logger file being used)</p>

<ol start="2">
<li>self explanatory methods: 
Instead of having overload methods think of having self explanatory method and consumers of your logger would have better understanding what method would appropriate for the given situation.
e.g  Info, Debug, Exception, LogException, LogExceptionWithParameters etc.</li>
</ol>

<p>Think about given meaning full names for the following methods in your implementation. </p>

<pre><code>void Log(LogLevel level, String format, params object[] parameters)
void Log(LogLevel level, IList&lt;String&gt; list)
void Log(LogLevel level, String message, Exception exc)
void Log(LogLevel level, String format, Exception exc, params object[] parameters)
</code></pre>

<p>As a side note;
If I'm were you I would implement a Logger factory to create loggers base on the caller's type.</p>

<p>Eg.</p>

<p>Factory </p>

<pre><code>public interface ILoggerFactory
{
    ILogger Create&lt;T&gt;() where T : class;
}

public class LoggerFactory:ILoggerFactory
{
    public ILogger Create&lt;T&gt;() where T : class
    {
        return new Loger(typeof(T));
    }

}
</code></pre>

<p>Logger</p>

<pre><code>public interface ILogger
{
    string Name { get; }
    void Debug(string message);

}

public class Loger:ILogger
{
    private readonly NLog.Logger _logger;
    public Loger(Type type)
    {
        if(type==null)
            throw new ArgumentNullException("type");
        _logger = LogManager.GetCurrentClassLogger();
    }

    public string Name {
        get { return _logger.Name; }
    }

    public void Debug(string message)
    {
        _logger.Debug(message);
    }

}
</code></pre>

<p>Usage</p>

<pre><code> var logger = loggerFactory.Create&lt;CallerClass&gt;();
 logger.Debug("some debug message");
</code></pre>
    </div>