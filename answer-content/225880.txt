<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>

<p><strong>Single responsibility principle</strong><br>
Method <code>save_vendor_info</code> (which we'll rename later) does data retrieval from an external source, xml to db mapping, and SQL command execution on a database. I would expect a method with the name <code>Save*</code> to only store data, in this case in the database. I would also suggest to split up loading the input data and saving to the database in separate methods. A mediator method could then call both methods and ensures the data is mapped correctly.</p>

<hr>

<p><strong>Resource management</strong><br>
You don't dispose of resources that you create. <code>SqlConnection</code> and <code>SqlCommand</code> implement the <code>IDisposable</code> interface. You should make sure to dispose these instances (<a href="https://stackoverflow.com/questions/2252062/do-we-need-using-for-the-sqlcommand-or-is-it-enough-just-for-the-sqlconnection-a">SQL Disposable Pattern Example</a>). You already open the connection before retrieving the web data. This is too soon. Keep the scope of a connection lifetime to a minimum.</p>

<hr>

<p><strong>Exception Handling</strong><br>
Definining an empty <em>catch</em> block is really bad practice. You don't know whether something went wrong. At least, log exceptions. Think about which specific exceptions you want to handle and which ones need to be propagated up the stack. Even in sand-box mode, where you don't want exceptions to reach the caller, you should return a <em>boolean</em> to the caller whether the call succeeded.</p>

<hr>

<p><strong>Naming &amp; Style Conventions</strong>  </p>

<ul>
<li>Try to avoid underscores in method names and use PascalCase. Prefer <code>SaveVenderInfo</code> over <code>save_vendor_info</code>. As indicated earlier on, I would use this method name only for the part where you save the data to the database.  </li>
<li>Use <code>var</code> when the type is inferred and don't use abbreviations for variable names: Prefer <code>var dataTable = new DataTable();</code> over <code>DataTable dt = new DataTable();</code>.</li>
<li>Read SQL connection string information from a config file rather than hardcoding it. This gives better maintainability for different environments.</li>
<li>Be consistent in placement of curly braces. Either append an opening curly brace after the method with a white space between, or place the opening curly brace on the next line at the same indentation of the member declaration. Don't indent a curly brace on the next line, this leads to deeply indented code.</li>
</ul>
    </div>