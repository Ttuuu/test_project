<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Care about final</h2>

<p>Your parameters are never modified, so it is good practice to mark them <code>final</code>. Probably the method too, unless you expect it can be overridden.</p>

<pre><code>public final int shortestDistance(final String[] words, final String word1, final String word2)
</code></pre>

<h2>Compare by indices</h2>

<p>Instead of your <code>for</code> loop, you can use the indices of the elements.</p>

<pre><code>public final int shortestDistance(final String[] words, final String word1, final String word2) {
   final List&lt;String&gt; wordsList = Arrays.asList(words);

  final int word1Index = wordsList.indexOf(word1);
  final int word2Index = wordsList.indexOf(word2);

  return Math.abs(word2Index - word1Index);
}
</code></pre>

<h2>There could be duplicates</h2>

<p>We can solve this problem by finding the index of each occurrence. The final product:</p>

<pre><code>public final int shortestDistance(final String[] words, final String word1, final String word2) {
  final List&lt;Integer&gt; word1Indices = IntStream.range(0, words.length).boxed().filter(i -&gt; words[i].equals(word1)).toList();
  final List&lt;Integer&gt; word2Indices = IntStream.range(0, words.length).boxed().filter(i -&gt; words[i].equals(word2)).toList();

  int result = Integer.MAX_VALUE;

  // Better way to do this but I'm tired.
  for(final Integer word1Index : word1Indices) {
    for(final Integer word2Index : word2Indices) result = Math.min(result, Math.abs(word2Index - word1Index));
  }

  return result;
}
</code></pre>
    </div>