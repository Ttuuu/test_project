<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>General comments</h2>

<p>You should follow <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP8</a>, the coding standard for python. This means using underscore_names for variables instead of camelCase.</p>

<p><code>i</code> is a bad generic name, except when iterating explicitly over integers. Maybe use <code>for arr in A</code>.</p>

<p>I would use more descriptive variable names. Instead of <code>A</code> use maybe <code>arrays</code>?</p>

<p>Your input could be more succinct:</p>

<pre><code>for i in range(T):
    N = int(input)
    A.append(map(int, input().split()))
</code></pre>

<p>This will store a map object in A, instead of a list. But since that is iterable we won't have any problems.</p>

<p>If the input was in one line with the first element being the length of the array and the rest of the line being the array, it would have been even easier:</p>

<pre><code>for i in range(T):
    N, *arr = map(int, input().split())
    A.append(arr)
</code></pre>

<p>This uses a nice feature of python3. <code>N</code> will take the first element of an iterable and <code>arr</code> will take all the (possible) rest. You can even specify variables at the end. Try these cases out to get a feel for it:</p>

<pre><code>a, *b = []            # ValueError: not enough values to unpack (expected at least 1, got 0)
a, *b = [0]           # a = 0, b = []
a, *b = [0,1]         # a = 0, b = [1]
a, *b = [0,1,2]       # a = 0, b = [1,2]
a, *b, c = [0]        # ValueError: not enough values to unpack (expected at least 2, got 1)
a, *b, c = [0,1]      # a = 0, b = [], c = 1
a, *b, c = [0,1,2]    # a = 0, b = [1], c = 2
</code></pre>

<h1>Performance</h1>

<p>Instead of always calculating all sums, you could store the pre_ and post_sum and add/subtract the current element. You should also stop after having found one occurrence.</p>

<pre><code>for array in A:
    found = False
    pre_sum, post_sum = 0, sum(array)
    for element in array:
        post_sum -= element
        if(pre_sum == post_sum):
            found = True
            break
        pre_sum += element
    print("YES"Â if found else "NO")
</code></pre>

<p>I'm not exactly sure, but I think there is a small performance difference between these two, for large arr:</p>

<pre><code>arr = list(map(int, arr))
# and
arr = [int(x) for x in arr]
</code></pre>
    </div>