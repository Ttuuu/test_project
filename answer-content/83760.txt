<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So, you want a <code>Collection</code> which should hold your strings. The easiest and fastest would be to simply use an array. So let us do it.  </p>

<p>Because you are using this for pooling strings, we we only need a <code>string[]</code> array. We should add a method <code>bool TryGetValue(string key, out string value)</code> and a <code>string Add(string value)</code>.  </p>

<p>If we use an array we need to initialize this array to a given capacity at the constructor level and add a possibility to let the array grow if needed.  </p>

<p>I decided to use the name you want <code>CoolClass</code> but it should be better named to something more meaningful.  </p>

<p>We need to check if a given "key" is in the array at two places, the <code>TryGetValue()</code> and the <code>Add()</code> method. So let us introduce another method <code>int IndexOf(string key)</code> which returns the index of the given <code>key</code>and if it isn't in the array it returns <code>-1</code>, which should be extracted to a const.</p>

<p>This leads to  </p>

<pre><code>public class CoolClass
{
    private string[] array;
    private int capacity;
    private int lastElement = -1;
    private const int elementNotFound = -1;

    public CoolClass() : this(1024) { }
    public CoolClass(int capacity)
    {
        this.capacity = capacity;
        array = new string[capacity];
    }

    public bool TryGetValue(string key, out string value)
    {
        int i;
        if ((i = IndexOf(key)) != elementNotFound)
        {
            value = array[i];
            return true;
        }

        value = null;
        return false;
    }

    public void Add(String value)
    {
        if (value != null)
        {
            int i;
            if ((i = IndexOf(value)) != elementNotFound)
            {
                lastElement++;
                if (lastElement &gt;= capacity)
                {
                    Grow();
                }
                array[lastElement] = value;
            }
        }
    }

    private int IndexOf(string key)
    {
        for (int i = 0; i &lt; lastElement; i++)
        {
            if (array[i] == key)
            {
                return i;
            }
        }
        return elementNotFound;
    }

    private void Grow()
    {
        capacity = capacity * 2;
        Array.Resize(ref array, capacity);

    }
}  
</code></pre>

<p>But maybe we should think about this. Why shouldn't we rename the <code>TryGetValue()</code> to <code>GetOrAdd()</code> and remove the <code>Add()</code> method  ? Because we don't want to handle cases where the string isn't pooled in the client code.  </p>

<pre><code>public class CoolClass
{
    private string[] array;
    private int capacity;
    private int lastElement = -1;
    private const int elementNotFound = -1;

    public CoolClass() : this(1024) { }
    public CoolClass(int capacity)
    {
        this.capacity = capacity;
        array = new string[capacity];
    }

    public string GetOrAdd(string key)
    {
        if (key == null) { return null; }

        int i;
        if ((i = IndexOf(key)) != elementNotFound)
        {
            return array[i];
        }

        lastElement++;
        if (lastElement &gt;= capacity)
        {
            Grow();
        }

        array[lastElement] = key;
        return array[lastElement];

    }

    private int IndexOf(string key)
    {
        for (int i = 0; i &lt; lastElement; i++)
        {
            if (array[i] == key)
            {
                return i;
            }
        }
        return elementNotFound;
    }

    private void Grow()
    {
        capacity = capacity * 2;
        Array.Resize(ref array, capacity);

    }
}
</code></pre>

<hr>

<p>You reallay should use braces <code>{}</code> for singleline <code>if</code> statements too, this won't harm but makes the code less error prone.  </p>

<hr>

<p>Also it isn't mentioned explicitly in the <a href="http://msdn.microsoft.com/en-us/library/ms229002.aspx" rel="nofollow">naming guidelines</a> how to name <code>internal static</code> variables, you should use <code>camelCase</code> casing for naming them.  </p>

<hr>

<p>By using a guard clause like  </p>

<pre><code>if (string.IsNullOrEmpty(value) || value.Length &gt; 200) { return value; }  
</code></pre>

<p>you can return early and therefor you save horizontal spacing which improves the readability of the code.  </p>
    </div>