<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've taken a look at other Node Code Reviews and done some research;</p>

<p>Use Promises instead of Callbacks. This should be an easy change, just implement a Promise in the <code>makeAnHTTPSCall</code>mathod and remove all callbacks. </p>

<p>This makes error handling easier and makes the code much easier to follow:</p>

<pre><code>// Example usage after implementing Promises
LeagueAPI.getSummonerByName().then(function(data) {
    return LeagueAPI.getMatchList(data);
})
.then(console.log)
.catch(console.log);

// Example method with Promise (makeAnHTTPSCall should also use Promise instead of callback)
getChampionMasteryByChampion(accountObj, championObj)
{
    let summonerId = getSummonerIdFromParam(accountObj);
    let championId = getChampionIdFromParam(championObj);

    return new Promise(function(resolve, reject) {
        makeAnHTTPSCall(getURLChampionMasteryByChampion(summonerId, championId, this.apiKey, this.region))
        .then(function(data) {
            resolve(ChampionMastery.from(data));
        })
        .catch(reject);
    });
}
</code></pre>

<p><code>Champion</code> was supposed to be used somewhat like an Enum. Currently for example <code>Champion.AATROX</code> would give an error, since '266' is the key, but <code>Champion.266</code> is invalid JS and doesn't really make sense anyway. Instead I've used Objects as the values:</p>

<pre><code>const Champion =
{
    AATROX: {value: 266, label: 'Aatrox' },
    AHRI: {value: 103, label: 'Ahri' },
    AKALI: {value: 84, label: 'Akali' },
    ALISTAR: {value: 12, label: 'Alistar' },
    findById(id)
    {
        return Object.values(this).find(champ =&gt; {return champ.value === id})
    }
}
</code></pre>

<p>Now <code>Champion.AATROX</code> can be used as well as <code>Champion.findById(266)</code>.</p>
    </div>