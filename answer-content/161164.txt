<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>As mentioned in the comments, define two macros:</p>

<pre><code>COMPILER_OPTIONS := -Wextra -Wall -O3 -Wno-unused-result -Wno-unused-parameters
CUDA_COMPILER_OPTIONS := $(foreach option, $(COMPILER_OPTIONS), --compiler-option $(option))
</code></pre></li>
<li><p><code>C</code> in <code>CFLAGS</code> stands for <code>compiler</code>, and should contain only the compile phase options. Don't send <code>CFLAGS</code> to the linker, it is surely not interested in, say, <code>-Wall</code>. Conventionally the link phase options are passed in <code>LDFLAGS</code>.</p></li>
<li><p>I am surprised that</p>

<pre><code>    $(CC) $(CFLAGS) $(LIBS) main.o -o main
</code></pre>

<p>did pick the math library. The linker processes the command line once and sequentially. As written, there is no undefined symbols <code>lm</code> could resolve by the time it is processed. The bulletproof way is to specify libraries <em>after</em> objects:</p>

<pre><code>    $(CC) $(CFLAGS) main.o -o main $(LIBS)
</code></pre></li>
<li><p>Nitpick. <code>CC</code> is conventionally assumed to produce <code>.o</code> from <code>.c</code>. Since your source is <code>.cu</code> I recommend to alias <code>nvcc</code> to something else. <code>NVCC</code> perhaps.</p></li>
</ul>
    </div>