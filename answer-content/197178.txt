<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I noticed that you are calculating to 314 decimal places instead of 314 digits, so drop 6 instead of 5.</p>

<ul>
<li><p>You really don't need the extra functions. You can remove</p>

<pre><code>fun arccot(x:Int) = arccot(x.toBigInteger())
</code></pre>

<p>if you convert <code>Int</code> to <code>BigInteger</code> inside your <code>arctan</code> method.</p></li>
<li><p>You can remove</p>

<pre><code>operator fun Int.times(x: BigInteger) = this.toBigInteger() * x
</code></pre>

<p>if you <code>shl(2)</code> instead of <code>* 4</code>.</p></li>
<li><p>You can remove</p>

<pre><code>operator fun BigInteger.plus(x: Int) = this + x.toBigInteger()
</code></pre>

<p>if you change </p>

<pre><code>divisor += 2
</code></pre>

<p>to</p>

<pre><code>divisor += BigInteger("2")
</code></pre></li>
<li><p>You can shorten</p>

<pre><code>println("314 digits of Pi ${r[0]}.${r.substring(1).dropLast(5)}")
</code></pre>

<p>to</p>

<pre><code>println("314 digits of Pi ${r[0]}.${r.substring(1,314)}")
</code></pre></li>
<li><p>Now, you can change the imports to</p>

<pre><code>import java.math.*
</code></pre></li>
<li><p>You don't have to declare the type for <code>val r</code>.</p></li>
</ul>

<p>The final code I came up with by doing that is:</p>

<pre><code>import java.math.*
fun main(args: Array&lt;String&gt;) {
  val r = (acot(5).shl(2)-acot(239)).shl(2).toString()
  println("314 digits of Pi ${r[0]}.${r.substring(1,314)}")
}
fun acot(x:Int):BigInteger {
  var precision = BigInteger.TEN.pow(319)/x.toBigInteger()
  var total = precision
  var divisor = BigInteger.ONE;
  while(precision.abs() &gt;= divisor) {
    precision = -precision/(x.toBigInteger().pow(2))
    divisor += BigInteger("2")
    total += precision / divisor
  }
  return total
}
</code></pre>

<p>I also came up with shorter code, with decreased width, by calculating a different way:</p>

<pre><code>import java.math.*
fun main(args:Array&lt;String&gt;) {
  val b4 = BigDecimal(4)
  val r = ((atan(5)*b4-atan(239))*b4).toString()
  println("314 digits of Pi ${r.substring(0,315)}")
}
fun atan(xInv:Int):BigDecimal {
  var x = BigDecimal(1).divide(BigDecimal(xInv),330,3)
  var (numer, total) = arrayOf(x, x)
  for (i in 3..450 step 2) {
    numer = -numer * x * x
    total += numer / BigDecimal(i)
  }
  return total
}
</code></pre>
    </div>