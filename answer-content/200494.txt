<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's not really much to review here. While I have some experience with Eigen, I have no idea what SSPL is. I'm going to assume <code>SSPL:MatrixX</code> is basically <code>Eigen::Matrix3Xf</code>.</p>

<pre><code>const int size = 1000;
</code></pre>

<p>This should probably use <code>constexpr</code> rather than <code>const</code>.</p>

<pre><code>for(int i=0; i&lt;direction.size();i++)
</code></pre>

<p>It's been a while since I've used Eigen, but I believe you have a bug in this <code>for</code> prologue. If I recall, the return type of <code>size()</code> for <code>Array</code> types is not <code>int</code>. I <em>think</em> it is actually <code>std::ptrdiff_t</code> (or possibly <code>std::size_t</code>), but it's user-customizable. If it is <code>std::ptrdiff_t</code> (for example), and <code>std::ptrdiff_t</code> is larger than <code>int</code> (as it is on some platforms, I think including 64-bit Windows), then you will get UB if the values get cut off.</p>

<p>The way to fix this is to use <code>decltype</code>:</p>

<pre><code>for (decltype(direction.size()) i = 0; i &lt; direction.size(); ++i)
</code></pre>

<p>Now the first loop is just generating test data, so let's skip down to the next loop.</p>

<pre><code>const T1 azimuthAngle = direction(i).first*M_PI/180;    //converting to radians
</code></pre>

<p>What's infinitely better than:</p>

<pre><code>auto y = /* expression with x */; // convert x to foo
</code></pre>

<p>is:</p>

<pre><code>auto y = convert_to_foo(x);
</code></pre>

<p>In other words, since you're converting to radians, you should have:</p>

<pre><code>constexpr auto to_radians(float v) noexcept
{
    return (v * pi&lt;float&gt;) / 180.0f;
}
</code></pre>

<p>Now, in addition, <code>M_PI</code> is not actually portable. If you don't care, fine, but if you care about portability, you can define a Ï€ constant either as:</p>

<pre><code>constexpr auto pi = 3.14159265358979f;
</code></pre>

<p>or, better, as:</p>

<pre><code>template &lt;typename T&gt;
constexpr auto pi = T(3.14159265358979L); // add as many digits of precision as you please
</code></pre>

<p>in which case you can even make the conversion function a template:</p>

<pre><code>template &lt;typename T&gt;
// possibly constrain T
constexpr auto to_radians(T const&amp; v) noexcept((v * pi&lt;T&gt;) / T(180))
{
    return (v * pi&lt;T&gt;) / T(180);
}
</code></pre>

<p>Any way you do it, you should end up with:</p>

<pre><code>const T1 azimuthAngle = to_radians(direction(i).first);
const T1 elevationAngle = to_radians(direction(i).second);
</code></pre>

<p>Now in the next few lines you need the sin and cos of the azimuth and elevation. You might as well precalculate them - especially since you reuse some of them:</p>

<pre><code>auto const cos_azimuth = std::cos(azimuthAngle);
auto const sin_azimuth = std::sin(azimuthAngle);
auto const cos_elevation = std::cos(elevationAngle);
auto const sin_elevation = std::sin(elevationAngle);

transformedMatrix(0,i) = cos_azimuth * cos_elevation;
transformedMatrix(1,i) = sin_azimuth * cos_elevation;
transformedMatrix(2,i) = sin_elevation;
</code></pre>

<p>But transforming coordinate systems seems both like something you can reuse and - more importantly - something you can test in isolation. So this should be a function:</p>

<pre><code>template &lt;typename Pair&gt;
auto spherical_to_cartesian(Pair const&amp; spherical)
{
    const auto azimuthAngle = to_radians(std::get&lt;0&gt;(spherical));
    const auto elevationAngle = to_radians(std::get&lt;1&gt;(spherical));

    auto const cos_azimuth = std::cos(azimuthAngle);
    auto const sin_azimuth = std::sin(azimuthAngle);
    auto const cos_elevation = std::cos(elevationAngle);
    auto const sin_elevation = std::sin(elevationAngle);

    return std::tuple{cos_azimuth * cos_elevation, sin_azimuth * cos_elevation, sin_elevation};
}
</code></pre>

<p>Which makes your loop:</p>

<pre><code>for (decltype(transformedMatrix.cols()) i = 0; i &lt; transformedMatrix.cols(); ++i)
{
    std::tie(
            transformedMatrix(0, i),
            transformedMatrix(1, i),
            transformedMatrix(2, i))
        = spherical_to_cartesian(direction(i));
}
</code></pre>

<p>Now, if you're asking about how to do geometric transforms with Eigen, that seems more like a Stack Overflow question. As for vectorization, that depends on what <code>SSPL::MatrixX</code> is. But the loop above can be very easily parallelized, because each transform is independent. As for how, the standard way would require that <code>Eigen::Array</code> and <code>SSPL::MatrixX</code> could be used with standard algorithms, in which case the answer would simply be:</p>

<pre><code>// Hypothetical code.
std::transform(std::par_unseq, begin(direction), end(direction), begin(transformedMatrix), spherical_to_cartesian);
</code></pre>

<p>Or you could look into OpenMP and parallel <code>for</code>.</p>
    </div>