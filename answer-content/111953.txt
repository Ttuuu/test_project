<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You algorithm is \$O(n^2)\$, as you are scanning the full list for every item of the list.</p>

<p>A more efficient algorithm can be put together by first sorting the list:</p>

<pre><code>def find_pair_adding_to_target(target, values):
    sorted_values = list(sorted(values))
    lo_index = 0
    hi_index = len(values) - 1
    while lo_index &lt; hi_index:
        pair_sum = values[lo_index] + values[hi_index]
        if pair_sum &lt; target:
            lo_index += 1
        elif pair_sum &gt; target:
            hi_index -= 1
        else:
            return values[lo_index], values[hi_index]
    raise ValueError('No pair adds to {}'.format(target))
</code></pre>

<p>The algorithm searching for the pair in the sorted list is \$O(n)\$, but the sorting is \$O(n \log n)\$, which dominates and is also the complexity of the full algorithm.</p>
    </div>