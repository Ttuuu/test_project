<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The main attractions of a bitboard are, to put it shortly:</p>

<ol>
<li>Use the bit-parallel nature of bitwise operations to replace some simple loops.</li>
<li>Use the power of arithmetic operations to replace non-trivial algorithms (eg <a href="https://www.chessprogramming.org/Subtracting_a_Rook_from_a_Blocking_Piece" rel="nofollow noreferrer">o^(o-2r)</a>).</li>
</ol>

<p>If a bitboard is emulated with a binary string, neither of those is realized. Effectively what you're dealing with then is a boolean array, but stored in a string. I think it misses the point. Bitboards aren't nice just because they encode the data in ones and zeroes, they're nice because they can be operated on in a computer-friendly way, and that property is lost.</p>

<p>The array of numbers based board does a bit better, it can get at least <em>some</em> use out of its encoding. It can do some operations on 8 cells at the time. The code is still very "stringy" in some places (shifts, <code>not</code>) but that could be improved. This isn't the full power of bitboards, but it isn't <em>none</em> of it either, sort of in between. </p>

<blockquote>
  <p>Is this the best way to represent an unsigned 64 bit number in JavaScript?</p>
</blockquote>

<p>Unfortunately this is a difficult problem. But there are alternatives.</p>

<p>A <code>BigInt</code> has no problem storing a 64bit integer. There have been some performance issues with manipulating lots of tiny instances <code>BigInt</code>, I just did some quick tests to see if it had changed, but they were not encouraging. Also, browser support for it is not universal. Perhaps this will be a good approach someday.</p>

<p>For now a better alternative is: use a pair of numbers, each storing 32 bits. That way you get the maximum use out of the 32bit bitwise operations that JavaScript can perform. Even emulating 64bit addition/subtraction (for the more advanced bitboard techniques) seems reasonable. For example <a href="https://github.com/scala-js/scala-js/blob/10d67c9e479b40714a9e134522a181829b8f64bc/library/src/main/scala/scala/scalajs/runtime/RuntimeLong.scala" rel="nofollow noreferrer">Scala.js</a> uses such an approach for its 64bit integers.</p>
    </div>