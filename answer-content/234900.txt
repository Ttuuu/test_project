<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>BinarySearch</h2>

<p>The <code>BinarySearch</code> class should be <code>public</code> since it contains utility methods that are generally useful. To do this, write <code>public class BinarySearch</code> instead of <code>class BinarySearch</code>.</p>

<p>The <code>binSearch</code> method should be <code>static</code> since it does not access any fields from the <code>BinarySearch</code> class. After all, that class doesn't have any fields that could be accessed. To do this, write <code>public static int binSearch</code> instead of <code>public int binSearch</code>.</p>

<p>When you make the <code>binSearch</code> method static, you no longer need the <code>new BinarySearch()</code> in the unit test. This is good since it sounds weird to have a "new binary search". It's confusing to hear this, since "binary search" is an algorithm and not a countable thing. It makes more sense to speak of "<em>the</em> binary search algorithm", avoiding the word "new". On the other hand, "new house" or "new sheet of paper" sounds much more natural.</p>

<hr>

<p>The helper method currently is:</p>

<pre><code>private static int search(int start, int end, int key, int[] sortedArray) {
</code></pre>

<p>The order of the parameters is not the usual one. Usually the array comes first, before its indexes. In this case, this would mean:</p>

<pre><code>private static int search(int[] sortedArray, int start, int end, int key) {
</code></pre>

<hr>

<p>When you compare your code with <a href="https://github.com/openjdk/jdk13/blob/dcd4014cd8a6f49a564cbb95387ad01a80a20bed/src/java.base/share/classes/java/util/Arrays.java#L1848" rel="nofollow noreferrer">the predefined Arrays.binarySearch</a> and <a href="https://github.com/openjdk/jdk13/blob/dcd4014cd8a6f49a564cbb95387ad01a80a20bed/src/java.base/share/classes/java/util/Arrays.java#L1909" rel="nofollow noreferrer">the helper function</a>, you can see that the code is quite similar, which is a good sign.</p>

<p>One useful thing that the predefined <code>Arrays.binarySearch</code> does is that if the element is not found, it returns a hint about the index where it would be found. This is useful to see the closest existing value.</p>

<h2>BinarySearchTest</h2>

<p>Your existing unit tests look good. You can leave out the word <code>test</code> at the beginning of the method names to make the names a little shorter. They are quite long, but that's ok.</p>

<p>There are test cases missing:</p>

<ul>
<li>An element from the middle cannot be found, for example 5 in <code>[1, 2, 6, 10]</code>.</li>
<li>The array contains duplicate values, for example 3 in <code>[1, 2, 3, 3, 3, 3, 3, 3, 3]</code>.</li>
</ul>

<p>In the latter case, it is unspecified whether <code>binSearch</code> should return 2 or 3 or any other index. All you can do in your unit test is to check that <span class="math-container">`</span>array[binSearch(array, key)] == key.</p>
    </div>