<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If I understand correctly, most or all of your "projects" follow the same format, even if they use different files and look for different data in different fields.</p>

<p>That says to me that you should try to squeeze out the repeated parts into various helpers, and try to put the boilerplate parts into some sort of common framework. </p>

<p>(Note: it looks like you are using Dropbox, and I suspect you're using it to move those files from the office to home. I don't know if you're paying for your dropbox or just using the free version, and I suspect that dropbox is probably better at security than most. But please <a href="https://blog.acolyer.org/2019/04/08/how-bad-can-it-git-characterizing-secret-leakage-in-public-github-repositories/" rel="nofollow noreferrer">be careful.</a></p>

<h2>Create a module for configuration data and setup</h2>

<p>Have a look at the help available from the <code>pip install --help</code> command, specifically the <code>-e (--editable)</code> option. This allows you to install from a directory or URL. </p>

<p>This will allow you to create a module that detects your home/office setup (if hostname == 'MY-PC': ... home ... else: ... office ...) and makes whatever configuration is appropriate. Then you can do something like:</p>

<pre><code>from kubik88 import Config
from kubik88.data_analysis import *
</code></pre>

<p>(Doing the <code>import *</code> allows you to import functions and classes from other modules-- just set your <code>__all__</code> correctly.) </p>

<h2>Use the <em>template method</em> pattern</h2>

<p>Create a class. Then create a <a href="https://en.wikipedia.org/wiki/Template_method" rel="nofollow noreferrer"><strong>template method</strong></a> on that class that summarizes your effort at the highest level. I'm basing mine off the text of your comments, and I stopped after a few steps because I hope you get the idea:</p>

<pre><code>class PatientDataAnalysis:

    def analysis(self):
        self.instantiate_objects()
        self.import_data()
        self.random_sample_dataframes()
        self.update_column_formats()
        self.import_reference_codes()
        self.define_constant_variables()
        ...
</code></pre>

<p>Notice I'm not doing any work, just calling some methods to do "primitive" operations.</p>

<p>Next, define methods to do the primitive things:</p>

<pre><code># Waaaay up at the top:
import pathlib

    def import_data(self):
        ''' Import all the project data into dataframes. '''
        for abbr, filename in self.data_files.items():
            self.import_csv(abbr, filename)

    def import_csv(self, abbr, filename, **kwargs):
        ''' Import one CSV file into a dataframe, and store it in 
            `self.dataframes` keyed by abbr. 
        '''
        options = (self.read_csv_options if not kwargs
                   else { **self.read_csv_options, **kwargs })
        filespec = self.base_path / self.real_data / filename
        df = pd.read_csv(str(filespec), **options)
        self.dataframes[abbr] = df
</code></pre>

<p>With this approach, you can now subclass the parent class and extend the methods that you care about, leaving the default behavior where you don't care (or where it just works):</p>

<pre><code>class DiabetesStudy2019(PatientDataAnalysis):
    def import_data(self):
        # Do the usual stuff
        super().import_data()
        # And also do one more thing:
        ...
</code></pre>

<h2>Use helper functions/methods to implement repeated operations:</h2>

<p>Pretty much anything you find yourself doing more than one time you should write a function to do. If you're lucky (or good) there will be a way to convert that function into a more "data-driven" approach:</p>

<pre><code>def reformat_date_field(self, df, fieldname, format='%Y-%m-%d'):
    df[fieldname] = pd.to_datetime(df[fieldname], format=format)

reformat_date_field(self.dataframes['dad'], 'ADMIT_DATE')
reformat_date_field(self.dataframes['dad'], 'DIS_DATE')
reformat_date_field(self.dataframes['pc'], 'SE_END_DATE')
reformat_date_field(self.dataframes['pc'], 'SE_START_DATE')
reformat_date_field(self.dataframes['nacrs'], 'ARRIVE_DATE')
reformat_date_field(self.dataframes['pin'], 'DSPN_DATE')
reformat_date_field(self.dataframes['reg'], 'PERS_REAP_END_RSN_DATE')
</code></pre>

<p>Which becomes:</p>

<pre><code>date_fields = (('dad', 'ADMIT_DATE'), ('dad', 'DIS_DATE'), ('pc', 'SE_END_DATE'),
               ('pc', 'SE_START_DATE'), ('nacrs', 'ARRIVE_DATE'), ('pin', 'DISP_DATE'),
               ('reg', 'PERS_REAP_END_RSN_DATE'))

for df, field in date_fields:
    reformat_date_field(self.dataframes[df], field)
</code></pre>

<p>(Or possibly some other data format that makes your life easy.)</p>

<p>The idea is to (1) make it clear what is happening by calling a named function; and (2) make it easy to extend or modify the list of fields by storing them as data instead of function calls.</p>
    </div>