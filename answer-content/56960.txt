<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Critique</h2>

<p>I think the following code was implied:</p>

<pre><code>public class MyObject {
    private int index;

    public MyObject(int i) {
        this.index = i;
    }

    public int getIndex() {
        return index;
    }

    public static void main(String[] args) {
        …
    }
}
</code></pre>

<p>That works, but <code>MyObject</code> is the least informative name for a class possible.  <code>Gunman</code> would be much better.  Similarly, I suggest renaming <code>objetList</code> to <code>gunmen</code>.</p>

<p>The <code>oneElementList</code> variable is pointless.  You could just say</p>

<pre><code>while (objetList.length != 1) { … }
</code></pre>

<p>Reconsolidating the list after reaching the end is inefficient.  You want to either implement a <a href="/questions/tagged/circular-list" class="post-tag" title="show questions tagged 'circular-list'" rel="tag">circular-list</a>, or as I've done below, simulate a circular buffer by using an iterator.  Since the problem calls for elements to be spliced out frequently, this is one of those rare situations where a <a href="/questions/tagged/linked-list" class="post-tag" title="show questions tagged 'linked-list'" rel="tag">linked-list</a> is useful.</p>

<h2>Suggested solution</h2>

<p>Since the code for the shootout loop can get rather complex, it's worth making an effort to simplify it.  By using an iterator, we can relieve ourselves of the need to use any array indices at all.</p>

<p>In this problem, a gunman is just a number.  I've represented it using an <code>Integer</code>.</p>

<pre><code>public class CircularGunmenIterator&lt;T&gt; implements Iterator&lt;T&gt; {

    private List&lt;T&gt; list;
    private Iterator&lt;T&gt; iter;

    public CircularGunmenIterator(List&lt;T&gt; list) {
        this.list = list;
        this.iter = list.iterator();
    }

    @Override
    public boolean hasNext() {
        // Continue as long as there is a shooter and a victim
        return this.list.size() &gt;= 2;
    }

    @Override
    public T next() {
        if (!this.iter.hasNext()) {
            // Wrap around, creating the illusion of a circular buffer
            this.iter = this.list.iterator();
        }
        return this.iter.next();
    }

    @Override
    public void remove() {
        this.iter.remove();
    }

    public static void main(String[] args) {
        // Create the gunmen
        List&lt;Integer&gt; gunmen = new LinkedList&lt;Integer&gt;();
        for (int i = 1; i &lt;= 100; i++) {
            gunmen.add(i);
        }

        // Shootout!
        Iterator&lt;Integer&gt; ringIter = new CircularGunmenIterator&lt;Integer&gt;(gunmen);
        while (ringIter.hasNext()) {
            Integer shooter = ringIter.next();
            Integer victim  = ringIter.next();
            System.out.printf("%2d shoots %2d\n", shooter, victim);
            ringIter.remove();  // Bang!
        }
        System.out.println("Last one alive: " + gunmen.get(0));
    }
}
</code></pre>
    </div>