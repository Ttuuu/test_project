<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've found trying to use attributes on a complex model to designate what you want to turn into a query string begins to break down the more that model is used elsewhere. Because not everywhere it is translated to query strings will you ALWAYS want to same set of query strings. So generally you create a model-per-querystring-context.  These models make attributes moot as the models are only going to have what they need anyways.</p>

<pre><code>var MyObject = new { 
                FirstName = "John",
                LastName = "Doe",
                MySSN = "111-11-1111",
                MyCC = "4820895069259441",
                MyCVV = "4820895069259441",
                MyDOB = DateTime.Now.AddYears(-20),
                MyImageArray = new byte[]{1,2,3,4,5,6,7,8,9} 
                };

var MyQueryGraph = new {
                                MyObject.FirstName,
                                MyObject.LastName,
                 DOB = MyObject.MyDOB.ToString("MM/dd/yyyy"),
            Image = Convert.ToBase64String(MyObject.MyImageArray)
            };
</code></pre>

<p>As far as turning an object to query string, I've used:</p>

<pre><code>using System;
using System.Linq;
using System.Collections.Generic;
using Newtonsoft.Json;

static class Helper
{
    public static string ToQueryString(this object model)
        {
            var serialized = JsonConvert.SerializeObject(model);
            var deserialized = JsonConvert.DeserializeObject&lt;Dictionary&lt;string,string&gt;&gt;(serialized);        
            var result = deserialized.Select((kvp) =&gt; kvp.Key.ToString() + "=" + Uri.EscapeDataString(kvp.Value)).Aggregate((p1,p2) =&gt; p1 + "&amp;" + p2);
            return result;
        }

}
</code></pre>

<p>and then:</p>

<pre><code>MyQueryGraph.ToQueryString();
</code></pre>
    </div>