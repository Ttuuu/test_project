<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It may be a better idea to use a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" rel="nofollow noreferrer">reducer</a> to initially add the properties to a subset of the elements of the array. Finally you can change the last element from the new Array with a property <code>isLastLayer</code>. I used <code>Array.find</code> within the reducer lambda and a custom function <code>findLast</code> for finding the last array-element with property <code>isLastLayer</code>.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const result = document.querySelector("#result");
const log = (...txt) =&gt; result.textContent += txt.join("\n") + "\n";

// moved to function, so the relevant code is more visible
const array = getTestArray();

// find the last element using the predicate lambda
const findLast = (array, predicate) =&gt; {
  for (let i = array.length - 1; i &gt;= 0; --i) {
    if (predicate(array[i])) {
      return array[i];
    }
  }
};

// reduce the values, adding the layer props to 
// all elements where the name does not start 
// with 'bus' or 'truck'. Use Array.find within the 
// accumulated array to determine if isFirstLayer
// is already in the set of elements
let newArray = array.reduce((acc, value) =&gt; {
  if (/^(bus|truck)/i.test(value.name)) {
    return [...acc, value];
  }
  const isFirst = !acc.find(el =&gt; "isFirstLayer" in el);
  value = { ...value,
    isFirstLayer: isFirst,
    isLastLayer: false
  };
  return [...acc, value];
}, []);

// use findLast to find the last element with
// a property 'isLastLayer' in the array, and 
// change its value
findLast(newArray, el =&gt; "isLastLayer" in el).isLastLayer = true;

// let's see if it worked
log(JSON.stringify(newArray, null, 2));

function getTestArray() {
  return [{
      "name": "Truck",
      "status": "Cancelled",
      "id": 10
    },
    {
      "name": "Bus",
      "status": "Approved",
      "id": 11
    },
    {
      "name": "Car1",
      "status": "Approved",
      "id": 12
    },
    {
      "name": "Car2",
      "status": "Cancelled",
      "id": 19
    },
    {
      "name": "Car3",
      "status": "Cancelled",
      "id": 13
    }
  ];
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;pre id="result"&gt;&lt;/pre&gt;</code></pre>
</div>
</div>


<p>It can also be done without the extra <code>findLast</code> function</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const result = document.querySelector("#result");
const log = (...txt) =&gt; result.textContent += txt.join("\n") + "\n";
const array = getTestArray();
let accumulator = {
  newArr: [], 
  // track first/last
  firstLayerSet: false,
  lastLastLayer: null
};
const addPropsReducer = (acc, value, i) =&gt; {
  if (/^(bus|truck)$/i.test(value.name)) {
    return {
      newArr: [...acc.newArr, value]
    };
  }
  value = { ...value,
    isFirstLayer: !acc.firstLayerSet,
    isLastLayer: false
  };
  return {
    ...acc,
    newArr: [...acc.newArr, value],
    firstLayerSet: true,
    lastLayerIndex: i
  };
};

let newArray = array.reduce(addPropsReducer, accumulator);
newArray.newArr[newArray.lastLayerIndex].isLastLayer = true;

// ditch tracking values
newArray = newArray.newArr;

log(JSON.stringify(newArray, null, 2));

function getTestArray() {
  return [{
      "name": "Truck",
      "status": "Cancelled",
      "id": 10
    },
    {
      "name": "Bus",
      "status": "Approved",
      "id": 11
    },
    {
      "name": "Car1",
      "status": "Approved",
      "id": 12
    },
    {
      "name": "Car2",
      "status": "Cancelled",
      "id": 19
    },
    {
      "name": "Car3",
      "status": "Cancelled",
      "id": 13
    }
  ];
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;pre id="result"&gt;&lt;/pre&gt;</code></pre>
</div>
</div>


<p>Play with this code in <a href="https://jsfiddle.net/KooiInc/Ltyknpwg/" rel="nofollow noreferrer">jsFiddle</a>.</p>
    </div>