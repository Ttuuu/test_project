<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd say your solution is pretty good! Since you probably won't re-use your <code>leibniz-numerator</code> function, you might want to make it private by declaring it with <code>defn-</code>, or you could declare it within the body of your main function using <code>let</code> or <code>letfn</code>.</p>

<p>Also, you might notice that your function actually computes pi with half the number of terms given has parameters (might not be of importance).</p>

<p>I can share some alternatives I came up with.</p>

<p>We could start by generating the sequence <code>(4 -4 4 -4...)</code>. To do that, we can use the method <code>iterate</code>:</p>

<pre><code>(take 4 (iterate - 4))
;;=&gt; (4 -4 4 -4)
</code></pre>

<p>Then we want the sequence <code>(1 3 5 7)</code>. You already found method <code>range</code>for that:</p>

<pre><code>(take 4 (range 1 10 2))
;;=&gt; (1 3 5 7)
</code></pre>

<p>If you divide those to element wise, you will get <code>(4 -4/3 4/5 -4/7...)</code>. You can do that with <code>map</code></p>

<pre><code>(take 4 (map / (iterate - 4) (range 1 10 2)))
;;=&gt; (4 -4/3 4/5 -4/7)
</code></pre>

<p>In our final computation, this can get really slow because we're using decimals. Let's use floats instead, and put everything together:</p>

<pre><code>(defn calc-pi-leibniz [terms]
  (reduce + (map / (iterate - 4.0) (range 1.0 terms 2.0))))
</code></pre>

<p>But for some reason, this is 5 times slower than your solution. If someone could tell me why, I'd be grateful. I suspect that is because map has to go through two lists instead of one, but since they are both lazy this should not matter?</p>

<p>For a faster solution (but less elegant), we can see that there are two subsequences in the leibniz formula. One that is <code>(4 4/5 4/9)</code> and one that is <code>(-4/3 -4/7 -4/11)</code>. With that in mind, you can get the following:</p>

<pre><code>(defn calc-pi-leibniz [terms]
  (* 4 (- (reduce + (map / (range 1.0 terms 4.0)))
          (reduce + (map / (range 3.0 terms 4.0))))))
</code></pre>

<p>Which runs as fast as your solution.</p>
    </div>