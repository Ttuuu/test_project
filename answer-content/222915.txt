<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Design</h3>

<ul>
<li>As you noticed, a service locator is a problematic solution for your <code>IFamilyGraph</code> dependency problem in <code>BaseRelationships</code>. There's a much simpler solution: make these methods extensions for <code>IFamilyGraph</code>. It's <code>IFamilyGraph</code> that lets you obtain relationships for a person, so that is the API that you're extending. Alternately, you could pass <code>IFamilyGraph</code> as an argument, but that results in a less intuitive API in my opinion.</li>
<li>Supporting 'intrinsic' relationships via extension methods is not necessarily a good idea. For example, because you're limited to using a public API, you may not be able to apply certain optimizations compared to a 'native' implementation. In this case, you're fetching all relationships of a person, only to select a few of them, or to fetch the relationships of those relationships. With a database-backed implementation, this may lead to more database roundtrips and more data transfer than necessary.</li>
<li>Your naming is inconsistent. <code>Edge</code> make sense when dealing with a graph data structure, but because your API is focused on family relationships, and because you're referring to <code>Person</code>s rather than nodes, I would rename <code>Edge</code> to <code>Relationship</code>. Similarly, <code>Add</code> and <code>Get</code> make sense in a general-purpose data structure, but here names like <code>AddPerson</code> and <code>GetRelationships</code> improve clarity.</li>
<li>Splitting things up into an <code>IPersonStore</code> and <code>IFamilyGraph</code> might make sense, but having to use both at different times makes your code difficult to use. I would combine them into a single API that lets you register and look up both people and their relationships.</li>
</ul>

<h3>Other notes</h3>

<ul>
<li><code>FamilyGraph</code> depends on an <code>IPersonStore</code>, so I would pass it as a constructor argument. This makes the dependency visible, and gives you more flexibility, such as being able to simultaneously test multiple family graphs, each with their own test person store.</li>
<li><code>FamilyGraph</code> uses <code>Person</code> as key. <code>Person</code> does not implement <code>Equals</code> and <code>GetHashCode</code>, so that is problematic, but this also means that <code>FamilyGraph</code> 'duplicates' data from <code>PersonStore</code>, and that callers are forced to first obtain a <code>Person</code> object before they can fetch that persons relationships. That complicates things - see <code>Relationships</code>. Using person names (or rather, a <em>unique</em> identifier) for lookup and as keys whenever possible should make the API a little easier to use.</li>
<li>With <code>FamilyGraph.PersonStore</code> being injected, the relationship extension methods being extensions on <code>IFamilyGraph</code>, and <code>FamilyGraph.Get</code> no longer requiring a <code>Person</code> but a <code>name</code> instead, there's no need for <code>ServiceLocator</code> anymore.</li>
<li><code>FamilyGraph.Get</code> returns a mutable relationships object. This allows outside code to mess with internal state, bypassing <code>FamilyGraph.Add</code>. With the current implementation, that may work, but it'll break when you switch to a database-backed graph. Don't expose internal state: return a sequence of immutable relationships instead.</li>
<li>There's no use for <code>IPersonRelationships</code> and <code>IRelationships</code> - <code>PersonRelationships</code> is a simple internal data object, and <code>Relationships</code> is a set of high-level convenience methods. There's no use in creating interfaces for everything.</li>
<li>Organizing code into namespaces based on type (enums, interfaces) is not very useful, I think. In this case there aren't that many types anyway, so you might as well leave everything in the same namespace. Mark types that should not be exposed as part of the public API as <code>internal</code>.</li>
<li>It's a good idea to document preconditions (such as that <code>PersonStore.Add(Person)</code> won't accept a person whose name is already taken) and failure behavior (such as the effect of <code>PersonStore.Add(IEnumerable&lt;Person&gt;)</code> when one of the given persons cannot be added - does it roll back the changes? If not, how does a caller know which persons were added?).</li>
</ul>

<h3>C# specific</h3>

<ul>
<li>Using field initializers lets you remove the <code>PersonStore</code> and <code>FamilyGraph</code> constructors.</li>
<li><code>try { DoSomething(); } catch (Exception) { throw; }</code> is pointless. Just write <code>DoSomething();</code> instead.</li>
<li>You could make more use of <code>var</code>. There's no need to repeat type names in statements like <code>List&lt;Person&gt; result = new List&lt;Person&gt;();</code>.</li>
<li>Accepting a <code>List&lt;T&gt;</code> instead of an <code>IEnumerable&lt;T&gt;</code> so you can use <code>List.ForEach</code> is restrictive for callers, and doesn't really offer any benefits: <code>ForEach</code> can easily be replaced with a <code>foreach</code> loop.</li>
<li><code>out</code> variables can be declared in-line: <code>people.TryGetValue(personName, out var person)</code>.</li>
<li>As mentioned above, <code>Person</code> does not implement <code>Equals</code> and <code>GetHashCode</code>. This means that dictionary lookups will only work for the exact same instance: <code>Families[new Person("A", Gender.Male)] = ...; Families.ContainsKey(new Person("A", Gender.Male)) --&gt; false</code>.</li>
<li>Instead of doing a dictionary <code>TryAdd</code> method followed by a <code>TryGetValue</code>, call <code>TryGetValue</code> first and then, only if necessary, call <code>Add</code>.</li>
<li>You occasionally create a list with <code>ToList()</code>, only to add it to another list (<code>results.AddRange(...)</code>) and then return that list. It's more efficient to return that first list directly.</li>
</ul>
    </div>