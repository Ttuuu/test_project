<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The algorithm can be improved, so that we do less work:</p>

<p>Use the fact that multiples of 3 have a sum of digits that's also a multiple of 3.  That means we can select all the distinct <em>combinations</em> of digits, and discard any that don't sum to a multiple of 3.  Only for those sets not discarded, we can compute the number of permutation of the selected digits.  (Note that we don't have to actually produce all the numbers, merely count them - so if we have <em>n</em> different digits, we count <em>n</em>! permutations; if <em>p</em> of them are identical, then <em>n</em>!/<em>p</em>!, and so on).</p>

<p>For example, with input <code>5532</code>:</p>

<ul>
<li>5+5+3+2 is 15, this gives us 4!/2! permutations that are multiples of 3 (and remember 5532 as the largest such multiple).</li>
<li>5+5+3 is 13, so ignore it.</li>
<li>5+5+2 is 12, giving us 3!/2! more permutations to add to our count.</li>
<li>5+3+2 is 10; ignore it.</li>
<li>5+5 is 10; ignore it.</li>
<li>5+3 is 8; ignore it.</li>
<li>5+2 is 7; ignore it.</li>
<li>2+3 is 5; ignore it.</li>
<li>5 alone - ignore</li>
<li>3 alone - add one to the count.</li>
<li>2 alone - ignore.</li>
</ul>

<p>And we're done; the total count is 4!/2! + 3!/2! + 1 = 16.</p>
    </div>