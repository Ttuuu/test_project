<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>public static final int TILE_SIZE = 5;
</code></pre>
<p>Maybe call this <code>TILE_EDGE_SIZE</code> or something similar, as a tile doesn't contain 5 squares.</p>
<pre><code>public Object get(int x, int y) {
</code></pre>
<p>Remove this, just use <code>get(Point p)</code>, it's not that more work.</p>
<pre><code>return OFF_LIMIT;
</code></pre>
<p>This single <em>magic value</em> is keeping you from using the correct class for the Array. Magic values are something you might want to avoid. If you really want to avoid an exception, use <code>Optional&lt;Square&gt;</code>. But personally I would throw an exception and use <code>Optional</code> instead of returning <code>null</code>.</p>
<pre><code>throw new IndexOutOfBoundsException("Point " + new Point(x, y) + " is out of the board");
</code></pre>
<p>I knew you could do it, now make the methods <em>symmetric</em> on how they handle out of bounds.</p>
<pre><code>public int getWidth() {
...
public int getHeight() {
</code></pre>
<p>Perfect, no reason why the application would ever return <code>OFF_LIMIT</code> then.</p>
<hr>
<pre><code>Map&lt;Character, Object[][]&gt; tileList = getTileList();
</code></pre>
<p>Mixing collections and arrays is not a good idea; just use collections.</p>
<pre><code>List&lt;Character&gt; randomTiles = new LinkedList&lt;&gt;(tileList.keySet());
</code></pre>
<p>To be precise, you'd use <code>ArrayList</code> here, not a linked list.</p>
<pre><code>Collections.shuffle(randomTiles);
</code></pre>
<p>Because looking up random indexes and then moving them around in a linked list is just not a good idea.</p>
<pre><code>fillWithTile(board, tileList.get(randomTiles.get(i * heightTiles + j)), i * Board.TILE_SIZE, j * Board.TILE_SIZE, rnd.nextInt(4));
</code></pre>
<p>Way too much is going on in this method, split it out. Why is this happening and what is it doing? Why is there a magic <code>4</code> in there, 4 of what?</p>
<pre><code>if (2 * i + 1 &lt; rows[rows.length - 1 - j].length()) {
</code></pre>
<p>Again, from here we can see how things are being done, but not what or why. The helpful (if incomplete) JavaDoc does help somewhat, but a comment would be appreciated.</p>
<pre><code>private static Map&lt;Character, Object[][]&gt; getTileList() {
</code></pre>
<p>Way too much is being done in this method, the amount of complexity is astounding.</p>
<pre><code>if (lineChar == 'O') { // ... endless else if's
</code></pre>
<p>Here a switch would do wonders, but don't forget the <code>break;</code> statements.</p>
<pre><code>currentTileContent[i][Board.TILE_SIZE - lineCount] = null;
</code></pre>
<p>What about <code>Object tileContent;</code> declaration, then set it in the <code>switch</code>, and in the end assign it to <code>currentTileContent[i][Board.TILE_SIZE - lineCount]</code>. Too much copy / paste if you ask me.</p>
<pre><code> currentTileContent[i][Board.TILE_SIZE - lineCount] = new Road(false, true, false, true);
</code></pre>
<p>Ah, a road that goes <code>false, true, false, true</code>. That's not a <code>true</code> road, use <code>enum</code> instead of boolean parameters. It's in Effective Java, which you should read.</p>
<pre><code> EnumSet&lt;Direction&gt; possibleDirections = EnumSet.of(Direction.RIGHT, Direction.LEFT);
</code></pre>
<p>is just soooo much nicer, don't you agree?</p>
<pre><code>char previous = (i == 0 ? 'O' : currentLine.charAt(i - 1));
char next = (i == Board.TILE_SIZE - 1 ? 'O' : currentLine.charAt(i + 1));
if ((isHorizontalRoad(previous) || i == 0) &amp;&amp; !isHorizontalRoad(next)) {
    currentTileContent[i][Board.TILE_SIZE - lineCount] = new Road(true, false, false,
            true);
} else if (!isHorizontalRoad(previous)
        &amp;&amp; (isHorizontalRoad(next) || i == Board.TILE_SIZE - 1)) {
    currentTileContent[i][Board.TILE_SIZE - lineCount] = new Road(false, true, true,
            false);
} else {
    throw new IllegalStateException("Unknown combination on ( " + currentLine + ")");
}
</code></pre>
<p>One value is returned: a <code>Road</code>. Method maybe? So easy to distinguish.</p>
<pre><code>currentTileContent[i][Board.TILE_SIZE - lineCount] = GoodsSource.SODA;
</code></pre>
<p>Ah, now I get it. A <code>Road</code>, <code>GoodsSource</code> a <code>House</code> or nothing is expected. Still, create a marker interface such as <code>TileContent</code> at the very least, and have <code>Road</code> and <code>GoodsSource</code> implement it so you don't need <code>Object</code>, because that's too ugly.</p>
<pre><code>throw new Error("tiles.txt not available", e);
</code></pre>
<p>Not fully readable is maybe a better exception. <code>RuntimeException</code>should be preferred over <code>Error</code> which is commonly not recoverable <em>system wide</em>.</p>
<pre><code>} else if ((prevHouse = board.get(boardPoint.add(0, -1))) instanceof House
        &amp;&amp; ((House) prevHouse).getOrder() == ((House) inTile).getOrder()) {
    // check house below
    board.set(boardPoint, prevHouse);
</code></pre>
<p>OK, so you are creating larger houses. I think I can be mean and create a house that's made up of separate parts. I hope that your houses are square :) But really, again, provide methods.</p>
<p>Enum values can be directly compared, no need to compare <code>order</code> for equality.</p>
<pre><code>throw new IllegalArgumentException("Should not happen");
</code></pre>
<p>I agree there, such an exception is not acceptable.</p>
<pre><code>    return this.canMove[inDirection.ordinal()];
</code></pre>
<p>Or <code>possibleDirections.contains(inDirection)</code> (see above?)</p>
    </div>