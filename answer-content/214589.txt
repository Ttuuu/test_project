<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Indentation</h3>

<p>Frankly, your indentation is all over the place!</p>

<p>The basic idea of indentation is that you indent based on scope. A scope begins with <code>{</code> and ends with <code>}</code> (you can omit the <code>{ }</code> sometimes but you shouldn't). I'll indent a few snippets of your code and you can do the rest. You seem to put <code>{</code> on the next line more often than you put <code>{</code> on the same line so that's the convention I've used. Using this convention, the <code>{</code> should be indented to the same depth as the matching <code>}</code>.</p>

<pre><code>printf("Please enter any number:\n");
if (scanf("%f", &amp;a) != 1) 
{
    fprintf(stderr, "error: first input must be a number\n");
    return EXIT_FAILURE;
}

// ...

switch(n)
{
    case 1:
        c = a + b;
        printf("The answer is:%f\n", c);
        break;
}
printf("would you like to try again? (y/n)\n");
scanf(" %c", &amp;choice);
</code></pre>

<p>Indentation is really the only major problem with this code. </p>

<h3>Extensibility</h3>

<p>You could use <code>double</code>s instead of <code>float</code>s to gain a little bit of extra precision. If you want to make this program really easy to extend (after you've learnt about a bunch of new stuff) then you could store the operations in an array. Then the user will type <code>add</code> you'll look up a function pointer in an array. Something like this:</p>

<pre><code>typedef struct {
    const char *name;
    double (*func)(double, double);
} Operation;

const Operation ops[] = {
    {"add", add},
    {"sub", sub}
    // ...
};
</code></pre>

<p>I'll let you figure out the details. Some things you'll need to look up are arrays, structs, function pointers and string comparison (<code>strcmp</code>).</p>

<h3>Unary operations</h3>

<p>You could complicate things further by allowing unary operations (e.g. <code>sin</code>, <code>sqrt</code>). You'll need separate arrays for unary and binary operations.</p>

<pre><code>typedef struct {
    const char *name;
    double (*func)(double);
} UnaryOperation;

typedef struct {
    const char *name;
    double (*func)(double, double);
} BinaryOperation;
</code></pre>

<h3>Parsing</h3>

<p>If you're up for a real challenge you could allow the user to enter an expression like <code>14 + 2 * sin(0.8)</code> and evaluate the expression. This sort of thing is quite tricky indeed! You'll need to learn about recursive descent parsing (there are other types of parsing but this is probably the easiest), memory management and pointers. The last time I did something like that, the resulting program was 700 lines so it's quite a step up from the code in your question.</p>
    </div>