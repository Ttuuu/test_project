<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Include the headers we need</h1>

<pre><code>#include &lt;string&gt;
#include &lt;vector&gt;
</code></pre>

<h1>Don't make unnecessary copies</h1>

<pre><code>std::string longestSubstring(const std::string&amp; digits) {
</code></pre>

<p>Also, consider storing <code>std::string_view</code> objects internally, as these are much lighter than owning strings.</p>

<h1>Fix the bug</h1>

<p>I get a SIGABRT when I call with empty string as argument:</p>

<pre class="lang-none prettyprint-override"><code>==1629582==    by 0x4914B54: __cxa_throw (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)
==1629582==    by 0x490C090: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)
==1629582==    by 0x10AC0B: std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::at(unsigned long) const (basic_string.h:1087)
==1629582==    by 0x10A30F: longestSubstring(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (238652.cpp:12)
==1629582==    by 0x10A725: main (238652.cpp:46)
</code></pre>

<h1>Use the algorithm library</h1>

<p>The standard <code>&lt;algorithm&gt;</code> library has the tools you need, that will save you writing much tedious and error-prone code for yourself.</p>

<p>The most useful function here is <code>std::adjacent_find()</code>, which you can use with a simple predicate such as</p>

<pre><code>auto const both_even_or_both_odd
    = [](auto a, auto b){ return a % 2 == b % 2; };
</code></pre>

<h1>No need to store all the substrings</h1>

<p>We only need to remember the longest substring seen so far, so there's no need for the two vectors.  Just have a single <code>std::string_view</code> variable that you update when you find a longer run than the existing one.</p>

<hr>

<h1>Modified version</h1>

<p>Here's a version using <code>std::adjacent_find()</code> as suggested:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;string&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;

std::string longestSubstring(const std::string&amp; digits)
{
    std::string longest = "";

    auto const same_mod2 = [](auto a, auto b){ return a % 2 == b % 2; };

    auto start = digits.begin();
    while (start &lt; digits.end()) {
        auto finish = std::adjacent_find(start, digits.end(), same_mod2);
        if (finish != digits.end()) {
            ++finish;
        }
        auto const candidate = std::string{start, finish};
        if (candidate.size() &gt; longest.size()) {
            longest = std::move(candidate);
        }
        start = finish;
    }

    return std::string{longest};
}
</code></pre>

<p>And a simple test:</p>

<pre><code>#include &lt;iostream&gt;

int main()
{
    for (auto const&amp; s: { "", "0", "11", "01", "112",
                          "0112", "01224", "01223", "01123" }) {
        std::cout &lt;&lt; s &lt;&lt; "--&gt;" &lt;&lt; longestSubstring(s) &lt;&lt; '\n';
    }
}
</code></pre>
    </div>