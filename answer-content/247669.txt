<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What I found out by simply taking the time the calculation takes, is that casting to <code>Decimal</code> is a very costly operation. Dropping that in certain places (see my code) brings down the overall runtime to ~ 30-40%.</p>
<p>Besides, the Leibnitz terms can easily be precomputed (another Best Practice of optimization) as the list will be comparatively short. Surprisingly, this does not save much.</p>
<p>Using a module method with a local name save some time as well (<code>import xxx from this_module as local_name</code> instead of using <code>this_module.xxx</code> multiple times).</p>
<p>In <code>EulerAccelerate()</code>, the loop variable <code>i</code> does not need to be of type <code>Decimal</code> which saves a lot. Replacing <code>2**(i+1)</code> with a simple addition yields another (small) saving.</p>
<p>Stepping back from the code analysis, I think changing the algorithm from recursive to iterative would speed up the calculation a lot, much more than those micro-optimizations.</p>
<p>results on my notebook: <code>maxdepth=24</code>, accurate to 8 places: pi=3.1415926, runtime=10 s</p>
<pre><code>    import functools
    from decimal import Decimal
    import time

    ## @functools.lru_cache(maxsize = 12800)
    def ndifference(n, depth):
        if depth == 0:
            return LT[n]  #   = 1.0/(2*n + 1)
        a = ndifference(n, depth-1)
        b = ndifference(n+1, depth-1)
        return (a - b)

    def EulerAccelerate(n):
        pi = 0
        ith_power_of_2 = 2                # 2**(i+1)
        for i in range(n):
            pi += Decimal(ndifference(0, i)) / ith_power_of_2
            ith_power_of_2 += ith_power_of_2
        return pi


    # ---------------------------------
    maxdepth = 24
    # create Leibnitz terms beforehand; LT is global
    LT = [(1.0/(2.0*i+1.0)) for i in range(maxdepth+1)]

    t = time.time()
    print 4 * EulerAccelerate(maxdepth)
    print time.time()-t
</code></pre>
    </div>