<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Also If I'm missing any corner cases please let me know as this code is tested on very few examples as I <strong>didn't find any online problem that checks its appropriate output.</strong></p>
</blockquote>

<p>[emphasis mine]</p>

<p>Graph colouring is a relatively nice problem in that regard: you can easily check the validity of the result. The only conditions are that every vertex must have a color, the number of colors must be less-than-or-equal-to <code>m</code>, and neighboring vertices don't share a color. So as a test you could generate random graphs (or for small graphs, enumerate all symmetric graphs without self-loops), color them, and theck the results. Any valid coloring is appropriate. The main problem is testing whether graphs that your algorithm decides are not m-colorable are <em>actually</em> not m-colorable.</p>

<p>I suspected there was such an issue (as this algorithm never "uncolors" a vertex, it should be possible for it to get stuck) so I enumerated some graphs to find a concrete breaking test-case:</p>

<pre><code>int n = 6, m = 3;
int[][] graph = {
    {0, 1, 0, 0, 1, 1},
    {1, 0, 1, 1, 0, 1},
    {0, 1, 0, 1, 0, 0},
    {0, 1, 1, 0, 0, 1},
    {1, 0, 0, 0, 0, 0},
    {1, 1, 0, 1, 0, 0}};
</code></pre>

<p>This algorithm results in <code>[1, 2, 1, 3, 3, 0]</code>, the zero indicating that no valid coloring was found, but there actually are valid colorings, for example <code>[1, 2, 3, 1, 2, 3]</code>. Just to confirm that it's a valid coloring, here it is as a drawing:</p>

<p><a href="https://i.stack.imgur.com/c4xAl.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/c4xAl.png" alt="coloring"></a></p>

<p>Keep in mind though that if there is one valid coloring, there are almost always many more. Even if there are no fundamentally different colorings, the color-names can be permuted to yield a superficially different-looking coloring. So test-cases should not compare for equality with some coloring found by a different solver, that's too strict.</p>

<p>To find that case I had to implement an other graph colorer that is capable of coloring the graph above, I used this small rewrite of your code:</p>

<pre><code>static int[] graphColor(int m, int[][] graph) {
    int[] colors = new int[graph.length];
    // the color of the first vertex is a free pick
    colors[0] = 1;
    if (graphColorInternal(1, m, colors, graph))
        return colors;
    else
        return null;
}

static boolean graphColorInternal(int k, int m, int colors[], int graph[][]) {
    for (int c = 1; c &lt;= m; c++) {
        if (isSafe(k, c, colors, graph)) {
            colors[k] = c;
            if (k + 1 &lt; colors.length) {
                if (graphColorInternal(k + 1, m, colors, graph))
                    return true;
                colors[k] = 0;
            }
            else
                return true;
        }
    }
    return false;
}

static boolean isSafe(int k, int c, int[] colors, int graph[][]) {
    for (int i = 0; i &lt; colors.length; i++) {
        if (graph[k][i] == 1 &amp;&amp; c == colors[i])
            return false;
    }
    return true;
}
</code></pre>

<p>In addition to the line <code>colors[k] = 0;</code> which gets the solver "unstuck" after backtracking, there are some more changes that I would like to highlight:</p>

<ul>
<li>The function <code>graphColor</code> that is supposed to be called <em>returns</em> its result, rather than modifying a function argument. Generally you should prefer that. Output-parameters <a href="http://www.javapractices.com/topic/TopicAction.do?Id=37" rel="nofollow noreferrer">should be avoided</a>, unless there is a good enough reason not to.</li>
<li><code>graphColor</code> does not take redundant parameters (<code>n</code>, which it knows from the <code>graph</code> itself).</li>
<li>The search indicates explicitly whether it found something or failed, so the wrapper does not have to inspect the coloring to find that out.</li>
<li>The search returns immediately after finding a valid coloring. The original algorithm does not return immediately, it tries to fill in different colors though most of it fails because <code>isSafe</code> returns <code>false</code> a lot when given a filled coloring.</li>
</ul>

<blockquote>
  <p>I would like review about <strong>its performance, time complexity</strong> and improvements.</p>
</blockquote>

<p>Not much can be done about the time complexity, not for the worst case anyway: graph coloring is NP-complete after all.</p>

<p>But there are things that can be done.</p>

<ul>
<li>Rather than coloring the vertices simple in order of their index, color them in order of Most Constrained Variable (MCV) first, that is, color the vertex with the most colored neighbors first. </li>
<li>Maintain a set of "possible colors" for every vertex. This makes it easy to detect early that the current partial-coloring is no good (if any vertex has an empty set of colors left, backtrack), and easy to find the MCV (uncolored vertex with the smallest set of possible colors). It also means that rather than checking <code>isSafe</code> for every color, the solver already has a list of possible colors - though of course it pays for that by maintaining those sets every time the color of a vertex is changed.</li>
<li>Advanced: improve those sets of possible colors with the <a href="https://en.wikipedia.org/wiki/AC-3_algorithm" rel="nofollow noreferrer">AC-3 Algorithm</a> or similar. </li>
</ul>
    </div>