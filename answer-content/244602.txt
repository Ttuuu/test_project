<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can tidy up the code a bit by directly returning results from functions and not using temporary variables you use only once.</p>
<p>I would also do the conversion to floats directly in the functions.</p>
<p><code>BeautifulSoup</code> can directly work on the binary <code>response.content</code>, no need to decode it into a string yourself by using <code>response.text</code>.</p>
<pre><code>def get_metal_values():
    response = requests.get('https://www.lme.com/')
    response.raise_for_status()
    soup = BeautifulSoup(response.content, 'lxml')
    metal_table = soup.find("table", attrs={"class": "ring-times"})
    names = [name.text.replace("LME ", "").rstrip("*")
             for name in metal_table.tbody.find_all("th")]
    prices = [float(price.text.strip().replace(",", ""))
              for price in metal_table.tbody.find_all("td")]
    return zip(names, prices)

def get_peso_conversion():
    response = requests.get('https://themoneyconverter.com/USD/MXN')
    response.raise_for_status()
    soup = BeautifulSoup(response.content, 'lxml')
    conversion = soup.find("div", class_="cc-result").text
    return float(re.search("\d{2}\.\d{4}", conversion).group())

def get_time():
    return datetime.datetime.now().strftime("%d/%m/%Y | %H:%M:%S")

def convert_values():
    exchange_rate = get_peso_conversion()
    for name, price in get_metal_values():
        print(f'{metal_translation[name]}: {price*exchange_rate:.2f} $')
</code></pre>
<p>Note that I also stripped the trailing <code>"*"</code> in the names as I didn't see a reason to keep them.</p>
    </div>