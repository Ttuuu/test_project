<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Missing headers</h1>

<ul>
<li><code>&lt;cstddef&gt;</code> for <code>std::nullptr_t</code></li>
<li><code>&lt;type_traits&gt;</code> for <code>std::is_base_of_v</code>, <code>std::is_same_v</code>, <code>std::enable_if_t</code></li>
<li><code>&lt;utility&gt;</code> for <code>std::exchange</code>, <code>std::forward</code></li>
</ul>

<h1>Layout</h1>

<p>The code is hard to read, with long lines and huge blocks of spaces (perhaps a misguided attempt to align keywords?).  Stick to a conventional layout and it will be much easier to read.</p>

<h1>Fix the errors and warnings</h1>

<p>These should need no further explanation (except perhaps the one caused by misspelling <code>std::nullptr_t</code>):</p>

<pre class="lang-none prettyprint-override"><code>231599.cpp: In member function ‘resource&amp; resource::operator=(resource&amp;&amp;)’:
231599.cpp:13:55: warning: no return statement in function returning non-void [-Wreturn-type]
   13 |     resource&amp; operator = (resource&amp;&amp;)       noexcept {};
      |                                                       ^
      |                                                       return *this;
231599.cpp: In member function ‘resource&amp; resource::operator=(const resource&amp;)’:
231599.cpp:14:55: warning: no return statement in function returning non-void [-Wreturn-type]
   14 |     resource&amp; operator = (const resource&amp;)  noexcept {};
      |                                                       ^
      |                                                       return *this;
231599.cpp: At global scope:
231599.cpp:43:7: warning: extra ‘;’ [-Wpedantic]
   43 |     {};
      |       ^
      |       -
231599.cpp:57:5: error: non-static data member ‘nullptr_t’ declared ‘constexpr’
   57 |     constexpr   res_ptr(nullptr_t)  noexcept {};
      |     ^~~~~~~~~
231599.cpp:57:34: error: expected ‘;’ at end of member declaration
   57 |     constexpr   res_ptr(nullptr_t)  noexcept {};
      |                                  ^
      |                                   ;
231599.cpp:57:37: error: expected unqualified-id before ‘noexcept’
   57 |     constexpr   res_ptr(nullptr_t)  noexcept {};
      |                                     ^~~~~~~~
231599.cpp:63:6: warning: extra ‘;’ [-Wpedantic]
   63 |     };
      |      ^
      |      -
231599.cpp:83:6: warning: extra ‘;’ [-Wpedantic]
   83 |     };
      |      ^
      |      -
231599.cpp:94:7: warning: extra ‘;’ [-Wpedantic]
   94 |     {};
      |       ^
      |       -
231599.cpp:169:14: error: declaration of template parameter ‘PResource’ shadows template parameter
  169 |     template&lt;typename PResource&gt;
      |              ^~~~~~~~
231599.cpp:49:10: note: template parameter ‘PResource’ declared here
   49 | template&lt;typename PResource&gt;
      |          ^~~~~~~~
231599.cpp:175:14: error: declaration of template parameter ‘PResource’ shadows template parameter
  175 |     template&lt;typename PResource&gt;
      |              ^~~~~~~~
231599.cpp:49:10: note: template parameter ‘PResource’ declared here
   49 | template&lt;typename PResource&gt;
      |          ^~~~~~~~
231599.cpp: In constructor ‘res_ptr&lt;PResource, typename std::enable_if&lt;is_base_of_v&lt;resource, PResource&gt;, void&gt;::type&gt;::res_ptr(res_ptr&lt;PResource, typename std::enable_if&lt;is_base_of_v&lt;resource, PResource&gt;, void&gt;::type&gt;&amp;&amp;)’:
231599.cpp:87:20: error: ‘exchange’ is not a member of ‘std’
   87 |         m_ptr(std::exchange(ptr.m_ptr, nullptr))
      |                    ^~~~~~~~
231599.cpp: In constructor ‘res_ptr&lt;PResource, typename std::enable_if&lt;is_base_of_v&lt;resource, PResource&gt;, void&gt;::type&gt;::res_ptr(res_ptr&lt;PResourceDerived&gt;&amp;&amp;)’:
231599.cpp:93:44: error: ‘exchange’ is not a member of ‘std’
   93 |         m_ptr(static_cast&lt;PResource*&gt;(std::exchange(ptr.m_ptr, nullptr)))
      |                                            ^~~~~~~~
231599.cpp: In member function ‘res_ptr&lt;PResource, typename std::enable_if&lt;is_base_of_v&lt;resource, PResource&gt;, void&gt;::type&gt;&amp; res_ptr&lt;PResource, typename std::enable_if&lt;is_base_of_v&lt;resource, PResource&gt;, void&gt;::type&gt;::operator=(res_ptr&lt;PResource, typename std::enable_if&lt;is_base_of_v&lt;resource, PResource&gt;, void&gt;::type&gt;&amp;&amp;)’:
231599.cpp:116:26: error: ‘exchange’ is not a member of ‘std’
  116 |             m_ptr = std::exchange(other.m_ptr,nullptr);
      |                          ^~~~~~~~
231599.cpp: In member function ‘res_ptr&lt;PResource, typename std::enable_if&lt;is_base_of_v&lt;resource, PResource&gt;, void&gt;::type&gt;&amp; res_ptr&lt;PResource, typename std::enable_if&lt;is_base_of_v&lt;resource, PResource&gt;, void&gt;::type&gt;::operator=(res_ptr&lt;PResourceDerived&gt;&amp;&amp;)’:
231599.cpp:139:46: error: ‘exchange’ is not a member of ‘std’
  139 |         m_ptr = static_cast&lt;PResource*&gt;(std::exchange(other.m_ptr,nullptr));
      |                                              ^~~~~~~~
231599.cpp: In function ‘int main()’:
231599.cpp:207:34: error: invalid use of incomplete type ‘class res_ptr&lt;int, void&gt;’
  207 |     auto a = make_resource&lt;int&gt;(5);
      |                                  ^
231599.cpp:47:7: note: declaration of ‘class res_ptr&lt;int, void&gt;’
   47 | class res_ptr;
      |       ^~~~~~~
231599.cpp: In instantiation of ‘res_ptr&lt;PResource&gt; make_resource(Args&amp;&amp; ...) [with PResource = int; Args = {int}]’:
231599.cpp:207:34:   required from here
231599.cpp:186:29: error: return type ‘class res_ptr&lt;int, void&gt;’ is incomplete
  186 | res_ptr&lt;PResource&gt;          make_resource(Args&amp;&amp; ... args)
      |                             ^~~~~~~~~~~~~
231599.cpp:188:12: error: invalid use of incomplete type ‘class res_ptr&lt;int, void&gt;’
  188 |     return res_ptr&lt;PResource&gt;(new PResource(std::forward&lt;Args&gt;(args)...));
      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
231599.cpp:47:7: note: declaration of ‘class res_ptr&lt;int, void&gt;’
   47 | class res_ptr;
      |       ^~~~~~~
</code></pre>

<h1>Usage guidance</h1>

<p>My first simple test, expecting a similar interface to <code>std::make_shared()</code>, failed:</p>

<pre><code>auto a = make_resource&lt;int&gt;(5);
</code></pre>

<p>So I tried the next most obvious course:</p>

<pre><code>auto a = make_resource&lt;res_version&lt;int&gt;&gt;(5);
</code></pre>

<p>This also fails, due to attempting to inherit from a non-struct type.</p>

<p>It seems I need to create a struct (with a constructor) even for something this simple!  Much less friendly than the standard shared pointer.</p>

<h1>Questionable choices</h1>

<p>Why use <code>int</code> to count references?  An unsigned type would be more appropriate.</p>

<p>We should check for overflow before incrementing the counter, and throw an exception if that would happen, otherwise we could delete objects still in use.  I don't think that's possible without changing away from <code>std::memory_order_relaxed</code>.</p>

<p>The <code>res_version</code> adapter should virtually inherit <code>resource</code>, to avoid the diamond problem when subclasses inherit from more than one of these.</p>

<p>I'd prefer the <code>res_version</code> constructor to include an initializer for the <code>resource</code> base, rather than omitting it.  The <code>T()</code> constructor is likely to be tricky here, as it makes it hard for users to select the <code>T{}</code> constructor - important for classes such as <code>std::vector</code>.</p>

<p>The statement <code>if (m_ptr) m_ptr-&gt;add_ref();</code> is used many times - worth encapsulating in a member function (any decent compiler will inline it).</p>

<p><code>std::is_base_of_v&lt;PResource, PResourceDerived&gt; &amp;&amp; !std::is_same_v&lt;PResource, PResourceDerived&gt;</code> is used many times - encapsulate that too (<code>is_derived_from&lt;&gt;</code>, perhaps?).</p>

<p><del>We haven't implemented <code>swap()</code>, so <code>std::swap()</code> will fall back to copying via a temporary, which implies needless updates to the count.</del></p>

<p><code>res_ptr::operator=(res_ptr&amp;&amp;)</code> can be implemented in terms of <code>swap()</code> (if we write that), instead of releasing first.</p>
    </div>