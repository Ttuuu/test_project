<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Design</h1>
<p>I don't think that <code>TerminalTrieNode</code> is that good of an idea, for multiple reasons:</p>
<ul>
<li><p>You effectively cannot insert byte-strings that contain the <code>char</code> value <code>'\0'</code>. While this isn't likely to come up in purely ASCII based applications, it might e.g. for variants of unicode or handling of raw byte strings.</p>
</li>
<li><p>Having to use pointers in <code>TrieNode::children</code> (due to inheritance) means <s>doubling</s> increasing the amount of pointer dereferences: One for the actual pointer, and at least one hidden in the <code>std::unordered_map</code>. This makes all operations slower due to cache misses.</p>
</li>
<li><p>The whole <code>get_word</code> "hack" smells (as you noticed).</p>
</li>
</ul>
<p>Also, it would be nice to retrieve information about which path a node is on.</p>
<p>Ideally, I'd like something along these lines:</p>
<pre><code>class TrieNode {
    // Note: store TrieNode by value!
    std::unordered_map&lt;char, TrieNode&gt; children;

    // simple indicator if this is a leaf node (end of a word)
    bool is_leaf_node;

    // A reference to the path so far
    // Note: if memory usage gets too big, this could be replaced by a std::string_view
    // and storing the leaf strings in a dedicated pool. Non-leaf nodes would only refer to
    // a part of the stored string.
    std::string path;

public:
    TrieNode(std::string);
    std::string_view word() const;
    void make_leaf();
    bool is_leaf() const;
};
</code></pre>
<blockquote>
<p>Sadly, this won't compile, as <code>std::unordered_map</code> doesn't support incomplete types (<code>TrieNode</code> is incomplete at the declaration of <code>TrieNode::children</code>). One easy solution would be using another hash map type that supports incomplete types, e.g. <code>boost::unordered_map</code>.</p>
<p>But: This solution sidesteps a lot (if not all) of the problems mentioned in @JVApen's answer.</p>
</blockquote>
<h1>Other issues</h1>
<p><code>Trie::prefix_apply</code> only takes non-member functions, i.e. no function objects (like capturing lambdas or instance of classes with overloaded <code>operator(std::string const&amp;)</code>) or possibly member functions (including the corresponding object). This can be fixed in two ways:</p>
<ol>
<li><p>Take a <code>std::function&lt;void(std::string const&amp;)&gt;</code> as parameter. This supports all of the above, but might incur a heap allocation upon construction.</p>
</li>
<li><p>Template it on a <code>Callable&amp;&amp;</code> which gets deduced for the passed function. This doesn't incur a heap allocation, but it also doesn't support the (admittedly rare case) usage of pointer to member functions. It also might cause some binary bloat, as a new function is generated for each instantiation (though they might provide more optimization opportunities, e.g. inlining).</p>
</li>
</ol>
<blockquote>
<p>A different design choice would be providing an iterator interface, though implementation of that is a bit more work. The advantage of that would be better compatibility with standard algorithms.</p>
</blockquote>
    </div>