<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>public String update(String initialText, Map&lt;String, Object&gt; productMap){         //  1
    if(StringUtils.isBlank(initialText) || MapUtils.isEmpty(productMap)){         //  2
        return initialText;                                                       //  3
    }                                                                             //  4
    for (Map.Entry&lt;String, Object&gt; productData : productMap.entrySet()) {         //  5
        String key = productData.getKey();                                        //  6
        Object value = productData.getValue();                                    //  7
        if(value instanceof String &amp;&amp; ((String) value).matches("[0-9]+")){        //  8
            String offerValue = (String)value;                                    //  9
            initialText = initialText.replaceAll(key, String.format("%,d", Integer.parseInt(offerValue)));   //10
        }                                                                         // 11
    }                                                                             // 12
    return initialText;                                                           // 13
}                                                                                 // 14
</code></pre>

<hr>

<h2>Line 1</h2>

<p>The method and parameter names could be clearer. A method named <code>update</code> could do many things. How about something akin to <code>replacePlaceholders</code>. Analogously, <code>initialText</code> would become <code>template</code>. Also, the <a href="https://en.wikipedia.org/wiki/Hungarian_notation" rel="nofollow noreferrer">Hungarian notation</a> for the map parameter isn't needed (<a href="https://stackoverflow.com/questions/2253453/how-should-i-name-a-java-util-map">How should I name a java.util.Map?</a>). Maybe <code>substitutionByPlaceholder</code> or something similar. I feel like there could be a better name, but I lack the domain knowledge.</p>

<p>Also, I always make parameters, variables and such <code>final</code>. I swear by it, but maybe your style guide disallows it.</p>

<p>Making the parameters <code>final</code> also prevents you from reassigning them, which is usually a good thing, because it prevents silly mistakes like</p>

<pre><code>public void setFoo(int foo) {
    foo = foo;
}
</code></pre>

<p>It looks obvious now, but in a more complex method, it can cause a bug real' quick.</p>

<h2>Lines 5, 6, 7</h2>

<p>Again, <code>final</code> variables are recommended. </p>

<h2>Lines 6, 7</h2>

<p><code>key</code> and <code>value</code> aren't great names. How about <code>placeholder</code> and <code>replacement</code>?</p>

<h2>Line 8</h2>

<p>Your method of testing if the <code>String</code> is an <code>int</code> is flawed. How about negative Integers, or something like <code>100000000000000000000000000</code>. That sure isn't an Integer. Be sure to think about corner cases like this!</p>

<p>If it's almost always an Integer or performance doesn't matter to you, you can just use <code>Integer.parseInt</code> wrapped in a try catch block. Deliberately catching Exceptions for control flow is usually not recommended though. For alternatives, see <a href="https://stackoverflow.com/questions/5439529/determine-if-a-string-is-an-integer-in-java">What's the best way to check if a String represents an integer in Java?</a></p>

<hr>

<p>The rest looks okay, but it's a big method. Not huge by any means, but it still does too much. To quote Robert C. Martin in Clean Code:</p>

<blockquote>
  <p>Functions should do one thing. They should do it well. They should do it only.</p>
</blockquote>

<p>If you look at your method, it does multiple things. It guards against bad input, it loops over the map, it checks if entries are valid, and it does the replacement.</p>

<p>If we split your method into four method, they all become just a few lines each, each method doing exactly one thing (Barring the last one, which does two things, checking if the String is an integer and replacing, which is a symptom of us using try-catch for control flow) that is very easy to understand.</p>

<p>Also all methods may be static since they don't use any instance members.</p>

<pre><code>public static String replacePlaceholders(final String template, final Map&lt;String, Object&gt; productMap) {
    if (StringUtils.isBlank(template) || MapUtils.isEmpty(productMap)) {
        return template;
    }

    return replaceAllPlaceholders(template, productMap);
}

private static String replaceAllPlaceholders(final String template, final Map&lt;String, Object&gt; productMap) {
    String result = template;

    for (final Map.Entry&lt;String, Object&gt; productData : productMap.entrySet()) {
        result = replacePlaceholderIfValueIsIntegerString(result, productData);
    }

    return result;
}

private static String replacePlaceholderIfValueIsIntegerString(final String template, final Map.Entry&lt;String, Object&gt; entry) {
    if (entry.getValue() instanceof String) {
        return replacePlaceholderIfReplacementIsInteger(entry.getKey(), (String) entry.getValue(), template);
    }
    return template;
}

private static String replacePlaceholderIfReplacementIsInteger(final String placeholder, final String replacement, final String template) {
    try {
        return template.replaceAll(placeholder, String.format("%,d", Integer.parseInt(replacement)));
    } catch (final NumberFormatException e) {
        return template;
    }
}
</code></pre>

<p>Recommended reading: </p>

<ul>
<li><p><a href="https://www.oreilly.com/library/view/clean-code/9780136083238/" rel="nofollow noreferrer">Robert C. Martin; Clean Code</a></p></li>
<li><p><a href="https://www.oreilly.com/library/view/effective-java-3rd/9780134686097/" rel="nofollow noreferrer">Joshua Block; Effective Java, 3rd Edition</a></p></li>
</ul>
    </div>