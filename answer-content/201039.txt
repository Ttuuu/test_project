<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I believe some of the perceived awkwardness comes from the fact that <code>getRecursiveContents</code> throws away the directory structure when building the list of files, and then the code tries to partially reconstruct it in order to print the list.</p>

<p>Another approach would be to use <a href="http://hackage.haskell.org/package/containers-0.6.0.1/docs/Data-Tree.html" rel="nofollow noreferrer"><code>Data.Tree</code></a> from <a href="http://hackage.haskell.org/package/containers-0.6.0.1" rel="nofollow noreferrer">containers</a> and try to keep the tree structure throughout most of the program, until we generate the final listing.</p>

<p>For example, here's a variant of <code>getRecursiveContents</code> that keeps the directory structure (<a href="http://hackage.haskell.org/package/extra-1.6.9/docs/Extra.html#v:partitionM" rel="nofollow noreferrer"><code>partitionM</code></a> from <a href="http://hackage.haskell.org/package/extra" rel="nofollow noreferrer">extra</a> would simplify this code):</p>

<pre><code>-- (directory name, files in directory)
getRecursiveContents' :: FilePath -&gt; IO (Tree (FilePath,[FilePath]))
getRecursiveContents' = Data.Tree.unfoldTreeM $ \folder -&gt; do
    names &lt;- listDirectory folder
    -- using partitionM would simplify this a lot, but the function is not in base
    let separate name next =
            do (fs,ds) &lt;- next
               exists &lt;- doesDirectoryExist (folder &lt;/&gt; name)
               pure $ if exists then (fs, name:ds)
                                else (name:fs, ds)
    (fs,ds) &lt;- foldr separate (pure ([],[])) names
    --
    pure ((folder, fs), map (folder &lt;/&gt;) ds)
</code></pre>

<p>We could keep only the videos using:</p>

<pre><code> keepVideos :: Tree (a,[FilePath]) -&gt; Tree (a,[FilePath])
 keepVideos = fmap (fmap (filter isVideoFile)) -- tree, tuple
</code></pre>

<p>The nested fmaps operate inside the tree and the tuple, which are both functors. <code>fmap</code> for tuples works over the second element.</p>

<p>We could also number the files while still on the tree, for example using <a href="http://hackage.haskell.org/package/transformers-0.5.5.0/docs/Control-Monad-Trans-State-Strict.html" rel="nofollow noreferrer"><code>State</code></a> to thread a counter across all the lists:</p>

<pre><code>numberFiles :: Tree (a,[b]) -&gt; Tree (a,[(Int,b)])
numberFiles tree =
    let tag b = do n &lt;- get
                   modify succ
                   pure (n,b)
     in evalState (traverse (traverse (traverse tag)) tree) 0 -- tree, tuple, list
</code></pre>

<p>The nested <a href="http://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Traversable.html#v:traverse" rel="nofollow noreferrer"><code>traverse</code></a>s work like the nested <code>fmap</code>s, only now there are three of them because we are also traversing the list. <code>traverse</code> for tuples works over the second element.</p>

<p>For generating the final listing, we could use functions from <a href="http://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Foldable.html#t:Foldable" rel="nofollow noreferrer"><code>Data.Foldable</code></a> to process the list of nodes (<code>Tree</code>s are <code>Foldable</code>). It should be easy because we have the folder name and the list of files for each node. Trees can also be consumed in a more "structured" way using <a href="http://hackage.haskell.org/package/containers-0.6.0.1/docs/Data-Tree.html#v:foldTree" rel="nofollow noreferrer"><code>foldTree</code></a>, but perhaps that isn't needed here.</p>
    </div>