<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Generally macros are ALL CAPS to identify that they are macros.</p>

<p>Underscore at the beginning of a variable or function name is generally reserved and should be avoided.</p>

<p>Optimization is a good thing when working with hardware, one needs to make the code as small and as fast as possible. There are other ways to optimize C besides using macros. The use of inline functions should be preferred over the use of macros. Macros are extremely difficult to debug, and make extending the code or maintenance a fairly large problem. Using macros forces the use of logic flow for compound statements</p>

<pre><code>    do{_id.read=0; _id.write=0;} while (0)
</code></pre>

<p>I've also seen</p>

<pre><code>    if (1) { statementA; StatementB; }
</code></pre>

<p>While the compiler will correctly optimize the previous statement, someone reading or modifying the code may wonder why the code was written this way, especially someone unfamiliar with C macros.</p>

<p>When optimizing C use registers as much as possible rather than normal variables, this makes the code smaller, and registers are faster than normal variables.</p>

<p>To make the code more portable perhaps the use of <a href="https://gcc.gnu.org/onlinedocs/gcc-4.1.2/gcc/Typeof.html" rel="nofollow noreferrer">typeof</a> can be changed to <code>__typeof</code>. You are probably aware that <a href="https://stackoverflow.com/questions/12081502/typeof-operator-in-c">typeof is a compiler extension and not defined by all C compilers</a>.</p>
    </div>