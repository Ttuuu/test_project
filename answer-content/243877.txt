<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is an expansion of <a href="https://codereview.stackexchange.com/a/243871">@Mast's great answer</a>.</p>
<blockquote>
<p><code>sqlalchemy typing-extensions pygments colorama commonmark pprintpp psycopg2</code> were still missing after the set-up as well.</p>
</blockquote>
<p>Whilst when I installed it just now, I got most of these packages I didn't have <code>psycop2</code>. This is coming from an improperly configured setuptools package. We can see neither <code>setup.py</code> or <code>requirements.txt</code> have all of these packages listed.</p>
<p>You can test for this by using <a href="https://pypi.org/project/tox/" rel="nofollow noreferrer">Tox</a> or <a href="https://pypi.org/project/nox/" rel="nofollow noreferrer">Nox</a>. This is because both build a virtualenv for each test environment. Whilst this is primarily to be able to test one project over multiple Python versions, it has the benefit of being able to test your package before deployment. If you use a <code>src</code> layout then you can only import your code from the installed package, rather than from the current working directory. Meaning you can test if the built package works and contains all the information you need. This is useful if you're deploying assets with your Python package and need to test that they are built and deployed correctly.</p>
<p>As a contributor to Nox I'm more familiar with it then Tox and so I'll be focusing on that. But they both work in a similar way, it just comes down to which configuration file you want to use Python or an INI.</p>
<ol>
<li><p>We need to have a unit test. This can simply just be an <code>assert True</code>.</p>
</li>
<li><p>We have to import your package and hope it imports all the needed imports. As your tests grow to cover all of your files (not lines of code) then all imports should be hit and this will be properly tested.</p>
</li>
<li><p>We get <a href="https://docs.pytest.org/en/latest/" rel="nofollow noreferrer">pytest</a> or <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">unittest</a> to run stand alone.</p>
<pre class="lang-bash prettyprint-override"><code>$ pytest
</code></pre>
</li>
<li><p>We build the Tox/Nox file running the single command from Â¶3</p>
</li>
</ol>
<p><code>tests/test_dinopass.py</code></p>
<pre class="lang-py prettyprint-override"><code>import dinopass


def test_dinopass():
    assert True
</code></pre>
<p><code>noxfile.py</code></p>
<pre class="lang-py prettyprint-override"><code>import nox


@nox.session()
def test(session):
    session.install("-e", ".")
    session.install("pytest")
    session.run("pytest")
</code></pre>
<p>Now you can just test your packages are installed correctly by using <code>nox</code>. Later you can add more tests and also run these just from one <code>nox</code> call. Personally <a href="https://github.com/Peilonrayz/skeleton_py/blob/master/noxfile.py" rel="nofollow noreferrer">I use <code>nox</code> to run all tests, coverage, linters, hinters and documentation</a>. Integration with CI tools is then super simple. For example my <a href="https://github.com/Peilonrayz/skeleton_py/blob/master/.travis.yml" rel="nofollow noreferrer"><code>.travis.yml</code></a> just builds the test matrix and simply calls <code>nox</code>.</p>
    </div>