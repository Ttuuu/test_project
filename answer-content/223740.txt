<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>IMO, you're overcomplicating it. For 99% of the cases, you only need something similar to this:</p>

<pre><code>#If VBA7 Then
  'VBA7 declaration style
    Private Declare PtrSafe Function GetWindowLong _
                           Lib "user32" Alias "GetWindowLongA" ( _
                           ByVal hwnd As LongPtr, _
                           ByVal nIndex As Long) As Long
#Else
  'VBA6 declaration style
    Private Declare Function GetWindowLong _
                            Lib "user32" Alias "GetWindowLongA" ( _
                            ByVal hwnd As Long, _
                            ByVal nIndex As Long) As Long
#End If
</code></pre>

<p>You don't really need to check <code>Win64</code> constant solely for API compatibility. As a matter of fact, you want to prefer using VBA7 API declarations whenever possible because they align much more closely to the actual C++ declarations that the API declarations are based on. </p>

<p>The only reason to use <code>Win64</code><sup>1</sup> is to do something that can be done exclusively in 64-bit Office (which is very rare and I have trouble thinking of a good example beyond simply just checking whether the Office itself is 64-bit. The single anomaly is a certain API function - <code>SetWindowsLongPtr</code> which for some reasons, doesn't have the same declarations between 32-bit Windows and 64-bit Windows OS, in which case, you do have to use <code>Win64</code> for that particular API declaration. But others, just <code>VBA7</code> is sufficient and using VBA7 declaration style means you get more information from reading the declarations than you would have had from VBA6. <code>hWnd As LongPtr</code> is abundantly obvious that it's a pointer, not just an integer like say, <code>nIndex As Long</code>. </p>

<p>Props to <a href="https://codereview.stackexchange.com/users/175456/computerversteher">@computerversteher</a>: </p>

<p>My original post was a blind copy'n'paste from OP to illustrate the correct situation. However, he pointed out that the declarations themselves were incorrect, in particular, the <code>nIndex</code> parameter which was originally a <code>LongPtr</code> but that is not correct since it's just an integer, not a true pointer. Only pointer data types should be assigned <code>LongPtr</code>. As per the comment:</p>

<blockquote>
  <p><a href="https://codekabinett.com/rdumps.php?Lang=2&amp;targetDoc=windows-api-declaration-vba-64-bit" rel="nofollow noreferrer">How to convert Windows API declarations in VBA for 64-bit</a> provides an example for WIN64 (When to use the WIN64 compiler constant in the last third of article (sorry no anchors), that provides basic knowledge). </p>
</blockquote>

<p>Thanks, @computerversteher!</p>

<hr>

<ol>
<li>Note that <code>Win64</code> is something of a misnomer. It'll be only <code>True</code> when the Office is a 64-bit install, but will be <code>False</code> even on a 64-bit Windows running 32-bit Office. For sanity's sake, pretend that various <code>WinXX</code> constants are actually named <code>OfficeXX</code>. </li>
</ol>
    </div>