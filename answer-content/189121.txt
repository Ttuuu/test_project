<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Additions to <a href="https://codereview.stackexchange.com/a/189109/93149">vnp's take</a>:  </p>

<ul>
<li>code shall be documented. You may find (and justify) (succinct) presentations like yours in <em>print media</em>, where it doesn't easily get separated from the explanations due - with <em>program code</em>, there's copy&amp;paste. A programming language may or may not have a standard for documenting purpose and limits of a construct. I'm not aware of such for "the C-family", I use&amp;recommend <a href="http://www.doxygen.nl/manual/docblocks.html" rel="nofollow noreferrer">doxygen</a>.</li>
<li>must read: templaterex' <a href="https://stackoverflow.com/a/24650627">How to Implement Classic Sorting Algorithms in Modern C++</a></li>
<li>vnp implied you'd not want to recurse into the larger partition - 
that is a matter of correctness even more than experiencing (intolerable) run time quadratic in the number of items to sort:<br>
in the worst case, you'd nest one call per item, possibly hitting a limit on stack space or nesting depth.  </li>
<li>this worst case occurs if picking <code>pivot</code> as shown for (almost) pre-ordered items - a deplorably, even disagreeably frequent use case.  </li>
<li><p>reduce the visual impact of special casing:</p>

<pre><code>if (size &lt; QUICK_LIMIT) {
    if (size &lt;= 1) {
        return;
    auto other = std::next(left);
    if (2 == size &amp;&amp; *other &lt; *left) {
        std::iter_swap(left, other);
        return;
    }
    // handle 2 &lt; size &lt; QUICK_LIMIT
}
</code></pre></li>
</ul>
    </div>