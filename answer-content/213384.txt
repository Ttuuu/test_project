<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the current way of solving this problem seems an acceptable, albeit naive, way to solve it, but there are some tweaks that can enhance the readability.</p>

<h1>variables</h1>

<pre><code>len_n, res, n_map, target = len(nums), set(), dict(), 0
</code></pre>

<p>is both unclear and unnecessary.</p>

<p><code>len_n</code> is never used, <code>res</code> is only used far further in the code</p>

<h1><code>collections.defaultdict</code></h1>

<p>You do a lot of <code>n_map.get(s, [])</code>. Simpler would be to define <code>n_map</code> as a <code>collectcions.defaultdict(list)</code>, and then for example just do <code>n_map[s].append((i, j))</code></p>

<h1>indices</h1>

<p>You add <code>(i, j)</code> to <code>n_map</code>, only to later retrieve them as tuple <code>k</code>. It would be easier to use tuple unpacking:</p>

<pre><code>for k, n in enumerate(nums): # i is used
    s = target - n
    for i, j in n_map[s]:
        if k &gt; j:
            res.add((nums[k], nums[i], nums[j]))
</code></pre>

<p>Since you only use <code>i</code> and <code>j</code> here to retrieve <code>a</code> and <code>b</code>, why not save them in <code>n_map</code> in the first place?</p>

<pre><code>n_map = defaultdict(list)
for i, a in enumerate(nums):
    for j, b in enumerate(nums[i + 1 :], i + 1):
        n_map[a + b].append((j, a, b))
res = set()
for k, c in enumerate(nums):
    for j, a, b in n_map[target - c]:
        result = c, a, b
        if k &gt; j:
            ...
</code></pre>

<h1><code>res</code> and <code>yield</code></h1>

<p>Defining <code>res</code> as a set is a good choice. I think it is easier to only add the tuple to <code>res</code> if it is not present yet, and <code>yield</code> it at the same time, instead of returning <code>list(map(list, res))</code> at the end</p>

<p>In total this gives:</p>

<pre><code>def three_sum_maarten(nums, target=0):
    """
    :type nums: List[int]
    :rtype: List[List[int]]In total this gives
    """
    if len(nums) &lt; 3:
        return []
    n_map = defaultdict(list)
    nums = sorted(nums)
    for i, a in enumerate(nums):
        for j, b in enumerate(nums[i + 1 :], i + 1):
            n_map[a + b].append((j, a, b))
    res = set()
    for k, c in enumerate(nums):
        for j, a, b in n_map[target - c]:
            result = c, a, b
            if k &gt; j and result not in res:
                yield [c, a, b]
                res.add(result)
</code></pre>

<p>With this leetcode boilerplate:</p>

<pre><code>class Solution:
    def threeSum(self, nums: 'List[int]') -&gt; 'List[List[int]]':
        return list(three_sum_maarten(nums))
</code></pre>

<p>This passes all but one scenario. The scenario it fails is <code>nums = [0] * 3000</code></p>

<p>To tackle this scenario, you can filter all numbers so only maximum 3 of each are present in <code>nums</code>. I do this with the help of a <code>collections.Counter</code>:</p>

<pre><code>def prepare_nums(nums):
    counter = Counter(nums)

    for n, c in sorted(counter.items()):
        yield from [n] * min(c, 3)
</code></pre>

<p>and then <code>nums = list(prepare_nums(nums))</code> instead of <code>nums = sorted(nums)</code></p>

<hr>

<h1>Alternative approach</h1>

<p>You make about half of all combinations of 2 numbers in <code>nums</code>. One extra bit of knowledge you can use to reduce this is to take into account that at least 1 negative and 1 positive number need to be present in each triplet.</p>

<pre><code>counter = Counter(nums)
positives = [i for i in counter if i &gt; 0]
negatives = [i for i in counter if i &lt; 0]

for a, b in product(positives, negatives):
    c = -(a + b)
    if c not in counter:
        continue
    result = a, b, c
</code></pre>

<p>and then only yield the correct, unique results</p>

<pre><code>    result = a, b, c
    if c == a:
        if counter[a] &gt;= 2:
            yield result
    elif c == b:
        if counter[b] &gt;= 2:
            yield result
    elif a &gt; c &gt; b:
        yield result
</code></pre>

<p>and yield 1 <code>(0, 0, 0)</code> triplet if there are 3 or more <code>0</code>s present</p>

<pre><code>if counter[0] &gt;= 3:
    yield (0, 0, 0)
</code></pre>

<p>This solution is about 10 times faster, and uses 30 times less memory.</p>
    </div>