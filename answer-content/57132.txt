<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I feel the non library answers can be improved, so here's my take at those.</p>

<p>For java 7 : </p>

<pre><code>private final Map&lt;Token, AtomicInteger&gt; occurrences = new HashMap&lt;&gt;();

public void tokenFound(Token token) {
    if (!occurrences.containsKey(token)) {
        occurrences.put(token, new AtomicInteger(1));
        return;
    }
    occurrences.get(token).incrementAndGet();
}
</code></pre>

<p>You use <code>AtomicInteger</code> as value type, allowing an easy <code>incrementAndGet()</code>, instead of having to overwrite the bucket in the <code>Map</code>.</p>

<p>For Java 8 : </p>

<pre><code>private final Map&lt;Token, LongAdder&gt; occurrences = new HashMap&lt;&gt;();

public void tokenFound(Token token) {
    occurrences.computeIfAbsent(token, (t) -&gt; new LongAdder()).increment();
}
</code></pre>

<p><code>LongAdder</code> is a type specifically made for tallying (especially under heavy concurrency). The added <code>computeIfAbsent()</code> method on <code>Map</code> and the addition of lambdas turn this whole thing into a one-liner.</p>

<p>If you're using java 7, I'd opt for Guava, but if you're on 8 simply use the <code>java.util</code> classes.</p>
    </div>