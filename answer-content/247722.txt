<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Keyword-only parameters</h1>
<p>You are not using <code>**kwargs</code> correctly.  <code>**kwargs</code> should be used when you can accept any number of keywords, but you don't know what the keywords will be, such as dictionary creation.  If you only accept 2 keyword parameters, you should list those keyword parameters explicitly:</p>
<pre><code>    def __init__(self, *, a_e=None, a_n=None):
        """
        :param a_e: initial easting
        :param a_n: initial northing
        """

        self.a_e = a_e
        self.a_n = a_n
</code></pre>
<p>That <code>*</code> marks the end of positional parameters.  <code>a_e</code> and <code>a_n</code> can be specified by keyword only.  Since both default to <code>None</code>, both are optional.  Any other keywords is reject with an error message, instead of silently being ignored.</p>
<h1>Operator Precedence</h1>
<pre><code>        if self.a_e and self.a_n is not False:
</code></pre>
<p>This statement does not do what you think it does.  <code>is not</code> is higher precedence than <code>and</code>, so it reads:</p>
<pre><code>        if self.a_e and (self.a_n is not False):
</code></pre>
<p>thus, if <code>a_n</code> is never given as <code>False</code>, the result of <code>is not</code> will be <code>True</code>, and the <code>and</code> will always result in the truthiness of <code>a_e</code> only.</p>
<p>You probably intended the evaluation to be:</p>
<pre><code>        if (self.a_e and self.a_n) is not False:
</code></pre>
<p>which tests the truthiness of both <code>a_e</code> and <code>a_n</code>.  Sort of.  There are very few ways of getting something for which <code>is not False</code> is not true out of that expression.  The only way to get to the <code>else</code> expression is if <code>a_e == False</code>, or if <code>a_e</code> held a truthy value and <code>a_n == False</code>.  Again, since if the values are not given, they are defaulted to <code>None</code>, and since <code>None and None</code> evaluates to <code>None</code>, and <code>None is not False</code> is a true statement, the <code>if</code> clause would be executed.</p>
<p>So you probably wanted to write:</p>
<pre><code>        if self.a_e is not None and self.a_n is not None:
</code></pre>
<h1>Why not Zero?</h1>
<p>If you used <code>0</code> as the default for <code>a_n</code> and <code>a_e</code>, then</p>
<pre><code>            new_easting = self.a_e + delta_easting
            new_northing = self.a_n + delta_northing
</code></pre>
<p><code>new_easting</code> would simply become <code>delta_easting</code> and <code>new_northing</code> would become <code>delta_northing</code>, and you could always do the addition and return `new_easting, new_northing.</p>
<pre><code>    def __init__(self, *, a_e=0, a_n=0):
        """
        :param a_e: initial easting
        :param a_n: initial northing
        """

        self.a_e = a_e
        self.a_n = a_n

    def complex_randb(self, r, b):
        """
        An equation that using imaginary numbers to calculate the coordinates of a new
        point from a range and bearing of an old point
        :param r: range from original coordinate to new coordinate
        :param b: bearing from original coordinate to new coordinate
        """

        # -b is required as geodetic bearings are opposite to mathematical bearings
        t = complex(cos(radians(-b)), sin(radians(-b))) * complex(0, r)
        delta_easting = t.real
        delta_northing = t.imag

        new_easting = self.a_e + delta_easting
        new_northing = self.a_n + delta_northing

        return new_easting, new_northing
</code></pre>
<h1>Naming</h1>
<p>Your parameter names <code>a_e</code>, <code>a_n</code>, <code>r</code>, and <code>b</code> are too short and cryptic.  You should used <code>easting</code> <code>northing</code>, <code>range</code>, and <code>bearing</code>.</p>
<p><code>complex_randb</code> is also confusing.  The input is real, the output is real.  The fact that complex numbers are internally used is an internal detail irrelevant to the caller.  What is <code>randb</code>, some kind of random b?  Oh, <code>range_and_bearing</code>!  But it is not a range and bearing function, it is a new coordinate function:</p>
<pre><code>    def new_coordinate(self, range, bearing):
        """Doc-string without the complex number internal detail mentioned"""
        ...
</code></pre>
<p>The class name <code>CmO</code> is also quite cryptic.  Is that "C minus O" because it runs "C-O" calculations?  You need a better class name.</p>
    </div>