<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>In my equivalent class, I find <code>nextPrime(int num)</code> and <code>previousPrime(int num)</code> to be useful, the first more than the second.  They return the next higher prime and the next lower prime respectively.</p></li>
<li><p>Using a boolean array is horribly inefficient use of space.  Better to use a <code>BitSet</code> which only uses one bit per number.  With a little extra coding you can reduce that to half a bit per number by only holding odd numbers in the sieve.</p></li>
<li><p>Your <code>PrimeNumberClassic.isPrime()</code> fails to flag 2 as prime.</p></li>
</ol>

<p>Here is a better version with more spaces in the code to make it easier to read:</p>

<pre><code>public boolean isPrime(int number) {
    if (number &lt; 2) {
        return false;
    }
    if (number % 2 == 0) {
        return number == 2;  // 2 is the only even prime.
    }
    for (int i = 3; i * i &lt;= number; i += 2) {
        if (number % i == 0) {
            return false;
        }
    }
    return true;
}
</code></pre>

<p>If you have the sieve in place, then you can use a similar method to test numbers between the limit of the sieve and its square:</p>

<pre><code>for (int i = 3; i * i &lt;= number; i = sieve.nextPrime(i)) {
    if (number % i == 0) {
        return false;
    }
}
</code></pre>

<p>This uses the <code>nextPrime()</code> method I suggested above, and avoids dividing by odd composite numbers like 15 or 27.</p>
    </div>