<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Edge cases are where such class hierarchies often fall short.</p>

<ol>
<li>An offhand short sword that adds to defense?</li>
<li>A shield that does damage when you bash with it?</li>
<li>A magic potion that not only makes you less hungry but also adds
armor when you drink it?</li>
</ol>

<p>How will those fit into your current hierarchy? One way to avoid those problems is to use aggregation instead of inheritance and treat each game object as a collection of arbitrary properties, that can be added to object or removed from it. You might want to look at how, for example, things are done in Unity, to get a better understanding of how things are actually designed in modern engines.</p>

<p>To be clear, there is nothing wrong with having game object hierarchies in small projects. It is the easiest approach and sometimes it is enough, especially if all you want is to write some code. I just wanted to give you some perspective.</p>

<p><strong>EDIT</strong>
Since this question is getting a lot of attention I though I might as well update my answer with a simplified example.</p>

<p>First, you have to create some "components". For the sake of this example, you can think of components as properties that define the item and make it different and special. What is a fire sword? It is an item that:</p>

<ul>
<li>people in the village call "Lightbringer"</li>
<li>requires some "sword" skill to use</li>
<li>looks like a big burning knife</li>
<li>can do slicing damage to things</li>
<li>but does fire damage too</li>
<li>it weights 8 kg</li>
<li>it costs 1000g and can be bought or sold</li>
<li>etc...</li>
</ul>

<p>Those are the aspects of a fire sword that make it what it is. And every one of those aspects can be defined as separate component.</p>

<pre><code>abstract class ItemComponent
{
    //What goes into base class entirely depends 
    //on how your game engine is implemented.
    //I left it out because it is irrelevant 
    //in context of this example
}

class Valuable : ItemComponent
{
    public int Cost { get; set; }

    public override string ToString()
    {
        return "It is a valuable item, that can be bought for " + Cost + "g.";
    }
}

class PhysicalDamage : ItemComponent
{
    public int Slashing { get; set; }
    public int Bashing { get; set; }
    public int Piercing { get; set; }

    public override string ToString()
    {
        return String.Format("It does {0}/{1}/{2} physical damage.", Slashing, Bashing, Piercing);
    }
}

class ElementalDamage : ItemComponent
{
    public int Fire { get; set; }
    public int Water { get; set; }
    public int Earth { get; set; }
    public int Wind { get; set; }

    public override string ToString()
    {
        return String.Format("It does {0}/{1}/{2}/{3} elemental damage.", Fire, Water, Earth, Wind);
    }
}

//etc...
</code></pre>

<p>And this is a typical game object that theoretically can represent anything from a stone on the ground to a bullet. It's just a collection of arbitrary components.</p>

<pre><code>class Item
{
    public Item(string name)
    {
        Name = name;
    }
    //Name can be a component too! 
    public string Name { get; private set; }

    public Item AddComponent(ItemComponent component)
    {
        _components.Add(component);
        return this;
    }

    public T GetComponent&lt;T&gt;()
    {
        return (T)_components.OfType&lt;T&gt;().FristOrDefault();
    }

    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.AppendLine(Name);
        _components.ForEach(c =&gt; sb.AppendLine(c.ToString()));
        return sb.ToString();
    }

    private List&lt;ItemComponent&gt; _components = new List&lt;ItemComponent&gt;();
}
</code></pre>

<p>Then to create a fire sword all you need to do is create an item with all the necessary aspects:</p>

<pre><code>var fireSword = new Item("Lightbringer")
                   .AddComponent(new Valuable { Cost = 1000 })
                   .AddComponent(new PhysicalDamage { Slashing = 10 })
                   .AddComponent(new ElementalDamage { Fire = 10 })
//Maybe it also makes you weak to water attacks? 
//No problem, just define and add new component
                   .AddComponent(new ElementalResistance { Water = -10 };
Console.WriteLine(fireSword.ToString())
</code></pre>

<p>This allows you to do all sorts of neat stuff later on. For example, to calculate total resistances of a player, you can call <code>GetComponent&lt;ElementalResistance&gt;()</code> for every equipped item and sum the result.</p>
    </div>