<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>While using methods with side effects in list- or dict-comprehensions is generally frowned upon, in this case you could make use of <code>dict.pop</code> to get the <code>id</code> and at the same time remove it from the dictionary.</p>

<pre><code>&gt;&gt;&gt; a = [{'bar': 'baz', 'id': 'foo'}, {'bar': 'baz', 'id': 'qux'}]
&gt;&gt;&gt; {d.pop("id"): d for d in a}
{'qux': {'bar': 'baz'}, 'foo': {'bar': 'baz'}}
</code></pre>

<p>Keep in mind, though, that this will alter the dictionary <em>in-place</em>, i.e. afterwards:</p>

<pre><code>&gt;&gt;&gt; a
[{'bar': 'baz'}, {'bar': 'baz'}]
</code></pre>

<p>If you do not want to alter the original dictionaries, use <code>map(dict, a)</code> to create copies before <code>pop</code>ing elements from those, leaving the original dicts in <code>a</code> as they were.</p>

<pre><code>&gt;&gt;&gt; {d.pop("id"): d for d in map(dict, a)}
{'qux': {'bar': 'baz'}, 'foo': {'bar': 'baz'}}
</code></pre>
    </div>