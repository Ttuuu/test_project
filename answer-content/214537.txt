<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have too much logic in the dict comprehension:</p>

<blockquote>
<pre><code>{int(line.split(":")[0]):line.split(":")[1] for line in data.split("\n") if len(line.split(":"))==2}
</code></pre>
</blockquote>

<p>First of all, let's expand it to a normal for-loop:</p>

<pre><code>&gt;&gt;&gt; result = {}
&gt;&gt;&gt; for line in data.split("\n"):
...     if len(line.split(":"))==2:
...         result[int(line.split(":")[0])] = line.split(":")[1]
&gt;&gt;&gt; result
</code></pre>

<p>I can see that you use the following check <code>if len(line.split(":"))==2:</code> to eliminate the first blank space from the <code>data.split("\n")</code>:</p>

<pre><code>&gt;&gt;&gt; data.split("\n")
['',
 '41:n',
 '43:n',
 ...
 '58:n']
</code></pre>

<p>But the docs for <a href="https://docs.python.org/library/stdtypes.html#str.split" rel="noreferrer"><code>str.split</code></a> advice to use <code>str.split()</code> without specifying a <code>sep</code> parameter if you wanna discard the empty string at the beginning:</p>

<pre><code>&gt;&gt;&gt; data.split()
['41:n',
 '43:n',
 ...
 '58:n']
</code></pre>

<p>So, now we can remove unnecessary check from your code:</p>

<pre><code>&gt;&gt;&gt; result = {}
&gt;&gt;&gt; for line in data.split():
...     result[int(line.split(":")[0])] = line.split(":")[1]
&gt;&gt;&gt; result
</code></pre>

<p>Here you calculate <code>line.split(":")</code> twice. Take it out:</p>

<pre><code>&gt;&gt;&gt; result = {}
&gt;&gt;&gt; for line in data.split():
...    key, value = line.split(":")
...    result[int(key)] = value
&gt;&gt;&gt; result
</code></pre>

<p>This is the most basic version. Don't put it back to a dict comprehension as it will still look quite complex. But you could make a function out of it. For example, something like this:</p>

<pre><code>&gt;&gt;&gt; def to_key_value(line, sep=':'):
...     key, value = line.split(sep)
...     return int(key), value

&gt;&gt;&gt; dict(map(to_key_value, data.split()))
{41: 'n',
 43: 'n',
 ...
 58: 'n'}
</code></pre>

<p>Another option that I came up with:</p>

<pre><code>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; lines = data.split()
&gt;&gt;&gt; split_by_colon = partial(str.split, sep=':')
&gt;&gt;&gt; key_value_pairs = map(split_by_colon, lines)
&gt;&gt;&gt; {int(key): value for key, value in key_value_pairs}
{41: 'n',
 43: 'n',
 ...
 58: 'n'}
</code></pre>

<p>Also, if you don't want to keep in memory a list of results from <code>data.split</code>, you might find this helpful: <a href="https://stackoverflow.com/questions/3862010/is-there-a-generator-version-of-string-split-in-python">Is there a generator version of <code>string.split()</code> in Python?</a></p>
    </div>