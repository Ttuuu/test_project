<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Put the Grade-Score mapping in a HashMap and read it from there.</p>

<p>Do this once:</p>

<pre><code>    Map&lt;String, Double&gt; gradeToScore = new HashMap&lt;&gt;();
    gradeToScore.put("A", 4.00);
    gradeToScore.put("A-", 3.67);
    gradeToScore.put("B+", 3.33);
    gradeToScore.put("B", 3.00);
    gradeToScore.put("B-", 2.67);
    gradeToScore.put("C+", 2.33);
    gradeToScore.put("C", 2.00);
    gradeToScore.put("D+", 1.33);
    gradeToScore.put("D", 1.00);
    gradeToScore.put("F", 0.0);
    gradeToScore.put("FX", 0.0);
</code></pre>

<p>Then you can use it as many times as needed:</p>

<pre><code>    if(gradeToScore.containsKey(grade)) {
        gradeValue = gradeToScore.get(grade); 
    }else{
        System.out.println("Invalid Grade");
    }
</code></pre>

<p>If you want to go several steps further in optimizing things for readability, you can get to something like this:</p>

<pre><code>public class GradeCalculator {
    //MAIN 
    public static void main(String args[]) {
        GradeCalculator calc = new GradeCalculator();
        calc.startInteraction();
    }

    //DATA CLASS
    private static class Student{
        public String firstName;
        public String lastName;
        public String major;
        public String numFirstClass;
        public final List&lt;Double&gt; credits = new ArrayList&lt;&gt;();
        public final List&lt;Double&gt; points = new ArrayList&lt;&gt;();
    }

    //PROPERTIES &amp; CONSTRUCTOR  
    private final Map&lt;String, Double&gt; gradeToScore = new HashMap&lt;&gt;();
    public GradeCalculator() {
        gradeToScore.put("A+", 4.33);
        gradeToScore.put("A", 4.00);
        gradeToScore.put("A-", 3.67);
        gradeToScore.put("B+", 3.33);
        gradeToScore.put("B", 3.00);
        gradeToScore.put("B-", 2.67);
        gradeToScore.put("C+", 2.33);
        gradeToScore.put("C", 2.00);
        gradeToScore.put("C-", 1.67);
        gradeToScore.put("D+", 1.33);
        gradeToScore.put("D", 1.00);
        gradeToScore.put("F", 0.0);
        gradeToScore.put("FX", 0.0);
    }

    //PUBLIC 
    public void startInteraction() {
        System.out.println("Welcome to the UNG GPA Calculator!");

        try(Scanner scan = new Scanner(System.in);){
            Student student = new Student();
            loadStudentInfo(student, scan);

            loadCreditsAndPoints(student, scan, 1);
            loadCreditsAndPoints(student, scan, 2);
            loadCreditsAndPoints(student, scan, 3);
            loadCreditsAndPoints(student, scan, 4);

            double gpa = calculateGpa(student);
            System.out.printf("Your GPA is: %.2f\n", +gpa);
        }
    }

    //PRIVATE
    private void loadStudentInfo(Student student, Scanner scan) {
        System.out.println("Enter your first name: ");
        student.firstName = scan.nextLine();
        System.out.println("Enter your last name: ");
        student.lastName = scan.nextLine();
        System.out.println("Enter your major: ");
        student.major = scan.nextLine();
        System.out.println("Enter the number of your first class: ");
        student.numFirstClass = scan.nextLine();
    } 

    private void loadCreditsAndPoints(Student student, Scanner scan, int classNumber) {
        System.out.println("Please enter the number of credits of the class " + classNumber + " (A number)");
        double credit = scan.nextDouble();
        student.credits.add( credit );

        System.out.println("Please enter your grades for the class " + classNumber + " (Capital letters such as A,B+, C-)");
        String grade = scan.nextLine();

        double gradeValue = 0;
        if(gradeToScore.containsKey(grade)) {
            gradeValue = gradeToScore.get(grade); 
        }else{
            System.out.println("Invalid Grade");
        }
        double classTotPts = gradeValue * credit;
        student.points.add(classTotPts);
    }

    private double calculateGpa(Student student) {
        double totalCredits = getTotal(student.credits);
        double totPts = getTotal(student.points);
        double gpa = totPts / totalCredits;
        return gpa;
    }

    private double getTotal(List&lt;Double&gt; doubles) {
        double total = 0;
        for(Double d:doubles) {
            total += d;
        }
        return total;
    }
}
</code></pre>

<p>And, I would prefer to stay away from streams and lambdas till you completely nail down core Java.</p>
    </div>