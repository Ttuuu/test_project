<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Includes and types</h1>
<blockquote>
<pre><code>std::atomic&lt;uint32_t&gt;
</code></pre>
</blockquote>
<p>You need to include <code>&lt;stdint.h&gt;</code> for this type.  Or better, include <code>&lt;cstdint&gt;</code> and use <code>std::uint32_t</code> instead; same for <code>std::uint8_t</code>.  Similarly:</p>
<blockquote>
<pre><code>const size_t unitSize = sizeof(MemUnit) + blockSize;
</code></pre>
</blockquote>
<p>Spell that <code>std::size_t</code>.  Although implementations are <em>permitted</em> to add global-namespace versions of these identifiers, they are not <em>required</em> to, so relying on that is a portability issue waiting to bite.</p>
<hr>
<h1>Interface</h1>
<p>It's not clear whether all the functions are intended to be part of the public interface.  Certainly there are several which aren't directly needed by the test program, so perhaps they could be moved into an anonymous namespace?</p>
<p>The naming of the functions is somewhat unconventional - it may well be worth re-reading the <code>std::allocator</code> interface to see what's expected.</p>
<p><code>InitMemPool</code> and <code>UninitMemPool</code> look very much like they should be an allocator's constructor and destructor, respectively.  As free functions, they are vulnerable to misuse (e.g. calling either of them more than once, or using <code>Allocate()</code> before init or after uninit).</p>
<hr>
<h1>Use of <code>std::atomic</code></h1>
<p>I haven't fully audited the memory barriers here, and it's less my area of expertise, so I'm hoping another reviewer will give that some scrutiny.</p>
    </div>