<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Disclaimer: my Forth is extremely rusty.</p>
<ul>
<li><p><code>length</code> does not need to be local; is not a variable, it is a constant. Declare it as such:</p>
<pre><code>13 constant length
</code></pre>
</li>
<li><p>Dealing with input. The stack annotation <code>( a 1000 )</code> strongly hints that what follows wants to be the word on its own. Indeed, logic should be separated from IO. Consider, for example, something along the lines of</p>
<pre><code>: e008 ( a n -- p)
    ....
;

s" 731671765313306249192...450"
euler008
.
</code></pre>
<p>Once the logic and IO are separated, you may use <code>open-file</code> and <code>read-file</code> if you wish.</p>
</li>
<li><p>I do not endorse one-liners, especially if they involve loop. Consider</p>
<pre><code>: e008-multNdigits ( a n -- p )
    1 swap 0
    do
        swap
        dup i +
        c@ [char] 0 -
        rot *
    loop
    nip ;
</code></pre>
<p>As a side note, <code>nip</code> is very rarely useful, and usually it is an indication of the suboptimal design. Try to get rid of it. The nipped value, if I am not mistaken, is a base address of the array. I have an impression that its only purpose is to undo a <code>dup</code> in the caller. Try to get rid of both.</p>
</li>
<li><p>The line</p>
<pre><code>  dup maxproduct &gt; if to maxproduct else drop then
</code></pre>
<p>is a long way to say</p>
<pre><code>  maxproduct max to maxproduct
</code></pre>
</li>
<li><p>Consider having max product at TOS prior to setting up a call to <code>e008-multNdigits</code>. In this case,</p>
<pre><code>  length - 0 do
      dup i + length e008-multNdigits
      max
</code></pre>
<p>would suffice, and eliminate the need for the local.</p>
</li>
</ul>
<hr>
<p>Not Forth-related issues:</p>
<ul>
<li><p>The algorithm performs 13000 multiplications. A sliding window approach lets you get away with 1000 multiplications and 1000 divisions. Of course an extra care should be taken when <code>0</code> is encountered.</p>
</li>
<li><p>The product of 13 digits may take as much as 42 bits. A naive multiplication fails on a 32-bit cells.</p>
</li>
</ul>
<hr>
<p>Finally, Project Euler is not about programming. It is about math. To hone your Forth skills, consider implementing classical algorithms, and benchmark them against conventional implementations.</p>
    </div>