<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll go out on a limb and say that there is nothing clearly <em>wrong</em> with this script. As a casual batch file, the only improvement I would suggest using the "Main Method" pattern. I've yet to find a clear, focused explanation of both what the pattern is and why one should use it, but <a href="https://www.guru99.com/learn-python-main-function-with-examples-understand-main.html" rel="nofollow noreferrer">this is a good start</a>. </p>

<p>Oh, and while it's good that you're calling <code>csv_file.close()</code>, it's greatly preferred to use <code>with open('filename', 'x') as csv_file:</code> instead.</p>

<p>As for efficiency: There are probably ways you could make this script a little more performant, but for such a simple task it's probably counter-productive. It would be relatively a lot of work, and it would make the script harder to work <em>on</em>, so unless you're scraping huge amounts of data it's probably not worth it.</p>

<p>Within the tools you're already using, one thing that could make this look nicer would be to use <code>csv.DictWriter()</code>, <code>DictWriter.writeheader()</code>, and <code>.writerows()</code>. In order for <code>writerows()</code> to really work well for you, you'll probably want to learn about lists, list comprehensions (and/or <code>map</code>), generators and iterables, and functions. And of course to use <code>DictWriter</code> you'll need to learn about dictionaries. And if you're going to learn about functions, it's a good idea to learn about type hints and type checkers. and so on and so forth!</p>

<p>I wouldn't be here if I could help myself from banging out untested scripts for other people's problems:</p>

<pre class="lang-py prettyprint-override"><code>from bs4 import BeautifulSoup
import csv
from pprint import pprint
import requests
import sys
from typing import Dict

default_file = "bundesliga_table.csv"
default_url = "https://www.bundesliga.com/de/bundesliga/tabelle"
fields_functions = {
    "Rank": lambda club_tr: club_tr.find("td", class_="rank").text,
    "Team": lambda club_tr: club_tr.find("span", class_="d-none d-lg-inline").text,
    "Matches": lambda club_tr: club_tr.find("td", class_="matches").text,
    "Points": lambda club_tr: club_tr.find("td", class_="pts").text,
    "Goal Difference": lambda club_tr: club_tr.find("td", class_="difference").text
}

def main():
    argc = len(sys.argv)
    file = sys.argv[1] if 1 &lt; argc else default_file
    url = sys.argv[2] if 2 &lt; argc else default_url
    scrape_to_file(file, url)

def scrape_to_file(target_file: str, source_url: str) -&gt; None:
    source = BeautifulSoup(requests.get(source_url).content, "lxml")
    data = source.find_all("tr")
    with open(target_file, "w", newline='') as csv_file:
        csv_writer = csv.DictWriter(csv_file, fields_functions.keys())
        csv_writer.writeheader()
        csv_writer.writerows(parse(club) for club in data)

def parse(club_tr) -&gt; Dict[str, str]:
    try:
        parsed = {key: func(club_tr) for key, func in fields_functions.items()}
        pprint(parsed.values())
        return parsed
    except Exception as e:
        pprint("Error parsing one row!")
        pprint(e)
        return {}

if __name__ == "__main__":
    main()
<span class="math-container">```</span>
</code></pre>
    </div>