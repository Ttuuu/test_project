<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>patterns</code> list is not doing you any good here: you end up doing tests like <code>if pat == patterns[0]</code> to see which regex was tested, so you may as well have written <code>re.match(…)</code> four times instead of looping. (By the way, use <code>re.fullmatch()</code> to avoid writing <code>$</code> in every regex.)</p>

<p>Another misstep that makes your regexes ineffective is that they are not self-documenting. You end up writing code elsewhere that decides which group is the year, month, and date. To remedy that, use named capture groups. Also, you are discarding information captured in <code>q</code>. To extract information from the match, use <code>q.group(…)</code>; don't perform substitutions with backreferences.</p>

<p>I'm not fond of the <code>str(int(date))</code> special case. Ideally, you should avoid calling <code>cleanup()</code> with a parameter that could be either a string or number. If you're importing your CSV using PANDAS, then specify that you always want to treat that column as a string. (If you use <code>cleanup</code> in the <code>converters</code> or <code>date_parser</code> for <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="noreferrer"><code>pandas.read_csv()</code></a>, then the input should always be a string.)</p>

<h2>Suggested solution</h2>

<p>I'm not sure how lax you want to be about junk input, but I've tried to preserve your original permissive behavior.</p>

<p>Compared to the solution by @Mathias, this one more clearly expresses the intention to format the output as some variant of YYYY-MM-DD by any means possible.</p>

<pre><code>def cleanup(date):
    patterns = [
        r'(?P&lt;y&gt;\d{4})(?:\.\d*)?',
        r'(?P&lt;y&gt;\d{4})-(?P&lt;m&gt;\d{1,2})(?:-(?P&lt;d&gt;\d{1,2}))?',
        r'(?:(?P&lt;d&gt;\d{1,2})-)?(?P&lt;m&gt;\d{1,2})-(?P&lt;y&gt;\d{4})',
        r'(?P&lt;junk&gt;.*)'
    ]
    tests = (re.fullmatch(pattern, str(date)) for pattern in patterns)
    match = next(match.groupdict() for match in tests if match is not None)
    return (
        '{y}-{m:0&gt;2}-{d:0&gt;2}' if match.get('d') else
        '{y}-{m:0&gt;2}' if match.get('m') else
        '{y}' if match.get('y') else
        '{junk}'
    ).format_map(match)
</code></pre>
    </div>