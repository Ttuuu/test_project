<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>200_success's answer uses the evil <code>eval</code> which in his context was unnecessary.</p>

<p><strong>Update</strong>: Oh, what, <a href="/questions/tagged/bash" class="post-tag" title="show questions tagged 'bash'" rel="tag">bash</a>? Let's use some brace expansion + evil things:</p>

<pre><code># This time we have to be evil. All code in this answer is CC0.
up() { [ "$1" -eq "$1" ] &amp;&gt;/dev/null || set -- 1; "cd \$(printf '../%.s' {1..$1})"; }
</code></pre>

<hr>

<p><code>local</code> is not a that nice solution since POSIX doesn't contain <code>local</code>. After some searching, I found out that it's possible to <a href="https://stackoverflow.com/a/5349842/3770260">use printf to duplicate strings</a>. After replacing the brace expansion with <code>seq</code>, here is what I got:</p>

<pre><code>up() { cd "$(printf '../%.s' $(seq 1 $1))"; }
</code></pre>

<p>P.S.: The use of <code>seq</code> for simple looping is sometimes considered harmful, especially when used with <code>for var in</code>. To make you feel less guilty:</p>

<pre><code># integer seq, @copyright CC0.
iseq() (
    : ${iseq_fmt='%s\n'}
    case "$#" in
        (1)  i=1  last=$1 incr=1;;
        (2)  i=$1 last=$2 incr=1;;
        (3)  i=$1 last=$3 incr=$2;;
        (*)  return 2;;
    esac
    [ "$i" -eq "$i" ] &amp;&amp; [ "$incr" -eq "$incr" ] &amp;&amp; [ "$last" -eq "$last" ] || return 2
    while [ "$i" -le "$last" ]; do
        printf "$iseq_fmt" "$i"
        : $((i = i + incr))
    done
)
</code></pre>
    </div>