<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure if you're tied to having the method signature <code>public static ArrayList&lt;Integer&gt; evenList(ArrayList&lt;Integer&gt; tList)</code> and if you have to use the <code>deepClone</code> method you've got here, but if you aren't tied down to these restrictions, there are cleaner ways of doing this.</p>

<p>Firstly, one of the main points of recursion is using the stack to store state - this doesn't seem to really come through in your example. Let's think about the problem a bit: we want to go over each element in our list, adding that element to another list if the index of that element is even. How would we do this in "normal" code? Well, we'd just loop over the <code>List</code> with a <code>for</code> loop, probably:</p>

<p>(Note: I use <code>List&lt;Integer&gt;</code> here instead of <code>ArrayList&lt;Integer&gt;</code>. This may not make sense to you yet - if so, just mentally replace every <code>List&lt;Integer&gt;</code> with <code>ArrayList&lt;Integer&gt;</code>.)</p>

<pre><code>public static List&lt;Integer&gt; evenList(List&lt;Integer&gt; tList) 
{
    List&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();
    for(int i = 0; i &lt; tList.size(); ++i) {
        if(i % 2 == 0) {
            result.add(tList.get(i));
        }
    }
    return result;
}
</code></pre>

<p>So converting this to recursive code, what state do we store in the function that we can store on the stack instead? Well, both the result and the index, <code>i</code>. So instead of creating a new <code>List</code> that we return, let's pass both of those in as parameters instead:</p>

<pre><code>public static void evenList(List&lt;Integer&gt; tList, List&lt;Integer&gt; result, int index)
</code></pre>

<p>So, with this recursive method, how will we know when to stop? Well, exactly like in our <code>for</code> loop: when our index is at <code>tList.size()</code>:</p>

<pre><code>public static void evenList(List&lt;Integer&gt; tList, List&lt;Integer&gt; result, int index)
{
    if(index &lt; tList.size()) {
       ...
    }
}
</code></pre>

<p>Ok, so what about the logic? Well, it hasn't really changed much - we still want to do the exact same thing, that is, if index is even, add the element at that index to our result list:</p>

<pre><code>public static void evenList(List&lt;Integer&gt; tList, List&lt;Integer&gt; result, int index)
{
    if(index &lt; tList.size()) {
        if(index % 2 == 0) {
            result.add(tList.get(index));
        }
    ...
}
</code></pre>

<p>Now, we need a call to the function itself (otherwise it wouldn't be recursive!), but what parameters do we pass through? Well, we always need <code>tList</code>, so that should go through. We want to keep adding to the same <code>result</code>, so that should go through. However, our index needs to change - we want to test the next element - so that should be <code>++index</code>. So our final function looks like:</p>

<pre><code>public static void evenList(List&lt;Integer&gt; tList, List&lt;Integer&gt; result, int index)
{
    if(index &lt; tList.size()) {
        if(tList.get(index) % 2 == 0) {
            result.add(tList.get(index));
        }
        evenList(tList, result, ++index);
    }
}
</code></pre>

<p>I'm not really sure why your professor has you using <code>clone</code> methods here - it's really inefficient. Every single recursive call, you call <code>deepClone</code> on the <code>List</code> you pass in - this is a lot of wasted effort. </p>

<p>In fact, if we were being really clever here, we would see that every second element gets added to our return list, so we can skip one of the <code>if</code> checks:</p>

<pre><code>public static void evenList(List&lt;Integer&gt; tList, List&lt;Integer&gt; result, int index)
{
    if(index &lt; tList.size()) {
        result.add(tList.get(index));
        index += 2;
        evenList(tList, result, index);
    }
}
</code></pre>

<p>Of course, this only works properly when the user passes in an even initial value, presumably 0. So let's make sure that happens. Let's make this method private and supply the starting index:</p>

<pre><code>private static void evenList(List&lt;Integer&gt; tList, List&lt;Integer&gt; result, int index)
{
    if(index &lt; tList.size()) {
        result.add(tList.get(index));
        index += 2;
        evenList(tList, result, index);
    }
}

public static void evenList(List&lt;Integer&gt; tList, List&lt;Integer&gt; result)
{
    evenList(tList, result, 0);
}
</code></pre>

<p>If you are tied to the original method signature, well, I've typed a lot of stuff for not much good I suppose, although I'd have to question why your professor had made you do it this way.</p>
    </div>