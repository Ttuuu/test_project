<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your algorithm by example: In your method hasSurrounding(), you are executing a query for each point. If for example you have current x=100 and current z=1000 and surrounding=10, you are examining every point between x=90 to 109 and z=990 to 1009. That makes 10*10 = 100 queries. If one of these points do not exists, you immediately return false.</p>

<p>You can do that in one query, given example values above: </p>

<pre><code>SELECT * FROM chunkCoordinate WHERE x &gt;= 90 AND x &lt; 110 AND z &gt;= 990 and z &lt; 1009
</code></pre>

<p>But because you do not need to know which point(s) does not exist, you can just count the number of points. If one is missing, you would receive 99 instead of 100 results.
That leads to high performance since the database does not need to fetch the data for the point, but just needs to check if it exists, by using its buffered index tables (primary keys).</p>

<p>Changed code:</p>

<pre><code>private boolean hasSurrounding(Connection connection, int x, int z) throws SQLException {
    String CHECK_SURROUNDING = "SELECT COUNT(*) FROM chunkCoordinate WHERE x &gt;= ? AND x &lt; ? AND z &gt;= ? and z &lt; ?;";
    PreparedStatement getChunkCount = connection.prepareStatement(CHECK_SURROUNDING);
    getChunkCount.setInt(1, x - radius);
    getChunkCount.setInt(2, x + radius);
    getChunkCount.setInt(3, z - radius);
    getChunkCount.setInt(4, z + radius);

    ResultSet resultSet = getChunkCount.executeQuery();     
    if (! resultSet.next()) {
        throw new IllegalStateException("Could not get the record count to check surrounding. Check if table 'chunkCoordinate' exists.");
    }

    int numberOfRows = rs.getInt(1);
    return (numberOfRows == radius * radius);
}
</code></pre>

<p>Another method is to use a cache: read the whole table into an arraylist and only operate on that. You will need a flag (or version number) to know when the table is modified and needs to be read again. There are java libraries out there that already do that for you.</p>

<p>Remarks:</p>

<ul>
<li>Some databases have a BETWEEN operator. Try if it is faster.</li>
<li>regarding real-time checks: If you execute 100 queries for checking the surrounding one after the other, it will take some time. It may happen that one point got deleted during this time that was there some milliseconds before you checked or vice versa, leading to wrong results. With a single query like above this cannot happen. But if in your code you have no choice than executing many queries, you should accumulate the results in an intermediate table and return that. In other words: using subqueries withing your single query.</li>
</ul>
    </div>