<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Formatting: Indent your code consistently. This makes it easier to understand and spot errors. Also, it attracts people here to read it at all. Your's is not a mess, but inconsistent still.</li>
<li>Another rather obvious error is not to return a boolean for a function that gives you a true/false result. This is implicit documentation. If you return an int, you need to say what it means and how to interpret it, which the user of a function has to read and understand. With a boolean, that meaning is clear and requires no additional documentation.</li>
<li><code>using namespace std;</code> is okay-ish for an example like this. It's bad as regular habit and it's inacceptable when done in a header file. The problem this causes is the pollution of the global namespace. Replace this with single <code>using</code> statements, possibly restricted to a smaller scope like a class or function, or just prefix the <code>std::</code>.</li>
<li>Your comment "loop through numbers 0..(n/2)+1" is misleading, your loop starts with value 2. Try to avoid repeating what the code does. Rather, use a comment (when necessary) to explain <em>why</em> you did something, in particular the <code>(n/2)+1</code> deserves some explanation.</li>
<li>This leads to the point that the limit <code>(n/2)+1</code> is not optimal. Assuming there are two numbers <code>n</code> and <code>m</code> that divide a third value <code>k</code> that you're trying to find. If your approach is to try increasing values of <code>n</code>, then you can stop as soon as the resulting value of <code>k / n</code> is less than <code>n</code>. The reason is that <code>n</code> and <code>m</code> are interchangeable, so any possible result for <code>m</code> would have been tried as <code>n</code> already.</li>
<li>The while loop could be structured differently, each operation is required only once, to remove redundancy. The first of these is <code>cin &gt;&gt; i</code>, the other is checking <code>cin.fail()</code>. Other than that the loop is fine and correct. As a strategy, think about how you would describe the steps to a human. Use this description as comments to form a template for your code. This then takes this form:</li>
</ul>

<pre><code>// output a prompt
cout&lt;&lt;"Enter an integer to check if it is a prime: ";
while (true)
{
    // try to read a single number
    cin &gt;&gt; i;
    // if reading succeeded, we're done
    if(!cin.fail())
        break;
    // skip remainder of the line of input
    cin.clear();
    cin.ignore(numeric_limits&lt;streamsize&gt;::max(),'\n');
    // output a warning and try again
    cout&lt;&lt;"You have entered wrong input.\nPlease try again: ";
}
</code></pre>

<ul>
<li>A stream can be used in a boolean expression to find out whether something failed or not. The above could have been simplified to <code>if (cin &gt;&gt; i) break;</code>.</li>
<li>Just to mention it, when input failed, it sometimes makes sense to check for EOF as well. If you were reading numbers in an endless loop, sending an EOF (Control-D or Control-Z, depending on the terminal) can be used to exit that loop. If I send EOF to your program, it endlessly rotates prompting for a new value.</li>
<li>The final <code>return 0</code> in <code>main()</code> is not necessary. This is a specialty of the <code>main()</code> function though, it doesn't apply to other functions.</li>
</ul>
    </div>