<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think I've found a better solution.  This is shorter in code, and also more efficient because the O(N) <code>RemoveFirstTypeFound</code> metafunction is not being used at all.</p>

<pre><code>#include &lt;type_traits&gt;
#include &lt;utility&gt;

namespace utilities {
    template &lt;typename Pack1, typename Pack2&gt; struct merge;

    template &lt;template &lt;typename...&gt; class P, typename... Ts, typename... Us&gt;
    struct merge&lt;P&lt;Ts...&gt;, P&lt;Us...&gt;&gt; {
        using type = P&lt;Ts..., Us...&gt;;   
    };
}

template &lt;std::size_t R, typename Pack, typename TypesIgnored, typename Output, typename = void&gt; struct nPr_h;

template &lt;template &lt;typename...&gt; class P, typename First, typename... Rest, typename... TypesIgnored, typename... Output&gt;
struct nPr_h&lt;0, P&lt;First, Rest...&gt;, P&lt;TypesIgnored...&gt;, P&lt;Output...&gt;&gt; {
    // Just one single pack (which must be wrapped in P so that the resulting merge
    // will give all such single packs, rather than a merge of all the types).  
    using type = P&lt;P&lt;Output...&gt;&gt;;
};

template &lt;std::size_t R, template &lt;typename...&gt; class P, typename TypesIgnored, typename Output&gt;
struct nPr_h&lt;R, P&lt;&gt;, TypesIgnored, Output&gt; {
    // No pack can come out of this (permuting R types from nothing). 
    using type = P&lt;&gt;;
};

template &lt;std::size_t R, template &lt;typename...&gt; class P, typename First, typename... Rest, typename... TypesIgnored, typename... Output&gt;
struct nPr_h&lt;R, P&lt;First, Rest...&gt;, P&lt;TypesIgnored...&gt;, P&lt;Output...&gt;, std::enable_if_t&lt;(R &gt; sizeof...(Rest) + sizeof...(TypesIgnored))&gt;&gt; {
    // No pack can come out of this (since there are fewer types in
    // P&lt;TypesIgnored..., Rest...&gt; than R).
    using type = P&lt;&gt;;
};

template &lt;std::size_t R, template &lt;typename...&gt; class P, typename First, typename... Rest, typename... TypesIgnored, typename... Output&gt;
struct nPr_h&lt;R, P&lt;First, Rest...&gt;, P&lt;TypesIgnored...&gt;, P&lt;Output...&gt;, std::enable_if_t&lt;(R &lt;= sizeof...(Rest) + sizeof...(TypesIgnored) &amp;&amp; R != 0)&gt;&gt; : utilities::merge&lt;
    // Case 1: 'First' is in the permuted pack (note that Output..., First are the
    // types in just one pack).  Now continue to get R-1 more types from
    // TypesIgnored..., Rest... (which are the remaining available types since
    // 'First' is no longer available for the remaining R-1 types, and the ignored
    // types are now P&lt;&gt; since we are starting a new nPr_h call).
    typename nPr_h&lt;R-1, P&lt;TypesIgnored..., Rest...&gt;, P&lt;&gt;, P&lt;Output..., First&gt;&gt;::type,
    // Case 2: 'First' in not in the permuted pack, so try to get R types from
    // Rest... to append to Output...  First is appended to TypesIgnored... since
    // it is now among those types not used.
    typename nPr_h&lt;R, P&lt;Rest...&gt;, P&lt;TypesIgnored..., First&gt;, P&lt;Output...&gt;&gt;::type
&gt; { };

template &lt;std::size_t R, typename Pack&gt; struct nPr;

template &lt;std::size_t R, template &lt;typename...&gt; class P, typename... Ts&gt;
struct nPr&lt;R, P&lt;Ts...&gt;&gt; : nPr_h&lt;R, P&lt;Ts...&gt;, P&lt;&gt;, P&lt;&gt;&gt; { };

// Testing
template &lt;typename...&gt; struct P;

int main() {
    static_assert(std::is_same&lt;
        nPr&lt;2, P&lt;int, char, float&gt;&gt;::type,  
        P&lt;P&lt;int, char&gt;, P&lt;int, float&gt;, P&lt;char, int&gt;, P&lt;char, float&gt;, P&lt;float, int&gt;, P&lt;float, char&gt;&gt;
    &gt;::value);

    static_assert(std::is_same&lt;
        nPr&lt;3, P&lt;int, char, float, bool&gt;&gt;::type,
        P&lt;P&lt;int, char, float&gt;, P&lt;int, char, bool&gt;, P&lt;int, float, char&gt;, P&lt;int, float, bool&gt;, P&lt;int, bool, char&gt;, P&lt;int, bool, float&gt;, P&lt;char, int, float&gt;, P&lt;char, int, bool&gt;, P&lt;char, float, int&gt;, P&lt;char, float, bool&gt;, P&lt;char, bool, int&gt;, P&lt;char, bool, float&gt;, P&lt;float, int, char&gt;, P&lt;float, int, bool&gt;, P&lt;float, char, int&gt;, P&lt;float, char, bool&gt;, P&lt;float, bool, int&gt;, P&lt;float, bool, char&gt;, P&lt;bool, int, char&gt;, P&lt;bool, int, float&gt;, P&lt;bool, char, int&gt;, P&lt;bool, char, float&gt;, P&lt;bool, float, int&gt;, P&lt;bool, float, char&gt;&gt;
    &gt;::value);
}
</code></pre>

<p>Incidentally, here is a longer solution, but one which has the advantage of having the implementation for <code>nCr</code> and <code>all_permutations</code>, which are useful in their own right:</p>

<pre><code>#include &lt;type_traits&gt;
#include &lt;utility&gt;

namespace utilities {
    template &lt;typename... Packs&gt; struct merge;

    template &lt;typename Pack&gt;
    struct merge&lt;Pack&gt; {
        using type = Pack;
    };

    template &lt;template &lt;typename...&gt; class P, typename... Ts, typename... Us&gt;
    struct merge&lt;P&lt;Ts...&gt;, P&lt;Us...&gt;&gt; {
        using type = P&lt;Ts..., Us...&gt;;   
    };

    template &lt;typename First, typename... Rest&gt;
    struct merge&lt;First, Rest...&gt; : merge&lt;First, typename merge&lt;Rest...&gt;::type&gt; { };

    template &lt;typename T, typename Pack&gt; struct prepend;

    template &lt;template &lt;typename...&gt; class P, typename... Ts, typename T&gt;
    struct prepend&lt;T, P&lt;Ts...&gt;&gt; {
        using type = P&lt;T, Ts...&gt;;
    };

    template &lt;typename T, typename PackOfPacks&gt; struct prepend_to_each;

    template &lt;typename T, template &lt;typename...&gt; class P, typename... Packs&gt;
    struct prepend_to_each&lt;T, P&lt;Packs...&gt;&gt; {
        using type = P&lt;typename prepend&lt;T, Packs&gt;::type...&gt;;
    };

    template &lt;typename Pack&gt; struct pack_size;

    template &lt;template &lt;typename...&gt; class P, typename... Ts&gt;
    struct pack_size&lt;P&lt;Ts...&gt;&gt; : std::integral_constant&lt;std::size_t, sizeof...(Ts)&gt; { };

//  all_rotations
    template &lt;std::size_t, typename&gt; struct rotate;

    template &lt;template &lt;typename...&gt; class P, typename First, typename... Rest&gt;
    struct rotate&lt;0, P&lt;First, Rest...&gt;&gt; {
        using type = P&lt;First, Rest...&gt;;
    };

    template &lt;std::size_t N, template &lt;typename...&gt; class P, typename First, typename... Rest&gt;
    struct rotate&lt;N, P&lt;First, Rest...&gt;&gt; : rotate&lt;N - 1, P&lt;Rest..., First&gt;&gt; { };

    template &lt;typename Pack, typename Sequence&gt; struct all_rotations_h;

    template &lt;template &lt;typename...&gt; class P, typename... Ts, std::size_t... Is&gt;
    struct all_rotations_h&lt;P&lt;Ts...&gt;, std::index_sequence&lt;Is...&gt;&gt; {
        using type = P&lt;typename rotate&lt;Is, P&lt;Ts...&gt;&gt;::type...&gt;;
    };

    template &lt;typename Pack&gt;
    struct all_rotations : all_rotations_h&lt;Pack, std::make_index_sequence&lt;pack_size&lt;Pack&gt;::value&gt;&gt; { };
}

// nCr
template &lt;std::size_t R, typename Pack, typename = void&gt; struct nCr;

template &lt;template &lt;typename...&gt; class P, typename... Ts&gt;
struct nCr&lt;1, P&lt;Ts...&gt;&gt; {
    using type = P&lt;P&lt;Ts&gt;...&gt;;   
};

template &lt;std::size_t R, template &lt;typename...&gt; class P, typename First, typename... Rest&gt;
struct nCr&lt;R, P&lt;First, Rest...&gt;, std::enable_if_t&lt;(R &lt;= sizeof...(Rest) + 1 &amp;&amp; R &gt; 1)&gt;&gt; : utilities::merge&lt;
    typename utilities::prepend_to_each&lt;First, typename nCr&lt;R-1, P&lt;Rest...&gt;&gt;::type&gt;::type,
    typename nCr&lt;R, P&lt;Rest...&gt;&gt;::type
&gt; { };

template &lt;std::size_t R, template &lt;typename...&gt; class P, typename First, typename... Rest&gt;
struct nCr&lt;R, P&lt;First, Rest...&gt;, std::enable_if_t&lt;(R &gt; sizeof...(Rest) + 1)&gt;&gt; {
    using type = P&lt;&gt;;
};

// all_permutations
template &lt;typename Pack&gt; struct all_permutations_h;

template &lt;typename PackOfPacks&gt; struct all_permutations_h_on_each;

template &lt;template &lt;typename...&gt; class P, typename... Packs&gt;
struct all_permutations_h_on_each&lt;P&lt;Packs...&gt;&gt; : utilities::merge&lt;typename all_permutations_h&lt;Packs&gt;::type...&gt; { };

template &lt;typename Pack&gt; struct
all_permutations : all_permutations_h_on_each&lt;typename utilities::all_rotations&lt;Pack&gt;::type&gt; { };

template &lt;template &lt;typename...&gt; class P, typename Last&gt;
struct all_permutations_h&lt;P&lt;Last&gt;&gt; {
    using type = P&lt;P&lt;Last&gt;&gt;;
};

template &lt;template &lt;typename...&gt; class P, typename First, typename... Rest&gt;
struct all_permutations_h&lt;P&lt;First, Rest...&gt;&gt; : utilities::prepend_to_each&lt;First, typename all_permutations&lt;P&lt;Rest...&gt;&gt;::type&gt; { };

// We now combine nCr with all_permutations to get nPr.
template &lt;typename PackOfPacks&gt; struct all_permutations_on_each_pack;

template &lt;template &lt;typename...&gt; class P, typename... Packs&gt;
struct all_permutations_on_each_pack&lt;P&lt;Packs...&gt;&gt; : utilities::merge&lt;typename all_permutations&lt;Packs&gt;::type...&gt; { };

template &lt;std::size_t R, typename Pack&gt;
struct nPr : all_permutations_on_each_pack&lt;typename nCr&lt;R, Pack&gt;::type&gt; { };


// Testing
template &lt;typename...&gt; struct P;

int main() {
    static_assert(std::is_same&lt;
        nPr&lt;2, P&lt;int, char, float&gt;&gt;::type,  
        P&lt;P&lt;int, char&gt;, P&lt;char, int&gt;, P&lt;int, float&gt;, P&lt;float, int&gt;, P&lt;char, float&gt;, P&lt;float, char&gt;&gt;
    &gt;::value);

    static_assert(std::is_same&lt;
        nPr&lt;3, P&lt;int, char, float, bool&gt;&gt;::type,
        P&lt;P&lt;int, char, float&gt;, P&lt;int, float, char&gt;, P&lt;char, float, int&gt;, P&lt;char, int, float&gt;, P&lt;float, int, char&gt;, P&lt;float, char, int&gt;, P&lt;int, char, bool&gt;, P&lt;int, bool, char&gt;, P&lt;char, bool, int&gt;, P&lt;char, int, bool&gt;, P&lt;bool, int, char&gt;, P&lt;bool, char, int&gt;, P&lt;int, float, bool&gt;, P&lt;int, bool, float&gt;, P&lt;float, bool, int&gt;, P&lt;float, int, bool&gt;, P&lt;bool, int, float&gt;, P&lt;bool, float, int&gt;, P&lt;char, float, bool&gt;, P&lt;char, bool, float&gt;, P&lt;float, bool, char&gt;, P&lt;float, char, bool&gt;, P&lt;bool, char, float&gt;, P&lt;bool, float, char&gt;&gt;
    &gt;::value);
}
</code></pre>
    </div>