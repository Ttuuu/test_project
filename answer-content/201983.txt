<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>compiling using:</p>

<pre><code>gcc -ggdb -Wall -Wextra -Wconversion -pedantic -std=gnu11 -c "untitled.c" 
</code></pre>

<p>results in the following list of problems:</p>

<pre><code>untitled.c: In function ‘alloc_arena’:
untitled.c:107:25: warning: ISO C forbids empty initializer braces [-Wpedantic]
     MemoryArena arena = {};
                         ^

untitled.c: In function ‘init_board’:
untitled.c:122:19: warning: ISO C forbids empty initializer braces [-Wpedantic]
     Board board = {};
                   ^

In file included from untitled.c:1:0:
untitled.c: In function ‘place_value’:
untitled.c:38:57: warning: conversion to ‘uint {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define HAS_CANDIDATE(cell, candidate) cell-&gt;candidates &amp; (1 &lt;&lt; candidate)
                                                         ^

untitled.c:140:12: note: in expansion of macro ‘HAS_CANDIDATE’
     assert(HAS_CANDIDATE(cell, value));
            ^~~~~~~~~~~~~

untitled.c:38:57: warning: conversion to ‘uint {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define HAS_CANDIDATE(cell, candidate) cell-&gt;candidates &amp; (1 &lt;&lt; candidate)
                                                         ^

untitled.c:47:15: note: in definition of macro ‘FOR_EACH_COL’
             { statement }                                                             \
               ^~~~~~~~~

untitled.c:150:5: note: in expansion of macro ‘FOR_EACH_GROUP’
     FOR_EACH_GROUP(current_cell, board, destx, desty,
     ^~~~~~~~~~~~~~

untitled.c:152:13: note: in expansion of macro ‘HAS_CANDIDATE’
         if (HAS_CANDIDATE(current_cell, value))
             ^~~~~~~~~~~~~

untitled.c:154:38: warning: conversion to ‘uint {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             current_cell-&gt;candidates &amp;= ~(1 &lt;&lt; value);
                                      ^

untitled.c:47:15: note: in definition of macro ‘FOR_EACH_COL’
             { statement }                                                             \
               ^~~~~~~~~

untitled.c:150:5: note: in expansion of macro ‘FOR_EACH_GROUP’
     FOR_EACH_GROUP(current_cell, board, destx, desty,
     ^~~~~~~~~~~~~~

untitled.c:38:57: warning: conversion to ‘uint {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define HAS_CANDIDATE(cell, candidate) cell-&gt;candidates &amp; (1 &lt;&lt; candidate)
                                                         ^

untitled.c:58:15: note: in definition of macro ‘FOR_EACH_ROW’
             { statement }                                                             \
               ^~~~~~~~~

untitled.c:150:5: note: in expansion of macro ‘FOR_EACH_GROUP’
     FOR_EACH_GROUP(current_cell, board, destx, desty,
     ^~~~~~~~~~~~~~

untitled.c:152:13: note: in expansion of macro ‘HAS_CANDIDATE’
         if (HAS_CANDIDATE(current_cell, value))
             ^~~~~~~~~~~~~

untitled.c:154:38: warning: conversion to ‘uint {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             current_cell-&gt;candidates &amp;= ~(1 &lt;&lt; value);
                                      ^

untitled.c:58:15: note: in definition of macro ‘FOR_EACH_ROW’
             { statement }                                                             \
               ^~~~~~~~~

untitled.c:150:5: note: in expansion of macro ‘FOR_EACH_GROUP’
     FOR_EACH_GROUP(current_cell, board, destx, desty,
     ^~~~~~~~~~~~~~

untitled.c:38:57: warning: conversion to ‘uint {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define HAS_CANDIDATE(cell, candidate) cell-&gt;candidates &amp; (1 &lt;&lt; candidate)
                                                         ^

untitled.c:71:19: note: in definition of macro ‘FOR_EACH_BLOCK’
                 { statement }                                                         \
                   ^~~~~~~~~

untitled.c:150:5: note: in expansion of macro ‘FOR_EACH_GROUP’
     FOR_EACH_GROUP(current_cell, board, destx, desty,
     ^~~~~~~~~~~~~~

untitled.c:152:13: note: in expansion of macro ‘HAS_CANDIDATE’
         if (HAS_CANDIDATE(current_cell, value))
             ^~~~~~~~~~~~~

untitled.c:154:38: warning: conversion to ‘uint {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             current_cell-&gt;candidates &amp;= ~(1 &lt;&lt; value);
                                      ^

untitled.c:71:19: note: in definition of macro ‘FOR_EACH_BLOCK’
                 { statement }                                                         \
                   ^~~~~~~~~

untitled.c:150:5: note: in expansion of macro ‘FOR_EACH_GROUP’
     FOR_EACH_GROUP(current_cell, board, destx, desty,
     ^~~~~~~~~~~~~~

untitled.c:163:24: warning: conversion to ‘uint {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
     cell-&gt;candidates = 1 &lt;&lt; value;
                        ^

untitled.c: In function ‘load_board’:
untitled.c:187:21: warning: ISO C forbids empty initializer braces [-Wpedantic]
         Cell cell = {};
                     ^

untitled.c:188:27: warning: conversion to ‘uint {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         cell.candidates = (1 &lt;&lt; board-&gt;group_size) - 1;
                           ^

untitled.c:194:23: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for (int y = 0; y &lt; board-&gt;group_size; y++)
                       ^

untitled.c:196:27: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for (int x = 0; x &lt; board-&gt;group_size; x++)
                           ^

untitled.c:200:26: warning: conversion to ‘uint {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
             uint value = input_char - '1';
                          ^~~~~~~~~~

untitled.c:204:47: warning: conversion to ‘uint {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 success &amp;= place_value(board, x, y, value, 0);
                                               ^

untitled.c:204:50: warning: conversion to ‘uint {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
                 success &amp;= place_value(board, x, y, value, 0);
                                                  ^

untitled.c:183:30: warning: unused parameter ‘arena’ [-Wunused-parameter]
 bool load_board(MemoryArena *arena, Board *board, char *input)
                              ^~~~~

untitled.c: In function ‘solve’:
untitled.c:38:57: warning: conversion to ‘uint {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define HAS_CANDIDATE(cell, candidate) cell-&gt;candidates &amp; (1 &lt;&lt; candidate)
                                                         ^

untitled.c:233:13: note: in expansion of macro ‘HAS_CANDIDATE’
         if (HAS_CANDIDATE(cell, i))
             ^~~~~~~~~~~~~

untitled.c: In function ‘print_cell_candidate’:
untitled.c:38:57: warning: conversion to ‘uint {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
 #define HAS_CANDIDATE(cell, candidate) cell-&gt;candidates &amp; (1 &lt;&lt; candidate)
                                                         ^

untitled.c:294:14: note: in expansion of macro ‘HAS_CANDIDATE’
     else if (HAS_CANDIDATE(cell, candidate_index))
              ^~~~~~~~~~~~~

untitled.c:296:23: warning: conversion to ‘char’ from ‘uint {aka unsigned int}’ may alter its value [-Wconversion]
             display = candidate_index + '1';
                       ^~~~~~~~~~~~~~~

untitled.c: In function ‘main’:
untitled.c:396:24: warning: conversion to ‘uint {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         block_width  = atoi(argv[1]);
                        ^~~~

untitled.c:397:24: warning: conversion to ‘uint {aka unsigned int}’ from ‘int’ may change the sign of the result [-Wsign-conversion]
         block_height = atoi(argv[2]);                ^~~~
</code></pre>
    </div>