<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Should we expect that there are services that have a different type parameter? Because otherwise just a <code>Set</code> of services may suffice, or you can simply remove the <code>Service</code> part of the name during the mapping. This is an obvious thing from the example, but I'm not sure how far the example matches your actual code.</p>

<p>What I often see when streams are used is that suddenly the split up into methods is forsaken. For instance, in my code I would first build a list of services and then create a map out of it. I don't think that an intermediate list would do much w.r.t. performance here (the number of services will be limited, loading the classes will take much more time, and the streaming will have intermediate representations as well), and the code would clearly be simplified. Method chaining can be nice, but please don't overdo it.</p>

<p>Similarly, a method that tests if a class implements an interface can be clearly split out:</p>

<pre><code>Stream.of(serviceClass.getGenericInterfaces())
    .filter(ParameterizedType.class::isInstance)
    .map(ParameterizedType.class::cast)
    .filter(type -&gt; type.getRawType().equals(NodeService.class))
</code></pre>

<p>And actually, if you do that and look for code you will find <code>NodeService.class.isAssignableFrom(clazz)</code>. The part is well programmed but please do use library functions when they are available.</p>

<p>All of above may not do much with regards to performance, but taking it into account should definitely help with the readability. Currently you had to describe what the code does in the question description. That should not be necessary for well programmed / documented code.</p>
    </div>