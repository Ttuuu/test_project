<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Actually, although not immediately obvious, your solution <strong>is</strong> \$O(n)\$... The sorting algorithm used by Python is <a href="https://en.wikipedia.org/wiki/Timsort">Timsort</a>, thus named after its inventor, Tim Peters, author also of <a href="https://www.python.org/dev/peps/pep-0020/">The Zen of Python</a>.</p>

<p>It has many subtleties and refinements, but at a very high level, Timsort works by scanning the array to find sorted <em>runs</em>, i.e. contiguous subarrays already in sorted order, then merging them into larger sorted subarrays. When run on an array made out of two concatenated sorted subarrays, it will identify both of them as runs, then merge them into a single sorted array, all in linear time.</p>

<p>That's one of the beauties of Timsort: that it can beat the famous \$O(n \log n)\$ bound if the array is highly structured. Your particular case happens to be one of the ones that run in linear time!</p>
    </div>