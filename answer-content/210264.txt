<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of <code>cat "$x" | command</code> or <code>echo "$x" | command</code>, use <code>command &lt;$x</code> (vs cat) or <code>command &lt;&lt;&lt;$x</code> (vs echo): it saves a fork and removes the need to quote.</p>

<p>Instead of <code>if [ x -lt y ]</code> use <code>if [[ x -lt y ]]</code>: it saves a fork (<code>[[</code> is a bash builtin; <code>help test</code> for details) and adds some functionality.</p>

<p>Functions return their last exit value already so <code>contains()</code> can be shortened to <code>contains() { test "${1#*$2}" != "$1"; }</code>  Whether you prefer this is up to you.</p>

<p>Use bash defaulting mechanism instead of <code>if [[ -z</code>, as in  <code>CONF=${2:-./steps.json}</code></p>

<p>Use <code>for ((i=0; i&lt;$LIMIT; i++))</code> instead of <code>i=0; while ...</code></p>

<p>Test the exit values of things that shouldn't fail, as in <code>mkdir -p "$DESTROOT" || exit 1</code>.  <strong>Any invocation of <code>cd</code> or <code>pushd</code> should be checked for success, always!</strong> A general purpose <code>DIE()</code> function can replace the naked exit and take an error message as an argument.  If nothing should fail, <code>set -e</code> or <code>trap DIE ERR</code> (the first argument is a function name) does this globally.</p>

<p>Constructions like <code>jq -r ".["$i"].files | length")</code> and <code>echo "    ""$FSRC"</code> are kind of weird and the inner double quotes probably should be removed.</p>

<p>In a language where every variable is a global, it's a good habit to use fewer variables.   For example, <code>RES=$(foo); LOOP=$( echo "$RES" | ...)</code> can just be <code>LOOP=$( foo | ...)</code></p>

<p>Your get-conf pattern should be in a function like <code>get_conf() { jq -r $1&lt;&lt;&lt;$CONF; }</code></p>

<p>Pruning code paths is important in an interpreted language.  Since the wildcard copy method works for regular copies too, just use that one unconditionally and remove <code>if contains ... "\*"</code></p>

<p>You don't need to escape wildcards like <code>*</code> in double quotes.  When in doubt about what will be interpolated, use single quotes. Quoting in bash can be very complex and take a long time to learn; an advanced understanding of it will help to avoid common bugs.</p>

<p>Since you are using commands that aren't standard, it's a good idea to set PATH in the script, or as an optional config directive, and to check that they're there before you begin, as in <code>require() { for cmd in "$@"; do type $cmd &gt;/dev/null || exit 1; done; }</code> followed by <code>require jq udisksctl</code></p>

<p>Read CONF just once, into a variable: <code>conf=$(&lt;$CONF)</code>, and query that.  Then you can edit the config while the script runs.</p>
    </div>