<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Further to what Jive Dadson mentioned.</p>

<p>You can reduce your methods in Kennel to </p>

<pre><code>void AddAnimal(Animal *animal);
</code></pre>

<p>This could be called by </p>

<pre><code>kennel.AddAnimal(new Cat("Garfield")); // or new Dog(), as appropriate
</code></pre>

<p>Your roll call remains the same because your <code>Animal</code> class has the abstract method <code>virtual void makeSound(std::string name) { }</code>. And this <code>Animal</code> class, not the <code>Kennel</code> class contains the name (<code>Animal</code> has a <code>name</code>)</p>

<pre><code>protected:
    std::string name;
</code></pre>

<p>Using the correct abstraction makes adding other animals (e.g. <code>Horse</code>, <code>Snake</code>) easy and logical to do. Using your current code, adding a <code>Horse</code> means writing the <code>Horse</code> class and then an <code>AddHorse</code> method. With the abstraction I have suggested, all you do is write the <code>Horse</code> class (<code>class Horse :public Animal</code>) and your <code>Kennel</code> class just works as before.</p>
    </div>