<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Avoid <code>using namespace std</code>. You just don't know what-all symbols that spews into your global namespace, causing lots of grief when you least suspect it.</p></li>
<li><p>Your interface should contain protected default-constructor, copy-constructor, and copy-assignment-operator.</p></li>
<li><p>You should use <code>=default</code> when you are explicitly defaulting a special-member-function, so it can stay <em>trivial</em>.</p></li>
<li><p>If you use a <code>struct</code>, default-access is <code>public</code> instead of <code>private</code>, which would allow you to dispense with some access-specifiers.<br>
Though that <em>can</em> be controversial for classes which have non-public members, or generally any feature not supported by C.</p></li>
</ol>



<pre><code>struct Comparable {
    virtual ~Comparable() = default;
    virtual int compare(const Comparable&amp; other) const = 0;
protected:
    Comparable() = default;
    Comparable(const Comparable&amp;) = default;
    Comparable&amp; operator=(const Comparable&amp;) = default;
};
</code></pre>

<ol start="5">
<li><p><code>HighScoreElement</code> should be marked <code>final</code>, prohibiting further derivation and thus allowing some optimizations, unless you redesign it for inheritance. Which you actually shouldn't do.</p></li>
<li><p>Don't needlessly create copies of non-trivial types on call / return, use constant references.<br>
Only <code>HighScoreElement::getName</code> fails that now.</p></li>
<li><p>Consider marking overrides with <code>override</code>, which in contrast to repeating <code>virtual</code> actually is meaningful.</p></li>
<li><p>You should bail out immediately if your <code>dynamic_cast</code> fails.<br>
Consider just changing it to a reference-cast so that's automated.</p></li>
<li><p>Avoid useless blocks and concomitant further indentation.<br>
After a <code>return</code>, processing leaves the function immediately.</p></li>
</ol>



<pre><code>int compare(const Comparable&amp; other) const override {
    auto&amp;&amp; x = dynamic_cast&lt;const HighScoreElement&amp;&gt;(other);
    if(getScore() &lt; x.getScore())
        return -1;
    else if(getScore() &gt; x.getScore())
        return 1;
    if(getName() &lt; x.getName())
        return -1;
    else if(getName() &gt; x.getName())
        return 1;
    return 0;
}
</code></pre>

<ol start="10">
<li><p>There's <code>std::swap</code> in <code>&lt;utility&gt;</code> for swapping two items.</p></li>
<li><p>Insertion-sort isn't the best algorithm there is, but it will get the job done, as long as the vector isn't too big.</p></li>
<li><p>You should use a smart-pointer to manage your elements, best-suited is probably <code>std::unique_ptr</code> from <code>&lt;memory&gt;</code>.</p></li>
<li><p>You could use list-initialization to initialize your vector instead of adding the elements afterwards one-by-one:</p>

<pre><code>vector&lt;Comparable*&gt; v {
    new HighScoreElement("Kate Bush", 10),
    new HighScoreElement("Peter Gabriel", 20),
    ...
};
</code></pre></li>
<li><p><code>return 0;</code> is implicit in C++ and C99+ for <code>main</code>.</p></li>
</ol>
    </div>