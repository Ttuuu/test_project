<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>too many false arguments, for instance </p>

<pre><code>if ((modelTextBox.Text.Contains("Pixel")) == (brandTextBox.Text.Contains("Google")))
{
    phone.Model = modelTextBox.Text;

    if ((modelTextBox.Text.Contains("8")) || (modelTextBox.Text.Contains("x")) == (brandTextBox.Text.Contains("iPhone")))
    {
        phone.Model = modelTextBox.Text;
    }
    else
    {
        MessageBox.Show("Please enter an iPhone model. (8 or X)");
    }
}
else
{
    MessageBox.Show("Please enter a Google model. (Pixel)");
}
</code></pre>

<p>if is it contains Pixel and Google, then how it could be possible to contain iPhone ?</p>

<p>your logic needs to be refactored and tested. The easiest way to refactor it is to invert the ifs. If you give a good look at the ifs, you'll find that <code>phone.Model</code> is assigned multiple times with <code>modelTextBox.Text</code>, which is redundant. it needs to be assigned once. So what you can do is to extract the validations and invert them to be outside and the compile would go throw them top to bottom, and if passed all, the bottom line would assign whatever value to <code>phone.Model</code> example : </p>

<pre><code>// Get the phone's brand. Check that it is a valid brand.
if(!((brandTextBox.Text.Contains("Google")) || (brandTextBox.Text.Contains("iPhone")) || (brandTextBox.Text.Contains("Samsung"))))
{
    MessageBox.Show("Please enter a valid brand. (Google, iPhone, or Samsung)");
}

phone.Brand = brandTextBox.Text;

// Get the phone's model. Check that it is a valid model and matches brand.
if (!((modelTextBox.Text.Contains("Galaxy")) || (modelTextBox.Text.Contains("Note")) || (modelTextBox.Text.Contains("8")) || (modelTextBox.Text.Contains("X")) || (modelTextBox.Text.Contains("Pixel"))))
{
    MessageBox.Show("Please enter a valid model. (Galaxy, Note, 8, X, Pixel)");
}

if (!((modelTextBox.Text.Contains("Galaxy")) || (modelTextBox.Text.Contains("Note")) == (brandTextBox.Text.Contains("Samsung"))))
{
    MessageBox.Show("Please enter a Samsung model. (Galaxy or Note)");
}

if (!((modelTextBox.Text.Contains("Pixel")) == (brandTextBox.Text.Contains("Google"))))
{
    MessageBox.Show("Please enter a Google model. (Pixel)");
}

if (!((modelTextBox.Text.Contains("8")) || (modelTextBox.Text.Contains("x")) == (brandTextBox.Text.Contains("iPhone"))))
{
    MessageBox.Show("Please enter an iPhone model. (8 or X)");
}

phone.Model = modelTextBox.Text;
</code></pre>

<p>The real refactoring you need to do is to move the validations into separate methods, and keep the validations based on the brand. So, you now have three brands <code>Google, iPhone, or Samsung</code> it would be much cleaner if you implement three methods <code>ValidateSuamsung(string model)</code> and <code>ValidateGoogle(string model)</code> and <code>ValidateGoogle(string model)</code> then you can implement each validation inside its method, and then use a simple validation on the brand and execute its method like this : </p>

<pre><code>// The GetPhoneData method accepts a CellPhone object as an argument. It assigns the data entered by the user to the object's properties.

    private void GetPhoneData(CellPhone phone)
    {
        switch(brandTextBox.Text)
        {
            case "Google":
                ValidateGoogle(modelTextBox.Text);
                break;
            case "Samsung":
                ValidateSamsung(modelTextBox.Text);
                break;
            case "iPhone":
                ValidateiPhone(modelTextBox.Text);
                break;
            default: 
                MessageBox.Show("Please enter a valid brand. (Google, iPhone, or Samsung)");
                break;          
        }

        phone.Brand = brandTextBox.Text;
    }
</code></pre>

<p>Also, since you have multiple <code>Contains</code>, you could do something like : </p>

<pre><code>// Get the phone's model. Check that it is a valid model and matches brand.

var model = new string[] { "Galaxy", "Note", "8", "X", "Pixel" };

if(!model.Contains(modelTextBox.Text))
{
    MessageBox.Show("Please enter a valid model. (Galaxy, Note, 8, X, Pixel)");
}
</code></pre>

<p>if you move the validations based on the brand like I suggested, I beleive that you'll make a simpler validation and shorter as well, as you'll validate based on brand, which will make things more specific and straight forward. </p>
    </div>