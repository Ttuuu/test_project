<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The art of Oop is that you have objects which have a simple, clear and unambiguous roles which can be composed together to achieve the result you want.  You don't use objects as a convenient place to hide a pile of disconnected activities.</p>
<p>In the code you provide you have two main issues, collecting a text value and displaying the current validation status, and  validating the incoming text value.  Let's assume you are validating character by character.</p>
<p>I would have one object (a text gatherer) whose task it is to collect the text input. At initialisation, the text gatherer object would be provided with a validator object.</p>
<p>The text gatherer object provides each character to its validator object.  The validator object has two functions.</p>
<ol>
<li><p>It indicates if the new character is accepted/not accepted according to the validation criteria.</p>
</li>
<li><p>Triggers a input completed event once an input that matches the desired input has been achieved.</p>
</li>
</ol>
<p>The Validator objects would be written so as to work through an IValidator interface to facilitate intellisense and compiler checking..</p>
<p>For VBA, if there are enumerations and constants that are used across multiple objects I would put these in the relevant interface, or  a seperate helper class/module if there are also Methods used by all validator objects.</p>
<p>For the text gatherer object I might also want to split this into an object that just gets text and a second object that displays the current validation status.</p>
    </div>