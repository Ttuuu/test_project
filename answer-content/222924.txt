<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First thing I'd like to tackle right away is the name convention for method names and variables.</p>

<p>In ruby, we use <code>underscore_style</code> instead of <code>camelCaseStyle</code> - this makes a huge difference.</p>

<p>Now, let's tackle the code itself. One thing that I see that could be improved here is the fact that you aren't leveraging the power of ruby collections and classes.</p>

<p>So, let's start from the beginning.
First, here is what I see that you coding is doing (needs to be done):</p>

<ol>
<li>Get data from http</li>
<li>Parsing JSON</li>
<li>Calculate score</li>
<li>Show score</li>
</ol>

<p>Those are 4 different responsibilities that can be separated into mini-classes/modules whatever. It's important to make this distinction, so then you can have a more modular system.</p>

<p>What I like to do is to create very small specialised classes and build on top of them creating more and more complex layers of abstractions.</p>

<p>For instance, starting from 1. We can create a class that only handle http requests, and knows nothing about the endpoints it needs to consume.</p>

<pre><code>class Http
  attr_reader :client

  def initialize(client = Typhoeus)
    @client = client
  end

  def get(url)
    client.get(url).body
  end
end
</code></pre>

<p>Here I pass the client option, making this class some sort of a adapter. So then, down the road, if I want to I can change my http library without breaking the other classes that depends on this one - Also, Since I own <code>Http</code> class I have more control over its API and I can more easily upgrade Typhoeus to a new version since this is the only place where I interact with this gem.</p>

<p>Next up, consuming the Github JSON Api:</p>

<pre><code>class Github
  BASE_URI = "https://api.github.com"

  attr_reader :http

  def initialize(http: Http.new)
    @http = http
  end

  def events(user)
    parse http.get(URI.join(BASE_URI, "/users/#{user}/events/public"))
  end

  private

  def parse(body)
    json(body).map { |entry| OpenStruct.new(entry) }
  end

  def json(body)
    JSON.parse(body)
  end
end
</code></pre>

<p>As you can see, this class tries to be very generic as well. In this case, we expose the events endpoint, but we can as well expose different endpoints of this API. Up to now there's no reference of scores or anything, so this class can be safely used for other purposes when interacting with Github API.</p>

<p>At this point we are left to the meat of the project, where the business logic comes into place.</p>

<p>One thing I'd like to point out is the usage of hash mapping for the scores:</p>

<pre><code>   type_and_score = {
      :IssuesEvent =&gt; 7,
      :IssueCommentEvent =&gt;  6,
      :PushEvent =&gt; 5,
      :PullRequestReviewCommentEvent =&gt; 4,
      :WatchEvent =&gt; 3,
      :CreateEvent =&gt; 2
   }
</code></pre>

<p>I'd say this kinda works fine, but I believe there are better ways to handle that. This is usually what we call Primitive Obsession and here, I can clearly see that this hash contains too much knowledge about something (and this something is the core of the business logic - which is the score).</p>

<p>On this scenario, I'd rather create a class to represent the Score itself and make this class a bit smarter, instead of relying solely in the hash provided by ruby. Also, using it together with ruby <code>Enumerable's</code> module we can simplify the score calculation by a bunch, here's how:</p>

<p>First, I simply create a class that represents a score:</p>

<pre><code>class Score
  attr_reader :name, :weight

  def initialize(name, weight)
    @name   = name
    @weight = weight
  end
end
</code></pre>

<p>This class is very simple, and its sole purpose is to store information in a nice manner.</p>

<p>Then, I have something that I called ScoreSet (for lack of better name) which is a collection of scores.</p>

<pre><code>class ScoreSet
  include Enumerable

  attr_reader :scores

  def initialize(scores)
    @scores = scores
  end

  def each(&amp;block)
    @scores.each(&amp;block)
  end

  def for(name)
    find { |s| s.name == name } || Score.new(name, 1)
  end
end
</code></pre>

<p>This class leverages the powerful <code>Enumerable</code> module, that gives us for free methods like <code>map</code>, <code>sum</code> and so son after implementing the <code>each</code> method in it.</p>

<p>Also, See how the factory method <code>for</code> decides which score to select as well as default one.</p>

<p>Finally, to keep things tidy, I calculate the score itself:</p>

<pre><code>class CalculateUserScore
  def initialize(events, score_set)
    @events = events
    @score_set = score_set
  end

  def call
    @events.map { |e| @score_set.for(e.type) }.sum(&amp;:weight)
  end
end
</code></pre>

<p>And the calculation is a simple map over the score set calling sum in the end (thanks to Enumerable module)</p>

<p>I'd say this is definetly a bit over-complex version of the problem and I wouldn't do this for such a small script. However, I do believe those patterns can be used in larger applications to have a more modular and robust system.</p>

<p>The full source is available here: <a href="https://gist.github.com/jonduarte/017121fa4804189091769eaf9fe7fdc9" rel="nofollow noreferrer">https://gist.github.com/jonduarte/017121fa4804189091769eaf9fe7fdc9</a></p>
    </div>