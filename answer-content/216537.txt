<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Is there any use to only including one of the headers? No.<br>
Are they all part of an intrinsic whole? Yes.<br>
So, why try to artificially separate them? Doing so just creates extra complexity.</p></li>
<li><p>You are right that having the root store a spurious element is a serious error, especially as you might not even be able to construct it. Fortunately, that's easily remedied:<br>
Introduce an additional type only storing the links, have <code>Node</code> inherit from it, and only store that for manipulating the hierarchy.</p>

<pre><code>struct Links {
    Links* next = nullptr;
    Links* prev = nullptr;
};
</code></pre>

<p>For bonus points, make <code>List::List()</code> <code>noexcept</code> by making the root part of the <code>List</code>. </p></li>
<li><p><code>Node</code> tries to do far too much. It is an implementation-detail of the list, and any desperate struggle to OO-ify, encapsulate, and make it its own separate abstraction just adds needless complexity. Yes, it needs the links (<code>prev</code> and <code>next</code>), and has to store the payload (<code>value</code>), but the only useful addition aside from that is a ctor forwarding all arguments to the <code>value</code>-member, to insulate the list from changes in the members order and prepare for implementing <code>emplace</code>-functions.</p>

<p>All the logic belongs in the list directly.</p>

<pre><code>template &lt;class T&gt;
struct Node : Links {
    template &lt;class... X, decltype(new T(std::declval&lt;X&gt;(x)...))&gt;
    Node(X&amp;&amp;... x) : value(std::forward&lt;X&gt;(x)...) {}

    T value;
};
</code></pre></li>
<li><p>Reference-types and pointer-types are the exception, not the rule. All other user-defined types are expected to provide transitive-const. Which explains why you couldn't find much use to <code>const_iterator</code>.</p>

<p>When re-doing all involved parts, consider using <code>Node&lt;std::remove_const_t&lt;T&gt;&gt;</code> for the node-type of <code>List&lt;T&gt;</code> and <code>Iterator&lt;T&gt;</code>. Doing so allows more re-use and composition.</p>

<p>Also keep in mind that any iterator should be trivially convertible to the corresponding constant iterator. And that (nearly) all iterators are so light-weight passing by reference is a pessimisation.</p></li>
<li><p>If you add support for swapping (<code>friend void swap(List&amp; a, List&amp; b) noexcept</code>) and construction from arbitrary iterator-ranges (<code>template &lt;class InputIt&gt; List(InputIt first, InputIt last)</code>), the rest will easily fall into place.</p></li>
<li><p>Consider whether defining a function in-class won't simplify things.</p></li>
</ol>
    </div>