<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>The standard naming convention in C# for local variables and parameters is <code>camelCase</code>. An underscore prefix is usually used for private class fields.</p></li>
<li><p>You repeat the code so the the background color three times - this should be extracted into a separate method.</p></li>
<li><p>This will perform an integer division:</p>

<pre><code>_rgbIntervals[i] = (_rgbOriginalColours[i] - _rgbEventColours[i]) / _intervals;
</code></pre>

<p>which means if the difference between two color part is less than <code>_intervals</code> the calculated step is <code>0</code>. Also you will get quite big accumulated errors due to the rounding. For example if you start with the color <code>(30, 30, 30)</code> and want it to fade to <code>(60, 60, 60)</code> then you will end up only fading to <code>(50, 50, 50)</code> because <code>60 - 30 = 30</code> and <code>30 / 20</code> = <code>1.5</code> but the <code>1.5</code> will be truncated to <code>1</code> due to integer division.</p>

<p>You do set the final color to the target color but it would be smoother to calculate the step sizes as floats.</p></li>
<li><p>You keep track of the various part and intermediate values in a bunch of arrays which do not have any direct relationship. It's also not very re-usable this way. I would encapsulate it in it's own class.</p></li>
</ol>

<p>So the refactored code could look like this:</p>

<p>Class to encapsulate the fading between two colors:</p>

<pre><code>public class ColorFader
{
    private readonly Color _From;
    private readonly Color _To;

    private readonly double _StepR;
    private readonly double _StepG;
    private readonly double _StepB;

    private readonly uint _Steps;

    public ColorFader(Color from, Color to, uint steps)
    {
        if (steps == 0)
            throw new ArgumentException("steps must be a positive number");

        _From = from;
        _To = to;
        _Steps = steps;

        _StepR = (double)(_To.R - _From.R) / _Steps;
        _StepG = (double)(_To.G - _From.G) / _Steps;
        _StepB = (double)(_To.B - _From.B) / _Steps;
    }

    public IEnumerable&lt;Color&gt; Fade()
    {
        for (uint i = 0; i &lt; _Steps; ++i)
        {
            yield return Color.FromArgb((int)(_From.R + i * _StepR), (int)(_From.G + i * _StepG), (int)(_From.B + i * _StepB));
        }
        yield return _To; // make sure we always return the exact target color last
    }
}
</code></pre>

<p>And the refactored method in your form:</p>

<pre><code>private void ChangeControlColour(Control activeControl,  Color eventColour) 
{
    int intervals = 20;

    var colorFader = new ColorFader(eventColour, activeControl.BackColor, intervals);

    SetControlBackColor(eventColor);

    /*  LinearFading Process isolated in a seperate Task to avoid blocking UI   */
    Task t = Task.Factory.StartNew(() =&gt;
    {
        System.Threading.Thread.Sleep(500);
        foreach (var color in colorFader.Fade())
        {
            SetControlBackColor(color);
            System.Threading.Thread.Sleep(50);
        }
    });
}

private void SetControlBackColor(Color color)
{
    if (_activeControl.InvokeRequired)
        _activeControl.Invoke((MethodInvoker)delegate { _activeControl.BackColor = color; });
    else
        _activeControl.BackColor = color;
}
</code></pre>
    </div>