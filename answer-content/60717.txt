<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few points that nearly jump out at me:</p>

<ol>
<li><p>You've implemented it as a linked list of individually allocated nodes. This nearly guarantees poor locality of reference and for small types wastes quite a bit of space.</p></li>
<li><p>Your destructor leaks memory:</p>

<pre><code>template &lt;typename T&gt;
queue&lt;T&gt;::~queue() {
    node *curr = new node();
    while(head) {
        curr = head;
</code></pre>

<p>This allocates a node (not clear why you'd want to allocate a node in the dtor, but there it is), then if <code>head != nullptr</code>, it overwrites that pointer with <code>head</code>, thus leaking the node it just allocated (and if that condition isn't met, it just flows off the end without doing any more with <code>curr</code>, also leaking the memory).</p></li>
<li><p>Your <code>node</code> type takes for granted that a <code>T</code> can be initialized from <code>0</code>:</p>

<pre><code>node()
    : data(0)
</code></pre>

<p>For a generic type, this assumption is unwarranted. You typically want to use <code>T()</code> to create a value-initialized object, which will be 0 for arithmetic types, a null pointer for a pointer type, an empty string for a string type, and so on.</p></li>
</ol>
    </div>