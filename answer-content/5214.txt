<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your use of the dictionary seems to be a way to allow the numbers to arrive out-of-order.
Rather than sort them, you seem to be trying to use a dictionary (and associated hashing) to maximize efficiency.</p>

<p>This doesn't really work out perfectly, since you wind up doing sequential searches for a given value.  </p>

<p>Hashing a low:high range (a dictionary key:value pair) to avoid a search doesn't help much.  Only they key gets hashed.  It does help in the case where you're extending a range at the low end.  But for extending a range at the high end, you have to resort to searches of the dictionary values.</p>

<p>What you're really creating is a collection of "partitions".  Each partition is bounded by a low and high value.  Rather than a dictionary, you can also use a trivial tuple of (low, high).  To be most Pythonic, the (low,high) pair includes the low, but does not include the high.  It's a "half-open interval".</p>

<p>Here's a version using a simple <code>set</code> of tuples, relying on hashes instead of bisection.</p>

<p>A binary search (using the <code>bisect</code> module) may perform well, also.  It would slightly simplify adjacent range merging, since the two ranges would actually be adjacent.  However, this leads to a cost in restructuring the sequence.</p>

<p>You start with an empty set of partitions, the first number creates a trivial partition of just that number.</p>

<p>Each next number can lead to one of three things.</p>

<ol>
<li><p>It extends an existing partition on the low end or high end.  The number is adjacent to exactly one range.</p></li>
<li><p>It creates a new partition.  The number is not adjacent to any range.</p></li>
<li><p>It "bridges" two adjacent partitions, combining them into one.  The number is adjacent to two ranges.</p></li>
</ol>

<p>It's something like this. </p>

<pre><code>def make_ranges(numberlist):
    ranges=set()
    for number in numberlist:
        print ranges, number
        adjacent_to = set( r for r in ranges if r[0]-1 == number or r[1] == number )
        if len(adjacent_to) == 0:
            # Add a new partition.
            r = (number,number+1)
            assert r[0] &lt;= number &lt; r[1] # Trivial, right?
            ranges.add( r )
        elif len(adjacent_to) == 1:
            # Extend this partition, build a new range.
            ranges.difference_update( adjacent_to )
            r= adjacent_to.pop()
            if r[0]-1 == number: # Extend low end
                r= (number,r[1])
            else:
                r= (r[0],number+1) # Extend high end
            assert r[0] &lt;= number &lt; r[1] 
            ranges.add( r )
        elif len(adjacent_to) == 2:
            # Merge two adjacent partitions.
            ranges.difference_update( adjacent_to )
            r0= adjacent_to.pop()
            r1= adjacent_to.pop()
            r = ( min(r0[0],r1[0]), max(r0[1],r1[1]) )
            assert r[0] &lt;= number &lt; r[1]
            ranges.add( r )
    return ranges
</code></pre>

<p>This is a pretty radical rethinking of your algorithm, so it's not a proper code review.</p>

<p>Assembling a string with separators is simpler in Python.  For your example of ","-separated strings, always think of doing it this way.</p>

<pre><code>final = ",".join( details )
</code></pre>

<p>Once you have that, you're simply making a sequence of details.  In this case, each detail is either "x-y" or "x" as the two forms that a range can take.</p>

<p>So it has to be something like </p>

<pre><code>details = [ format_a_range(r) for r in ranges ]
</code></pre>

<p>In this example, I've shown the format as an in-line <code>def</code>.  It can be done as an <code>if-else</code> expression, also.</p>

<p>Given your ranges, the overall function is this.</p>

<pre><code>def formatpagelist (numberlist):
    ranges= make_ranges( numberlist )
    def format_a_range( low, high ):
        if low == high-1: return "{0}".format( low )
        return "{0}-{1}".format( low, high-1 )
    strings = [ format_a_range(r) for r in sorted(ranges) ]
    return ",".join( strings )
</code></pre>
    </div>