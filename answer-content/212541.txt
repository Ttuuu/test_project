<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are making your life too difficult, IMO. Whenever you iterate over all members of a <code>set</code> to see if some element is in it or write <code>list(unique)</code>, you are probably doing something wrong.</p>

<p>I would just transform each word into a canonical form (you could choose a <code>frozenset</code> of the <code>Counter</code> items or just a sorted string). Then just count how often each appears:</p>

<pre><code>def anagram_counter(words):
    count = Counter(frozenset(Counter(word).items()) for word in words)
    return sum(choose(x, 2) for x in count.values() if x &gt; 1)

def anagram_counter2(words):
    count = Counter("".join(sorted(word)) for word in words)
    return sum(choose(x, 2) for x in count.values() if x &gt; 1)
</code></pre>

<p>You could optimize the last line by using <code>Counter.most_common</code> and stopping as soon as you get to the elements that appeared only once:</p>

<pre><code>from itertools import takewhile

def anagram_counter3(words):
    count = Counter("".join(sorted(word)) for word in words)
    return sum(choose(x[1], 2)
               for x in takewhile(lambda t: t[1] &gt; 1, count.most_common()))
</code></pre>

<p>Comparing the timings for some small input:</p>

<pre><code>x = ["foo", "bar", "oof", "rab", "foobar"]
%timeit anagram_counter(x)
# 27.2 µs ± 1.4 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
%timeit anagram_counter2(x)
# 9.71 µs ± 656 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
%timeit anagram_counter3(x)
# 11.9 µs ± 492 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
%timeit anagram_counter_op(x)
# 25.6 µs ± 472 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>

<p>And for some larger inputs:</p>

<pre><code>import random
import string
import numpy as np

# increasing number of words, always 5 letters
x1 = [["".join(random.choices(string.ascii_lowercase, k=5)) for _ in range(n)]
     for n in np.logspace(1, 4, num=10, dtype=int)]
# increasing length of words, always 500 words
x2 = [["".join(random.choices(string.ascii_lowercase, k=n)) for _ in range(500)]
     for n in np.logspace(1, 4, num=10, dtype=int)]
</code></pre>

<p><a href="https://i.stack.imgur.com/r0xZ5.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/r0xZ5.png" alt="enter image description here"></a></p>

<p><a href="https://i.stack.imgur.com/jDHlU.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/jDHlU.png" alt="enter image description here"></a></p>

<p>(Note that both axis are logarithmic on both plots.)</p>
    </div>