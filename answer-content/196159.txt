<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should separate the initialization of the input from the actual processing. Maybe in two different classes or at least in two or more distinct methods. It is good coding practice and it causes you to focus on each detail isolated. </p>

<p>Why are you running the same code 10 times, when you just keep overwrite the same output files?</p>

<p>Wouldn't it be more likely to have the compatibility between males and females as part of the input?:</p>

<pre><code>John: Jill,Eve,Connie,Kate
Jim: Eve,Kate,Carla
...
</code></pre>

<p>or else you would probably have some input with the compatibility anyway.</p>

<p>This loop can potentially run forever:</p>

<blockquote>
<pre><code>    while (usedNames.Contains(male[randomName]))
    {
        randomName = random.Next(0, male.Length);
    }
</code></pre>
</blockquote>

<p>Naming: the list you select here is actually the longest</p>

<pre><code>Person[] shorterListOfPersons = maleIndividuals.Length &gt; femaleIndividuals.Length ? maleIndividuals : femaleIndividuals;
</code></pre>

<p>You repeat yourself a couple of times:</p>

<blockquote>
<pre><code>    for (int i = 0; i &lt; maleIndividuals.Length; i++)
    {
        // Select a random male name that we haven't used yet
        int randomName = random.Next(0, male.Length);

        while (usedNames.Contains(male[randomName]))
        {
            randomName = random.Next(0, male.Length);
        }

        // Record the fact that we just used this name
        usedNames.Add(male[randomName]);

        maleIndividuals[i] = new Person
        {
            Name = male[randomName],
            G = Gender.M
        };
    }
</code></pre>
</blockquote>

<p>The above code is exactly the same for both males and females. So it would be productive to make a method to handle that:</p>

<pre><code>Person[] CreatePersonList(string[] names, Gender gender)
{
  return names.Select(n =&gt; new Person { Name = n, G = gender}).ToArray();
}
</code></pre>

<p>Why do you have to randomize the initialization of the male/female lists? If you need a randomized output, then you should do the randomization in output selection - not in the input creation.</p>

<p>The methods <code>SerializeMatchesToCSV</code> and <code>SerializeCompatabilitiesToCSV</code> are identical except for the output file name, so make one method having the output file name as argument:</p>

<pre><code>void SerializeToCSV(string fileName, Peron[] males, Person[] females)
{
  ...
}
</code></pre>
    </div>