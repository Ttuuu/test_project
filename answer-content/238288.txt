<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overview</h2>

<p>Dijkstra Algorithm my favorite algorithm :-)</p>

<p>I wrote an overview of how to do it <a href="https://stackoverflow.com/a/3448361/14065">StackOverflow</a>:  </p>

<p>My main observation is that you have crammed three things together that I would separate into three district code reviews (and thus three independent pieces of code). As a result I think your code is very tightly coupled where I think a loose coupling would be better design</p>

<ol>
<li>I would separate the graph into its own class.<br>
Nodes/edges and their relationship should be completely independent to the algorithm.<br>
Yes there is a common shared interface but given a graph written by somebody else I could write a simple wrapper over the graph and still make it work with your algorithm.</li>
<li>You store the intermediate information about the traversal inside you node structure.<br>
I would separate this out into its own independent structure that is held separately to the graph.<br>
This can be customized what you want out of the algorithm (just best distance, or the route).</li>
<li>The algorithm should be independent of the graph and depend on a small interface.</li>
</ol>

<h3>The simplest interface:</h3>

<pre><code>NodeId       Graph::getNodeFromName(Name);
ListOFEdge   Graph::getOutputEdges(NodeId);
Edge         Is {Src(NodeId)/Dst(NodeId)/Cost(None negative value)}
</code></pre>

<p>This should be all you need.</p>

<h2>Code Review</h2>

<p>Please stop this:</p>

<pre><code>using namespace std;
</code></pre>

<p>Read this article: <a href="https://stackoverflow.com/q/1452721/14065">Why is “using namespace std;” considered bad practice?</a>
My favorite answer is <a href="https://stackoverflow.com/a/1453605/14065">the second</a>.</p>

<p>This should explain why using this can cause unexpected errors in all sorts of situation where you would not expect it.</p>

<hr>

<p>In the class node:</p>

<pre><code>class Node {
</code></pre>

<p>Data that is only relevant to a traversal algorithm. Its not relevant to the Node object and thus should not be here.</p>

<pre><code>    int d;                    // Overall distance from the start point
    bool processed;           // Visited node indicator
</code></pre>

<p>A node in a graph has a parent?</p>

<pre><code>    Node* parent;
    // OK. Having read all the way down to the algorithm I finally found it.
    //     You are recording the shortest path through the graph using this
    //     member.
    //     So I would add this to the members that belong to the algorithm
    //     rather than the node/graph. So some of the following comments
    //     about parents are out-dated by this final realization.
    //
    //     Better name for this member is defiantly needed.
</code></pre>

<p>These two members seem to be about the same thing. We are these in two different members?</p>

<pre><code>    vector&lt;Node*&gt; neighbors;  
    vector&lt;int&gt;   dist;         // Distance from each heighbor
</code></pre>

<p>I would have combined them into single structure so that they always move around together.</p>

<pre><code>    vector&lt;std::pair&lt;Node*, int&gt;&gt;  edge;  // destination and cost.
</code></pre>

<hr>

<p>Wow this is an extensive interface for Node that does very little to help encapsulation. I would argue that this breaks encapsulation as you can simply modify anything without any control.</p>

<hr>

<p>There is a default ID of zero to node?</p>

<pre><code>    Node(int = 0);
</code></pre>

<p>So you can make lots of node's with ID of zero. I would definitely not make this a default value. I would go one step further and say that the user should not be setting the ID of the nodes (this is an internal property of the graph that is set internally).</p>

<p>The user may look up the ID of a node using a name but the user should not be able to set or alter the ID of node. It must be unique and therefore setting it is part of the graphs responcability.</p>

<hr>

<p>Why can you add a neighbor and distance independently. This is just begging for bugs to happen. An edge has a destination and a cost.</p>

<pre><code>    void addNeighbor(Node*);
    void addDist(int);
</code></pre>

<p>Now some graphs edge are bidirectional (others they are not). But when you have bidirectional edges the graph should provide a simpler interface that internally adds all the appropriate internal structures.</p>

<pre><code>  // Adding a bi-directional edge.
  Graph::addEdge(Node&amp; src, Node&amp; dst, int cost) {
      src.addEdge(dst, cost);
      dst.addEdge(src, cost);
  }
</code></pre>

<hr>

<p>Why are these modifiable externally?</p>

<pre><code>    void setLabel(int);
    void setD(int);
</code></pre>

<p>Are these not set as part of the constructor to the node?</p>

<hr>

<p>This is not part of a Node property but rather a property of the algorithm.</p>

<pre><code>    void setProccessed(bool);
    bool isProcessed();
</code></pre>

<hr>

<p>Why does a node have a parent.</p>

<pre><code>    void setParent(Node*);
    Node* getParent();
</code></pre>

<hr>

<p>Sure you can get the label/ID.</p>

<pre><code>    int getLabel();
    int getD();
</code></pre>

<p>But these should be const members (they don't change the state).</p>

<hr>

<p>Yes this is valid:</p>

<pre><code>    vector&lt;Node *&gt; getNeighbors();
    vector&lt;int&gt; getDist();
</code></pre>

<p>But like the internal structure I would return a list of edge information (destination and cost as one composite value).</p>

<hr>

<p>Don't use <code>this-&gt;</code>.</p>

<pre><code>Node::Node(int label) {
    this-&gt;label = label;
}
</code></pre>

<p>The only reason to use <code>this-&gt;</code> is to distinguish a local variable from a member variable. This means you have shadowed a member variable with a local. The compiler can not detect when you accidentally forget to use <code>this-&gt;</code> and thus can not generate any errors.</p>

<p>It is better to use very distinct meaningful variable names. That way when you use the wrong name it is easy to spot in the code. Also the compiler can easily detect shadowed variables and warn you about them.</p>

<p><strong>BUT</strong> in this case there is no need. You can use itializer lists to solve this issue.</p>

<pre><code>Node::Node(int label) {
    this-&gt;label = label;
}
</code></pre>

<p>In a constructor you should use initializer list.</p>

<pre><code>Node::Node(int label)
    : label(label)     // These are distinct and works as expected.
{}
</code></pre>

<p>Also using initializer list makes sure you don't initialize then overwrite a variable.</p>

<hr>

<p>Put simple one liners in the class declaration:</p>

<pre><code>class Node
{
    void Node::addNeighbor(Node* neighbor) {neighbors.push_back(neighbor);}
    void Node::addDist(int d)              {dist.push_back(d);}
    // etc
}
</code></pre>

<hr>

<p>I mentioned shadowed variables above:</p>

<pre><code>void Node::setD(int d) {
    this-&gt;d = d;
}

// Easier to read understand and let the compiler check written like this:

void Node::setD(int distance) {
    d = distance;
}
</code></pre>

<hr>

<p>I would write a graph like this:</p>

<pre><code> class Graph
 {
     public:
         class Node
         {
             public:
                 std:vector&lt;Edge&gt; const&amp; getEdges() const;
         };
         class Edge
         {
             public:
                 Node&amp;  getDst()  const;
                 int    getCost() const;
         };
         Node&amp; addNode(std::string const&amp; name);
         void  addEdge(Node&amp; src, Node&amp; dst, int cost);

         Node&amp;  getNode(std::string const&amp; name);
};
</code></pre>

<p>Notice: There are no pointers in the interface.</p>

<hr>

<p>This is fine.</p>

<pre><code>void init(ifstream&amp; f, Node**&amp; nodes, int&amp; n) {
</code></pre>

<p>Though I would phrase the interface differently. In C++ we use the input operator <code>operator&gt;&gt;</code> to read a stream into an object. So I would define it like this:</p>

<pre><code>std::istream&amp; operator&gt;&gt;(std::istream&amp; stream, Graph&amp; graph){
{
    graph.load(stream);  // So you need to add a load() method above.
    return stream;
}
</code></pre>

<hr>

<p>In modern C++ it is exceedingly rare to see new/delete.</p>

<pre><code>    nodes = new Node*[n];
</code></pre>

<p>Dynamic allocation is usually handled by structures designed to handle the allocation and correct destruction of the memory. In modern C++ this is either a smart pointer (std::unqiue_ptr or std::shared_ptr) or a container (std::vector / std::list / std::map etc)</p>

<p>In this case I would have used <code>std::vector&lt;Node&gt;</code>.</p>

<p>So all this code:</p>

<pre><code>    nodes = new Node*[n];
    int** adj = new int*[n];
    for (int i = 0; i &lt; n; i++) {
        adj[i] = new int[n];
    }
</code></pre>

<p>Can be replaced by:</p>

<pre><code>    std::vector&lt;Node&gt;  nodes;
    nodes.reserve(n);
</code></pre>

<hr>

<p>Just like not using new/delete above you should not in general be using pointers (yes overly broad). But if the objects can not be <code>nullptr</code> then you should be using references. As you get more advanced pointers creep back in but in general try and stick with references and passing by value.</p>

<p>Here:</p>

<pre><code>class Compare {
public:
    bool operator()(Node* n1, Node* n2) {
        return n1-&gt;getD() &gt; n2-&gt;getD();
    }
};
</code></pre>

<p>I would write this to use references (as I don't need to check the value are <code>nullptr</code>.</p>

<pre><code>class Compare {
public:
    bool operator()(Node const&amp; n1, Node const&amp; n2) {
        return n1.getD() &gt; n2.getD();
    }
};
</code></pre>

<hr>

Dijkstra

<pre><code>void dijkstra(Node** nodes, int n) {
</code></pre>

<p>Yes.</p>

<pre><code>    priority_queue&lt;Node*, vector&lt;Node*&gt;, Compare&gt; queue;
</code></pre>

<p>Normally for Dijkstra there are two structures. The ordered list you have. A list of already processed nodes. You seem to be missing the second (I suppose it is stored as part of your graph model).</p>

<pre><code>    do {
        current = queue.top();
        queue.pop();

        // You forgot to check if it has already been processed.
        // Ahhh. I see that you check that in the loop below.
        // The problem is that a node can still be added several times
        // to the priority queue before it is processed.
        //
        // Thus you should check here to see if it has been processed
        // and continue with the next loop if it was processed.
        current-&gt;setProccessed(true);
</code></pre>
    </div>