<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>One Source of Truth</h1>

<p><code>Weapon.XXX.beats</code> is redundant.  <code>Weapon.XXX.actions</code> provides the same information.</p>

<pre><code>elif ai.weapon in human.weapon.actions:
    # Human's weapon has an action -vs- ai's weapon, so human's weapon wins!
</code></pre>

<p>Therefore, you can remove all of the <code>Weapon.XXX.beats = [YYY, ZZZ]</code> code.  Having only one source of truth avoids the possibility of contradictory information.</p>

<p>Alternatively, you can generate all of the <code>.beats</code> information:</p>

<pre><code>for weapon in Weapon:
    weapon.beats = { inferior for inferior in Weapon if inferior in weapon.actions }
</code></pre>

<p>Note: I've used a <code>set</code> for <code>.beats</code>, for efficient <code>in</code> testing.</p>

<p>As <a href="https://codereview.stackexchange.com/users/203765/g%C3%A1bor-fekete">GÃ¡bor Fekete</a> points out in a comment below, this could be generated with slightly less code:</p>

<pre><code>for weapon in Weapon:
    weapon.beats = set(weapon.actions.keys())
</code></pre>

<h1>Enhanced Enums</h1>

<p>An enums is a class, and like any other class, you can extend it to enhance its behaviour.</p>

<p>In this project and the last project, you used <code>"# - name"</code> as a choice option.  We can add a <code>__str__</code> method this to the <code>Enum</code> class:</p>

<pre><code>class Weapon(Enum):
    Rock = 1
    Paper = 2
    Scissors = 3
    Lizard = 4
    Spock = 5

    def __str__(self):
        return f"{self.value} - {self.name}"
</code></pre>

<p>Now, <code>str(weapon)</code> or <code>f"{weapon}"</code> would would produce the <code>"# - name"</code> string.  Of course, you'd still use <code>weapon.name</code> when you want just the weapon's name.</p>

<p>As <a href="https://codereview.stackexchange.com/users/219945/marco-capitani">Marco Capitani</a> mentions in the comments, we can define a <code>.beats()</code> method (instead of a <code>.beats</code> data member) which gives us "<em>a single source of truth AND the useful minimal abstraction "beats" provides</em>".</p>

<pre><code>    def beats(self, other_weapon):
        return other_weapon in self.actions
</code></pre>

<p>which allows a more natural looking:</p>

<pre><code>    elif human.weapon.beats(ai.weapon):
</code></pre>

<p>Extending this:  A weapon that beats another weapon is "better than" another weapon, so we could define the <code>&gt;</code> and <code>&lt;</code> comparison operators in the <code>Weapon</code> class.</p>

<pre><code>    def __gt__(self, other_weapon):
        if isinstance(other_weapon, Weapon):
            return self.beats(other_weapon)
        return NotImplemented

    def __lt__(self, other_weapon):
        if isinstance(other_weapon, Weapon):
            return other_weapon.beats(self)
        return NotImplemented
</code></pre>

<p>which allows an even more natural looking:</p>

<pre><code>    elif human.weapon &gt; ai.weapon:
</code></pre>

<p>But use caution, restraint and common sense when it comes to defining these <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__gt_#object.__lt__" rel="nofollow noreferrer">rich comparison</a> operators.  You should only do so if there is a strict ordering possible between the objects, or you can create strange, non-transitive relationships, like:</p>

<pre><code>&gt;&gt;&gt; Weapon.Rock &gt; Weapon.Lizard &gt; Weapon.Spock &gt; Weapon.Rock
True
</code></pre>

<p>which means sorting, which relies on these comparison operations, will fail spectacularly.  Again, use common sense.  While the non-transitive nature of these weapons will break sorting, you aren't likely to be sorting, so I feel the clarity of the <code>human.weapon &gt; ai.weapon</code> wins out in this case.</p>

<p>The <code>isinstance(...)</code> check ensures that things like <code>Weapon.Rock &gt; 0</code> will still return a <code>TypeError</code>, instead of a meaningless <code>False</code> value.</p>

<p>In this project and the last project, you have an AI choosing weapons at random.  We can add a class method to do this into the <code>Weapon</code> class as well:</p>

<pre><code>    @classmethod
    def random(cls):
        return choice(list(cls))
</code></pre>

<p>which you would use like <code>ai.weapon = Weapon.random()</code>.</p>

<h1>AI's name</h1>

<p>You've made the AI a <code>Player</code> with the name <code>"Computer"</code>.  But then you display the score with:</p>

<pre><code>    print(f"{human.name} - {human.score}    -    Computer - {ai.score}\n")    
</code></pre>

<p>You should probably use:</p>

<pre><code>    print(f"{human.name} - {human.score}    -    {ai.name} - {ai.score}\n")    
</code></pre>

<p>in case you want to change the name of your AI to something else, like "HAL9000", "Deep Thought" or "GLaDOS".</p>

<p>Same issue here, but now you've got a problem with "the".  You probably wouldn't want "... and the Deep Thought chose ...", but simply dropping the word "the" is awkward if the name is "Computer" (you wouldn't want "... and Computer chose ..."):</p>

<pre><code>    print(f"You chose {human.weapon.name} and the computer chose {ai.weapon.name}")
</code></pre>

<h1>Instructions</h1>

<p>As <a href="https://codereview.stackexchange.com/users/129260/malivil">Malivi</a> points out, you spelt "scissors" incorrectly, which made me realize you still have multiple sources of truth: the <code>Enum</code> data &amp; the instructions.  If you modified the game to include more Weapons (Rock-Paper-Scissors-Lizard-Spock-Well-Plant), you'd have to update both areas!</p>

<p>Instead, you could change the code to display instructions based directly on the <code>Enum</code> data:</p>

<pre><code>def display_instructions(): 
    print(f"""
    {'_'*68}
    First the human player chooses ...
    """)

    for weapon in Weapon:
        losers = ", ".join(w.name for w in weapon.actions)
        print(f"{weapon.name} - beats {losers}")

    print(f"""
    Have fun!

    {'_'*68}
    """)
</code></pre>

<p>Joining a list of weapons, with commas between each one, with <code>" and "</code> before the last <code>weapon</code>, possibly using an <a href="https://en.wikipedia.org/wiki/Serial_comma" rel="nofollow noreferrer">Oxford comma</a>, left as exercise for the student. </p>
    </div>