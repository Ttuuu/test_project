<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You haven't shown how you intend to use this thing, so it's impossible to say for sure whether it "works correctly." For example, obviously it doesn't work if you're planning to use it like this:</p>

<pre><code>AtomicFixedSizeVector&lt;int&gt; v;
v.reserve(100);
std::thread t1([&amp;]() {
    while (v.size() &lt; 10) v.push_back(42);
});
std::thread t2([&amp;]() {
    while (v.size() &lt; 10) std::this_thread::sleep_for(1ms);
    std::cout &lt;&lt; v.m_data[0] &lt;&lt; "\n";  // DATA RACE!
});
</code></pre>

<hr>

<p>Obviously it won't compile if your type <code>T</code> isn't default-constructible. You could address that idiomatically by adding</p>

<pre><code>static_assert(std::is_default_constructible_v&lt;T&gt;);
</code></pre>

<p>to the top of the class body â€” thus hopefully reassuring the client-programmer that the crazy template error message they just got was <em>intended</em>, and not a bug.</p>

<hr>

<p>Your <code>reserve</code> method can only be called once, and <code>m_count</code> increases monotonically. Think about whether to implement a <code>clear()</code> method, and what it might do. Think about whether <code>reserve()</code> should reset <code>m_count</code> to zero or not.</p>

<p>My kneejerk reaction is that <code>reserve</code> shouldn't exist at all, and that you should force the user to construct the container with the right capacity to begin with:</p>

<pre><code>explicit AtomicFixedSizeVector(int capacity);
</code></pre>

<hr>

<p>ALX23z is right that what you mean is <code>FixedCapacity</code>, not <code>FixedSize</code>.</p>
    </div>