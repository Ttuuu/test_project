<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few minor things that weren't explicitly picked up on in the other answers;</p>

<blockquote>
<pre><code>If ObjectToTest.ItemsSelected.Count = 0 Then
    noVal = True
Else
    noVal = False
End If
</code></pre>
</blockquote>

<p>My personal preference in <code>Boolean</code> assigning blocks like these is a one liner:</p>

<pre><code>noVal = ObjectToTest.ItemsSelected.Count = 0
</code></pre>

<p>Which I find scans better and avoids the next problem (although I'm aware some people are squeamish about this sort of thing and prefer to be explicitly explicit)</p>

<hr>

<p>If you do use the <code>If</code> block at least be consistent:</p>

<blockquote>
<pre><code>Case Is = "TextBox"
    If Len(ObjectToTest.Value &amp; vbNullString) = 0 Then
        noVal = True
    End If

Case Else
</code></pre>
</blockquote>

<p>Here you have no <code>Else</code> statement and instead rely on the default initial value of <code>noVal</code> as <code>False</code>, which means if your logic changes and you end up writing to the variable earlier in the procedure, this check will break. The one liner helps to avoid such inconsistencies.</p>

<hr>

<p>While we're here, I'd also like to make a brief point about comments; comments are there to explain <em>why</em> you have taken certain decisions in your code. Your check for textboxes is, to me at least, non-obvious on first glance - so a comment to explain why would be helpful:</p>

<pre><code>noVal = Len(ObjectToTest.Value &amp; vbNullString) = 0
'Append vbNullString so the function tests for both NULL and an empty string
</code></pre>

<p>In fact for that matter, any time you've explained why your code does something in your question body, you should ideally have a comment instead (or your code should be self documenting with helpful variable names and abstraction, which for the most part it is)</p>

<hr>

<blockquote>
<pre><code>Case Else
    ' Only using native access types, not activex, so there shouldn't be anything here
    ' Should I err.Raise ?
</code></pre>
</blockquote>

<p>Well that depends; as @MathieuGuindon correctly points out, the last thing you want to do is to hide invalid input. The best way to think about this is to imagine what happens if you do supply an <code>ObjectToTest</code> which you think should have a check but doesn't.  Would you want a default return value (or a default check) for unimplemented cases? Maybe - but unlikely. Would you want to be made aware that the check you are trying to make is not implemented? Probably.</p>

<p>So yes, I would recommend some sort of notification here - be it an error or a warning message or <code>Stop</code>. Personally I'd go for the error because it is explicit and logabble and even supressable, something along the lines of </p>

<pre><code>Err.Raise 5, , "No check implemented for objects of type " &amp; Typename(ObjectToTest)
</code></pre>

<p>Where the 5 corresponds to an invalid argument (see <a href="https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/trappable-errors" rel="nofollow noreferrer">trappable errors</a>). Use a named <code>Const</code> if you want, I'm lazy and don't bother if it's just in one place in the procedure.</p>
    </div>