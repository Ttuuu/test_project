<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Review</h2>
<p>You wrap all event signatures into <code>Action&lt;T&gt;</code>. I would instead store all event listeners as their common base type <code>Object</code>. This way you don't need to create wrapper delegates.</p>
<blockquote>
<pre><code>add
    {
        // ..
        Action&lt;T&gt; proxy = (T v) =&gt; value.Invoke(v);
        eventProxies.Add(proxy);
        ChangeValue += proxy;
    }
</code></pre>
</blockquote>
<p>The proxies seem overkill to me. No need for storing listeners in more than 1 backing collection.</p>
<blockquote>
<pre><code>private Dictionary&lt;Action&lt;object&gt;, List&lt;Action&lt;T&gt;&gt;&gt; ObjectEventProxies
    = new Dictionary&lt;Action&lt;object&gt;, List&lt;Action&lt;T&gt;&gt;&gt;();
</code></pre>
</blockquote>
<h2>Proposed Solution</h2>
<p>There is an elegant solution that meets all of your contrived requirements which takes advantage of the runtime for finding method overloads using the <code>dynamic</code> keyword.</p>
<p>Store all listeners in a <code>LinkedList</code> (allow for duplicates).</p>
<pre><code> private LinkedList&lt;object&gt; listeners = new LinkedList&lt;object&gt;();
</code></pre>
<p>Register/Unregister event listeners without using boiler-plate code.</p>
<pre><code>        private void Register(object listener)
        {
            if (listener == null) return;
            listeners.AddFirst(listener);
        }

        private void Unregister(object listener)
        {
            if (listener == null) return;
            listeners.Remove(listener);
        }

        public event Action&lt;T&gt; ChangeValue
        {
            add =&gt; Register(value);
            remove =&gt; Unregister(value);
        }

        public event Action&lt;object&gt; ChangeObject
        {
            add =&gt; Register(value);
            remove =&gt; Unregister(value);
        }

        public event Action ChangeEmpty
        {
            add =&gt; Register(value);
            remove =&gt; Unregister(value);
        }
</code></pre>
<p>Invoke event listeners using the <code>dynamic</code> keyword. The runtime knows which overload of <code>InvokeChange</code> to call. I have added one overload to take any <code>Object</code> as a fallback to avoid runtime exceptions, but this should be unreachable code. The combination of <code>Reverse()</code>, <code>AddFirst()</code> and <code>Remove()</code> ensures correct behavior. Performance is another thing though ..</p>
<pre><code>        public void InvokeChange(T value)
        {
            foreach (var listener in listeners.Reverse())
            {
                Invoke((dynamic)listener, value);
            }
        }

        // these methods require equivalent method signatures -&gt;
        // -&gt; see comments that Action&lt;T&gt; and Action&lt;object&gt; can be combined!

        private void Invoke(Action&lt;T&gt; action, T value)
        {
            action.Invoke(value);
        }

        private void Invoke(Action&lt;object&gt; action, T value)
        {
            action.Invoke(value);
        }

        private void Invoke(Action action, T value)
        {
            action.Invoke();
        }

        private void Invoke(Object unsupportedEventListenerType, T value)
        {
            // ignore or throw exception ..
        }
</code></pre>
    </div>