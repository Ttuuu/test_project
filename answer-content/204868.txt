<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Code formatting</h1>
<p>I recommend you use an "indent" tool to align your code consistently with its brace level.  That makes it much easier to read and to reason about.</p>
<hr>
<h1>Variable declarations</h1>
<p>Back in pre-Standard C (and in the first version of the Standard), it used to be necessary to declare variables at the beginning of their enclosing block like this:</p>
<pre><code>int i, j, k, n;

char line[128]; /* the input line */
</code></pre>
<p>That's not necessary in modern C; it's much better to declare local variables where they are first initialised (this helps avoid the error of omitting the initialisation, for one thing).</p>
<p>Also, some of these can be moved into smaller scopes.  In particular, the loop index variables can be local to the loops themselves, like this:</p>
<pre><code>for (int i = 0;  i &lt; total_shops;  i++) {
</code></pre>
<hr>
<h1>Memory allocation</h1>
<p>If we've correctly included <code>&lt;stdlib.h&gt;</code>, then <code>malloc()</code>, <code>calloc()</code> and <code>realloc()</code> are known as functions returning <code>void*</code>.  Such a pointer can be assigned to <em>any</em> pointer type without needing a cast.</p>
<p>It's probably not a good idea to use <code>calloc()</code> to allocate an array of pointers, or of floating-point numbers.  That's because it initialises the memory to all bytes zero, which is at best implementation-defined when interpreted as a pointer or <code>double</code>.  Instead, use plain <code>malloc()</code> and initialise the contents programmatically.</p>
<p>It's safest to use the pattern <code>p = malloc(sizeof *p)</code> when allocating an object (or <code>count * sizeof *p</code> for an array), so that it's obvious and automatic that the allocated size corresponds to the type as which it will be used.</p>
<p>Then our allocations look more like this:</p>
<pre><code>double **cost_ingredients_ptr = malloc(128 * sizeof *cost_ingredients_ptr);
if (!cost_ingredients_ptr) {
    fprintf(stderr, "Memory allocation failure!\n");
    exit(1);
}
</code></pre>
<p>We <strong>must</strong> check that the allocation function didn't return a null pointer before trying to use the memory - failing to do so is a common mistake that leads to Undefined Behaviour (commonly a program crash, but potentially any action is possible).</p>
<hr>
<h1>Magic numbers</h1>
<p>What's the significance of <code>128</code> in the size of <code>line</code>?  Does it need to be the same as the number of cost ingredients, or is that just coincidence?  If we give names to these quantities, it can help the reader understand the code better, and give a single point of change if the number needs adjusting.</p>
<hr>
<h1>Input validation</h1>
<p>It's good that there's an attempt at input validation:</p>
<pre><code>    int sscanf_result = sscanf(line, "%d", &amp;total_shops);

    if (sscanf_result == 0 | sscanf_result == EOF) {
</code></pre>
<p>However, we've missed one important test - we'll accept a negative number just as happily as a valid, positive number.  We can also make the test of <code>sscanf_result</code> simpler - we don't care whether we got an empty line or an invalid one, so we only require that the result is exactly 1:</p>
<pre><code>    if (sscanf_result != 1 || total_shops &lt;= 0) {
</code></pre>
<p>Notice also that we have a big block of repeated code.  This is a good sign that we'd benefit by creating a function we can call from the two different places:</p>
<pre><code>#include &lt;stdbool.h&gt;

int read_positive_int(const char* prompt)
{
    printf("%s\n\nInput Specifications: Please type a positive integer and press the 'Enter' or the 'return' key when finished.\n",
           prompt);
    int n;
    while (true) {
        char line[128];
        fgets(line, sizeof line , stdin);
        /* no need to trim final newline - sscanf() skips whitespace */
        int sscanf_result = sscanf(line, "%d", &amp;n);
        if (sscanf_result == 1 &amp;&amp; n &gt; 0) {
            return n;
        }
        puts("\nInput Error: Please carefully read the input specifications that are provided after each question prompt and then try again.\n");
    }
}
</code></pre>
<p>Then we get something as simple and expressive as:</p>
<pre><code>int total_shops = read_positive_int("How many shops will be visited?");
</code></pre>
<p>Note that if the user types a line longer than 128 characters, the excess will be considered to be a separate line, and may be treated as valid input if it begins with a number.</p>
<p>We might choose instead to directly <code>scanf()</code> the input, like this:</p>
<pre><code>int read_positive_int(const char* prompt)
{
    printf("%s\n\nInput Specifications: Please type a positive integer and press the 'Enter' or the 'return' key when finished.\n",
           prompt);
    int n;
    while (scanf("%d", &amp;n) != 1 || n &lt;= 0) {
        /* consume input to next newline */
        int c;
        while ((c = getchar()) != EOF &amp;&amp; c != '\n') ;  /* empty loop */
        if (c == EOF) {
            fprintf(stderr, "Input failure!\n");
            exit(1);
        }
        printf ("\nInput Error: Please carefully read the input specifications that are provided after each question prompt and then try again.\n\n");
    }
}
</code></pre>
<p>We can make a similar function for entering the currency amounts.</p>
<hr>
<h1>Don't use floating-point for money</h1>
<p>Binary fractions can't exactly represent 0.01, so we'll get rounding errors when adding.  Instead, we should read the units and hundredths separately, and combine them into integer number of pennies/cents/centimes/etc for arithmetic, and separate them again for display.  We might use a format like <code>"%d.%2d"</code> to help us read the values, and <code>cost / 100</code> and <code>cost % 100</code> for printing.</p>
<hr>
<h1>Unnecessary storage</h1>
<p>We allocate a lot of memory, but don't actually need to store most of it.  All we need is a running total for the current shop, and a record of which shop was the least expensive so far, and how much its total was.  So we can re-think the whole strategy to be much leaner in operation, storing just those values rather than everything that was entered, and never needing to allocate and free any dynamic storage at all.</p>
    </div>