<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>A Code Review</h2>
<p>Your code is a mess,</p>
<ul>
<li>Inconsistent indenting.</li>
<li>Poor use of space between tokens, and operators.</li>
<li>Inappropriate use of variable declaration type <code>let</code>, <code>var</code>, <code>const</code>.</li>
<li>Contains irrelevant / unused code. eg <code>substr</code></li>
</ul>
<h2>Fails to meet requirements.</h2>
<p>You list the requirement</p>
<blockquote>
<p><em>"no trailing spaces in the end."</em></p>
</blockquote>
<p>Yet your code fails to do this in two ways</p>
<p>When string is shorter than required length</p>
<pre><code> crop("trailing spaces     ", 100); // returns "trailing spaces     "
</code></pre>
<p>When string contains 2 or more spaces near required length.</p>
<pre><code> crop("Trailing spaces   strings with extra spaces", 17); // returns "Trailing spaces  "
</code></pre>
<p><strong>Note:</strong> There are various white space characters not just the space. There are also special unicode characters the are visually 1 character (depending on device OS) yet take up 2 or more characters. eg <code>"üë®‚ÄçüöÄ".length === 5</code> is <code>true</code>. All JavaScript strings are Unicode.</p>
<h2>Rewrite</h2>
<p>Using the same logic (build return string from array of split words) the following example attempts to correct the style and adherence to the requirements.</p>
<p>I prefer 4 space indentation (using spaces not tabs as tabs always seem to stuff up when copying between systems) however 2 spaces is acceptable (only by popularity)</p>
<p>I assume that the <code>message</code> was converted from ASCII and spaces are the only white spaces of concern.</p>
<pre><code>function crop(message, maxLength) {       // use meaningful names
    var result = message.trimEnd();       // Use var for function scoped variable
    if (result.length &gt; maxLength) {      // space between if (  &gt; and ) {
        const words = result.split(" ");  // use const for variables that do not change
        do {
            words.pop();
            result = words.join(" ").trimEnd();  // ensure no trailing spaces
            if (result.length &lt;= maxLength) {    // not repeating same join operation
                break;
            }
        } while (words.length);
    }
    return result;
}
</code></pre>
<p><strong>Note:</strong> Check runtime has <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd" rel="nofollow noreferrer"><code>String.trimEnd</code></a> or use a polyfill or transpiler.</p>
<h2>Update <span class="math-container">\$O(1)\$</span> solution</h2>
<p>I forgot to put in a better solution.</p>
<p>Rebuilding the string is slow, or passing the string through a regExp requires iteration over the whole string.</p>
<p>By looking at the character at the desired length you can workout if you need to move down to find the next space and then return the end trimmed sub string result, or just return the end Trimmed sub string.</p>
<p>The result has a complexity of <span class="math-container">\$O(1)\$</span> or in terms of <span class="math-container">\$n = K\$</span> (maxLength) <span class="math-container">\$O(n)\$</span></p>
<pre><code>function crop(message, maxLength) {
    if (maxLength &lt; 1) { return "" }
    if (message.length &lt;= maxLength) { return message.trimEnd() }
    maxLength++;
    while (--maxLength &amp;&amp; message[maxLength] !== " ");
    return message.substring(0, maxLength).trimEnd();
}
</code></pre>
<p>It is significantly faster than any other solutions in this question.</p>
    </div>