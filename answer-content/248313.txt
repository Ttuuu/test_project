<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Answers to your questions</h1>
<blockquote>
<ol>
<li>Am I using <code>std::unique_ptr</code> correctly here? Using std::move and get?</li>
</ol>
</blockquote>
<p>Yes, you are using those correctly.</p>
<blockquote>
<ol start="2">
<li>Is there any way for me to make my <code>_insert</code> and <code>_delete</code> functions iterative? I'd like for it to be something similar to my search function.</li>
</ol>
</blockquote>
<p>Sure. An iterative solution would indeed look like your search function. However, the trick is that instead of having <code>curr</code> be a pointer to a <code>Node&lt;T&gt;</code>, you want <code>curr</code> to be a pointer to a <code>std::unique_ptr&lt;Node&lt;T&gt;&gt;</code>. So change <code>curr</code> from being a reference to being a pointer, and then you can write something like:</p>
<pre><code>void _insert(std::unique_ptr&lt;Node&lt;T&gt;&gt; *curr, int searchVal){
    while (*curr) {
        if (searchVal &lt;= (*curr)-&gt;value)
            curr = &amp;(*curr)-&gt;left;
        else
            curr = &amp;(*curr)-&gt;right;
    }

    *curr = std::make_unique&lt;Node&lt;T&gt;&gt;(searchVal);
}
</code></pre>
<blockquote>
<p>Do I need a destructor? Or since I am using automatic memory management, will all my pointers be freed when the BinarySearchTree object goes out of scope?</p>
</blockquote>
<p>Memory will automatically be freed correctly if you don't write your own destructor. However, you have to be aware that when a node is destructed, it first needs to destruct its two children, and this goes on recursively until a node doesn't have any more children. If your tree is perfectly balanced, that means O(log N) stack space is used, where N is the number of elements in the tree. But if your tree is maximally unbalanced, it will take O(N) stack space.
You can avoid this by destructing one node at a time in a loop, until all the nodes are destroyed:</p>
<pre><code>~BinarySearchTree() {
    while (root) {
        deleteOneNode(&amp;root);
    }
};
</code></pre>
<p>However now the problem is how to delete a single node without using recursion. You can cannot delete a node with two children, since this will cause recursion. So a possible implementation is:</p>
<pre><code>void deleteOneNode(std::unique_ptr&lt;Node&gt; *root) {
    // iterate down until we find a node with less than two children
    while ((*root)-&gt;left &amp;&amp; (*root)-&gt;right) {
        root = root-&gt;left; // arbitrary choice
    }
    
    if ((*root)-&gt;left)
        (*root) = std::move((*root)-&gt;left);
    else if ((*root)-&gt;right)
        (*root) = std::move((*root)-&gt;right);
    else
        (*root)-&gt;reset(nullptr);
}
</code></pre>
<p>The drawback is that this might take O(NÂ²) time for some trees (for the above example, one where ever left child has two children of its own, but every right child is a leaf node).</p>
<h1>Move <code>struct Node</code> inside <code>class BinarySearchTree</code></h1>
<p>A <code>Node</code> is just an implementation detail of your <code>BinarySearchTree</code>, so declare the former inside the latter, like so:</p>
<pre><code>template &lt;typename T&gt; class BinarySearchTree {
    struct Node {
        T value;
        ...;
    };

public:
    ...
};
</code></pre>
<p>A nice advantage is that you no longer have to write <code>Node&lt;T&gt;</code>, but can just write <code>Node</code>. It also no longer pollutes the global namespace with a <code>Node</code>, which is important if you want to use other classes that have their own <code>Node</code> types.</p>
<h1>There's no need to initialize a <code>std::unique_ptr</code></h1>
<p>The default constructor of <code>std::unique_ptr</code> will already set the pointer to <code>nulltpr</code>, you don't have to do this yourself.</p>
<h1>Prefer using member initialization lists</h1>
<p>When initializing a member value in the constructor, use <a href="https://en.cppreference.com/w/cpp/language/constructor" rel="nofollow noreferrer">member initialization lists</a> if possible. For example:</p>
<pre><code>class Node {
    T value;
    ...
    explicit Node(const T &amp;val): value(val) {}
};
</code></pre>
<h1>Add a constructor that takes a pair of iterators</h1>
<p>You have a constructor that takes a <code>std::vector&lt;T&gt;</code>, but what if I want to initialize the binary tree using data from a <code>std::list</code> or another STL container? You can easily make this possible by doing the same thing many STL containers do: have a constructor that takes a pair of iterators, like so:</p>
<pre><code>template &lt;class InputIt&gt;
BinarySearchTree(InputIt first, InputIt last) {
    while (first != last) {
        insert(*first++);
    }
}
</code></pre>
<h1>Consider adding iterators to your binary tree</h1>
<p>It's quite common to want to iterate over all the elements of a container. If you add an iterator type, and provide <code>begin()</code> and <code>end()</code> member functions that return iterators, you can iterate over your <code>BinarySearchTree</code> just like other STL containers. To do it properly, you want to add other functions such as <code>empty()</code>, <code>size()</code>, <code>cbegin()/cend()</code>, <code>rbegin()/rend()</code> and so on. If you can make it work like any other STL container, that would be very nice.</p>
<h1>Avoid starting names with underscores</h1>
<p>There are rules governing the <a href="https://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier">allowed use of underscores in C++ identifiers</a>. Unless you want to learn all the rules by head, I would advise you to just follow these two rules:</p>
<ol>
<li>Never start a name with an underscore.</li>
<li>Never use two consecutive underscores in a name.</li>
</ol>
<p>In your code, there is no need to have separate names for the public and private functions that peform insertion and deletion. They can be distinguished by the number of arguments. So:</p>
<pre><code>public:
    void delete(const T&amp; value) {
        delete(&amp;root, value);
    }

private:
    void delete(std::unique_ptr&lt;Node&gt; *curr, const T&amp; value) {
        ...
    }
</code></pre>
<h1>Don't cast values to <code>int</code></h1>
<p>Your public functions correctly use <code>T</code> for the type of values, but your private functions cast the values to <code>int</code>. That is quite bad! What if I want to store floating point values in your tree? If I insert <code>{1.1, 1.2, 1.3}</code> then internally it is converted to <code>{1, 1, 1}</code>. That doesn't sound very useful! Use <code>T</code> everywhere you handle a value.</p>
<p>But that also brings me to:</p>
<h1>Allow a custom comparison function to be used</h1>
<p>It is quite possible to have value types that themselves don't allow comparison using <code>==</code> and <code>&lt;</code>, or that just don't provide the order in which you want them sorted in the search tree. You will notice that ordered containers like <a href="https://en.cppreference.com/w/cpp/container/map" rel="nofollow noreferrer"><code>std::map</code></a> allow you to specify a custom comparison function. You can easily add that to your class as well:</p>
<pre><code>template &lt;typename T, class Compare = std::less&lt;T&gt;&gt;
class BinarySearchTree {
    Compare comp;
    ...
public:
    BinarySearchTree(const Compare &amp;comp = Compare()): comp(comp), ...;
    ...
    bool search(const T&amp; value) {
        ...
        while (...) {
           if (comp(value, curr-&gt;value)
               curr = curr-&gt;left.get();
           else if (comp(curr-&gt;value, value))
               curr = curr-&gt;right.get();
           else
               return true;
        }
    }
};
</code></pre>
    </div>