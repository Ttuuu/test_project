<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Along with @jathanism's comments, I would add the following:</p>

<p>I would move the definition of the list of options into a class variable, e.g.: </p>

<pre><code>class RockPaperScissors(object):
    OPTIONS=['rock','paper','scissors']
    ...
</code></pre>

<p>that way, when you want to extend the game to RockPaperScissorsLizardSpock, you can do so with a simple inheiritance:</p>

<pre><code>class RockPaperScissorsLizardSpock(RockPaperScissors):
    OPTIONS=['rock','paper','scissors','lizard','spock']
    ...
</code></pre>

<p>The obvious extension/continuation to this comment is that <code>__getResult</code> would then need to be updated to be more generic in a base class.</p>

<p>Also, the logic for printing/making a selection could then be based on the "OPTIONS" constant. (e.g.: <code>print ', '.join( '%s. %s' % (i,v) for i in enumerate(RockPaperScissors.OPTIONS) )</code>). Even better, put the selection logic into a method on the class.</p>

<p>I try to apply these kinds of concepts to most classes, as 1) it isn't really any more work to implement, and 2) it allows for subclasses to easily override the behavior of a base class, even when you don't expect inheritance to be used.</p>
    </div>