<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code looks well-formatted, it's easy to read and to follow, and the explanation you gave matches the code exactly. Well done. :)</p>

<pre><code>for item in my_list:
</code></pre>

<p>This statement looks strange since in the body of this <code>for</code> loop, you neither use <code>item</code> nor <code>my_list</code>. You can express the idea of that code more directly:</p>

<pre class="lang-py prettyprint-override"><code>for _ in range(len(my_list)):
</code></pre>

<p>The variable <code>_</code> is just a normal variable, and you could even access its value. By convention though, the variable <code>_</code> means an unused variable.</p>

<p>Or, alternatively, you could express it even shorter:</p>

<pre class="lang-py prettyprint-override"><code>while len(unsorted_list) &gt; 0:
</code></pre>

<p>This wording matches the body of the loop, where you remove an element from <code>unsorted_list</code> in each iteration. This is good. It's still quite long though, therefore the idiomatic way to test whether a list is empty is:</p>

<pre class="lang-py prettyprint-override"><code>while unsorted_list:
</code></pre>

<p>This makes your code:</p>

<pre class="lang-py prettyprint-override"><code>def my_sort(my_list):
    unsorted_list = [*my_list]
    sorted_list = []
    while unsorted_list:
        shortest_num = inf
        for num in unsorted_list:
            if num &lt; shortest_num:
                shortest_num = num
        unsorted_list.remove(shortest_num)
        sorted_list.append(shortest_num)
    return sorted_list
</code></pre>

<p>This code can be made much shorter since Python has a <a href="https://docs.python.org/3/library/functions.html#min" rel="noreferrer">built-in function called min</a>. By using it you can transform your code to:</p>

<pre class="lang-py prettyprint-override"><code>def my_sort(my_list):
    unsorted_list = [*my_list]
    sorted_list = []
    while unsorted_list:
        shortest_num = min(unsorted_list)
        unsorted_list.remove(shortest_num)
        sorted_list.append(shortest_num)
    return sorted_list
</code></pre>

<p>This is already much shorter than before, and you don't need to import <code>math.inf</code> anymore, which is good, since it was a placeholder anyway that was not really necessary from a high-level point of view.</p>

<p>This is about as elegant as it gets. You should not use this sorting algorithm for sorting large data since for a list of <span class="math-container">\$n\$</span> elements it requires <span class="math-container">\$ n + n \cdot (\frac n2 + \frac n2 + 1) \$</span> steps, or a bit more compressed, it has the time complexity <span class="math-container">\$\mathcal O(n^2)\$</span>. There are faster sorting algorithms out there. These are more complicated to implement, but once they are implemented and tested, they are as easy to use as your algorithm.</p>

<p>Regarding the variable names: <code>shortest_num</code> should better be <code>smallest_num</code>, since <code>0</code> is shorter than <code>-12345</code>, and you probably didn't mean that. Your documentation comment should be more like:</p>

<pre class="lang-py prettyprint-override"><code>"""
Return a sorted copy of the given list, from smallest to largest.
"""

# Sorting is done by repeatedly removing the smallest
# number from the list and adding it to the sorted list.
</code></pre>

<p>Note how I split the comment into two separate parts.
The upper half in the <code>""" triple quotes """</code> is meant to document the behavior of the code, while the lower half explains the implementation. For the code that uses this sorting function, it doesn't matter how the list is sorted, it just matters <em>that</em> it is sorted.</p>
    </div>