<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your <code>answer</code> should also be a template struct. It contains first and last element of type <code>big_int</code> but in the <code>bubble _sort</code> function it is constructed with template argument type <code>T</code>.</p>

<pre><code>template&lt;class T&gt;
struct answer {
    std::size_t count;
    T first_element;
    T last_element;
};
</code></pre>

<p>But actually maybe the structure Is redundant because first And last element can Always easily be accessed inside the sorted container. Or it could at least contain just references to those elements instead of their copies in case the template argument <code>T</code> is something more complex then <code>long long</code>.</p>

<pre><code>auto count = bubble_sort(v);
auto &amp; first = v[0];
auto &amp; last = v[v.size - 1];
</code></pre>

<p>Further instead of accepting <code>vector&lt;T&gt;</code>, you could accept two iterators of template argument type as Is common with many standard functions and allows to work not only for any type of container but also for just a range within a container.</p>

<pre><code>template&lt;class Iterator&gt;
std::size_t bubble_sort(Iterator from, Iterator to);

// ...

auto count = bubble_sort(v.begin(), v.end());
</code></pre>
    </div>