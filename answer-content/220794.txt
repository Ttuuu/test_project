<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It would save a lot of time to start from the other end, by making the sums first. Notice that a digit combination like (1, 2, 3) is shared by six numbers: 123, 132, 213, 231, 312, 321. They all have the same digit cube sum 1^3 + 2^3 + 3^3 = 36. Your code will iterate over those numbers and recalculate the same sum 6 times.</p>

<p>Instead, you could use the digit combination (1, 2, 3) and calculate the digit cube sum 36 once. Then check if the digits in that sum is a permutation of those in the digit combination - if so, it's an Armstrong number. Then move to the next digit combination (1, 2, 4) to check another six numbers in one fell swoop.</p>

<p>The digit combinations can be iterated over using <a href="https://docs.python.org/3.7/library/itertools.html#itertools.combinations_with_replacement" rel="noreferrer">itertools.combinations_with_replacement</a>. Here's an example that generates all Armstrong numbers of length 1 to 10 (so under 10 billion), running in under 3 seconds on my machine:</p>

<pre><code>from itertools import combinations_with_replacement

armstrongs = []
for length in range(1, 11):
found = []
for digits in combinations_with_replacement(range(10), length):

    # make the digit power sum
    s = sum(pow(d, length) for d in digits)

    # collect the digits of the sum
    temp = s
    sumdigits = []
    while temp:
        temp, d = divmod(temp, 10)
        sumdigits.append(d)

    # compare the two digit groups. Notice that "digits" is already sorted
    if list(digits) == sorted(sumdigits):
        found.append(s)

# the sum-first-method doesn't find Armstrong numbers in order, so
# an additional sorting is thrown in here.
armstrongs.extend(sorted(found))

print(armstrongs)
</code></pre>

<p>This could be optimized further, by for example checking if <code>sumdigits</code> has the right length before sorting. You could also check the digit <code>d</code> as it's chopped off from the sum and make sure it exists at all within <code>digits</code>. If not, the two digit groups are clearly different and you can move to the next iteration.</p>

<hr>

<p>Now, this example doesn't limit the results to a range. But it can quite easily be modified to do so: Check the lengths of the boundary numbers, then use those in the <code>for length in range(1, 11):</code> line to only generate Armstrong numbers of relevant length. So modify the top to:</p>

<pre><code>lower = 400
upper = 15000

lowerlength = len(str(lower))
upperlength = len(str(upper))
armstrongs = []
for length in range(lowerlength, upperlength + 1):
</code></pre>

<p>Then generate the numbers as before, and once you have them, filter down:</p>

<pre><code>armstrongs = [n for n in armstrongs if lower &lt;= n &lt;= upper]
</code></pre>
    </div>