<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>all_products</h1>

<p>At the top, you initialize <code>all_products = []</code>.  Then you call <code>get_horizontal()</code>, which appends products of <code>four_elements</code> to <code>all_products</code>.  Then you get and return the maximum.  </p>

<p>Then you call <code>get_left()</code> which does the same thing ... but continues appending to the <code>all_products</code> list.  When the maximum is computed, it is the maximum of both the horizontal and the left diagonals!</p>

<p>In other words, you don't need to find the maximum of the horizontal, left, right and vertical results.  That is already being accidentally done.</p>

<pre><code>get_horizontal()
get_left()
get_right()
print(get_vertical())    # Still returns the maximum over all 4 directions!
</code></pre>

<p>You should initialize <code>all_products = []</code> inside the <code>get_left</code>, <code>get_right</code>, <code>get_horizontal</code> and <code>get_vertical</code> functions, and remove it from global scope.</p>

<h1>Float or integer?</h1>

<p>Your results ends in <code>.0</code>.  All the numbers are integer numbers.  You could load the grid as an integer matrix:</p>

<pre><code>grid = np.loadtxt("grid.txt", dtype='i')
</code></pre>

<p>And now the answer is generated without a decimal point.</p>

<h1>Looping</h1>

<p>You've written code like this 4 times:</p>

<pre><code>    start, finish = 0, 4
    while finish &lt;= 20:
        four_elements = ... start:finish ...
        ...
        start += 1
        finish += 1
</code></pre>

<p>This is a simple loop from <code>finish=4</code> to <code>finish=20</code> (or <code>finish=len(dgnl)</code>).  Start and end always differ by 4, so you could use <code>finish - 4</code> instead of <code>start</code>.  Or loop over <code>start</code> and use <code>start + 4</code> for <code>finish</code>.</p>

<p>Eg)</p>

<pre><code>    for start in range(16 + 1):
        four_elements = ... start : start+4 ...
        ...
</code></pre>

<p>With 4 copies of the that code, 3 less lines per copy, you've saved 12 lines.</p>

<h1>Flip, and flip, and flip</h1>

<pre><code>def get_left():
    for i in range(-16, 16):
        dgnl = np.diagonal(np.flipud(grid), i)
</code></pre>

<p>Each time though this loop, you <code>flipud(grid)</code>.  That's 32 identical flips.  Maybe you'd want to save this as a temporary result:</p>

<pre><code>def get_left():
    flipped_grid = np.flipud(grid)
    for i in range(-16, 16):
        dgnl = np.diagonal(flipped_grid, i)
</code></pre>

<p><strong>Question</strong>: Why 32?  Perhaps you meant <code>for i in range(-16, 16 + 1):</code>?  <em>You were missing a diagonal!!!   Twice!!!</em></p>

<h1>Call functions more than once</h1>

<p>Now, <code>get_left()</code> and <code>get_right()</code> are identical, save for that initial flip.  You could pass the grid into <code>get_right()</code>, and <code>get_left()</code> could pass a flipped copy to <code>get_right()</code>:</p>

<pre><code>def get_right(grid):
    for i in range(-16, 16):
        dgnl = np.diagonal(grid, i)
        for start in range(len(dgnl) - 3):
            four_elements = dgnl[start:start + 4]
            all_products.append(np.prod(four_elements))
    max_right = max(all_products)
    return max_right

def get_left(grid):
    return get_right(np.flipud(grid))
</code></pre>

<h1>Call functions more than once (reprise)</h1>

<p><code>get_horizontal()</code> and <code>get_vertical()</code> are duplicates also ... save for grabbing either the ith row or column.  If you transposed the matrix, columns would become rows, and you could again use the same function.</p>

<h1>Flip, Transpose ... Rotate!</h1>

<p>If you flip the matrix, one left-up diagonals become left-down ones, but rows and columns are still rows and columns.  If you transpose the matrix, rows become columns, columns become rows, but the left-up diagonals are still left-up diagonals.</p>

<p>If you rotate the matrix 90 degrees, rows become columns and left-up diagonals become left-down diagonals.</p>

<pre><code>rotated = np.rot90(grid)
print(max(get_horizontal(grid), get_horizontal(rotated), get_right(grid), get_right(rotated)))
</code></pre>

<h1>Using NumPy</h1>

<p>All you've really used NumPy for is loading the grid from a file, flipping it, and extracting diagonals.  It is much more powerful than that.</p>

<pre><code>import numpy as np

grid = np.loadtxt("grid.txt", dtype='i')

print(max(np.max(grid[ :  , :-3] * grid[ :  , 1:-2] * grid[ :  , 2:-1] * grid[ :  , 3:]),
          np.max(grid[ :-3, :  ] * grid[1:-2,  :  ] * grid[2:-1,  :  ] * grid[3:  ,  :]),
          np.max(grid[ :-3, :-3] * grid[1:-2, 1:-2] * grid[2:-1, 2:-1] * grid[3:  , 3:]),
          np.max(grid[3:  , :-3] * grid[2:-1, 1:-2] * grid[1:-2, 2:-1] * grid[ :-3, 3:])))
</code></pre>

<p>Note: this works for 20 x 20 matrices, and 200 x 200 matrices equally well.</p>

<p>Okay, perhaps we should explain exactly what is going on there.  Let's start with a 7x7 matrix, with random single-digit values:</p>

<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; grid = np.random.randint(0, 10, (7, 7))
&gt;&gt;&gt; grid
array([[8, 2, 3, 9, 9, 9, 3],
       [6, 2, 8, 0, 9, 4, 3],
       [0, 6, 9, 5, 6, 8, 8],
       [8, 5, 2, 6, 3, 0, 8],
       [5, 8, 0, 6, 7, 0, 3],
       [4, 3, 1, 0, 2, 5, 5],
       [4, 9, 5, 7, 2, 6, 0]])
</code></pre>

<p><code>grid[3:, :-3]</code> will extract all the values starting at the 3rd row, and all the columns except the last 3 columns.</p>

<pre><code>&gt;&gt;&gt; grid[3:, :-3]
array([[8, 5, 2, 6],
       [5, 8, 0, 6],
       [4, 3, 1, 0],
       [4, 9, 5, 7]])
</code></pre>

<p>The <code>grid[1:-2, 2:-1]</code> extracts the 4x4 matrix one row up and one column to the right of the first:</p>

<pre><code>&gt;&gt;&gt; grid[2:-1, 1:-2]
array([[6, 9, 5, 6],
       [5, 2, 6, 3],
       [8, 0, 6, 7],
       [3, 1, 0, 2]])
</code></pre>

<p>And two rows up, two columns to the right:</p>

<pre><code>&gt;&gt;&gt; grid[1:-2, 2:-1]
array([[8, 0, 9, 4],
       [9, 5, 6, 8],
       [2, 6, 3, 0],
       [0, 6, 7, 0]])
</code></pre>

<p>And finally three rows up, three columns to the right ... in other words the top 4 rows, and the rightmost four columns:</p>

<pre><code>&gt;&gt;&gt; grid[:-3, 3:]
array([[9, 9, 9, 3],
       [0, 9, 4, 3],
       [5, 6, 8, 8],
       [6, 3, 0, 8]])
</code></pre>

<p><a href="https://i.stack.imgur.com/0YGPL.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/0YGPL.png" alt="4 different 4x4 regions"></a></p>

<p>We can take these matrices, and multiply respective elements together:</p>

<pre><code>&gt;&gt; grid[3:, :-3] * grid[2:-1, 1:-2] * grid[1:-2, 2:-1] * grid[:-3, 3:]
array([[3456,    0,  810,  432],
       [   0,  720,    0,  432],
       [ 320,    0,  144,    0],
       [   0,  162,    0,    0]])
</code></pre>

<p>For instance, the top-left corners contain <code>8</code>, <code>6</code>, <code>8</code> and <code>9</code>, and the product of those is <code>8*6*8*9 = 3456</code>.  Looking at the original matrix, we can see these values in a diagonal starting at row 3, column 0 and going up to row 0, column 3.</p>

<p>The next diagonal contains <code>5</code>, <code>5</code>, <code>9</code>, <code>0</code>, <code>9</code>.  <code>5*5*9*0 = 0</code> and <code>5*9*0*9 = 0</code>, which is the next diagonal of our product matrix.</p>

<p>The largest product in that matrix?</p>

<pre><code>&gt;&gt;&gt; np.max(grid[3:, :-3] * grid[2:-1, 1:-2] * grid[1:-2, 2:-1] * grid[:-3, 3:])
3456
</code></pre>

<p>The other 3 expressions take different adjacent rectangular regions, multiply them together, and find the maximums for the other diagonal and the rows and columns.</p>
    </div>