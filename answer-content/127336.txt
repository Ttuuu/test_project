<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is what I would think, being the interviewer. Don’t take these remarks personally, they are just meant to give you the view from the other side of the job application table.</p>

<pre><code>public class Test1 {
</code></pre>

<p>That’s a bad name for a class. I had expected something like <code>IntArrayAnalyzer</code> or <code>IntArrayUtils</code>.</p>

<pre><code>public static void main(String args[]){
</code></pre>

<p>Oh, a C programmer. Java programmers would have written <code>String[] args</code>.</p>

<p>There is a space missing between the <code>)</code> and the <code>{</code>.</p>

<pre><code>                           //  0     1     2      3     4    5    6     7    8   9   10   11     12   13   14      15
         int numberArray[] = {-2,   -3,   -5,    -6,   -7,  -7,  -8,    9,   0,  -6,  3,  -1,    -2,   0,   -9,    -12};

        /* TEST DATA
         * int numberArray[] = {-2,   -3,   -5,   -6,  -7};                     //DATA WITH ALL NEGATIVE NUMBERS.  EXPECTED OUTPUT is SIZE : 0
         * int numberArray[] = {};                                              //DATA WITH ALL NO VALUES.         EXPECTED OUTPUT is SIZE : 0
         * int numberArray[] = {-2,   -3,    7,   -6,  -7};                     //DATA WITH ONE POSITIVE DATA.     EXPECTED OUTPUT is SIZE : 1
         * int numberArray[] = {-2,    3,   5,     6,  -7,   23,   4,   4,  1}; //DATA WITH VALID VALUES.          EXPECTED OUTPUT is SIZE : 4
         */
</code></pre>

<p>Why is this test data in the main code? Maybe the applicant never heard of JUnit? That would be a bad sign. My production code should not look like this. The numbers are almost aligned in columns, but only almost. Doesn’t he have an eye for that?</p>

<p>AND WHY IS HE SCREAMING SO LOUD? Maybe a COBOL background?</p>

<pre><code>        //Initializing all values. At Start, Start And End Index Points to First Location i.e., Index=0;
</code></pre>

<p>Oh, not a native English speaker. The capitalization of the words looks completely random.</p>

<p>Why does the comment repeat what the code is saying (<code>Index=0</code>)?</p>

<pre><code>        int startIndex=0;
        int endIndex=0;
</code></pre>

<p>This seems to be the implementation of the required functionality. Why is it implemented directly in <code>main</code>? If he programs like this, the whole program will probably fit into a single method with 100 local variables, which is completely unmaintainable. I don’t want to have such a programmer in my team.</p>

<pre><code>        // Stores the Length of Sequence and Its Start Index
        int validSequenceSize=0;
        int validSequenceStartIndex=0;
</code></pre>

<p>If the variable were named <code>validSequenceLength</code>, the above comment would be completely redundant. Like this, it only wastes screen space.</p>

<pre><code>        for(int index=0; index&lt;numberArray.length; index++){
</code></pre>

<p>For simple loops, the variable is usually called <code>i</code>. Deriving from this convention probably means that in this case, the loop variable is more important than usual. It’s ok in this case though, since this variable will influence the result.</p>

<pre><code>                // If series started with Positive Number and StartIndex is '0', Move EndIndex to Next Location.
                // This make sure the StartIndex and End Index are always different.

                if(numberArray[index]&gt;0 &amp;&amp; startIndex==0){
                    endIndex=endIndex+1;
</code></pre>

<p>A Java programmer who doesn’t know the <code>++</code> operator?</p>

<pre><code>                }

                //Setting the Value of End Index. if value is Negative or reached the end of Series, Set the end Index
                if(numberArray[index]&lt;0 || numberArray.length-1==index ){
</code></pre>

<p>The above comment is redundant.</p>

<pre><code>                        if(startIndex!=endIndex){
</code></pre>

<p>One of the above comments says that <code>startIndex and endIndex are always different</code>, which should mean that this <code>if</code> clause is redundant.</p>

<pre><code>                                    endIndex=index;
                                    int difference=endIndex-startIndex;

                                    // Check the difference between Start and End Index of Valid Positive Number Sequence
                                    if(difference&gt;=validSequenceSize &amp;&amp; difference!=0){
                                            validSequenceSize=difference;

                                            // if the Last Digit is Positive Number, Increase the  valid Sequence size by 1
</code></pre>

<p>Another redundant comment.</p>

<pre><code>                                            if(numberArray[numberArray.length-1]&gt;0 &amp;&amp; numberArray.length-1==index){
</code></pre>

<p>In the second condition, <code>numberArray.length-1==index</code> looks unusual, since normally the variable that is <em>currently more interesting or changes more often</em> is written on the left-hand side. So it would be <code>index==numberArray.length-1</code>.</p>

<pre><code>                                               validSequenceSize=validSequenceSize+1;
                                            }
                                            validSequenceStartIndex=startIndex;

                                    }
                        }


                //Setting value of Start Index after One Set of Calculation is Completed.
                if(endIndex!=numberArray.length-1 &amp;&amp; numberArray[index]&lt;0 ){
                    startIndex=endIndex+1;
                }

                }
</code></pre>

<p>Two closing braces in the same column? He must have forgotten to let his IDE format the code automatically. Just good that we use automatic formatting. Otherwise, the code of the whole team would be a real mess.</p>

<pre><code>        }

        //RESULT
        System.out.println("Size of Sequence : "+validSequenceSize);

        if(validSequenceSize&gt;0){
                System.out.println("Valid Sequence Starts at Index[" +validSequenceStartIndex +"]");
</code></pre>

<p>The formatting looks weird. Why should there be brackets around the number? To a programmer reading this, this would look like an array access, which it clearly isn’t. So he is probably not too concerned about readability of the program’s output.</p>

<pre><code>                for (int index=validSequenceStartIndex; index&lt;validSequenceStartIndex+validSequenceSize;index++){
                        System.out.println("Values of Biggest Positive Sequence in Index["+index+"] -- "+numberArray[index]);
                }
        }
</code></pre>

<p>So many unneeded empty lines.</p>

<pre><code>}
}
</code></pre>

<p>So that’s all the code. Fine. He seems to be a very beginner, otherwise there would be fewer comments, especially the redundant ones. There is no unit test, which also speaks for a beginner. He doesn’t know the <code>++</code> operator and doesn’t structure his code. This will mean a long period of training, which will cost me another colleague’s time. I will probably not hire him, since I prefer programmers who are ready for productive work.</p>
    </div>