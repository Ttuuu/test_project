<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Your Concerns</h2>

<blockquote>
  <p><em>I was just wondering if you could help me write this code neater or more efficiently?</em></p>
</blockquote>

<h2>Efficiency</h2>

<p>You are looping through the data twice. Once to calculate <code>adjustedsum</code> from <code>column["PrevFY"]</code> and once for <code>column["BudgetAmt"]</code>. In both cases, <code>actualsum</code> gets calculated exactly the same way. It seems you so badly wanted to reuse variables that you forgot you could have just looped through the rows and store data in multiple variables.</p>

<pre><code>decimal actualsum = 0m;
decimal adjustedTotal = 0m;
decimal originalTotal = 0m;

for (int i = 0; i &lt; 2; i++)
{
    var row = dgvBudget.Rows[i];
    actualsum += Convert.ToDecimal(row.Cells["Actual_c"].Value);
}

for (int i = 3; i &lt; 12; i++)
{
    var row = dgvBudget.Rows[i];
    adjustedTotal += Convert.ToDecimal(row.Cells["PrevFY"].Value);
    originalTotal += Convert.ToDecimal(row.Cells["BudgetAmt"].Value);
}

nbrAdjustedTotal.Value = adjustedTotal + actualsum;
nbrOriginalTotal.Value = originalTotal + actualsum;
</code></pre>

<hr>

<h2>Compactness (neatness)</h2>

<p>You have recurring decimal parsing from data cells:</p>

<blockquote>
<pre><code>Convert.ToDecimal(row.Cells["Actual_c"].Value)
</code></pre>
</blockquote>

<p>You could make a utility method for this. I'm assuming the class for the data row is called <code>Row</code>.</p>

<pre><code>private static decimal ParseDecimal(Row row, string columnName)
{
    return Convert.ToDecimal(row.Cells[columnName].Value);
}
</code></pre>

<p>Further refactored:</p>

<pre><code>decimal actualsum = 0m;
decimal adjustedTotal = 0m;
decimal originalTotal = 0m;

for (int i = 0; i &lt; 2; i++)
{
    var row = dgvBudget.Rows[i];
    actualsum += ParseDecimal(row, "Actual_c");
}

for (int i = 3; i &lt; 12; i++)
{
    var row = dgvBudget.Rows[i];
    adjustedTotal += ParseDecimal(row, "PrevFY");
    originalTotal += ParseDecimal(row, "BudgetAmt");
}

nbrAdjustedTotal.Value = adjustedTotal + actualsum;
nbrOriginalTotal.Value = originalTotal + actualsum;
</code></pre>

<h1>Proposed Result</h1>

<p>We could make the code even more compact by using LINQ's <code>Skip</code>, <code>Take</code> and <code>Sum</code> extension methods. I don't have access to the code, but I'm sure you could do something like:</p>

<pre><code>var rows = dgvBudget.Rows.Take(3);
var actualsum = rows.Select(row =&gt; ParseDecimal(row, "Actual_c")).Sum();
var rows = dgvBudget.Rows.Skip(3).Take(9);
var adjustedTotal = rows.Select(row =&gt; ParseDecimal(row, "PrevFY")).Sum();
var originalTotal = rows.Select(row =&gt; ParseDecimal(row, "BudgetAmt")).Sum();

nbrAdjustedTotal.Value = adjustedTotal + actualsum;
nbrOriginalTotal.Value = originalTotal + actualsum;
</code></pre>

<p>This does come with a slight performance penalty, since you loop the first 3 items twice (once to skip). But it comes at a good increase in readability and compactness.</p>
    </div>