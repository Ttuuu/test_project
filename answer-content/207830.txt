<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The way you explain it in plain english is similar to a simple, cleaner way to do it in the code :</p>

<blockquote>
  <p>I want to develop a list of all the possible action spaces</p>
</blockquote>

<p>With some conditional restriction. This is a complete rewrite.
Enumeration can be done through recursive algorithm :</p>

<pre><code>def enumerate_action_space(actions, available_workers):
    accumulator = [[]] # It is always possible to do nothing
    actions_copy = actions.copy()
    for a in actions.keys():
        # Conditionals go here. The more you restrict your space, the faster the enumeration
        if not set(actions[a].required_workers).issubset(set(available_workers)):
            continue
        # Select the action, then enumerate all possible following actions for that one
        current_action = actions_copy.pop(a)
        workers = set(available_workers) - set(current_action.required_workers)
        l = enumerate_action_space(actions_copy, workers)
        # Collect results
        l2 = [action + [a] for action in l] 
        accumulator.extend(l2)
    return accumulator


actions = {
        'key1': ActionSpace('A',['a']), # First is name, second the worker requirements
        'key2': ActionSpace('B', ['b']),
        'key3': ActionSpace('C', ['a', 'b'])
        }

print (enumerate_action_space(actions, ['a', 'b'])) # Two workers available
# -&gt; [[], [ActionSpace('A')], [ActionSpace('B'), ActionSpace('A')], [ActionSpace('C')], [ActionSpace('B')]] #
</code></pre>

<p>You can add more conditions to restrict more the action space, based on arbitrary parameters.</p>

<p>Note that I don't push back elements as I remove them. This is to avoid enumerating both <code>['A', 'B']</code> and <code>['B', 'A']</code>.</p>
    </div>