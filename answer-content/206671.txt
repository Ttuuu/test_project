<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>IMHO you can't really compare in-place quicksort to not-in-place quicksort. While the basic algorithm is the same, the implementation is vastly different, one being in-place (d'uh) and the other being much, much simpler.</p>

<p>Having said that, you could make your code a bit faster and (IMHO) cleaner by a) using wildcard-unpacking to separate the pivot from the rest (no need to slice the list twice), and b) return the list itself if it contains zero <em>or one</em> elements (no need to partition a one-elemented list).</p>

<pre><code>def quicksort(lst):
    if len(lst) &lt;= 1:
        return lst
    else:
        p, *rest = lst
        low  = [x for x in rest if x &lt;= p]
        high = [x for x in rest if x &gt;  p]
        return quicksort(low) + [p] + quicksort(high)
</code></pre>

<p>The <code>else</code> is kind of redundant here, but IMHO it's cleaner that way.</p>

<p>However, using the first element of the list as pivot can be problematic if the list is already (partially) sorted, which is not uncommon. In this case, the performance will be much better/more predictable using a randomly chosen pivot (or <a href="https://en.wikipedia.org/wiki/Quicksort#Choice_of_pivot" rel="nofollow noreferrer">any other method</a>). This means that we have to partition the list into three parts, though, <code>low</code>, <code>med</code>, and <code>high</code>, otherwise we risk getting infinite recursion in case the list contains two or more copies of the pivot.</p>

<pre><code>def quicksort(lst):
    if len(lst) &lt;= 1:
        return lst
    else:
        p = random.choice(lst)
        low  = [x for x in lst if x &lt;  p]
        med  = [x for x in lst if x == p]
        high = [x for x in lst if x &gt;  p]
        return quicksort(low) + med + quicksort(high)
</code></pre>
    </div>