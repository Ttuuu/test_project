<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Most times you have <code>Range.Select</code> followed by <code>Selection.Something</code> you can remove the <code>Select</code> and <code>Selection</code> to leave it <code>Range.Something</code>. This helps clarify what the code is doing. The same may be true of <code>Worksheet.Select</code> (or <code>Activate</code>). But doing this with a worksheet will alter any unqualified <code>Range</code> variables in your code that follows.</p>

<p><code>Range</code> without <code>VariableName.Range</code> refer to the <code>ActiveSheet</code> and can lead to issues if you're not aware of this. My first step was to go through and everything after <code>Worksheets(2).Select</code> to fully qualify it with</p>

<pre><code>Dim secondSheet As Worksheet
Set secondSheet = Worksheets(2)
</code></pre>

<p><code>Range("AK1").Value = "1"</code> then became <code>secondSheet.Range("AK1").Value = "1"</code> giving me a lot more confidence that removing the <code>.Select</code> shouldn't alter the code. I did the same with <code>Worksheets(1).Select</code> as well. After that I went after the <code>Range.Select</code>s.</p>

<hr>

<pre><code>Range("N" &amp; Rows.Count).End(xlUp).Select
Range(Selection, Selection.End(xlUp)).Select
Selection.PasteSpecial Paste:=xlPasteAll, Operation:=xlMultiply, _
SkipBlanks:=False, Transpose:=False
</code></pre>

<p>I took the above <code>Select</code> and <code>Selection</code> to be finding where the last cell on a specific column. <code>Range("N" &amp; Rows.Count).End(xlUp).Select</code> became what follows. My choice of variable names are self describing, helping you immediately understand what the code is there for.</p>

<pre><code>Dim lastCell as range
set lastCell = secondSheet.Range("N" &amp; Rows.Count).End(xlUp)
</code></pre>

<p>Going up from this last cell to get a contiguous range <code>Range(Selection, Selection.End(xlUp)).Select</code> became</p>

<pre><code>Dim modifyRange as Range
Set modifyRange = secondSheet.Range(lastCell, lastCell.End(xlUp))
</code></pre>

<p>Lastly replace the <code>Selection</code> in <code>Selection.PasteSpecial Paste:=xlPasteAll, Operation:=xlMultiply, SkipBlanks:=False, Transpose:=False</code> with <code>modifyRange</code> and it's looking a lot better. But this is being done in 3 places on the secondSheet and once on firstSheet. Rather than having duplicated code, create a Sub procedure <code>ConvertToNumeric</code> that takes in 2 parameters <code>ByVal sheetToUse As Worksheet</code> and <code>ByVal columnToFindLastCellOn As String</code>. The names let you know when typing the name <code>ConvertToNumeric&lt;space&gt;</code> and getting intellisense to show you the names of the arguments you'll supply. Any future changes are made in this single location now be reflected wherever it's called at ensuring the update is correct.</p>

<pre><code>Private Sub ConvertToNumeric(ByVal sheetToUse As Worksheet, ByVal columnToFindLastCellOn As String)
    Dim helperCell As Range
    Set helperCell = sheetToUse.Range("AK1")
    helperCell.value = "1"
    helperCell.Copy

    Dim lastCell As Range
    Set lastCell = sheetToUse.Cells(Rows.Count, columnToFindLastCellOn).End(xlUp)

    Dim modifyRange As Range
    Set modifyRange = sheetToUse.Range(lastCell, lastCell.End(xlUp))
    modifyRange.PasteSpecial Paste:=xlPasteAll, Operation:=xlMultiply, SkipBlanks:=False, Transpose:=False

    helperCell.ClearContents
End Sub
</code></pre>

<hr>

<p>You have a few places with comments like <code>'Format Amount as Accounting</code> that are describing what you're doing. When this occurs it's pretty safe to make that chunk of code be it's own Sub or Function. Sub if it doesn't return a value or Function if it does.</p>

<p>Using the same idea as above <code>Range("J" &amp; Rows.Count).End(xlUp).Select</code> became a <code>Dim lastCell As Range</code> variable and the <code>Range(Selection, Selection.End(xlUp)).Select</code> became <code>Dim modifyRange As Range</code>. You get</p>

<pre><code>Private Sub FormatAsAccounting(ByVal sheetToUse As Worksheet, ByVal columnToApplyFormatTo As String)
    Dim lastCell As Range
    Set lastCell = sheetToUse.Cells(Rows.Count, columnToApplyFormatTo).End(xlUp)

    Dim modifyRange As Range
    Set modifyRange = sheetToUse.Range(lastCell, lastCell.End(xlUp))
    modifyRange.Style = "Comma"
End Sub
</code></pre>

<p>It's called in code <code>FormatAsAccounting secondSheet, "J"</code> where <code>secondSheet</code> is a worksheet variable and <code>columnToApplyFormatTo</code> is a string that tells you what column you'll be using. Admittedly the <code>modifyRange</code> variable isn't actually needed and <code>sheetToUse.Range(lastCell, lastCell.End(xlUp)).Style ...</code> could be used but serves to illustrate how as code becomes simpler many times it helps clean itself.</p>

<p>The same thing occurred with headers as well.</p>

<hr>

<p>When you get to the saving a workbook that has copies of your worksheets you have variables <code>Dim ws As Worksheet</code> that's never used and <code>Dim wbNew As Workbook</code> that's assigned but then never used. There is also <code>dt</code> and <code>wbNam</code>, neither of which are declared. In the VBE coding window go to Tools&gt;Options&gt;Require Variable Declaration. This will put <code>Option Explicit</code> into any new module and requires you to <code>Dim</code> every single variable. It takes more thought and effort to code, but doing something well generally takes effort. Future-you will thank current-you for doing so because it'll save you from many needless issues in your code. BTW Debug&gt;Compile VBAProject (Alt+D+L for keyboard shortcut) is your friend. That'll tell the compiler to compile the code and if something isn't correct it'll alert you by taking you straight there. Keep doing that until there's no more compile-time problems.</p>

<p>Back to the code.</p>

<p>You're selecting a sheet, filtering the sheet, selecting all cells on the sheet to copy that information to a sheet that was just added. This is done for the sheet "PP" and "BK". Those copied sheets are then copied to a new workbook only to be deleted in your current workbook. You can avoid this by creating a new workbook and using that variable.</p>

<pre><code>Dim saveBook As Workbook
Set saveBook = Workbooks.Add
</code></pre>

<p>Putting that code into a Sub and having your cursor on the word <code>Add</code> if you press <kbd>Ctrl</kbd>+<kbd>i</kbd> or Edit&gt;Quick Info you should see <code>Add([Template]) As Workbook</code> appear. This indicates the <code>Add</code> function on the <code>Workbooks</code> collection returns a <code>Workbook</code> object, which coincidentally is what <code>saveBook</code> has been dimensioned as. Right clicking on <code>Add</code> and choosing <code>Definition</code> (3rd from bottom) will take you to the object browser where you can see at the bottom pane what I just described. This gives you a new workbook to use that you'll eventually save where you want. The <a href="https://msdn.microsoft.com/en-us/vba/language-reference-vba/articles/use-the-object-browser" rel="nofollow noreferrer">Object Browser</a> is another topic, but learning to use it will help tremendously.</p>

<p>You can directly copy a sheet by using the <code>Copy</code> procedure on a worksheet object and tell it where to be copied to with either the <code>Before</code> or <code>After</code> argument.</p>

<pre><code>Dim ppSheet As Worksheet
Set ppSheet = Sheets("pp")
ppSheet.Copy Before:=saveBook.Worksheets(1)
</code></pre>

<p>As part of your eventual file name <code>dt</code> isn't descriptive. I used <code>monthPriorDate</code> since that's what you're doing with <code>DateAdd</code>. Putting all the pieces together you get <code>SaveExternalCopy</code>.</p>

<pre><code>Private Sub SaveExternalCopy()
    Dim saveBook As Workbook
    Set saveBook = Workbooks.Add

    Dim ppSheet As Worksheet
    Set ppSheet = Sheets("pp")
    ppSheet.UsedRange.AutoFilter field:=31, Criteria1:="Variable1"

    ppSheet.Copy Before:=saveBook.Worksheets(1)
    Dim ppCopy As Worksheet
    Set ppCopy = saveBook.Worksheets(1)
    ppCopy.Name = "PP1"


    Dim bkSheet As Worksheet
    Set bkSheet = Sheets("Bk")
    bkSheet.UsedRange.AutoFilter field:=16, Criteria1:="Variable2"

    bkSheet.Copy After:=ppCopy
    Dim bkCopy As Worksheet
    Set bkCopy = Sheets.Add(After:=bkSheet)
    bkCopy.Name = "BK1"

    Dim monthPriorDate As String
    monthPriorDate = Format(DateAdd("m", -1, Now), "yyyy_mm")

    'Dont forget to delete any default sheets that are created
    'when the workbook is first created.

    saveBook.SaveAs "\\user\location\" &amp; "BK_PP_" &amp; monthPriorDate &amp; ".xlsx"
    saveBook.Close
End Sub
</code></pre>

<hr>

<p>My final code ended up as follows. Save a copy before running the code as I've not 100% fully tested everything and there might be an unforseen issue that wasn't caught.</p>

<p><code>PP_Formatting_Saving</code> now is shorter and everything it's doing is self-descriptive. Each Sub that's called is doing one thing, which makes it easier to fix a problem when looking at 10-20 lines of code instead of a single block of around 90 lines of code. Comments are mostly gone. Comments should describe <em>the why</em> of something being done not <em>the what</em> since what is happening should be apparent. Why is for when one choice was made over another, something like <code>'Doing it this way over &lt;OtherWaysName&gt; is 5 times faster.</code></p>

<pre><code>Public Sub PP_Formatting_Saving()

    Application.ScreenUpdating = False

    Dim secondSheet As Worksheet
    Set secondSheet = Worksheets(2)
    secondSheet.Select 'This may possible be removable

    ConvertToNumeric secondSheet, "N"
    ConvertToNumeric secondSheet, "AA"
    ConvertToNumeric secondSheet, "G"

    FormatAsAccounting secondSheet, "J"
    FormatTheHeaderOf secondSheet

    secondSheet.Cells.EntireColumn.AutoFit
    secondSheet.Columns("O:O").ColumnWidth = 40
    secondSheet.Cells.AutoFilter '¿Does this turn it on or off? 'Filter all headers

    Dim firstSheet As Worksheet
    Set firstSheet = Worksheets(1)
    firstSheet.Activate 'This may possible be removable also
    firstSheet.Cells.WrapText = False

    FormatAsAccounting firstSheet, "C"
    ConvertToNumeric firstSheet, "B"
    firstSheet.Cells.EntireColumn.AutoFit
    FormatTheHeaderOf firstSheet
    firstSheet.Cells.AutoFilter

    SaveExternalCopy
End Sub

Private Sub ConvertToNumeric(ByVal sheetToUse As Worksheet, ByVal columnToFindLastCellOn As String)
    Dim helperCell As Range
    Set helperCell = sheetToUse.Range("AK1")
    helperCell.value = "1"
    helperCell.Copy

    Dim lastCell As Range
    Set lastCell = sheetToUse.Cells(Rows.Count, columnToFindLastCellOn).End(xlUp)

    Dim modifyRange As Range
    Set modifyRange = sheetToUse.Range(lastCell, lastCell.End(xlUp))
    modifyRange.PasteSpecial Paste:=xlPasteAll, Operation:=xlMultiply, SkipBlanks:=False, Transpose:=False

    helperCell.ClearContents
End Sub

Private Sub FormatTheHeaderOf(ByVal sheetToUse As Worksheet)
    Dim header As Range
    Set header = sheetToUse.Range(sheetToUse.Range("A1"), sheetToUse.Range("A1").End(xlToRight))
    With header.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = RGB(192, 192, 192) 'RGB(192,192,192) = 12632256
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    header.Font.Bold = True
End Sub

Private Sub FormatAsAccounting(ByVal sheetToUse As Worksheet, ByVal columnToApplyFormatTo As String)
    Dim lastCell As Range
    Set lastCell = sheetToUse.Cells(Rows.Count, columnToApplyFormatTo).End(xlUp)

    Dim modifyRange As Range
    Set modifyRange = sheetToUse.Range(lastCell, lastCell.End(xlUp))
    'NumberFormat could possibly be used instead of Style
    'I'm not sure if you have altered the "Comma" Style though
    'modifyRange.NumberFormat = "_(* #,##0.00_);_(* (#,##0.00);_(* ""-""??_);_(@_)"
    modifyRange.Style = "Comma"
End Sub

Private Sub SaveExternalCopy()
    Dim saveBook As Workbook
    Set saveBook = Workbooks.Add

    Dim ppSheet As Worksheet
    Set ppSheet = Sheets("pp")
    ppSheet.UsedRange.AutoFilter field:=31, Criteria1:="Variable1"

    ppSheet.Copy Before:=saveBook.Worksheets(1)
    Dim ppCopy As Worksheet
    Set ppCopy = saveBook.Worksheets(1)
    ppCopy.Name = "PP1"


    Dim bkSheet As Worksheet
    Set bkSheet = Sheets("Bk")
    bkSheet.UsedRange.AutoFilter field:=16, Criteria1:="Variable2"

    bkSheet.Copy After:=ppCopy
    Dim bkCopy As Worksheet
    Set bkCopy = Sheets.Add(After:=bkSheet)
    bkCopy.Name = "BK1"

    Dim monthPriorDate As String
    monthPriorDate = Format(DateAdd("m", -1, Now), "yyyy_mm")

    'Dont forget to delete any default sheets that are created
    'when the workbook is first created.

    saveBook.SaveAs "\\user\location\" &amp; "BK_PP_" &amp; monthPriorDate &amp; ".xlsx"
    saveBook.Close
End Sub
</code></pre>

<p>Lastly <a href="http://rubberduckvba.com" rel="nofollow noreferrer">Rubberducks</a> Code Inspections brought up a lot of what I addressed and has been very helpful to my VBA knowledge and improving my coding habits. I'm a contributor and openly biased in favor of it.</p>
    </div>