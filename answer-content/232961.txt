<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Minor Cleanup</h2>

<p>Contrary to @Graipher's opinion, I find your <code>max_triangle_sum</code> implementation is reasonably clear.  Although, I'm not sure I'd refer to it as dynamic programming; it is simply computing top-down the maximum sums for each row.</p>

<pre><code>dp = [[-1] * row_index for row_index in range(1, height + 1)]
</code></pre>

<p>What does <code>row_index</code> mean?  It doesn't convey any meaning other than the index number of the row.  <code>[-1] * row_index</code> is ... mysterious.  <code>row_length</code> conveys meaning: it is length of the row, and <code>[-1] * row_length</code> tells the reader you have a row of <code>-1</code> values of a certain length.</p>

<p>What is the <code>-1</code> mean?  Where is it used?  This statement creates a triangular data structure, with <code>-1</code> at each cell, but only to allocate the structure.  The actual <code>-1</code> value is not used; it is unconditionally overwritten in the following code.  If you have a mistake in the following code, it might use this <code>-1</code> value, and quietly produce erroneous results.  If you used <code>None</code> instead of <code>-1</code>, if you ever accidentally used the value in a cell before it has been assigned, Python would raise an exception.</p>

<pre><code>dp = [[None] * row_length for row_length in range(1, height + 1)]
</code></pre>

<p>Avoid negative indexing.</p>

<pre><code>   dp[i][i] = dp[i-1][i-1] + triangle[i][-1]
</code></pre>

<p>Here, <code>triangle[i][-1]</code> is referring to the last cell on the ith row.  But the cells on the ith row from from <code>0</code> to <code>i</code>, so <code>triangle[i][-1]</code> simply means <code>triangle[i][i]</code>.    You are already assigning to <code>dp[i][i]</code>, so this gives the statement a nice symmetry:</p>

<pre><code>   dp[i][i] = dp[i-1][i-1] + triangle[i][i]
</code></pre>

<p>You don't really need to pass <code>height</code> to <code>max_triangle_sum</code>: it can easily be computed as:</p>

<pre><code>   height = len(triangle)
</code></pre>

<h2>Space</h2>

<p>Because you are allocating <code>dp</code> to hold the values of sum of the paths to each cell of each row of the triangle, your solution takes <span class="math-container">\$O(N^2)\$</span> space to find the solution.</p>

<p>Consider these statements:</p>

<pre><code>    dp[i][0] = dp[i-1][0] + triangle[i][0]
    dp[i][i] = dp[i-1][i-1] + triangle[i][-1]
    dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j]) + triangle[i][j]
</code></pre>

<p><code>dp[i][...]</code> only depends upon values in <code>d[i - 1][...]</code>.  This means you only need the previous <code>dp</code> row to compute the next <code>dp</code> row; you don't need the whole <code>dp</code> triangle structure, just two rows:</p>

<pre><code>    curr = [triangle[0][0]]

    for i in range(1, height):

        prev = curr
        curr = [None] * (i + 1)

        curr[0] = prev[0] + triangle[i][0]
        curr[i] = prev[i - 1] + triangle[i][i]

        for j in range(1, i):
            curr[j] = max(prev[j - 1], prev[j]) + triangle[i][j]
</code></pre>

<p>As a bonus, this should be faster, since less indexing is being performed.</p>

<p>We've still got <code>triangle[i]</code> being indexed constantly.  We can eliminate that by iterating over the rows of <code>triangle</code> directly.  We'll use <code>enumerate()</code> so we keep the row index:</p>

<pre><code>    for i, row in enumerate(triangle[1:], 1):

        prev = curr
        curr = [None] * (i + 1)

        curr[0] = prev[0] + row[0]
        curr[i] = prev[i - 1] + row[i]

        for j in range(1, i):
            curr[j] = max(prev[j - 1], prev[j]) + row[j]
</code></pre>

<p>That's a little cleaner, and a little faster.</p>

<p>Now the ugliest part having to handle the first and last value separately.  The problem is there is no value before the first element, and no value after the last element to compute the <code>max()</code> on.  But why isn't there?  Or more to the point, why can't there be?  If you padded the previous row with duplicated first and last values, you'd turn those special cases into the regular case of a value in the middle of the row:</p>

<pre><code>    for i, row in enumerate(triangle[1:], 1):

        prev = [curr[0]] + curr + [curr[-1]]     # Duplicate first &amp; last values
        curr = [None] * (i + 1)

        for j in range(0, i + 1):
            curr[j] = max(prev[j], prev[j + 1]) + row[j]
</code></pre>

<p>Note: I've had to change <code>prev[j-1]</code> and <code>prev[j]</code> to <code>prev[j]</code> and <code>prev[j + 1]</code> to account for the changed indices, due to the duplicated value at the start.</p>

<p>Now, we are filling in all the values of <code>curr</code> in a simple for loop.  This screams list comprehension.  No need to allocate the <code>curr</code> list ahead of time anymore.</p>

<pre><code>    for i, row in enumerate(triangle[1:], 1):

        prev = [curr[0]] + curr + [curr[-1]]     # Duplicate first &amp; last values
        curr = [max(prev[j], prev[j + 1]) + row[j] for j in range(0, i + 1) ]
</code></pre>

<p>But we're still doing a lot of indexing.  We've got <code>prev[j]</code>, and <code>row[j]</code> which are normalish indexes, and we've got <code>prev[j + 1]</code> which could be considered <code>adjusted_prev[j]</code> if we assigned <code>adjusted_prev</code> the values of <code>prev[1:]</code>.  Then, with all the values being retrieved by a simple <code>[j]</code> index, we can let Python do the indexing for us but turning the indexing into iteration.  Finally, since Python knows the number of values in the lists, we no longer need the <code>i</code> index:</p>

<pre><code>    for row in triangle[1:]:

        prev = [curr[0]] + curr + [curr[-1]]     # Duplicate first &amp; last values
        curr = [max(a, b) + x for a, b, x in zip(prev[:-1], prev[1:], row) ]
</code></pre>

<p>Since <code>prev[:-1]</code> gives us all the values of the <code>curr</code> with the first value duplicated, and <code>prev[1:]</code> gives us all the values of <code>curr</code> with the last value duplicated, we don't even need <code>prev</code>:</p>

<pre><code>def max_triangle_sum(triangle):

    curr = [triangle[0][0]]

    for row in triangle[1:]:
        curr = [max(a, b) + x for a, b, x in zip([curr[0]] + curr, curr + [curr[-1]], row)]

    return max(curr)
</code></pre>

<p>The space requirement (ignoring <code>triangle</code>) is now <span class="math-container">\$O(N)\$</span>, since only the previous row needs to be held in memory while the current row is being computed.</p>

<p>If it is guaranteed that the triangle only contains positive numbers, and since <code>max(0, x) == x</code> whenever <code>x</code> is positive, then instead of duplicating the first and last values, we could append and prepend a zero to each end.  This will allow us to remove the first row as a special case:</p>

<pre><code>def max_triangle_sum(triangle):

    curr = []
    zero = [0]

    for row in triangle:
        curr = [max(a, b) + x for a, b, x in zip(zero + curr, curr + zero, row)]

    return max(curr)
</code></pre>

<p>Now, <code>triangle</code> doesn't even need to be held in memory.  Instead, an iterable object could be passed in, which could read the triangle in line by line on demand, further ensuring an <span class="math-container">\$O(N)\$</span> memory solution.</p>

<hr>

<p>See other answers for great feedback on input sanitization, and reading the triangle data from a file.</p>
    </div>