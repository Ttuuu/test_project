<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not sure this qualifies as a review, but here we go anyways.</p>

<p>Don't do this. This is one of the classic use of a design pattern where we shouldn't use one. A design pattern is a solution to a known problem with set boundaries and a very specific scenario. The builder is used to build <strong>complex</strong> objects in a <strong>flexible</strong> manner. A DTO isn't a complex object and shouldn't be built in a flexible manner. If your DTOs are complex, that is the problem you should tackle with your team, not trying to find a work to work with complex DTOs.</p>

<p>When reading your first paragraph, I swear I could've written it 5 years ago. I've written <a href="https://codereview.stackexchange.com/questions/60054/generic-equality-checker">a generic equality checker</a> (in hopes that it would help make equality comparison easier, where it's already really easy. What happened is :</p>

<ol>
<li>We found edge cases that weren't supported, ended up working on it a lot more to fix the edge cases</li>
<li>It got complicated and new developers had a hard time figuring out how it worked</li>
<li>It died and is probably to this date still marked as <code>[Deprecated]</code> in a code base</li>
</ol>

<p>Now, I ask myself three questions before I try to add a "generic" tool that'll "help" my fellow developers : </p>

<ul>
<li>Is the problem I'm trying to solve complex enough to require such a solution?</li>
<li>Am I <strong>100%</strong> sure that what I've written won't explode in a mess of edge cases that'll cost more to maintain than not having the solution at all?</li>
<li>Will other developers pick it up easily and understand how it works?</li>
</ul>

<p>I'd say that 9 times out of 10, the answer is no to at least one of those questions and I end up not doing it. It takes experience to know when not to do something, because as developers we always want to work with the cool stuff, but most of the time it creates more complexity than it solves.</p>

<p>Now, that doesn't mean you should fiddle with ideas like these, because you can learn a lot about many things (reflection, expressions, generics, etc.). But you need to develop the reflex to ask yourself "Should this be used in a production code that'll need to be maintained for years, potentially without me?" and think <em>hard</em> about the possible consequences of using whatever you're going to build.</p>

<hr>

<p>The <code>new</code> keyword is probably the biggest "maintainability danger" of the C# language (In my opinion). I really think you should use whatever other way you have not to use it (ie. removing the nested class). Use interfaces, dependency injection, etc. not to use the <code>new</code> keyword. (I'm obviously not talking about class instantiation)</p>
    </div>