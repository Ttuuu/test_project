<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Improvement in code and programming style:</h2>

<p><code>minDistance()</code> takes two array parameters that are only read from. They should be qualified as <code>const</code> to document the intents of the function:</p>

<pre><code>int minDistance(const int dist[], const bool sptSet[], int V);
</code></pre>

<p>Single letter names are OK in places like loop counters and array indexes, but not so much for function parameters. <code>int V</code> in <code>minDistance()</code> is not very descriptive. <code>V</code> is a vertex, the target of the search, I believe. Then name it as such: <code>targetVertex</code>.</p>

<p>Your code is very poorly indented. Not sure if that was a problem when you posted it here, if so, then disregard this comment. If not, then you have to pay a lot more attention to that. Properly indent code under each scope. As it stands right now, it is very difficult to read and reason about its flow of logic.</p>

<h2>Manual memory management:</h2>

<p>At the moment, you are manually allocating and freeing memory inside the <code>dijkstra()</code> function. There is little gain in doing that and it can lead to a ton of problems. If an exception is thrown in mid function, you have a memory leak. If you make the mistake of returning from the function without deallocating, there's a leak. Manually managing memory allocations inside function scope tend to generate complicated cleanup and error handling code. All this can be avoided by simply using a standard <a href="http://en.cppreference.com/w/cpp/container/vector" rel="nofollow"><code>std::vector</code></a> to automate the cleanup for you:</p>

<pre><code>std::vector&lt;int&gt; dist(vertex);
std::vector&lt;bool&gt; sptSet(vertex);

// The delete[]s are no longer necessary.
</code></pre>

<h2>Other style and architecture details:</h2>

<p>Prefer using <a href="http://en.cppreference.com/w/cpp/types/numeric_limits" rel="nofollow"><code>std::numeric_limits</code></a> instead of the <code>INT_MAX</code> family of macros. The former is more modern.</p>

<p>You are currently computing the time the search took and returning it as the function's return value. This is an unusual setup. A more general function would not bother measuring its execution time, since this can easily be done at the call site before entering the function.
If you have use cases where the caller doesn't care about the time taken, you are just wasting cycles computing that time delta.</p>
    </div>