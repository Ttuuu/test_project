<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should consider the possibility to make paradoxical objects. The below is actually possible and valid according to your classes and their properties but makes no sense:</p>

<pre><code>Account account = new Expenses { Value = 100.00m, Type = new AccountType { Type = AccountTypes.Earnings } }
</code></pre>

<p>In other words: When you have a class hierarchy that defines the data types, there is no  need to and it can lead to paradoxical objects having a property that defines the same as the containing class. So an Expenses account is an expenses account by it own definition as subclass to Account and doesn't need the Type property. So get rid of that completely. If you stand on it, you'll have to make it read only and hard code the Type Property on each of the subclasses:</p>

<pre><code>public abstract class Account
{
  public abstract AccountTypes Type { get; }
}

public class Expenses
{
  public override AccountTypes Type =&gt; AccountTypes.Expenses;
  etc...
</code></pre>

<p>Alternatively you can remove the subclasses to Account and have an <code>AccountTypes</code> member as defining property, but then it isn't much of a class hierarchy.</p>

<hr>
    </div>