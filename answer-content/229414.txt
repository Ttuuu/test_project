<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(Adapted from my <a href="https://codereview.stackexchange.com/a/226309">answer to <em>How can I make my solution to “Climbing the Leaderboard” not time out?</em></a>)</p>

<p>It is nice that you used <code>size_t</code> and <code>ptrdiff_t</code>.  However, <code>int</code> is still directly used for the score.  I would prefer an alias:</p>

<pre><code>using score_t = long;
using rank_t = long;
</code></pre>

<p>(Note that <code>int</code> is not guaranteed to have <span class="math-container">\$10^9\$</span>.)</p>

<p>The <code>m_binary_search</code> function is redundant because we have <code>std::lower_bound</code> which should be optimized better.</p>

<p>The <code>climbingLeaderboard</code> is <em>way</em> too long.  The function is illogical. It should handle one Alice-score at a time. Also, <code>climbingLeaderboard</code> isn't really a good function name.  (I know HackerRank forces you to code sub-optimally sometimes, but you should be aware.)</p>

<p>The problem is very simple and can be finished in several lines without sacrificing readability:</p>

<pre><code>using score_t = long;
using rank_t = long;

// scores is passed by value to take advantage of possible optimization.
rank_t get_rank(std::vector&lt;score_t&gt; scores, score_t alice_score)
{
    scores.erase(std::unique(scores.begin(), scores.end()), scores.end());

    auto it = std::lower_bound(scores.begin(), scores.end(), alice_score, std::greater&lt;&gt;{});
    return it - scores.begin() + 1;
}
</code></pre>

<p>The code is <span class="math-container">\$O(n)\$</span> and I don't think you can do better in terms of asymptotic analysis. Note that each score of Alice's is independent, so it makes no sense to process them together in a function. I used <code>long</code> because the problem seems to require numbers as large as <span class="math-container">\$10^9\$</span>. <code>scores</code> will be modified in the function, so instead of making a copy manually, we let the compiler do so for us in the parameter list. This enables possible optimization opportunities.</p>

<p>Here, we used two standard algorithms:</p>

<ul>
<li><p><code>std::unique</code>, which "removes" adjacent equal elements. Standard algorithms cannot change the size of <code>scores</code> via iterators, so <code>std::unique</code> makes sure that the first <span class="math-container">\$N\$</span> elements are the result, where <span class="math-container">\$N\$</span> is the number of elements in the result. The rest of the elements are placed in a valid but otherwise unspecified state. Then, we call erase to erase these garbage elements. This is also known as the <a href="https://stackoverflow.com/q/799314">remove-erase idiom</a>.</p></li>
<li><p><code>std::lower_bound</code>, which performs a binary search and returns the first element that compares not "less" than the provided value. By default, "less" is defined by <code>&lt;</code>, thus operating on an ascending sequence. In this case, we use <code>std::greater&lt;&gt;</code> to define "less" by <code>&gt;</code>, so that <code>std::lower_bound</code> is adapted to work on a descending sequence.</p></li>
</ul>

<p>Of course, you will need to adapt to HackerRank's strange interface, but that should be trivial.</p>
    </div>