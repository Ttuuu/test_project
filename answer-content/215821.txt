<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>result = random % range
</code></pre>

<p>You can only do this if <code>range</code> is constrained to be much smaller than the maximum value of <code>random</code>.  Imagine a 2-bit PRNG that returns a value from 0 to 3.   When your function is invoked with range 3, return value 0 will be twice as common as 1 or 2.</p>

<pre><code>random_32b /= range;
full_32b /= range;
</code></pre>

<p>This is going to exhibit obvious bias when the result has a small number of bits.  Imagine a range of 3 and a 4-bit random pool.  On exit, <code>full_32b</code> will equal 5 but <code>random_32b</code> will only equal 5 one time in 15.  </p>

<hr>

<p>There are three good ways to go about this: </p>

<ol>
<li><ul>
<li>choose an acceptable margin of bias (expressed as a fraction); </li>
<li>divide <code>range</code> by that fraction; </li>
<li>select enough bits to make <code>max(random)</code> larger than the result of the division;</li>
<li>return a simple modulus.</li>
</ul></li>
</ol>

<p>For example, 1% bias is 0.01.  If the range is 10, the random number needs a maximum larger than <span class="math-container">\$10/0.01 = 1000\$</span>.
That's ten bits.</p>

<ol start="2">
<li><ul>
<li>select enough bits to represent <code>range</code></li>
<li>repeat until the result is smaller than <code>range</code>.</li>
</ul></li>
</ol>

<p>Example: for a range of 10, consume four bits and discard results larger than 9.</p>

<ol start="3">
<li><ul>
<li>select enough bits to represent <code>range</code>, plus a couple more, to represent a multiple of <code>range</code>.  Call the multiplier <span class="math-container">\$i\$</span>.</li>
<li>repeat until the result is smaller than <span class="math-container">\$i * \$</span><code>range</code> </li>
<li>divide result by <span class="math-container">\$i\$</span></li>
</ul></li>
</ol>

<p>This last approach combines the advanatages of first two: you get bias-free numbers and mostly predictable runtime.  </p>

<p>Example: approach #2 with a range of 9 consumes four bits per attempt, and discards almost half of the results.  With 5 bits, instead of 4, you keep results from 0-26 (i.e., <code>range</code><span class="math-container">\$*3\$</span>) and divide them by 3.  Discard 27 or largerâ€”that's only 5/32 attempts wasted.  With 6 bits and range of 9, values 0-62 are usable (<code>range</code><span class="math-container">\$*7\$</span>), and only one possible value (63) will be discarded.</p>

<p>In all cases, consume bits by bit-shifting (or dividing by powers of two).  Integer division with arbitrary denominators won't work.</p>
    </div>