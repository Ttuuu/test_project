<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Inconsistent definition of <code>ExpandoObject</code>. It's <code>IDictionary&lt;string, object&gt;</code> here:</p>

<blockquote>
<pre><code>if (p.Value is IDictionary&lt;string, object&gt; dict)
{
    return ConvertDynamicToDictonary(dict); // &lt;- possibly already visited?
}
</code></pre>
</blockquote>

<p>and <code>ExpandoObject</code> here:</p>

<blockquote>
<pre><code>if (list.Any(o =&gt; o is ExpandoObject))
{
    // ..
}
</code></pre>
</blockquote>

<p>I would opt to use <code>IDictionary&lt;string, object&gt;</code> both to improve consistency and flexibility of handling instances in the hierarchy.</p>

<hr>

<p>It is not clear whether the structure of the hierarchical data is a <em>tree</em> or a <em>cyclic graph</em>. This has impact on a possible infinite recursion. In case of a cyclic graph, I would keep track of visited references.</p>

<hr>

<p>Not all sequences are generic classes. </p>

<p>This condition..</p>

<blockquote>
  <p><code>if (p.Value is IEnumerable&lt;object&gt; list)</code></p>
</blockquote>

<p>..does not cover when <code>p.Value</code> is <code>IEnumerable</code> but not <code>IEnumerable&lt;object&gt;</code>. As note in another answer, be careful with false positives (like <code>string</code>). </p>

<hr>

<p>What if <code>value</code> is null? Try avoiding null reference exceptions in your code.</p>

<hr>
    </div>