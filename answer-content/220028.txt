<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Big <span class="math-container">\$O\$</span></h2>
<p>Time complexity is a ratio of some input metric (e.g. the number of character in the string) to the number of instructions required to complete the function.</p>
<p>In this case the metric <span class="math-container">\$n\$</span> is the string length. The first loop that uses <code>String.match</code> must for each character check all characters to find a count. That means at least <span class="math-container">\$n * n\$</span> steps need to be performed to do the operation.</p>
<p>Thus the complexity of the function is said to be <span class="math-container">\$O(n^2)\$</span></p>
<p>If you think about how you would solve it on paper. You would go over each character once with a list of characters found adding 1 to each count as you find them. This would have a time complexity of <span class="math-container">\$O(n)\$</span></p>
<p>Maps use a hash function to locate an item <span class="math-container">\$O(1)\$</span>. So the time complexity to find out if you have counted a character before is <span class="math-container">\$O(1)\$</span>, rather than your regExp <span class="math-container">\$O(n)\$</span></p>
<pre><code>function countLetters(str) {
    const charCounts = {};
    var result = "";
    for (const c of str) { 
        if (charCounts[c]) { charCounts[c] += 1 }
        else { charCounts[c] = 1 }
    }
    for (const [char, count] of Object.entries(charCounts)) {
        result += char + " has " + count + " ";
    }
    return result;
}
</code></pre>
<p>The second loop to create the result, will count in the worst case each character again. Thus the number of instructions is <span class="math-container">\$2n\$</span> In big <span class="math-container">\$O\$</span> notation the scale <span class="math-container">\$2\$</span> is insignificant compared to powers, even if it was <span class="math-container">\$1000000n\$</span> we ignore the scale and make it just <span class="math-container">\$n\$</span></p>
<p>It can not be done with less complexity as you need to check every character at least once. Because you do not know what the characters are before you check them.</p>
<h2>Style Notes.</h2>
<ul>
<li>Use <code>;</code> or not, never use them sometimes.</li>
<li>Careful with indentation. You indent 4 and sometime 2 spaces, use either not both.</li>
<li>Use Function declarations in favor of arrow functions when in global scope.</li>
<li>Variables that do not change should be declared as constants <code>const</code></li>
<li>Use <code>for of</code> rather than  <code>for in</code></li>
</ul>
    </div>