<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Free the Functions!</h3>

<p>First, as others have pointed out, this gains nothing from being a class--it probably makes more sense as a free function.</p>

<h3>Good Inheritors Would Rather Switch than Fight!</h3>

<p>Second, this specifies that its argument must be an <code>fstream</code>. This seems rather pointless. One of the major points of streams is that most functions can (and do) handle various kinds of streams by working with the base classes--usually <code>std::istream</code> and <code>std::ostream</code>. This lets your code work with any stream that provides the interface you need (in this case, just the ability to read, so an istream suffices).</p>

<h3>Return Status</h3>

<p>With those changed, the big shortcoming I see in this <code>getline</code> compared to <code>std::getline</code> is that it fails to return anything that can be interpreted as the status of the attempt at reading.</p>

<p>For example, in a typical case I might read and process all the lines of text from a file using a loop something like this:</p>

<pre><code>std::ifstream input("input.txt");
std::string line;

while (std::getline(input, line))
    process(line);
</code></pre>

<p>If I want to read all the lines from a file with this getline, I guess I can do something like this:</p>

<pre><code>while (getline(input, line), input.good())
    process(line);
</code></pre>

<p>That should work, but it's a bit clumsy at best, and sufficiently strange that most people would probably find it more difficult to understand. I think it would be better to do like most I/O routines, and return a reference to the stream you read from:</p>

<pre><code>std::istream &amp;getline(std::istream&amp; in, string&amp; word, char delimeter ='\n'){
    char ch;

    word = "";
    while(in.get(ch)){
        word += ch;
        if(ch==delimeter)
            break;
    }
    return in;
}
</code></pre>

<h3>Spelling</h3>

<p>The word you're spelling as "delimeter" is actually spelled "delimiter".</p>

<h3>Delimiter Usage</h3>

<p>Your code has behavior that differs from <code>std::getline</code> in a way I think reduces its utility. <code>std::getline</code> normally reads the delimiter from the stream, but does <em>not</em> include that delimiter in the output string (where your code does include the closing delimiter in the output string). At least when I've used it, including that delimiter wouldn't be very useful--I'd usually have to delete it if I read a string with this code. I'd probably omit it, and (if necessary) provide an overload that saved it (but still probably separately from the string it read).</p>

<h3>Delimiter Specification</h3>

<p>Probably the single biggest problem I have with <code>std::getline</code> is that you can only specify one specific character as the delimiter. If I were going to write one, I think I'd allow the user to pass something like a string, so they could (for example) pass <code>"\t\r\n\v"</code> as the delimiter, to have the function read to the next white-space.</p>

<p>Although it's more advanced, you could go even further, and let the user specify the delimiter as a regular expression, so they could specify arbitrarily complex patterns instead of just a few specific characters.</p>
    </div>