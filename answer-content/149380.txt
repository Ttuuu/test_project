<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Note that Python's official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a>, recommends using <code>lower_case</code> names for variables, so I changed all your <code>L</code>s to <code>l</code> and all your <code>new_L</code> to <code>new_l</code>.</p>

<pre><code>l = [4, 2, 1, 3]
</code></pre>

<p>You should keep track of the cumulative sum in a variable. This way you avoid having to test whether the <code>new_l</code> already has an element in it:</p>

<pre><code>def add_one_by_one(l):
    new_l = []
    cumsum = 0
    for elt in l:
        cumsum += elt
        new_l.append(cumsum)
    return new_l
</code></pre>

<p>As an alternative, you could use a generator to avoid having to build the list inside the function (if you are just going to iterate over it later, this is the most <em>memory-efficient</em> way):</p>

<pre><code>def add_one_by_one_gen(l):
    cumsum = 0
    for elt in l:
        cumsum += elt
        yield cumsum

new_l = list(add_one_by_one_gen(l))

# This takes basically no additional memory (only one float/int):
for x in add_one_by_one_gen(l):
    print x
</code></pre>

<p>(Replace <code>print x</code> with <code>print(x)</code> in Python 3.x.)</p>

<p>Probably the <em>fastest</em> way to do it would be using the <code>numpy</code> function <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.cumsum.html" rel="noreferrer"><code>cumsum</code></a>:</p>

<pre><code>import numpy as np

new_l = np.cumsum(l)
</code></pre>
    </div>