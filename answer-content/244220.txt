<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>You can simplify the code (and maybe accelarate it) by not assigning variables for values that are used once.</li>
<li>spreading the nums array is slow (<code>Math.max</code>), <a href="https://medium.com/coding-at-dawn/the-fastest-way-to-find-minimum-and-maximum-values-in-an-array-in-javascript-2511115f8621" rel="nofollow noreferrer">see
also</a>. <code>Math.max</code> with spreading or the faster alternative (<code>Math.max.apply</code>) for a larger array (somewhere between 120.000 - 130.000 elements) will throw a <code>Range Error</code>, so use a loop for it.</li>
<li><code>reduce</code> is (a lot) slower than a regular loop, so use a
loop to determine the sum</li>
<li><code>Math.floor</code> can be replaced by a bitwise operator
(it's slightly faster)</li>
<li>Side note: <a href="https://www.freecodecamp.org/news/codebyte-why-are-explicit-semicolons-important-in-javascript-49550bea0b82/" rel="nofollow noreferrer">alway use semicolons</a></li>
</ul>
<p>The first snippet shows the aforementioned optimizations</p>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const testLongerArray = [...Array(2000)].map((v, i) =&gt; i &amp;&amp; i*10 || 1);
const testVeryLongArray = [...Array(200000)].map((v, i) =&gt; i &amp;&amp; i*10 || 1);
console.log(minSum(testLongerArray, 600)); // out 10812701
console.log(minSum(testVeryLongArray, 1600)); // out 197130527201
console.log(minSum([209,400,77], 4)); //out: 31
console.log(minSum([5000,5000,5000,5000,5000,], 4)); //out: 7000

function maxValue(arr) {
  let max = 0;
  let i = arr.length;
  while (i--) {
    max = arr[i] &gt; max &amp;&amp; arr[i] || max;
  }
  return max;
};

function minSum(nums, x) {
    if (nums.length === 0) {
        return false;
    }
    const start = performance.now();
    
    while (x--) {
        // Note: a loop for max is the fastest
        // and for very large arrays spreading and Math.max.apply
        // will throw, so using the loop here
        const max = maxValue(nums);
        const maxIndex = nums.indexOf(max);
        //               ^ use indexOf
        nums[maxIndex] = (max / 10) | 0;
        //               ^ Math.floor replacement
    }
    
    // replace reduce with a loop
    let len = nums.length;
    let sum = 0;
    
    while (len--) {
      sum += nums[len];
    }

    return `sum: ${sum}, time: ${(performance.now() - start).toFixed(2)} ms`;
}</code></pre>
</div>
</div>

<p>Now you don't have to iterate through the whole array. If you sort the input array descending, you can take a subset of the first [<code>x</code> length] elements of the sorted input array and perform the operation on the elements of that subset. Adding up the subset elements and the elements of the original sorted array minus its first <code>x</code> elements should give the desired result.</p>
<p>That's worked out in the second snippet. In both snippets the performance is timed, so you can compare both snippets (especially for the longer arrays).</p>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const testLongerArray = [...Array(2000)].map((v, i) =&gt; i &amp;&amp; i * 10 || 1);
const testVeryLongArray = [...Array(200000)].map((v, i) =&gt; i &amp;&amp; i * 10 || 1);
console.log(minSum(testLongerArray, 600)); // out 10812701
console.log(minSum(testVeryLongArray, 1600)); // out 197130527201
console.log(minSum([209, 400, 77], 4)); //out: 31
console.log(minSum([5000, 5000, 5000, 5000, 5000, ], 4)); //out: 7000

function minSum(nums, x) {
  if (nums.length === 0) {
    return false;
  }
  const start = performance.now();
  const operation = v =&gt; (v / 10) | 0;
  nums.sort((a, b) =&gt; b - a);
  let subset = nums.slice(0, x);
  let sum = 0;
  nums = nums.slice(x);

  while (x--) {
    const maxVal = maxValue(subset);
    subset[subset.indexOf(maxVal)] = operation(maxVal);
  }
  nums = nums.concat(subset);
  x = nums.length;
  
  while (x--) {
    sum += nums[x];
  }

  return `sum: ${sum}, time: ${(performance.now() - start).toFixed(2)} ms`;
}

function maxValue(arr) {
  let max = 0;
  let i = arr.length;
  while (i--) {
    max = arr[i] &gt; max &amp;&amp; arr[i] || max;
  }
  return max;
}</code></pre>
</div>
</div>

    </div>