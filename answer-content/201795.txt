<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you print a sequence of numbers from \$x\$ through \$n\$ in increasing order, and then the same sequence in decreasing order, you'll get a row of numbers which starts and ends with \$x\$ and contains an analogous double sequence of numbers \$x+1\ldots n\$ between, right?</p>

<p>For example a sequence from 2 to 5 and back is: 2, sequence from 3 to 5 and back, and 2 again:</p>

<pre><code>2 [3 4 5 5 4 3] 2
</code></pre>

<p>So the simplest solution would be a recursion like this:</p>

<pre><code>void printNumberSequence(int x, int n)
{
    cout &lt;&lt; x &lt;&lt; endl;
    if(x &lt; n) printNumberSequence(x + 1, n);
    cout &lt;&lt; x &lt;&lt; endl;
}
</code></pre>

<p>If you want to avoid doubling the greatest number, e.g. for numbers 2 through 5 you want the output like:</p>

<pre><code>2 3 4 5 4 3 2
</code></pre>

<p>just execute the second <code>cout &lt;&lt; ...</code> under the <code>if()</code>, that is when you're not at the maximum number:</p>

<pre><code>void printNumberSequence(int x, int n)
{
    cout &lt;&lt; x &lt;&lt; endl;
    if(x &lt; n)
    {
        printNumberSequence(x + 1, n);
        cout &lt;&lt; x &lt;&lt; endl;
    }
}
</code></pre>
    </div>