<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thoughts as I read through your post:</p>

<blockquote>
  <p>On returning the memory there is no risk of memory fragmentation</p>
</blockquote>

<p>I'm not sure what you mean.  Do you mean that all the memory will be <code>free</code> i.e. not leaked?  I don't see anything related to memory fragmentation.</p>

<hr>

<pre><code>char arr[4];
</code></pre>

<p>I don't know your use case, but 4 bytes is very small for a modern computer.  You could easily spend 100 times longer dereferencing a pointer than reading 4 bytes.  Are you sure a linked list is the right choice here?</p>

<hr>

<pre><code>struct mem_struct *head=NULL;
</code></pre>

<p>If someone else makes a global variable named <code>head</code> in another .c file, then you will get a linker error because of duplicate symbols.  If you have to use a global variable, you should name it something distinctive like</p>

<pre><code>struct mem_struct *global_mem_struct_head=NULL;
</code></pre>

<p>But a better idea is not to use a global variable at all, and pass a <code>mem_struct*</code> argument to each function.</p>

<hr>

<pre><code>//max no. of fixed size memory blocks initialized at once in a pool
#define total 10
</code></pre>

<p>How about this:</p>

<pre><code>static const int max_init_memory_blocks = 10;
</code></pre>

<p>Now you effectively get the comment every time you use the variable, you get type checking, and even though this is a global, it's invisible outside of this translation unit/this file.</p>

<p>That said, you've done a good job adding comments throughout your code.</p>

<hr>

<pre><code>int mem_pool_init()
</code></pre>

<p>This function does initialization a fixed number of times.  Can you use a for loop?</p>

<hr>

<pre><code>calloc
</code></pre>

<p>If calloc succeeds and then fails, you'll leak the first allocations.</p>

<hr>

<pre><code>void* mem_grant
</code></pre>

<p>Why does this return <code>void*</code>?!  How is the user supposed to know they can only use the first few bytes?!</p>

<hr>

<pre><code>   while(total_pool_size &lt; siz)   //insufficient memory in pool
       if(mem_pool_init())
          return NULL;
</code></pre>

<p>Isn't this an infinite loop?</p>

<hr>

<p>I'm going to stop here.  I think you would find a lot of these mistakes with some very simple test cases.  Then you can post an improved version.</p>
    </div>