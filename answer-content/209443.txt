<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some quick remarks:</p>

<ul>
<li><p>Keep your controllers lean and mean:</p>

<ul>
<li>Move all of the processing (that you seem to have removed by using the comment <code>// db stuff</code>) to dedicated classes, </li>
<li>bind it all together using <a href="https://github.com/jbogard/MediatR" rel="nofollow noreferrer">MediatR</a>, </li>
<li>validate incoming data with <a href="https://github.com/JeremySkinner/FluentValidation" rel="nofollow noreferrer">FluentValidation</a>.</li>
</ul>

<p>There are plenty of examples that show you how to combine these two, e.g. <a href="https://stackoverflow.com/questions/42283011/add-validation-to-a-mediatr-behavior-pipeline">this Stack Overflow question</a>. Jimmy Bogard also has plenty of examples on his own blog, e.g. <a href="https://lostechies.com/jimmybogard/2014/09/09/tackling-cross-cutting-concerns-with-a-mediator-pipeline/" rel="nofollow noreferrer">this post</a>.</p>

<p>Microsoft also promotes this kind of structure:<a href="https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/microservice-application-layer-implementation-web-api#implement-the-command-and-command-handler-patterns" rel="nofollow noreferrer">"Implement the Command and Command Handler patterns"</a>. (In this case in the context of CQRS, which is something that you also could look into.)</p></li>
<li><p>Don't needlessly abbreviate (why "pass" instead of "password"?).</p></li>
<li><p>Don't use exceptions to control your logic. An invalid password should IMHO not throw an exception, it's an expected result. Even worse it that you seem to be "eating" your exceptions and don't even log them.</p></li>
<li><p>WRT your app's logic, you might want to look at the logic in similar applications, e.g. <a href="http://jasonwatmore.com/post/2018/06/26/aspnet-core-21-simple-api-for-authentication-registration-and-user-management" rel="nofollow noreferrer">"Simple API for Authentication, Registration and User Management"</a>. Also think about things like "how many times can a user try to log in and fail before his account gets locked?" in order to avoid hackers who'll try to access the system by going through large lists of often-used passwords.</p></li>
</ul>
    </div>