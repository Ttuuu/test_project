<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Clicking through to <a href="https://app.codesignal.com/challenge/Dfq9AGTczotsS9hqF" rel="nofollow noreferrer">the source of the puzzle</a>, I observe that the problem statement does not require that you use Python; in fact it offers compiled languages such as C++ as possible alternatives. In the real world, many problems can be solved by <em>switching tools</em> than by trying to hack a solution using the first tool you thought of. You should consider the very real possibility that the puzzle is deliberately <em>not solveable in Python</em> given the constraints imposed by the problem statement.</p>

<p>Here's the mechanical translation to C++17 I mentioned in my previous comment.</p>

<pre class="lang-c++ prettyprint-override"><code>#include &lt;algorithm&gt;
#include &lt;cmath&gt;
#include &lt;map&gt;
#include &lt;set&gt;
#include &lt;tuple&gt;
#include &lt;vector&gt;

long long masterLocksmith(long long k, std::vector&lt;long long&gt; initialState) {
    std::map&lt;long long, long long&gt; occurence;
    for (auto&amp;&amp; i : initialState)
        occurence[i] += 1;

    std::set&lt;long long&gt; num_set(initialState.begin(), initialState.end());
    num_set.insert(0);

    auto best = std::tuple(INFINITY, 0);
    for (auto&amp;&amp; j : num_set) {
        long long score = 0;
        for (auto&amp;&amp; [i, population] : occurence)
            score += std::min(std::abs(i-j), k - std::abs(i-j)) * population;
        if (std::tuple(score, j) &lt; best)
            best = std::tuple(score, j);
    }
    return std::get&lt;1&gt;(best);
}
</code></pre>

<p>On my machine it takes 0.018s to run the 10 provided test cases; the Python version takes 0.073s. Neither takes anywhere close to 4 seconds. :)
OTOH, when I randomly generate a <code>k=10000, n=10000</code> test case and try running <em>that</em>, I see C++ taking 6.8s (and with <code>-O3</code> it takes 1.8s) whereas Python takes 76.1s. That's quite the penalty for using an interpreted language!</p>

<p>You can cut the running time of the naïve C++ code in half again by noticing that <em>iterating a map</em> inside your inner loop involves following a lot of pointers, and that's no good for your L1 cache. Replace the map with a cache-friendly <code>vector</code>, leaving the rest of the code the same:</p>

<pre class="lang-c++ prettyprint-override"><code>std::map&lt;long long, long long&gt; temp;
for (auto&amp;&amp; i : initialState)
    temp[i] += 1;
std::vector&lt;std::pair&lt;long long, long long&gt;&gt; occurence(temp.begin(), temp.end());
</code></pre>

<p>and the running time on my huge random test case drops to 3.5s (0.48s with <code>-O3</code>). I suspect that you could hack a similar cache-friendliness fix in Python, but I have no idea what it would look like; and anyway, if it halved your running time, you'd still be at 38s — a lot more hacks would be needed to get down to the compiled-language level.</p>
    </div>