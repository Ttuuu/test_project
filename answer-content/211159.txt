<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Recursion</strong></p>

<p>[Edit]<br>
In <code>bezier()</code>, the 2 recursive calls to <code>bezier()</code> <em>is</em> inefficient as it exponential grows with O(2<sup>n</sup>) and only O(n<sup>2</sup>) operations are needed.   I suspect  better efficiency (linear) can be had  with a pre-computed weighing of the <code>d[]</code> terms below.</p>

<p>The concern about seg faulting due to excessive recursion would be mitigated with the above improvement.</p>

<p>I also change function <code>bbezier()</code> to code.</p>

<pre><code>long double bezier_alt1(long double t, const uint64_t *points, size_t n) {
  assert(n);
  long double omt = 1.0 - t;
  long double d[n];  // Save in between calculations.

  for (size_t i = 0; i &lt; n; i++) {
    d[i] = omt * points[i] + t * points[i + 1];
  }
  while (n &gt; 1) {
    n--;
    for (size_t i = 0; i &lt; n; i++) {
      d[i] = omt * d[i] + t * d[i + 1];
    }
  }
  return d[0];
}
</code></pre>

<p>[Edit2]</p>

<p>A <a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Explicit_definition" rel="nofollow noreferrer">linear</a>  solution O(n) is possible with O(1) additional memory.</p>

<pre><code>long double bezier_alt2(long double t, const uint64_t *points, size_t n) {
  assert(n);
  long double omt = 1.0 - t;
  long double power_t = 1.0;
  long double power_omt = powl(omt,n);
  long double omt_div = omt != 0.0 ? 1.0/omt : 0.0;

  long double sum = 0.0;
  unsigned long term_n = 1;
  unsigned long term_d = 1;
  for (size_t i = 0; i &lt; n; i++) {
    long double y = power_omt*power_t*points[i]*term_n/term_d;
    sum += y;
    power_t *= t;
    power_omt *= omt_div;
    term_n *= (n-i);
    term_d *= (i+1);
  }
  power_omt = 1.0;
  long double y = power_omt*power_t*points[n]*term_n/term_d;
  sum += y;
  return sum;
}
</code></pre>

<p>Additional linear simplifications possible - perhaps another day.</p>

<hr>

<p>Minor stuff</p>

<p><strong>Use <code>const</code></strong></p>

<p>A <code>const</code> in the referenced data allows for some optimizations, wider application and better conveys code's intent.</p>

<pre><code>// long double bezier(long double t, uint64_t *points, uint64_t n){
long double bezier(long double t, const uint64_t *points, uint64_t n){
</code></pre>

<p><strong>Excessive wide type</strong></p>

<p>With <code>uint64_t n</code>, there is no reasonable expectation that such an iteration will finish for large <code>n</code>.</p>

<p>Fortunately, <code>n</code> indicates the <em>size</em> of the array.  For array indexing and sizing, using <code>size_t</code>.  It is the right size - not too narrow, nor too wide a type.</p>

<pre><code>// long double bezier(long double t, uint64_t *points, uint64_t n){
long double bezier(long double t, uint64_t *points, size_t n){
</code></pre>

<p>For this application, certainly <code>unsigned</code> would always suffice. </p>

<p><strong><code>static</code></strong></p>

<p>Good use of <code>static</code> in <code>static long double bbezier()</code> to keep that function local.</p>

<p><strong>Missing <code>"bezier.h"</code></strong></p>

<p>I'd expect a <code>bezier()</code> declaration in a .h file and implementation in the .c file instead of <code>extern "C" long double bezier(long double, uint64_t *, uint64_t);</code> in main.c</p>

<pre><code>// extern "C" long double bezier(long double, uint64_t *, uint64_t);
#include "bezier.h".
</code></pre>

<p><strong><code>n</code> range check</strong></p>

<p>Perhaps in a debug build, test <code>n</code>.</p>

<pre><code>long double bezier(long double t, const uint64_t *points, uint64_t n){
  assert( n &gt; 0);    // Low bound
  assert( n &lt; 1000); // Maybe a sane upper limit too
</code></pre>
    </div>