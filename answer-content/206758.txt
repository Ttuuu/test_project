<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This wrapper effectively removes some of the available functionality from <a href="https://en.cppreference.com/w/cpp/string/basic_string/stol" rel="nofollow noreferrer"><code>std::stoi()</code></a> because its signature is</p>

<pre><code>int stoi(const std::string&amp; str, std::size_t* pos = 0, int base = 10);
</code></pre>

<p>Because your wrapper does not allow a <code>pos</code> or <code>base</code> argument you cannot use it to give you the number of characters processed (with <code>pos</code>) nor to convert using a different base. <code>std::stoi()</code> provides default values for these arguments so you'd only have to provide them if you need the non-default behavior.</p>

<p>Also, you don't take the <code>std::string</code> argument by const reference like <code>std::stoi()</code> -- the string argument is probably not too expensive to copy in this context but why not accept the argument the same way <code>std::stoi()</code> does?</p>

<p>For completeness, I would also implement the overload of <code>std::stoi()</code> which accepts a <code>std::wstring</code> (and possibly <code>std::stol()</code> and <code>std::stoll()</code>).</p>

<p>I would also avoid the leading underscore, as <a href="https://stackoverflow.com/q/228783/3964927">identifiers with a leading underscore are reserved</a>.</p>

<p>With these suggestions the wrapper would be implemented as</p>

<pre><code>int stoi(const std::string&amp; str, int* p_value, std::size_t* pos = 0, int base = 10) {
    // wrapping std::stoi because it may throw an exception

    try {
        *p_value = std::stoi(str, pos, base);
        return 0;
    }

    catch (const std::invalid_argument&amp; ia) {
        //std::cerr &lt;&lt; "Invalid argument: " &lt;&lt; ia.what() &lt;&lt; std::endl;
        return -1;
    }

    catch (const std::out_of_range&amp; oor) {
        //std::cerr &lt;&lt; "Out of Range error: " &lt;&lt; oor.what() &lt;&lt; std::endl;
        return -2;
    }

    catch (const std::exception&amp; e)
    {
        //std::cerr &lt;&lt; "Undefined error: " &lt;&lt; e.what() &lt;&lt; std::endl;
        return -3;
    }
}
</code></pre>
    </div>