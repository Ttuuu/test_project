<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Return status</h1>
<p>You create this:</p>
<pre><code>typedef int STATUS;
#define ERROR -1
#define OKAY 0
</code></pre>
<p>which is basically a boolean status. Personally, I'd return a straight <code>bool</code>.</p>
<h1>Bug/Not what you mean</h1>
<p>Doing a</p>
<pre><code>result = NULL;
</code></pre>
<p>is changing the local variable (parameter) <code>result</code>. It's not setting the result to NULL. In fact the caller won't probably have a pointer at all, but just a <code>bool</code>, which cannot properly be NULL.</p>
<h1>Shorter version</h1>
<p>I'm not sure this is cleaner, but here I go:</p>
<pre><code>bool is_less_than(struct version * original, struct version *compared, bool *result)
{
    if(original == NULL || compared == NULL || result == NULL)
        return false;
    
    *result = original-&gt;major &lt; compared-&gt;major || original-&gt;major == compared-&gt;major &amp;&amp; (
              original-&gt;minor &lt; compared-&gt;minor || original-&gt;minor == compared-&gt;minor &amp;&amp; (
              original-&gt;build &lt; compared-&gt;build || original-&gt;build == compared-&gt;build &amp;&amp; (
              original-&gt;patch &lt; compared-&gt;patch)));

    return true;
}
</code></pre>
<p>Next time, add a driver/test suite to your question, to ease the life of people answering. This can be one:</p>
<pre><code>int main(void) 
{
    struct version ref      = { 1, 2, 21, 8 };
    struct version lower1   = { 0, 2, 21, 8 };
    struct version lower2   = { 1, 1, 21, 8 };
    struct version lower3   = { 1, 2, 20, 8 };
    struct version lower4   = { 1, 2, 21, 7 };
    struct version equal    = { 1, 2, 21, 8 };
    struct version higher1  = { 2, 2, 21, 8 };
    struct version higher2  = { 1, 3, 21, 8 };
    struct version higher3  = { 1, 2, 22, 8 };
    struct version higher4  = { 1, 2, 21, 9 };

#define TEST(a,b,expect1,expect2)\
    do {\
        bool result1, result2;\
        is_less_than((a), (b), &amp;result1);\
        is_less_than((b), (a), &amp;result2);\
        puts(result1==(expect1) &amp;&amp; result2==(expect2)?"ok":"failed");\
    } while(0)
#define TESTL(a,b) TEST(a,b,true,false)
#define TESTE(a,b) TEST(a,b,false,false)
#define TESTH(a,b) TEST(a,b,false,true)

    TESTL(&amp;lower1, &amp;ref);
    TESTL(&amp;lower2, &amp;ref);
    TESTL(&amp;lower3, &amp;ref);
    TESTL(&amp;lower4, &amp;ref);
    TESTE(&amp;equal, &amp;ref);
    TESTH(&amp;higher1, &amp;ref);
    TESTH(&amp;higher2, &amp;ref);
    TESTH(&amp;higher3, &amp;ref);
    TESTH(&amp;higher4, &amp;ref);

    return 0;
}
</code></pre>
    </div>