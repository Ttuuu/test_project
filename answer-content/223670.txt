<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Class Library</h3>

<blockquote>
  <p>Console-based ATM client as a class library</p>
</blockquote>

<p>I wouldn't call your application a <em>class library</em>. Class libraries provide a set of reusable classes and interfaces. Your interfaces are black boxes that have no usability purpose other than being a trigger for some action that requires user interactive console interop.</p>

<p>For instance,</p>

<blockquote>
<pre><code>public interface IUserBankAccount
{
    void CheckBalance();
    void PlaceDeposit();
    void MakeWithdrawal();
}
</code></pre>
</blockquote>

<p>In a class library, this would be something like:</p>

<pre><code>public interface IUserBankAccount
{
    Balance CheckBalance();
    Transaction PlaceDeposit(DepositRequest deposit);
    Transaction MakeWithdrawal(WithdrawalRequest withdrawal);
}
</code></pre>

<p>Try to refactor your code into several layers (domain, application).</p>

<hr>

<h3>Remarks</h3>

<ul>
<li>Try to adhere to "Seperation of Concerns": don't mix domain flow with user interactive flow. You could even split domain from application flow.</li>
<li>Provide a member with value 0 for any enum. C# specifies the member with value 0 as default value.</li>
<li>Create interfaces based on usability attributes, such as proper arguments and return values, rather than providing <code>void</code> operations that take 0 arguments. </li>
<li>Try to avoid static classes except for some specific situations (<a href="https://stackoverflow.com/questions/241339/when-to-use-static-classes-in-c-sharp">good post about this)</a></li>
</ul>
    </div>