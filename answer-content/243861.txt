<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestion for the Java version</p>
<h2>Always try to pass the size of the maximum size to the Collection / Map constructor when known</h2>
<p>The map has a default size of 16 elements, if you have more elements, the map will have to resize its internal cache. By setting the size, you can prevent the resize and make your code faster.</p>
<p>In this case, you can set the maximum size since it's based on the size of the array + 1.</p>
<pre class="lang-java prettyprint-override"><code>Map&lt;Integer, Integer&gt; prefixSum = new HashMap&lt;&gt;(nums.length + 1);
</code></pre>
<h2>Extract the expression to variables when used multiple times</h2>
<p>In your code, when you check if the key is present, you can extract the value to a variable to reuse it when present.</p>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>if (prefixSum.get(sum - target) != null)
   subarrays += prefixSum.get(sum - target);
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>Integer currentValue = prefixSum.get(sum - target);
if (currentValue != null)
   subarrays += currentValue;
</code></pre>
<p>This will be better, since this will prevent the rechecking and the rehashing in the map.</p>
<h2>Always add curly braces to <code>loop</code> &amp; <code>if</code></h2>
<p>In my opinion, it's a bad practice to have a block of code not surrounded by curly braces; I saw so many bugs in my career related to that, if you forget to add the braces when adding code, you break the logic / semantic of the code.</p>
<p><strong>Before</strong></p>
<pre class="lang-java prettyprint-override"><code>if (prefixSum.get(sum - target) != null)
   subarrays += prefixSum.get(sum - target);
</code></pre>
<p><strong>After</strong></p>
<pre class="lang-java prettyprint-override"><code>if (prefixSum.get(sum - target) != null) {
   subarrays += prefixSum.get(sum - target);
}
</code></pre>
<h2>Extract some of the logic to methods.</h2>
<p>In this case, I suggest to extract the map creation to a method; this will allow to group the logic and make the main code shorter.</p>
<pre class="lang-java prettyprint-override"><code>public int subarraySum(int[] nums, int target) {
   Map&lt;Integer, Integer&gt; prefixSum = buildMap(lengthOfNums + 1);
   //[...]
}

private Map&lt;Integer, Integer&gt; buildMap(int defaultSize) {
   Map&lt;Integer, Integer&gt; prefixSum = new HashMap&lt;&gt;(defaultSize);
   prefixSum.put(0, 1);
   return prefixSum;
}
</code></pre>
    </div>