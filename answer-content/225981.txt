<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>That is an elegant implementation using the hyperoperation. The disadvantage is that a branch on the “level” is needed in each recursive step.</p>

<p>I would implement the addition, multiplication and exponentiation as <em>separate</em> functions. That makes the level parameter obsolete. It is more code but (in my opinion) much clearer:</p>

<pre><code>public static int Evaluate(int left, int right, Operation operation)
{
    if (left &lt; 0) throw new ArgumentOutOfRangeException(nameof(left));
    if (right &lt; 0) throw new ArgumentOutOfRangeException(nameof(right));

    switch (operation)
    {
        case Operation.Addition:
            return Add(left, right);
        case Operation.Multiplication:
            return Mult(left, right);
        case Operation.Exponentation:
            return Power(left, right);
        default:
            throw new ArgumentOutOfRangeException(nameof(operation));
    }
}

static int Add(int a, int b) {
    // a + 0 = a
    if (b == 0) { return a; }

    // a + b = (a + 1) + (b - 1)
    return Add(a + 1, b - 1);
}

static int Mult(int a, int b) {
    // a * 0 = 0
    if (b == 0) { return 0; }

    // a * b = a * (b - 1) + a
    return Add(Mult(a, b - 1), a);
}

static int Power(int a, int b) {
    // a^0 = 1
    if (b == 0) { return 1; }

    // a^b = a^(b-1) * a
    return Mult(Power(a, b - 1), a);
}
</code></pre>

<p>It is also considerably faster than the original implementation. My results (tested with <a href="https://www.mono-project.com" rel="nofollow noreferrer">Mono</a> on a 1.2 GHz Intel Core m5 MacBook) for computing </p>

<pre><code>Expression.Evaluate(7, 6, Operation.Exponentation)
</code></pre>

<ul>
<li>Original code: 9.5 seconds</li>
<li>Above code: 0.05 seconds</li>
</ul>
    </div>