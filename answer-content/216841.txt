<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>code</h1>

<p>Your code itself is clear, with and has only a few improvements</p>

<h2><code>df</code></h2>

<p>your parameter <code>df</code> expects actually a <code>Series</code>, and not a <code>DataFrame</code>, so I would rename this.</p>

<h2>composition</h2>

<p>now you first make an empty <code>DataFrame</code> and then change the values. More clear would be to generate it directly with the correct data:</p>

<pre><code>def future_returns_2(data):
    grid = pd.DataFrame(
        index=data.index, 
        columns=np.arange(len(data)), 
        data=[data.shift(-i).values for i in range(len(data))],
    )
    return grid.divide(data, axis=0) - 1
</code></pre>

<p>Conveniently, this is also about faster</p>

<h1>numpy</h1>

<p>If you really want it a lot faster, you should stay in the <code>numpy</code> space for as long as possible, and only generate the <code>DataFrame</code> at the last possible time.</p>

<p>You can use <code>numpy.roll</code></p>

<pre><code>arr = data.values
result = np.array(
    [np.roll(arr, -i) for i in range(len(arr))],
    copy=False,
) / arr - 1 
</code></pre>

<p>Since <code>numpy.roll</code> doesn't make the lower triangle of the result <code>NaN</code>, You should add this yourself:</p>

<pre><code>mask = np.rot90(np.tri(l,), k=-1)
mask[np.where(1 - mask)] = np.nan
mask
</code></pre>

<blockquote>
<pre><code>array([[ 1.,  1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1., nan],
       [ 1.,  1.,  1., nan, nan],
       [ 1.,  1., nan, nan, nan],
       [ 1., nan, nan, nan, nan]])
</code></pre>
</blockquote>

<p>Now you can deduct this <code>mask</code> instead of <code>1</code></p>

<pre><code>def future_returns_numpy(data):
    arr = data.values
    l = len(arr)

    mask = np.rot90(np.tri(l), k=-1)
    mask[np.where(1 - mask)] = np.nan

    result = np.array(
        [np.roll(arr, -i) for i in range(l)], 
        copy=False,
    ) / arr - mask

    return pd.DataFrame(data = result.T, index = data.index)
</code></pre>

<p>I find this code less clear than the <code>pandas</code> algorithm, but if speed is important, I would use this.</p>

<h1>timings</h1>

<p>For this dummy data</p>

<pre><code>size=1000
np.random.seed(0)
data = pd.Series(
    np.random.random(size), 
    index= pd.date_range(start='20190101', freq='1d', periods = size),
)
</code></pre>

<blockquote>
<pre><code>OP: 10.4 s ± 528 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
future_returns_2: 722 ms ± 29.8 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
future_returns_numpy: 79 ms ± 7.62 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre>
</blockquote>
    </div>