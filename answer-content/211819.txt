<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>#include &lt;stdexcept&gt;
</code></pre>

<p>And either <code>&lt;utility&gt;</code> or <code>&lt;algorithm&gt;</code>, for <code>std::swap</code>.</p>

<hr>

<pre><code>stack(int max) {
</code></pre>

<p>I very strongly recommend you make this constructor <code>explicit</code>. Right now it's a non-explicit (implicit) conversion, which means you're permitting your users to convert integers to stacks implicitly:</p>

<pre><code>void foo(stack&lt;int&gt; s);
void bar() {
    foo(42);  // compiles and calls foo with stack&lt;int&gt;(42)
}
</code></pre>

<p>The general rule (at least for user codebases) is "make everything <code>explicit</code> unless you have some specific reason that it <em>needs</em> to be implicit." So you should make your <code>node</code> constructor <code>explicit</code> as well.</p>

<p>(I say "at least for user codebases" because the STL itself doesn't follow that principle — partly because the principle wasn't understood in 1998, and partly due to differences of opinion among the authors. "STL style" would be to make <code>stack(int)</code> explicit because it's a one-argument constructor, but leave all zero- and two-argument constructors implicit. I recommend against doing that.)</p>

<hr>

<pre><code>int max = -1; // -1 so isFull() == false when default constructor used
</code></pre>

<p>This comment doesn't help me understand. I would understand <code>INT_MAX</code>, but <code>-1</code> just looks like it's breaking the class invariant enforced by the one-argument constructor:</p>

<pre><code>if (max &lt;= 0) throw std::out_of_range("stack size must be &gt; 0");
</code></pre>

<p>Looking at these two lines in isolation, actually, I briefly wondered "wait, doesn't that <em>always</em> throw? You don't initialize <code>max</code> before that <code>if</code>, so it would have its default value, which <em>is</em> less than zero..." But then I realized that the name <code>max</code> here is overloaded: the <code>max</code> in the <code>if</code> statement is testing the <em>function parameter</em>, not the <em>data member</em>.</p>

<p>To eliminate confusion about name overloading, I strongly recommend that you sigil each of your data members with a trailing underscore: <code>max_</code>, <code>size_</code>, <code>head_</code>.
Then you don't have to write <code>this-&gt;</code> when you access a member:</p>

<pre><code>this-&gt;max = max;
</code></pre>

<p>can become just</p>

<pre><code>max_ = max;
</code></pre>

<p>You don't need the disambiguating <code>this-&gt;</code>, because there's no confusion anymore about which <code>max</code>/<code>max_</code> you mean.</p>

<hr>

<pre><code>stack(stack const&amp; rhs) :
    head(copyList(rhs.head)),
    size(rhs.size),
    max(rhs.size) {}
</code></pre>

<p>Do you see the typo?</p>

<p>Write some unit tests for your code! In particular, now that you've spotted a bug, <em>write a unit test that would have caught this bug</em> and commit it as part of the bugfix. That's called a "regression test."</p>

<hr>

<pre><code>stack&amp; operator = (stack const&amp; rhs)
{
    stack tmp(rhs);
    swap(tmp);

    return *this;
}
</code></pre>

<p>FYI, the copy-and-swap idiom can be written more concisely if you want to:</p>

<pre><code>stack&amp; operator=(stack const&amp; rhs)
{
    stack(rhs).swap(*this);
    return *this;
}
</code></pre>

<hr>

<pre><code>const void pop() {
</code></pre>

<p>The <code>const</code> here <a href="https://quuxplusone.github.io/blog/2019/01/03/const-is-a-contract/" rel="noreferrer">is useless</a>; remove it. (I wonder if it was a mistake for something similar — <code>void pop() const</code>? <code>constexpr void pop()</code>? but neither of those makes sense either.)</p>

<hr>

<pre><code>T peek() {
</code></pre>

<p>OTOH, <em>this</em> method should be const:</p>

<pre><code>T peek() const {
    if (head == nullptr) throw std::underflow_error("cannot get item from empty stack");
    return std::as_const(head-&gt;data);
}
</code></pre>

<p>I threw in an <code>as_const</code> just to illustrate complete paranoia. We don't know what type <code>T</code> is, right? So when you construct the return value <code>T</code>, which constructor do you want to call — <code>T(T&amp;)</code> or <code>T(const T&amp;)</code>? Write a unit test for a type <code>T</code> where it makes a difference, and see what happens.</p>

<hr>

<p><code>getSize()</code>, <code>isFull()</code>, and <code>isEmpty()</code> should all be <code>const</code> methods as well.</p>

<hr>

<pre><code>void swap(stack&amp; other) noexcept
</code></pre>

<p>Good! You also do the <code>using std::swap;</code> dance correctly — although, since you're not swapping anything but ints and pointers, the dance is unnecessary in this case, but hey it's good practice.</p>

<p>You did forget, though, that if you want the <code>using std::swap;</code> dance to work for anyone else who <em>uses</em> your <code>stack</code> class, you'll need to provide that free ADL function <code>swap</code>. So we add an inline friend:</p>

<pre><code>friend void swap(stack&amp; a, stack&amp; b) noexcept {
    a.swap(b);
}
</code></pre>

<p>Now</p>

<pre><code>using std::swap;
swap(redstack, bluestack);
</code></pre>

<p>will be as efficient as possible.</p>

<hr>

<p>Consider adding move semantics to your class — <code>stack(stack&amp;&amp;) noexcept</code>, <code>stack&amp; operator=(stack&amp;&amp;) noexcept</code>, <code>void push(T&amp;&amp;)</code> (or just <code>void push(T)</code> at that point). I assume you left them out on purpose for this simple example.</p>

<hr>

<p>Your <code>copyList</code> is recursive. This could blow your stack if you're copying a very long list. You successfully eliminated the recursion from your destructor — why not eliminate it here too?</p>

<pre><code>node* copyList(node* l)
</code></pre>

<p>Since this member function doesn't need the <code>this</code> pointer for anything, it should be marked <code>static</code>. And it wouldn't hurt to add <code>const</code> to the node you don't intend to modify, just for a tiny bit of self-documentation:</p>

<pre><code>static node *copyList(const node *l)
</code></pre>
    </div>