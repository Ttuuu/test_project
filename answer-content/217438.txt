<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After the first great review by Roland Illig, I could add a few comments on the second code revision, in order of appearance:</p>

<ul>
<li><p><code>#include &lt;string.h&gt;</code> - not required now, and could be removed.</p></li>
<li><p><code>define ALLOCATION_ERROR 1</code>:<br>
Rather than preprocessor macros, consider using a named enum. With an enum, you get better diagnostics and type checking from the compiler, plus the error codes are grouped into one named construct:</p>

<pre><code>enum ERROR_CODES
{
  ALLOCATION_ERROR = 1,
  FILE_ERROR = 2,
  OTHER_ERROR = 3
};
</code></pre>

<p>As a bonus, you get rid of the unused macro warning.</p></li>
<li><p>It's best to avoid single-line if and for blocks, which could cause subtle and hard to find bugs. I.e.:</p>

<pre><code>for(int i=0;i&lt;n;++i)
    fputc(c,output_file);
</code></pre>

<p>is better written as:</p>

<pre><code>for(int i=0;i&lt;n;++i)
{
    fputc(c,output_file);
}
</code></pre></li>
<li><p>You could early exit the <code>emit_difference</code> function after the <code>if(difference==0)</code> check. Then, you could reduce the indentation level of the code that follows. This technique comes very handy when you have to check for several conditions before doing the actual work. I.e.,</p>

<pre><code>if(difference==0)
    fputc('.',output_file);
else{
    // ...
}
</code></pre>

<p>May turn into:</p>

<pre><code>if(difference==0)
{
    fputc('.',output_file);
    return;
}

// Code of the else block
</code></pre></li>
<li><p>Style comment: consider adding newlines between your functions, to create a clear separation between them.</p></li>
<li><p><code>inline</code>: I second Ronald in that the inline keyword may be safely removed. Since the program is a single file (and more generally, all function declarations are visible to the compiler), it will willingly inline them.</p></li>
</ul>
    </div>