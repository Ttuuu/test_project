<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your first step is to wind your thinking back a few steps and re-approach your code with a fresh line of thinking. Looking at your code, you say "to detect the real file type of a given file" but you have written code to detect a JPEG(*) file. </p>

<p>There is a subtlety here, but once you have mastered that you can approach complex problems with more confidence. The subtlety is you want a generic approach, but your thinking at the moment is constrained to and focussed on a particular example - your solution is tailored to that example. More specifically, your current code answers the question "Is this a JPEG file?", you want your solution to answer the question "What is the file type of this file?".</p>

<h2>Signatures</h2>

<p>You define your signatures early. This is a good approach because it lends itself to a future implementation where you can import a tailored list of signatures.</p>

<p>However, you are currently using separate arrays to store the signature data. The use of multiple arrays is going to be inefficient for any improvements or even for checking multiple files/filetypes.</p>

<p>The use of static arrays implies looping through all arrays. In a small implementation this is not that noticeable, but if you have a hundred arrays with a size ranging from 3 to 15 bytes, you will start to notice a performance hit. Basically, you will be continuing to check arrays that you have already eliminated as being relevant to your quest.</p>

<p>A suggested way to improve the performance initially is to put the signatures in a collection (e.g. <code>List(Of OrderedList(Of Byte))</code>). This way, once you eliminate a signature you can remove it from the collection, thus quickly removing the unnecessary checks with a commensurate improvement in performance.</p>

<p>The use of the inner collection removes the need to check array lengths, but having a <code>List(Of Array)</code> could also work.</p>

<h2>Looping</h2>

<p>You manually loop through your array. This is always a simple first approach and reflects the basic solution to identifying a signature. Your code is set up to first loop through the first signature and I assume you were thinking of duplicating this kind of loop for the other signatures.</p>

<p>Sitting here, I can think of two simple approaches:</p>

<ul>
<li>Looping through the file bytes individually, removing signatures from the collection as they fail</li>
<li>Looping through the signatures and doing an array check against the first x bytes of each file</li>
</ul>

<p>Intuitively, I think the second option will be less efficient but I could be wrong.
Some example code (not guaranteed to be compilable):</p>

<pre><code>For Each file As String In files
    file_data = IO.File.ReadAllBytes(file)
    For signatureIterator = MasterSignatureList.Count - 1 to 0 Step -1
    ' Declare and implement as required
    ' Used a For loop going backwards because in this example we are going to remove elements from the collection
        signature = MasterSignatureList(signatureIterator) ' the shorter text makes my example easier to read.
        If file_data.Length &lt; signature.Length then
            MasterSignatureList.Remove signatureIterator
        Else
            If Not CheckArrayIsSame(file_data.Resize(signature.length), signature) then
            ' Some function to check arrays are the same will be required
            ' The native .Resize actually changes the original array, so you should make a copy before running .Resize. I was being lazy.
                MasterSignatureList.Remove signatureIterator
            End If
        End if
    Next signatureIterator
' **** do something here with the remaining signatures as these are the valid ones for that particular file!
Next file
</code></pre>

<p>And an example for the first option</p>

<pre><code>For Each file As String In files
    file_data = IO.File.ReadAllBytes(file)
    For each signature in MasterSignatureList
        if filedata.Length &lt; signature.Length Then MasterSignatureList.Remove signature ' Obviously wrong
    Next signature 
    For signatureIterator = 0 to file_data.Length ' we should exit the loop before getting to the end of most files!
        signatureCheck = false
        For each signature in MasterSignatureList
            If signatureIterator &lt;  signature.Length Then ' retains signatures that have already passed
                signatureCheck = true ' still some signatures to check
                If file_data(signatureIterator) &lt;&gt; signature(signatureIterator) Then
                    MasterSignatureList.Remove signature ' signature does not match
                End if
            End if
        Next signature
        If MasterSignatureList.Empty or Not signatureCheck then Exit For ' exit if nothing left to check
    Next signatureIterator
' **** do something here with the remaining signatures as these are the valid ones for that particular file!
Next file
</code></pre>

<p>In both of those examples, the signatures remaining in the signature list are the potential file types. In these examples, the possibility of multiple signatures passing is allowed - how you handle that is up to your programming logic. </p>

<p>As already noted - I have not tested the above code, so also check for the dreaded Jedi array error condition (off-by-1) in my iterations.</p>

<p>(*) The correct nomenclature is JPEG, the file extension in traditional 8.3 style is ".jpg". Why this is so, I leave up to your own research.</p>
    </div>