<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>self.date = str(date)
</code></pre>

<p>This is a pet peeve of mine. Stringly-typed variables are usually a bad idea. If you receive a datetime object, you should usually keep it as datetime until you actually need it to be a string.</p>

<pre><code>Load_Order_Lat_Long_Date_Zone_Data
</code></pre>

<p>If at all possible, shorten this method name. Also, methods are lowercase by convention.</p>

<pre><code>self.distinct = set([str(row.Requirements) + ' ' + str(row.Route_Date) for row in self.order_data])
</code></pre>

<p>Here you make a generator, construct a list and then convert it to a set. Skip the list - the <code>set</code> constructor can accept generators directly. Better yet, if you're in a sane version of Python, just use a set literal (and use a format string):</p>

<pre><code>self.distinct = {'%s %s' % (row.Requirements, row.Route_Date) for row in self.order_data}
</code></pre>

<p>Your <code>container = []</code> / <code>container.append()</code> loop can be replaced by proper use of a generator. Same with <code>out</code>.</p>

<p><code>latlng</code> does not (and should not) be materialized to a list. It should be left as a generator, since you only iterate over it once.</p>

<p>This:</p>

<pre><code>container.append((i[0][0][0], i[0][0][1], i[0][0][2], i[0][0][4], i[0][0][5], i[0][0][6]))
</code></pre>

<p>can be:</p>

<pre><code>container.append(tuple(i[0][0][j] for j in (0, 1, 2, 4, 5, 6)))
</code></pre>
    </div>