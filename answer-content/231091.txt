<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use <code>std::filesystem::path</code> for paths</h1>

<p>C++17 gives you a canonical type to represent filesystem paths, so use that. This avoids having to create templates of all your functions. It also allows you to combine paths together in a portable way:</p>

<pre><code>void folderLink(std::filesystem::path &amp;setDisplayName, std::filesystem::path &amp;getDisplayName)
{
    getDisplayName = setDisplayName / getDisplayName;
    ...
}
</code></pre>

<h1>Use <code>std::filesytem::create_directories()</code></h1>

<p>This function will create the desired directory <em>plus</em> all its parent directories if they do not yet exist. Also, it will not report an error if the desired directory already exists. So you could write:</p>

<pre><code>void foldersystem()
{
    std::filesystem::path folder_Documents = ...; // get known folder as a path here

    std::filesystem::create_directories(folder_Documents / "Microsoft" / "XP" / "Alpha");
    std::filesystem::create_directories(folder_Documents / "Microsoft" / "XP" / "Beta");
    std::filesystem::create_directories(folder_Documents / "Microsoft" / "Win7" / "Alpha");
    std::filesystem::create_directories(folder_Documents / "Microsoft" / "Win7" / "Beta");
}
</code></pre>

<h1>Don't infinitely retry on errors</h1>

<p>You are using a very weird pattern with infinite <code>for</code>-loops:</p>

<pre><code>for(;;) {
    if (something_fails())
        continue;

    break;
}
</code></pre>

<p>If the thing you are trying to do fails, you are retrying it indefinitely. But if it fails once, why do you expect it will work the next time? The right thing to do at this point is just to return an error.</p>

<h1>Prefer returning results instead of using output parameters</h1>

<p>If a function returns something, <code>return</code> that instead of passing a reference to an output parameter. Combined with the use of <code>std::filesystem::path</code>, <code>knownFolder()</code> then becomes:</p>

<pre><code>std::filesystem::path knownFolder(KNOWNFOLDERID fodlerID)
{
    PWSTR pszFolderPath;

    if (FAILED(SHGetKnownFolderPath(folderID, 0, nullptr, &amp;pszFolderPath)))
        throw std::runtime_error("Could not get known folder");

    std::filesystem::path result = pszFolderPath;
    CoTaskMemFree(pszFolderPath);
    return result;
}
</code></pre>

<h1>Use an array of paths if you have many of them</h1>

<p>If you have many paths to create, then store them in an array, and use a <code>for</code>-loop to create them all. Here is an example:</p>

<pre><code>static const std::filesystem::path required_subdirectories[] = {
    "XP/Alpha",
    "XP/Beta",
    "Win7/Alpha",
    "Win7/Beta",
};

void foldersystem()
{
    std::filesystem::path folder_Documents = ...; // get known folder as a path here

    for (auto &amp;subdirectory: subdirectories) {
            std::filesystem::create_directories(folder_Documents / "Microsoft" / subdirectory);
    }
}
</code></pre>

<p>Note that using the forward slash is perfectly fine here; the <code>std::filesystem</code> functions understand this as a directory separator.</p>
    </div>