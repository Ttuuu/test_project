<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your solution is pretty much optimized using Python constructs. If you want to gain speed, you'd have to loop in C rather than in Python. This is possible by using the following code:</p>

<pre><code>class Solution:
    def twoSum(self, numbers, target):
        bounds = {target - value: index for index, value in enumerate(numbers)}
        return next(((index, bounds[value]) for index, value in enumerate(numbers) if value in bounds), None)
</code></pre>

<p>But this solution has the drawback to always iterate at least once over the whole input, meaning it is \$\mathcal{O}(n)\$ best case; whereas your solution is \$\mathcal{O}(n)\$ worst case and \$\mathcal{O}(1)\$ best case. So this solution should be slower when the answer couple is near the beginning of the array.</p>
    </div>