<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Overkill</h1>

<p>This program is using dynamite to crack nuts. Choosing one operation of four is a very simple problem, easily handled with an <code>enum</code> and a <code>switch</code>. Indeed, your program already contains those, so the strategy classes are just unnecessary complexity.</p>

<p>I'm going to ignore that and review this program as just an exercise in using strategies. But if you were actually trying to solve a problem, this would be a horribly complex design.</p>

<p>Unfortunately, this makes it hard to judge how well you're using strategies, because you aren't using them <em>for</em> anything. It's also hard to advise how to simplify the program, because <em>everything</em> is unnecessary complexity.</p>

<h1>How to use strategies</h1>

<p>The Design Patterns movement is not a good guide to how to structure programs. Most of the techniques it teaches are rather specialized, and strategies are one of those. They're a useful tool to know, but they're only one tool of many, and you won't use them regularly.</p>

<p>When implementing strategies, you should <strong>prefer λ to custom classes</strong>. Fall back to classes only if λ isn't available or won't work — for example, if the strategy has more than one operation, or needs to be saved to a file.</p>

<p>Using λ is also a better way to learn to use strategies. If you're comfortable with first-class functions, and use them without thinking they're a Fancy Design Pattern, then strategies look like an obvious (but clumsy) variation, so it will be easy to use them correctly.</p>

<p>If you aren't already comfortable with λ and functional programming, that's <em>far</em> more important to learn than design patterns.</p>

<h1>Repetition</h1>

<p>Now for some actual code review.</p>

<p>The three private members of <code>Operation</code> (<code>m_Result</code>, <code>m_Value1</code>, <code>m_Value2</code>) are unused. And they're private, so the subclasses can't use them either, and must redefine them! If they're part of <code>Operation</code>'s interface, they should be <code>public</code> or at least <code>protected</code>.</p>

<h1>Unnecessary state</h1>

<p>There's no reason for the strategies to store <code>m_Value1</code>, <code>m_Value2</code> or <code>m_Result</code>. <code>Calculate</code> can simply take them as arguments and return the result. The interface could be like this:</p>

<pre><code>class Operation {
    virtual int Calculate(int a, int b) = 0;
};
</code></pre>

<p>Similarly, <code>Test::SetOperation</code> modifies <code>this</code> for no good reason. Is this just to have an excuse to store an <code>Operation</code> somewhere? It could simply return an <code>Operation</code>, or it could perform the operation directly without storing it anywhere. Then there's no reason for <code>Test</code> to be a class at all. It could simply be a function.</p>

<h1>C++</h1>

<p>Don't make a habit of using <code>std::endl</code>: it flushes the stream, which is seldom what you want.</p>

<p><code>Test</code> leaks its <code>Operation</code>s. This is harmless in a toy program, but you should habitually use <code>std::unique_ptr</code> for owned data, so you don't have leaks when they matter.</p>

<h1>Superficial details</h1>

<p>I see from <code>stdafx.h</code> that you're writing in Microsoft style, so I won't complain about the <code>m_</code> prefixes.</p>

<p>There are a lot of unnecessary blank lines. I don't know if these are also a deliberate stylistic feature, but they're usually thought to make the program harder to read, because you can't see as much of it at once.</p>

<p>I suppose the <code>std::cin &gt;&gt; x</code> at the end is a hack to make the program's window not disappear instantly? You shouldn't have to do this. If you're running the program from an IDE, it should have an option to fix this for you; if you run it from the command line, this problem should not arise.</p>

<h1>A better strategy problem</h1>

<p>If you'd like a better problem to practice using strategies, try implementing a game like <a href="https://en.wikipedia.org/wiki/Fairy_chess_piece" rel="noreferrer">fairy chess</a>, where there are a wide variety of pieces with unique moves. Don't make a subclass for each one; instead, the constructor should take a strategy (represented as a function) to generate the piece's possible moves. The usage might look like this (with functions that return move generators):</p>

<pre><code>Piece camel("camel", "L", Leaper(1, 3));
Piece rook("rook", "R", Rider(1, 0));
</code></pre>

<p>If that's too complicated or doesn't sound fun, try a simpler game with a variety of pieces or cards or actions, where each one takes a function (not a class) to calculate what it does.</p>
    </div>