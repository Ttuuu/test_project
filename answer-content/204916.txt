<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This can certainly be optimized.
Your algorithm works in loops that iterate over all permutations, placing one letter each time.
Let us take a different approach: </p>

<p>The number of output combinations can be calculated in advanced: multiply the number of letters for all input numbers. in yout example (<code>"23"</code>) the calculation is<br>
number 2 has 3 letters<br>
number 3 has 3 letters<br>
output combinations will be 3*3=9  </p>

<p>Furthermore, we can calculate which letter will be placed in each combination based on the combination index. if we assume combination index goes from 0 to 8:<br>
for number 2 (first number in input)<br>
- combinations 0-2 will contain 1st letter<br>
- combinations 3-5 will contain 2nd letter<br>
- combinations 6-8 will contain 3rd letter<br>
for number 3 (2nd number in input)<br>
- combinations 0,3,6 will contain 1st letter<br>
- combinations 1,4,7 will contain 2nd letter<br>
- combinations 2,5,8 will contain 3rd letter  </p>

<p>so the formula for letter placement is based on the combination index, the position of the number in the input and the position of the letter in the letters-of-number String. </p>

<p>the complexity of this algorithm is o(n*m) where n is number of input letters and m number of output combinations.</p>

<p>one comment regarding the code: You use the <code>results</code> as a <code>Queue</code>.  the <code>LinkedList</code> is an implementation of this interface. For clarity sake, the variable should be defined with the type that states its usage. This is also true for the <code>map</code> variable (should be defined as <code>Map</code>)</p>
    </div>