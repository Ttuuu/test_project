<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I used your class, and added 2 methods to simplify usage in my unit tests:</p>

<pre><code>    public void AttachLogListener()
    {
        memAppender = new MemoryAppender();
        BasicConfigurator.Configure(memAppender);
    }

   public string GetMessages()
    {
        if (memAppender == null)
        {
            throw new InvalidOperationException("The listener was not attached. Make sure you call AttachLogListener() before writing to log.");
        }
        var events = memAppender.GetEvents();
        string logMessage;
        using (var writer = new StringWriter())
        {
            foreach (var ev in events)
            {
                ev.WriteRenderedMessage(writer);
            }
            logMessage = writer.ToString();
        }
        return logMessage;
    }
</code></pre>

<p>In my test, I didn't care anything about the message format, just wanted to ensure that the expected error was logged, and contained certain pieces of text.  So my unit test looked like this:</p>

<pre><code>    [Test]
    public void TestOnConnectErrorLogs()
    {
        var listener = new Log4NetListener();
        listener.SetupAppender();

        const string errMsg = "Failed to connect!!";
        client.onConnectError(errMsg);

        var msg = listener.GetMessages();
        Assert.IsNotNull(msg, "found logged message");
        Assert.IsTrue(msg.Contains(errMsg), "logged root error. expected={0}, was={1}", errMsg, msg);
    }
</code></pre>

<p>Some additional important points:</p>

<ol>
<li><p>There needs to be a check for empty list in the <code>AttachLogListener</code> method. If the programmer uses a bad appender name, he gets <code>System.InvalidOperationException : Sequence contains no elements</code> error. It is better to check that condition that should check and throw Exception with a helpful message.</p></li>
<li><p>Because the Repository is static, every time this class is used, it will create and add a new MemoryAppender.  This is kind of a memory leak. There should be a clean up method to remove the Appender when done.  </p></li>
</ol>

<p>Example code to address the above 2 points:</p>

<pre><code>public class Log4NetListener : IDisposable
{   
    // Handy reference to Log4Net Root Logger
    private static Logger Root
    {
        get { return ((Hierarchy)LogManager.GetRepository()).Root; }
    }

    /// &lt;summary&gt;
    /// Attaches the listener so it would capture any log messages written.
    /// &lt;/summary&gt;
    /// &lt;param name="appenderName"&gt;Name of Appender which has a PatternLayout to use for writing test log messages&lt;/param&gt;
    /// &lt;exception cref="InvalidOperationException"&gt;if no Appender exists with specified name&lt;/exception&gt;
    public void AttachLogListener(string appenderName)
    {
        var appender = LogManager.GetRepository().GetAppenders().Where(a =&gt; a.Name == appenderName).ToList();
        if (appender.Count == 0)
        {
            throw new InvalidOperationException(string.Format("Unable to find Appender named [{0}]! unable to setup Appender...", appenderName));
        }
        var patternLayout = ((PatternLayout)((AppenderSkeleton)(appender.First())).Layout);
        CreateAppender(patternLayout);

    }
</code></pre>

<p>Also, as someone suggested above, handling the setup in constructor, or else perhaps adding a static method to make setup (and teardown) one-liners would be nice.</p>

<p>There is more that could be done to make this class useful.  I have a similar utility class in Java, and added helper methods to select by <em>Level</em>, or using regexp matching.  (These are helpful where a test could generate many log messages, and you just want to pick out a few.)</p>

<p>The version of this that I ended up using can be downloaded from <a href="https://pastebin.com/dkPtAmmS" rel="nofollow noreferrer">here</a>. </p>

<p>In summary, I think this was very good starting point, and easy to use.</p>
    </div>