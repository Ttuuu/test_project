<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>In <code>getMean()</code>, you don't need to call <code>count()</code> twice.</p>

<pre><code>public static function getMean($array) {
    return $array ? array_sum($array) / count($array) : ConstEQ::NEAR_ZERO_NUMBER;
}
</code></pre></li>
<li><p>In <code>getNormalize()</code>, instead of subtracting <code>$max</code> from <code>$min</code> twice, I think it is easier to read <code>$max != $min</code>.  Also, neither branch that calculates <code>$normalized</code> needs the outermost parentheses; the Order of Operations will ensure correct evaluation.</p></li>
<li><p>From PHP5.6+, <code>pow()</code> can be replaced with <code>**</code> syntax.  <a href="https://www.php.net/manual/en/function.pow.php" rel="nofollow noreferrer">https://www.php.net/manual/en/function.pow.php</a>  This is more of a personal preference thing.  There is something to be said for the clarity of <code>pow()</code>.</p></li>
<li><p>In <code>getStandardDeviation()</code>, you are counting the input array over and over.  You should ask php to count it once and save that value to a variable for future usage.</p></li>
<li><p>In <code>getCovariance()</code>, you are slicing the two arrays to a common length before iterating.  This allows you to more simply use a <code>foreach()</code> versus a <code>for()</code> which relies on a <code>count()</code> call.  Also I don't recommend <em>hiding</em> <code>return</code> on the right hand side of a <code>if</code> condition; just write it on the next line.  <code>$difA</code> and <code>$difB</code> are single-use variables, so you could calculate everything after <code>$add +=</code>.</p></li>
<li><p>In <code>getSkewness()</code>, you can simplify <code>pow($variance, 3 / 2.0)</code> to <code>pow($variance, 1.5)</code>.</p></li>
<li><p>In <code>sumProductMeanDeviation()</code>, you are calling <code>count()</code> to set up <code>for()</code>, otherwise it is not needed.  Again, just use a <code>foreach()</code>.</p>

<pre><code>foreach ($arr1 as $i =&gt; $notused) {
    $sum += ST::productMeanDeviation($arr1, $arr2, $i);
}
</code></pre></li>
<li><p>In <code>productMeanDeviation()</code>, you don't need the outermost parentheses. </p></li>
<li><p>As @KIKOSoftware mentioned, <code>mean()</code> and <code>average</code> seem like mergable methods.  I'll 2nd his advice to store reusable variables in the class so that php doesn't need to repeatedly count or sum anything more than once.  DRY principle.  This has been repeated in several reviews.  We would like you to implement the advice from previous reviews before posting new scripts for review so that we don't have to repeat the same advice to the same user.</p></li>
</ul>
    </div>