<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Const methods</h2>

<p>These:</p>

<pre><code>    int posX() { return foodX; };
    int posY() { return foodY; };
// ...
    int posX() { return headX; };
    int posY() { return headY; };
    int len() { return length; };
</code></pre>

<p>don't modify anything in <code>this</code>, so make them <code>const</code>:</p>

<pre><code>    int posX() const { return foodX; };
    int posY() const { return foodY; };
</code></pre>

<h2>Setters</h2>

<p>This:</p>

<pre><code>void Refresh(int x, int y);
</code></pre>

<p>is unusual. You're forcing the user to update both <code>x</code> and <code>y</code> at the same time. In a different universe where you care about atomic interactions in a multithreaded application, this might matter, but here it doesn't. Effectively since you have unlimited read/write ability to this class, it's not even worth making individual setter methods - just boil this down to a <code>struct</code> with two public member variables and be done with it.</p>

<h2>Nomenclature</h2>

<pre><code>    bool Game_Over;
</code></pre>

<p>is styled to look like a method but it should actually match the capitalization of your other member variables (i.e. lowercase).</p>

<p><code>Game_State</code> would make sense as a name if you were returning an <code>enum</code>, but since you aren't: it should probably be called something like <code>isGameOver()</code>.</p>

<h2>Characters instead of strings</h2>

<p>This</p>

<pre><code>std::cout &lt;&lt; "O";
</code></pre>

<p>should be</p>

<pre><code>std::cout &lt;&lt; 'O';
</code></pre>

<h2>Unused includes</h2>

<p>Remove</p>

<pre><code>#include &lt;iostream&gt;
</code></pre>

<p>from your <code>main.cpp</code>.</p>
    </div>