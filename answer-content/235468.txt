<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice code, it does what it should and it is short. But it can be improved :)</p>

<hr>

<p>General python tips:</p>

<ul>
<li>Use type annotation. You can look at the type annotation of <code>Sam Stafford</code> in the previous answer, it will make your code more readable and will prevent bugs.</li>
<li>Remove redundant imports. Is <code>numpy</code> really needed here? You can use a simple <code>abs</code>.</li>
<li>Don't use lambda functions. According to <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> <code>"do not assign lambda expression, use a def"</code>, there are several reasons why, mostly due to readability.</li>
</ul>

<hr>

<p>Optimisation tips:<br>
Note these tips contradict each other. Choose one and use it but you cannot use both.</p>

<ul>
<li>If <code>N</code> is the number of elements until convergence, and <code>a</code> and <code>b</code> is the calculation time of each function (Assuming equal for every <code>x</code>) The time complexity now is <code>O(N ^ 2 * a * b)</code>, for each <code>i</code> you calculate the entire series over and over.<br>
If you will use <a href="https://en.wikipedia.org/wiki/Exponential_search" rel="nofollow noreferrer">exponential search</a> you can reduce the complexity to <code>O(N * log N * a * b)</code>. Which will be much much faster!</li>
<li>Readability vs. Runtime. If the readability is important to you you can ignore this tip. You can replace the recursion with a <a href="https://en.wikipedia.org/wiki/Dynamic_programming" rel="nofollow noreferrer"><code>dynamic programing</code></a> approach, this will remove the recursion and the iteration over <code>i</code>, the time complexity will be <code>O(N * a * b)</code> but you will need to rewrite a lot of the code.</li>
</ul>
    </div>