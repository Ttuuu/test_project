<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General</h1>

<ol>
<li>Represent expressive game elements in extra classes (Players, Rock/Scissor/Paper, Result, Situation, ...) for OOP</li>
<li>Try to reduce case handling, use proper let structures work for you</li>
<li>Follow <a href="http://www.oracle.com/technetwork/java/codeconventions-135099.html" rel="nofollow">JAVA conventions in Naming</a></li>
</ol>

<h1>Code</h1>

<p>I looked after a solution with less if statements and more expressive artifacts. I came up with this:</p>

<h2>Introduce a class "Situation"</h2>

<p>This represents a game situation with the choice of each player:</p>

<pre><code>public class Situation {


    private final String choice1;
    private final String choice2;


    public Situation(String choice1, String choice2) {
        this.choice1 = choice1;
        this.choice2 = choice2;
    }


    @Override
    public int hashCode() {
        return choice1.hashCode() * choice2.hashCode();
    }


    @Override
    public boolean equals(Object obj) {

        boolean equals = false;

        if (obj instanceof Situation) {

            Situation that = (Situation) obj;

            equals =    this.choice1.equals(that.choice1) 
                     &amp;&amp; this.choice2.equals(that.choice2);

        }

        return equals;
    }


    public Situation invert() {
        return new Situation(choice2, choice1);
    }


}
</code></pre>

<p>It's a value object so recognize the immutability and hashcode/equals overriden.</p>

<p>One other thing is the invert method which is a convenience method to express the other side around.</p>

<p>You may consider to use "real" objects to represent "Rock", Scissor" and "Paper" instead of String-Objects.</p>

<h2>Introduce class "Result"</h2>

<p>It represents the outcome of one round.</p>

<pre><code>public enum Result {

    TIE, PLAYER1_WINS, PLAYER2_WINS

}
</code></pre>

<h2>Evaluate all possible situations</h2>

<p>You can now easily provide a Set of possible winning situations to evaluate the winner.</p>

<pre><code>public class RockScissorPaper {


    private Set&lt;Situation&gt; winSituations;


    public RockScissorPaper() {

        this.winSituations = new HashSet&lt;&gt;();

        this.winSituations.add(new Situation("Rock", "Scissor"));
        this.winSituations.add(new Situation("Scissor", "Paper"));
        this.winSituations.add(new Situation("Paper", "Rock"));

    }


    public Result evaluateWinner(Situation situation) {

        if (this.winSituations.contains(situation)) {
            return Result.PLAYER1_WINS;
        } else if (this.winSituations.contains(situation.invert())) {
            return Result.PLAYER2_WINS;
        } else {
            return Result.TIE;
        }

    }


    public static void main(String[] args) {

        RockScissorPaper rockScissorPaper = new RockScissorPaper();

        System.out.println(rockScissorPaper.evaluateWinner(new Situation("Rock", "Rock"))); // --&gt; TIE
        System.out.println(rockScissorPaper.evaluateWinner(new Situation("Scissor", "Paper"))); // --&gt; PLAYER1_WINS
        System.out.println(rockScissorPaper.evaluateWinner(new Situation("Rock", "Paper"))); // --&gt; PLAYER2_WINS

    }


}
</code></pre>
    </div>