<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Cleaning the user input validation</h1>
<ul>
<li>Remove <code>continue</code> because in both cases the loop will continue anyway, only <code>break</code> will stop it, so do not worry.</li>
<li>Do not make the user think: <code>number = int(input("Enter number:"))</code>: which number to enter? Sure you know, but messages are intended to communicate with the user, so do not make him guess what you want, but be clear and precise with him.</li>
</ul>
<h1>Cleaning <code>collatz()</code></h1>
<ul>
<li>Please apply the <a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="noreferrer">naming conventions</a> and <a href="https://www.python.org/dev/peps/pep-0008/#indentation" rel="noreferrer">indentation</a> rules.</li>
<li>Leave space between operators and their operands (example: <code>newNumber=3*number+1</code> should be written <code>newNumber = 3 * number + 1</code>)</li>
<li>Do not borrow <code>;</code> sysntax into Python. You should remove it.</li>
<li>Remove unnecessary comments: when you code <code>(number %2 ==0 ) :#even</code>, I think everybody is smart enough to guess you are processing the case where <code>number</code> is even. The same thing goes for <code>#odd</code> and <code>#Input validation loop</code>.</li>
<li>Remove <code>return newNumber</code>, it does not make sense because <code>return (newNumber)</code> is enough to exit the recursion when <code>newNumber == 1</code>.</li>
</ul>
<p>So under the shadow of what is mentioned above, let us clean <code>collatz()</code>:</p>
<pre><code>def collatz(number):    
   if (number %2 == 0 ):
       new_number = number // 2
       print(new_number);
       if new_number!=1:
           collatz(new_number);
       else:
           return new_number
   elif (number % 2 == 1): 
       new_number = 3 * number + 1
       print (new_number)
       collatz(new_number)
</code></pre>
<h1>Improving the input validation</h1>
<ul>
<li>What you have done so far is good, I suggest you to handle the case where the user presses <kbd>Ctrl</kbd> + <kbd>c</kbd> to exit your program, because when I tried to do so, I got an ugly <code>KeyboardInterrupt</code> exception.</li>
<li>Think of <a href="https://en.wikipedia.org/wiki/Code_reuse" rel="noreferrer">code reuse</a>, I mean the input validation could be re-structured as a function, this way you can use it elsewhere easily if similar purposes are encountered.</li>
</ul>
<p>Given these last 2 elements, let us re-write the code validation:</p>
<pre><code>def validate_user_input():   
    while True:
        try:
            number = int(input("Enter a positive integer number ( &gt; 1): "))    
        except KeyboardInterrupt:
            print('\nSee you next time!')
            break
        except ValueError:
            print("That was not even a valid integer!")       
        else:
            if number &lt; 0:
                print("Positive integer, please!")            
            elif number &lt; 2:
                print("Integer should be at least equal to 2 !") 
            else:
                return number
</code></pre>
<h1>Improving <code>collatz()</code></h1>
<p>You said you do not want to see other solutions and you want only to see if you can improve your own one. So let us see if we can do so.</p>
<p>From your solution we can see:</p>
<ol>
<li>You always call <code>collatz()</code> whether <code>new_number</code> is odd or even.</li>
<li>You always print <code>new_number</code> whether it is odd or even</li>
<li>The only useful return statement is the once which corresponds to <code>new_number = 1</code> .</li>
</ol>
<p>Let us translate the 3 phrases above into code:</p>
<ol>
<li><code>callatz(new_number)</code></li>
<li><code>print(new_number)</code></li>
<li><code>return new_number</code></li>
</ol>
<p>We should not forget the shared fact: new_number can be either odd or even (so we do not care about that)</p>
<ol start="4">
<li><code>new_number = n//2 if n % 2 == 0 else n*3 + 1</code></li>
</ol>
<p>Now we are ready to gather the 4 instructions listed above into one following their coherent flow:</p>
<pre><code>def collatz(n):
    if n == 1:       
       return
    else:
       new_number = n // 2 if n % 2 == 0 else n * 3 + 1
       print(new_number)       
       collatz(new_number)
</code></pre>
<h1>Putting all together</h1>
<p>Let us gather the code written so far to create an <a href="https://stackoverflow.com/help/mcve">MCVE</a>:</p>
<pre><code>def validate_user_input():   
   while True:
       try:
           number = int(input("Enter a positive integer (minimum 2): "))    
       except KeyboardInterrupt:
           print('\nSee you next time!')
           break
       except ValueError:
           print("That was not even a valid integer!")       
       else:
           if number &lt; 0:
               print("Positive integer, please!")            
           elif number &lt; 2:
               print("Integer should be at least equal to 2 !") 
           else:
               return number  

def collatz(n):
    if n == 1:       
       return
    else:
       new_number = n//2 if n % 2 == 0 else n*3 + 1
       print(new_number)       
       collatz(new_number)    
       
if __name__ == '__main__':

   print('Collatz Conjecture Collatz Conjecture')
   number = validate_user_input()
   collatz(number)
</code></pre>
<p>P.S. Just in case: you can read about <a href="https://docs.python.org/3/library/__main__.html" rel="noreferrer"><code>if __name__ == "__main__":</code></a></p>
    </div>