<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The C++ key word <code>inline</code> is pretty much obsolete.<sup><a href="https://stackoverflow.com/q/1759300">1</a> <a href="https://stackoverflow.com/q/29796264">2</a></sup> Since at least C++03 <code>inline</code> is a recommendation to the compiler and nothing more. In the LeetCode environment it may help, but most C++ compilers are optimizing compilers and when code is compiled -O3 for maximum optimization the compiler decides what should and should not be inlined and ignores the keyword.</p>
<pre><code>#include &lt;array&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;unordered_set&gt;
#include &lt;utility&gt;
#include &lt;algorithm&gt;


class Solution {
public:
    int shortestPath(const std::vector&lt;std::vector&lt;int&gt;&gt;&amp; grid, const int k) {
        if (grid.empty()) {
            return 0;
        }

        int path_distance = INT_MAX;
        get_manhattan_distance(0, -1, -1, 0, 0, k, grid, path_distance);
        return path_distance == INT_MAX ? -1 : path_distance;
    }

private:
    // Four neighbor cells
    constexpr static std::array&lt;std::pair&lt;int, int&gt;, 4&gt; directions = {{{0, 1}, {1, 0}, {0, -1}, { -1, 0}}};
    std::unordered_set&lt;std::string&gt; memo;

    // row - col - k string
    static std::string get_key(const int row, const int col, const int k) {
        return std::to_string(row) + "#" + std::to_string(col) + "#" + std::to_string(k);
    }

    // Calculate Manhattan distance
    void get_manhattan_distance(const int path, const int prev_row, const int prev_col, const int row, const int col, int k, const std::vector&lt;std::vector&lt;int&gt;&gt;&amp; grid, int&amp; base_distance) {
        if (k &gt;= get_row_length(grid) + get_col_length(grid) - 3 - row - col) {
            base_distance = std::min(base_distance, path + get_row_length(grid) + get_col_length(grid) - 2 - row - col);
            return;
        }

        if (row == get_row_length(grid) - 1 &amp;&amp; col == get_col_length(grid) - 1) {
            base_distance = std::min(base_distance, path);
            return;
        }

        if (!memo.insert(get_key(row, col, k)).second) {
            return;
        }

        int curr_dist = get_distance(row, col, grid);

        for (const auto&amp; direction : directions) {
            if (!(row + direction.first == prev_row &amp;&amp; col + direction.second == prev_col) &amp;&amp; is_valid(row + direction.first, col + direction.second, grid)) {
                int dist = get_distance(row + direction.first, col + direction.second, grid);

                if (grid[row + direction.first][col + direction.second] == 0) {
                    get_manhattan_distance(path + 1, row, col, row + direction.first, col + direction.second, k, grid, base_distance);

                } else if (dist &lt; curr_dist &amp;&amp; k &gt; 0) {
                    get_manhattan_distance(path + 1, row, col, row + direction.first, col + direction.second, k - 1, grid, base_distance);
                }
            }
        }
    }

    // Get Current distance
    static int get_distance(const int row, const int col, const std::vector&lt;std::vector&lt;int&gt;&gt;&amp; grid) {
        return std::abs(row - get_row_length(grid) - 1) + std::abs(col - get_col_length(grid) - 1);
    }

    // Check for grid boundaries
    static const bool is_valid(const int row, const int col, const std::vector&lt;std::vector&lt;int&gt;&gt;&amp; grid) {
        return row &gt; -1 &amp;&amp; row &lt; get_row_length(grid) &amp;&amp; col &gt; -1 &amp;&amp; col &lt; get_col_length(grid);
    }

    // Get grid row size
    static int get_row_length(const std::vector&lt;std::vector&lt;int&gt;&gt;&amp; grid) {
        return grid.size();
    }

    // Get grid column size
    static int get_col_length(const std::vector&lt;std::vector&lt;int&gt;&gt;&amp; grid) {
        return grid[0].size();
    }
};
</code></pre>
    </div>