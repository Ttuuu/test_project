<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Clarifying terms makes both code and documentation easier to understand.  You use the word "phrase" (which usually refers to an arbitrary group of words) to refer to both a <strong>line</strong> (one of a set of linebreak-delimited strings) and a <strong>word</strong> (one of a set of whitespace-delimited strings).  If you're talking about a single word, say "word".  :)</p></li>
<li><p>Give your function a descriptive name!  Maybe <code>has_unique_words</code>?</p></li>
<li><p>Type annotations and a docstring also make functions easier to understand.</p></li>
</ol>

<p>Here's what we've got so far:</p>

<pre><code>def has_unique_words(phrase: str) -&gt; bool:
    """Checks whether any (whitespace-delimited) words in the phrase are repeated.
    Returns True only if all words are unique."""
    words = phrase.split()
</code></pre>

<ol start="4">
<li>Mutating an iterable as you iterate over it is an easy way to confuse yourself, and it's usually better to iterate over the elements of an list rather than the range of its indices (although because you're mutating it that might not work well here).  It might be better to find a solution that doesn't involve mutating the list.  Here are a few possibilities that are all simpler alternatives to popping/searching/re-inserting:</li>
</ol>

<pre><code># Count the number of occurrences of each word.
# If each occurs exactly once, all words are unique.
word_counts: Dict[str, int] = defaultdict(int)
for word in words:
    word_counts[word] += 1
return all(count == 1 for count in word_counts.values())
</code></pre>

<pre><code># Iterate through each word and check whether we've already seen it.
seen_words: Set[str] = set()  # this could be a list, but a set is faster to check
for word in words:
    if word in seen_words:
        return False
    seen_words.add(word)
return True
</code></pre>

<p>This one-line check is what I would do:</p>

<pre><code># Build a set (which guarantees uniqueness) out of the list of words.
# If the number of elements is the same, all the list elements are unique.
return len(set(words)) == len(words)
</code></pre>

<ol start="5">
<li>In the interest of brevity I'd use <code>sum</code> and a comprehension to build the count rather than a named variable:</li>
</ol>

<pre><code>with open('file_with_phrases.txt', 'r') as file:
    print(sum(1 for line in file if has_unique_words(line)))
</code></pre>
    </div>