<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few little things:</p>

<p><strong>Don't put comments in between function declarations and curly braces (or anything similar to that like classes or methods)</strong></p>

<p>That's hard to read and an eye sore. Put your function comments <em>above</em> the function itself. Ideally using standard <a href="http://docs.phpdoc.org/guides/docblocks.html" rel="nofollow noreferrer">docblock format</a>. </p>

<pre><code>/**
* Generates a valid, random probability distribution for a given array of elements, that can be used in conjunction with "probSelect()".
*   
* @param   array    $arr        An array of elements
* @param   float    $control    A value that decides how much mass is allowed to be unilaterally dumped onto one element. A high value would permit distributions where most of the mass is concentrated on one element. 
* @return  array                An associative array where the keys are the elements in the original array, and the values are their probabilities. 
*/
function probGen(array $arr, float $control = 0.01) 
{
</code></pre>

<p><strong>Use better variable names</strong></p>

<p>What does <code>$arr</code> mean? I can guess that it is probably an array but my IDE can already tell me that. What's actually <em>in</em> that array? <code>$elements</code> would be a better name based on the function comments. A better name would be <code>$elementsOfSomething</code> where <code>something</code> accurately describe the characteristic of those elements.</p>

<p><strong>Always use curly braces for control structures</strong>    </p>

<p>Although it is perfectly valid syntax to omit curly braces when a control structure only contains one line of code. But it is a best practice to always use them as they make the code more rreadable and prevent future errors. Future you or another developer may want to add a line to a control block and introduce a hard to find bug because they didn't realize the curly braces weren't there.</p>

<pre><code>if($var &lt;= $sum)
    return $key;
</code></pre>

<p>should be:</p>

<pre><code>if($var &lt;= $sum) {
    return $key;
}
</code></pre>

<p><strong>Use <code>echo</code> over <code>print()</code></strong></p>

<p><code>print()</code> is an alias of <code>echo</code> but there are minor differences between the two. Although they don't come into play here, it is the PHP convention to use <code>echo</code> for outputting content.</p>

<p><strong>Don't output content from your functions</strong></p>

<p>Your functions that do work <em>and</em> output content but only when there is an error are inconstant and doing too much. If you have an error, let the function report that back through a special return value (like <code>false</code> or <code>null</code>) or by throwing an exception. Let the calling code worry about reporting back the error and let the function focus on doing one thing and one thing only (just like a good OOP class should be doing).</p>

<p><strong>You can simply statements that check for a Boolean to return a Boolean</strong></p>

<p>Your statement <code>return (sum($arr) == 1)?true:false;</code> is checking if a statement is true and returning <code>true</code> if it is. <code>false</code> if it is false. So you can return the result of your conditional without having to explicitly return <code>true</code> or <code>false</code> because you already have that value:</p>

<pre><code>return (sum($arr) == 1); // will return true or false
</code></pre>

<p><strong>An alternative randx() function</strong></p>

<p>The internet seems like it is already full of example functions that will generate a random float. They tend to be similar to the one below. Is there any reason you did not choose to go this route? It has fewer function calls so it should be more performant.</p>

<pre><code>function frand($min, $max, $decimals = 0) {
  $scale = pow(10, $decimals);
  return mt_rand($min * $scale, $max * $scale) / $scale;
}

echo "frand(0, 10, 2) = " . frand(0, 10, 2) . "\n";
</code></pre>

<p><strong>The PHP community prefers // to # for comments</strong></p>

<p>Although <code>#</code> is a valid syntax for a one line comment in PHP, it is common practice to use <code>//</code>.</p>
    </div>