<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>How well/bad is this code written?</p>
</blockquote>

<p>A good first timer implementation.</p>

<blockquote>
  <p>Is the code abstract enough?</p>
</blockquote>

<p>Mostly. It does make unnecessary assumptions about range.  It assumes <code>int</code> math does not overflow.</p>

<p>To make more abstract, code could use <code>typedef int TVS_int;</code> to ease future type changes.</p>

<blockquote>
  <p>How can you solve such challenges more quickly?</p>
</blockquote>

<p>Take advantage that the matrix is <em>square</em>.</p>

<p>With computing along the diagonal of a <em>square</em> matrix, only the matrix and its one size parameter are needed.</p>

<p>Use <code>const</code> to hint the the compiler about certain potential optimizations and convey code's intent better.</p>

<p><code>size_t</code> is the best size of array indexing, not too wide nor too narrow.</p>

<p>I like the idea of using a wider intermediate type to mitigate overflow problems.</p>

<pre><code>typedef int TVS_int;
typedef long long TVS_int2;  // a type with wider range.

TVS_int diagonalDifference_alt(const TVS_int** arr, size_t n) {
  TVS_int2 sum_up = 0;
  TVS_int2 sum_dn = 0;

  for (size_t i = 0; i&lt;n; i++) {
    // Notice both `arr` use the same `arr[i]` --&gt; potentially easier to optimize
    sum_up += arr[i][n-i-1];
    sum_dn += arr[i][i];
  }
  TVS_int2 diff = sum_up - sum_dn;
  return (TVS_int) ((diff &lt; 0) ? -diff : diff);  // OF possible here in range reduction 
}
</code></pre>

<hr>

<p><code>if(left_to_right - right_to_left &gt; 0)</code> unnecessarily incurs the potential for <code>int</code> overflow.  Simply compare instead.  <code>if (left_to_right &gt; right_to_left)</code></p>
    </div>