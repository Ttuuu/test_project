<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, you should add the "sticky bit's" <code>S</code>,<code>s</code> and <code>t</code> otherwise you'll fail parsing a permission like <code>rwSrwxrwt</code>.</p>

<p>Edit (17.05.2019):</p>

<p>According to this post (<a href="https://unix.stackexchange.com/questions/27250/uppercase-s-in-permissions-of-a-folder">https://unix.stackexchange.com/questions/27250/uppercase-s-in-permissions-of-a-folder</a>) and an personal encounter, here is the update.</p>

<ul>
<li><code>S</code>,<code>s</code> on the owner block is <code>4</code></li>
<li><code>S</code>,<code>s</code> on the group block is <code>2</code></li>
<li><code>t</code> on the public block is <code>1</code></li>
</ul>

<p>After that, you could wrap all this in a single function like the following example. So you can simply convert a permission string like <code>rwSrwxrwt</code> to <code>5677</code> and vice versa.</p>

<pre><code>    #region ConvertUnixChmod

    ///&lt;summary&gt;
    /// Convert an unix chmod (rwSrwxrwt) to an number (5677) and reverse
    ///&lt;para/&gt;*NOTE*
    ///&lt;para/&gt;This method is case-sensitive!
    ///&lt;/summary&gt;
    ///&lt;param name="chmod"&gt;(rwSrwxrwt) or (5677)&lt;/param&gt;
    ///&lt;returns&gt;&lt;see cref="string"/&gt;&lt;/returns&gt;
    public static string ConvertUnixChmod(string chmod)
    {
        char[][] pC = new char[3][];
        int[] pN = new int[] { 0, 0, 0, 0 };
        if (chmod.Length == 9)
        {
            pC[0] = chmod.Substring(0, 3).ToCharArray();
            pC[1] = chmod.Substring(3, 3).ToCharArray();
            pC[2] = chmod.Substring(6, 3).ToCharArray();
            for (int p = 0; p &lt; 3; p++)
            {
                for (int i = 0; i &lt; 3; i++)
                {
                    switch (pC[p][i])
                    {
                        case 'r':
                            pN[p + 1] += 4;
                            break;
                        case 'w':
                            pN[p + 1] += 2;
                            break;
                        case 'x':
                            pN[p + 1] += 1;
                            break;
                        case 's':
                            // Here we calculate the setuid/gid with "x"
                            pN[0] += 4 / (p + 1);
                            pN[p + 1] += 1;
                            break;
                        case 'S':
                            // Here we calculate the setuid/gid without "x"
                            pN[0] += 4 / (p + 1);
                            break;
                        case 't':
                            // Here we calculate the sticky bit
                            pN[0] += 1;
                            pN[p + 1] += 1;
                            break;
                    }
                }
            }
            return string.Concat(pN);
        }
        else if (chmod.Length == 4 &amp;&amp; int.TryParse(chmod.Substring(0, 1), out pN[0]) &amp;&amp; int.TryParse(chmod.Substring(1, 1), out pN[1]) &amp;&amp; int.TryParse(chmod.Substring(2, 1), out pN[2]) &amp;&amp; int.TryParse(chmod.Substring(3, 1), out pN[3]))
        {
            pC[0] = new char[] { '-', '-', '-' };
            pC[1] = new char[] { '-', '-', '-' };
            pC[2] = new char[] { '-', '-', '-' };
            for (int i = 0; i &lt; 3; i++)
            {
                switch (pN[i + 1])
                {
                    case 1:
                        pC[i][2] = 'x';
                        break;
                    case 2:
                        pC[i][1] = 'w';
                        break;
                    case 3:
                        pC[i][1] = 'w';
                        pC[i][2] = 'x';
                        break;
                    case 4:
                        pC[i][0] = 'r';
                        break;
                    case 5:
                        pC[i][0] = 'r';
                        pC[i][2] = 'x';
                        break;
                    case 6:
                        pC[i][0] = 'r';
                        pC[i][1] = 'w';
                        break;
                    case 7:
                        pC[i][0] = 'r';
                        pC[i][1] = 'w';
                        pC[i][2] = 'x';
                        break;
                }

                // Here we set the setuid/gid and sticky bits

                if (i == 0 &amp;&amp; (pN[0] == 7 || pN[0] == 6 || pN[0] == 5 || pN[0] == 4))
                {
                    pC[i][2] = pC[i][2] == '-' ? 'S' : 's';
                }
                else if (i == 1 &amp;&amp; (pN[0] == 7 || pN[0] == 6 || pN[0] == 3 || pN[0] == 2))
                {
                    pC[i][2] = pC[i][2] == '-' ? 'S' : 's';
                }
                else if (i == 2 &amp;&amp; (pN[0] == 7 || pN[0] == 5 || pN[0] == 3 || pN[0] == 1))
                {
                    pC[i][2] = 't';
                }
            }
            return string.Concat(string.Concat(pC[0]), string.Concat(pC[1]), string.Concat(pC[2]));
        }
        return string.Empty;
    }
    #endregion
</code></pre>
    </div>