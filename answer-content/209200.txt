<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The return value of <code>exist()</code> is strange.  I don't know if <code>-1</code> for false is a convention from some other language, but C treats <strong>zero</strong> as a false value, and <strong>non-zero</strong> as true.  This is what users expect: the expectation is that a predicate function could be used directly in <code>if</code> or <code>while</code> statements, for example.</p>

<p>There's even a <code>&lt;stdbool.h&gt;</code> header that gives us a <code>bool</code> type with values <code>true</code> and <code>false</code>:</p>

<pre><code>#include &lt;stdbool.h&gt;

bool exist(Node *root, int value);
</code></pre>

<p>Next, observe that there's no need for this function to change <code>root</code>, so accept a pointer to <code>const</code> to indicate that intent:</p>

<pre><code>bool exist(const Node *root, int value);
</code></pre>

<p>Unfortunately, we can't enforce that the <code>const</code> also applies to interior nodes (as we could in C++), but this declaration does help programmers to understand the function.  The same observation applies to a few other methods - in fact, all except <code>insertNewNumber()</code> and <code>freeTree()</code>.</p>

<p>My re-written <code>exist()</code> is:</p>

<pre><code>/** @return true if a node with the value 'value' is in the tree,
    otherwise false. */
bool exist(const Node *root, int value)
{
    if (!root) {
        return false;
    }
    if (root-&gt;val == value) {
        /* found it */
        return true;
    }
    /* search again in left or right subtree */
    const Node *subtree = root-&gt;val &lt; value ? root-&gt;l : root-&gt;r;
    return exist(subtree, value);
}
</code></pre>

<p>We have tail recursion there, but we can't depend on a C compiler to perform tail-call elimination, so we might choose to write it iteratively; for my money, that's also simpler to read and understand:</p>

<pre><code>bool exist(const Node *root, int value)
{
    while (root) {
        if (root-&gt;val == value) { return true; }
        root = root-&gt;val &lt; value ? root-&gt;l : root-&gt;r;
    }
}
</code></pre>

<hr>

<p>Don't cast the return value of <code>malloc()</code> and family.  Also, prefer to use the size of the (derefenced) variable than the type (not so important here, but improves robustness and clarity when the variable's declaration is a long way from the assignment).</p>

<blockquote>
<pre><code>    Node *newNode = (Node*) malloc(sizeof(Node));
</code></pre>
</blockquote>

<p>is better written as</p>

<pre><code>    Node *newNode = malloc(sizeof *newNode);
</code></pre>

<hr>

<p>Minor: if we're not using the command-line arguments in <code>main()</code>, declare it as the simpler alternative:</p>

<pre><code>int main(void)
</code></pre>
    </div>