<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The first thing you should do is to let your editor or your IDE format the source code. Right now it looks confusing because the lines are not properly indented. I ran GNU Indent with the <code>-kr</code> option on your code:</p>

<pre><code>indent -kr marks.c
</code></pre>

<p>This is the result:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main()
{
    char name[100];
    int physics, chemistry, maths, biology, business, total_marks;
    // physics,chemistry,maths,biology,business are just but subjects names.
    float mean;
    printf("Please enter your name \n");
    fgets(name, 100, stdin);
    {
        printf("Please enter the marks for physics \n");
        scanf("%d", &amp;physics);
        printf("Please enter the marks for chemistry \n");
        scanf("%d", &amp;chemistry);
        printf("Please enter the marks for maths \n");
        scanf("%d", &amp;maths);
        printf("Please enter the marks for biology \n");
        scanf("%d", &amp;biology);
        printf("Please enter the marks for business\n");
        scanf("%d", &amp;business);
        total_marks = physics + chemistry + maths + biology + business;
        mean = (float) total_marks / 5;
    }
    printf("%s\t", name);
    printf(" HAS TOTAL MARKS OF : %d,\t", total_marks);
    printf(" MEAN OF :  %.2f\t", mean, round(mean));
    if (mean &gt;= 70)
        printf("AND THE  GRADE IS A  \n");
    if (mean &gt;= 60 &amp;&amp; mean &lt; 69)
        printf("AND THE  GRADE IS B  \n");
    if (mean &gt;= 50 &amp;&amp; mean &lt; 59)
        printf("AND THE  GRADE IS C  \n");
    if (mean &gt;= 40 &amp;&amp; mean &lt; 49)
        printf("AND THE  GRADE IS D  \n");
    if (mean &lt; 40)
        printf("AND THE  GRADE IS E \n");
    printf(" Thank you for your time  \n");
    return 0;
}
</code></pre>

<p>Now the code structure is a little clearer than before.</p>

<p>The next thing I noticed is that your code does not have a single empty line. This always feels to me as if youwerewritingyourcodewithoutanyspaces, and this also makes it unnecessarily hard to see the building blocks of the code. I added the empty lines manually since I don't know any program that could automatically do this. Now your code is:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main()
{
    char name[100];
    int physics, chemistry, maths, biology, business, total_marks;
    // physics,chemistry,maths,biology,business are just but subjects names.
    float mean;

    printf("Please enter your name \n");
    fgets(name, 100, stdin);

    printf("Please enter the marks for physics \n");
    scanf("%d", &amp;physics);
    printf("Please enter the marks for chemistry \n");
    scanf("%d", &amp;chemistry);
    printf("Please enter the marks for maths \n");
    scanf("%d", &amp;maths);
    printf("Please enter the marks for biology \n");
    scanf("%d", &amp;biology);
    printf("Please enter the marks for business\n");
    scanf("%d", &amp;business);

    total_marks = physics + chemistry + maths + biology + business;
    mean = (float) total_marks / 5;

    printf("%s\t", name);
    printf(" HAS TOTAL MARKS OF : %d,\t", total_marks);
    printf(" MEAN OF :  %.2f\t", mean, round(mean));

    if (mean &gt;= 70)
        printf("AND THE  GRADE IS A  \n");
    if (mean &gt;= 60 &amp;&amp; mean &lt; 69)
        printf("AND THE  GRADE IS B  \n");
    if (mean &gt;= 50 &amp;&amp; mean &lt; 59)
        printf("AND THE  GRADE IS C  \n");
    if (mean &gt;= 40 &amp;&amp; mean &lt; 49)
        printf("AND THE  GRADE IS D  \n");
    if (mean &lt; 40)
        printf("AND THE  GRADE IS E \n");

    printf(" Thank you for your time  \n");
    return 0;
}
</code></pre>

<p>At this stage the code is ready to be read by a human. Before it just looked like a mess.</p>

<p>One thing I already did in the previous step is to remove the <code>{</code> and <code>}</code> around the subjects input block. They didn't serve any purpose.</p>

<p>In the first block of the <code>main</code> function, you only declare variables but don't use them. This is dangerous since in C it is a silent error to declare a variable, not initialize it and then read its value. This leads to undefined behavior. Therefore it's better to combine the variable declaration with its first assignment. Instead of this:</p>

<pre><code>float mean;
// ... some 20 lines of unrelated code ...
mean = (float) sum / n;
</code></pre>

<p>Better combine these lines:</p>

<pre><code>float mean = (float) sum / n;
</code></pre>

<p>In the 1990s, only the first variant of the code was allowed. But that time has long since passed, and there's no reason anymore to declare variables at the top of the function. Instead, declare them right when they are needed.</p>

<p>The strings you print typically end in <code>" \n"</code>. There's no point in writing a trailing space character before a line break. It won't be visible anyway, so you can simply write <code>"\n"</code> instead. Even worse, after <code>business</code> you didn't add a space. Whatever you do in programming, be consistent. Either write the spaces nowhere or everywhere. In this case nowhere.</p>

<p>WHY DO YOU MAKE YOUR PROGRAM SHOUT SO LOUD? There's no reason to use all-uppercase text in your program. It hurts both the ears and the eyes of the readers of the code.</p>

<p>The <code>round</code> function is only guaranteed to be available in your program if you <code>#include &lt;math.h&gt;</code> at the top.</p>

<p>There's a bug in the program. When the mean grade is 69, it is neither <code>&gt;= 70</code> nor <code>&lt; 69</code>, therefore none of the result sentences is printed. Instead of the if-then you should use if-then-else-if-then-else-if-else instead:</p>

<pre><code>if (mean &gt;= 70)
    printf("AND THE  GRADE IS A  \n");
else if (mean &gt;= 60)
    printf("AND THE  GRADE IS B  \n");
else if (mean &gt;= 50)
    printf("AND THE  GRADE IS C  \n");
else if (mean &gt;= 40)
    printf("AND THE  GRADE IS D  \n");
else
    printf("AND THE  GRADE IS E \n");
</code></pre>

<p>This is much clearer and is guaranteed to cover all cases. Again, you have trailing spaces here. Just remove them. What does the double space between <code>THE  GRADE</code> mean? If there's no meaning to it, just use a single space.</p>

<p>One last point is the error handling. Whenever you call a function like <code>fgets</code> or <code>scanf</code>, you must check its return value, like this:</p>

<pre><code>if (fgets(name, 100, stdin) == NULL)
    return 0;
</code></pre>

<p>This can happen if the user presses Ctrl+D (on Linux, macOS or any other UNIX-like operating system) or Ctrl+Z (on Windows) and thereby terminates the input. For <code>scanf</code> this error checking is even more important. What if the user enters <code>dgfhtzhrdghfnjfthfd</code> instead of a number? Therefore:</p>

<pre><code>if (scanf("%d", &amp;physics) != 1) {
    fprintf(stderr, "error: physics mark must be a number\n");
    return EXIT_FAILURE;
}
</code></pre>

<p>That's all for now.</p>
    </div>