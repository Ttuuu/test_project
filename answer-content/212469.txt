<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The logic is straightforward and easy to follow (albeit with an unnecessary conversion of an <code>int</code> to an <code>int</code>):</p>

<pre><code>p = 0
for x in range(a,b+1):
    p ^= x
return p % 2
</code></pre>

<p>However, you could achieve the same more efficiently by noting that we're just counting how many odd numbers are in the range, and reporting whether that count is even or odd.  That should suggest a simple O(1) algorithm in place of the O(<em>n</em>) algorithm you're currently using:</p>

<pre><code>def count_odds(lo, hi):
    '''
    Count (modulo 2) how many odd numbers are in inclusive range lo..hi
    &gt;&gt;&gt; count_odds(0, 0)
    0
    &gt;&gt;&gt; count_odds(0, 1)
    1
    &gt;&gt;&gt; count_odds(1, 1)
    1
    &gt;&gt;&gt; count_odds(0, 2)
    1
    &gt;&gt;&gt; count_odds(1, 2)
    1
    &gt;&gt;&gt; count_odds(2, 2)
    0
    &gt;&gt;&gt; count_odds(0, 3)
    2
    &gt;&gt;&gt; count_odds(1, 3)
    2
    &gt;&gt;&gt; count_odds(2, 3)
    1
    &gt;&gt;&gt; count_odds(3, 3)
    1
    '''
    # if lo and hi are both odd, then we must round up,
    # but if either is even, we must round down
    return (hi + 1 - lo + (lo&amp;1)) // 2

if __name__ == '__main__':
    import doctest
    doctest.testmod()
</code></pre>

<p>We can then use this function to index the appropriate string result:</p>

<pre><code>if __name__ == '__main__':
    for _ in range(int(input())):
        a,b = map(int, input().split())
        print(["Even","Odd"][count_odds(a,b) &amp; 1])
</code></pre>
    </div>