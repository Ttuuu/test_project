<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Actually, your approach consists to remove or to replace with a space all that isn't a word (urls and characters that are not an ascii letter). Then you finish the job removing duplicate spaces, spaces at the beginning or the end of the string, and converting all in lower-case.</p>

<p>The idea makes sense.</p>

<p>But concretely, what is the result of this script?<br>
<em>It returns all words in lower-case separated by a space.</em></p>

<p>Described like that, you easily understand that you can extract the words and join them with a space. To do that, a simple <code>re.findall(r'[a-z]+', text)</code> suffices, but you have to remove the urls first if you don't want to catch letter sequences contained in them.</p>

<p><strong>The url pattern</strong></p>

<p>If you read your url pattern, you can see that the only part that isn't optional is in fact <code>[\w-]+(?:\.[\w-]+)+</code> (<em>written <code>[\w\-_]+(\.[\w\-_]+)+</code> in your script: <code>_</code> is already inside <code>\w</code>, you can put <code>-</code> at the end of a character without to escape it, the capture group is useless</em>).<br>All that comes after this part of the pattern doesn't require a precise description and can be replaced with a <code>\S*</code> (zero or more non-white-spaces). Even if it catches a closing parenthesis or a comma, it isn't important for what you want to do <em>(we will see how to handle commas or dots later)</em>.</p>

<p>One of the weaknesses of the url pattern is that it starts with an alternation in an optional group. This means that at each failing position of the string, the regex engine has to test the three alternatives <code>(http|ftp|https)</code> and without the whole group for nothing.
It's possible to improve that a little if you start the pattern with a word boundary and if you replace the last alternative (https) with an optional <code>s</code> in the first.</p>

<p>The url pattern can be rewritten like this:</p>

<pre><code>\b(?:(?:https|ftp)://)?\w[\w-]*(?:\.[\w-]+)+\S*
</code></pre>

<p>and the whole function:</p>

<pre><code>import re

def cleaning2(text):
    text = re.sub(r'\b(?:(?:https?|ftp)://)?\w[\w-]*(?:\.[\w-]+)+\S*', ' ', text.lower())
    words = re.findall(r'[a-z]+', text)
    return ' '.join(words)
</code></pre>

<p>Note that the URL syntax can be particularly complex, and that it isn't always possible to extract an URL from a non-formatted string.</p>

<p><strong>If you want to keep commas and dots:</strong><br>
Few changes, you only have to be sure that <code>\S*</code> in the url pattern doesn't eat a comma or a dot at the end of the url with a negative lookbehind <code>(?&lt;!...)</code>, and to add them in the character class in the <code>re.findall</code> pattern:</p>

<pre><code>import re

def cleaning2(text):
    text = re.sub(r'\b(?:(?:https?|ftp)://)?\w[\w-]*(?:\.[\w-]+)+\S*(?&lt;![.,])', ' ', text.lower())
    words = re.findall(r'[a-z.,]+', text)
    return ' '.join(words)
</code></pre>
    </div>