<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few changes:</p>

<p>Strings shouldn't be used here for keeping track of comparison results. Strings are prone to being typo'd, and may lead to unexpected results (like indexing <code>result</code> causing <code>KeyError</code>s at runtime). I'd take a page from Java (and other languages) and use <code>-1</code>, <code>0</code> and <code>1</code> to indicate the results of a comparison. You can see it being used in an <a href="https://stackoverflow.com/a/2839165/3000206">answer here</a>. I'd make the following changes:</p>

<pre><code>result = {1: [], # Increasing
          0: [], # Equal
          -1: [] # Decreasing 
          }

def two_item_relation(prev, curr):
    if prev &lt; curr:
        return 1
    elif prev == curr:
        return 0
    else:
        return -1
</code></pre>

<p>It's much harder to mistype <code>-1</code> than it is, for example, <code>"decreasing"</code>.</p>

<p>If you really wanted Strings for pretty printing purposes (like for your output at the bottom), you could maintain a dictionary mapping comparison numbers to strings:</p>

<pre><code>pp_result = {1: "Increasing",
             0: "Equal",
             -1: "Decreasing" 
            }
</code></pre>

<p>The point is that you shouldn't use easily mistyped things as keys unless necessary.</p>

<p>Strings also <em>may</em> be slower to compare, and <em>may</em> take more memory, but hash caching and String interning may negate those problems in some cases.</p>

<p>You could also write that function as something like:</p>

<pre><code>def two_item_relation(prev, curr):
    return 1 if prev &lt; curr else \
                0 if prev == curr else \
                    -1
</code></pre>

<p>But I'm probably going to get yelled at for even bringing that up. Conditional expressions/ternaries are nice in many cases when you want to conditionally return one or another thing, but they get a little murky as soon as you're using them to decide between three different things. It's especially bad here because this pretty much needs to be split over a few lines, which necessitates the use of line continuation characters, which are a little noisy.</p>

<p>I'm bringing it up in case you're unaware of conditional expressions, not because I'm necessarily suggesting their use here.</p>

<hr>

<p>You could use <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enums</a> as well:</p>

<pre><code>from enum import Enum

class Compare_Result(Enum):
    INCREASING = 1
    EQUAL = 0
    DECREASING = -1

def two_item_relation(prev, curr):
    if prev &lt; curr:
        return Compare_Result.INCREASING
    elif prev == curr:
        return Compare_Result.EQUAL
    else:
        return Compare_Result.DECREASING
</code></pre>

<p>This has the benefit that it makes it obvious what each result actually means. They also prints out semi-nicely, so the "pretty-printing map" may not be as necessary:</p>

<pre><code>&gt;&gt;&gt; str(Compare_Result.INCREASING)
'Compare_Result.INCREASING'

&gt;&gt;&gt; repr(Compare_Result.INCREASING)
'&lt;Compare_Result.INCREASING: 1&gt;'
</code></pre>

<p>And, if you do typo a name (which is harder to do since IDEs can autocomplete <code>Compare_Result.</code>), it will fail outright with an error:</p>

<pre><code>&gt;&gt;&gt; Compare_Result.INCRESING

Traceback (most recent call last):
  File "&lt;pyshell#5&gt;", line 1, in &lt;module&gt;
    Compare_Result.INCRESING
  File "C:\Users\slomi\AppData\Local\Programs\Python\Python36-32\lib\enum.py", line 324, in __getattr__
    raise AttributeError(name) from None
AttributeError: INCRESING
</code></pre>

<p>Unfortunately though, this error does not happen immediately like it does in other languages. The faulty code needs to actually be interpreted before the error is caught. This seems to make enums less useful in Python than in languages like Java or C++, but it's still less error-prone than using Strings or Numbers.</p>

<hr>

<p>Honestly, I'm too tired right now to comment on the algorithm, but hopefully this was helpful.</p>
    </div>