<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>An obvious way to improve the code is to use standard containers to manage memory instead of raw pointers.</p>

<p>For this code, I would choose <code>std::vector&lt;double&gt;</code> for <code>vector</code> and <code>result</code>, and probably <code>std::vector&lt;std::vector&lt;double&gt;&gt;</code> for <code>matrix</code> (though note that this isn't the most cache-friendly choice for a 2-d matrix).  Remember, we can refer to a <code>std::vector</code>'s elements as a plain array using the <code>data()</code> member if needed (here, the iterators should be sufficient).</p>

<p>That allows us to eliminate all the <code>delete[]</code> operations, as destructors will take care of that for us - including the non-local exits where <code>new[]</code> throws <code>std::bad_alloc</code>.</p>

<hr>

<p>This loop looks wasteful:</p>

<blockquote>
<pre><code>    for(unsigned j = 0; j &lt; N; j++){
        if(i==j) {matrix[i][j] = i+j;}
    }
</code></pre>
</blockquote>

<p>As the body is conditional on <code>i==j</code>, that's simply equivalent to</p>

<pre><code>        matrix[i][i] = i+i;
</code></pre>

<hr>

<p>I don't have experience with MPI, so not commenting on its use.  It's probably worth making <code>N</code> be <code>const</code>, and possibly also defining a useful variable:</p>

<pre><code>auto const chunk_size = N/world.size();
</code></pre>

<p>Is the variable <code>env</code> needed?  If constructing a <code>boost::mpi::environment</code> has some useful side-effect, it may be worth an explanatory comment, as it currently looks like an unused variable (if this is something obvious and expected in MPI, then disregard this comment).</p>
    </div>