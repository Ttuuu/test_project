<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Don't restrict the type of key</h1>
<p>You'll notice that ordered STL containers such as <a href="https://en.cppreference.com/w/cpp/container/map" rel="nofollow noreferrer"><code>std::map</code></a> put no constraints on the type of the key, neither using SFINAE, concepts nor a mention in the description. The reason is that you are allowed to specify your own compare function, which you can use to provide a way to order keys even if the keys themselves do not have a total order.</p>
<p>As an example: suppose I want to store two-dimensional coordinates in a B-tree, and order them based on their x coordinate. Two-dimensional coordinates themselves do not have a well-defined ordering, so your <code>concept Key</code> would prevent it from being usable with <code>BTree</code>, even though it is trivial to write a comparison function that just compares the x coordinate of two keys.</p>
<h1>Naming things</h1>
<p>Avoid very short names for variables and types, unless it is a commonly used name. For example, <code>T</code> is fine for the template type of a key or value, <code>n</code> is a common abbreviation for a "number" of things. But <code>t</code> is a bad choice for the number of children of a node. I suggest you replace it with <code>fanout</code>.</p>
<p>I also recommend you use the plural for names of containers that can hold multiple elements. So <code>keys</code> instead of <code>key</code>, <code>children</code> instead of <code>child</code>.</p>
<p>Be consistent when naming things. I see both camelCase and PascalCase used for member functions.</p>
<h1>Add more <code>assert()</code>s where appropriate</h1>
<p>You already use <code>assert()</code> in a few cases, but it can be done in a lot more places. For example, in <code>BTree::Node::setN</code>, you can add:</p>
<pre><code>assert(N &lt;= 2 * t - 1);
</code></pre>
<p>The iterator operators could also use some <code>assert()</code> statements to check that you don't try to iterate past the beginning or end of the tree, and so on.</p>
<h1>Optimize your iterators</h1>
<p>There's a little bit of redundancy in your iterators:</p>
<pre><code>Node* node;
std::vector&lt;T&gt;::iterator it;
</code></pre>
<p>Here, <code>it</code> also contains a pointer to <code>node-&gt;key</code>. It's better to just store the integer index into <code>node-&gt;key</code>. That way, you also don't have to jump through hoops to get an index into <code>node-&gt;child</code> as well:</p>
<pre><code>Node *node;
size_t index;
</code></pre>
<h1>Optimize your <code>Node</code>s</h1>
<p>You also store some redundant information in each <code>Node</code>. Consider that <code>key.size()</code> is equal to <code>n</code>, and <code>child.size()</code> is equal to <code>n + 1</code> for interior nodes, and <code>child.empty() == true</code> for leaf nodes. So <code>n</code> and <code>leaf</code> store redundant information. Removing those two variables gets rid of 16 bytes on 64-bit architectures, and there's less state that needs to be kept in sync.</p>
<p>In principle you could also remove <code>parent</code> and <code>index</code>. This makes the iterators and the rotation operations more complex though, so I would probably keep it as it is now.</p>
    </div>