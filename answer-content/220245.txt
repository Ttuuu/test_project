<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A lot of could be written in a more functional style. That means that functions return the result of their execution instead of printing it. It makes your code more readable, more composable and generally easier to reason about.
Also, docstrings at the beginning of all the function would help immensely in determining their purpose.</p>

<p>For the details like naming and formatting, <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a> defines the Pythonic way</p>

<p>Some functions that could be written more pythonic:</p>

<pre><code>def isWhiteSpace(word):
    return word in [" ", "\t", "\n"]
</code></pre>

<p>I partially rewrote the following functions and did a bit of obvious stuff,
but the starting paragraph still applies.</p>

<pre><code>def delimiterCorrection(line):
    tokens = line.split(" ")
    for delimiter in mysrc.delimiters().keys():
        for token in tokens:
            if token != delimiter and delimiter in token:
                pos = token.find(delimiter)
                tokens.remove(token)
                token = token.replace(delimiter, " ")
                extra = token[:pos]
                token = token[pos + 1 :]
                tokens.append(delimiter)
                tokens.append(extra)
                tokens.append(token)

    for token in tokens:
        if ' ' in token:
            tokens.remove(token)
            token = token.split(' ')
            tokens += token
    return [t for t in tokens if not isWhiteSpace(token)] # Remove any tokens that are whitespace

def tokenize(path):
    """Return a list of (line_number, [token]) pairs.
       Raise exception on error."""
    if not isfile(path):
        raise ValueError("File \"" + path + "\" doesn't exist!")

    res = []
    with open(path) as f:
        for line_count, line in enumerate(f):
            tokens = delimiterCorrection(line)
            res.append((line_count, tokens))
            for token in tokens:
                # This has a side effect which makes it hard to rewrite
                # Also, what does basic check do?
                basicCheck(token)
    return res
</code></pre>

<p>DISCLAIMER:
I'm not a python expert in any way and my programming style is heavily inspired by functional programming. Feel free to disagree on everything I said.
The fact that you're making an effort to improve your programming style already sets you apart. I hope I provided may be one or two insights!</p>
    </div>