<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What is "bad match" in here?</p>

<blockquote>
<pre><code>RemoveBadMatch="s/^\s*($GrepAndFilter)\s+//gI"
</code></pre>
</blockquote>

<p>My understanding is that this pattern is used to remove the <code>$GrepAndFilter</code> prefix from lines, with any surrounding whitespace. I don't see that prefix as "bad match" in any sense of the word. It seems <code>RemoveFilterPrefix</code> would be a better fit.</p>

<hr>

<p>Here, instead of <code>\s*$</code> as the pattern, I'd use <code>\s+$</code>,
to emphasize that the content will be modified only when there are non-zero trailing whitespaces.</p>

<blockquote>
<pre><code>RemoveTrailingWhitespaces="s/\s*$//"
</code></pre>
</blockquote>

<hr>

<p>Here, the pattern doesn't match the name:</p>

<blockquote>
<pre><code>ReplaceSpacesWithNewLines="s/ +/\s/g"
</code></pre>
</blockquote>

<p>I think you meant <code>\n</code> as the replacement,
because <code>\s</code> doesn't have a special meaning in a replacement string,
so as written,
this command will replace spaces with the letter <code>s</code>.</p>

<hr>

<p><code>grep</code> assumes <code>/dev/stdin</code> as input by default, no need to specify it explicitly.</p>

<hr>

<p>In many systems, the Apache configuration files often contain <code>ServerName</code> and <code>ServerAlias</code> on commented out lines.
The posted script won't work with such lines,
and I can easily imagine such lines in production systems too.
I suggest to make the script more robust by excluding commented lines.
This could be as simple as making the first filter more strict:</p>

<pre><code>GrepAndFilter="^\s*(ServerName|ServerAlias)\s+"
</code></pre>
    </div>