<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the command line, there are at least two other methods to pass this information in: the <code>.ini</code> file was mentioned in another answer, environment variables are also an option. It's best not to force the user to type in too many options for the command line.</p>
<h2>Avoid Using Namespace <code>std</code></h2>
<p>If you are coding professionally, you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The function cout you may override within your own classes. This <a href="//stackoverflow.com/q/1452721">Stack Overflow question</a> discusses this in more detail.</p>
<h2>Complexity</h2>
<p>The function <code>main()</code> is too complex (does too much). As programs grow in size the use of <code>main()</code> should be limited to calling functions that parse the command line, calling functions that set up for processing, calling functions that execute the desired function of the program, and calling functions to clean up after the main portion of the program.</p>
<p>There is also a programming principle called the Single Responsibility Principle that applies here. The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">Single Responsibility Principle</a> states:</p>
<blockquote>
<p>that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by that module, class or function.</p>
</blockquote>
<p>The code to set up the command line options should be in a function of its own. That function should probably call multiple functions to set up the options: one function for each of the option descriptions created.</p>
<p>For a program that is going to be this complex it might be good to <a href="https://en.cppreference.com/w/cpp/utility/program/EXIT_status" rel="nofollow noreferrer"><code>#include &lt;cstdlib&gt;</code> and use <code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code></a> to make the code more self-documenting.</p>
<h2>Variable Names and Declarations</h2>
<p>The variable name <code>pd</code> is not very descriptive; someone who had to maintain the code would not be able to do it easily.</p>
<p>For the same reason using <code>po</code> rather than <code>boost::program_options::</code> could make the program a lot harder to maintain. A maintainer would have to search through the program to find out what <code>po</code> is.</p>
<p>When declaring variables such as <code>verbose</code>, <code>anomaly_detection</code> and <code>analyze_activity</code> it would be better to declare each variable on a separate line and possibly initialize them at the same time. This would make it easier to add more variables and to find the variable declarations.</p>
<pre><code>    bool verbose = true;
    bool anomaly_detection = false;
    bool analyze_activity = true;
</code></pre>
    </div>