<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Preface</h3>

<p>There is a lot to review. This review is focused on the parts that are not related to the View or ViewModel.</p>

<p><em>Note: You have also edited the question concurrently with me making this review to state ObservableObject and RelayCommand are third-party classes. That's fine by me, since I still wanted to point out to you you shouldn't just copy these classes from internet and use them without any changes or proper consideration.</em></p>

<hr>

<h2>ColorListModel</h2>

<p>You cannot reuse this class in scenarios where the paths are different than below. Also, when changing paths, you'd have to update this code with it. Consider reading these paths from a settings or configuration file.</p>

<blockquote>
<pre><code>private readonly static string projectPath 
    = Directory.GetParent(Directory.GetCurrentDirectory())...
private readonly static string colorsFilePath 
    = projectPath + "/Resources/ColorItemsList.txt";
</code></pre>
</blockquote>

<p>Consider using the lazy pattern to load properties on first demand to avoid unnecessary resources when not required: property <code>ColorClassList</code>.</p>

<p><code>SaveColorsList</code> swallows all exceptions. At least log something or return a <code>bool</code> in sandbox mode if you don't like this method to throw exceptions.</p>

<p><code>AddColorItem</code>, <code>EditColorItem</code> and <code>DeleteColorItem</code> only execute when the index is in bounds. The caller does not get feedback about out-of-bounds. Throw an exception or return a <code>bool</code> to let caller handle edge cases. Furthermore, <code>AddColorItem</code> does not use <code>index</code> as it stores on index <code>0</code> instead. Is this as designed?</p>

<hr>

<p><em>(third-party code)</em></p>

<h2>ObservableObject</h2>

<p>This class is a design decision that I would challenge. It provides insufficient context to be a good candidate for a base class for other classes. I put it in the list of classes as <code>ComparableBase</code>, <code>EquatableBase</code>, <code>DisposableBase</code>. Think about whether a common base clase is really helpful here.</p>

<p>In addition, this class provides a public event <code>PropertyChanged</code> but never disposes it. Even if the WPF framework is able to subscribe and unsubscribe correctly from it, your own code-behind and other application logic is also allowed to subscribe. Classes that provide events should in my opinion always implement <code>IDisposable</code>.</p>

<h2>RelayCommand</h2>

<p>This is a famous allround command. I think it originates from Telerik, but several other variants are out there as well (<code>DelegateCommand</code> for instance). I would mention the use of third-party code in a question so we know how to review it.</p>

<p>This pattern with <code>Action&lt;object&gt; execute</code> is contravariant, but since <code>object</code> is the deepest base class, it's not that useful. For instance, you cannot exchange <code>execute</code> with an <code>Action&lt;string&gt;</code>. For this reason, consider creating also a <code>RelayCommand&lt;T&gt;</code> that accepts <code>Action&lt;T&gt; execute</code>. This class is more usable for code-behind and other application logic.</p>

<p>The <code>predicate</code> parameter should be made optional. You might also like to create an <code>AsyncRelayCommand&lt;T&gt;</code> with a composite <code>CancelCommand</code> (<a href="https://github.com/StephenCleary/Mvvm.Async/issues/3" rel="nofollow noreferrer">Example</a>).</p>
    </div>