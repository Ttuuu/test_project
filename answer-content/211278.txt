<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Unless you intend (and have carefully designed) for your KeyHandler to be extended, you should make it <code>final</code>.</p>

<p>If you <code>extend KeyAdapter</code> instead of <code>implements KeyListener</code>, you won’t have to implement <code>keyReleased</code> and <code>keyTyped</code>. The <code>Adapter</code> classes in Swing provide empty implementations of all the methods on the interface they implement, so you can just override the ones you care about.</p>

<p>Don’t use int values to represent more complex concepts - those are called “magic numbers”. In this case, just use the constants defined on <code>KeyEvent</code>, namely <code>KeyEvent.VK_BACK_SPACE</code> and <code>KeyEvent.VK_SHIFT</code>.</p>

<p>Put whitespace in between <code>if</code> and <code>(</code>. This visually differentiates control flow keywords from method names. Put whitespace after a <code>,</code> also, to make it easer to separate method arguments visually.</p>

<p>In <code>keyPressed</code>, you don’t need to declare nested <code>if</code> statements. Prefer <code>&amp;&amp;</code>.</p>

<p>Since <code>String</code> is immutable, a <code>StringBuilder</code> is preferred when doing String manipulation. You might not have covered that in class yet. It might be cleaner to use a <code>switch</code> statement on the value of the </p>

<p>It’s probably overkill to have a separate method for printing in this case.</p>

<p>You can clean up your logic by reversing the <code>this.output.length() - 1 &lt; 0</code> to be <code>this.output.length() &gt; 1</code> and getting rid of the empty clause. </p>

<p>Note that you’re deleting a character when the shift key gets pressed. Also, no matter how many times shift or delete are pressed, you’re not deleting the first character. These are both probably bugs.</p>

<p>You can just declare the initial value of <code>output</code> when you declare the variable. You don’t need a separate line in the constructor for that.</p>

<p>If you were to implement all my suggestions, your code might look more like:</p>

<pre><code>import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JFrame;

public final class KeyHandler extends KeyAdapter {

    private String output = "";
    //private final StringBuilder stringBuilder = new StringBuilder();

    public KeyHandler() {
        super();
    }

    @Override
    public void keyPressed(final KeyEvent k) {
        if ((k.getKeyCode() != KeyEvent.VK_BACK_SPACE) &amp;&amp; (k.getKeyCode() != KeyEvent.VK_SHIFT)) {
            this.output += k.getKeyChar();
        } else if (this.output.length() &gt; 1) {
            this.output = this.output.substring(0, this.output.length() - 1);
        }

        System.out.print('\f'); //clear screen in BlueJ
        System.out.println(this.output);

        /*
        switch (k.getKeyCode()) {
            case KeyEvent.VK_BACK_SPACE:
                if (this.output.length() &gt; 0) {
                    this.stringBuilder.deleteCharAt(this.stringBuilder.length() - 1);
                }
                break;
            case KeyEvent.VK_SHIFT:
                break;
            default:
                this.stringBuilder.append(k.getKeyChar());
        }

        System.out.print('\f'); //clear screen in BlueJ
        System.out.println(this.stringBuilder.toString());
         */
    }

    public static void main(final String[] args) {
        final JFrame frame = new JFrame("KeyEvent Handler");
        frame.setSize(400,400);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.addKeyListener(new KeyHandler());
        frame.setVisible(true);
    }
}
</code></pre>
    </div>