<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From my limited Rust knowledge:  (I'm a beginner too; let's learn together)</p>

<h1>Compilation</h1>

<p>I had to add <code>use std::env</code> to compile the code.  Is that a copy-paste error?</p>

<h1>Formatting</h1>

<p>Your code deviates from the official <a href="https://github.com/rust-dev-tools/fmt-rfcs/blob/master/guide/guide.md" rel="nofollow noreferrer">Rust Style Guide</a> in a few aspects:</p>

<ul>
<li><p>Separate items and statements by either zero or one blank lines (i.e., one or two newlines).  (<a href="https://github.com/rust-dev-tools/fmt-rfcs/blob/master/guide/guide.md#blank-lines" rel="nofollow noreferrer">Blank lines</a>)</p></li>
<li><p>Indentation of function parameters / arguments:</p>

<pre><code>-    fn new(first_name: String, last_name: String,
-            street: String, city: String, state: String,
-            zip_code: String) -&gt; Person {
-
+    fn new(
+        first_name: String,
+        last_name: String,
+        street: String,
+        city: String,
+        state: String,
+        zip_code: String,
+    ) -&gt; Person {
</code></pre>



<pre><code>-        let p = Person::new(String::from(data[0].trim()),
-                            String::from(data[1].trim()),
-                            String::from(data[2].trim()),
-                            String::from(data[3].trim()),
-                            String::from(data[4].trim()),
-                            String::from(data[5].trim()));
+        let p = Person::new(
+            String::from(data[0].trim()),
+            String::from(data[1].trim()),
+            String::from(data[2].trim()),
+            String::from(data[3].trim()),
+            String::from(data[4].trim()),
+            String::from(data[5].trim()),
+        );
</code></pre>



<pre><code>-        let info = format!("{}, {}, {}, {}, {}, {}\n",
-            p.first_name, p.last_name, p.street, p.city,
-            p.state, p.zip_code);
+        let info = format!(
+            "{}, {}, {}, {}, {}, {}\n",
+            p.first_name, p.last_name, p.street, p.city, p.state, p.zip_code
+        );
</code></pre></li>
<li><p>Spacing before <code>{</code>:</p>

<pre><code>-            if (j_last &lt; low_last) || (j_last == low_last &amp;&amp; j_first &lt; low_first){
+            if (j_last &lt; low_last) || (j_last == low_last &amp;&amp; j_first &lt; low_first) {
</code></pre></li>
</ul>

<p>You can apply these formatting guidelines by running <code>rustfmt</code>.  (I found these by using <code>rustfmt --check</code>, which prints a diff.)</p>

<h1>Constructor</h1>

<p>In my opinion, <code>Person::new</code> is unnecessary.  This:</p>

<pre><code>Person::new(a, b, c, d, e, f)
</code></pre>

<p>is not more readable than</p>

<pre><code>Person {
    first_name: a,
    last_name: b,
    street: c,
    city: d,
    state: e,
    zip_code: f,
}
</code></pre>

<h1><code>Result::expect</code></h1>

<p>These <code>match</code> expressions:</p>

<blockquote>
<pre><code>// Get the input file
let input_file = match File::open(format!("{}{}", "src/", &amp;args[1])) {
    Err(why) =&gt; panic!("\ncouldn't open file: {}", why),
    Ok(file) =&gt; file,
};

// Get the output file
let output_file = match File::create(format!("{}{}", "src/", &amp;args[2])) {
    Err(why) =&gt; panic!("\ncouldn't create file: {}", why),
    Ok(file) =&gt; file,
};
</code></pre>
</blockquote>

<p>can be simplified with <a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.expect" rel="nofollow noreferrer"><code>Result::expect</code></a>:</p>

<pre><code>let input_file = File::open(format!("src/{}", &amp;args[1])).expect("Couldn't open file");
let output_file = File::create(format!("src/{}", &amp;args[2])).expect("Couldn't create file");
</code></pre>

<p>Similarly:</p>

<blockquote>
<pre><code>// Write to output file
match output_file.write_all(info.as_bytes()) {
    Err(why) =&gt; panic!("\ncouldn't write to file: {}", why),
    Ok(_) =&gt; (),
}
</code></pre>
</blockquote>

<p>becomes</p>

<pre><code>output_file
    .write_all(info.as_bytes())
    .expect("Couldn't write to file");
</code></pre>

<p>Note that <code>expect</code> uses <code>fmt::Debug</code> to print the error information.  If you want to use <code>fmt::Display</code> (as your original code does), you can use <code>unwrap_or_else</code> instead of <code>expect</code>, per <a href="https://codereview.stackexchange.com/questions/241636/rust-csv-sorter-code-lookover/241640#comment474227_241640">comment</a>:</p>

<pre><code>.unwrap_or_else(|err| panic!("Couldn't open file: {}", err))
</code></pre>

<h1>Sorting</h1>

<p>You can reinventing the wheel here:</p>

<blockquote>
<pre><code>fn sort_person_vec(person_vec: &amp;mut Vec&lt;Person&gt;) {
    for i in 0..person_vec.len() {
        let mut lowest = i;

        for j in (i + 1)..person_vec.len() {
            // Temporary variables to hold first and last names
            let j_last = &amp;person_vec[j].last_name.to_lowercase();
            let j_first = &amp;person_vec[j].first_name.to_lowercase();
            let low_last = &amp;person_vec[lowest].last_name.to_lowercase();
            let low_first = &amp;person_vec[lowest].first_name.to_lowercase();

            // Swap by last name or first name if last names are equal
            if (j_last &lt; low_last) || (j_last == low_last &amp;&amp; j_first &lt; low_first) {
                lowest = j;
            }
        }
        person_vec.swap(lowest, i);
    }
}
</code></pre>
</blockquote>

<p>The lexical comparison feature of tuples can be used here:</p>

<pre><code>fn sort_person_vec(person_vec: &amp;mut Vec&lt;Person&gt;) {
    person_vec.sort_by_key(|person| {
        (
            person.last_name.to_lowercase(),
            person.first_name.to_lowercase(),
        )
    });
}
</code></pre>

<h1><code>eprintln!</code></h1>

<p>This:</p>

<blockquote>
<pre><code>println!("\nError: {}", err);
</code></pre>
</blockquote>

<p>shouldn't be printed to <code>stderr</code>:</p>

<pre><code>eprintln!("\nError: {}", err);
</code></pre>

<h1>Error handling</h1>

<p>Consider validating the data in <code>build_person_vec</code>.</p>
    </div>