<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review!</p>

<h1>lexer.hpp</h1>

<p>It is common practice to put standard headers before custom headers and sort them in alphabetical order:</p>

<pre><code>#include &lt;unordered_set&gt;
#include &lt;vector&gt;
#include "reader.hpp"
</code></pre>

<p>Usually, class names are capitalized.</p>

<p>In general, try to avoid abbreviations.  The token kinds are more readable in full name:</p>

<pre><code>enum class kinds {
    keyword,
    identifier,
    operator,
    symbol,
    int_literal,
    float_literal,
    string_literal,
    null,
};
</code></pre>

<p>(The last comma is intentional.)</p>

<p>Strings should be passed around by value.  Also, storing numbers as string probably isn't a very good idea.</p>

<p>Make a dedicated class for line-column number pairs.</p>

<p><code>std::unordered_set</code> generally performs worse than <code>std::set</code> without a carefully crafted hash function.  Use <code>std::set</code>.</p>

<p>Currently, you are maintaining the class variant yourself.  Things will become much easier if you use <code>std::variant</code>.</p>

<h1>lexer.cpp</h1>

<p>Instead of defining the default constructor yourself, use in-class member initializers and <code>= default</code> the default constructor.  The other constructor should move from <code>token_val</code>, not copy.</p>

<p><code>pos</code> can just return <code>{line, col}</code>.  (Also see above for making a dedicated position class.)</p>

<p>The lambdas don't need to explicitly specify <code>-&gt; bool</code>.  <code>is_double_oper</code> should accept by <code>const</code> reference.</p>

<p>Consistently put a space after a control keyword like <code>while</code>.</p>

<p>The <code>tokenize</code> function is becoming very very long.  It should be cut down into several functions.</p>
    </div>