<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The question could benefit from some context. You don't need to answer every one of the following, but it would be helpful for reviewers.</p>

<ol>
<li>Why have you written a morse code converter?</li>
<li>Is this going to be used by anyone else or is it a personal project? Is it a homework question? From this we can tell if the review should focus on finding security holes, or just annoying bugs.</li>
<li>What will the input look like? Can we assume nobody is going to call convert_to_word with a letters that aren't dot, dash, or space?</li>
</ol>

<hr>

<pre><code>def convert_to_morse_code(word):
    ...

def convert_to_word(word):
    ...
</code></pre>

<p>This looks a little funny, as they both take a "word", yet neither does. One takes a string which may have complete sentences, and the other takes a string containing morse code. I'd suggest adding a docstring for these functions which gives a brief explanation about the expected input.</p>

<hr>

<pre><code>if letternum.isalnum():
    string += f'{morse_code[letternum.upper()]} '
else:
    string += '  '
</code></pre>

<p>What happens if somebody comes along and helpfully adds some international morse code symbols such as "?" or "+" to the dictionary? This code will ignore those. I think the dictionary should be the source of truth, not isalnum.</p>

<pre><code>if letternum.upper() in morse_code:
    string += morse_code[letternum.upper()] + ' '
else:
    string += '  '
</code></pre>

<p>The above possibility shows that letternum is no longer an appropriate name. Lets update it the name to c or char, short for character, which is what it is. The other change I would propose here is to use the dictionary method <a href="https://www.tutorialspoint.com/python3/dictionary_get.htm" rel="nofollow noreferrer">.get</a> as it has a handy parameter 'default value'. If we set the default value as '  ' (for when the character is not a symbol we know how to write in morse code) this takes the place of the else branch.</p>

<pre><code>for char in word:
    string += morse_code.get(char, ' ') + ' '
</code></pre>

<p>I think it would be worth noting in the docstring for this function that unrecognised characters are skipped, and this is the line responsible.</p>

<hr>

<pre><code>for code in word:
    if code == '/':
        word = word.replace(code, '   ')
</code></pre>

<p>In general it is a bad idea to modify the thing you are looping over. It can lead to hard to spot bugs. The other thing to note is that the first time '/' is encountered, all occurrences of it are replaced. This doesn't need to be in a loop.</p>

<hr>

<pre><code>    for key in morse_code.keys():
        if morse_code[key] == code:
            string += key
</code></pre>

<p>This loop does a little more work than is necessary. It will get slower and slower each time a new symbol is added to the dictionary. The performance loss will honestly not be noticeable, but if you think the solution sounds nicer you can try implementing it.</p>

<p>The solution is to build a new map which is the inverse of morse_code, where all the keys become values and all the values become keys.</p>

<pre><code>morse_code = {...}
code_to_char = {code: char for char, code in morse_code.items()}
...

    if code in code_to_char:
        string += code_to_char[code]
</code></pre>

<hr>

<p>There are some small problems to which you will need to decide on the answer.</p>

<ol>
<li><code>convert_to_word(convert_to_morse_code("Hello, world!"))</code> outputs <code>'HELLO WORLD '</code>. Is that ok? Should the output match the input more closely? Why is there trailing space?</li>
<li><code>convert_to_morse_code("HI LOW")</code> outputs <code>'.... ..   .-.. --- .-- '</code>. Some variations exist, such as using a slash to indicate a space (<code>'.... .. / .-.. --- .--'</code>) or seven dots (<code>.... .. ....... .-.. --- .--</code>). Could your code have that as an optional feature?</li>
<li><code>convert_to_word</code> works on some weird input, and not on others. But it does not ever tell the user when something is wrong. I'd prefer if <code>convert_to_word('--- -, .')</code> failed in some way rather than returning <code>'OE'</code>.</li>
</ol>
    </div>