<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Aside from the given critiques (which are all correct) I have following notes:</p>

<ul>
<li>Prefixing variable names with its type (Hungarian notation) is generally considered bad style. (BTW, what does the <code>s</code> in <code>sRobotDir</code> stand for?)</li>
<li>Aside from using <code>let</code> instead of <code>const</code>, constants such as (<code>iTableX</code>, <code>iTableY</code> or <code>aDir</code> should be defined outside the main function (which would require modularization to avoid them becoming global variables). Also it would be worth considering making <code>iTableX</code> and <code>iTableY</code> configurable, so that different sized tables can be used at run-time.</li>
<li>Tokenization is too fragile for my taste. It should either should be able to handle superfluous spaces, or be more strict on what it accepts and throw more/earlier errors if it finds something invalid.</li>
<li>Having the helper functions in the middle of main function breaks the reading flow. I'd place them at the end or outside the function (again requiring modularization). Also using the conventional <code>function</code> statement instead of lambda notation would make them more readable.</li>
<li>The function <code>place</code> only needs <code>item[1]</code> as its parameter, and <code>item</code> isn't a good variable name here.</li>
<li>You have a few places where you use <code>==</code> instead of <code>===</code>.</li>
<li>I'm not sure if <code>isBelowZero</code> and <code>isBeyondTableLimit</code> are a good idea. I'd go for something like:</li>
</ul>



<pre><code>function createLimitsCheck(min, max) {
   return value =&gt; value &gt;= min &amp;&amp; value &lt; max;
} 
const checkLimitsX = createLimitsCheck(0, iTableX);
const checkLimitsY = createLimitsCheck(0, iTableY);
</code></pre>

<ul>
<li><code>!!~</code> in <code>isDirection</code> is unnecessarily cryptic.</li>
<li><code>isPosInteger</code> is over-engineered. Considering you'll need the integer value (for which you just the unary <code>+</code> operator anyway) and check it against the table limits later, I'd drop it altogether.</li>
<li><code>checkPlaceParams</code> is also over-engineered with multiple unnecessary tests:

<ul>
<li><code>arr != []</code> can never return <code>false</code>, because it compares object references and not contents.</li>
<li>I don't believe <code>arr[2]</code> can ever be anything else than a string. And even if it would be <code>isDirection</code> would then return false. (BTW, <code>typeof</code> is an operator not a function, so  don't use brackets: <code>typeof arr[2]</code>.)</li>
<li><code>isBelowZero</code> is unnecessery together with <code>isPosInteger</code> which already checked that.</li>
<li>You repeat the conversion to numbers here and back in <code>place</code> again.</li>
</ul></li>
</ul>

<p>Personnally I'd rewrite <code>checkPlaceParams</code> as follows:</p>

<pre><code>function checkPlaceParams(params) {
   const x = +params[0];
   const y = +params[1];
   const dir = whichDirection(params[2]);
   if (checkLimitsX(x) &amp;&amp; checkLimitsY(y) &amp;&amp; dir &gt; -1) {
       return [x, y, dir];
   }
   return; // undefined
 }
</code></pre>

<p>and <code>place</code> as</p>

<pre><code>function place(params) { // only pass item[1]
   const validatedParams = checkPlaceParams(params || []) // avoid passing undefined
   if (validatedParams) {
       [iRobotX, iRobotY, sRobotDir] = validatedParams;
       bRobotPlaced = true;
   } else {
       console.log( ... );
   }
}
</code></pre>
    </div>