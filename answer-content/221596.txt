<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few things you could improve. First, the most important if you want to write Python code that scales to more than a script that does just one thing, you should write functions (or classes). They have the nice feature that you can give them a name, which tells you roughly what they do, and you can give them a <code>docstring</code> which can describe what they do in even more detail.</p>

<hr>

<p><strong>Bug</strong>:</p>

<p>While you do iterate over the sheet names, you do not actually change sheets. <code>workbook.active</code> does not automatically switch to another name. Instead, directly iterate over the workbook.</p>

<hr>

<p>Otherwise here are a few suggestions:</p>

<ul>
<li><p>Instead of using <code>os.listdir</code>, you can use <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib.Path</code></a>, which has a <code>glob</code> method, to get all excel files in the current directory:</p>

<pre><code>from pathlib import Path

excel_files = Path(".").glob("*.xlsx")
</code></pre>

<p>This way you also don't have to deal with different path delimiters in Unix and Windows and manually getting the current directory.</p>

<p>Python can also work with relative paths, so no need to get the current directory at all.</p></li>
<li><p>You should use the <a href="https://effbot.org/zone/python-with-statement.htm" rel="nofollow noreferrer"><code>with</code></a> keyword to ensure that the files you open are closed, even in the event of an exception.</p></li>
<li><p><code>openpyxl</code> sheets have the attributes <code>rows</code> and <code>columns</code>, which lets you easily iterate over them. You should also learn about <a href="https://www.pythonforbeginners.com/basics/list-comprehensions-in-python" rel="nofollow noreferrer">list comprehensions</a>. In addition, a <code>csv.writer</code> has the <code>writerows</code> method that can take an iterable of rows to write.</p></li>
<li><p>Using regex just to replace a single string with nothing is overkill. You could just use <a href="https://www.w3schools.com/python/ref_string_replace.asp" rel="nofollow noreferrer"><code>str.replace</code></a>. But here building the string constructively is probably easier. Learn about <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer"><code>f-string</code>s in Python 3.6+</a>.</p></li>
<li><p>Instead of moving the file afterwards with <code>shutils</code>, directly save it to the right file.</p></li>
<li><p>Use a <a href="http://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __ name__ == "__main__":</code> guard</a> to allow importing from this script from another script.</p></li>
</ul>

<p>With these changes your code could become:</p>

<pre><code>import csv
import openpyxl
from pathlib import Path

def convert_all_sheets_to_csv(file_name, target_dir="."):
    """Convert all sheets to csv files saved in the folder `target_dir`."""
    workbook = openpyxl.load_workbook(file_name)
    out_file_name_template = Path(target_dir) / Path(file_name).stem
    for sheet in workbook:
        out_file_name = f"{out_file_name_template}_{sheet.title}.csv"
        convert_sheet_to_csv(sheet, out_file_name)

def convert_sheet_to_csv(sheet, file_name):
    """Convert the content of an excel sheet to a csv file."""
    with open(file_name, "w") as f:
        writer = csv.writer(f)
        writer.writerows([cell.value for cell in row] for row in sheet.rows)

if __name__ == "__main__":
    for excel_file in Path(".").glob("*.xlsx"):
        convert_all_sheets_to_csv(excel_file, target_dir="csv_files")
</code></pre>
    </div>