<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, <code>Vector</code> shouldn't be used here. It's essentially a synchronized <code>ArrayList</code>, and you don't need any synchronization in this case. Just change it to an <code>ArrayList</code>.</p>

<p>This has the potential to be a little faster.</p>

<hr>

<p>Second, you're using a raw <code>ArrayList</code> which isn't typesafe:</p>

<pre><code>list.add("Some nonsense"); // Doesn't cause an error
</code></pre>

<p>and is necessitating your <code>(int)</code> type-casts later on. Specify that the list is holding integers using <a href="https://en.wikipedia.org/wiki/Generics_in_Java#Motivation" rel="noreferrer">generics</a>, and it will be typesafe. Read the <code>&lt; &gt;</code> as "of" here:</p>

<pre><code>// Note how we specify what the list can hold
// An ArrayList of Integers
ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();

list.add("Some nonsense") // This causes an error now at compile time
</code></pre>

<hr>

<p>You're also doing odd stuff with the <code>Integer</code> constructor. You don't need to manually cast unboxed integers like <code>Integer(2)</code>. <code>2</code> will be "auto-boxed" into its object wrapper as necessary implicitly.</p>

<hr>

<p>You're calling <code>Integer/parseInt</code> outside of a <code>try</code>; which is risky. If the user enters bad input, your whole program with crash. Wrap it up and handle failure (yes, users will enter bad input):</p>

<pre><code>try {
    int ene = Integer.parseInt(n);
    // Code using "ene"

} catch (NumberFormatException e) {
    // Just an example. You'll need to do something more involved, like re-asking for input
    System.out.println("Parse failed");
}
</code></pre>

<hr>

<p>Just as an example of what I mentioned earlier:</p>

<pre><code>static void exchange(ArrayList arr, int k){
    ...
    int one = (int) arr.get(j);
    int two = (int) arr.get(j + half);
    Integer number_test = new Integer(one + two);
</code></pre>

<p>Make the parameter generic, and do away with the casts and boxing. Just write:</p>

<pre><code>static void exchange(ArrayList&lt;Integer&gt; arr, int k){
    ...
    int one = arr.get(j);
    int two = arr.get(j + half);
    int number_test = one + two;
</code></pre>

<p>And then similarly below that.</p>

<hr>

<p>Also, Java prefers camelCase, not snake_case. It's best to stick to the conventions of the language you're using.</p>

<hr>

<pre><code>import java.sql.Date;
</code></pre>

<p>is a little worrying. You shouldn't really be raiding a SQL library just to make use of some date object. Java has a <a href="https://docs.oracle.com/javase/10/docs/api/java/time/package-summary.html" rel="noreferrer"><code>java.time</code> package</a> for this purpose.</p>

<hr>

<p>Just as a tip,</p>

<pre><code>int two;
if (j + 1 == arr.size()) {
    two = arr.get(0);

} else {
    two = arr.get(j + 1);
}
</code></pre>

<p>Can also be written as:</p>

<pre><code>int two = j + 1 == arr.size() ? arr.get(0) : arr.get(j + 1);
</code></pre>

<p>or, alternatively:</p>

<pre><code>int two = arr.get(j + 1 == arr.size() ? 0 : j + 1);
</code></pre>

<p>Depending on how much duplication you can tolerate. The <code>? :</code> part is known as the "ternary operator"/a "conditional expression".</p>

<hr>

<pre><code>if (!primes.contains(number_test)) {
</code></pre>

<p>This is quite expensive when done on a <code>List</code> like an <code>ArrayList</code>. If you need to use <code>contains</code>, you should <em>probably</em> be using a <code>Set</code> like a <code>HashSet</code>. Membership lookups are <em>much</em> faster using sets. The time difference will become increasingly noticeable as <code>primes</code> grows.</p>
    </div>