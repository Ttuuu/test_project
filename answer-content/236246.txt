<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I am using crypto.createCipheriv and crypto.createDecipheriv for authentication.</p>
</blockquote>

<p>Encryption is mainly used for providing <em>confidentiality</em>. You'd use a MAC (message authentication code) or <em>authenticated encryption</em> if you want authentication.</p>

<p>Note that CTR decryption <em>always</em> succeeds, even if it <em>may</em> result in incorrect ciphertext. CBC decryption succeeds 1 out of 256 times if PKCS#7 compatible padding is used (and it is) if random ciphertext is fed to it. Besides that, CBC is vulnerable to padding oracle attacks. <em>Unauthenticated</em> ciphertext is always vulnerable to plaintext oracle attacks.</p>

<p>Basically, you need a MAC (such as a HMAC over <strong>the IV</strong> and the ciphertext) or authenticated encryption.</p>

<p>GCM mode is provided by CryptoJS, if I'm not mistaken. GCM already authenticates the IV - but make sure it <strong>does</strong> authenticate the tag!</p>

<blockquote>
  <p>I will store the key in the database, and the initialization vector, IV, and encrypted data in cookies.</p>
</blockquote>

<p>I presume this is a textual error, as the initialization vector <strong>is</strong> the IV.</p>

<blockquote>
  <p>If the database is compromised, the hacker will not be able to use the database keys, because they will need the code to generate the IV and the data cookies. </p>
</blockquote>

<p>The IV should never be considered a secret. The data may of course be considered secret, but the <em>algorithm to generate the data</em> should not act as a key either (see Kerckhoff's principle).</p>

<blockquote>
  <p>The database key is the same for multiple sessions, only the IV and data are different.</p>
</blockquote>

<p>That's right, as long as you don't create millions of "messages" (in this case cookies). If you overextend the key you may want to create a different key (for instance using key derivation). Probably this is not a problem for you though.</p>

<hr>

<p>Let's move to the code (which we now know is not secure).</p>

<pre><code>function encrypt(dataToEncrypt /*random data*/) {
</code></pre>

<p>Random has a very specific meaning in cryptography, so I'd try and avoid that adjective, and use "any" instead. I'd simply document your functions, and not put inline comments in the code.</p>

<pre><code>let dbKey = crypto.randomBytes(32) //db
</code></pre>

<p>Fine, although I would use 256 / 8, preferably with a constant <code>KEY_SIZE = 256</code> for the key size.</p>

<p>Don't use end-of-line comments either, as refactoring will make them disappear behind the right margin or trigger a nasty text wrap in editors.</p>

<p>Where the key is stored is not within this method, so the comment should not be present in the <em>final</em> code.</p>

<pre><code> let userKey = crypto.randomBytes(16) //cookie
</code></pre>

<p>No! An IV is not a key, and - even if it was - only the first block of ciphertext cannot be <em>decrypted without the IV</em> in CBC mode. Again, at least use a constant like <code>BLOCK_SIZE_BYTES = 16</code> or <code>IV_SIZE_BYTES = 16</code>.</p>

<pre><code>let cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(dbKey), userKey)
</code></pre>

<p>Wrong mode, but yeah.</p>

<pre><code>let encryptedData = cipher.update(JSON.stringify(dataToEncrypt))
</code></pre>

<p>JSON-ify should be performed on a separate line. Now a significant operation is hidden inside another statement.</p>

<pre><code>return { userKey: userKey.toString('hex'), dbKey: dbKey.toString('hex'), encryptedData: encryptedData.toString('hex') }
</code></pre>

<p>Ciphertext and keys are binary. I'd not stringify them unless strictly necessary. The IV and ciphertext may be concatenated and then converted to (URL-safe) base 64 to be more efficient than hex.</p>

<hr>

<p>Skipping some lines to the final part of the decryption:</p>

<pre><code>return decryptedData.toString()
</code></pre>

<p>That's no good, first you JSON-ify the input, and then you don't do the reverse during decryption. These methods should be symmetric. Either you take it out of encryption or you add it to decryption (if that's possible).</p>
    </div>