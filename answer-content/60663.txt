<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><code>tempbllist</code>? Why are we dsmvwlng? I'm sure you can find something better in the greater context of your code, but lacking that context, I can at least suggest <code>boolList</code> instead. </li>
<li><p>Seriously, what's with these variable names? What's a blen-a-bled? Ohhhh you mean <code>boolEnabled</code>? But it's an enumerable of some kind, wouldn't if be more clear if it was plural? Maybe... <code>enabledBools</code> instead?</p>

<pre><code>    foreach (var t in blenabled)
</code></pre></li>
<li><p>I almost forgot <code>t</code>.... Single letter variable names are frustrating. It's worse when people use <code>t</code> because it's an awful lot like <code>&lt;T&gt;</code>. </p></li>
</ul>

<p>Yeah. That was harsh. I know and I'm sorry that I seem to have lost my filter for a moment. Naming is <em>hard</em>. Really, really hard, but it's also incredibly important. Names in the code tell other devs what you were thinking when you wrote the code. They're better than comments when it's done right. Heck, good names <em>replace</em> comments when it's done right. This is not naming done right. </p>

<p>Ok. I'm done picking on the naming. I've just one more axe to grind. </p>

<ul>
<li>Switches are great. Seriously, I think they're the best thing since peanut butter and pickle sandwiches, but they're not always the right tool for the job. We've got more than a hammer and not every problem is a nail. A simple <code>If...Else</code> is perfect here. Why? Because there will only ever be two paths. It's true or it's false. There will never be another case. </li>
</ul>
    </div>