<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Usage</h2>

<p>Determining whether to log for a given level requires a comparison <code>level &gt;= minimumConfiguredLevel</code> (pseudo code) rather than an exact match or check against a set of preconfigured levels.</p>

<h2>Thread-Safety</h2>

<p>None of the methods are thread-safe. This could impact the state of <code>LogManager</code>, <code>Logger</code> and the file you are writing to.</p>

<h2>Consistency</h2>

<p>You provide 2 methods that do exactly the same.</p>

<blockquote>
<pre><code>public static void setLogLevel(LogLevel l) {
    currentLevel = l;
}

public static void setCurrentLevel(LogLevel currentLevel) {
    LogManager.currentLevel = currentLevel;
}
</code></pre>
</blockquote>

<h3>API Integrity</h3>

<p>You can set a level that is not allowed.</p>

<blockquote>
<pre><code>public static boolean isLevelAllowed(LogLevel l) {
    if (allowedLevels.contains(l)) {
        return (true);
    }
    return (false);
}

public static void setLogLevel(LogLevel l) {
    currentLevel = l;
}
</code></pre>
</blockquote>

<p>In addition:</p>

<ul>
<li>exceptions during logging that aren't <code>IOException</code> make your calling code having to deal with them</li>
<li>the calling thread is impacted by the logging (flushing to file all the time).</li>
</ul>
    </div>