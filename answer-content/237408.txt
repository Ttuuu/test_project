<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, some general notes:</p>

<ol>
<li><p>Eliminate unused complexity.  A couple of examples of this are your node constructor, which takes two optional arguments that you never use, and your <code>__repr__</code>, which specifies a format string but doesn't add any extra formatting -- if code is "dead" (i.e. no part of your program uses it), get rid of it so that human readers don't need to read it.</p></li>
<li><p>You don't strictly need typing in Python code, but it's a good habit to build early since it makes your code easier to check for correctness and it makes it easier for a reader to understand quickly what it does -- for example, in your <code>__main__</code> function I see that you build a tree with integers in it, but could we pass other types of things as <code>item</code>s?  Using a <code>TypeVar</code> lets you define what sorts of types it's okay to put in your container (or, if it's only supposed to hold one type, you could just annotate <code>item</code> with that type in order to make that explicit).</p></li>
<li><p><code>preorder</code> doesn't seem like a good name for this function, since I don't see that it's "ordering" anything (usually a method name is a verb that says what you're doing, not how you're doing it); the actual effect is to print out the tree.  I'd call it something more obvious like <code>print</code>.</p></li>
</ol>

<p>Now, as to your question of whether it makes sense to move logic from the <code>Node</code> to the <code>BinaryTree</code> -- IMO when you're working with trees it feels a lot more natural to have the nodes be "smart" so your top level methods can just figure out which subtree should handle a particular task and then delegate it.  Here's what your tree might look like with more of the logic moved toward the top; you can judge for yourself whether having the logic in <code>BinaryTree</code> is any better than having it in <code>Node</code>:</p>

<pre><code>from typing import Generic, Optional, TypeVar

# These are the kinds of values that can go in our tree.
V = TypeVar('V', int, float, str) 

class Node(Generic[V]):
    """A node in a binary tree."""
    def __init__(self, item: V):
        self.item: V = item
        self.left: Optional['Node'] = None
        self.right: Optional['Node'] = None

    def __repr__(self) -&gt; str:
        return repr(self.item)


class BinaryTree(Generic[V]):
    """A binary tree."""
    def __init__(self):
        self.root: Optional[Node[V]] = None

    def add_node(self, value: V) -&gt; None:
        """Add the given value to the tree."""
        if not self.root:
            # This is the first node; make it the root.
            self.root = Node(value)
            return

        child = Node(value)
        # Find a spot under the root to add the new child node.
        node = self.root
        while node:
            if value &lt; node.item:
                if node.left:
                    node = node.left
                else:
                    node.left = child
                    return
            elif value &gt; node.item:
                if node.right:
                    node = node.right
                else:
                    node.right = child
                    return
            else:
                return

    def print(self):
        """Print out the tree."""
        def print_node(node: Optional[Node[V]]) -&gt; None:
            if not node:
                return
            print_node(node.left)
            print(node)
            print_node(node.right)
        print_node(self.root)
</code></pre>
    </div>