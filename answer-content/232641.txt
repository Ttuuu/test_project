<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I really liked the way you used <code>Termbox</code>; you should try <code>Tcell</code> as well for fun.</p>
<h1>Review</h1>
<p>The function <code>initiate</code> is doing 2 jobs: generate the world and randomize.</p>
<p>They could be 2 functions as below:</p>
<pre><code>func initiate(maxCol, maxRow) *GameOfLife {

    b := &amp;GameOfLife{
        cells: make([][]Cell, int(math.Max(float64(maxCol), float64(maxRow)))),
    }
}
</code></pre>
<p>and Randomization could be a separate function.</p>
<p>Also, <code>randInt</code> could be better achieved with a seed:</p>
<pre><code>seed := rand.New(rand.NewSource(time.Now().Unix()))
</code></pre>
<p>and then you may call <code>seed.Intn(30)</code> 30 here being the upper limit</p>
<p>Neighbors function <code>Nighbors</code> is bit messy; you could add more readability here. Which will just return Count of Neighbors and pass it to <code>Cell.NextState</code></p>
<p>The <code>Cell</code> could be a struct and have the method <code>NextState</code>
e.g.</p>
<pre><code>func (c *Cell) NextState(neighbours int) {
    if c.Alive &amp;&amp; (neighbours &lt; 2 || neighbours &gt; 3) {
      c.Alive = false
  }

  if c.Alive &amp;&amp; (neighbours == 2 || neighbours == 3) {
     c.Alive = true
  }

  if !c.Alive &amp;&amp; neighbours == 3 {
     c.Alive = true
  }
}
</code></pre>
<hr>
<p>You could have a separate directions struct and loop through each <code>Direction</code>,
and have another method to get the Direction Cell e.g.</p>
<pre><code>func (b GameOfLife) getCell(x, y int) Cell {
    return b.cells[x+(y*wl.width)]
}
 
func(b GameOfLife) Plus(x, y int, direction Vector) Cell {
    return b.getCell(x+direction.x, y+direction.y)
}

var DirectionNames = strings.Split("n ne e se s sw w nw", " ")
var Directions = map[string]Vector{
    "n":  {0, -1},
    "ne": {1, -1},
    "e":  {1, 0},
    "se": {1, 1},
    "s":  {0, 1},
    "sw": {-1, 1},
    "w":  {-1, 0},
    "nw": {-1, -1},
}
</code></pre>
<p>In the same way, I see <code>NextGen</code> could be refactored into more functions to have better readability here.</p>
    </div>