<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Caching</h1>

<p>You are using <code>sums</code> as a cache for your dynamic programming.  Python comes with built-in caching (<a href="https://docs.python.org/3/library/functools.html?highlight=cache#functools.lru_cache" rel="nofollow noreferrer"><code>functools.lru_cache</code></a>), so you don't need to implement your own.  Using it will avoid polluting the global namespace.</p>

<h1>Integer Square-Root</h1>

<p>With Python3.8 comes a built-in <a href="https://docs.python.org/3/library/math.html?highlight=isqrt#math.isqrt" rel="nofollow noreferrer"><code>math.isqrt</code></a>, rendering the idiom <code>int(n**(1/2))</code> obsolete.</p>

<h1>Unnecessary filtering</h1>

<pre><code>    squares = [i**2 for i in range(1, isqrt(n) + 1)]
    while len(squares) and squares[-1] &gt; n:
        squares.pop()
</code></pre>

<p>Here, you are generating all the squares up to (and including if it is a perfect square) <code>n</code>.  Then, you check if the last item is larger than <code>n</code>.  It is impossible for it to be, so <code>squares.pop()</code> will never be executed, making the entire <code>while</code> loop redundant code which can be deleted.</p>

<h1>Unnecessary (and suspicious) minimum</h1>

<pre><code>    s = 2**31
    for i in squares:
        s = min(s, numSquares(n - i) + 1)
</code></pre>

<p>Here, <code>2**31</code> is used as a value larger than any possible value, so you can compute the minimum in the <code>for</code> loop.  But is it really larger than any possible value???  I can think of larger values, but perhaps it comes from the challenge text.</p>

<p>Still, Python provides a better way: the <code>min(...)</code> function and list comprehension:</p>

<pre><code>    s = min(numSquares(n - i) + 1 for i in squares)
</code></pre>

<p>This loops through all squares, and evaluates <code>numSquares(n - i) + 1</code> for each one, and selects the minimum value.  No magic "value larger than any possible value" value is required.</p>

<p>Still, it can be made even more efficient.  If there are 10,000 squares, we add one to each result, and take the minimum.  That's 10,000 plus one operations.  If we compute the minimum value, and add one to that, we've saved 9,999 additions.</p>

<pre><code>    s = min(numSquares(n - i) for i in squares) + 1
</code></pre>

<h1>Unnecessary list creation</h1>

<p>The code would now read:</p>

<pre><code>    squares = [i**2 for i in range(1, isqrt(n) + 1)]
    s = min(numSquares(n - i) for i in squares) + 1
</code></pre>

<p>We create a list of <code>squares</code> and then immediately loop through that list exactly once, and never use it again.  Creating the list is an unnecessary step, that consumes memory and wastes time.  Just compute the squares on the fly!</p>

<pre><code>    s = min(numSquares(n - i ** 2) for i in range(1, isqrt(n) + 1)) + 1
</code></pre>

<h1>PEP-8</h1>

<p>Functions and variables should be in <code>snake_case</code>, not <code>mixedCase</code>.  Your function should be named <code>num_squares</code>.</p>

<p>There should be a space around binary operators like <code>**</code> and <code>/</code>.</p>

<p>Variable names like <code>s</code> are meaningless.  Variable names should be descriptive.  <code>s</code> is the minimum count of the terms summing to <code>n</code>; <code>min_terms</code> would be more descriptive.</p>

<h1>Updated Code</h1>

<pre><code>from functools import lru_cache
from math import isqrt

@lru_cache(maxsize=None)
def num_squares(n: int) -&gt; int:

    root_n = isqrt(n)
    if root_n ** 2 == n:
        return 1

    return min(num_squares(n - i ** 2) for i in range(1, root_n + 1)) + 1
</code></pre>

<h1>Further improvements</h1>

<p>Consider 10001.  It is not a perfect square.  So you start subtracting squares off it, beginning with <span class="math-container">\$1^2\$</span> and discover <span class="math-container">\$10001 - 1^2 = 100^2\$</span>, for <code>min_terms</code> of 2.  You should stop searching; there will be no better answer.  But instead, you will continue with <span class="math-container">\$10001 - 2^2\$</span>, and figure out the <code>num_squares()</code> of that, and then try 
<span class="math-container">\$10001 - 3^2\$</span> and so on.  This is all busy work.</p>

<p>Determining how to prune the search tree left as exercise to student.</p>
    </div>