<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is already a good piece of code. Good job.</p>

<p>I can imagine some improvements for your code:</p>

<p><strong>Exceptions:</strong></p>

<p>Except a typo into the name of <code>NonExistingBankAccountException</code> I would suggest 
to move the construction of the message in the exception itself. So that you 
will always have the same message and your code is more concise:</p>

<pre><code>new NonExistingBankAccountException(String accountId)
</code></pre>

<p><strong>Bank:</strong></p>

<p>There is a good Object Oriented case study into your <code>calculateAmount</code> method: How can you get rid of this switch ? </p>

<p>The <code>switch</code> expression is useful but may be a code smell in some case. And it can be a code smell in your case.</p>

<p>Imagine that you want to add another <code>InterestType</code>. You should change this enum 
AND your <code>Bank</code> class. What can you do to preserve the <em>single responsibility principe</em> ?</p>

<p><strong>BankAccount:</strong></p>

<p>For the withdraw forbidden rule when interest is greater than 1% I will also 
use an exception but provide a test method to verify if we can withdraw. 
Having a interest under % is then a pre-condition of the <code>withdraw</code> method.</p>

<p>For the <em>operations</em>, instead of storing a list of strings, you can view the operations as executable treatments on the account. So you do not have to maintain the state of the account but storing his operations history and executing them to have the current state. This a kind of <em>event sourcing</em> that I suggest in another similar question : <a href="https://codereview.stackexchange.com/a/188370/115154">https://codereview.stackexchange.com/a/188370/115154</a></p>

<p><strong>CommandLineInterpreter:</strong></p>

<p>There is a typo in <code>showOpitons</code>. </p>

<p><strong>Person:</strong></p>

<p>It is usually easier to store the birth date instead of the age. Because the age 
change in time while the birth date don't. And you can always compute the age 
from the birth date. </p>

<p><strong>Your question:</strong></p>

<blockquote>
  <p>I cannot yet grasp the difference when I should return true/false on
  success/failure of a method and when to throw an exception.</p>
</blockquote>

<p>I would just say that exceptions are for exceptional cases, an exception occur 
when you encounter and invalid state but they should never be used to control 
the flow of your program while booleans can.</p>

<p>This is sometimes more clear when you use reason with pre and post conditions. 
An exception is thrown when a pre condition is not matched:</p>

<pre><code>/**
 * Attempt to remove the given amount from this account balance.
 * @param amount a positive double indicating the amount to be withdrawn. `&gt; -1`.
 * @return true when the amount has been withdrawn. Otherwise false.
 * @throw InvalidAmountException iff the amount is a nagtive number.
boolean withdraw(double amount) {
  // ...
}
</code></pre>

<p>The param has a precondition of being positive. If this precondition is not met, 
then you may receive an exception. However for some reasons it happens that 
everything is fine but the withdrawal cannot be executed. Then you get a <code>false</code> 
because this is no due to a violation of the contract or invalid state.</p>
    </div>