<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Parameters</strong></p>

<p>You could achieve something similar by making real parameters with boolean values such that you can type <code>MyPackage.ps1 1 1 0</code>; feeding 3 positional, named, parameters at a cost of two presses of the space bar.</p>

<p>It's not that much slower to type and makes it a lot easier to understand the code (in my opinion).</p>

<p>In addition, you're easily able to add parameter help.</p>

<pre><code>param(
    [Parameter(Mandatory = $true, Position = 1)]
    [Boolean]$Build,

    [Parameter(Mandatory = $true, Position = 2)]
    [Boolean]$Pack,

    [Parameter(Mandatory = $true, Position = 3)]
    [Boolean]$Push
)
</code></pre>

<p>Make $Build default to true perhaps and you have a "Control+Shift+B"-able script.</p>

<p><strong>Ticks</strong></p>

<p>I'd consider killing off those ` you have everywhere. A misplaced space after one would break those very easily.</p>

<p>I would generate arguments as an array and feed the call operator. For calls to internal PowerShell commands I would favour splatting for long parameter lists.</p>

<pre><code>$packArgs = @(
    'pack'
    "$PSScriptRoot\$packageId.nuspec"
    "-properties", "configuration=release"
    "-outputdirectory", "C:\NuGet\packages\"
)
&amp; nuget $packArgs
</code></pre>

<p><strong>XML handler</strong></p>

<p>Perhaps consider using Select-Xml as it can read directly from a file.</p>

<p><strong>GetFileNameWithoutExtension</strong></p>

<p>There's an alternative perhaps:</p>

<pre><code>([System.IO.FileInfo]$pscommandpath).BaseName
</code></pre>

<p>Or, of course, the original but derived from $pscommandpath.</p>

<p><strong>Alternative approaches</strong></p>

<p>This is a simple build script, but had you looked at psake? <a href="https://github.com/psake/psake" rel="nofollow">https://github.com/psake/psake</a>.</p>
    </div>