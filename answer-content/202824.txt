<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>JavaScript conventions.</h1>

<h3>Block delimiting</h3>

<p>Javascript has the opening <code>{</code> on the same line as the statement</p>

<pre><code>// Conventional JS
if (foo === bar) {

// Un-conventional JS
if (foo === bar) 
{
</code></pre>

<h3>Capitalizing</h3>

<p>Unlike C syntax like languages, JavaScript does not capitalize functions (methods).</p>

<p>The convention is functions start with lowercase</p>

<p>The function <code>AddDataElement</code> should be named  <code>addDataElement</code> and the same for all the other function you have capitalized</p>

<p>Only objects that are to be instantiated with the <code>new</code> token should be named with a capital.</p>

<p>eg</p>

<pre><code>function MyObj(data) { this.data = data }
const obj = new MyObj("foo");
</code></pre>

<p>To add to the complexity you can create functions that can be instantiated with or without the <code>new</code> token, commonly known as factory functions. The convention is somewhat ambiguous in this case.</p>

<h3>Equality operators</h3>

<p>In JS variables are cast automatically. This presents a problem when using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators" rel="nofollow noreferrer">equality operators</a> as it is often the case that you want to test the type as well. To solve this JS has 4 types of equality operators.</p>

<ul>
<li>Equality <code>==</code>  coerces the right side to the same type as the left</li>
<li>InEquality <code>!=</code> coerces the right side to the same type as the left</li>
<li>Strict Equality <code>===</code>  There is no type coercion</li>
<li>Strict Inequality <code>!==</code> There is no type coercion</li>
</ul>

<p>As type coercion in Javascript is a little complex newbies can get caught out using Equality operators.</p>

<p>The convention is to err on the side of type and use the strict version of equality <code>===</code> and inequality <code>!==</code> . Its a little hard getting used to but you very seldom need to use <code>==</code> or <code>!=</code> in JavaScript.</p>

<h3>Declaration type.</h3>

<p>Good to see appropriate use of <code>var</code> (for function scope) and <code>let</code> (for block scope) variables. But you have neglected <code>const</code> for constants, which are block scoped. Variables reference Arrays and Objects so unless you are reassigning the reference its is conventional to use <code>const</code> for references. </p>

<p>When JS is parsed function scoped variables are automatically moved to the top of their scope (hoisted). It is conventional to also do this in the source.</p>

<h3>Commenting your source</h3>

<p>Rather than list out all the other points I have taken one function and modified it with comments and code to better match best practice </p>

<pre><code>"use strict"; // For better code quality and improved performance 
              // Add this directive to the top (first line) of the function
              // or the first line of a javascript file or script element

function updateCard(widget, widgetData) {  // myWidget ?? better as widget or card
    // Functions can be scoped to functions and helps with encapsulation so
    // zeroPad would be best here if this function is the only place you use it
    // they are also hoisted and belong at the top of their scope.
    function zeroPad(num, places) {
       var zero = places - num.toString().length + 1;
       return Array(+(zero &gt; 0 &amp;&amp; zero)).join("0") + num;
    }

    // You can also use arrow syntax as a const
    const zeroPad = (num, places) =&gt; {
       const zero = places - num.toString().length + 1;
       return Array(+(zero &gt; 0 &amp;&amp; zero)).join("0") + num;
    }

    // Yet why not just use String.padStart
    // and a default value for places that is assigned if places is undefined
    const zeroPad = (num, places = 2) =&gt; ("" + num).padStart(places,"0");
    // the ("" + num) coerces num to a string

    // However you should be using locale format for date and time.


    // function scoped vars hoisted to top of function
    // var data; // but this should be a const in the for loop

    // card as a constant
    const card = widget;  // do you really need an alias. Why not name the argument card?

    if (widgetData.AlarmNumber !== 0) {  // strict inequality
        card.style.backgroundColor = "red"; 
        card.classList.add("blink-me");  // can use element.classList
                                         //  https://developer.mozilla.org/en-US/docs/Web/API/Element/classList
    } else if (widgetData.ExecutionMode !== "Running")  { // else on same line as closing }
        card.className = "card";
        card.style.backgroundColor = "Orange";
    } else {
        card.style.backgroundColor = null; // or assign "" and then use a ternary rather than two statements
        card.className = "card";
    }

    /*
    Would be preferable to use locale for date and time or the date/time can
    be incorrectly interpreted.
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString
    */
    const dateTime = new Date();
    /* Use template literals
       https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals */
    const dateString = `${dateTime.toLocaleDateString()} "${dateTime.toLocaleTimeString()}`;


    addDataElement(card, "title", widgetData.machineID, false); // spaces after commas
    addDataElement(card, "subtitle", widgetData.executionMode, false);

    // You are not using the index i apart from indexing the property
    /*
    for (let i = 0; i &lt; properties.length; i++) {
        data = widgetData[properties[i]];
        addDataElement(card, properties[i], data);
    }
    */

    // use a for of loop
    for (const property of properties) {
        /* const data = widgetData[property];  // data better as const rather than function scoped */
        addDataElement(card, property, widgetData[property]); // or just add data directly
    }


    addDataElement(card, "Timestamp", dateString);

}


// You can assign properties via Object.assign
newdiv = document.createElement("div");
newdiv.className = "card-title";
newdiv.id = "title";
newdiv.textContent = "title";
parent.appendChild(newdiv);

// can be
parent.appendChild(
    Object.assign(document.createElement("div"), {
    className : "card-title",
    id : "title",
    textContent : "title",
}));

// Better yet as you repeat the same code over and over use some functions
const appendTo = (el, tag, props) =&gt; el.appendChild( Object.assign(document.createElement(tag), props))
const props = (className, id, textContent = id) =&gt; ({className, id, textContent});

// and your source code complexity is reduced

var parent= document.createElement("div");
parent.className = "card";
parent.id = "widget-" + cardID; 
parent.style = "height:500px;";
appendTo(parent, "div", props("card-header", "")); 
const card = parent;
parent = appendTo(parent, "div", props("card-body", "cardbody", "")); 
appendTo(parent, "div", props("card-title", "title"));
appendTo(parent, "div", props("card-sub-title", "subtitle"));    



// Pulling out the repeated code
const createDiv = () =&gt; document.createElement(tag);
const appendTo = props =&gt; parent.appendChild( Object.assign(createDiv(), props));
const props = (className, id, textContent = id) =&gt; ({className, id, textContent});

var parent = createDiv();
const card = parent;
parent.className = "card";
parent.id = "widget-" + cardID; 
parent.style = "height:500px;";
appendTo(props("card-header", "")); 
parent = appendTo(props("card-body", "cardbody", "")); 
appendTo(props("card-title", "title"));
appendTo(props("card-sub-title", "subtitle"));    
parent.appendChild(createDiv());

return card;
</code></pre>

<p>Without the comments and copied code sections the above <code>updateCard</code> function becomes</p>

<pre><code>"use strict"; 
function updateCard(card, data) {  

    if (data.alarmNumber !== 0) {  
        card.style.backgroundColor = "red"; 
        card.classList.add("blink-me");  
    } else {
        card.className = "card";
        card.style.backgroundColor = data.executionMode !== "Running" ? "Orange" : "";
    }

    addDataElement(card, "title", data.machineID, false);
    addDataElement(card, "subtitle", data.executionMode, false);

    for (const property of properties) {
        addDataElement(card, property, data[property]); 
    }

    const dateTime = new Date();
    addDataElement(
        card, 
        "Timestamp", 
        `${dateTime.toLocaleDateString()} ${dateTime.toLocaleTimeString()}`
    );
}
</code></pre>
    </div>