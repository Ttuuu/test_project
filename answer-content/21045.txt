<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Beside avoiding mutations, functional mindset demands to split into elementary functions, along two axes:</p>

<ol>
<li>Decouple responsibilities.</li>
<li>By case analysis (eg pattern matching). Here scalar vs dict. </li>
</ol>

<p>Regarding 1, nested dict traversal has nothing to do with the requirement to create dot separated keys. We've better return a list a keys, and concatenate them afterward. Thus, if you change your mind (using another separator, making abbreviations...), you don't have to dive in the iterator code -and worse, modify it.</p>

<pre><code>def iteritems_nested(d):
  def fetch (suffixes, v0) :
    if isinstance(v0, dict):
      for k, v in v0.items() :
        for i in fetch(suffixes + [k], v):  # "yield from" in python3.3
          yield i
    else:
      yield (suffixes, v0)

  return fetch([], d)

def flatten_dict(d) :
  return dict( ('.'.join(ks), v) for ks, v in iteritems_nested(d))
  #return { '.'.join(ks) : v for ks,v in iteritems_nested(d) }
</code></pre>
    </div>