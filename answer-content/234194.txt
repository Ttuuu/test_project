<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Personally I use <a href="https://prospector.readthedocs.io/en/master/index.html" rel="nofollow noreferrer">Prospector</a> and <a href="http://flake8.pycqa.org/en/latest/" rel="nofollow noreferrer">Flake8</a> with a lot of plugins. The problem with linter runners is that they don't support many of the lint tools available in the Python ecosystem. But, for the most part these two should be good enough tho.</p>

<p><strong>Note</strong>: I am in the contributors for Prospector.</p>

<p>So let's run these programs.</p>

<pre><code>$ pip install prospector[with_everything]
$ prospector --strictness veryhigh -DF -w vulture -w mypy
$ pip install flake8
$ flake8
</code></pre>

<p>To increase readability of this answer I've combined the output.</p>

<ul>
<li>Docstrings

<ul>
<li>Multi-line docstring summary should start at the second line</li>
<li>1 blank line required between summary line and description (found 0)</li>
<li>Multi-line docstring closing quotes should be on a separate line</li>
<li>No whitespaces allowed surrounding docstring text</li>
<li>First line should end with a period</li>
<li>Missing docstring in public function</li>
</ul></li>
<li>Style

<ul>
<li>function name should be lowercase</li>
<li>argument name should be lowercase</li>
<li>Redefining name '...' from outer scope</li>
<li>Function name "..." doesn't conform to snake_case naming style</li>
<li>Variable name "..." doesn't conform to snake_case naming style</li>
<li>Unnecessary parens after 'if' keyword</li>
<li>Constant name "..." doesn't conform to UPPER_CASE naming style</li>
<li>line too long (82 &gt; 79 characters)</li>
</ul></li>
<li>Other

<ul>
<li>Do not use <code>len(SEQUENCE)</code> to determine if a sequence is empty</li>
<li>(false negative) Possible unbalanced tuple unpacking with sequence: left side has 2 label(s), right side has 0 value(s)</li>
<li>Unused variable 'title'</li>
</ul></li>
</ul>

<p>The docstrings and style problems should be relatively easy to fix. The only strange comment is the constant one. This is because you have variables in global scope, which in Python is assumed to be a global constant.</p>

<pre><code>#!/usr/bin/env python
"""
Code Review question fetcher.

Given the number of the question, uses the StackExchange API version 2.2
to fetch the markdown of the question and write it to a local file with
the name given as the second argument.
"""

import sys
import urllib.request
import urllib.parse
import urllib.error
import io
import os
import gzip
import json
import struct
import html.parser
from subprocess import call


def _make_url(qnumber):
    return 'https://api.stackexchange.com/2.2/questions/' + \
        str(qnumber) + \
        '/?order=desc&amp;sort=activity&amp;site=codereview' + \
        '&amp;filter=!)5IYc5cM9scVj-ftqnOnMD(3TmXe'


def _fetch_compressed_data(url):
    compressed = urllib.request.urlopen(url).read()
    stream = io.BytesIO(compressed)
    return gzip.GzipFile(fileobj=stream).read()


def _fetch_question_markdown(qnumber):
    url = _make_url(qnumber)
    try:
        data = _fetch_compressed_data(url)
    except urllib.error.URLError as err:
        if hasattr(err, 'reason'):
            print('Could not reach server.')
            print(('Reason: ', err.reason))
            sys.exit(1)
        elif hasattr(err, 'code'):
            print(f'Error: {err.code}: while fetching data from {url}')
            sys.exit(1)
    try:
        message = json.loads(data)
    except json.JSONDecodeError as err:
        print(f'Error: {err.msg}')
        sys.exit(1)
    return message['items'][0]


def _get_message():
    raw_length = sys.stdin.buffer.read(4)
    if len(raw_length) == 0:
        sys.exit(0)
    message_length = struct.unpack('@I', raw_length)[0]
    _send_message(_encode_message(
        f'attempting to read {message_length} bytes'
    ))
    message = sys.stdin.buffer.read(message_length).decode('utf-8')
    return json.loads(message)


# Encode a message for transmission,
# given its content.
def _encode_message(message_content):
    encoded_content = json.dumps(message_content).encode('utf-8')
    encoded_length = struct.pack('@I', len(encoded_content))
    return {'length': encoded_length, 'content': encoded_content}


# Send an encoded message to stdout
def _send_message(encoded_message):
    sys.stdout.buffer.write(encoded_message['length'])
    sys.stdout.buffer.write(encoded_message['content'])
    sys.stdout.buffer.flush()


def _main():
    if len(sys.argv) != 3:
        print(f'Usage: {sys.argv[0]} fetchQ questionnumber mdfilename')
        sys.exit(1)
    qnumber, qname = sys.argv[1:3]
    # are we being called as a Web Extension?
    if qname == 'autoproject@beroset.com':
        msg = _get_message()
        basedir = os.getenv('AUTOPROJECT_DIR', '/tmp')
        qnumber = msg['question_id']
        qname = f'{basedir}/{qnumber}.md'
    else:
        msg = _fetch_question_markdown(qnumber)

    markdown = (
        html.unescape(msg['body_markdown'])
            .replace('\r\n', '\n')
            .encode('utf-8')
    )
    title = html.unescape(msg['title']).encode('utf-8')
    header = (
        b'# [{title}]'
        b'(https://codereview.stackexchange.com/questions/{qnumber})\n\n'
    )
    with open(qname, 'wb') as question_file:
        question_file.write(header)
        question_file.write(markdown)
    call(["autoproject", qname])


if __name__ == '__main__':
    _main()

</code></pre>

<hr>

<ul>
<li>Don't use <code>if len(foo) != 0:</code> instead use <code>if foo:</code></li>
<li>You didn't prepend an <code>f</code> to your <code>header</code> string to add <code>title</code> or <code>qnumber</code> to it. It should be noted that <code>fb''</code> and <code>bf''</code> are not valid Python syntax.</li>
<li>Using <code>\</code> rather than <code>()</code> to split lines is discouraged. I'm surprised the linters didn't pick this up.</li>
<li>Using <code>sys.stdout</code> and <code>sty.stdin</code> is very rare. The only time I've had to use them is when I was interacting with <code>subprocess.Popen</code> or had low level interactions with the terminal.</li>
<li><p><code>sys.exit</code> isn't really something you see in Python. If you have an error use an error.</p>

<p>As a quick monkey patch I'll move all the error handling outside the <code>main</code>.</p></li>
<li><p><code>urllib.request</code> is discouraged <em>in the Python documentation</em> for most users. Please, upgrade to <code>requests</code>. This can remove the need for <code>fetch_compressed_data</code> and <code>fetch_question_markdown</code>.</p></li>
<li>I don't see the point in having <code>encodeMessage</code> and <code>sendMessage</code> as two separate functions. I'd personally just used a sized print.</li>
<li>I don't really see the point in using bytes all the time. In Python 3 strings are UTF-8 internally. So, to me, you're just making life harder by using bytes.</li>
</ul>

<p>In total this would look more like this untested code. I can't really simplify <code>_get_stdin_message</code> as it would require breaking changes.</p>

<pre><code>#!/usr/bin/env python
"""
Code Review question fetcher.

Given the number of the question, uses the StackExchange API version 2.2
to fetch the markdown of the question and write it to a local file with
the name given as the second argument.
"""

import sys
import os
import json
import struct
import html.parser
import subprocess

import requests


class _SilentError(Exception):
    pass


def _fetch_se_question(question_id):
    url = (
        f'https://api.stackexchange.com/2.2/questions/'
        f'{question_id}'
        f'/?order=desc&amp;sort=activity&amp;site=codereview'
        f'&amp;filter=!)5IYc5cM9scVj-ftqnOnMD(3TmXe'
    )
    r = requests.get(url)
    r.raise_for_status()
    return r.json()['items'][0]


def _sized_print(content):
    length = struct.pack('@I', len(content))
    print(f'{length}{content}', end='')


def _get_stdin_message():
    raw_length = sys.stdin.buffer.read(4)
    if not raw_length:
        raise _SilentError('Message is empty')
    message_length = struct.unpack('@I', raw_length)[0]
    _sized_print(json.dumps(f'attempting to read {message_length} bytes'))
    message = sys.stdin.buffer.read(message_length).decode('utf-8')
    return json.loads(message)


def _main_inner():
    if len(sys.argv) != 3:
        raise ValueError(
            f'Usage: {sys.argv[0]} fetchQ questionnumber mdfilename'
        )

    q_id, file_name = sys.argv[1:3]
    # are we being called as a Web Extension?
    if file_name != 'autoproject@beroset.com':
        msg = _fetch_se_question(q_id)
    else:
        msg = _get_stdin_message()
        basedir = os.getenv('AUTOPROJECT_DIR', '/tmp')
        q_id = msg['question_id']
        file_name = f'{basedir}/{q_id}.md'

    with open(file_name, 'w') as question_file:
        title = html.unescape(msg['title'])
        question_file.write(
            f'# [{title}]'
            f'(https://codereview.stackexchange.com/questions/{q_id})\n\n'
        )
        question_file.write(
            html.unescape(msg['body_markdown'])
                .replace('\r\n', '\n')
        )

    subprocess.call(["autoproject", file_name])


def _main():
    try:
        _main_inner()
    except _SilentError:
        pass
    except Exception as err:
        print(f'{type(err).__qualname__}: {err}')
    else:
        return
    sys.exit(1)


if __name__ == '__main__':
    _main()
</code></pre>
    </div>