<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a very good for a few months of experience! You're on the right track with trying to separate concepts out into objects, but I think you made some strange decisions in your <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">separating of concerns</a> that I'll call out in addition to some stylistic things. Also decent documentation; keep that up!</p>

<ul>
<li>Java is kind of verbose. This includes package names. Typically packages are named <code>(com|org|net).yourdomain.yourproject</code> (ex <code>org.apache.commons</code>). Now, since your package isn't meant to be used by anyone else, you can get away with this naming scheme. But, that doesn't mean you shouldn't follow the convention.</li>
<li>Your inheritance is strange. The chain for <code>Snake</code> is: <code>Snake</code> is composed of <code>Body</code> (which has a <code>Direction</code>) which is a <code>Block</code>. The chain for <code>Apple</code> is: <code>Apple</code> is a  <code>Block</code>. While I see what you were trying to do here, the separation is odd. The <code>Block</code> superclass (which should be <code>abstract</code>, instantiating a <code>Block</code> means nothing) just encapsulates position. If block also handled drawing (since in the original snake, the snake's body and apples were just single pixels on a screen), this would make more sense. But, in this case, I'd recommend composition over inheritance. Create an immutable <code>Point</code> and give an <code>Apple</code> a <code>Point</code> member variable (instead of extending it). Instead of having the <code>Body</code> class, just give the <code>Snake</code> a ordered collection of points that form its body (more on both of these later).</li>
<li>You do not need to redefine a constructor if all it does is call <code>super</code> with the same args.</li>
<li><code>Map</code> conflates two concerns: holding the game state and rendering the game state. Ideally you'd separate this or push drawing concerns into the objects themselves.</li>
<li>Never <code>e.printStackTrace()</code> outside of development. You'd want to display a nice error message. You can achieve this by letting the exception bubble up and catching it at a layer that can show UI. An editor like IntelliJ will be able to help with this because it can show you the path that an exception will bubble up (by making you add <code>throws</code> clauses to function definitions in Java 8).</li>
<li><code>placeApple</code> should not be a method on <code>Apple</code>. If you were going to do that, call it <code>randomizePosition</code>, because that's what it actually does. But I'd recommend against that. In general, immutability is much easier to reason about. We'll discuss this in detail later. (In the end, <code>placeApple</code> should be a method of <code>Map</code>)</li>
<li><code>Movement</code> is a strange class. I understand it ties into your game loop. I'd call it <code>GameTickHandler</code>, because it handles what actions should be taken every game "tick." I also wouldn't use <code>java.util.TimerTask</code>. I believe you have potential data races because <code>TimerTask</code> runs in a separate thread. In general, there's a more common pattern for games that I'll advocate for below.</li>
<li><code>Movement</code> contains a lot of logic that should be in <code>Direction</code> (particularly the end of <code>run</code>). If you have an immutable <code>Point</code> then you could have a method <code>movedTowards(Direction d)</code> which returns a new <code>Point</code> moved in that direction. You can test this separately without having to deal with all of the complexities in <code>Movement</code> at all.</li>
<li>Don't <code>System.exit(0)</code>! Display some useful message to your user. The pattern I'll advocate that you use (mentioned above, more detail later) will make this easy.</li>
<li>How you check for collisions is strange. I'm imagining an API that is much clearer and separates concerns better. Give snake two methods <code>intersectSelf</code> and <code>intersect(Apple a)</code>. This way only a snake decides what these mean. And if you need to check these multiple times, you don't have to duplicate the "head is touching a part of the body" logic.</li>
<li>I don't like how <code>UserInput</code> has a <code>head</code> and <code>map</code>. Ideally it should have some internal state indicating the last direction pushed and one getter (<code>getDirection</code>) that is used by the game loop (more on that below). It should definitely not have all of the logic of moving the snake! That should be the responsibility of <code>Snake</code>.</li>
<li>Why <code>SNAKE_SPEED</code> in <code>Driver</code>? What units is it in?</li>
<li><code>.getUser().getHead()</code> is everywhere in your code. That should be a sign that some refactoring is necessary.</li>
</ul>

<p>Now let's talk about the big idea. What you need is a game loop. No timers, no threads. You want the <a href="http://gameprogrammingpatterns.com/game-loop.html" rel="nofollow noreferrer">game loop pattern</a>. The high level idea is that your game is a object with two methods <code>update(double elapsedTime)</code> and <code>draw()</code>. The first is called frequently and handles keyboard input, updating game state, checking collisions, determining win/loss scenarios. The second is called less frequently (but ideally at 60fps) after the game state is updated and is responsible for drawing the current game state to the screen.</p>

<p>More on that later. Let's start by simplifying your "game objects." We'll start by making an immutable <code>Point</code>. Why immutable? Well, simply put when things change it's very hard to keep all of that in the back of your mind while you're coding. Say for example that we created a <code>Point</code> with members <code>public int x, y;</code> Then <code>Apple</code> has a <code>public Point position;</code>. Anyone who has that apple can change its position. An apple should never move once placed. We have no way of ensuring that other than to keep in the back of our mind that we should never modify <code>apple.position.x</code> or <code>y</code>. But if we make <code>Point</code> immutable we can expose a <code>Point getPosition()</code> on <code>Apple</code> without worrying that objects/methods who we give that apple to will be able to move it around. Hopefully this convinces you.</p>

<p>Let's start with <code>Point</code> (<code>Direction</code> can remain the same):</p>

<pre><code>class Point {
    protected int x;
    protected int y;

    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public int getX() { return this.x; }
    public int getY() { return this.y; }

    public Point movedTowards(Direction d) {
        switch(d) {
            case Direction.UP:    return new Point(this.x - 1, this.y    );
            case Direction.DOWN:  return new Point(this.x + 1, this.y    );
            case Direction.LEFT:  return new Point(this.x    , this.y - 1);
            case Direction.RIGHT: return new Point(this.x    , this.y + 1);
        }
    }

    public boolean inBounds(int width, int height) {
        return 0 &lt;= this.x &amp;&amp; this.x &lt; width &amp;&amp; 0 &lt;= this.y &amp;&amp; this.y &lt; height;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) {
            return true;
        }

        if (!(other instanceof Point)) {
            return false;
        }

        Point otherPoint = (Point) other;
        return this.x == otherPoint.x &amp;&amp; this.y == otherPoint.y;
    }

    @Override
    public int hashCode() {
        return 31 * this.x + y;
    }
}
</code></pre>

<p>Good, now we have a nice encapsulated idea that can be used in the game objects that need it (<code>Snake</code> and <code>Apple</code>). We could also consider adding a static method to <code>Point</code> called <code>randomPoint(int width, int height)</code> that returns a random point between (0, 0) and (<code>width</code>, <code>height</code>). We'd have to be careful here, though (you make this mistake in your code as far as I can tell). We probably don't want to spawn an apple inside the snake's body/head. We'll tackle that later.</p>

<p>With this building block, let's build the <code>Apple</code>.</p>

<pre><code>import javafx.scene.image.Image;

class Apple {
    protected Point position;
    protected static final Image IMAGE;

    static {
        IMAGE = new Image(new FileInputStream("resources/redsquare.jpg"));
    }

    public Apple(Point position) {
        this.position = position;
    }

    public Point getPosition() { return this.position; }

    public void draw(GridGraphicsContext ctx) {
        ctx.drawImage(IMAGE, position);
    }
}
</code></pre>

<p>Note a few things here. First, the apple's location is immutable. We want this! Also note how the apple is responsible for drawing itself (and loading its resources--although it is perhaps a little sloppy to do this in a static initializer; a more principled approach would be creating an <code>AppleFactor</code> which loads the file and builds apples by adding a paramter to the constructor for the <code>Image</code>, but this is a lot of Java-y indirection and this approach is sufficient for your simple use case). Also note how I've gotten rid of your <code>GridView</code>. You should be using <a href="https://docs.oracle.com/javase/8/javafx/api/javafx/scene/canvas/Canvas.html" rel="nofollow noreferrer"><code>Canvas</code></a>. This is what real games do and the <code>GridView</code> was just an unnecessary level of indirection (and a lot of overhead of making arrays of <code>ImageView</code>s). I'd recommend making a <code>GridGraphicsContext</code> to wrap your <code>GraphicsContext</code> (from <code>Canvas.getGraphicsContext()</code>), to avoid duplicating the logic of computing the point for the image (converting integer grid coordinates to floating point canvas coordinates):</p>

<pre><code>import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;

class GridGraphicsContext {
    protected GraphicsContext ctx;

    public GridGraphicsContext(GraphicsContext ctx) {
        this.ctx = ctx;
    }

    public drawGridImage(Image image, Position p) {
        this.ctx.drawImage(image, p.getX() * image.getWidth(),
                           p.getY() * image.getHeight());
    }
}
</code></pre>

<p>Now let's look at <code>Snake</code>. Since we defined <code>equals</code> and <code>hashCode</code> on <code>Point</code>, it is hashable (we couldn't make it hashable if it was mutable!). This will let us represent the body of the snake a lot more succinctly.</p>

<pre><code>import java.util.Deque;
import java.util.Set;
import java.util.ArrayDeque;
import java.util.HashSet;

class Snake {
    protected static final Image BODY_IMAGE;

    static {
        BODY_IMAGE = new Image(new FileInputStream("resources/blacksquare.png"));
    }

    protected Point headPosition;
    protected Deque&lt;Point&gt; bodyPositions = new ArrayDeque&lt;&gt;();
    protected Set&lt;Point&gt; bodyPositionsSet = new HashSet&lt;&gt;();

    public Snake(Point headPosition) {
        this.headPosition = headPosition;
    }

    public void move(Direction direction) {
        try {
            Point lastPosition = this.bodyPositions.removeLast();
            this.bodyPositionSet.remove(lastPosition);
        } catch (NoSuchElementException e) {}

        this.bodyPositions.offerFirst(this.headPosition);
        this.bodyPositionsSet.add(this.headPosition);

        this.headPosition = this.headPosition.moveTowards(direction);
    }

    public boolean intersectsSelf() {
        return this.headPositionsSet.contains(this.headPosition);
    }

    public boolean headIntersects(Apple apple) {
        return this.headPosition.equals(apple.getPosition());
    }

    public void draw(GridGraphicsContext ctx) {
        ctx.drawImage(BODY_IMAGE, this.headPosition);

        for (Point p : this.bodyPositions) {
            ctx.drawImage(BODY_IMAGE, p);
        }
    }
}
</code></pre>

<p>Notice how I use the interfaces for the types of the collections. This is a good habit to get into. Generally your types should be interfaces so that you can accept any kind of object that conforms to that interface. This allows you to swap out implementations by only changing one line of code. Also note how I changed how you represent the snake's head and body. For one, I kept the separate head member variable. There are multiple reasons for this. Although it could still be nulled, this conveys the idea that the snake <em>always</em> has a head, but may not have a body (<code>bodyPositions</code> and <code>bodyPositionsSet</code> may be empty). This is a good pattern because it's possible that <code>bodyPositions.peekFirst()</code> may throw if it is empty. Although we could get a <code>NullPointerException</code> if <code>headPosition</code> was <code>null</code> (there are static tools to prevent this), this conveys that idea and is a bit safer. Also note that with <code>bodyPositions</code> and <code>bodyPositionsSet</code> testing for collisions is now constant time and moving the snake is easier. Collision testing should be obvious. For moving the snake, note how that you don't need to keep track of the direction of each block. Instead, you can just remove the last body point, add the current head, and then move the head. This is a lot simpler to wrap your head around and ends up being much less work.</p>

<p>Now let's fix the user input:</p>

<pre><code>import javafx.event.EventHandler;
import javafx.scene.input.KeyEvent;
import static javafx.scene.input.KeyCode.*;

class InputManager implements EventHandler&lt;KeyEvent&gt; {
    protected Direction direction = Direction.UP;

    public Direction getDirection() { return this.direction; }

    @Override
    public void handle(KeyEvent event) {
        if (event.getCode() == UP) {
            this.direction = Direction.UP;
        } else if (event.getCode() == DOWN) {
            this.direction = Direction.DOWN;
        } else if (event.getCode() == LEFT) {
            this.direction = Direction.LEFT;
        } else if (event.getCode() == RIGHT) {
            this.direction = Direction.RIGHT;
        }
    }
}
</code></pre>

<p>Note how much simpler this is! It has one concern: keeping track of which direction the user pressed. And a user of this object can ask what that direction was. And we can use that and bring everything together in the new <code>Game</code> object:</p>

<pre><code>import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.Scene;

class Game extends Application {
    protected static final long TICK_TIME = 100; // miliseconds

    protected static final int COLS = 21;
    protected static final int ROWS = 21;

    protected static final int GRID_SIZE = 50; // size of tile image
    protected static final int WIDTH = COLS * GRID_SIZE;
    protected static final int HEIGHT = ROWS * GRID_SIZE;

    protected InputHandler inputHandler = new InputHandler();
    protected GraphicsContext graphicsContext;
    protected GridGraphicsContext gridGraphicsContext;

    protected Snake snake;
    protected Apple apple; 

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage window) {
        window.setTitle("Snake");

        // It's been a long time since I've used javafx, so this might
        // not be totally correct. I believe you need a Parent to insert the
        // Canvas into (that becomes the root of the Scene). You can sort this out.
        Canvas canvas = new Canvas(WIDTH, HEIGHT);
        this.graphicsContext = canvas.getGraphicsContext();
        this.gridGraphicsContext = new GridGraphicsContext(this.graphicsContext);

        Scene scene = new Scene(canvas);
        scene.setOnKeyPressed(this.inputHandler);

        window.setScene(scene);
        window.show();

        this.startGameLoop();
    }

    public void startGameLoop() {
        long lastFrameTime = System.currentTimeMillis();

        while (true) {
            long currentTime = System.currentTimeMillis();
            long elapsedTime = currentTime - lastFrameTime;
            lastFrameTime = currentTime;

            if (!this.update(elapsedTime)) {
                break;
            }

            this.draw();
        }
    }

    protected long totalTime = 0;

    public boolean update(long elapsedTime) {
        this.totalTime += elapsedTime;

        while (this.totalTime &gt; TICK_TIME) {
            this.totalTime -= TICK_TIME;

            if (this.snake.intersectsSelf() || !this.snake.getHeadPosition().inBounds(COLS, ROWS)) {
                this.reportLoss();
                return false;
            }

            this.snake.move(this.inputHandler.getDirection());

            if (this.snake.intersects(this.apple.getPosition()) {
                // TODO: increment score

                // TODO: don't intersect snake head or body
                this.apple = Apple.randomlyPositioned(COLS, ROWS);
            }
        }

        return true;
    }

    public void draw() {
        // Clear previous drawing (in a real game, this would be double buffered)
        this.graphicsContext.setFill(Color.WHITE);
        this.graphicsContext.fillRect(0, 0, WIDTH, HEIGHT);

        this.snake.draw(this.gridGraphicsContext);

        if (this.apple != null) {
            this.apple.draw(this.gridGraphicsContext);
        }
    }
}
</code></pre>

<p>This is a bit bulky, but you'll find that overall it's easier to follow. We still do the usual javafx setup (as I noted in the comment, I don't think I did it exactly correctly. You can sort of adding the <code>Canvas</code> to the stage). You may actually want to pull that out into your own <code>Application</code> class and then have <code>Application</code> own a <code>Game</code> object (which is only given the things it needs). But javafx aside, the only other thing we have is the game loop (<code>startGameLoop()</code>). This is a simple game loop (read the linked stuff for more complex ones that do fixed timestep increments and other fancy techniques used in real games--you don't need these though for such a simple game). We see it is just a <code>while</code> loop that only exits if <code>update</code> returns <code>false</code> (indicate the game is over). It alternates between calling <code>update()</code> and <code>draw()</code>. The idea here being we update state and then redraw the screen to show the player what changed. <code>update</code> receives the number of milliseconds that have elapsed since it was last called. This is usually more relevant for games with physics (where computing the next game state involves doing physics calculations--typically integrating some function given the elapsed time), but it works here too. We have a <code>TICK_TIME</code> which is the amount of milliseconds that elapses between each time the snake actually moves. We just keep track of how much time has elapsed and when more than a tick has elapsed, we actually preform the tick (do the game update). Note how we don't just do <code>if (this.totalTime &gt; TICK_TIME)</code> and instead use a <code>while</code>. This is because it is possible that between updates more than 1 tick has happened (consider if the computer is under high load and the OS scheduler doesn't schedule our game for more than 200ms).</p>

<p><code>update()</code> is otherwise fairly simple thanks to some of the separation of concerns that we undertook earlier. Checking for game end states is delegated to the proper objects. The same goes for eating apples.</p>

<p><code>draw()</code> is even easier. It just defers to the appropriate drawing methods on the game objects. Now, since the game has tick based graphics, we could be a bit smarter about drawing and only redraw when something has changed. You could make this optimization, but if you wanted to, say, have a cool death animation you'd want to keep this structure.</p>

<p>I didn't try running this code, so I suspect there may be some issues (and I've indicated places where you need to implement things). But, this is the overall idea. Hopefully this can help you improve your game!</p>
    </div>