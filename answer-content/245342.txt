<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>This does not represent RIFF chunks</h1>
<p>A RIFF chunk is more than just the 4 byte identifier. A chunk consists of a header, data and padding bytes. Furthermore, the header contains the identifier as well as the size of the data.</p>
<h1>Is the identifier an <code>uin32_t</code> or an array of 4 <code>std::byte</code>s?</h1>
<p>It is a bit weird to store the identifier internally as a <code>std::array&lt;std::byte, 4&gt;</code>, but none of the public member functions use that format. A lot of the code is unnecessarily complex just because you have to convert to and from that format.</p>
<p>I would either just store it as a <code>uint32_t</code> internally, to match what you pass into the constructor, or alternatively, since a RIFF chunk identifier consists of 4 ASCII characters, I would just define it as <code>char id[4]</code>.</p>
<h1>Unnecessary use of user-defined literals</h1>
<p>Instead of declaring user-defined literals, I would just overload the constructor to take a C string as an argument. This way, instead of <code>"WAVE"_chunk</code>, you can write <code>chunk("WAVE")</code>, which is about the same length, and much less surprising.</p>
<h1>Unaligned access</h1>
<p>You are using type punning to convert <code>std::array&lt;std::byte, 4&gt;</code> to <code>uint32_t</code>, but there is no guarantee that <code>std::array&lt;std::byte, 4&gt;</code> has the same alignment as <code>uint32_t</code>. While a <code>chunk</code> declared on the stack might be properly aligned in practice, it is not that hard to have a situation where a <code>chunk</code> is not aligned as you expect. Consider for example:</p>
<pre><code>struct foo {
    char x;
    wcps::riff::chunk chunk;
};
</code></pre>
<p>You will find that <code>sizeof(struct foo)</code> is 5, and <code>offsetoff(struct foo, chunk)</code> is 1.
Converting to <code>uint32_t</code> using type-punning is undefined behavior, and might crash on platforms that do not support unaligned loads and stores.</p>
<h1>Writing out of bounds</h1>
<p>In this code:</p>
<pre><code>std::string msg{"Bad chunk: "};
std::copy(str, str + size, msg.end());
throw std::logic_error{msg};
</code></pre>
<p>You are explicitly copying <code>str</code> to after the end of <code>msg</code>. This is a buffer overflow. Instead, I would just write:</p>
<pre><code>throw std::logic_error(std::string("Bad chunk: ") + str::string(str, size));
</code></pre>
    </div>