<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Comment</h2>

<blockquote>
  <p>Flaws I already know of but choose to ignore because of how the teacher in class implements stuff:`</p>
  
  <ul>
  <li>Use of raw pointers</li>
  </ul>
</blockquote>

<p>Not sure that is a flaw. Creating a container I would expect to see RAW pointers.</p>

<h2>Overview</h2>

<p>There is definitely a bug in your constructor where you build two <code>Sentinels</code> it should only be one. Otherwise your iterators for an empty list will iterate once.</p>

<p>Additionally your <code>Node</code> always contains a value (even for the <code>Sentinel</code>). This means your type <code>T</code> (the value type) must be default constructible (not all types are so you class is limited to objects of this type).</p>

<p>There are some requirements for Iterators that you don't implement. The iterator type is supposed to have a couple of internal types. The standard algorithms use these internal types (or they use <code>std::iterator_traits&lt;Your Interator&gt;::UsefulTypeInfo</code>) which default to point at your type object. Since your <code>Iterator</code> does not implement these types it may not be standard compliant and fail in some algorithms.</p>

<p>Talking of missing type information your container is also missing some type information.</p>

<p>Also you provide the pre-increment on your iterator but your don't provide the post-increment function. So you are missing at least one function. There is at least one more function you are missing (but I assume this is becausew your teacher has not got that far so I will leave it up to him).</p>

<p>There are lots of parts to this class that look like the teacher will get you to fill in at a later date. So there is still a lot of work to do to complete this task.</p>

<h2>Code Review</h2>

<p>That's a bit wierd.</p>

<pre><code>        ~Linked_List() noexcept(false);
</code></pre>

<p>This makes the class act like a C++03 class. Exceptions are allowed to propagate out of the destructor. Not usual but it's OK. I assume this will be modified in future class.</p>

<hr>

<p>I assume these are deleted to make the first version easy to write.</p>

<pre><code>        Linked_List(const Linked_List&amp;) = delete;
        Linked_List(Linked_List&amp;&amp;) = delete;
        Linked_List&amp; operator=(const Linked_List&amp;) = delete;
        Linked_List&amp; operator=(Linked_List&amp;&amp;) = delete;
</code></pre>

<p>Probably come back in a later class and implement these.</p>

<hr>

<p>This is a bit strange passing by value.</p>

<pre><code>        void push_back(T);
        void push_front(T);
</code></pre>

<p>I would expect you to pass by reference to avoid a copy.</p>

<hr>

<p>Personally I hate the unsigned int as a size value. But it's very common and what was adopted by the standard container (they regretted that).</p>

<pre><code>        unsigned int size() const;
</code></pre>

<p>So I would keep it. But if you look up the history of why the standard committee choose <code>unsigned</code> then regretted it its an interesting story.</p>

<p>But saying that. I would use <code>std::size_t</code> as that conveys intentions more.</p>

<hr>

<p>Return by value? Just like the insert by value you are potentially creating an unneeded copy. </p>

<pre><code>        T back() const;
        T front() const;
</code></pre>

<p>I am now assuming this is because you have not been tought about references and thus the teacher will expand on this in later classes and show you how to provide both normal reference and const reference versions of these methods.</p>

<hr>

<p>Sure this is fine as a starting point.</p>

<pre><code>        Iterator begin() const;
        Iterator end() const;
</code></pre>

<p>But you will see that the standard containers have a lot more of these. Also since these methods are const should they not be returning a const version of the iterator. Maybe that is for a later class.</p>

<hr>

<p>OK. A very basic <code>Node</code>.</p>

<pre><code>    template&lt;typename T&gt;
    struct Linked_List&lt;T&gt;::Node
    {
        Node() : prev(nullptr), next(nullptr) {}
        Node(T t) : value(t), prev(nullptr), next(nullptr) {}
        Node* prev;
        Node* next;
        T value;
    };
</code></pre>

<p>But the lack of interesting constructors means you will have to do some manual work setting up the chain when this could have been done in the constructor here. I'll point it out when we get to creating a node.</p>

<hr>

<p>OK so a very basic Iterator.</p>

<pre><code>    template&lt;typename T&gt;
    struct Linked_List&lt;T&gt;::Iterator
    {
         // Nothing interesting here.
    };
</code></pre>

<hr>

<p>You create a <code>Sentinel</code> for both both the beginning and end. That seems a bit strange. I would expect to only see one <code>Sentinel</code> value at the end.</p>

<pre><code>    template&lt;typename T&gt;
    Linked_List&lt;T&gt;::Linked_List() : _size(0)
    {
        _head = new Node();
        _tail = new Node();
        _head-&gt;next = _tail;
        _tail-&gt;prev = _head;
    }
</code></pre>

<p>I would have expected this:</p>

<pre><code>    template&lt;typename T&gt;
    Linked_List&lt;T&gt;::Linked_List()
        : _head(new Node)
        , _tail(_head)
        , _size(0)
    {}
</code></pre>

<p>This way if the list is empty both head and tail point at the same node. Thus if you generate iterators for head and tail they will both generate the <code>end</code> iterator (which will compare equal).</p>

<p>Additionally there is a bug in your version.</p>

<pre><code>        _head = new Node();   // Assume this works
        _tail = new Node();   // Assume this fails and throws.
                              // Because your constructor has not finished
                              // when the exception is thrown this object
                              // will not be fully constructed and therefore
                              // will not have its destructor called. This 
                              // means you will leak the value pointed at by
                              // _head
</code></pre>

<hr>

<p>Your destructor should work. But this is rather heavy handed. You are inside the class and thus are expected to understand the implementation details. You could write this much more simply and efficiently (as pop_back() has to make sure the chain stays valid after each call). </p>

<pre><code>    template&lt;typename T&gt;
    Linked_List&lt;T&gt;::~Linked_List() noexcept(false)
    {
        while (!empty())
        {
            pop_back();
        }
        delete head;
        delete tail;
    }
</code></pre>

<p>I would simply write like this:</p>

<pre><code>   Linked_List&lt;T&gt;::~Linked_List()
   {
       Node* current = _head;
       while(current != nullptr) {
            Node* old = current;
            current = current-&gt;next;
            delete old;
       }
   }
</code></pre>

<hr>

<p>You know I mentioned above in the <code>Node</code> description that the constructor could be made more useful. This is where it would work nicely.</p>

<pre><code>    Node(T value, Node* nextNode)
        : prev(nextNode-&gt;prev)
        , next(nextNode)
        , value(value)
    {
        if (prev) {
            prev-&gt;next = this;
        }
        next-&gt;prev = this; // There is always a next.
    }
    template&lt;typename T&gt;
    void Linked_List&lt;T&gt;::push_back(T t)
    {
        Node* n = new Node(t, tail);  // insert before tail.
        tail = n-&gt;next;
    }

    template&lt;typename T&gt;
    void Linked_List&lt;T&gt;::push_front(T t)
    {
        Node* n = new Node(t, head);  // insert before head
        head = n;
    }
</code></pre>

<p>Personally I think that is much easier to read.</p>

<hr>

<p>Personally I would not check if it is empty. It is the responsibility of the caller to check before calling <code>X_pop()</code>. If you provide the check and it is not needed you are forcing the user to use sub-optimal code. See example below:</p>

<pre><code>    template&lt;typename T&gt;
    void Linked_List&lt;T&gt;::pop_back()
    {
        if (empty()) throw Error("pop_back(): on empty list");
        Node* n = _tail-&gt;prev;
        _tail-&gt;prev-&gt;prev-&gt;next = _tail;
        _tail-&gt;prev = _tail-&gt;prev-&gt;prev;
        --_size;
        delete n;
    }

    template&lt;typename T&gt;
    void Linked_List&lt;T&gt;::pop_front()
    {
        if (empty()) throw Error("pop_front(): on empty list");
        Node* n = _head-&gt;next;
        _head-&gt;next-&gt;next-&gt;prev = _head;
        _head-&gt;next = _head-&gt;next-&gt;next;
        --_size;
        delete n;
    }
</code></pre>

<p>Here is a very common use case:</p>

<pre><code>    while(list.empty()) {
         list.pop_back();    // This is guaranteed to only be called if
                             // if the list is not empty. So the check
                             // inside `pop_back()` is redudant and therefore
                             // a waste of cycles.
    }
</code></pre>

<p>One of the big philosophies of C++ is to never charge people for something they don't need. Now there is also an argument to having the check. <strong>BUT</strong> this can be provided by having an explicit checked <code>pop_back()</code> version: <code>checked_pop_back()</code>.</p>

<pre><code>    list.checked_pop_back(); // Do I need to make a check before this call?
</code></pre>

<hr>

<p>Simply go for checking the size(). If your object is in a consistent state then you can simply check the variable without having to pay the expense of the functions call.</p>

<pre><code>    template&lt;typename T&gt;
    bool Linked_List&lt;T&gt;::empty() const
    {
        //return (_head-&gt;next == _tail) &amp;&amp; (_tail-&gt;prev == _head);
        return size() == 0;
    }
</code></pre>

<p>I would just write:</p>

<pre><code>    bool Linked_List&lt;T&gt;::empty() const {return _size == 0;}
</code></pre>

<hr>

<p>Again with the un-needed checks.</p>

<pre><code>    template&lt;typename T&gt;
    T Linked_List&lt;T&gt;::back() const
    {
        if (empty()) throw Error("back(): on empty list");
        return _tail-&gt;prev-&gt;value;
    }

    template&lt;typename T&gt;
    T Linked_List&lt;T&gt;::front() const
    {
        if (empty()) throw Error("front(): on empty list");
        return _head-&gt;next-&gt;value;
    }
</code></pre>

<hr>

<p>These look fine:</p>

<pre><code>    template&lt;typename T&gt;
    typename Linked_List&lt;T&gt;::Iterator Linked_List&lt;T&gt;::begin() const
    {
        // Though with the fix I suggested above this changes.
        return Iterator(_head-&gt;next);

        // If you only have the tail `Sentinel` this becomes
        return Iterator(_head);
    }

    template&lt;typename T&gt;
    typename Linked_List&lt;T&gt;::Iterator Linked_List&lt;T&gt;::end() const
    {
        return Iterator(_tail);
    }
</code></pre>

<hr>

<blockquote>
  <p>I haven't yet figured out how to implement:</p>
  
  <p>Iterator insert(const Iterator, T);
  Iterator erase(const Iterator);</p>
</blockquote>

<p>If you have to <code>insert</code> before the iterator? Then you can simply implement like I did above:</p>

<pre><code>Iterator insert(const Iterator iterator, T value) {
    Node* n = new Node(value, iterator-&gt;_current);
    return Iterator(n);
}
</code></pre>

<p>Lets assume erase returns the iterator to the next element.</p>

<pre><code>Iterator erase(const Iterator iterator)
    Node* current = iterator-&gt;_current;
    if (current == _tail) // can't delete the tail
        return iterator;
    }

    // otherwise unlink from previous item.
    if (current-&gt;prev == nullptr) {
        head = current-&gt;next;
    }
    else {
        current-&gt;prev-&gt;net = current-&gt;next;
    }
    // Next unlink from the next item.
    current-&gt;next-&gt;prev=current-&gt;prev;

    // Get the next item so we can return it.
    Node* result = current-&gt;next;

    // Delete the old value.
    delete current;

    // return the new result.
    return Iterator(result);
}
</code></pre>
    </div>