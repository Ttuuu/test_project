<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Functions should have inputs and outputs</h3>

<pre><code>def too_small():
</code></pre>

<p>This function acts on two global variables <code>n</code> and <code>L</code>.</p>

<p>You need to prepare such variables <strong>with exactly such names</strong> or the function will fail.</p>

<p>This function also modifies the global variable <code>L</code> that is a huge no-no unless clearly expected and/or (better and) clearly documented.</p>

<p>The name is also not informative as it makes no mention to the fact that it builds a list of prime factors.</p>

<h3>Unnecessary <code>math</code> import</h3>

<p><code>math</code> is imported but not used, remove unused parts of the code such as this import statement to reduce clutter.</p>

<h3>Unnecessary / Undocumented<code>float</code> conversion</h3>

<p>You explicitly state that an <strong>integer</strong> must be inputted, there is no reason to convert it to a float (such conversion is immediately overridden by the conversion to <code>int</code>).</p>

<p>If you use <code>float</code> to allow inputs with a decimal point followed by zeros (ex <code>412.0</code>) you should explicitly state so in a comment as seeing <code>int(float</code> is very surprising and you should not leave the reader wondering.</p>

<h3>Lack of module-level doc-string</h3>

<p>You should at least in a phrase describe what your code does, stating so in the question body is good, stating it in the code itself is better.</p>

<p>Just add </p>

<pre><code>"""
This script prints the prime factors of a number input by the user.
"""
</code></pre>

<p>to the top of your file and remove:</p>

<pre><code>#What is the largest prime factor of the number 600851475143?
</code></pre>

<p>as such number is nowhere else found in the code.</p>

<h3><code>0</code> corner case</h3>

<p>You return <code>[0]</code> for 0 input but <code>0</code> is evenly divided by all the prime numbers, so your answer is wrong. I suggest raising an exception (or issuing a special message) in case <code>0</code> is the input.</p>

<h3>Unnecessary fragmentation</h3>

<p>You would really simplify by writing exactly one function to factorize any number and calling just that.</p>

<h3>Be accurate in documentation</h3>

<pre><code>def primefactor():
        """prints list of all prime factors for int &gt; 4"""
</code></pre>

<p>Wrong documentation is worse than no documentation at all.</p>

<p><code>print</code> means output to the screen. This function produces no output.</p>

<p>You meant <code>return</code> that means "giving a value back to the program from a function"</p>

<h3>Segregate function definition and <code>main</code> part</h3>

<p>Function definitions are inter-mangled to statements that "do stuff" in your program.</p>

<p>A universal convention to achieve a better organization is defining all your functions on the top and than putting the <code>main</code> code under an <code>if __name__ == "__main__"</code> statement at the bottom. </p>

<p>This way you also make it possible to import your program and use it as a module without the user interactions running.</p>

<h3>Remove <code>exit</code> call(s)</h3>

<p>Quoting from <a href="https://stackoverflow.com/questions/19747371/python-exit-commands-why-so-many-and-when-should-each-be-used">StackOverflow</a></p>

<blockquote>
  <p>However, like quit, exit is considered bad to use in production code and should be reserved for use in the interpreter. This is because it too relies on the site module.</p>
</blockquote>

<p>In other words <code>exit</code> was made to help new programmers in using the interactive interpreter and should not be used in a stand-alone program.</p>
    </div>