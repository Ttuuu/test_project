<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>calc1</code> and <code>calc2</code> are really bad names. Names should always clearly describe what they are for or do. <code>calculateCircleCircumference</code> and <code>calculateCircleArea</code> would be better
choices.</p>
<p>I'm not a big fan of the names <code>commaToDot</code> and <code>commaToDot</code> either. I'd prefer more conceptional names such as <code>parseNumber</code> and <code>formatNumber</code>, maybe even <code>parseGermanNumber</code> and <code>formatGermanNumber</code>.</p>
<p>A slightly better HTML structure would be in order: Each calculator could be surrounded by a <code>&lt;form&gt;</code> element and there is an <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output" rel="nofollow noreferrer"><code>&lt;output&gt;</code></a> element specifically for display calculation results.</p>
<p>In current JavaScript one should prefer <code>const</code> and <code>let</code> over <code>var</code>.</p>
<p>The following suggestions may introduce concepts, that the students haven't learnt yet, but they are considered good conventions.</p>
<p>For a better separation of layout and logic it is usually suggested not to use <code>on...</code> event handler attributes, but instead assign them using <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" rel="nofollow noreferrer"><code>addEventListener</code></a>.</p>
<p>Also one should move all element look ups to the initialization. This could look like this (notice the changed IDs):</p>
<pre><code>const circleCircumferenceRadiusInput = document.getElementById("circle-circumference-radius-input");
const circleCircumferenceOutput = document.getElementById('circle-circumference-output');

function calculateCircleCircumference() {
    // Using separate variables so "const" can be used.
    const inputString = circleCircumferenceRadiusInput.value;
    const input = commaToDot(inputString);
    if (isNaN(input)) {
      circleCircumferenceOutput.innerHTML = "&lt;b&gt;Please enter a number!&lt;/b&gt;";
    } else {
      const output = 2 * Math.PI * input;
      circleCircumferenceOutput.innerHTML = dotToComma(output);
    }
}

document.getElementById('circle-circumference-button').addEventHandler("click", calculateCircleCircumference);
</code></pre>
<p>This can be simplified a bit by wrapping HTML of the calculator in an <code>&lt;form&gt;</code> element and referring to the needed elements by name. Also I'm wrapping the code in an initialization function to avoid lots of global variables. Both of these prepare for generalizing and reusing the code.</p>
<pre><code>&lt;form id="circle-circumference"&gt;
  &lt;h2&gt;Calculate circumference of circle&lt;/h2&gt;
  &lt;p&gt;
    Radius of circle: &lt;input type="text" name="radius"&gt; &lt;button name="execute"&gt;Calculate&lt;/button&gt;
  &lt;/p&gt;
  &lt;p&gt;
    Circumference of circle: &lt;output name="output"&gt;&lt;/output&gt;
  &lt;/p&gt;
&lt;/form&gt;
</code></pre>
<pre><code>function initCircleCircumferenceCalculator(form) {
  const radiusInput = form.elements["radius"];
  const outputElement = form.elements["output"];

  function calculate() {
    const inputString = radiusInput.value;
    const input = commaToDot(inputString);
    if (isNaN(input)) {
      outputElement.innerHTML = "&lt;b&gt;Please enter a number!&lt;/b&gt;";
    } else {
      const output = 2 * Math.PI * input;
      outputElement.innerHTML = dotToComma(output);
    }
  }

  form.elements["execute"].addEventHandler("click", calculate);
} 

initCircleCircumferenceCalculator(document.getElementById("circle-circumference"));
</code></pre>
<p>Now that we have the initialization function it's easier to generalize this so that it can be used for multiple calculators:</p>
<pre><code>function initCalculator(form, inputName, calculationFunction) {
  const inputElement = form.elements[inputName];
  const outputElement = form.elements["output"];

  function calculate() {
    const inputString = inputElement.value;
    const input = commaToDot(inputString);
    if (isNaN(input)) {
      outputElement.innerHTML = "&lt;b&gt;Please enter a number!&lt;/b&gt;";
    } else {
      const output = calculationFunction(input);
      outputElement.innerHTML = dotToComma(output);
    }
  }

  form.elements["execute"].addEventHandler("click", calculate);
} 

// Circle circumference
initCalculator(document.getElementById("circle-circumference"), "radius", r =&gt; 2 * Math.PI * r);

// Circle area 
initCalculator(document.getElementById("circle-area"), "radius", r =&gt; Math.PI * Math.pow(r, 2));

</code></pre>
<p>The next step could be modify <code>initCalculator</code> so that it supports multiple input fields.</p>
    </div>