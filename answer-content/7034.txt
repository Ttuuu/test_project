<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm a fan of <a href="http://blogs.msdn.com/b/ericlippert/archive/tags/immutability/" rel="nofollow">immutable objects</a> and <a href="http://msdn.microsoft.com/en-us/library/bb384062.aspx" rel="nofollow">collection initializer</a> syntax, myself:</p>

<pre><code>    private static void Main()
    {
        // Fill list with sample data
        FlatObjectList flatObjects = new FlatObjectList
        {
            { 1, 0 }, { 2, 0 }, { 3, 0 }, { 4, 0 }, { 5, 1 }, { 6, 2 }, { 7, 6 }, { 8, 6 }
        };

        // call the recursive method
        RecursiveObjectList recursiveObjects = FillRecursive(flatObjects, 0);
    }

    private static RecursiveObjectList FillRecursive(IEnumerable&lt;FlatObject&gt; flatObjects, int parentId)
    {
        return new RecursiveObjectList(flatObjects
            .Where(x =&gt; x.ParentId.Equals(parentId))
            .Select(item =&gt; new RecursiveObject(item.Id, item.ParentId, FillRecursive(flatObjects, item.Id))));
    }
}

public sealed class FlatObjectList : List&lt;FlatObject&gt;
{
    public void Add(int id, int parentId)
    {
        this.Add(new FlatObject(id, parentId));
    }
}

public sealed class RecursiveObjectList : List&lt;RecursiveObject&gt;
{
    public RecursiveObjectList(IEnumerable&lt;RecursiveObject&gt; list)
    {
        this.AddRange(list);
    }

    public void Add(int id, int parentId, RecursiveObjectList children)
    {
        this.Add(new RecursiveObject(id, parentId, children));
    }
}

public sealed class FlatObject
{
    private readonly int id;

    private readonly int parentId;

    public int Id { get { return this.id; } }

    public int ParentId { get { return this.parentId; } }

    public FlatObject(int id, int parentId)
    {
        this.id = id;
        this.parentId = parentId;
    }
}

public sealed class RecursiveObject
{
    private readonly int id;

    private readonly int parentId;

    private readonly ReadOnlyCollection&lt;RecursiveObject&gt; children;

    public RecursiveObject(int id, int parentId, IList&lt;RecursiveObject&gt; children)
    {
        this.id = id;
        this.parentId = parentId;
        this.children = new ReadOnlyCollection&lt;RecursiveObject&gt;(children);
    }

    public int Id { get { return this.id; } }

    public int ParentId { get { return this.parentId; } }

    public ReadOnlyCollection&lt;RecursiveObject&gt; Children { get { return this.children; } }
}
</code></pre>
    </div>