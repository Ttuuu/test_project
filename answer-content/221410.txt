<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Fix the bug</h2>

<p>It might work well on your machine, but my computer apparently runs faster and so in <code>Level::run()</code> no time elapses in the main loop and therefore nothing moves.  I'd suggest using a timer to drive movement rather than looping on the time.</p>

<h2>Allow for portability</h2>

<p>Rather than coding the display mechanics directly in the <code>Level</code> code, an improvement might be to implement a <code>console::show(std::stringstream &amp;ss)</code> that would isolate the platform-specfic code to just <code>Console.cpp</code>.</p>

<h2>Use user-defined literals</h2>

<p>The <code>MathHelper.h</code> has a number of lines that look like this:</p>

<pre><code>constexpr double deg_255 = deg_240 + deg_15;
</code></pre>

<p>And then it defines <code>radientToDegrees()</code> which is never used.  First, it's "radian" not "radient".  Second, this is a good place to use a <a href="https://en.cppreference.com/w/cpp/language/user_literal" rel="nofollow noreferrer">user-defined literals</a>.  Here's how:</p>

<pre><code>constexpr long double operator"" _deg(long double deg) {
    return deg*M_PI/180;
}
</code></pre>

<p>Now anywhere you need degrees, instead of <code>deg_255</code>, just use <code>255.0_deg</code> and all of those constants go away.</p>

<h2>Use <code>const</code> where practical</h2>

<p>There are several places, such as <code>Ball::isActive()</code> which simply report back something about the underlying object without altering it.  Those should be <code>const</code> like this:</p>

<pre><code>bool Ball:isActive() const { return mIsActive; }
</code></pre>

<h2>Make constructors more useful</h2>

<p>The <code>Level</code> file contains code that creates a <code>vector</code> of <code>Brick</code> objects like this:</p>

<pre><code>    return std::vector&lt;Brick&gt;
    {
            Brick{ Point{4,2},brickLength,brickHeight,1 },
            Brick{ Point{7,2},brickLength,brickHeight,1 },
            Brick{ Point{10,2},brickLength,brickHeight,1 },
            Brick{ Point{13,2},brickLength,brickHeight,1 },
            Brick{ Point{16,2},brickLength,brickHeight,1 },
            Brick{ Point{19,2},brickLength,brickHeight,1 },
</code></pre>

<p>I'm exhausted just looking at it!  Instead, make <code>brickLength</code> and <code>brickHeight</code> default values of the <code>Brick</code> constructor and then the code could look like this:</p>

<pre><code>    return std::vector&lt;Brick&gt;
    {
            { {4,2},1 },
            { {7,2},1 },
            { {10,2},1 },
            { {13,2},1 },
            { {16,2},1 },
            { {19,2},1 },
</code></pre>

<p>I'd probably even rearrange the constructor to put <code>hitpoints</code> just after <code>topLeft</code> and give it a default value of <code>1</code>.  Also, there seems little point to having <code>makePlatform</code> and <code>makeBall</code> when all they do is call constructors anyway.</p>

<h2>Eliminate redundant code</h2>

<p>In <code>Level::printToConsole()</code> there is no need to call <code>console::putCursorToStartOfConsole()</code> twice.  In fact, with a minor bit of restructuring and creation of a <code>console::show()</code> routine as mentioned above, that bit of code could be placed within <code>show()</code>.</p>

<h2>Eliminate unused variables</h2>

<p>Unused variables are a sign of poor quality code, and you don't want to write poor quality code. In this code, in <code>Grid.cpp</code>, <code>symbolBrick</code>, <code>size_y</code> and <code>size_x</code> are all unused.  Your compiler is smart enough to tell you about this if you ask it nicely.</p>

<h2>Eliminate unused code</h2>

<p>There are several unused functions in this code including the one mentioned earlier and one of the <code>nearlyEqual</code> forms.  Search and destroy them.</p>
    </div>