<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One way to improve the problem section would be to look at it as an algorithm. For your business of I employees and J vessels, you have N jobs. You iterate over all jobs <strong>(N)</strong> and per job, you iterate over employees and vessels <strong>(worst case access time: N * I + N * J = N * (I + J) )</strong>. Since you iterate over the employee and vessel lists for every Job, your access times are going to eat your performance.</p>

<hr>

<h2>Solution </h2>

<p>If you use a HashMap for vessels and employees, <strong>your access times for .contains and get/put reduce to <a href="https://stackoverflow.com/questions/1055243/is-a-java-hashmap-really-o1">most likely O(1)</a></strong> rather than O(J) and O(I) respectively. Lookup is easily mapped by making each employees ID its key within the map. Now you've reduced your algorithm from <strong>O(N * I + J)</strong> to <strong>O(N * 1 + 1) =~ O(N)</strong></p>

<hr>

<pre class="lang-java prettyprint-override"><code>//employee
    Optional&lt;Employee&gt; employee = employees.stream().filter(e -&gt; e.getId() == job.getEmployee()).findFirst();

    if (employee.isPresent())
    {
        jobEx.setVessel(employee.get());
    }
</code></pre>

<p>becomes</p>

<pre class="lang-java prettyprint-override"><code>int employeeID = job.getEmployee();
if(employeeHashMap.containsKey(employeeID){
    jobEx.setVessel(employeeHashMap.get(employeeID))
}
</code></pre>

<p>and likewise,</p>

<pre class="lang-java prettyprint-override"><code>//vessels
    ObservableList&lt;Vessel&gt; jobVessels = FXCollections.observableArrayList();

    for (int vesselId : jobVesselsIds)
    {
        Optional&lt;Vessel&gt; vessel = vessels.stream().filter(v -&gt; v.getId() == vesselId).findFirst();

        if (vessel.isPresent())
        {
            jobEx.setVessel(vessel.get());
        }
    }
</code></pre>

<p>becomes</p>

<pre class="lang-java prettyprint-override"><code>    ObservableList&lt;Vessel&gt; jobVessels = FXCollections.observableArrayList();

    for (int vesselId : jobVesselsIds)
    {
        if(vesselHashMap.containsKey(vesselId)
        {
            jobEx.setVessel(vesselHashMap.get(vesselID));
        }
    }
</code></pre>

<hr>

<p>Lastly, some small bugs I noticed:
Inside your <strong>employee</strong> loop you have this line</p>

<p><code>jobEx.setVessel(employee.get());</code></p>

<p>Do you mean to set the Vessel to your employee object?</p>

<p>Also, inside your <strong>vessel</strong> loop, you create a list</p>

<p><code>ObservableList&lt;Vessel&gt; jobVessels = FXCollections.observableArrayList();</code></p>

<p>never touch it,</p>

<pre class="lang-java prettyprint-override"><code> if (vessel.isPresent())
        {
            jobEx.setVessel(vessel.get());
        }
</code></pre>

<p>and then add the empty list</p>

<p><code>jobEx.setVessels(jobVessels);</code></p>

<p>Is this intentional? The internal part of this loop <code>jobEx.setVessel(vessel.get())</code> would overide the JobEx vessel every time its called. If this method instead adds a new overall vessel, I would suggest renaming it <code>addVessel()</code> for accuracy</p>
    </div>