<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Error Checking</h2>
<p>When using <code>malloc()</code>, <code>calloc()</code> or <code>realloc()</code> in C make sure to check the return value before using the memory, if any of these functions fail they return <code>NULL</code>. Accessing memory through a <code>NULL</code> pointer causes unknown behavior, the best you can hope for is the program crashes, the worst in the point corrupts memory yielding incorrect results.</p>
<pre><code>int* array_initialize(int size) {
    int *array = calloc(size, size * sizeof(int));
    if (array == NULL)
    {
        fprintf(stderr, "calloc failed in array_initialize\n");
        exit(EXIT_FAILURE);
    }
}
</code></pre>
<p>The function <code>array_size()</code> is not safe, if the array is completely full, the pointer will walk off the end of the array and into other memory. The code should pass the maximum size of the array into the function as well and limit the while loop.</p>
<p>A better implementation might be to use a struct that contains the size of the memory allocated as well as the memory allocated.</p>
    </div>