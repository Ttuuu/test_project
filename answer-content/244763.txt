<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to CodeReview! I hope you get some good feedback.</p>
<h2>Absolute paths</h2>
<pre><code>string ID = Request.QueryString["id"];
string imageFile = "\\\\server\\c$\\inetpub\\wwwroot\\web-app\\images\\" + ID+ ".jpg";
</code></pre>
<p>This has a few issues. First, it's typical for a server to be in a "jail" where it shouldn't have access to the filesystem at large, and should only access data from its own local directory. This is for security purposes. Though I haven't done this in a long time, it seems the ASP.NET way of safely accessing such paths is <a href="https://docs.microsoft.com/en-us/dotnet/api/system.web.httpserverutility.mappath?view=netframework-4.8" rel="nofollow noreferrer">MapPath</a>.</p>
<p>Second: it's crucially important that you do some validation on ID. In its current state a hacker could easily construct a path navigation exploit where the ID contains <code>..\..\..</code> (etc) to explore the rest of the filesystem if the server is misconfigured.</p>
<h2>Managing your connection</h2>
<p>If <code>connection</code> is an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlconnection?view=dotnet-plat-ext-3.1" rel="nofollow noreferrer">SqlConnection</a>, it implements <code>IDisposable</code>, and as such you should put it in a <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-statement" rel="nofollow noreferrer"><code>using</code></a>. The same is true of <code>SqlCommand</code>.</p>
<h2>Add-with-value</h2>
<p>You should prefer <a href="https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlparametercollection.addwithvalue?view=dotnet-plat-ext-3.1" rel="nofollow noreferrer">AddWithValue</a> over a separated <code>Add</code>/<code>.Value</code> assignment here;</p>
<pre><code>sqlCommand.Parameters.Add("@ID", SqlDbType.VarChar);
sqlCommand.Parameters["@ID"].Value = ID;
</code></pre>
<h2>Read-in-loop</h2>
<p>This:</p>
<pre><code>while (dr.Read())
{
    byteImage = (byte[])dr["BLOB"];
}
</code></pre>
<p>should probably not use a loop. Since it seems you expect only one row returned,</p>
<ul>
<li><code>Read()</code> once;</li>
<li>assert that it returned <code>true</code>;</li>
<li>assign <code>byteImage</code>;</li>
<li><code>Read()</code> again;</li>
<li>assert that it returned <code>false</code>.</li>
</ul>
<h2>Streamed image creation</h2>
<p><code>GetResizedImage</code> creates a memory stream. It should not. <code>Response</code> already has an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.web.httpresponse.outputstream?view=netframework-4.8" rel="nofollow noreferrer"><code>OutputStream</code></a>, and you should be writing to that directly. The one thing to double-check with this approach is that <code>Content-Length</code> is still set correctly, which is probably only possible if <code>BufferOutput</code> is enabled.</p>
<h2>Avoiding files</h2>
<p>As to your original question, which I never really addressed:</p>
<blockquote>
<p>Is there anything I can change here to skip saving an image on the server and just display it so it doesn't use up a ton of resources?</p>
</blockquote>
<p>Yes! As long as you get an image from the database, you always <code>Save()</code> it to the disc. However, this file is only used if the server name is approved. Move your save within the name check, and fewer cases will require disc I/O.</p>
<p>Even further: if this is the only code that touches that file, that file should not exist at all and you should not be doing a round trip to the disc. Once you have your <code>img</code>, pass that to <code>GetResizedImage</code> instead of a path string.</p>
<h2>Bug?</h2>
<p>There is a mechanism here:</p>
<pre><code>imageFile = HttpRuntime.AppDomainAppPath + "PERSON.GIF";
</code></pre>
<p>which looks like it's supposed to substitute a default image if none is returned from the database. However, that file is never used. This logic needs to be rearranged so that it is. If you get back a null from the database, load this file into your byteImage.</p>
    </div>