<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>self.host = host if host else '0.0.0.0'
</code></pre>

<p>Since this seems to be optional, perhaps you should given the corresponding <code>__init__</code> argument a default value (None?). Same with <code>_ssl</code>, if it's an object. If it's a boolean, rename it to <code>_use_ssl</code> or something; otherwise its purpose is not clear.</p>

<p>This:</p>

<pre><code>self.main_func = self.nc_listen if self.listen else self.nc_connect
self.main()
# ...

def main(self):
    self.main_func()
</code></pre>

<p>can be simplified to:</p>

<pre><code>self.main = self.nc_listen if self.listen else self.nc_connect
self.main()
</code></pre>

<p>However, I advise that you don't call <code>main()</code> from the constructor. Init is for init. The entire app shouldn't run from the constructor. Call <code>main()</code> from the top level after construction.</p>

<p>One nicety would be to write a static method <code>PyCat.from_command_line</code> which returns a new instance of <code>PyCat</code> based on arg parsing, which would also be a static method. That way, the class contains more of its business logic and is more useful on its own.</p>

<p><code>generate_temp_cert</code> can - and should - be a <code>@staticmethod</code>, as well. It doesn't reference <code>self</code>.</p>

<p>You should turn the class into a context manager, since you have a socket that needs to be closed. For more information do some reading here - <a href="https://docs.python.org/3/library/stdtypes.html#typecontextmanager" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#typecontextmanager</a> - and then use a <code>with</code> at the top level.</p>

<p>Your Python file, since it's executable, is missing a shebang at the top:</p>

<pre><code>#!/usr/bin/env python3
</code></pre>

<p>Your little hack to initialize <code>data</code> to <code>starting</code> to work around the first loop iteration is not advisable. There's also a bug where you don't actually check <code>data</code> directly after your <code>recv</code>, so you could get back an unexpected <code>None</code>. Instead, do something like:</p>

<pre><code>response = b''
while True:
    data = socket_conn.recv(length)
    if not data:
        break
    # ...
</code></pre>

<p>The concatenation you're doing on <code>response</code> might also be problematic. If you're in Python 2 it's still (strangely) the best thing to do; however, if you're in Python 3, this kind of concatenation can become very inefficient, and you should be using a <code>BytesIO</code> instead.</p>

<p>You should check if <code>cmd == "exit"</code> before doing your regex, because you might just throw the results away anyway.</p>

<pre><code>subprocess.check_output(command, stderr=subprocess.STDOUT, shell=True)
</code></pre>

<p>Be <em>very</em> careful about this. <code>shell=True</code> on its own is a <a href="https://docs.python.org/3.7/library/subprocess.html#frequently-used-arguments" rel="nofollow noreferrer">security risk</a>. Allowing a network-connected, unauthenticated application to run arbitrary shell commands is a gaping security hole.</p>
    </div>