<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>Sanitizer</code> is a dangerous misnommer IMO. A better name could be <code>NameQuoter</code>, since that's what it does: it uses the RDBMS-specific syntax for <em>quoting</em> identifiers - SQL Server using square brackets, MySQL using backticks, Oracle using backslashes: this has nothing to do with <em>sanitizing</em>, which from what I can tell is essentially impossible to achieve with this framework that I would dub "SQL Injection Framework".</p>

<p><code>FieldId</code> is also a misnommer - I don't know about Oracle, but on SQL Server every database object has an ID, and I would read "field ID" as a value that's referring to that ID. What you have is a <code>ColumnName</code>, not an ID.</p>

<p><code>Context</code> is also a confusing name: in Entity Framework, <code>Context</code> refers to the unit of work; it encapsulates a transaction and exposes the repositories - as far as client code is concernd, it <em>is</em> the database connection... anyone remotely familiar with standard .NET data access code will raise an eyebrow at "context" being used to refer to what's essentially a wrapper object for various types of values. Why can't a <code>decimal</code> be <code>null</code>, but a <code>DateTime</code> can?</p>

<p>This is a problem:</p>

<pre><code>public abstract class FieldSearchContext
{
    public virtual string FieldId { get; }

    protected FieldSearchContext(string fieldId)
    {
        FieldId = fieldId;
    }
}
</code></pre>

<p>You're assigning a <code>virtual</code> property in the base constructor. That property should not be <code>virtual</code> at all. Here's why it's a problem:</p>

<pre><code>public class BrokenSearchContext : FieldSearchContext
{
    public BrokenSearchContext() : base("Foo") { }

    public override string FieldId =&gt; "Bar";
}
</code></pre>

<p>The base constructor runs first, receives <code>"Foo"</code>, invokes the <code>FieldId</code> property... which is overridden in the derived class... as an immutable getter. How is the base class assigning its <code>FieldId</code> now? Right: it doesn't... and that merely makes things confusing <em>in this case</em> (value read isn't the value written) - but in other situations it could mean a bug that's very hard to track down.</p>

<p>Avoid <code>virtual</code> member calls in a constructors - might be innocuous in this particular case, but one day you'll be invoking a side-effecting virtual method in a base constructor, and you're not going to like it. <code>FieldId</code> has no reason to be <code>virtual</code> in the first place.</p>

<p>But of all problems, this is the single most dangerous one:</p>

<pre><code>public override object GetValue(TextContext context)
{
    if (context.Text == null)
    {
        return null;
    }

    return "'" + context.Text + "'";
}
</code></pre>

<p>See, I like Irish whiskey, and code like this makes me want to order a double. What happens when <code>context.Text</code> is <code>Elizabeth O'Connor</code>? Or <code>Patrick O'Neil</code>?</p>

<p>Or <a href="https://xkcd.com/327/" rel="noreferrer"><code>Robert';DROP TABLE Students;--</code></a>?</p>

<p>I'm sorry to say, the most pressing issue with this code isn't how bloated this whole "criteria builder" tooling works, nor how well it does or doesn't adhere to OCP: the most pressing issue with this code is that it's literally a <em>SQL Injection Framework</em>, making it child's play to generate SQL statements that can - and if this goes anywhere near a public-facing client, eventually <em>will</em> - contain malicious data... all while the consuming C# code looks and reads very much like it's perfectly safe &amp; secure.</p>

<p>The biggest problem with this code, is that <em>it exists</em> - concatenating parameter values into SQL statements <strong>is not the job of the client connection</strong>. It's the job of the server, and doing this in a secure way involves commands and parameters - not string concatenations.</p>

<p>I wouldn't worry about breaking existing code - the existing code <em>is already broken</em>, beyond repair. </p>

<p>To be clear: the solution isn't to escape single quotes or make sure SQL keywords aren't present in the string - the solution is to stop concatenating WHERE clauses in SQL strings.</p>

<p>Consider using an ORM, e.g. Entity Framework - or Dapper.NET if you want a lightweight but performant solution, to generate properly parameterized SQL statements without any concatenation.</p>
    </div>