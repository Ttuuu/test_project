<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The issue of performance hasn't specifically been raised, but it's worth addressing (for giggles):</p>

<p>Individual calls to <code>putchar</code>, while programatically simple, are slower than sending out entire strings at a time from a buffer. @jxh had posted an answer using basically this principle, though I wouldn't make it recursive since a loop is perfectly fine and won't blow your stack.</p>

<p>To illustrate the difference: using your original code (but with <code>n=20000</code>), I get</p>

<pre class="lang-none prettyprint-override"><code>$ gcc -std=c18 -Wall -O3 -march=native -o slow pyramid-slow.c
$ time ./slow &gt; /dev/null
real    0m0.832s
user    0m0.808s
sys 0m0.023s
</code></pre>

<p>Using the same size but <code>puts</code>-based code, we get</p>

<pre class="lang-none prettyprint-override"><code>$ gcc -std=c18 -Wall -O3 -march=native -o fast pyramid-fast.c
$ time ./fast &gt; /dev/null

real    0m0.058s
user    0m0.039s
sys 0m0.019s
</code></pre>

<p>The <code>puts</code> code is:</p>

<pre><code>#include &lt;assert.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

int main(void) {
    const int n = 20000;

    char *buf = malloc(n + 1);
    assert(buf);
    memset(buf, '*', n);
    buf[n] = '\0';

    int i;
    for (i = n-1; i &gt;= 0; i--)
        puts(buf + i);
    for (i = 1; i &lt; n; i++)
        puts(buf + i);

    return 0;
}
</code></pre>

<p>This code offers a fourteen-fold speedup for the shown size. The reason for this is that printing to the screen is effectively a file operation, and file operations are faster when they operate on large blocks of memory instead of on one byte at a time.</p>

<p>All of this should be taken with a grain of salt, since it's nearly guaranteed that performance is not a concern for your application. Even so, this method avoids having to write nested loops and is thus more readable, as long as you can wrap your head around the loop indexing.</p>
    </div>