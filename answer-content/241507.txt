<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I believe you can do this if you put the header keys inside an array, and then you can loop over the array itself, and use <code>TryGetValue</code> for the dictionary. </p>

<p>This is the simplest form for it : </p>

<pre><code>public readonly string[] HeaderKeys = {
    "header-abc", 
    "header-pqr", 
    "header-def", 
    "header-hip"
}

for(var x = 0; x &lt; HeaderKeys.Length; x++)
{
    var isKeyExist = values.TryGetValue(HeaderKeys[x], var KeyValue);

    // if there is no key defined, just go to the next iteration.
    if(!isKeyExist) { continue; }   

    switch (HeaderKeys[x])
    {
      case "header-abc":
          // inline assigning
          HeadOne = HeadOneId = KeyValue; 
          break;
      case "header-pqr":
          HeadTwo = HeadTwoId = KeyValue;
          break;
      case "header-def":
          HeadThree = HeadThreeId = KeyValue;
          break;
      case "header-hip":
          HeadFour = HeadFourId = KeyValue;
          break;
      //.. bunch of other case block here with similar stuff
    }
}
</code></pre>

<p>You need a <code>readonly string[]</code> this way, it can't be changed once initialized. <code>System.Array</code> is the lightest, and yet the simplest array, so using <code>for</code> loop with it would give you the fastest iteration over any other collection type. </p>

<p>Next, you only want to pass each header key to the <code>TryGetValue</code> and get the value. The <code>TryGetValue</code> would return <code>true</code> if the value has been <code>out</code>, and <code>false</code> if there is none. </p>

<p>Then, you have one line if condition : </p>

<pre><code>    // if there is no key defined, just go to the next iteration.
    if(!isKeyExist) { continue; }   
</code></pre>

<p>This would skip any iteration if the result of <code>TryGetValue</code> is <code>false</code>. 
And I believe that <code>string.IsNullOrWhiteSpace(KeyValue)</code> is an extra unneeded work. So, I got rid of it. because even if the <code>KeyValue</code> is null or empty, the variables would be also null. So, at this stage you're just assigning variables, the other validation would be on other part of the current system where it needs to be critical to have a value. </p>

<p>Now, assigning the variables like this :  </p>

<pre><code>HeadOne = KeyValue;
HeadOneId = HeadOne;
</code></pre>

<p>can be simplified to this : </p>

<pre><code>HeadOne = HeadOneId = KeyValue;
</code></pre>

<p>the difference is that the first one would let the compiler read the value twice. While the second would read it once, and assign it twice. </p>
    </div>