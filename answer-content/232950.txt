<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Don't raise generic exceptions</h1>

<p>Avoid raising a generic Exception. To catch it, you'll have to catch all other more specific exceptions that subclass it.</p>

<p>Instead of raising <code>Exception</code> directly when the user inputs a bad height, consider raising a <code>RuntimeError</code>, or in a larger codebase, a custom subclass. Then, explicitly list all of the exceptions you expect to be raised in your <code>except</code> clause, e.g. <code>TyperError</code> and <code>RuntimeError</code>.</p>

<h1>Local variable names</h1>

<p>The name <code>dp</code> isn't terribly informative as to what the list contains. Consider refactoring to something more descriptive.</p>

<h1>Using globals in time-senstive code</h1>

<p>Project Euler problems tend to require some fairly intensive computations. It may be advisable to try extract as much performance as possible inside of critical portions of you code, such as within nested loops.</p>

<p>In your solution, all of the variables used after <code>if __name__ == '__main__'</code> are in fact <em>global variables</em>, which are <a href="https://stackoverflow.com/questions/11241523/why-does-python-code-run-faster-in-a-function?noredirect=1&amp;lq=1">slower than local variables</a>. For a mild performance boost, consider refactoring all of this code into a <code>main</code> function, which you may then call after the <code>__main__</code> guard:</p>

<pre><code>def main():
    height = None
    ...
    print('The maximum triangle sum is: ')
    print(max_triangle_sum(triangle, height))

if __name__ == '__main__':
    main()
</code></pre>

<h1>Dummy values</h1>

<p>You initially assign <code>height = None</code>, but there is no branch where <code>height</code> keeps that value. Therefore, it isn't <em>necessary</em> to initialize <code>height</code> at this time, since it is guaranteed to be given a value by the branches that follow. </p>

<p>Some organization encourage initializing variables early on with dummy values so that developers can immediately see what variables will be in play in the code that follows. Others <em>discourage</em> this practice, since it can give developers a false sense of what values a variable is expected to take on (e.g. will height be <code>None</code> later?). Whether you choice to initialize variables early with dummy values largely comes down to stylistic preferences.</p>

<h1>Documentation</h1>

<p>You don't have any comments or docstrings in your code. These forms of documentation are extremely helpful for people who must read your code, which include both other developers as well you when you return to your code after working on another project for two months. Some basic conventions for writing docstrings are laid out in <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">PEP 257</a>.</p>
    </div>