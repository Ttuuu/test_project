<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Avoid multiple statements per line like this:</p>

<blockquote>
<pre><code>String test = "john doe", check;
</code></pre>
</blockquote>

<p>It's hard to see that there's another variable declaration, <code>check</code>, at the end of that line.
This is better:</p>

<pre><code>String test = "john doe";
String check;
</code></pre>

<p>However, you didn't need to declare <code>check</code> before the loop.
You could declare it inside the loop, and it would be better:</p>

<pre><code>for(int ktr = 0; ktr &lt; test.length(); ktr++){
    String check = test.substring(ktr, ktr+1);
</code></pre>

<p>The reason this is better is that <code>check</code> is not used anywhere outside this loop. By declaring it inside, you make it <em>impossible</em> to use it outside, which reduces potential mistakes.</p>

<p>Instead of iterating over the character position indexes and then creating a single-character string in <code>check</code> using <code>test.substring</code>,
it would have been better to iterate over the characters, like this:</p>

<pre><code>for (char c : test.toCharArray()) {
</code></pre>

<p>This would allow to replace the tedious <code>!"x".equals(check)</code> conditions with simpler <code>'x' != c</code>. Or even a <code>switch</code>, like this:</p>

<pre><code>switch (c) {
    case 'b':
    case 'c':
    // ... many more cases...
        break;
    default:
        System.out.print(c);
}
</code></pre>

<p>Of course, none of this matters much (except for your learning),
because <a href="https://codereview.stackexchange.com/users/27623/syb0rg">@syb0rg</a> is right, this can be greatly simplified using a regex.</p>

<p>A slightly simpler variation over the regex given by @syb0rg is to ignore upper/lower case in the pattern, by inserting <code>(?i)</code> anywhere inside the pattern string:</p>

<pre><code>System.out.println(answer.replaceAll("(?i)[^aeiou]", ""));
</code></pre>

<p>However, as <a href="https://codereview.stackexchange.com/users/31562/simon-forsberg">@Simon</a> hinted in a comment,
this will remove more than just consonants,
it will remove <em>everything</em> that is not a vowel.
To remove strictly consonants only,
you can list them explicitly,
instead of the simpler rule of "non-vowels" in the previous example:</p>

<pre><code>System.out.println(answer.replaceAll("(?i)[bcdfghjklmnpqrstvwxyz]", ""));
</code></pre>
    </div>