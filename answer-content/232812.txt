<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Fix all Warnings and Errors</h2>

<p>During development it is a best practice to get all warning messages as well as all error messages. Warning messages can indicate hidden bugs in the code. For most C++ compilers the <code>-wall</code> switch will provide all warnings. I am building using Visual Studio 2019 Professional and there are many warnings presented during the build:</p>

<blockquote>
  <p>1&gt;------ Build started: Project: timelibrary2, Configuration: Debug Win32 ------<br>
  1&gt;timelibrary2.cpp<br>
  1&gt;D:\ProjectsNfwsi\CodeReview\timelibrary2\timelibrary2\timelibrary2.cpp(107,16): warning C4477: 'sprintf' : format string '%02d' requires an argument of type 'int', but variadic argument 1 has type 'utc_clock::time'<br>
  1&gt;D:\ProjectsNfwsi\CodeReview\timelibrary2\timelibrary2\timelibrary2.cpp(107,16): message : consider using '%lld' in the format string<br>
  1&gt;D:\ProjectsNfwsi\CodeReview\timelibrary2\timelibrary2\timelibrary2.cpp(107,16): message : consider using '%I64d' in the format string<br>
  1&gt;D:\ProjectsNfwsi\CodeReview\timelibrary2\timelibrary2\timelibrary2.cpp(107,16): warning C4477: 'sprintf' : format string '%02d' requires an argument of type 'int', but variadic argument 2 has type 'utc_clock::time'<br>
  1&gt;D:\ProjectsNfwsi\CodeReview\timelibrary2\timelibrary2\timelibrary2.cpp(107,16): message : consider using '%lld' in the format string<br>
  1&gt;D:\ProjectsNfwsi\CodeReview\timelibrary2\timelibrary2\timelibrary2.cpp(107,16): message : consider using '%I64d' in the format string<br>
  1&gt;D:\ProjectsNfwsi\CodeReview\timelibrary2\timelibrary2\timelibrary2.cpp(107,16): warning C4477: 'sprintf' : format string '%02d' requires an argument of type 'int', but variadic argument 3 has type 'utc_clock::time'<br>
  1&gt;D:\ProjectsNfwsi\CodeReview\timelibrary2\timelibrary2\timelibrary2.cpp(107,16): message : consider using '%lld' in the format string<br>
  1&gt;D:\ProjectsNfwsi\CodeReview\timelibrary2\timelibrary2\timelibrary2.cpp(107,16): message : consider using '%I64d' in the format string<br>
  1&gt;D:\ProjectsNfwsi\CodeReview\timelibrary2\timelibrary2\timelibrary2.cpp(107,16): warning C4477: 'sprintf' : format string '%03d' requires an argument of type 'int', but variadic argument 4 has type 'utc_clock::time'<br>
  1&gt;D:\ProjectsNfwsi\CodeReview\timelibrary2\timelibrary2\timelibrary2.cpp(107,16): message : consider using '%lld' in the format string<br>
  1&gt;D:\ProjectsNfwsi\CodeReview\timelibrary2\timelibrary2\timelibrary2.cpp(107,16): message : consider using '%I64d' in the format string<br>
  1&gt;D:\ProjectsNfwsi\CodeReview\timelibrary2\timelibrary2\timelibrary2.cpp(107,16): warning C4477: 'sprintf' : format string '%03d' requires an argument of type 'int', but variadic argument 5 has type 'utc_clock::time'<br>
  1&gt;D:\ProjectsNfwsi\CodeReview\timelibrary2\timelibrary2\timelibrary2.cpp(107,16): message : consider using '%lld' in the format string<br>
  1&gt;D:\ProjectsNfwsi\CodeReview\timelibrary2\timelibrary2\timelibrary2.cpp(107,16): message : consider using '%I64d' in the format string<br>
  1&gt;timelibrary2.vcxproj -&gt; D:\ProjectsNfwsi\CodeReview\timelibrary2\Debug\timelibrary2.exe<br>
  1&gt;Done building project "timelibrary2.vcxproj".<br>
  ========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========  </p>
</blockquote>

<p>The above warnings are all on line 107 which is this line:</p>

<pre><code>        sprintf(str, "%02d:%02d:%02d:%03d:%03d", to_hour(t), to_min(t), to_sec(t), to_mili(t), to_micro(t));
</code></pre>

<p>There is also a warning in the IDE about this line:  </p>

<pre><code>        time t = (((time_buf-&gt;tm_sec + (time_buf-&gt;tm_min * 60) + (time_buf-&gt;tm_hour * 3600)) * 1000) + systime.wMilliseconds) * 1000ULL;
</code></pre>

<p>This warning is <code>Arithmetic Overflow</code>, which can indeed create errors or bugs.</p>

<h2>Avoid <code>using namespace std;</code></h2>

<p>While it is not in the code under review, it is apparent from the code in <code>main()</code> that the <code>using namespace std;</code> is in the code.</p>

<p>If you are coding professionally you probably should get out of the habit of using the <code>using namespace std;</code> statement. The code will more clearly define where <code>cout</code> and other identifiers are coming from (<code>std::cin</code>, <code>std::cout</code>). As you start using namespaces in your code it is better to identify where each function comes from because there may be function name collisions from different namespaces. The identifier<code>cout</code> you may override within your own classes, and you may override the operator <code>&lt;&lt;</code> in your own classes as well. This <a href="https://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">stack overflow question</a> discusses this in more detail.</p>

<h2>struct utc_clock</h2>

<p>In the declaration of <code>struct utc_clock</code> there is the <code>public:</code> declaration, this is not necessary since by default all contents of a struct are public.</p>

<p>It is not clear why all the functions in the struct are declared as <code>static</code>. It means while many instances of the utc_clock struct may be instantiated, they all refer to one instance of each function.</p>

<p>If the utc_clock struct is being use to convert the system up time to utc, it might be good to add a function <code>to_days</code> as well, since some systems may be up for days, weeks or months.</p>

<h2>Declare and Initialize Variables at the Same Time</h2>

<p>A good practice in C++ is to initialize the variables when they are declared. C++ does not automatically initialize variables as some other languages do. Each declaration and initialization should be in it's own statement, on its own line, this makes it easier to find and edit the variable declaration and initialization.</p>

<p>Instead of </p>

<pre><code>    unsigned long long micro, mili, second;

    micro = utc_clock::to_micro(t);
    mili = utc_clock::to_mili(t);
    second = utc_clock::to_sec(t);
</code></pre>

<p>it would be better to declare and initialize like this</p>

<pre><code>    unsigned long long micro = utc_clock::to_micro(t);
    unsigned long long mili = utc_clock::to_mili(t);
    unsigned long long second = utc_clock::to_sec(t);

    unsigned long long s = micro + mili;
</code></pre>

<h2>Unused Variables</h2>

<p>In the <code>main()</code> function, the variable <code>s</code> is declared and assigned a value but it is never referenced. It would better if the variable <code>s</code> wasn't declared or initialized.</p>

<h2>Initialization of Private Variables in a Constructor</h2>

<p>It is possible and generally desired to private variables in a class outside the body of the constructor. This can be accomplished using the <code>{}</code> operator, so instead of </p>

<pre><code>        time_point(const time&amp; otherTime, const date&amp; otherDate)
        {
            _MyTime = otherTime;
            _MyDate = otherDate;
        } 
</code></pre>

<p>use </p>

<pre><code>        time_point(const time&amp; otherTime, const date&amp; otherDate)
        : _MyTime{otherTime}, _MyDate{otherDate}
        {
        }
</code></pre>
    </div>