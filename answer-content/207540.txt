<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>    private void btn0_Click(object sender, RoutedEventArgs e)
    {
        this.displayTextbox.Text = "";
        input += 0;
        this.displayTextbox.Text += input;
    }

    private void btn1_Click(object sender, RoutedEventArgs e)
    {
        this.displayTextbox.Text = "";
        input += 1;
        this.displayTextbox.Text += input;
    }

    //And 8 more...
</code></pre>

<p>It's very obvious that these methods are copy/paste and then you effectively change a single value.</p>

<p>A good rule of thumb is that a developer should count like a caveman: "one, two, many". When something is used more than twice, you need to abstract it into a reusable algorithm.</p>

<p>Doing so is, at first glance, very simple:</p>

<pre><code>    private void numberButton_Click(object sender, RoutedEventArgs e)
    {
        this.displayTextbox.Text = "";
        input += 0;
        this.displayTextbox.Text += input;
    }
</code></pre>

<p>And then you set all your number buttons to have this same click event handler.</p>

<p>However, there is one issue: you need to know the <code>input</code> value of each button. This can be done in several ways. I'll list two: the quick and dirty way and the better way.</p>

<p><strong>Quick and dirty</strong><br>
Since your button label equals the number you wish to add, you can effectively use that to get the right value. This isn't a great solution (it ties your UI to your logic), but it is the simplest solution I can think of:</p>

<pre><code>    private void numberButton_Click(object sender, RoutedEventArgs e)
    {
        this.displayTextbox.Text = "";
        input += Convert.ToInt32((sender as Button)?.Text ?? "0");
        this.displayTextbox.Text += input;
    }
</code></pre>

<p>But this isn't the best solution. It feels (and demonstrably is) dirty.</p>

<p><strong>Better</strong><br>
A better way would be to create a <code>NumberButton</code> class which works exactly like a button, but also contains a number value that you can use.</p>

<p>Create a new WPF user control. Change the XAML to use a <code>&lt;Button&gt;</code> tag instead of a <code>&lt;UserControl&gt;</code> tag, and set the code behind class to inherit from button:</p>

<pre><code>public partial class NumberButton : Button {}
</code></pre>

<p>And then you add your additional value property:</p>

<pre><code>public int NumberValue { get; set; }
</code></pre>

<p>In your calculator window XAML, you can now set this property:</p>

<pre><code>&lt;NumberButton ... NumberValue="1" Click="numberButton_Click" /&gt;
</code></pre>

<p>And then you can retrieve the <code>NumberValue</code> in the click event:</p>

<pre><code>    private void numberButton_Click(object sender, RoutedEventArgs e)
    {
        this.displayTextbox.Text = "";
        input += (sender as NumberButton)?.NumberValue ?? 0;
        this.displayTextbox.Text += input;
    }
</code></pre>

<p>In case you were using WinForms instead of WPF, <a href="https://docs.microsoft.com/en-us/dotnet/framework/winforms/controls/how-to-inherit-from-existing-windows-forms-controls" rel="nofollow noreferrer">here's an MSDN guide on how to inherit from existing controls</a>.</p>
    </div>