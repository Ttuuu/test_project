<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Coding style</h3>

<p>I'm not a JavaScript guru,
but I'm pretty sure the coding style guide is much less strict compared to Java,
for example.
The way used spacing around operators,
and the placement of braces like in Java seem very common,
and I've never heard anybody object to that.
There are some other styles like the ones you mentioned,
but they are rare.
Some people also prefer indentation using 2 spaces instead of 4,
but it seems to be largely a matter of taste.</p>

<p>For reference,
PyCharm is a fantastic IDE for Python + Web development by JetBrains (same breed as IntelliJ),
it has good support for JavaScript,
and it doesn't object to your code in terms of style.
I'd take that as a good sign.
For code like <code>people.coding( "like this" );</code>,
the auto-format function removes the spaces inside the parens.</p>

<h3>Bad practices</h3>

<p>First of all, paste the code in <a href="http://jshint.com/" rel="nofollow">http://jshint.com/</a> and see for yourself:</p>

<ul>
<li>One duplicate variable definition: <code>checkbox</code></li>
<li>A few variables used out of scope</li>
</ul>

<p>In addition,
I find it odd that you don't take full advantage of jQuery in <code>embedFunction</code>.
Since you already use jQuery quite a bit elsewhere in the script,
for example instead of:</p>

<blockquote>
<pre><code>   document.getElementsByTagName('head')[0].appendChild(script);
</code></pre>
</blockquote>

<p>You could simplify as:</p>

<pre><code>$('head').append(script);
</code></pre>

<p><strong><em>UPDATE:</em></strong> It seems (from your comment) that this suggestion doesn't work for you "as-is". I'll try to figure out why. In the meantime, my objection still stands: it's a bit odd to have a mixture of classic JavaScript and jQuery within the same script, as if it was done by two different people or the same person at different times. I think it's better to be consistent and write either classic JavaScript without depending on jQuery, or fully embrace jQuery.</p>

<h3>Cache the result of <code>$(...)</code> lookups</h3>

<p>DOM lookups are not exactly cheap.
So whenever you repeat a lookup,
consider caching in a variable instead, for example here:</p>

<blockquote>
<pre><code>if (!$(checkboxes[i]).prop('checked')) {
    continue;
}
var checkbox = $(checkboxes[i]);
</code></pre>
</blockquote>

<p>The above is better if you first assign to <code>checkbox</code>, and then do the <code>if</code>.
It also reduces the duplication of <code>checkboxes[i]</code>.</p>

<p>Later in the code I see <code>$(clickedObject)</code> many times.
It would be good to cache that too, of course.</p>

<h3>Strange elements</h3>

<p>On this line:</p>

<blockquote>
<pre><code>var line_data = (checkbox).data('line');
</code></pre>
</blockquote>

<p>The parens around <code>checkbox</code> are... curious... 
You don't need them,
and might confuse the reader that it was intended as jQuery with mistakenly omitted <code>$</code> (which it is not).</p>

<h3>Augmented assignment</h3>

<p>This assignment can be replaced with <code>+=</code> augmented assignment:</p>

<blockquote>
<pre><code>answer_text = answer_text + "\n    " + block[block_line].substr(cut_count);
</code></pre>
</blockquote>
    </div>