<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This question does not contain working code, a requirement of Code Review, and is more about programming principles. This is still an interesting question though. </p>

<p>I have to admit I don't know much about SOLID principles, but I have been programming for decades, so these principles do make some sense to me. They are basic steps towards better code. These principles alone do, however, not produce good code. They are very abstract, and might be difficult to implement in practice. In my opinion code should first and foremost be easy to read/understand, and suited to the task at hand.</p>

<p>So, let's first, before we refactor the code, think about what the code is supposed to do. That is not very clear. Perhaps there was a written introduction accompanying the code, which has been left out of this question? We have a class called <code>FileHandler</code> which parses data, probably from a file, using two different parser classes. That's very little information. The name of the <code>FileHandler</code> class doesn't even cover what it actually does. It doesn't actually handle any file. On the other hand, the vagueness gives us a lot of freedom.</p>

<p>The first thing that is clearly wrong with the code is the way the parser classes are handled. Instead of handing over a certain parse class to the file handler, a <code>$type</code> parameter is given to the the <code>parse()</code> method. This probably breaks several of the SOLID principles. In my own simple words: Whenever a new parser class is created, the file handler class needs to be edited to make use of it. Let us therefore first correct this problem.</p>

<pre><code>class FileHandler
{
    public function __construct(string $filename, ParserInterface $parser)
    {
        $this-&gt;filename = $filename;
        $this-&gt;parser = $parser;
    }

    public function parse(string $data)
    {
        return $parser-&gt;parse($data);
    }
}

interface ParserInterface
{
     public function parse(string $data)
}

class XmlParser implements ParserInterface
{
    public function parse(string $data)
    {
    }
}

class CsvParser implements ParserInterface
{
    public function parse(string $data)
    {
    }
}
</code></pre>

<p>Now this code looks a lot cleaner, and adheres, I hope, to the SOLID principles. Step 1 done. I left out all comments to shorten the code, but obviously you would add them in the real code.</p>

<p>Now I didn't do much with the <code>FileHandler</code> class yet. That's because this is part of the next step: We should add a new file handler called <code>PriceFileHandler</code>. It would make sense to create a file handler interface and implement two handlers. Like this:</p>

<pre><code>interface FileHandlerInterface
{
    public function __construct(string $filename, ParserInterface $parser)
    public function parse(string $data)
}

class FirstFileHandler implements FileHandlerInterface
{
    public function __construct(string $filename, ParserInterface $parser)
    {
        $this-&gt;filename = $filename;
        $this-&gt;parser = parser;
    }

    public function parse(string $data)
    {
        return $parser-&gt;parse($data);
    }
}

class PriceFileHandler implements FileHandlerInterface
{
    public function __construct(string $filename, ParserInterface $parser)
    {
        $this-&gt;filename = $filename;
        $this-&gt;parser = parser;
    }

    public function parse(string $data)
    {
        return $parser-&gt;parse($data);
    }
}
</code></pre>

<p>I agree that this looks boring, but then again, we have no idea yet, what to do with a file containing prices. This is abstract and incomplete code. There's only so much we can do before the code becomes completely unrecognizable. </p>

<p>Finally we have to add 'supporting stream parsing to one parser implementation'. A stream in PHP is a resource object which exhibits streamable behavior. See: <a href="https://www.php.net/manual/en/intro.stream.php" rel="nofollow noreferrer">https://www.php.net/manual/en/intro.stream.php</a> So, given a stream, the parser class should parse it. Let's use the method <code>parseStream()</code> for this.</p>

<pre><code>class XmlParser implements ParserInterface
{
    public function parse(string $data)
    {
    }

    public function parseStream(string $filename)
    {
        $data = file_get_contents($filename);
        return $this-&gt;parse($data);
    }
}
</code></pre>

<p>Is that all? Well, yeah. In the end, hidden inside PHP, streams are used by functions like <code>file_get_contents()</code>, so I used that. If the files get very big you would need to read the file in manageble chunks. That would require quite a bit more code than this question warrants. To be honest, I don't think this would be a good answer to the assignment.</p>

<p>By now we should have notice that if we want to make use of the new <code>parseStream()</code> method we would have to extend a file handler, and probably the interfaces. It might make more sense to give a parser an abstract file handler, and let it parse that, than the other way around. That way we don't need a <code>parser()</code> method in the file handler at all, and it can do what it should be doing: handling a file. These classes would then better adhere to the Single Responsibility Principle (SRP). I think doing this here would be beyond the scope of this question. We have to work with what was given: Not much.</p>

<p>I do realise that this answer doesn't answer all of your questions. It is how I would approach the code at hand. Correct coding requires deep knowledge of the domain it is applied to. Should the file handlers use a parser or should the parsers use a file handle? This depends on how the rest of the code will be structured. Normally it would be weird for file handlers to do the parsing, but what if that was the whole point of handling the files? In other words, there is no 100% correct solution to this assignment.</p>

<p>The two follow up questions are difficult to answer, and they imply a certain solution to the first question. Perhaps the assignment is not a very good one?</p>

<p>Priciples are often quite abstract, and therefore somewhat difficult to understand. Seeing refactoring, and my thought process, in action might help you. So instead of commenting on your code I made my own. I hope you find this helpful.</p>
    </div>