<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks good to me!</p>

<p>I'm pretty sure you don't need the <code>constexpr noexcept</code> clutter on all your lambdas: lambdas are <em>at least</em> <code>constexpr(auto)</code> and I think also <code>noexcept(auto)</code>.</p>

<p>It is surprising, but I think technically reasonable, for you to take <code>Pred&amp;&amp; pred</code> by forwarding reference and then <em>not</em> forward it when you call it. This means that you can take either const or non-const predicates (always by reference), and call them with the appropriate constness, but always as an lvalue. Personally I would probably take <code>const Pred&amp; pred</code> and screw anyone trying to pass in a mutable lambda; or take <code>Pred pred</code> and screw anyone trying to pass in an expensive-to-copy lambda without <code>std::ref</code>. Your way seems better, with the only downside being that it <em>looks</em> like a misuse of perfect forwarding until the reader studies it really hard. Perhaps a block comment is in order.</p>

<hr>

<p>I can technically break your <code>count</code> by passing in types whose <code>operator==</code> returns a type which is <code>BooleanLike</code> but happens to have a wacky conversion to <code>size_t</code>. It would be better for you to explicitly cast the result of <code>value == xs</code> to <code>bool</code> before doing anything else with it:</p>

<pre><code>template&lt;class Tuple, class T&gt;
constexpr size_t count(Tuple&amp;&amp; t, const T&amp; value) noexcept {
  return std::apply(
      [&amp;](auto&amp;&amp;... xs) {
        return (0 + ... + size_t(bool(value == xs)));
      },
      std::forward&lt;decltype(t)&gt;(t));
}
</code></pre>

<p>Stylistically I think your <code>0u</code> was unnecessarily confusing: If you just mean "zero" and don't care about the type, then <code>0</code> is fine. If you're trying to avoid surprising implicit type-conversions and do all the math in <code>size_t</code>, then <code>size_t(0)</code> would be best.</p>

<hr>

<p>It's interesting that your <code>mismatch</code> is the <em>one</em> function you didn't do with either <code>std::apply</code> or fold-expressions.</p>

<p>You seem to have forgotten that <code>std::forward&lt;T&gt;(t)</code> is the more common way to write <code>std::forward&lt;decltype(t)&gt;(t)</code> when <code>T</code> is known.</p>

<pre><code>template &lt;typename TupleZero, typename TupleOne&gt;
constexpr std::optional&lt;std::size_t&gt; mismatch(TupleZero&amp;&amp; t0,
                                              TupleOne&amp;&amp; t1) noexcept {
  static_assert(std::tuple_size_v&lt;std::decay_t&lt;decltype(t0)&gt;&gt; &lt;=
                std::tuple_size_v&lt;std::decay_t&lt;decltype(t1)&gt;&gt;);
  return mismatch_impl&lt;std::tuple_size_v&lt;std::decay_t&lt;decltype(t0)&gt;&gt;&gt;(
      std::forward&lt;decltype(t0)&gt;(t0), std::forward&lt;decltype(t1)&gt;(t1));
}
</code></pre>

<p>I would write this as:</p>

<pre><code>template&lt;class T0, class T1&gt;
constexpr std::optional&lt;size_t&gt; mismatch(T0&amp;&amp; t0, T1&amp;&amp; t1) noexcept {
  constexpr size_t N = std::tuple_size_v&lt;std::decay_t&lt;T0&gt;&gt;;
  static_assert(N &lt;= std::tuple_size_v&lt;std::decay_t&lt;T1&gt;&gt;);
  return mismatch_impl&lt;N&gt;(std::forward&lt;T0&gt;(t0), std::forward&lt;T1&gt;(t1));
}
</code></pre>

<p>And I would maybe look for a way to write it in terms of</p>

<pre><code>size_t result = 0;
FOREACH...(
   [&amp;]() {
       if (result == 0)
           if (std::get&lt;Is&gt;(t0) == std::get&lt;Is&gt;(t1))
               result = I + 1;
   }() ...
)
if (result != 0) {
    return result - 1;
}
return std::nullopt;
</code></pre>

<p>instead of the recursion you've got. But the <code>FOREACH...</code> part would have to use a helper function anyway to generate the <code>Is</code>; I don't think there's any way to coerce <code>std::apply</code> to do what you want here.</p>
    </div>