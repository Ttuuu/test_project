<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is a quick try to implement your algorithm using 'foldr'. I did not check in depth whether my solution is correct.</p>

<p>I have divided the problem into parts. First we define a function that takes a list and splits the list into pairs of partitions where the order of elements is preserved.</p>

<pre><code>split :: [a] -&gt; [([a],[a])]
split []     = [([],[])]
split (x:xs) = concatMap (\(fst,snd) -&gt; [(x:fst,snd), (fst,x:snd)]) (split xs)
</code></pre>

<p>Employing this definition we can define the list of tuples of decimals.</p>

<pre><code>combinations :: [([Int],[Int])]
combinations = map (\(fst,snd) -&gt; (9:fst,8:snd)) (split [7,6..1])
</code></pre>

<p>To transform these lists of decimals into numbers we use the following transformation.</p>

<pre><code>toDeci :: [Int] -&gt; Int
toDeci = foldl (\acc x -&gt; x + 10 * acc) 0
</code></pre>

<p>Combining these functions we can redefine <code>list</code> as follows.</p>

<pre><code>list :: [(Int,Int)]
list = map (\(fst,snd) -&gt; (toDeci fst,toDeci snd)) combinations
</code></pre>

<p>Now we can define <code>split</code> by using <code>foldr</code>. </p>

<p>We can probably improve the code by using predefined functions like the arrow function <code>(***)</code>.</p>

<p><strong>Edit:</strong> You can generalize <code>split</code> by using the list monad. First we defined <code>split</code> using <code>foldr</code> as follows.</p>

<pre><code>foldr (\x -&gt; concatMap (\(fst,snd) -&gt; [(x:fst,snd), (fst,x:snd)])) [([],[])]
</code></pre>

<p>Now we can observe that the neutral element is <code>return ([],[])</code> in the list monad and <code>concatMap</code> is the implementation of <code>(&gt;&gt;=)</code>. That is, we can define <code>split</code> as follows.</p>

<pre><code>foldr (\x xs -&gt; xs &gt;&gt;= (\(fst,snd) -&gt; [(x:fst,snd), (fst,x:snd)])) (return ([],[]))
</code></pre>

<p>This implementation can be shortened by using the predefined function <code>foldM</code> from <code>Control.Monad</code>.</p>

<pre><code>foldM (\(fst,snd) x -&gt; [(x:fst,snd), (fst,x:snd)]) ([],[])
</code></pre>
    </div>