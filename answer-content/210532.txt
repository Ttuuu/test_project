<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Review</h1>
<p>Not bad, but there is room for a few improvements to avoid some possible problematic input arguments.</p>
<h2>Style</h2>
<p>Some points on your code.</p>
<ul>
<li>The names <code>nums</code> and <code>k</code> could be better, maybe <code>array</code> and <code>rotateBy</code></li>
<li>Try to avoid one use variables unless it makes the lines using them to long. Thus you can pop and unshift in one line <code>nums.unshift(nums.pop());</code></li>
<li>Idiomatic javascript uses zero based loop counters rather than starting at 1. Thus the loop would be <code>for (let i = 0; i &lt; k; i++) {</code></li>
</ul>
<h2>Complexity</h2>
<p>Your complexity is <span class="math-container">\$O(n)\$</span> and storage <span class="math-container">\$O(1)\$</span> where <span class="math-container">\$n\$</span> is the number of rotations, the range <span class="math-container">\$n&gt;0\$</span></p>
<p>However consider the next examples</p>
<pre><code>rotate([1,2,3,4,5,6,7,8,9], 18); // Will rotate 18 times same as rotate 0
rotate([1,2,3,4,5,6,7,8,9], 8); // Will rotate 8 times same as rotate left 1
rotate([1], 8e9); // Will spend a lot of time not changing anything
</code></pre>
<p>Your function will do too much work if the rotations are outside the expected ranges, the rotation can be done in reverse in less steps, or rotating has no effect.</p>
<p>You can limit the complexity to <span class="math-container">\$O(k)\$</span> where <span class="math-container">\$0&lt;k&lt;=n/2\$</span></p>
<h2>Rewrite</h2>
<p>This is a slight improvement on your function to ensure you don't rotate more than needed.</p>
<pre><code>function rotate(array, rotateBy) {
    rotateBy %= array.length;
    if (rotateBy &lt; array.length - rotateBy) {
        while (rotateBy--) { array.unshift(array.pop()) }
    } else {
        rotateBy = array.length - rotateBy;
        while (rotateBy--) { array.push(array.shift()) }
    }
    return array;
}
</code></pre>
<p><strong>Update</strong></p>
<p>As vnp's <a href="https://codereview.stackexchange.com/a/210537/120556">answer</a> points out the complexity of <code>Array.unshift</code> and <code>Array.shift</code> is not as simple as <span class="math-container">\$O(1)\$</span> and will depend on the array type. We can assume the best case for this problem, sparse array (effectively a hash table) and thus will grow/shrink down at <span class="math-container">\$O(1)\$</span></p>
<p>In that case the function above has a mean complexity of <span class="math-container">\$O(log(n))\$</span> of all possible values of <span class="math-container">\$k\$</span></p>
<p>Note that if the cost of grow/shrink operations is <span class="math-container">\$O(n)\$</span> (dense array) this will add <span class="math-container">\$n\$</span> operations for each <span class="math-container">\$k\$</span> making the above <span class="math-container">\$O(kn)\$</span> with <span class="math-container">\$0&lt;=k&lt;(n/2)\$</span> Expressed in terms of <span class="math-container">\$n\$</span> or <span class="math-container">\$k\$</span> only it remains <span class="math-container">\$O(log(n))\$</span>  or <span class="math-container">\$O(k)\$</span></p>
<hr>
<p>You could also use Array.splice</p>
<pre><code> array.unshift(...array.splice(-rotateBy,rotateBy));
</code></pre>
<p>However under the hood the complexity would be a little greater <span class="math-container">\$O(2n)\$</span> (which is still <span class="math-container">\$O(n)\$</span>) as splice steps over each item to remove and add to a new array. Then <code>...</code> steps over them again to <code>unshift</code> each item to the array.</p>
<p>The storage would also increase as the spliced array is held in memory until the code has finished unshifting them making storage <span class="math-container">\$O(n)\$</span></p>
<p>If the array contained all the same values the rotation would have no effect thus all rotation could be done in <strong>O(1)</strong>. However there is no way to know this without checking each item in turn.</p>
    </div>