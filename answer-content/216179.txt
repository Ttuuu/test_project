<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>Option Explicit
</code></pre>
</blockquote>

<p>Always nice to see.</p>

<hr>

<blockquote>
<pre><code>Public Function RemoveBlanksFromArray(ByVal TheArray As Variant) As Variant
</code></pre>
</blockquote>

<p>The usual convention for parameters is <code>camelCase</code> - i.e. <code>theArray</code>. Otherwise looks fine, maybe I'd call it <code>inputArray</code> so it's obvious to the rest of your code what it contains (<a href="https://codereview.stackexchange.com/a/56036/146810">more on naming</a>).</p>

<p>One thing to watch out for when passing arrays <code>byVal</code>. Arrays are a bit like objects in VBA -you never pass actual objects around, just addresses. Similarly, <code>byVal</code> <a href="https://stackoverflow.com/a/49845724/6609896">doesn't make a copy of the actual data</a> in <code>TheArray</code>, just a copy of the <em>pointer</em> to the array's location in memory. With primitive types when you write something like this:</p>

<pre><code>Sub Foo(ByVal bar As Long)
</code></pre>

<p>... only a copy of <code>bar</code> is passed, meaning <code>Foo</code> cannot do anything to alter the original variable. However in your code, you <em>could</em> accidentally modify the values in <code>TheArray</code>.</p>

<p>This is one reason why I'd suggest strongly typing the array - as these can only be passed <code>ByRef</code>; in your comparisons you treat the elements like strings:</p>

<blockquote>
<pre><code>If myElement &lt;&gt; "" Then
</code></pre>
</blockquote>

<p>So why not explicitly declare the array as such?</p>

<pre><code>Public Function RemoveBlanksFromStringArray(ByRef theArray() As String) As String()
</code></pre>

<p>Now the <code>ByRef</code> is clear, and you'll get a minor performance boost because you don't have to cast to and from <code>Variant</code></p>

<hr>

<blockquote>
<pre><code>Dim temp As Variant
'[...]
RemoveBlanksFromArray = temp
</code></pre>
</blockquote>

<p>I tend to name variables that get assigned to the return value of a function <code>result</code>, just personal preference.</p>

<hr>

<blockquote>
<pre><code>ReDim temp(LBound(TheArray) To LBound(TheArray))
</code></pre>
</blockquote>

<p>Glad to see you've explicitly referenced both bounds, avoiding <code>Option Base 1</code> or any <em>convention</em> (hint, there isn't one)</p>

<hr>

<blockquote>
<pre><code>Dim myCount As Long
</code></pre>
</blockquote>

<p>I think this name is misleading. It's not a count really is it, because depending on <code>LBound(TheArray)</code> it might start at 0 or 1 or 7 for all we know. You could name it something like <code>indexOfTempArray</code>, but I think a count is actually more useful and intuitive, so we'll make it one, but maybe more explicit:</p>

<pre><code>Dim countOfNonBlanks As Long
</code></pre>

<hr>

<blockquote>
<pre><code>For Each myElement In TheArray
</code></pre>
</blockquote>

<p>Now there's a small optimisation to be made here; it's marginally quicker to loop over an array by index than with For-Each, so this becomes</p>

<pre><code>Dim index As Long
For index = LBound(TheArray) to UBound(TheArray)
    If TheArray(index) &lt;&gt; "" Then
        '...
</code></pre>

<p>Oh and while we're here, prefer <code>vbNullString</code> to <code>""</code> because the latter could be a non printable character or might have a space in there if you squint etc. vbNullString is unequivocal (<em>Rubberduck</em> would've told you that)</p>

<hr>

<p>That all brings us to the bottle-neck of your code (I think):</p>

<blockquote>
<pre><code>ReDim Preserve temp(LBound(temp) To myCount)
temp(myCount) = myElement
myCount = myCount + 1
</code></pre>
</blockquote>

<p>Your hunch is right, there's a better way. Arrays in VBA are stored as a continuous pre-allocated bit of memory. (This is why array lookups are so fast, because all you do is look up the address of the first item of the array, and offset by a fixed distance - 1 lookup operation. Collections store the address of <em>every element</em> of the array, so to find an element in memory, you first lookup the address associated with it, <em>then</em> look at that address in memory - 2 lookup operations).</p>

<p>However with VBA Arrays what you gain in speed you lose in flexibility. Because the memory is pre-allocated, you can't just add another element on the end, that memory may be in use for something else. So <code>ReDim Preserve</code> actually copies the entire array to a new (bigger) location in memory. That's slow! <a href="https://stackoverflow.com/a/45741887/6609896">Here's</a> where someone told me all that.</p>

<p>Anyway, <strong>what this boils down to is</strong>; imagine the largest size your <code>temp</code> array could ever be (i.e no blanks found, so the same size as your input array), fill it up partially, then <strong><code>ReDim Preserve</code> it once</strong> back down to the actual size it has to be.</p>

<hr>

<p><strong>Putting all that together we get</strong>:</p>

<pre><code>Public Function RemoveBlanksFromStringArray(ByRef inputArray() As String) As String()

    Dim base As Long
    base = LBound(inputArray)

    Dim result() As String
    ReDim result(base To UBound(inputArray))

    Dim countOfNonBlanks As Long
    Dim i As Long
    Dim myElement As String

    For i = base To UBound(inputArray)
        myElement = inputArray(i)
        If myElement &lt;&gt; vbNullString Then
            result(base + countOfNonBlanks) = myElement
            countOfNonBlanks = countOfNonBlanks + 1
        End If
    Next i
    If countOfNonBlanks = 0 Then
        ReDim result(base To base)
    Else
        ReDim Preserve result(base To base + countOfNonBlanks - 1)
    End If

    RemoveBlanksFromStringArray = result

End Function
</code></pre>

<p>On a test of 500,000 items</p>

<ul>
<li>original code took 1.1481±0.0001 s, </li>
<li>refactored code took 0.1157±0.0001 s </li>
</ul>

<p>or ~ 10 times faster</p>

<hr>

<h2>Addendum</h2>

<p>Now I think about it, the original code with copying memory boils down to an <span class="math-container">\$\mathcal O (n^2)\$</span> algorithm, the refactored code is <span class="math-container">\$\mathcal O (n)\$</span> (here <span class="math-container">\$ n\$</span> is the size of the array, <span class="math-container">\$\mathcal O (n^a)\$</span> basically means you loop over the array <span class="math-container">\$ a\$</span> times). Using <code>Timer</code> for some rough results, you can see this trend:</p>

<pre><code>10,000 elements
  Old 0 
  New 0 
100,000 elements
  Old 0.046875 (same order of magnitude as each other)
  New 0.015625 
1,000,000 elements
  Old 3.171875 (1 order of magnitude slower relative to New)
  New 0.125 
10,000,000 elements
  Old 321.46875 (2 orders of magnitude slower)
  New 1.3125 
</code></pre>

<p>I.e. When you do 10x more elements, OP's O(n^2) code gets 10^2 = 100 times slower, the refactored O(n) gets 10^1 = 10 times slower. Therefore relative to the new code, the old code gets 10x slower.</p>

<p>Interestingly, because both algorithms are doing essentially the same operation (writing to memory), which is an O(1) operation (i.e. independent of the rest of the code), once you operate on large enough arrays, optimising the rest of the code becomes inconsequential (Early vs Late binding, For Each vs Index, re-using LBound vs re-measuring). So once you get the algorithm down to the lowest complexity possible (assuming performance is an issue), then pick whichever method is most readable and maintainable.</p>
    </div>