<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Responding to Your question</h2>

<p>This is good use of <a href="https://vuejs.org/v2/api/#ref" rel="nofollow noreferrer"><code>ref</code></a> and <code>Object.assign()</code> but normally this would be a good place to use a <a href="https://vuejs.org/v2/guide/computed.html#Watchers" rel="nofollow noreferrer">watched Property</a>, or if you need to add dashes, a <a href="https://vuejs.org/v2/guide/computed.html" rel="nofollow noreferrer">computed property</a>.</p>

<p>Take a look at the example below, which uses a watcher, instead of the <code>@onchange</code>, which means that the method <code>applyData()</code> can be eliminated:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const form = new Vue({
    el: '#form',
    data: function () {
      return {
        deliveryInfo: {
          receiver: ''
        }
      }
    },
    watch: {
      'deliveryInfo.receiver': function(newValue, oldValue) {
        console.log('receiver changed - deliveryinfo:', this.deliveryInfo);
        this.$emit('applyChildData', this.deliveryInfo);
      }
    },
    methods: {
      test: function () {
          console.log('set John Doe');
        this.deliveryInfo = Object.assign({}, this.deliveryInfo, {receiver: 'John Doe'});
        console.log('After change ', this.deliveryInfo);
        // It triggers applyData method and change input element value
        // But when I remove v-model in input value, it is not working
      }
    }
  });</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;

  &lt;div id="form"&gt;
    &lt;!-- I got question here --&gt;
    &lt;input type="text" ref="receiver" v-model="deliveryInfo.receiver" /&gt;&lt;!--@change="applyData('receiver')"--&gt;
    &lt;button type="button" @click="test"&gt;TEST&lt;/button&gt;
  &lt;/div&gt;</code></pre>
</div>
</div>


<p>Or the snippet below which uses a computed property to add a dash between the third and fourth characters...</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const form = new Vue({
    el: '#form',
    data: function () {
      return {
        deliveryInfo: {
          receiver: ''
        }
      }
    },
    computed: {
      dashedReceiver: function() {
        if (this.deliveryInfo.receiver.length &gt; 3) {
          return this.deliveryInfo.receiver.slice(0,3) + '-' + this.deliveryInfo.receiver.slice(3);
        }
        return this.deliveryInfo.receiver;
      }
    }
  });</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt;

  &lt;div id="form"&gt;
    &lt;!-- I got question here --&gt;
    &lt;input type="text" ref="receiver" v-model="deliveryInfo.receiver" /&gt;
    &lt;div&gt;{{dashedReceiver}}&lt;/div&gt;
  &lt;/div&gt;</code></pre>
</div>
</div>


<h3>Other feedback</h3>

<p>One other critique I have is this line:</p>

<blockquote>
<pre><code>let ref = this.$refs[refName];
</code></pre>
</blockquote>

<p>That variable never gets re-assigned so to avoid accidental re-assignment, use <code>const</code> instead of <code>let</code>. There are some who recommend the following:</p>

<blockquote>
  <ul>
  <li>use <code>const</code> by default</li>
  <li>only use <code>let</code> if rebinding is needed
  <sup><a href="https://mathiasbynens.be/notes/es6-const" rel="nofollow noreferrer">1</a></sup></li>
  </ul>
</blockquote>

<p>There may not be much of a performance difference here although after reading some SO answers like <a href="https://stackoverflow.com/a/50808097/1575353">this one</a> and <a href="https://stackoverflow.com/a/40070682/1575353">this one</a> there is a potential but that might only be if a primitive type value (e.g. <code>42</code>) was used.</p>

<p><sup>1</sup><sub><a href="https://mathiasbynens.be/notes/es6-const" rel="nofollow noreferrer">https://mathiasbynens.be/notes/es6-const</a></sub></p>
    </div>