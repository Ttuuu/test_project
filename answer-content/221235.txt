<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Understand how <code>#include</code> works</h2>

<p>On most platforms, the difference between <code>#include "iostream"</code> and <code>#include &lt;iostream&gt;</code> is that the former looks first in the current directory.  So for system files such as <code>SFML/Graphics.hpp</code>, you should really use <code>#include &lt;SFML/Graphics.hpp&gt;</code> instead.  See <a href="http://stackoverflow.com/questions/3162030/difference-between-angle-bracket-and-double-quotes-while-including-heade">this question</a> for more details.</p>

<h2>Don't hardcode file names</h2>

<p>Generally, it's not a good idea to hardcode a file name in software, and generally especially bad if it's an absolute file name (as contrasted with one with a relative path).  Instead, it would be better to allow the user of the program to specify the name, as with a command line parameter.  This line:</p>

<pre><code>image.loadFromFile("C:/Users/Carter/Pictures/snake_menu.jpg");
</code></pre>

<p>will fail on every computer which a) isn't running Windows and b) doesn't have that exact file in that exact location.  That's not good for portability!</p>

<h2>Simplify your code</h2>

<p>Right now the code to handle clicking on the menu screen is this:</p>

<pre><code>MainMenu::MenuResult MainMenu::HandleClick(int x, int y)
{
        std::list&lt;MenuItem&gt;::iterator it;

        for (it = mMenuItems.begin(); it != mMenuItems.end(); it++)
        {
                sf::Rect&lt;int&gt; menuItemRect = (*it).rect;

                if((x &gt; menuItemRect.left) &amp;&amp;
                        (x &lt; (menuItemRect.left + menuItemRect.width)) &amp;&amp;
                        (y &gt; menuItemRect.top) &amp;&amp;
                        (y &lt; (menuItemRect.top + menuItemRect.height)))
                {
                        return (*it).action;
                }
        }
        return Nothing;
}
</code></pre>

<p>That is <em>much</em> longer and more complex than it needs to be.  First, let's use a "range-for" instead of an iterator:</p>

<pre><code>MainMenu::MenuResult MainMenu::HandleClick(int x, int y)
{
    for (const auto box : mMenuItems)
    {
        if((x &gt; box.rect.left) &amp;&amp;
                (x &lt; (box.rect.left + box.rect.width)) &amp;&amp;
                (y &gt; box.rect.top) &amp;&amp;
                (y &lt; (box.rect.top + box.rect.height)))
        {
            return rect.action;
        }
    }
    return Nothing;
}
</code></pre>

<h2>Use SFML more effectively</h2>

<p>Next, let's use the SFML <code>Rect</code> class to further simplify the code:</p>

<pre><code>MainMenu::MenuResult MainMenu::HandleClick(int x, int y) {
    for (const auto box : mMenuItems) {
        if(box.rect.contains(x, y)) {
            return box.action;
        }
    }
    return Nothing;
}
</code></pre>

<h2>Eliminate "magic numbers"</h2>

<p>There are a few numbers in the code, such as <code>200</code> and <code>100</code> that have a specific meaning in their particular context.  By using named constants such as <code>ButtonLeft</code> or <code>ButtonHeight</code>, the program becomes easier to read and maintain.  For cases in which the constant only has sense with respect to a particular object, consider making that constant part of the object.</p>

<h2>Choose appropriate data structure</h2>

<p>The value of a <code>std::list</code> is that it allows constant time insertion and removal of items.  However, this is <em>not</em> what is needed or desired from a menu.  In fact, it could be a <code>const</code> array like this:</p>

<pre><code>const std::array&lt;MenuItem,2&gt; mMenuItems {{
    { Play, {200, 525, 600, 100}},
    { Exit, {200, 400, 600, 100}},
}};
</code></pre>

<p>You'll note that while the original menu item rectangles were overlapping, these do not.</p>

<h2>Prefer modern initializers for constructors</h2>

<p>The constructor for <code>SnakeSegment</code> and probably others can be simplified with default values and a parameter intialization style.  Example:</p>

<pre><code>SnakeBody::SnakeSegment::SnakeSegment(int x, int y, SnakeBody::SnakeDirection dir) :
    mGraphic{sf::RectangleShape(sf::Vector2f(BODY_DIM, BODY_DIM))},
    mPosition{x, y}, 
    mDirection{dir} 
{
        mGraphic.setFillColor(sf::Color(34, 139, 34));
        mGraphic.setOrigin(BODY_DIM / 2, BODY_DIM / 2);
        mGraphic.setPosition(sf::Vector2f(x, y));
}
</code></pre>

<p>This also eliminates the need for a <code>SetPosition</code> member function.</p>

<h2>Don't write getters and setters for every class</h2>

<p>C++ isn't Java and writing getter and setter functions for every C++ class is not good style. Instead, move setter functionality into constructors and think very carefully about whether a getter is needed at all. In this code, t's easy to remove <code>SnakeSegment</code> functions <code>GetPosition</code>, <code>SetPosition</code>, and <code>GetDirection</code>.  Also, by declaring <code>friend SnakeBody;</code> within <code>SnakeSegment</code>, all remaining functions and data members except <code>mGraphic</code> can be declared <code>private</code>.</p>

<h2>Actually quit the program</h2>

<p>When the user selects "Exit" from the menu, the game should actually quit, and not just close the window.</p>

<p>There's more, but this is all I have time for at the moment.</p>
    </div>