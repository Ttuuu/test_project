<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Comprehension can handle your parameters instead of using <code>elif</code> statements. Just as an example I have converted the list into key:value pairs. The <code>if</code> statement is only allowing things to populate the new dictionary that satisfy the argument.</p>

<pre><code>names = [ [3, "Pling"], [5, "Plang"], [7, "Plong"] ]

new_dict = {i: k for i, k in names if i%i == 0}
</code></pre>

<p>Python will process the input in the format you want.</p>

<pre><code>import string

new_string_digits = string.digits
print(type(new_string_digits), new_string_digits, new_string_digits*2)
string_to_number = int(new_string_digits)
print(type(string_to_number), string_to_number, string_to_number*2)
</code></pre>

<p>Notice the difference in how the compiler has processed the information:</p>

<pre><code>&lt;class 'str'&gt; 0123456789 01234567890123456789
&lt;class 'int'&gt; 123456789 246913578
</code></pre>

<p>In the <code>str</code> instance it has just repeated the string input and in the <code>int</code> instance the number has been multiplied. I find it quite useful to convert the two because its easy to extract or plug information into without needing to use complex calculations or arguments.</p>
    </div>