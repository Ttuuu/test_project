<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few thoughts:</p>
<ul>
<li>First, you might consider whether the name/color property REALLY needs to change as output here.  Why return <code>{ color: ... }</code> in some cases and <code>{ name: ... }</code> in others?  This tends to indicate that the return data may not sufficiently be describing itself. Even stranger here is the fact that the caller must pass in the hint <code>dataControl</code> "hint" in order to tell the function to modify the return value.  If the calling code is where understanding of "color" vs. "name" exists, then why make this function now have to understand this?  Why can the caller not just mutate a returned <code>{ name: ... }</code> object into a <code>{ color: ... }</code> one if it is really critical to make this distinction in property name.  Perhaps your object might be well suited to have properties like <code>username</code>, <code>test</code>, <code>value</code> (instead of name or color) and <code>type</code> (to indicate name vs. color).  At least this way to get a consistently formed data objects here (and your if-else goes away).</li>
<li>I am struggling to understand why you are looping through the passed data and setting <code>data1</code> or <code>data2</code> value repeatedly when, you are basically overwriting this set value X times (where X is the length of the array).  Why not just build the array once and then set the value?</li>
<li>You really only have two things that are changing when <code>dataControl</code> equals <code>color</code>.  You can just use variables and drop the if-else construct altogether.  In fact generally-speaking, much of you logic can be put into variables, as these values do not change for each iteration over passed data. Using variables here will also simplify your loop such that perhaps all you really need to do is call <code>map</code> on <code>passedData</code>.</li>
<li>Why hard-code your <code>data1</code> and <code>data2</code> targets?</li>
<li>It looks like this code has TypeScript type hinting, however no TypeScript tag was applied to this question.  You should either be consistent with your TypeScript usage (putting type hint for BOTH parameters), or not use it it all.</li>
</ul>
<p>Putting it all together, might yield something like...</p>
<pre><code>const getData = (passedData, dataControl) {
  let propName = 'name';
  let target = 'data2';

  if (dataControl === 'color') {
    propName = 'color';
    target = 'data1';
  }

  const username = this.userForm.value.username;
  const test = this.userForm.value.test;
  const targetEl = this.userForm.controls[target]; 

  const data = passedData.map((value) =&gt; {
    return {
      // if you still REALLY need color vs. name prop
      [propName]: value,
      username,
      test
    };
  });

  targetEl.setValue(data);
}
</code></pre>
    </div>