<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Docstrings</h1>

<p>You should include a <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">docstring</a> at the beginning of every method, class, and module you write. This will allow documentation to identify what your code is supposed to do. It also helps external text editors, such as VSCode, to display what types of parameters your functions accept, and a short description of your method.</p>

<h1>Error or Error</h1>

<p>This line</p>

<pre><code>except UnicodeDecodeError or ValueError as e:
</code></pre>

<p>should be this </p>

<pre><code>except (UnicodeDecodeError, ValueError) as e:
</code></pre>

<p>Your current line of code raises this warning from <code>pylint</code>:</p>

<blockquote>
  <p>Exception to catch is the result of a binary "or" operation</p>
</blockquote>

<p>If you need to handle multiple errors, you should group them into a tuple.</p>

<h1>Method Names</h1>

<p>According to <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">PEP-8 Function Name Conventions</a>, your method names <code>sendpacket</code> and <code>recivepacket</code> should really be <code>send_packet</code> and <code>receive_packet</code>.</p>

<h1>Unnecessary <code>else</code></h1>

<p>This section of code</p>

<pre><code>if rawdata.endswith(sep):
    return rawdata[:-1]
else:
    raise ValueError("Could not find Packet end!")
</code></pre>

<p>should be this</p>

<pre><code>if rawdata.endswith(sep):
    return rawdata[:-1]
raise ValueError("Could not find Packet end!")
</code></pre>

<p>Since you are returning a value if the condition is satisfied, the ValueError line will not run. And if the condition is not satisfied, it will simply move to the next line. Therefore, the <code>else</code> is unnecessary and should be removed.</p>

<h1>Updated Code</h1>

<pre><code>"""
Description of this module goes here
"""

import socket

sep: bytes = b'\0'

minpacketsize: int = 10


def send_packet(sock: socket.socket, data: bytes) -&gt; None:
    """

    Description of this method goes here

    :param sock -&gt; socket.socket: Socket to send the data over\n
    :param data -&gt; bytes: Data to send over the socket

    :return: None
    """
    send: bytes = str(len(data) + 1).encode('utf-8') + sep + data + sep

    if len(send) &lt; minpacketsize:
        raise ValueError("Packet too small!")

    sock.sendall(send)


def receive_packet(sock: socket.socket) -&gt; bytes:
    """

    Description of this method goes here

    :param sock -&gt; socket.socket: Socket to receive the data over

    :return: bytes
    """
    datalen = 0
    header: bytearray = bytearray()
    while not datalen:
        header += sock.recv(1)
        if header.endswith(sep):
            try:
                datalen = int(header[:-1].decode('utf-8'))
            except (UnicodeDecodeError, ValueError) as e:
                raise ValueError("Error while decoding header!") from e

        if len(header) == 10:
            raise ValueError("Could not find Header!")

    rawdata: bytes = sock.recv(datalen)

    if rawdata.endswith(sep):
        return rawdata[:-1]
    raise ValueError("Could not find Packet end!")
</code></pre>
    </div>