<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>,</code> commas are a nice twist.
I feel you are stripping them a bit late,
as they don't really contribute to the desired solution.
Better to lose them from the get go.</p>
<p>Calling <code>.findall</code> seems to be overkill for your problem specification --
likely <code>.search</code> would suffice.</p>
<blockquote>
<pre><code>salary_text = re.findall("[<span class="math-container">\$0-9,\. ]*-[\$</span>0-9,\. ]*", input1)
</code></pre>
</blockquote>
<p>The dollar signs, similarly, do not contribute to the solution,
your regex could probably just ignore them if your inputs are fairly sane.
Or even scan for lines starting with <code>$</code> dollar, and <em>then</em> the regex ignores them.</p>
<blockquote>
<pre><code>range_list = re.split("-", salary_text[0])
</code></pre>
</blockquote>
<p>There is no need for this <code>.split</code> -- the regex could have done this for you already.
Here is what I recommend:</p>
<pre><code>def find_range(text):
    if text.startswith('$'):
        m = re.search(r'([\d\.]+) *- *\$?([\d\.]+)', text.replace(",", ""))
        if m:
            lo, hi = m.groups()
            return float(lo), float(hi)
    return None, None


print(find_range('$80,000 - $90,000 per annum'))
print(find_range('$20 - $24.99 per hour'))
</code></pre>
<p>The raw string regex <code>r'[\d\.]+'</code> picks out one or more numeric characters,
which can include decimal point.
And putting <code>(</code> <code>)</code> parens around a regex makes it a capturing group --
we have two such groups here.
Finally, <code> *- *\$?</code> lets us skip a single <code>-</code> dash with optional whitespace
and at most one optional <code>$</code> dollar sign.</p>
    </div>