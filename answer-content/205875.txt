<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Focus on the essence of the algorithm, not the exact procedure on texts</h3>

<p>In common algorithm texts for C/C++, the description of an algorithm is more suited for <strong>implementation in C/C++</strong>. Common elements include:</p>

<ul>
<li>An array, or an object in general, is assumed to have fixed memory location and fixed size.</li>
<li>Creating a new array or object is considered bad practice, since it incurs time overhead.</li>
<li>As a consequence, a part of an array is passed around as start and end indices.</li>
</ul>

<p>Since you decided to program in Python, <strong>you must escape from the C/C++-style algorithms</strong>.</p>

<hr>

<p>Now, let's go back to the high-level description of Quicksort:</p>

<ol>
<li>Choose a pivot, be it start or random.</li>
<li>Partition the array as "less than pivot", "same as pivot" and "greater than pivot".</li>
<li>Recursively apply this algorithm to the subarrays found in step 2.</li>
</ol>

<p>The very core of the algorithm is step 2, a.k.a. the partitioning step. Your code has Lumoto's and Hoare's algorithm, both of which are designed strictly for C/C++. You have to throw them away entirely, since Python has much more <em>readable</em> (and elegant) way of doing this task:</p>

<pre><code>def partition(list_, pivot):
    less = [x for x in list_ if x &lt; pivot]
    equal = [x for x in list_ if x == pivot]
    greater = [x for x in list_ if x &gt; pivot]
    return (less, equal, greater)
</code></pre>

<p>If you understand list comprehension, you won't ever need a single comment to read and understand this code. Otherwise, study more about it on the Internet.</p>

<p>Note that the function accepts and returns entire lists, not the indices. Pivot is also passed as actual value rather than its index. For naming things, I tried to avoid using the term <code>array</code>, since we're using <code>list</code>s here instead.</p>

<p><sub>The underscore <code>_</code> in <code>list_</code> is to avoid name clash with the built-in function <code>list</code>.</sub></p>

<hr>

<p>This decision propagates to the other parts of the algorithm. Consider step 1 (pivot selection). We can modify <code>choose_pivot</code> to accept a list and method, and return the selected pivot value:</p>

<pre><code>def choose_pivot(list_, method='start'):
    if method == 'start':
        return list_[0]
    return random.choice(list_)
</code></pre>

<p>And then, the main <code>quicksort</code> function doesn't need a helper:</p>

<pre><code>def quicksort(list_):
    if not list_: return list_
    pivot = choose_pivot(list_)
    less, equal, greater = partition(list_, pivot)
    return quicksort(less) + equal + quicksort(greater)
</code></pre>

<hr>

<p>Final note: I assumed so far that you're not that interested in running speed. Otherwise, just use <code>list.sort()</code> or <code>sorted()</code> as suggested in the comments. They're much faster as both functions' internals are implemented in C (assuming CPython).</p>
    </div>