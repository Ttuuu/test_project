<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Cube class</h2>

<p>I <em>feel</em> like your <code>form</code> parameter would be something taken out of a command line argument. With possible values like <code>32</code>, <code>32p</code>, <code>3</code>, etc. </p>

<p>But if I'm using your code, I don't know what's the use of the <code>form</code> parameter, it's actually very confusing to see that its a <code>string</code> parameter. You should probably have two parameters, <code>patterned</code> and <code>size</code>. This would be much more intuitive.</p>

<p>OOP wise, I don't think the <code>save</code> and <code>load</code> methods should be part of your <code>Cube</code> class. <strong>Especially</strong> the <code>load</code> one. How do I use it? Should I initialize a "dummy" cube to then call <code>load</code> on it? It doesn't make much sense. If I were you, I'd get another object that would take care of the saving and loading of a cube.</p>

<h2>Cublet class</h2>

<p>There's a lot of very similar code in the <code>rotate</code> method, I think some of it (especially the <code>if</code> and everything below) could be extracted in another method that you could reuse in your 3 loops.</p>

<h2>Coding style</h2>

<p>This is pretty confusing. I had to read about three times to make sure the assignations on the first line were matching (front with front, etc) and that the changes on the second line made sense.</p>

<pre><code>front, left, back, right = self.front, self.left, self.back, self.right
self.front, self.left, self.back, self.right = right, front, left, back
</code></pre>

<p>I'll offer two options which in my opinion might be better : </p>

<ol>
<li>Have it all on one line <code>self.front, self.left, self.back, self.right = self.right, self.front, self.left, self.back</code></li>
<li><p>Split the assignments on multiple lines. This is probably the best option as it makes it clear what happens. : </p>

<pre><code>self.front = self.right
self.left = self.front
...
</code></pre></li>
</ol>

<p>Considering the second option, I'm aware you might tell yourself "My code is already long enough as it is, no need to add so many other lines" but I really think it would help on readability, which would be a big plus.</p>

<h3>If one-liners</h3>

<p>Once again I guess you did this to "save space" but really the readability is hindered by the fact that in some places you have <code>if</code> statement on one line vs more than one.</p>

<pre><code>if cubelet.front == None: parts.extend(("None", "None"))
</code></pre>

<p>vs. </p>

<pre><code>if type(self.left) == tuple:
    self.left = self.left[0], sides[(sides.index(self.left[1])+1)%4]
</code></pre>

<p>Truth is I believe all your <code>if</code> statement should be on at least two lines (like the second option). It's simply easier to read (this might just be an opinion)</p>

<h3>Spacing</h3>

<p>Your code is very cluttered and blank lines don't cost a thing :) At least put them between your methods, it will help tremendously to read and to quickly find your way around the code.</p>
    </div>