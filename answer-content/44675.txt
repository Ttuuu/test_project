<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Comments</h2>
<p>Your code has way too many comments, mostly redundant ones - some are even obsolete!</p>
<p>Good comments should say <em>why</em>, not <em>what</em>.</p>
<blockquote>
<pre><code>// Create our new excel application and add our workbooks/worksheets
Workbooks workbooks = xls.Workbooks;
Workbook workbook = workbooks.Add();
</code></pre>
</blockquote>
<p>This comment says <em>what</em> the code is doing, and it's lying - you're not <em>creating</em> a new Excel application, you're using an existing instance. Remove it.</p>
<blockquote>
<pre><code>// Hide our excel object if it's visible.
xls.Visible = false;
</code></pre>
</blockquote>
<p>This comment adds no value, and is lying to a certain extent: you don't actually care whether it's already visible or not. Better just remove it.</p>
<blockquote>
<pre><code>// Turn off calculations if set to automatic; this can help prevent memory leaks.
xls.Calculation = xls.Calculation == XlCalculation.xlCalculationAutomatic ? XlCalculation.xlCalculationManual : XlCalculation.xlCalculationManual;
</code></pre>
</blockquote>
<p>This one is accurate and informative - it says <em>why</em> you're turning off automatic calculations.. but it also says <em>what</em> the code is doing. Better rephrase it:</p>
<pre><code>// turning off automatic calculations improves performance and can help prevent memory leaks.
xls.Calculation = (xls.Calculation == XlCalculation.xlCalculationAutomatic) 
                                    ? XlCalculation.xlCalculationManual 
                                    : XlCalculation.xlCalculationManual;
</code></pre>
<p>Notice how readability is improved by splitting the ternary operation into 3 lines. It appears the condition is moot, since both ends produce the same assignation. The instruction should be rewritten as simply:</p>
<pre><code>xls.Calculation = XlCalculation.xlCalculationManual;
</code></pre>
<blockquote>
<pre><code>// Turn off screen updating so our export will process more quickly.
xls.ScreenUpdating = false;
</code></pre>
</blockquote>
<p>Again, says <em>what</em> - the <em>why</em> makes it closely related to the previous statement. Thus:</p>
<pre><code>// turning off automatic calculations and screen updating 
// improves performance and can help prevent memory leaks.
xls.Calculation = XlCalculation.xlCalculationManual;
xls.ScreenUpdating = false;
</code></pre>
<blockquote>
<pre><code>// Create an excel table and fill it will our query table.
</code></pre>
</blockquote>
<p>Remove. This one adds no value.</p>
<blockquote>
<pre><code>for (int i = 0; i &lt;= iterator; i++)
{
    // Turn off calculations if set to automatic; this can help prevent memory leaks.
    Worksheet worksheet = (Worksheet)xls.Worksheets[i + 1];
    worksheet.Name = excelWorksheetName[i];
    worksheet.Select();
</code></pre>
</blockquote>
<p>Apparently the code under that comment was moved, but the comment remained.</p>
<hr>
<p>As for performance, @Will's comment is accurate - COM interop is hurting you here. What's slowing it down is the many calls to the Excel object model (COM interop <em>in itself</em> incurs a performance penalty, but Excel interop somehow makes it even worse). The only way is to limit the number of times you're accessing the Excel object model.</p>
<p>An alternative approach could be to write the data in a .csv file, and use the Excel object model to import the .csv data all in one shot (rather than looping into rows and columns to write the data "manually"), and then to format the workbook and save it in .xlsx format.</p>
    </div>