<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Buffer overflow</h2>

<pre><code>char array[MAX];
scanf("%s", array);
</code></pre>

<p>This can overflow the buffer in <code>array</code> if the user input exceeds <code>MAX-1</code> characters. There are multiple ways around this:</p>

<ul>
<li><p>Ask <code>scanf</code> to allocate an appropriately sized buffer (if you have a moderately recent glibc):</p>

<pre><code>char *array = NULL;
scanf("%ms", &amp;array);
</code></pre>

<p>You need to release the allocated buffer later:</p>

<pre><code>free(array);
</code></pre>

<p>To use <code>free</code> you need to <code>#include &lt;stdlib.h&gt;</code>.</p></li>
<li><p>Use <code>fgets()</code> and inform it about the buffer size:</p>

<pre><code>fgets(array, sizeof(array), stdin);
</code></pre>

<p>This will read a whole line though and not just a single word. It may also include the newline character at the end that you need to remove yourself:</p>

<pre><code>length = strlen(array) - 1;
if (array[length] == '\n')
    array[length--] = '\0';
</code></pre></li>
<li><p><code>getline()</code> works in a similar fashion but also allocates a buffer for you; conveniently it also returns the amount of characters read (which may differ from the length of the allocated buffer stored in <code>array_size</code>):</p>

<pre><code>char *array = NULL;
size_t array_size;
size_t length = getline(&amp;array, &amp;array_size, stdin);
// ... remove potential newline ...
// ... do stuff with array ...
free(array);
</code></pre>

<p><code>getline</code> requires glibc's GNU extensions (<code>#define _GNU_SOURCE</code>) or POSIX.1-2008 (<code>#define _POSIX_C_SOURCE 200809L</code>).</p></li>
</ul>

<h2>Use appropriate data types</h2>

<ul>
<li><code>size_t</code> for <code>length</code> since that's the return type of <code>strlen</code> and is guaranteed to hold all possible string lengths. You need to watch out for the corner cases below though to avoid an integer underflow (which you'd also have with any <code>unsigned</code> type).</li>
<li>same for <code>i</code> since it depends on <code>length</code>.</li>
</ul>

<h2>Corner cases</h2>

<ul>
<li><p>What if <code>strlen(array) == 0</code>? Then <code>strlen(array) - 1</code> has a huge positive value since it underflows the unsigned return type of <code>strlen</code> and wraps around to the largest possible value of that type.</p></li>
<li><p>In a similar fashion <code>i &gt;= 0</code> is always true since unsigned types cannot assume values less than 0.</p></li>
</ul>

<p>You'll have to find a way to take care of these corner cases. What about simply doing nothing in that case since the reversion of the empty string is the empty string itself?</p>

<pre><code>length = strlen(array);
if (length &gt; 0) {
    for (size_t i = length - 1, n = 0; n &lt; length; i--, n++) {
        // ...
    }
 }
</code></pre>

<p>I left out <code>i &gt;= 0</code> intentionally since it is redundant with <code>n &lt; length</code>. It had also no effect since the <code>,</code> operator in C means that only the right side of it is responsible for the value of the entire (sub-)expression. You probably wanted <code>&amp;&amp;</code> but, as I said, the two conditions are (nearly) equivalent here.</p>

<h2>Unnecessary code and (possibly) better algorithms</h2>

<p>You don't need an <code>array2</code> if you end up printing the characters one by one. You can just print them directly from <code>array</code>:</p>

<pre><code>printf("%c", array[i]);
</code></pre>

<p>Alternatively you can first revert the string and later print the whole string:</p>

<pre><code>for (unsigned short i = length, n = 0; i &gt;= 0, n &lt;= length; i--, n++)
    array2[n] = array[i];

fwrite(array2, 1, length, stdout);
</code></pre>

<p>Or you can revert the string in-place without an additional buffer/array:</p>

<pre><code>for (unsigned short i = length, n = 0; i &gt; n; i--, n++)
{
    char c = array[n];
    array[n] = array[i];
    array[i] = c;
}

puts(array);
</code></pre>

<p><code>puts</code> prints the whole string and appends a newline. By convention *nix programs always terminate their lines, including the last (unless they operate on raw bytes).</p>

<h2>Better character output function</h2>

<p><code>printf</code> is very comfortable to use if you want formatted output but it's also pretty heavy-weighted. If you're only printing individual characters you can just use:</p>

<pre><code>putchar(array[i]);
</code></pre>

<h2>Error checking</h2>

<p>You should check the return values of all functions that may fail if it impacts the outcome of the program. For instance:</p>

<ul>
<li><p><code>scanf</code>, <code>fgets</code>, or <code>getline</code> may all return error conditions if an I/O error occurred that would mess up the remainder of the program. You should check for errors and react accordingly (i. e. shut down the program):</p>

<pre><code>if (scanf("%ms", &amp;array) &lt;= 0)
    // ...

if (fgets(...) == NULL)
    // ...

if (getline(...) == -1)
    // ...
</code></pre>

<p>If an error occurs I suggest you print an error message and return an error condition yourself (which terminates the program if done from <code>main()</code>):</p>

<pre><code> if (...) {
     perror("Input error");
     return 1;
 }
</code></pre>

<p>Terminating a program with a value other than 0 notifies the caller of an error by convention.</p></li>
<li><p>In a similar fashion you can check for errors on <code>printf</code>, <code>fwrite</code>, and <code>putc</code> and react to them.</p></li>
</ul>

<p>You can read about the error conditions of functions in their <a href="http://linux.die.net/man/" rel="nofollow noreferrer">manual pages</a>. On most *nices you can access those comfortably with <code>man &lt;FUNCTION_NAME&gt;</code>.</p>

<h2>Use expressive variable names</h2>

<ul>
<li><code>array</code> is a buffer for a string: <code>string_buffer</code> or shorter <code>strbuf</code>.</li>
<li><code>i</code> and <code>n</code> are the left and right indices of the reversion loop: <code>left</code> and <code>right</code>.</li>
</ul>

<h2>Final program</h2>

<p>A possible final program could look like this:</p>

<pre><code>#define _POSIX_C_SOURCE 200809L
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

int main(void)
{
    char *strbuf = NULL;
    size_t strbuf_size;

    ssize_t length = getline(&amp;strbuf, &amp;strbuf_size, stdin);
    if (length == -1) {
        perror("Input error");
        return 1;
    }


    if (length != 0) {
      if (strbuf[length-1] == '\n')
            strbuf[--length] = '\0';

        if (length != 0) {
            for (size_t right = (size_t) length - 1, left = 0; left &lt; right; right--, left++) {
                char c = strbuf[left];
                strbuf[left] = strbuf[right];
                strbuf[right] = c;
            }

            if (puts(strbuf) == EOF) {
                perror("Output error");
                return 1;
            }
        }
    }

    free(strbuf);

    return 0;
}
</code></pre>
    </div>