<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Small sugggestion for <code>printWhitespace()</code>. You could do <a href="https://ideone.com/jBGv3n" rel="nofollow noreferrer">the following</a>:</p>

<pre><code>void printWhitespace(const unsigned int times) {
    printf("%*s", times, " ");
}
</code></pre>

<p>I have made the function argument const as it probably isn't meant to be modified. it is generally a good idea to be as "const" as possible as this avoids the mistake of writing to a variable that should be read-only.</p>

<hr>

<p>I would put the array declarations at the top of the function before any of the code with a blank line between the declarations and the first line of code.</p>

<hr>

<p>The function <code>scanf</code> can be used with caution... it can lead to buffer overflow attacks in the way it is used in your code. If the user enters a string longer than 19 characters (last character would be filled in as a null terminator in the buffer), <code>scanf</code> will just write on past the end of the buffer.</p>

<p>You could help guard against this by using <code>scanf("%19s", firstName);</code> and <code>scanf("%19s", lastName);</code>. As @chux points out the length is one less than the buffer size. This is because "String input conversions store a terminating null byte ('\0') to  mark end of the input; the maximum field width does not include this terminator." -- quote from man page.</p>

<p>Looked into this a little more and <a href="https://stackoverflow.com/a/1621973/1517244">this SO answer</a>, the author says:</p>

<blockquote>
  <p>Note that the POSIX 2008 (2013) version of the scanf() family of
  functions supports a format modifier m (an assignment-allocation
  character) for string inputs (%s, %c, %[). Instead of taking a char *
  argument, it takes a char ** argument, and it allocates the necessary
  space for the value it reads</p>
</blockquote>

<p>That would be a useful way of avoiding buffer overflow, but you must remember to <code>free()</code> the buffer returned.</p>

<hr>

<p>The variable <code>numOfWhitespace</code> can also be <code>const</code>. Might put that to top of function too.</p>

<hr>

<p>Your last bit of code that tries to align the numbers to the end of the words will only align properly if the string length is 9 or less. If the string length is greater then the number will be double digits so you could account for this.</p>

<hr>

<p>Add <code>return 0;</code> to the end of the function. You reach the end of a non-void function without returning anything...</p>

<hr>

<p>Hope that helps :)</p>
    </div>