<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some suggestions for your code:</p>

<blockquote>
<pre><code>String[][] a = new String[365][30];
int i = 0;
int j = 0;
for (Element row : rows) {
    Elements cells = row.getElementsByTag("td");
    for (Element cell : cells) {
        a[j][i] = cell.text().concat(", ");
        i++;
    }
    j++;
    i = 0;
}
</code></pre>
</blockquote>

<p>You are storing a m * n matrix of values retrieved by jsoup in a 2d array, but this can be avoided? Here the second part of your code :</p>

<blockquote>
<pre><code>int[] array = new int[365];
for(int k = 0; k &lt; array.length; k++) {
    if(a[k][17] != null) {
        a[k][17] = a[k][17].split(",")[0];
        a[k][17] = a[k][17].replaceAll("[.]","");
        array[k] = Integer.parseInt(a[k][17]);
    }
}
</code></pre>
</blockquote>

<p>The values you are interested are in the 17th column of the table, so instead of a 2d matrix, you can use directly an int array where to store elements. You are doing a lot of not necessary work parsing by yourself strings like "1.234" and convert them to integer without the point for thousands, use instead the class <a href="https://docs.oracle.com/javase/8/docs/api/java/text/NumberFormat.html" rel="nofollow noreferrer">NumberFormat</a>:</p>

<pre><code>NumberFormat nf = NumberFormat.getNumberInstance(Locale.GERMAN);
int value = nf.parse("1.234").intValue(); // it will contain the number 1234
</code></pre>

<p>You can extract the 17th column values from your table using the jsoup <code>Element</code> <code>get</code> method checking if the row you are examining has at least 18 elements:</p>

<pre><code>for (int i = 0; i &lt; rows.size(); ++i) {
    Elements cells = rows.get(i).getElementsByTag("td");
    if (cells.size() &gt; 17) {
        Element cell = cells.get(17);
        array[i] = nf.parse(cell.text()).intValue(); //&lt;-- nf.parse call
    }
}
</code></pre>

<p>So your method <code>getData</code> can be rewritten like this:</p>

<pre><code>public static int[] getData() throws IOException, ParseException {
    String url = "https://de.wikipedia.org/wiki/COVID-19-Pandemie_in_Deutschland";
    int[] array = new int[365];

    Document doc = Jsoup.connect(url).get();
    Element table = doc.getElementsByClass("wikitable zebra toptextcells mw-collapsible").first();
    Elements rows = table.getElementsByTag("tr");

    NumberFormat nf = NumberFormat.getNumberInstance(Locale.GERMAN);

    for (int i = 0; i &lt; rows.size(); ++i) {
        Elements cells = rows.get(i).getElementsByTag("td");
        if (cells.size() &gt; 17) {
            Element cell = cells.get(17);
            array[i] = nf.parse(cell.text()).intValue();
        }
    }

    return array;
}
</code></pre>

<p>Some minor changes can be applied to your other method <code>saveData</code>, first is use of try with resources to avoid manual closing and flushing of the <code>FileWriter</code>:</p>

<pre><code>try (FileWriter writer = new FileWriter("data.csv")) { /*here your logic*/ }
</code></pre>

<p>Second, to avoid use of consecutive appends , you can use the <code>write</code> method of the <code>FileWriter</code> class rewriting the method in this way:</p>

<pre><code>public static void saveData(int[] array) throws IOException {
    LocalDate date = LocalDate.of(2020, 2, 24);
    DateTimeFormatter df = DateTimeFormatter.ofPattern("dd/MM/yyyy");

    try (FileWriter writer = new FileWriter("data.csv")) {
        writer.write("\n");
        String template = "%s,%d\n";
        for(int i = 0; i &lt; array.length - 1; i++) {
            String data = String.format(template, date.format(df), array[i + 1]);
            writer.write(data);
            date = date.plusDays(1);
        }
    }
}
</code></pre>

<p>I defined a <code>template</code> variable so the format of the data is more readable and easier to modify.</p>
    </div>