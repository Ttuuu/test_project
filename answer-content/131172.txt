<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A public non-virtual destructor in a base class is risky. You should consider making it <code>protected</code>, or otherwise <code>virtual</code>, if there's need for polymorphic deletion of the <code>BaseSocket</code>.</p>

<hr>

<p>I don't think <code>0</code> is a good value to indicate an uninitialized socket id. <a href="http://pubs.opengroup.org/onlinepubs/009695399/functions/socket.html" rel="noreferrer">The <code>socket</code> function will return</a>:</p>

<blockquote>
  <p>Upon successful completion, socket() shall return a non-negative integer, the socket file descriptor. Otherwise, a value of -1 shall be returned and errno set to indicate the error.</p>
</blockquote>

<p>Zero is non-negative, so it could actually return the value of <code>0</code> for a valid socket. I would recommend defining a constant, <code>InvalidSocketId</code> and setting it to <code>-1</code>. Then you can use that constant inside your class to denote the invalid/uninitialized socket.</p>

<hr>

<p>Don't repeat yourself, not even in the error messages.</p>

<blockquote>
<pre><code>if (getSocketId() == 0)
{
    throw std::logic_error(buildErrorMessage("DataSocket::getMessage: accept called on a bad socket object (this object was moved)"));
}
</code></pre>
</blockquote>

<p>All functions that throw give a nice error message with the function name in it, and I commend you for taking that care, but writing down the name of the function as a string is a task that should be automated. By the way, notice that in the excerpt above the name in the error message (<code>getMessage</code>) isn't matching the name of the function throwing the exception (<code>getMessageData</code>). That's a very common little mistake we find in this pattern. The programmer will never remember to update the error messages when the name of the function changes.</p>

<p>YMMV, but such case seems like a valid case for a macro. Unfortunately, <a href="https://gcc.gnu.org/onlinedocs/gcc/Function-Names.html" rel="noreferrer"><code>__func__</code></a> is not standard, but supported by GCC and Clang. MSVC provides the equivalent macro <code>__FUNCTION__</code>, which it appears is also supported by GCC for compatibility.</p>

<pre><code>#define THORSANVIL_SOCKET_ERROR(exception, message) \
    throw exception{ buildErrorMessage(__FILE__, ":", __LINE__, " at ", __func__, ": ", message) }

THORSANVIL_SOCKET_ERROR(std::logic_error, "accept called on a bad socket object (this object was moved)");
</code></pre>

<p>Should print something like:</p>

<pre>
Socket.tpp:20 at DataSocket::getMessageData: accept called on a bad socket object (this object was moved)
</pre>

<hr>

<h3>Nitpickings</h3>

<p>Please don't use <code>bzero</code>. It is very archaic and non-standard. You can use <code>std::memset</code> to the same effect, or better, call the default zero-initializing constructor: <code>sockaddr_in serverAddr{}</code>. While you are at it, you could also remove those <code>struct</code> tags in the variable declarations, so the code doesn't look like it was copied from some old C book <code>;)</code>.</p>

<p>Not so sure if <code>domain_error</code> has a place here. It is usually associated with numerical and mathematical errors. You could very well just go with <code>runtime_errors</code> there, or extend <code>runtime_error</code> with your own exception class(es).</p>
    </div>