<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I understand that you've written this code staying close to the high level example, but assembly code is typically not written that way. To me at least this code is less readable than it could be.<br>
The code that you have is of course a good starting point, but in my opinion it should not stay the final version.</p>
<h2>A selection of improvements</h2>
<p>To clear a register instead of using <code>mov r10, 0</code>, you should write <code>xor r10d, r10d</code>. This is both faster and shorter code.</p>
<p>In a snippet like:</p>
<pre><code>cmp     r10, rsi
jb      continue_outer_loop
jmp     epilogue
continue_outer_loop:
</code></pre>
<p>you can save yourself from writing the extra label and remove one of the jumps, if you simply <strong>reverse the condition</strong>:</p>
<pre><code>cmp     r10, rsi
jnb     epilogue
</code></pre>
<p>This is something that you can apply 3 times in your code.</p>
<blockquote>
<p>The only thing I want to highlight is the use of registers instead of stack for local variables.</p>
</blockquote>
<p>It's certainly a good idea to use registers whenever you can, but here it makes for less readable text. Perhaps you could use the <code>EQU</code> directive to makes things clearer.</p>
<pre><code>i       equ     r10 ; counter for the outer loop
j       equ     r11 ; counter for the inner loop
min     equ     r12 ; minimal element found in the inner loop
i_min   equ     rbx ; position of min
temp    equ     rcx ; temporary variable for swapping
</code></pre>
<p>I agree that you've slightly over-commented the source. Some comments were redundant.</p>
<blockquote>
<pre><code>mov     r12, qword [rdi + (r10 * 8)]   ; min = list[i]
</code></pre>
</blockquote>
<p>I don't know YASM, but I think you can drop the <code>qword</code> tag in many instructions where the size is clear from the other operands:</p>
<pre><code>mov     r12, [rdi + (r10 * 8)]   ; min = list[i]
</code></pre>
<p><code>r12</code> is a qword so the mention of the tag is redundant.</p>
<h2>My rewrite, more the assembly way</h2>
<p>See what you do with the <code>EQU</code> idea!</p>
<pre><code>ssort:
    push    r12
    push    rbx
    push    rcx
    xor     r10d, r10d              ; i = 0
  outer_loop:                       ; for ( i = 0; i &lt; length; i++ )
    cmp     r10, rsi                ; compare i and length
    jnb     epilogue                ; if i &gt;= length (unsigned) thenend
    mov     r12, [rdi + (r10 * 8)]  ; min = list[i]
    mov     rbx, r10                ; i_min = i
    mov     r11, r10                ; j = i 
  inner_loop:                       ; for( j = i+1; j &lt; length; j++ )
    inc     r11                     ; j++
    cmp     r11, rsi                ; compare j and length     
    jnb     swap_elements           ; ( j &gt;= length (unsigned) ) unconditional jump (no distance limit)
    cmp     r12, [rdi + (r11 * 8)]  ; compare min and list[j]
    jng     inner_loop              ; if min &lt;= list[j] then check next element 
    mov     r12, [rdi + (r11 * 8)]  ; min = list[j]
    mov     rbx, r11                ; i_min = j
    jmp     inner_loop
  swap_elements:                    ; swap min and list[i]
    mov     rcx, [rdi + (r10 * 8)]  ; rcx = list[i], use rcx as a temporary variable
    mov     [rdi + (rbx * 8)], rcx  ; list[i_min] = list[i]
    mov     [rdi + (r10 * 8)], r12  ; list[i] = min
    inc     r10                     ; i++
    jmp     outer_loop
  epilogue:
    pop     rcx
    pop     rbx
    pop     r12
    ret
</code></pre>
    </div>