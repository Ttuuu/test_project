<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design</h2>

<p>Looks OK. Though if you look at some more advanced versions of Matrix classes they have developed some good optimizations. Like multiplications (and other operations) are actually postponed until the resulting cells are actually required. This allows for optimizations where you can see that the result will be a specific value and you don't need to compute all the results for the final matrix).</p>

<h3>C++ standard behaviors.</h3>

<p>When you define <code>operator*</code> you usually also define <code>operator*=</code>. This allows for some good optimizations.</p>

<p>Example:</p>

<pre><code>Matrix&amp; operator*=(Matrix const&amp; rhs) {
    /* Do Work */  // Here we may not need to allocate space
                   // for the result and it could potentially be done
                   // in place
    return *this;
}
</code></pre>

<p>The normal operation can then be easily defined in terms of this operator:</p>

<pre><code>Matrix&amp; operator*(Matrix const&amp; rhs) {
    Matrix result(*this);
    return result *= rhs;
}
</code></pre>

<p>Now admittedly I have not thought this through completely for matrices (but this would be a normal pattern to follow).</p>

<h3>Separation of Concerns</h3>

<p>When you design classes you should try and separate resource management from business logic. Your code contains both (resource management is memory management and your business logic is all the matrix code).</p>

<p>Normally you should separate these out into two classes. Luckily you can do this automatically (because the resource management has already been done by <code>std::vector&lt;int&gt;</code>).</p>

<p>I would redefine the class to use <code>std::vector</code> to control the memory management part and thus just concentrate on the matrix operations in this class.</p>

<h2>Code Review</h2>

<h3>Const Methods</h3>

<p>Methods that do not change the state of the object should be marked const.</p>

<pre><code>    int getMatrixRows(const Matrix &amp;other){return other.rows;}
    int getMatrixCols(const Matrix &amp;other){return other.cols;}
</code></pre>

<p>These only return a value. So they should be marked const so they can be used in a const context.</p>

<h3>Bug</h3>

<p>This looks like a recursive call that never returns.</p>

<pre><code>    friend Matrix operator +(const int &amp;num,const Matrix &amp;t)
    {
     return (num+t);
    }
</code></pre>

<p>Did you write unit tests?</p>

<h2>Initializing dynamic memory.</h2>

<p>You don't need to manually reset all memory to zero:</p>

<pre><code>for(int i=0;i&lt;rows;i++)
  for(int j=0;j&lt;cols;j++)
    Mat[i][j]=0;            
</code></pre>

<p>This can be done automatically during allocation by forcing zero construction of each integer vaule.</p>

<pre><code>for(int i =0;i&lt;rows;i++)
{
   Mat[i]=new int[cols]();
   //                  ^^  Notice this.
   //                      It forces zero initialization
   //                      rather than default initialization.
}
</code></pre>

<h3>Assert and exception.</h3>

<p>Your assert will never fire:</p>

<pre><code>   assert(Mat[i]);
</code></pre>

<p>The call to <code>new</code> will never return <code>nullptr</code>, so the assert will never fire. If <code>new</code> fails, it will throw an exception.</p>

<h3>One memory block rather than array of arrays.</h3>

<p>You allocate an array of arrays. This means accessing an element becomes two memory accesses.</p>

<pre><code> matrix[4][3] // =&gt; Gets matrix[4] (a pointer)
              // =&gt; a pointer[3]   (second memory access)
</code></pre>

<p>If you allocate a single block of memory then you only have a single memory access. This does involve you calculating the location of the element:</p>

<pre><code>  index = (4 * rowSize) + 3;
  return data(index);
</code></pre>

<p>A technique for overloading <code>operator[]</code> to do this can be found here <a href="//stackoverflow.com/a/1971207">How to overload array index operator for wrapper class of 2D array?</a>.</p>

<h3>Assignment Fail</h3>

<p>Your assignment operator is broken.</p>

<p>You assume the destination array has enough space to be copied over. This is not generally the case. You will need to check.</p>

<p>The easiest method of implementing the assignment operator is called the <strong>Copy and Swap Idiom</strong>; you should look it up.</p>

<p>It means the assignment operator is implemented in terms of the copy constructor:</p>

<pre><code>void Matrix::operator=(const Matrix &amp;other)
{
    Matrix tmp(other);
    tmp.swap(*this);
    return *this;
}
</code></pre>

<h3>Other quick notes</h3>

<ul>
<li>Throw an exception: <code>throw std::runtime_error("Error Message");</code></li>
<li>Virtual Destructor: <code>virtual ~Matrix() {/* Implement*/}</code></li>
<li>Prefer Single allocation. You are allocating an array of pointers. Then for each pointer allocating an array of <code>int</code>. Rather than do this. Calculate the total area of the matrix <code>N*M</code> just do one allocation for all the elements. When somebody accesses <code>[a][b]</code>, ou need to multiply <code>a</code> by the size of the row then add <code>b</code> to get the correct location of the element.</li>
<li>If you try and multiply matrices of incompatible sizes, preferably this should be a compile time error (so that you can fix the code before it runs). If you don't know the size of your array until runtime then you should throw an exception to indicate that this is not allowed. Any errors should cause the code to stop working (so that you have to fix the error or explicitly do some coding to tell the user that something went wrong).</li>
</ul>
    </div>