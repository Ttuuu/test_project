<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This isn't the most performant method, but it does simplify and localize the code.</p>

<p>First I would build a custom attribute to hold the string value.</p>

<pre><code>class InputKeyAttribute : Attribute
{
    public string Value { get; private set; }
    public InputKeyAttribute (string value)
    {
        Value = value;
    }
}
</code></pre>

<p>And create the extension methods to retrieve the information needed</p>

<pre><code>// This will retrieve the input key
public static string GetInputKey(this Enum value)
{
    Type type = value.GetType();
    string name = Enum.GetName(type, value);
    if (name != null)
    {
        FieldInfo field = type.GetField(name);
        if (field != null)
        {
            InputKeyAttribute attr = 
                   Attribute.GetCustomAttribute(field, 
                     typeof(InputKeyAttribute )) as InputKeyAttribute ;
            if (attr != null)
            {
                return attr.Value;
            }
        }
    }
    return null;
}

// get the enum for the string value. returns 0(None) if not match found
public InteractionType GetInteractionType(this string key)
{
    return Enum.GetValues(typeof(InteractionType )).Cast&lt;InteractionType&gt;()
            .FirstOrDefault(v =&gt; String.Equals(v.GetInputKey(), key,
               StringComparison.OrdinalIgnoreCase));
}
</code></pre>

<p>Now you can add the attribute to the enum</p>

<pre><code>public enum InteractionType
{
    [InputKey = "Default"]
    None,
    [InputKey = "Gate"]
    Gate,
    [InputKey = "Postit"]
    Postit
    //etc...
}
</code></pre>

<p>And then retrieve the value when needed</p>

<pre><code>var InteractionType = ptype.GetInteractiontype();
</code></pre>

<p>To solve the performance issue you could implement this to create the lookup dictionary and call from it instead of iterating through all of the enum values on each call. After the initialization of the dictionary, the retrieval call should perform in O(1) time.</p>

<pre><code>private Dictionary&lt;string, InteractionType&gt; interactionTypes;

public InteractionType GetInteractionType(this string key)
{
    if(interactionTypes == null)
    {
        interactionTypes = CreateInteractionDictionary();
    }

    if(interactionTypes.ContainsKey(key))
    {
        return interactionTypes[key];
    }
    else
    {
    return InteractionType.None;
    }
}

private Dictionary&lt;string, InteractionType&gt; CreateInputDictionary()
{
    Dictionary&lt;string, InteractionType&gt; output = new Dictionary&lt;string, InteractionType&gt;(StringComparer.OrdinalIgnoreCase);
    foreach(var value in Enum.GetValues(typeof(InteractionType )).Cast&lt;InteractionType&gt;())
    {
        output.Add(value.GetInputKey(), value);
    }
    return output;
}
</code></pre>
    </div>