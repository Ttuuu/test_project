<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As you've noticed yourself, your <code>FromJSON</code> instances suffer from duplication. You could use the <em>automatic</em> instance generation with <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-DeriveGeneric" rel="nofollow noreferrer"><code>-XDeriveGeneric</code></a>, however, some of your fields would mismatch (namely <code>id</code>).</p>

<p>We can still fix this if we use <a href="https://hackage.haskell.org/package/aeson-1.4.2.0/docs/Data-Aeson-Types.html#v:defaultOptions" rel="nofollow noreferrer">custom options</a>, which simply remove the <code>native</code>:</p>

<pre><code>fixName :: String -&gt; String
fixName xs 
  | "native" `isPrefixOf` xs = let (a:as) = drop 6 xs in toLower a : as
  | otherwise                = xs

data WSPost = WSPost {
           ... snip ...
      }
      deriving(Show, Generic)

instance FromJSON WSPost where
    parseJSON = genericParseJSON customOptions
      where customOptions = defaultOptions
                { fieldLabelModifier = fixNames
                }
</code></pre>

<p>However, this still falls short on complicated fields like <code>APIQuota</code>. Here, we still suffer from duplication as you've noticed:</p>

<blockquote>
  <p>It seems like I've got a ton of repetition with <code>field &lt;- o .: "field"</code> and then using <code>field=field</code> in the record syntax. Is there a better way to do that? </p>
</blockquote>

<p>Enter <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#record-wildcards" rel="nofollow noreferrer"><code>-XRecordWildCards</code></a>. It does exactly what you want:</p>

<pre><code>instance FromJSON b =&gt; FromJSON (APIResponse b) where
  parseJSON = withObject "APIResponse" $ \o -&gt; do
    has_more &lt;- o .: "has_more"
    items &lt;- o .: "items"
    quota_max &lt;- o .: "quota_max"
    quota_remaining &lt;- o .: "quota_remaining"
    -- page, page_size, total, type

    let quota = APIQuota {total=quota_max, remaining=quota_remaining}

    return APIResponse { .. } -- no duplication here
</code></pre>

<p>Note that you can shuffle your elements in your types arbitrarily.</p>

<hr>

<p>Unfortunately, I don't have time for a further in-depth analysis, but these remarks should help you improve the code and make it more readable. That being said, if you find yourself often in a situation where you want to describe code and still make it compileable or runnable, have a look at <a href="https://wiki.haskell.org/Literate_programming" rel="nofollow noreferrer">Literate Haskell</a>.</p>
    </div>