<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Below can lead to terrible performance.</strong></p>

<p>A <em>good</em> compiler will recognize <code>alphas</code> does not change and so perform <code>strlen(alphas)</code> only once - which time complexity is the length of the string - say <code>N</code>.</p>

<p>A lesser compiler will execute <code>strlen(alphas)</code> each and every time, thus the <code>5 char pw test</code> loops will cost <code>N*N*N*N*N</code> time!</p>

<pre><code>// 5 char pw test
for (int i = 0; i &lt; strlen(alphas); i++)
{
    key[0] = alphas[i];
    for (int j = 0; j &lt; strlen(alphas); j++)
    {
      ....
</code></pre>

<p>Instead simply use</p>

<pre><code>size_t n = strlen(alphas);
for (size_t i = 0; i &lt; n; i++)
{
    key[0] = alphas[i];
    for (size_t j = 0; j &lt; n; j++)
    {
      ....
</code></pre>

<p>Or idiomatic C and look for the <em>null character</em>.</p>

<pre><code>for (size_t i = 0; alphas[i]; i++)
{
    key[0] = alphas[i];
    for (size_t j = 0; alphas[j]; j++)
    {
      ....
</code></pre>

<hr>

<p>Code only needed once.  Recommend to move <code>key[N] = '\0';</code> to just before each set of loops.</p>

<pre><code>                key[5] = '\0';
</code></pre>

<hr>

<p><strong>Minor: Use <code>const</code></strong></p>

<p>Some compiler will emit more efficient code when told that <code>hash</code> does not point to changeable data. Some compilers may deduce this already.  Also see <a href="https://codereview.stackexchange.com/questions/225432/c-based-hash-matching-cracker/225626?noredirect=1#comment438169_225626">@Toby Speight</a></p>

<pre><code>// bool crack(string hash)
bool crack(const char *hash)
</code></pre>
    </div>