<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some ideas:</p>

<p><strong>Alternative code</strong></p>

<pre><code>// if (bufsize == 0 || (i) &gt;= bufsize - 1)
if ((i) + 1 &gt;= bufsize)
</code></pre>

<p><strong>UB when <code>*buf &lt; 0</code></strong></p>

<p><code>is...(ch)</code> functions defined for <code>ch</code> in the <code>unsigned char</code> range and <code>EOF</code>.</p>

<pre><code>// isalpha(*buf)
isalpha((unsigned char) *buf)
</code></pre>

<p><strong>Help</strong></p>

<p>Too bad <code>usage()</code> does not include option detail like</p>

<blockquote>
  <p>The option -k considers only keywords (beginning with _ or alphabetic character), and words consisting of symbols are ignored.<br>
  The option -w considers words as a string of characters separated by white space.</p>
</blockquote>

<p><strong>Creeping feature</strong></p>

<p>Option for output sorted by usage.</p>

<p><strong>Alt code: star reduction</strong></p>

<p>To change most of the <code>(*p)</code> to a tidy <code>tn</code>, consider:</p>

<pre><code>//                                      v--- I'd expect a const
// static void addtree(struct tnode **p, char *w) {
static void addtree(struct tnode **p, const char *w) {
  int cond;
  struct tnode *tn = *p;
  if (tn == NULL) { /* if a new word has arrived, make a new node */
    *p = tn = malloc(sizeof *tn);
    if (tn == NULL)
      err(EXIT_FAILURE, "malloc");
    if ((tn-&gt;word = strdup(w)) == NULL)
      err(EXIT_FAILURE, "strdup");
    tn-&gt;count = 1;
    tn-&gt;left = tn-&gt;right = NULL;
  } else if ((cond = strcmp(w, tn-&gt;word)) == 0) { /* repeated word */
    tn-&gt;count++;
  } else if (cond &lt; 0) { /* less than into left subtree */
    addtree(&amp;(tn-&gt;left), w);
  } else if (cond &gt; 0) { /* greater than into right subtree */
    addtree(&amp;(tn-&gt;right), w);
  }
}
</code></pre>

<p><strong>Reduced allocations by 2 idea</strong></p>

<p>Since allocation of a node always occurs with a <em>string</em>: research <a href="https://en.wikipedia.org/wiki/Flexible_array_member" rel="nofollow noreferrer">Flexible array member</a> and do both in one allocation.</p>

<pre><code>struct tnode {
    unsigned long count;   /* number of occurrences */
    struct tnode *left;    /* left child */
    struct tnode *right;   /* right child */
    char word[];           /* text array*/    // FAM
};

*p = malloc(sizeof **p + strlen(w) + 1);
</code></pre>
    </div>