<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If you want to have a more proper <code>Iterable</code>, consider generating the <code>Stream</code> using a closure. It's syntactically displeasing, but the paradigm allows you to iterate more than once:</p>

<pre><code>public class StreamIterable&lt;T&gt; implements Iterable&lt;T&gt; {

    private final Supplier&lt;Stream&lt;T&gt;&gt; streamGenerator;

    public StreamIterable(Supplier&lt;Stream&lt;T&gt;&gt; streamGenerator) {
        this.streamGenerator = streamGenerator;
    }

    @Override
    public Iterator&lt;T&gt; iterator() {
        return streamGenerator.get().iterator();
    }
}
</code></pre>

<p>You can see the difference by running this snippet: </p>

<pre><code>{
    public static void main(String[] args) {
        List&lt;Integer&gt; list = Arrays.asList(3, 98, 4);
        Iterable&lt;Integer&gt; infinitelyIterable = new StreamIterable&lt;&gt;(() -&gt; list.stream().map(i -&gt; i + 10));
        Iterable&lt;Integer&gt; onceIterable = list.stream()::iterator;
        for (int i : infinitelyIterable) {
            System.out.println(i);
        }
        for (int i : infinitelyIterable) {
            System.out.println(i);
        }
        for (int i : onceIterable) {
            System.out.println(i);
        }
        for (int i : onceIterable) {
            System.out.println(i);
        }
    }
}
</code></pre>
    </div>