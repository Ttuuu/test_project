<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Other developer-oriented issues such as variable namings, documenting, commenting, and such are not really a concern here since it's just for practicing algorithm and data structures, and have to follow the tutorial as much as possible.</p>
</blockquote>

<p>I feel this is a bad idea, this is as it promotes detrimental core habits.</p>

<p>Myself and a friend used to play a purely skill based game. You had to click circles at specific points in time. My friend had discipline and decided to laboriously focus on improving their accuracy by playing on the easiest levels until they could reasonably 100% any easy level. After this they played harder and harder levels, focusing on building one skill at a time. They became one of the best at this game in the world.</p>

<p>I however found the easy levels boring, and decided to skip to harder levels. I would on average get 80%-90% when we were playing some of the easier levels together. But as my friend progressed this dropped to an average of 60%, it seemed nearly impossible to get higher or lower than this.</p>

<p>This is the same with programming. When you get in <a href="https://en.wikipedia.org/wiki/Flow_(psychology)" rel="nofollow noreferrer">the zone</a> you want to stay in it for the maximum amount of time. However if you don't have core skills then you'll likely trip up and leave it. This can be as simple as hitting a road block where you need to think of a name, and the more it takes to get the name you want the more you've left the zone. And then you have to build up to get in that zone again.</p>

<h1>As for the code</h1>

<p>I think adding hearts is 'cute', and if this were a professional project I'd recommend they go away. Currently however they look like there's no clear standard on what should be green, orange or red.</p>

<blockquote>
<pre><code>print("ðŸ’› Single linked list is empty!")
print("ðŸ’› Error: ", e)
</code></pre>
</blockquote>

<p>Personally I'd make a couple of functions <code>info</code>, <code>warn</code> and <code>error</code> that print the message with the correct heart prepended. This could be something simple like:</p>

<pre><code>def info(*args, sep=None, **kwargs):
    print('ðŸ’š', *args, **kwargs)
</code></pre>

<ul>
<li><code>create_single_linked_list</code> should be a class method. This is as it is <em>creating</em> the linked list, and so you should be initializing the LL in the function.</li>
<li><code>create_single_linked_list</code> shouldn't have printing in it, and it shouldn't have any reading input from users. This is not what a Linked List does, this is something independent of the linked list.</li>
<li><p>Don't use recursion unless you know it's reasonably safe. Python limits how deep a function call stack can be, and so this is like creating a bomb. You never know when your code may just break.</p>

<p>There's ways to increase this limit, but I'd advise against them as they don't solve the problem. It's like having bomb defuser hide bombs in the middle of nowheer. Sure it's less likely to kill anybody, but there's still a chance.</p></li>
<li><p>The lack of magic methods is very alarming. What's the point in making an abstract data type, if you can't even use it via standard means?</p></li>
<li><p>Adding an <code>__iter__</code> magic method would make the majority of your functions very simple. You could define <code>search_sll_nodes</code> (which is a very poor name) as simply <code>return x in iter(self)</code>. You could make <code>count_sll_nodes</code>, <code>return sum(1 for _ in self)</code>.</p>

<p>This is a large oversight, and makes the code longer and harder to understand for seemingly no reason.</p></li>
<li><p><code>except Exception as e: print("ðŸ’› Error: ", e)</code> is really bad form. You shouldn't be ignoring potentially fatal errors in your linked list class. This is just another example on how your code has merged the calling code with the linked list implementation.</p>

<p>Also the pure magnitude of these makes me either think you have the worlds most error prone linked list, in which case you should probably focus on fixing the issues you have. Or that your code is just an example of the boy who cried wolf. Are there actually any errors here, or will the calling code handle the issue if I allow it to propagate?</p>

<p>Either way I'd get rid of most of them.</p></li>
<li><p>You can implement pretty much everything you need by inheriting <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSequence" rel="nofollow noreferrer"><code>collections.abc.MutableSequence</code></a>.</p></li>
</ul>

<p>I would go through the code in more depth, but I'm only a tenth of the way through and I've come to the conclusion that I'd be rewriting the entire of your code as you've not decoupled your user interactions from your implementation.</p>

<h1>Conclusion</h1>

<p>You should implement the entire linked list again, I'd advise inheriting from <code>MutableSequence</code> to ease the creation of this list.</p>

<p>Your main code should be built in a way that you can test a list and your <code>SingleLinkedList</code>. This has the benefit that you can make a <code>DoubleLinkedList</code> and not have to duplicate nearly a thousand lines, which is long.</p>
    </div>