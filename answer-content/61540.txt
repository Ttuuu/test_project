<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is way too much duplication in this code. This is dangerous and can lead to nasty bugs, when you need to make a change at somewhere, and you forget to make the similar change at all the other copy-pasted locations. Avoid copy-pasting code.</p>

<hr>

<p>Rewrite <code>display</code> with the common logic extracted to another function:</p>

<pre><code>void display_peg(char label, int *peg, int top)
{
    int i;
    if (peg[0] == 0) {
        printf("\nEmpty %c", label);
    } else {
        printf("\n%c Stack :\n", label);
        for (i = top; i &gt;= 1; i--) {
            printf("  %d\n", peg[i]);
        }
    }
}

void display(int *A, int *B, int *C, int atop , int btop ,int ctop)
{
    display_peg('A', A, atop);
    display_peg('B', B, btop);
    display_peg('C', C, ctop);
}
</code></pre>

<p>You also forgot to declare the return type <code>void</code> of your original function, which raises warnings by the compiler.</p>

<hr>

<p>Moving from one peg to another can be generalized and extracted to a function:</p>

<pre><code>void move_from_peg1_to_peg2(
        char peg1label, int * peg1, int * peg1top,
        char peg2label, int * peg2, int * peg2top)
{
    ++*peg2top;
    peg2[*peg2top]=peg1[*peg1top];
    peg1[*peg1top]=0;
    --*peg1top;
    peg2[0]++;
    peg1[0]--;
    printf("\nDisk %d: %c-&gt;%c",peg2[*peg2top], peg1label, peg2label);
}
</code></pre>

<p>The same goes for deciding moving between pegs, based on the count:</p>

<pre><code>void move_between_pegs(int count,
        char peg1label, int * peg1, int * peg1top,
        char peg2label, int * peg2, int * peg2top)
{
    printf("\n%d count:",count);
    if (count % 2 == 1) {
        if (peg1[*peg1top] == 1) {
            move_from_peg1_to_peg2(peg1label, peg1, peg1top, peg2label, peg2, peg2top);
        } else if (peg2[*peg2top] == 1) {
            move_from_peg1_to_peg2(peg2label, peg2, peg2top, peg1label, peg1, peg1top);
        }
    } else {
        if (*peg1top == 0
                || (*peg2top != 0 &amp;&amp; peg1[*peg1top] &gt; peg2[*peg2top])) {
            move_from_peg1_to_peg2(peg2label, peg2, peg2top, peg1label, peg1, peg1top);
        } else if (*peg2top == 0
                || (*peg1top !=0 &amp;&amp; peg2[*peg2top] &gt; peg1[*peg1top])) {
            move_from_peg1_to_peg2(peg1label, peg1, peg1top, peg2label, peg2, peg2top);
        }
    }
}
</code></pre>

<p>With these helper functions, your <code>while</code> loop that had almost 300 lines becomes so much simpler:</p>

<pre><code>do
{
    count+=1;
    step=(step%3)+1;

    switch(step)
    {
        case 1://move between pegs A and C
            move_between_pegs(count, 'A', A, &amp;atop, 'C', C, &amp;ctop);
            break;

        case 2://move between pegs A and B
            move_between_pegs(count, 'A', A, &amp;atop, 'B', B, &amp;btop);
            break;

        case 3://move between pegs C and B
            move_between_pegs(count, 'C', C, &amp;ctop, 'B', B, &amp;btop);
            break;

        default:
            printf("Some Error!");
    }//switch end
}
while((count &lt;=max) &amp;&amp; (C[0]!=n) );
</code></pre>

<p>Notice that you don't need anymore the <code>//switch end</code> comment: you can see the entire <code>switch</code> content right in front of you. The same goes for the comments <code>//move between pegs C and B</code>: the function name and its parameters make it perfectly clear what is going on.</p>

<p>In fact, whenever you find yourself writing a comment for a block of code, consider extracting that block of code to a function, and let the function name and its parameters become self-explanatory, effectively replacing the comment itself.</p>

<hr>

<p>Extracting duplicated code into methods is more than just good style. It can make previously invisible things visible. Notice above in <code>move_between_pegs</code> that I have fewer conditions than in your original code: I joined several independent if-else statements into one, with <code>||</code> condition. This simplification would have been difficult with the original code, because due to the lengthy blocks, it was hard to see their similarities. Only after I shortened them, it became crystal clear that some of the independent conditions will take the same action, and therefore they can be joined.</p>

<p>By eliminating duplication and making the code shorter, you can extend your vision, and understand the behavior of the code better, from a higher level, which often opens up the possibility for further optimizations.</p>
    </div>