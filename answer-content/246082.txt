<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few thoughts;</p>
<ul>
<li>Most would write <code>const flatFeature = [];</code> to initialize an array in javascript, though what you have is certainly correct.</li>
<li>You should strive to de-nest your code.  Having code unnecessarily placed in <code>if</code> or <code>if-else</code> blocks increases the number of paths through your code, making it harder to follow and unit test.  In this case, you could de-nest by changing your first <code>if</code> to something like <code>if (!subscription.plan || !subscription.plan.feature) return;</code> which clearly indicates that there is no work to do in this function unless those conditions are met.</li>
<li>You should strongly consider using an object to map your <code>flatFeature</code> names to the objects encountered with greatest expiration date.  That eliminates the looping <code>find()</code> operation to determine if an existing <code>flatFeature</code> with that name has already been encountered, making this a constant time lookup.  This may not be a big deal if there are 100 subscriptions being iterated, but what if there are 1 million?</li>
<li>Taking above approach of building a name-keyed object gives you flexibility to continue to work against those keyed feature names or you can simply use <code>Object.values(obj)</code> to get the array of feature objects.</li>
<li>Stylistically, your code looks somewhat "dense" and has long horizontal lines (especially your ternary) that make code harder to read and understand at a glance.  Using javascript's destructuring can oftentimes help in keeping your code more terse and thus more easily read.</li>
</ul>
<p>Putting it together, I might use something like:</p>
<pre><code>const features = allActiveSubscriptions.reduce(
  (obj, sub) =&gt; {
    const { plan: { featuresList }, expDate } = sub;

    if (!featuresList) return obj;

    featuresList.forEach( ({ name }) =&gt; {
      const existFeat = obj[name];

      if (!existFeat) { 
        obj[name] = { name, expDate };
        return;
      }
      
      if (expDate &gt; existFeat.expDate) {
        existFeat.expDate = expDate;
      }
    });

    return obj;
  },
  {} 
);

// if you want an array
const featArray = Object.values(features);
</code></pre>
<p>In terms of worst-case operational efficiency, this makes your function perform in <code>O(m x n)</code> as opposed to <code>O(m x n x p)</code> as it is currently (where <code>m</code> is number of subscriptions, <code>n</code> is maximum feature list size, and <code>p</code> number of unique feature names).</p>
    </div>