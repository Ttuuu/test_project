<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code structure</h2>
<ul>
<li><p>The code in the file <code>main.cpp</code> only operates on <code>FDeepDishPizza</code> class, so the name sounds misleading to me. It feels like <code>main.cpp</code> would be working on the base class <code>FrozenFood</code>, instantiating its derived classes and calling their public functions, which it doesn't do.</p>
</li>
<li><p>A trivial constructor which only initialises the member variables can be in header file, instead of the implementation.</p>
<pre><code>  # FDeepDishPizza.h
  FDeepDishPizza(int APrice, int AWeight, int ADiameter, int AHeight); #can be expanded here itself, instead of in FDeepDishPizza.cpp .  
</code></pre>
<ul>
<li><a href="https://docs.microsoft.com/en-us/cpp/cpp/constructors-cpp?view=vs-2019#init_list_constructors" rel="nofollow noreferrer">https://docs.microsoft.com/en-us/cpp/cpp/constructors-cpp?view=vs-2019#init_list_constructors</a></li>
</ul>
</li>
</ul>
<h2>Use of Caps</h2>
<pre><code>class FrozenFood {
private:
    int Price;
}
....
FDeepDishPizza(...)
</code></pre>
<ul>
<li><p>Capitalised names indicate classes, while all small letters indicate variables and functions. The latter two are the ones you'd be typing a lot, so better keep <kbd>shift</kbd> key out of the way.</p>
</li>
<li><p>Also, private members can be prefixed with <code>_</code>, like <code>_price</code> to have them stand out if they're being modified.</p>
</li>
</ul>
<h2><code>#ifndef</code> vs <code>pragma once</code></h2>
<blockquote>
<p>Note Some implementations offer vendor extensions like <code>#pragma once</code> as alternative to include guards. It is not standard and it is not portable. It injects the hosting machineâ€™s filesystem semantics into your program, in addition to locking you down to a vendor. Our recommendation is to write in ISO C++: See <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rp-Cplusplus" rel="nofollow noreferrer">rule P.2</a>.</p>
</blockquote>
<p><a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rs-guards" rel="nofollow noreferrer">http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rs-guards</a></p>
    </div>