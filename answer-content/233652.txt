<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would suggest coding <code>trace</code> as a generator that takes a path and yields the sequence of coordinates on the path.</p>

<pre><code>def trace(path):
    step = {'U':(0,1), 'D':(0,-1),
            'R':(1,0), 'L':(-1,0)}

    x = y = 0

    for segment in path:
        dx,dy = step[segment[0]]
        length = int(segment[1:])

        for n in range(length):
            x += dx
            y += dy
            yield x, y
</code></pre>

<p>Then code <code>draw</code> to build a dict mapping coords to the wire length to reach that coord.</p>

<pre><code>def draw(path):
    coords = {}

    for path_length, coord in enumerate(trace(path), 1):
        if coord not in coords:
            coords[coord] = path_length

    return coords
</code></pre>

<p>Using dicts, let's you use the keys like sets, making it easy to find the intersecting points.</p>

<pre><code>coords1 = draw(path1.split(','))
coords2 = draw(path2.split(','))

intersections = coords1.keys() &amp; coords2.keys()
</code></pre>

<p>And the answers:</p>

<pre><code>min_manhattan = min(abs(x)+abs(y) for x,y in intersections)

min_wire = min(coords1[coord] + coords2[coord] for coord in intersections)
</code></pre>
    </div>