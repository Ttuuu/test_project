<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll start from the top and work my way down to the bottom.</p>
<hr>
<hr>
<pre><code> def gtin_check(gtin: str)-&gt; str:
</code></pre>
<p>Your type-hinting is incorrect here. Except in cases of invalid input, you are returning a boolean, not a string. Which leads me to...</p>
<pre><code>    if not isinstance(gtin, str) or len(gtin) not in (8,12,13,14,17,18):
        return 'Not a string'
</code></pre>
<p>In general it is a bad idea to mix two completely different return types for one function, unless there is some pressing reason to do so. The mixing creates more work for whoever is calling your function, since they have to handle both types. (Null value/<code>None</code> is probably the most common exception to this rule; sometimes it's appropriate to return <code>None</code>, e.g. if a function that is searching for a single specific object or value doesn't find one.)</p>
<p>To get rid of the string return value, I would suggest one of these alternatives:</p>
<ul>
<li>If the calling function really needs to know the difference between an input that had a bad check digit, and an input that was invalid in a "stronger" way: either raise an exception, or make your return type an <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">enum</a> with three possible values (e.g. <code>VALID</code>, <code>INVALID</code>, and <code>MALFORMED</code>).</li>
<li>If the calling function only needs to know whether an input was a valid GTIN or not: just return <code>False</code>.</li>
</ul>
<pre><code>    if not isinstance(gtin, str) or len(gtin) not in (8,12,13,14,17,18):
        return False
</code></pre>
<p>Now let's talk about performance. <code>in</code> / <code>not in</code> checks are generally faster on sets than they are on lists or tuples. This is because sets do clever things with hashing (<span class="math-container">\$O(1)\$</span>), while with lists and tuples you have to go down the line and check every value in order (<span class="math-container">\$O(n)\$</span>). So let's use a set instead.</p>
<pre><code>    if not isinstance(gtin, str) or len(gtin) not in {8,12,13,14,17,18}:
        return False
</code></pre>
<p>While we're doing these other checks, it would also be good to use <code>.isdecimal()</code> to check that the input string is numeric. Right now we don't have any code to catch non-numeric inputs like <code>'asdfghjk'</code>, so we get a slightly ugly error (<code>ValueError: invalid literal for int() with base 10: 'a'</code>).</p>
<pre><code>    if (not isinstance(gtin, str)
            or not gtin.isdecimal()
            or len(gtin) not in {8,12,13,14,17,18}):
        return False
</code></pre>
<p>The line was getting a bit long, so I added some line breaks. See the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> document for guidelines on when and how to use line breaks.</p>
<hr>
<hr>
<pre><code>        gtin_lst = [int(x) for x in gtin]
        #print("step 1 - give the gtin but as a list of integers",gtin_lst)
        gtin_lst.reverse()
        #print("step 2 reverse the gtin",gtin_lst)
        gtin_original = gtin_lst #saving the list to gtin_original
        #print("step 3 : gtin original still reverse",gtin_original)
        gtin_lst = gtin_original[1:] 
        #print("step 4 - gtin_lst starting from the first element",gtin_lst)
        gtin_original.reverse()
</code></pre>
<p>This section is confusing - you're putting the original value in a new variable and the altered value in the original variable, not to mention reversing a reversal. It would be easier to understand if you left <code>gtin_lst</code> intact and used negative indexes to extract the subset you need:</p>
<pre><code>        gtin_lst = [int(x) for x in gtin]
        gtin_lst_without_check_digit = gtin_lst[:-1]
        gtin_lst_without_check_digit.reverse()
</code></pre>
<hr>
<hr>
<pre><code>        # arriving at the algorithm part
        gtin_lst = [x*3 if i%2 == 0 else x for i,x in enumerate(gtin_lst)]
</code></pre>
<p>It is more "pythonic" to avoid <code>== 0</code> in conditions, and instead use the inherent "falsiness" of <code>0</code>.</p>
<pre><code>x*3 if not i%2 else x
</code></pre>
<p>I see you have already done this in another part of the code: <code>if (som_gtin1 % 10):</code>.</p>
<hr>
<hr>
<pre><code>        if (som_gtin1 % 10):
            som_gtin2 = som_gtin1 + (10 - som_gtin1 % 10) # (10 // gcd(som_gtin1, 10)) *  som_gtin1 #int(round(som_gtin1, -1)) #som_gtin1 + (10 - som_gtin1 % 10)
        else:   
            som_gtin2 = som_gtin1 
</code></pre>
<p>The logic here is solid, but this seems like a good place to talk about naming.</p>
<p>In general, naming variables by the pattern <code>foo1</code>, <code>foo2</code>, etc. is a <a href="https://blog.codinghorror.com/code-smells/" rel="nofollow noreferrer">code smell</a>. If you have more than one of the same kind of thing, why aren't they in some kind of list or collection? And if
they aren't the same kind of thing, why do they have the same name? There are exceptions, but I would say this is a bad idea nine times out of ten.</p>
<p>In this case, <code>som_gtin1</code> and <code>som_gtin2</code> aren't the same kind of thing.</p>
<ul>
<li><code>som_gtin1</code> is a sum of some numbers. (Is "som" instead of "sum" a typo, or are you deliberately using a non-English word?)</li>
<li><code>som_gtin2</code> is <code>som_gtin1</code> rounded to the nearest highest 10. In other words, it is <em>based</em> on a sum, but it is not a sum itself.</li>
</ul>
<p>Also, since the function is named <code>gtin_check</code>, we already know that everything we're doing is related to GTINs somehow. So adding <code>_gtin</code> to the variable names doesn't really give the reader any additional information.</p>
<p>Picking accurate and descriptive names throughout your code will make it easier to read and understand. You will sometimes hear people describe this kind of code as "self-documenting", because it does not need nearly as many comments or external documents.</p>
<pre><code>        if (digits_sum % 10):
            uprounded_sum = digits_sum + (10 - digits_sum % 10)
        else:   
            uprounded_sum = digits_sum
</code></pre>
<p>Let me be clear: I'm not claiming that <em>my</em> names are perfect either. There's <a href="https://www.martinfowler.com/bliki/TwoHardThings.html" rel="nofollow noreferrer">an old joke</a> that "there are only two hard problems in computer science: cache invalidation and naming things."</p>
<hr>
<hr>
<pre><code>        if (som_gtin2 - som_gtin1) == gtin_original[-1]:
            return True
        else:
            return False
</code></pre>
<p>I had a computer science professor in college who specifically warned us not to use this construction. So naturally, I didn't notice it until an hour after I finished writing the rest of this answer. ðŸ™‚</p>
<p>As my professor pointed out, any logic of the form "if <em>boolean value</em>, return true, else return false" can be reduced to "return <em>boolean value</em>".</p>
<pre><code>        return ((som_gtin2 - som_gtin1) == gtin_original[-1])
</code></pre>
<p>The wrapping parentheses aren't strictly necessary, but I think they make the code clearer.</p>
<hr>
<hr>
<h3>Putting it all together</h3>
<pre><code>def gtin_check(gtin: str) -&gt; bool:
    """Returns whether the input is a well-formed GTIN string."""
    # Check for obvious problems
    if (not isinstance(gtin, str)
            or not gtin.isdecimal()
            or len(gtin) not in (8,12,13,14,17,18)):
        return False
    else:
        # Compute correct "check digit" and compare to input's digit
        original_digits = [int(x) for x in gtin]
        digits_without_check_digit = original_digits[:-1]

        digits_without_check_digit.reverse()
        multiplied_digits = [x*3 if not i%2 else x
                             for i,x
                             in enumerate(digits_without_check_digit)]
        digits_sum = sum(multiplied_digits)

        if (digits_sum % 10):
            uprounded_sum = digits_sum + (10 - digits_sum % 10)
        else:   
            uprounded_sum = digits_sum
        expected_check_digit = uprounded_sum - digits_sum

        return (original_digits[-1] == expected_check_digit)
</code></pre>
    </div>