<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From where I'm standing it looks like this...</p>

<p><strong>usability</strong></p>

<ul>
<li><p><code>BeginEdit</code> &amp; <code>EndEdit</code> seem to be unsafe in use. What happens when I call either of them multiple times? Do they have to match? I mean, do I have to call <code>EndEdit</code> as many times as I called <code>BeginEdit</code>? Probably yes, but the API isn't clear about that. Or what would happen when I call <code>EndEdit</code> without <code>BeginEdit</code>? These scenarios should not be possible. What I think would be more intuitive and also reliable is this:</p>

<ul>
<li><p>let <code>BeginEdit</code> return a new interface</p>

<pre><code>public interface IEditing : IDisposabe, IRevertibleChangeTracking {}
</code></pre></li>
<li><p>this can used with <code>using</code> or any other disposable session mechanism</p>

<pre><code>using(var editing = objectEditor.BeginEdit()) // &lt;-- IEditing
{
    // make changes...
}
</code></pre></li>
<li><p>throw an <code>InvalidOperationException</code> when <code>BeginEdit</code> is called multiple times for an object</p></li>
<li><code>Dispose</code> would end the session and would also throw the same exception when there are any uncommited changes. This would be similar to an application warning you about unsaved changes when you are closing the editor. Of course the user should have other APIs to prevent that. The exception would be the last resort warning.</li>
<li>let the user only have the original APIs from the <code>IRevertibleChangeTracking</code>. The pair <code>Begin/EndEdit</code> are too confusing.</li>
</ul></li>
<li>and there is also a question: what is going to happen when I try to edit an object with two editors (<code>UI</code>s) at the same time? Should this be possible or prohibited? How will conflicts be resolved?</li>
<li>you are using a <code>Stack</code> for tracking changes internally. I guess this means that <code>BeginEdit</code> &amp; <code>EndEdit</code> work like <code>QuickSave</code> and <code>Undo</code>. Again, I think it would be more intuitive if there were actually such methods as <code>TakeSnapshot</code> and <code>Undo</code>. This however would require the use to be able to see how many snapshots there are (as a counter or <code>ObjectEditor</code> could itself be <code>IEnumerable&lt;OfSomething&gt;</code>) and when he tries to <code>Undo</code> more, then <code>InvalidOperationException</code> should be raised.</li>
</ul>

<p><strong>clean-code</strong> </p>

<ul>
<li><p>some of your members have access modifiers whereas others don't and there is no pattern ;-P </p></li>
<li><p>I would call <code>ComplexObjectTracker</code> just <code>ObjectTracker</code>. No need to confuse the user that there is anything complex. Especially that there is no <code>ObjectTracker</code> yet so why is this one <em>complex</em>? </p></li>
<li><p>I also think that all classes but the <code>ObjectEditor</code> should be <code>internal</code> and the user should see only the interfaces.</p></li>
<li><p>there is the <code>PropertyReferenceTracker</code> but the derived class is named <code>DeepPropertyTracker</code> and not <em><code>DeepPropertyReferenceTracker</code></em>. I would remove the word <em><code>Reference</code></em> from the name. It's confusing. See here where a <em>Property<strong>Reference</strong>Tracker</em> is created for a value-type and a deep-tracker for a reference type:</p>

<blockquote>
<pre><code>private IRevertibleChangeTracking CreateChangeTracker(PropertyInfo property)
{
 if (property.PropertyType.IsValueType)
 {
     return new PropertyReferenceTracker(Source, property);
 }

 return new DeepPropertyTracker(Source, property, Visited);
 }
</code></pre>
</blockquote></li>
<li><p>Are you sure this should even be <code>public</code>? And the name...</p>

<blockquote>
<pre><code>public IRevertibleChangeTracking deepTracker { get; }
</code></pre>
</blockquote></li>
</ul>

<p><strong>misc</strong></p>

<ul>
<li>I don't think that setting <code>IsChanged = true;</code> for all properties, regardless whether they are actually changed or not is such a good idea. This would make it only more difficult to view the changes... that might actually not be there. It would also unnecessarily overwrite unmodified values. Having such helpers as <code>OldValue</code> and <code>NewValue</code> would also be very useful for rendering debug views or other summaries.</li>
</ul>
    </div>