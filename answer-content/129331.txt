<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>gfv posted the optimal solution, but there is also a lot you can learn from finding out how to improve your code.  The most important thing is correctness.  As AlanT said, you don't have to write special code for the cases where the array has 0 or 1 elements, and your special code for those cases is incorrect.  The code for assigning <code>missingNumber</code> is incorrect as well.  The range to check against should always start from 1 and have the count be <code>elements.Count + 1</code>.  So you don't need to sort at all.  And if you did want to get the minimum value, you can just call <code>Min()</code> instead of sorting and then calling <code>First()</code>.  <code>missingNumber</code> should always contain exactly 1 element, so you don't need to check if <code>Count()</code> is equal to 0.  If the count is 0, then the input or your code is incorrect.  Calling <code>Count()</code> and <code>First()</code> is wasteful because it causes the calculations to populate the <code>IEnumerable</code> to get performed twice.  If you have to call two methods that cause an <code>IEnumerable</code> to get enumerated, you're usually better off converting it to a list or array first.</p>
    </div>