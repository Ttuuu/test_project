<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some quick remarks:</p>

<ul>
<li><p><code>if (mediaResultsAbove60Percent.Count == 0) return false;</code> can be replaced by the much more readable <code>return !mediaResultsAbove60Percent.Any();</code>.</p></li>
<li><p>I'd extract parts of <code>CreateEmailMessage</code> to a separate method, or even class of its own, for instance a <code>BodyRetriever</code> class. Right now it does way too much.</p></li>
<li><p>You use <code>bodyBuilder.HtmlBody</code> yet the body you compile is plain text. Instead of using string concatenation, why not design nicer email texts as HTML files, embed those HTML files and <a href="https://stackoverflow.com/questions/15822625/read-content-of-html-file-at-runtime-in-c-not-using-physical-path">read those at runtime</a>? (You can have placeholders in the HTML file and replace those if necessary.)</p></li>
<li><p>I don't see the point in creating <code>auditText</code>, <code>lowProbabilityText</code> and <code>highProbabilityText</code>, considering you immediately assign these to <code>_body</code>.</p></li>
<li><p>Don't use <code>"\r\n"</code>, use <code>Environment.NewLine</code>.</p></li>
<li><p>Comments should explain the why, not the what. If <code>// Construct the email body.</code> only applies to the next line -- <code>var builder = new BodyBuilder {HtmlBody = _body};</code> -- it is pointless, if it applies to the whole block of lines below it, it is incorrect.</p></li>
<li><p><code>ReadFully()</code> isn't proper English and pretty meaningless. Why not <code>ToByteArray()</code>?</p></li>
<li><p><code>AddRecipients</code> has duplicate code. Instead, do this: <code>var recipients = highestProbability &gt;= 75 ? _emailSettings.FullRecipients : _emailSettings.Recipients;</code> and then loop through <code>recipients</code>.</p></li>
<li><p>No need to <code>return email;</code> at the end of <code>AddRecipients</code>: this method has already updated <code>MimeMessage email</code> passed as an parameter. Just call <code>AddRecipients(message, highestProbability);</code>, no need to assign the result to <code>var fullMessage</code>.</p></li>
</ul>

<hr>

<p>IMHO you should consider splitting up this class into smaller ones, e.g. one to construct the <code>MimeMessage</code>, which itself should call a class to construct the email body etc. I'd rather have a couple of small classes where each does one particular task, than a 200 line "Service" class that contains a lot of private methods etc. </p>

<p><code>SendEmail</code> should basically call something like <code>ComposeEmail</code> and then <code>SendEmail</code> (please don't add "Async" to the end of methods where there is no need). Quite honestly I'd even extract <code>SendMessageAsync</code> to a class of its own (something like <code>EmailSender</code>). Keep the Service class clean, and simply have it delegate its work to other classes.</p>
    </div>