<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your output is simply a sum of certain numbers. You don't need to build intermediary lists at all here, just <em>select the numbers you want to sum</em>, by looping. Your criteria are that the <em>current</em> number should not be 13, and the <em>preceding</em> number should not be 13.</p>

<p>To achieve this, you could just use a loop that remembers the preceding number:</p>

<ul>
<li>initialize a <code>preceding</code> variable to a value you can easily test for. Here, any value other than 13 would do, and <code>None</code> is probably a good sentinel value.</li>
<li>In a loop over the numbers, if the <em>current</em> number is not 13 <em>and</em> the <em>preceding</em> number is not 13, add it to the running total.</li>
<li>At the end of the loop, set <code>preceding</code> to the current number. That way, when you go back to the top of the loop body, <code>preceding</code> will still contain the number from the preceding iteration.</li>
</ul>

<p>So, given an input of <code>[17, 13, 3, 9]</code>, you'd want to sum the first and the last number. We start with <code>preceding</code> set to <code>None</code>, <code>result</code> is set to <code>0</code> and we iterate 4 times:</p>

<ol>
<li><code>preceding = None</code>, set <code>current</code> to the first value <code>17</code>.

<ul>
<li><code>preceding != 13 and current != 13</code> is <em>true</em>, so add the current value to the result -&gt; <code>result = 0 + 17 = 17</code>.</li>
<li>set <code>preceding = current</code>, so <code>17</code></li>
</ul></li>
<li><code>preceding = 17</code>, set <code>current</code> to the second value <code>13</code>.

<ul>
<li><code>preceding != 13 and current != 13</code> is <strong>false</strong> (<code>current</code> is set to 13), so <em>skip</em> this value.</li>
<li>set <code>preceding = current</code>, so <code>13</code></li>
</ul></li>
<li><code>preceding = 13</code>, set <code>current</code> to the third value <code>3</code>.

<ul>
<li><code>preceding != 13 and current != 13</code> is <strong>false</strong> (<code>preceding</code> is set to 13), so <em>skip</em> this value.</li>
<li>set <code>preceding = current</code>, so <code>3</code></li>
</ul></li>
<li><code>preceding = 3</code>, set <code>current</code> to the forth value <code>9</code>.

<ul>
<li><code>preceding != 13 and current != 13</code> is <em>true</em>, so add the current value to the result -&gt; <code>result = 17 + 9 = 26</code>.</li>
<li>set <code>preceding = current</code>, so <code>9</code></li>
</ul></li>
</ol>

<p>and you end up with <code>result = 26</code>.</p>

<p>Generally speaking, when you find yourself wanting to look <em>ahead</em> in a <code>for</code> loop, turn the problem around and look <em>behind</em> instead. It is <em>much simpler</em>, as your loop will already have processed the items behind.</p>

<p>Translating those steps above to Python code looks like this:</p>

<pre><code>def sum_without_13s(nums):
    """Sum all values that are not equal to 13 or directly follow 13"""

    # the running total of qualifying numbers
    result = 0
    # the preceding value in the loop, set at the end of the loop body
    preceding = None  # any value that is not 13 would do

    for value in nums:
        # only add to the sum if this value and the preceding value are both
        # *not* equal to 13.
        if value != 13 and preceding != 13:
            result += value

        # for the next iteration, remember the current value so we can
        # skip any values that followed 13.
        preceding = value

    return result
</code></pre>

<p>That's the most <em>readable</em> method of implementing your algorithm. The function produces the sum of integers not 13, and not directly following 13:</p>

<pre><code>&gt;&gt;&gt; sum_without_13s([13, 99, 3])  # only 3 fits criteria, so should produce 3
3
&gt;&gt;&gt; sum_without_13s([99, 3])  # no 13s, so sum should be 102
102
&gt;&gt;&gt; sum_without_13s([1, 2, 13, 13, 3, 4])  # only 1, 2, and 4 should be summed == 7
7
</code></pre>

<p>Note that the function also <em>returns</em> the result, rather than print the result to the console. If you want to see the output of your function, you can always print the returned value:</p>

<pre><code>&gt;&gt;&gt; theanswer = sum_without_13s([17, 13, 19, 18, 13, 13, 3, 7])
&gt;&gt;&gt; print(theanswer)
42
</code></pre>

<h2>Other looping constructs that give you access to the preceding value</h2>

<p>You could in principle make use of <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain()</code></a> and <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> to produce an iterator of <code>(preceding, current)</code> tuples to loop over, and so make it possible to filter and sum in a generator expression.</p>

<p>The above 'preceding value' approach is a variant of the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>pairwise()</code> function from the <code>itertools</code> recipes section</a>. But where <code>pairwise()</code> starts with <code>(nums[0], nums[1])</code> and ends at <code>(nums[-2], nums[-1])</code>,  we really need to be starting with <code>(None, nums[0])</code> <em>first</em> because we wouldn't want to skip either the first or the last value in your input from consideration.</p>

<p>So here's a <code>with_preceding()</code> function, with a configurable default value for that first element of the first tuple:</p>

<pre><code>from itertools import chain, tee

def with_preceding(iterable, default=None):
    "s -&gt; (default, s0), (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    return zip(chain((default,), a), b)
</code></pre>

<p>which then can be used in an alternate implementation using a generator expression, like this:</p>

<pre><code>def sum_without_13s_iter(nums):
    """Sum all values that are not equal to 13 or directly follow 13"""
    return sum(
        current
        for preceding, current in with_preceding(nums)
        if preceding != 13 and current != 13
    )
</code></pre>

<p>However, readability suffers, in my eyes, and for little gain as the above is actually <em>slower</em> than the first version. See the small benchmark at the very end.</p>

<h2>Performance considerations</h2>

<p>I tried to construct what I hoped would be a <em>faster</em> function using iterators, the <code>itertools</code> and <code>operator</code> modules and the <code>sum()</code>, <code>map()</code> and <code>zip()</code> functions to try and avoid the Python interpreter loop altogether, but this was simply not any faster; at best I could get it to be about 5-10% <em>slower</em> than the above first version of the function.</p>

<p>If performance <em>is</em> a concern, then you should really be using numpy arrays anyway. With a numpy array of integers as the input, the function can be expressed as:</p>

<pre><code>import numpy as np

def array_sum_without_13s(numarray):
    """Sum all values in an array that are not equal to 13 or directly follow 13"""
    # boolean array with True where the input array has 13
    is13 = numarray == 13
    # boolean array with True where the input array is preceded by 13
    follows13 = np.concatenate(([False], is13[:-1]))
    # sum of all values that don't fit either of the above criteria
    return np.sum(numarray[~(is13 | follows13)])
</code></pre>

<p>As stated, this function expects a numpy array as the input:</p>

<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; array_sum_without_13s(np.array([13, 99, 3]))
3
&gt;&gt;&gt; array_sum_without_13s(np.array([99, 3]))
102
&gt;&gt;&gt; array_sum_without_13s(np.array([1, 2, 13, 13, 3, 4]))
7
&gt;&gt;&gt; array_sum_without_13s(np.array([17, 13, 19, 18, 13, 13, 3, 7]))
42
</code></pre>

<p>Given an input of 1 million integers, the numpy version takes ~3.5 milliseconds versus the pure-Python version taking ~89 milliseconds. Numpy is the numeric processing champion, hands down:</p>

<pre class="lang-py prettyprint-override"><code>In [1]: import random
   ...: import numpy as np
   ...: from codereview237899 import sum_without_13s, array_sum_without_13s
   ...: testdata = random.choices(range(1_000), k=1_000_000)
   ...: testarray = np.array(testdata)
   ...:

In [2]: %timeit sum_without_13s(testdata)
88.7 ms ± 2.12 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

In [3]: %timeit array_sum_without_13s(testarray)
3.55 ms ± 81.7 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

In [4]: %timeit sum_without_13s_iter(testdata)
119 ms ± 13.5 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
</code></pre>

<p>The last test there is for the <code>with_preceding()</code> and generator expression variant above; it's a disappointing 35% slower.</p>
    </div>