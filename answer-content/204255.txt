<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before looking at your code, I want to give a general notice: don't use linked lists. They are almost always the wrong choice of data structure. They are useful primarily pedagogically. </p>

<p>Furthermore, I should warn you that implementing a doubly-linked list will not look like typical Rust. You can't implement a doubly-linked list in Rust without using escape hatches like <code>Rc</code>, <code>RefCell</code>, or raw pointers. These escape hatches are necessary when doing low level things like implementing a data structure, but normal Rust code avoids them as much as possible. If you want to get used to "thinking in Rust" you should pick a different exercise. </p>

<p>The first thing about your code I note is that <code>Node::add function</code>. It takes a pointer to itself twice. <code>self</code> and <code>this</code>. Having two different pointers to the same thing is unhelpful. Just drop the <code>&amp;self</code> parameter and refer to <code>this</code> consistently in the function. Then you can call the function as <code>Node::add</code>.</p>

<p>The second thing is that you have <code>RefCell</code>s containing <code>Rc</code>'s. However, the standard way is to have it the other way around. It should be <code>Rc&lt;RefCell&lt;?&gt;&gt;</code> not <code>RefCell&lt;Rc&lt;?&gt;&gt;</code>. You'll find that your current design does not let you modify the value of each node.</p>

<p>A third thing is the lack of mutable references. Your <code>add</code> method allows adding to your list without the list being mutable. That doesn't really make sense, your <code>add</code> method really should take a mutable reference to the list. You get away with this because of the previous point. </p>

<p>Finally, you would be better off not using recursion to add the item to the end of list. Recursion is much slower than iteration. It would make more sense to scan through the nodes looking for the end of the list in a loop than in a recursive function call.</p>
    </div>