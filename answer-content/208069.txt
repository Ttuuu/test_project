<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've taken a look into your github files and here are my thoughts:</p>

<h2>IStockProducer</h2>

<p>You might've another taste than me, but I still want to say that: Marker interfaces are useless. They don't help, they don't add any value and they just grow your hierarchy. You should remove it.  </p>

<h2>PriceUpdate</h2>

<p><strong>The constructor</strong>: <code>this.localDateTime = LocalDateTime.now()</code><br>
This may seem convenient for you, but don't make that a habit. It would be much better to give it as an argument
for the constructor. The way you've implemented it, it's impossible to test it because you've got a static dependency inside
the constructor.  </p>

<p><strong>setLocalDateTime</strong>: I didn't find a place where you're actually using this, so I guess it's made for the future. Just remove
that method and put it into the constructor. This way your PriceUpdate objects could be immutable and that's preferable, especially in a multithreading application.  </p>

<p><strong>equals</strong>: <code>if (null != obj &amp;&amp; obj instanceof PriceUpdate)</code> is equal to: <code>if (obj instanceof PriceUpdate)</code> because instaceof takes care of the null.  </p>

<p><strong>hashCode</strong>: I am not a hashCode expert, but it seems strange. If you have a good reason for it, ok. If not, you should google how the normal implementation of hashCode looks like (see effective Java book).  </p>

<p><strong>Most importantly</strong>: Remove the getter and setters of this class. Your PriceUpdate class is currently just a data container. That's
not object-oriented. Instead, your PriceUpdate should do the jobs that you're trying to do from outside, like comparing it with others.  </p>

<h2>Producer</h2>

<p><strong>Thread</strong>: Don't inherit from Thread. Instead, implement Runnable and use a thread from outside.  </p>

<p><strong>run</strong>: This is dangerous:</p>

<pre><code>try {
// ...
} catch (InterruptedException e) {
    e.printStackTrace();
}
</code></pre>

<p>This way, you get some console output and that's all. In general: If you don't know what to do with an exception, add "throws" to your method signature or wrap it in another exception like this:  </p>

<pre><code>try {
    // ...
} catch (SomeException e) {
    throw new MaybeSomeOtherException(e, "What went wrong from my current prespective.")
}
</code></pre>

<p><strong>generateUpdates</strong>: You should give your user the possibility to end your producer by using a boolean flag. That would be much better than using a for-loop.  </p>

<h2>LoadHandler</h2>

<p><strong>Static queue</strong>: This class is dangerous because it uses a single static Queue with a getter and a setter on it. Just remove the static identifier and let your LoadHandler
completely control this Queue, by removing the accessors to it.  </p>

<p><strong>receive</strong>: <code>if (null != priceUpdate)</code> is it actually possible to receive nulls in your program or would it be a bug? In the latter case, you should replace the outer
if-statement with a <code>Objects.requireNonNull(...)</code> call. If it's intended, you should think twice about it. Nulls aren't good.  </p>

<h2>RemoveOlderStcksPredicate</h2>

<p>This class should be removed. Let PriceUpdate take care of this stuff.  </p>

<h2>Schedular</h2>

<p>Same as with LoadHandler: Remove "static" from the Deque.  </p>

<h2>StockPredicate</h2>

<p>Seems like a job for one of the other classes (like the other Predicate)  </p>

<h2>General</h2>

<p><strong>final</strong>: Sometimes you're using final on your instance variables to indicate that their references won't change. This is very good. The problem is that you don't apply this rule every time and this is confusing. Stick to that rule and be consequent. My advice is to use it even in methods.  </p>

<p><strong>Line format</strong>: Personally, I dislike your line format. Sometimes you've empty lines after the method signature and before the end of the method and sometimes you have the same rule for if-statements. I would advise you to drop that rule. Examples:  </p>

<pre><code>// Instead of:
public static Predicate&lt;PriceUpdate&gt; isStockEqual(Queue&lt;PriceUpdate&gt; stocksSentToConsumerList){

    return new HashSet&lt;&gt;(stocksSentToConsumerList)::contains;

}

// this:
public static Predicate&lt;PriceUpdate&gt; isStockEqual(Queue&lt;PriceUpdate&gt; stocksSentToConsumerList){
    return new HashSet&lt;&gt;(stocksSentToConsumerList)::contains;
}
</code></pre>

<p>and:</p>

<pre><code>// instead of:
if(priceUpdateQueue.size()&lt;MAX_PRICE_UPDATES) {

// this:
if(priceUpdateQueue.size() &lt; MAX_PRICE_UPDATES) {
</code></pre>

<p>and:</p>

<pre><code>// instead of:
public class LoadHandler {

    private static final int MAX_PRICE_UPDATES = 100;

    private final Consumer consumer;

// this:
public class LoadHandler {
    private static final int MAX_PRICE_UPDATES = 100;

    private final Consumer consumer;
</code></pre>

<p>And besides, sometimes you miss some indentations on some lines. It seems unimportant but reading code by itself takes time and you don't want to annoy your readers with something that is so easy to fix.  </p>

<h2>Where is the multithreading?</h2>

<p>I am confused about your program. Normally, a consumer/producer application has multiple threads which need some synchronization. Your application has two threads: The main thread and the Producer thread. Since the main thread doesn't do anything your application is effectively single threaded. I am not sure if the exercise was meant like that.</p>
    </div>