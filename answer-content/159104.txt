<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To expand on <a href="https://codereview.stackexchange.com/a/159093/98493">jonrsharpe's excellent answer</a>, here is how you can make the function that does the actual work, printing the list comma separated with an "and" before the last item, more pythonic:</p>

<pre><code>def list_concatenation(item_list):
    # Join all items except the last one with a comma between them
    out = ", ".join(item_list[:-1])
    # Add the last element, separated by "and" and a final "."
    return "{} and {}.".format(out, item_list[-1])
</code></pre>

<p>This uses <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> to join all but the last element with commas and <a href="https://docs.python.org/3/library/string.html#format-examples" rel="nofollow noreferrer"><code>str.format</code></a> to assemble the final string.</p>

<p>I added some comments to explain the two steps, even though they are not very good comments (since they explain what the code does, instead of explaining why).</p>

<p>I could also have used <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a>:</p>

<pre><code>from itertools import islice

def list_concatenation(item_list):
    out = ", ".join(islice(item_list, -1))
    ...
</code></pre>

<p>This creates a <a href="https://stackoverflow.com/questions/1756096/understanding-generators-in-python">generator</a> of the slice, which is lower in memory. But, as @jonrsharpe pointed out in the comments, this is slightly slower, because the first thing <code>join</code> does is consuming the iterator into a list to see how much memory it needs to allocate. Have a look at <a href="https://stackoverflow.com/q/32462194/3001761">this link</a> for more information on why this is slower.</p>

<p>After seeing the proposed <code>unittests</code> in <a href="https://codereview.stackexchange.com/a/159131/98493">@TobySpeight's answer</a>, this is how you could make this function pass them all:</p>

<pre><code>def list_concatenation(item_list):
    if not item_list:
        return ""
    elif len(item_list) == 1:
        return "{}.".format(item_list[0])
    # Join all items except the last one with a comma between them
    out = ", ".join(map(str, item_list[:-1]))
    # Add the last element, separated by "and" and a final "."
    return "{} and {}.".format(out, item_list[-1])
</code></pre>

<p>It can now even take a list of something different than strings, as suggested in <a href="https://codereview.stackexchange.com/a/159146/98493">@Artichoke's answer</a>.</p>
    </div>