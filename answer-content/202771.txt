<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few comments:</p>

<p><code>var handler = Container.GetInstance&lt;IMessageHandler&lt;TMessage, TReply&gt;&gt;();</code></p>

<p>You're looking up the <code>IMessageHandler</code> inside the handler block, which means you're looking it up for every message.  I'm not that familiar with SimpleInjector, but you may want to memoize this or somehow cache the handler for a given message type.</p>

<p><code>private ITargetBlock&lt;TMessage&gt; GetHandlerBlock&lt;TMessage&gt;(Func&lt;TMessage, Task&gt; action) =&gt; new ActionBlock&lt;TMessage&gt;(action);</code></p>

<p>You're using <code>ActionBlock</code> directly, which might be fine, but message busses often use some form of queueing and FIFO processing internally.  It might be useful to have a <code>BufferBlock</code> where the messages are enqueued when posted.  <a href="https://stackoverflow.com/questions/12781181/benefits-of-using-bufferblockt-in-dataflow-networks">This StackOverflow question</a> elaborates on the advantages and appropriate use cases of <code>BufferBlock</code>.</p>

<p><code>return block.SendAsync(message);</code></p>

<p>Your <code>PostAsync</code> method returns the Task from <code>ActionBlock.SendAsync</code>.  I think this will complete when the message is processed, not when it is enqueued.  Take a look at the description of the return value on the <a href="https://msdn.microsoft.com/en-us/library/hh462770%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396" rel="nofollow noreferrer">MSDN page</a>.  Also, the result of this <code>Task</code> will be <code>true</code> or <code>false</code> based on whether the message was accepted and consumed or declined by the Target.  Is that what you wanted?  If so, I would clarify that in your documentation comments.</p>
    </div>