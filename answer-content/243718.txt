<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some suggestions to your code</p>
<h2>Every module</h2>
<p>I had quite a hard time to understand what it does.</p>
<p>Using eval can be quite dangerous so I would try to avoid it.</p>
<pre class="lang-rb prettyprint-override"><code>eval ary.inspect.split(':')[1] rescue nil
</code></pre>
<p>You used a module to monkey patch the Array class which is sensible. Another, even more safe way to monkey patch could be to use refinements.</p>
<blockquote>
<p>Refinements are designed to reduce the impact of monkey patching on other users of the monkey-patched class. Refinements provide a way to extend a class locally.</p>
</blockquote>
<p><a href="https://docs.ruby-lang.org/en/2.4.0/syntax/refinements_rdoc.html" rel="nofollow noreferrer">https://docs.ruby-lang.org/en/2.4.0/syntax/refinements_rdoc.html</a></p>
<p>The safest way of course is to not use monkey patching at all. Maybe something like <code>array.flatten.each</code> could do the trick too?</p>
<h2>CoinToss</h2>
<h3>Initialize reference</h3>
<p>Initializing the reference in your constructor looks quite complicated. Maybe it could get extracted to dedicated classes.</p>
<pre class="lang-rb prettyprint-override"><code>class Reference
  def initialize(input, allowed_characters = [])
    @input = input
    @allowed_characters = allowed_characters
  end

  def to_s
    if integer?
      IntegerReference.new(input.to_i)
    else
      StringReference.new(input, allowed_characters)
    end
  end

  private

  attr_accessor :input, :allowed_characters

  def integer?
    Integer(reference)
  rescue
    false
  end
end

class IntegerReference
  def initialize(size)
    @size = size
  end

  def to_s
    build_string
  end

  def valid?
    true
  end

  private

  attr_accessor :size

  def build_string
    "*" * size
  end
end

class StringReference
  def initialize(string, allowed_characters = [])
    @string = string
    @allowed_characters = allowed_characters
  end

  def to_s
    return string if valid?
  end

  def valid?
    string =~ /\A[#{validation_regex}]+\z/
  end

  private

  attr_accessor :string

  def validation_regex
    allowed_characters.join("*")
  end
end
</code></pre>
<h1>Use getter</h1>
<p>You already setup attribute accessors but then fail to use them. Instead of <code>@combins</code> use <code>combins</code>. This has the advantage that you can change the way <code>combins</code> is returned by changing the getter method.</p>
<h2>Return data instead of puts</h2>
<p>Return data from your methods instead of using a puts. This has several advantages likes</p>
<ul>
<li>Use the classes outside a terminal (e.g. website)</li>
<li>Easier to test</li>
</ul>
<h2>Naming</h2>
<p>There are only two hard things in computer science ... Try to use speaking names and avoid abbreviations like <code>combins</code>, <code>occrs</code>, <code>r</code>, <code>c</code>. This will help to make your program easier to read and understand.</p>
<h2>Lazy loading</h2>
<p>Instead of setting up everything in the controller, use lazy loading and memoization.</p>
<pre class="lang-rb prettyprint-override"><code>def combinations
  @combinations ||= outcomes.repeated_permutation(@iterations).to_a
end

def iterations
  @iterations ||= reference.length
end
</code></pre>
    </div>