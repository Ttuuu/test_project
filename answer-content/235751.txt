<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Before speaking about the actual algorithm, let me hint you at the official <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a> (often just called PEP 8), a set of guidelines to write idiomatic-looking Python code. A core takeaway of the read should be, that in Python <code>lower_case_with_underscores</code> is the preferred way to name variables and functions. Fortunately you don't have to remember all those rules. There is good tool support for style and also static code checking in Python. A non-exhaustive list can be found here on <a href="https://codereview.meta.stackexchange.com/a/5252/92478">this</a> post here on Code Review Meta. I personally most often use <a href="http://flake8.pycqa.org/en/latest/" rel="nofollow noreferrer">flake8</a> and <a href="http://pylint.pycqa.org/en/latest/" rel="nofollow noreferrer">pylint</a> from that list.</p>

<p>With that out of the way, let's have a look at the code. First, you don't need to have two copies of your dict. Also, the whitespace normalization inside the loop is run more often than needed, because it is calculated several times for every key. Fortunately, it's easy to solve both of those problems:</p>

<pre><code>keys = list(dict_of_all_data.keys())
authors = {key: ' '.join(key.split()) for key in keys}
</code></pre>

<p><code>keys</code> now holds all author names from the original dict, whereas <code>authors</code> holds their normalized versions. Maybe you should also consider to convert all the names to upper-/lowercase in order to make it even more robust, but you'll have to see yourself if that's worth it.</p>

<p>Looking at the <a href="https://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow noreferrer">fuzzywuzzy documentation</a> of <code>fuzzywuzzy.fuzz</code> reveals that it basically seems to be a wrapper around <a href="https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher" rel="nofollow noreferrer"><code>difflib.SequenceMatcher</code></a>. From a few quick experiments I got the impression that the following is true:</p>

<pre><code>fuzzywuzzy.fuzz(str1, str2) == fuzzywuzzy.fuzz(str2, str1)
</code></pre>

<p>With that in mind, the amount of computations can be cut down even more, by avoiding duplicate comparisons. Since you gave no special reason for using UUIDs, I skipped them in the reworked code for the moment.</p>

<pre class="lang-py prettyprint-override"><code>dict_of_all_data = {'Trevor Jacobs': None, 'Josh Francis': None, 'Marcie Lank': None, 'Marcie H. Lank': None}

keys = list(dict_of_all_data.keys())
authors = {key: ' '.join(key.split()) for key in keys}
authors_to_delete = []

for i, key1 in enumerate(keys, 1):
    author1 = authors[key1]
    for key2 in keys[i:]:   # this helps to avoid duplicate comparison
        author2 = authors[key2]
        ratio = fuzz.ratio(author1, author2)
        if ratio &gt; 85 and dict_of_all_data[key1] is None:
            dict_of_all_data[key1] = True   # likely not even necessary
            authors_to_delete.append(key2)

for delete_me in authors_to_delete:
    dict_of_all_data.pop(delete_me)

print(dict_of_all_data)
</code></pre>

<p>As a bonus, one should wrap the code into a <a href="https://www.w3schools.com/python/python_functions.asp" rel="nofollow noreferrer">function</a> to nicely separate it from the rest of the code. Whether or not you want to convert this code into a function, it would be a good idea to replace the <a href="https://stackoverflow.com/a/47902">magic value</a> <code>85</code> with a parameter/constant with a meaningful name.</p>

<p><a href="https://codereview.stackexchange.com/users/61966">Grajdeanu Alex</a> presents a similar idea in his answer, but uses <code>itertools.combinations</code> instead of doing the de-duplication manually as I suggested above.</p>
    </div>