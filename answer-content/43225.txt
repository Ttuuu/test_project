<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your test case looks relatively comprehensive in the sense that, yes, it fires off the 100 concurrent threads, but, you ask "how to make it more '<em>at the same time</em>' ?"</p>
<p>There are two aspects I can suggest:</p>
<ul>
<li>Use an <code>ExecutorService</code></li>
<li>Use a <code>CountDownLatch</code></li>
</ul>
<h2>ExecutorService</h2>
<p>One of the novelties about the ExecutorService system is the concept of the Future, and it's foundation, the Callable class. The Callable interface is similar to the Runnable, except it can return a value, and throw an exception. These are two important differences.</p>
<p>The exception thrown in a Callable is trapped, and then re-thrown when the Future's get() method is called. This means that exceptions in remote threads can be collected in the calling thread.</p>
<p>In your case, throwing the exception is the most significant.</p>
<p>Consider the following code that sets up your threads appropriately:</p>
<pre><code>@Test
public void test() throws Exception {
    ExecutorService threads = Executors.newFixedThreadPool(size);
    List&lt;Callable&lt;Boolean&gt;&gt; torun = new ArrayList&lt;&gt;(size);
    for (int i = 0; i &lt; size; i++) {
        torun.add(new Callable&lt;Integer&gt;() {
            public Boolean call() throws B2BException {
                b2b.execute(request);
                return Boolean.TRUE;
            }
        });
    }

    // all tasks executed in different threads, at 'once'.
    List&lt;Future&lt;Boolean&gt;&gt; futures = threads.invokeAll(torun);
    
    // no more need for the threadpool
    threads.shutdown();
    // check the results of the tasks...throwing the first exception, if any.
    for (Future&lt;Boolean&gt; fut : futures) {
        fut.get();
    }

    //check the threadpool is now in fact complete
    if (!threads.isShutDown()) {
        // something went wrong... our accounting is off...
    }

}
</code></pre>
<p>OK, that is a better way of setting up the threads, and gets the exceptions to be thrown inside the test thread, rather than inside the remote threads.</p>
<h2>CountDownLatch</h2>
<p>If you are concerned that the threads should all be doing things more 'at the same time', and not worrying about start up time, etc. then consider <a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CountDownLatch.html" rel="noreferrer">using a count-down latch</a>.</p>
<p>This device is set with a counter, and, when triggered, it will count down by one, and then lock, until all the counts are counted down.</p>
<p>You can use it in the above example code like:</p>
<pre><code>@Test
public void test() throws Exception {
    ExecutorService threads = Executors.newFixedThreadPool(size);
    List&lt;Callable&lt;Boolean&gt;&gt; torun = new ArrayList&lt;&gt;(size);
    final CountDownLatch countdown = new CountDownLatch(size);
    for (int i = 0; i &lt; size; i++) {
        toron.add(new Callable&lt;Integer&gt;() {
            public Boolean call() throws B2BException, InterruptedException {
                countdown.countDown();
                countdown.await();
                b2b.execute(request);
                return Boolean.TRUE;
            }
        });
    }

    // all tasks executed in different threads, at 'once'.
    List&lt;Future&lt;Boolean&gt;&gt; futures = threads.invokeAll(torun);
    
    // no more need for the threadpool
    threads.shutdown();
    // check the results of the tasks...throwing the first exception, if any.
    for (Future&lt;Boolean&gt; fut : futures) {
        fut.get();
    }

    //check the threadpool is now in fact complete
    if (!threads.isShutDown()) {
        // something went wrong... our accounting is off...
    }

}
</code></pre>
<p>The above system will set up all the threads, so they are all 'runnable', and then only when every thread is established and ready, will the locks be released.</p>
<p>You will still not get complete concurrent use, but it will/may be better having more threads start 'at once'.</p>
<h2>Other....</h2>
<p>You should consider using a custom ThreadFactory for the thread pool, like I <a href="https://codereview.stackexchange.com/a/43146/31503">suggested in this answer</a>.</p>
    </div>