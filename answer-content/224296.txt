<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Portability</strong><br>
The code uses pthread which is a <a href="https://en.wikipedia.org/wiki/POSIX" rel="nofollow noreferrer">POSIX</a> (Portable Operating System Interface) structure. If the code uses <code>POSIX</code> for one thing, it might be better to use <code>POSIX</code> for all things to remain <code>POSIX</code> compliant. This means that instead of using <code>bzero((char*)&amp;serv_add, sizeof(struct sockaddr_in));</code> to zero out the <code>serv_add</code> variable it might be better use <code>memset(&amp;serv_add, 0, sizeof(serv_add));</code>. The function <code>memset()</code> is part of the POSIX standard, the <code>bzero()</code> is not.</p>

<p>There may be other non-POSIX functions that should be changed as well.</p>

<p><strong>Redirecting Output</strong><br>
Most operating systems provide mechanisms for redirecting output and errors, it might be better to create a shell script to start this program that redirects errors to a log file that changing the value of the system variable <code>stderr</code>. One of the values of this is that the person starting this chat server can name the log file and put it in a certain location on the system. This would also simplify the first part of the code in <code>main()</code>.</p>

<p>It's also not clear what side affects there are when the variable <code>stderr</code> is over written.</p>

<p><strong>Avoid Global Variables When Possible</strong><br>
Global variables make it much harder to write, read and debug code, they can be considered a maintenance nightmare, especially when code is modularised into multiple files, it is better to pass parameters whenever possible.</p>

<p>It is possible to pass arguments to a function used when creating a thread using <code>pthread_create()</code> by passing a pointer to a struct in the 4th parameter. The code already uses this mechanism in <code>job_read()</code> but both <code>job_read()</code> and <code>job_write()</code> could receive pointers to variables which are currently global.</p>

<pre><code>struct JOB_INFO {
    int socket_ids[MAX_CONNECTIONS];
    bool endprogram;
    int open_cnncts;
    pthread_mutex_t *socketids_changingMutex;
};

int main(int argc, char* argv[])
{
    struct JOB_INFO job_info;
    job_info.endprogram = false;
    job_info.open_cnncts = 0;
    job_info.socketids_changingMutex = ...;

...

    pthread_create(&amp;writethread, NULL, job_write, &amp;job_info);


void* job_write(void* args) {
    struct JOB_INFO *job_info = (struct JOB_INFO*) args;
     ...
}
</code></pre>

<p><strong>Complexity</strong><br>
The <code>main()</code> function is overly complex, it might be better to break it up into sub-functions.</p>

<ul>
<li>Parse arguments</li>
<li>Set up for connections</li>
<li>Open connections loop</li>
</ul>

<p><strong>return over exit in main</strong><br>
There is no reason to call <code>exit()</code> in <code>main()</code>, return EXIT_FAILURE; will achieve the same result, <code>exit(int status)</code> is only necessary when trying to exit the program from sub functions.</p>
    </div>