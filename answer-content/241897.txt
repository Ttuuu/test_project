<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I tried a different approach to solve the problem based on the test of the question and obtaining the same output using what could be considered a brutal approach to the problem:
the map I'm using is like @Gilbert Le Blanc's answer a <code>Map&lt;Integer, List&lt;String&gt;&gt;</code>; you can construct the values of the map of two types:</p>

<ol>
<li>a sequence ["In", "In", ... "In", "Out", "Out", ... "Out"]</li>
<li>a sequence ["Out", "Out", ... "Out", "In", "In", ..., "In"]</li>
</ol>

<p>So if you have your method <code>findTime</code>, you can create your <code>map</code> in the following way:</p>

<pre><code>private void findTime(int[] times, String[] dirs) {
    //maxTime will be used after in the code while iterating over the map
    int maxTime = 0;

    Map&lt;Integer, List&lt;String&gt;&gt; map = new TreeMap&lt;&gt;();
    for (int i = 0; i &lt; times.length; ++i) {
        int time = times[i];
        if (time &gt; maxTime) { maxTime = time; } 
        String dir = dirs[i];
        if (map.containsKey(time)) {
            List&lt;String&gt; list = map.get(time);
            int index = list.indexOf(dir);
            if (index == -1) {
                list.add(dir);
            } else {
                list.add(index, dir);
            }
        } else {
            map.put(time, new ArrayList&lt;&gt;(Arrays.asList(dir)));
        }
    }

    //other lines of code 
}
</code></pre>

<p>So every value of the <code>map</code> will be a sequence of one of the two types  ["In", "In", ... "In", "Out", "Out", ..., "Out"] or ["Out", "Out", ... "Out", "In", "In", ..., "In"]</p>

<p>Once you created your <code>map</code> you can iterate over it obtaining your same output:</p>

<pre><code>String currentDir = "In";
for (int i = 0; i &lt;= maxTime; ++i) {
    if (map.containsKey(i)) {
        List&lt;String&gt; list = map.get(i);
        if (!list.get(0).equals(currentDir)) {
            //reverse list so all elements equals to currentDir go in the first positions
            Collections.reverse(list); 
        }
        for (String s : list) {
            System.out.println(i + " : " + s);
        }
        int size = list.size();
        currentDir = list.get(size - 1);    
    } else {
        currentDir = "In"; //&lt;-- no time, door everts back to the starting ‘in’ position
    }
</code></pre>

<p>Below the full code of the method <code>findTime</code>:</p>

<pre><code>private void findTime(int[] times, String[] dirs) {
    int maxTime = 0;
    Map&lt;Integer, List&lt;String&gt;&gt; map = new TreeMap&lt;&gt;();
    for (int i = 0; i &lt; times.length; ++i) {
        int time = times[i];
        if (time &gt; maxTime) { maxTime = time; }
        String dir = dirs[i];
        if (map.containsKey(time)) {
            List&lt;String&gt; list = map.get(time);
            int index = list.indexOf(dir);
            if (index == -1) {
                list.add(dir);
            } else {
                list.add(index, dir);
            }
        } else {
            map.put(time, new ArrayList&lt;&gt;(Arrays.asList(dir)));
        }
    }


    String currentDir = "In";

    for (int i = 0; i &lt;= maxTime; ++i) {
        if (map.containsKey(i)) {
            List&lt;String&gt; list = map.get(i);
            if (!list.get(0).equals(currentDir)) {
                Collections.reverse(list);
            }
            for (String s : list) {
                System.out.println(i + " : " + s);
            }
            int size = list.size();
            currentDir = list.get(size - 1);                
        } else {
            currentDir = "In";
        }
    }   
}
</code></pre>
    </div>