<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd say your solution works well, but if you wanted to do it quicker, you could write a custom comparator and complete the entire task with one sort:</p>

<pre><code>Collections.sort(list, (o1, o2) -&gt; 
    o1%2 == o2 % 2 ? 
    (o2*(2*(o1%2)-1)) - (o1*(2*(o2%2)-1)) 
    : (o2%2) - (o1%2)
);
</code></pre>

<p>The comparator checks if both numbers are either equal or odd, and sorts odd numbers in reverse. If one number is odd and one is even, the odd one is counted as being smaller. Works like a charm.</p>

<p>Edit:</p>

<p>After some downvotes, I decided to refactor the code into something more readable:</p>

<pre><code>public static int compareElements(Integer o1, Integer o2) {
    if ((o1 % 2) != (o2 % 2)) { // one even, one odd
        if (o1 % 2 == 1) { // first one is odd
            return -1;
        } else { // second one is odd
            return 1;
        }
    } else if (o1 % 2 == 0) { // both even
        return o1.compareTo(o2);
    } else { // both odd
        return o2.compareTo(o1);
    }
}
</code></pre>

<p>This can then be called by:</p>

<pre><code>Collections.sort(list, (o1, o2) -&gt; compareElements(o1, o2));
</code></pre>

<p>It does the same thing as the code above. It ensures that odd elements are always to the left of even elements, that odd elements are sorted in descending order, and that even elements are sorted in ascending order.</p>
    </div>