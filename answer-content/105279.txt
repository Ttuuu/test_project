<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your function <code>count_div_digits</code> is responsible for three separate things:</p>

<ol>
<li>Iterating over a list of numbers; </li>
<li>Calculating the number of digit divisors in that number; and</li>
<li>Displaying the result.</li>
</ol>

<p>It would be better <em>"separation of concerns"</em> to split that up into two functions:</p>

<pre><code>def process(num_list):
    for number in num_list:
        print count_div_digits(number)

def count_div_digits(number):
    ...
</code></pre>

<p>i.e. moving tasks 1. and 3. into a separate function. </p>

<p>This allows <code>count_div_digits</code> to focus on the one thing it needs to do: count and return the number of digits in a number that are divisors of that number. This also makes testing much easier, as we can now e.g. <code>assert count_div_digits(24) == 2</code> without having to try to access what's getting <code>print</code>ed.</p>

<p>Note also that I've used a more descriptive variable name than <code>l</code>!</p>

<hr>

<p>Python has a <a href="http://www.python.org/dev/peps/pep-0008/" rel="nofollow">style guide</a> that you should follow - removing the unnecessary parentheses and adding the appropriate whitespace gives the code more <em>"room to breathe"</em>:</p>

<pre><code>def count_div_digits(number):
    count = 0
    digits = str(number)
    for digit in digits:
        if digit == '0':
            continue
        else:
            if number % int(digit) == 0:
                count += 1
    return count
</code></pre>

<hr>

<p>I would be inclined to add a <a href="http://www.python.org/dev/peps/pep-0257/" rel="nofollow">docstring</a> to <code>count_div_digits</code> at least. You can also use this to include simple <a href="https://docs.python.org/2/library/doctest.html" rel="nofollow">doctests</a> (I have added these so that I could refactor and ensure everything still worked):</p>

<pre><code>def count_div_digits(number):
    """Return the count of digits in the number that are its divisors.

    Examples:

        &gt;&gt;&gt; count_div_digits(24)
        2
        &gt;&gt;&gt; count_div_digits(10245)
        2

    """
    ...
</code></pre>

<hr>

<p>In terms of refactoring, note that:</p>

<ul>
<li>You never use <code>digits</code> again, so could simplify to <code>for digit in str(number):</code></li>
<li><p>Rather than: </p>

<pre><code>if digits == '0': 
    continue
else:
    ... 
</code></pre>

<p>you could flip the conditional around and skip the <code>else</code> block entirely, leaving:</p>

<pre><code>if digits != '0':
    ... 
</code></pre></li>
<li><p>You can use <a href="https://docs.python.org/2/library/functions.html#sum" rel="nofollow"><code>sum</code></a> with a <a href="https://docs.python.org/2/reference/expressions.html#generator-expressions" rel="nofollow">generator expression</a>, rather than initialising <code>count = 0</code> and having a standard <code>for</code> loop - both of the conditionals can be easily incorporated</p></li>
</ul>

<p>This leaves you with:</p>

<pre><code>def count_div_digits(number):
    """Return the count of digits in the number that are its divisors.

    ...

    """
    return sum(1 if number % int(digit) == 0 else 0
               for digit in str(number)
               if digit != '0')
</code></pre>
    </div>