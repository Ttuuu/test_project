<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Interface: consider accepting larger types than <code>int</code>.  The Linux man page says:</p>
<blockquote>
<p>Various systems use various types for the argument of <code>sbrk()</code>.  Common are <code>int</code>, <code>ssize_t</code>, <code>ptrdiff_t</code>, <code>intptr_t</code>.</p>
</blockquote>
<p><code>ptrdiff_t</code> seems like the most appropriate choice.  Of course, it doesn't really matter with this implementation, as the capacity is less than 32768, and so even a minimal <code>INT_MAX</code> allocation will fail.</p>
<hr>
<blockquote>
<pre><code>if(((char*)p_break + increment) &lt; (char*)global_mem)
</code></pre>
</blockquote>
<p>Since we have no guarantee that <code>p_break + increment</code> won't overflow, we should re-write that as:</p>
<pre><code>if (increment &lt; global_mem - (char*)p_break)
</code></pre>
<p>We know that <code>global_mem - p_break</code> can't overflow, as they are pointers into the same object.</p>
<p>Similarly,</p>
<blockquote>
<pre><code>if(((char*)p_break + increment) &gt; (char*)final_address)
</code></pre>
</blockquote>
<p>should be rewritten as</p>
<pre><code>if (increment &gt; (char*)final_address - (char*)p_break)
</code></pre>
<hr>
<p>We can avoid all the casts here by using <code>char*</code> pointers rather than <code>void*</code> - only the public interface needs the <code>void*</code>.</p>
<hr>
<p>I hope the <code>ERR</code> macro is compiled out in non-debug builds - users certainly won't want or expect output from <code>sbrk</code>.</p>
<p>The error paths should set <code>errno</code> to <code>ENOMEM</code>.</p>
<hr>
<h1>Modified code</h1>
<pre><code>#include &lt;errno.h&gt;

#define MEMORY_CAPACITY 20000

void *mov_sbrk(int increment)
{
    static char global_mem[MEMORY_CAPACITY] = {0};
    static char *p_break = global_mem;

    char *const limit = global_mem + MEMORY_CAPACITY;
    char *const original = p_break;

    if (increment &lt; global_mem - p_break  ||  increment &gt;= limit - p_break)
    {
        errno = ENOMEM;
        return (void*)-1;
    }
    p_break += increment;

    return original;
}
</code></pre>
<p>(I moved the global variables into the function to reduce their scope; that might not be appropriate if you also want to implement <code>brk()</code>, but I'm only reviewing the code I see!)</p>
    </div>