<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the already existing answers I thought it be wise to add some things they may indirectly affect your application's performance. What I mean is these suggestions don't necessarily help your performance but they can make it a lot easier to understand and debug your program a lot easier (both you and others). This can allow you to evaluate the performance much easier and faster.</p>

<p><strong>Naming</strong></p>

<p><code>happyState</code> doesn't quite tell me anything about what it's purpose is other than determining if the state is 'happy'. Something like <code>plantsDying</code> or <code>plantsHaveDied</code> is much more clear in its purpose. Which you already have a variable for so why not use it and subtract the final day before you print (or even after the loop).</p>

<p><em>Hungarian Notation</em> is quite unnecessary additionally you're only using it for two variables. <code>lstPlants</code> is just as clear in its use and purpose as <code>plants</code> (as the 's' implies a collection) your functions and classes shouldn't be so long that you need such a naming scheme.</p>

<p><strong>Intuitive</strong></p>

<p>Try to keep your code as intuitive as possible so that others (or you 6+ months later) can understand it quickly. These suggestions might just be me but I think at the least they can demonstrate what I mean.</p>

<p>The goal is to compare the plant to the one at its left. So why not start at the second and go until you've reached the end? Here is some <strong>pseudo-code</strong> to demonstrate/explain what I mean about intuitive code:</p>

<pre><code>LinkedListNode&lt;int&gt; currentNode = lstPlants.First;
LinkedListNode&lt;int&gt; lastNode = lstPlants.Last;

while (!plantsDied) // Your happyState and plantsDied variables are almost identical. happyState isn't clear so let's remove it and just use plantsDied.
{       
    plantsDied = false; 
    lastNode = lstPlants.Last; // Notice you're caching the value every time but your while-loop isn't even using it. Make use of it or get rid of it to reduce clutter.

    // Process the day
    bool dayProcessed = false; // You could remove this boolean and switch the following while-loop to a do-while-loop (bottom decision loop).
    while (!dayProcessed)
    {
        // Don't stop for the day until all nodes have been evaluated.
        dayProcessed = currentNode == lastNode;
        currentNode = currentNode.Next;

        // Compare the item to the one to its left.
        if (currentNode.Value &gt; currentNode.Previous.Value)
        {
            plantsDied = true;
            currentNode = currentNode.Next;
            lstPlants.Remove(currentNode.Previous);
        }
    }

    // Also consider intuitive naming.
    // numberOfDays -&gt; Count
    // daysPassed -&gt; Count - 1 which is what you want to print.
    // So to be accurate you'd need to moved daysPassed to the bottom of the loop but I think it makes more sense that way.
    // Another benefit of this is that you're not doing that if-statement every single "day" reducing the overall cost of your program, instead it solves it more intuitively by removing the issue before it becomes one.
    daysPassed++;
}
</code></pre>

<p><strong>OOP</strong></p>

<p>Object-Orientation when done right can help make your code quite a bit more readable and intuitive. This is effectively how I structured my code when I did the exercise myself.</p>

<p><strong>Main</strong></p>

<ul>
<li><em>Input</em> - Retrieve the input from a file or the user.</li>
<li><em>Garden</em> - Create the garden and send the signal to simulate the number of days until the plants stop dying.</li>
<li><em>Output</em> - Write the number of days passed to the user.</li>
</ul>

<p><strong>Plant</strong></p>

<ul>
<li><em>Number</em> - Not really necessary but I used it for debugging and overriding the ToString method to display it as <code>(P, N)</code> as the exercise does.</li>
<li><em>PesticideRating</em> - Long but descriptive name.</li>
</ul>

<p><strong>Garden</strong></p>

<ul>
<li><em>Plants</em> - Your data-structure representing the garden of plants. In your case the LinkedList in my case it was two queues.</li>
<li><em>Functions</em> - Actions the garden can execute. e.g. <code>ProcessDay</code> (inner-loop) and <code>GetDaysPassedUntilStable</code> (outer-loop).</li>
</ul>

<p>Sometimes it seems unnecessary when you're doing OOP in a scenario in which you could easily do it all in one function but it helps significantly when debugging, reading, or maintaining (or in this case when other's are reviewing your code :D).</p>
    </div>