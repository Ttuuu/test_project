<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Type hints</h2>

<p>You're using them. Great! As for this one:</p>

<pre><code>def __init__(self, staff: List):
</code></pre>

<p>What is <code>staff</code> a list of? If you know, specify it as <code>List[Thing]</code>. If you do not know, leave it as <code>list</code>.</p>

<h2>Parens</h2>

<p>We're not in Java/C++/etc., so this</p>

<pre><code>    while(True):
</code></pre>

<p>does not need parentheses.</p>

<h2>Order of conditions</h2>

<p>I find this:</p>

<pre><code>        if self._is_enough_coverage(staff):
            breakdown = self._get_breakdown(staff)
            result = self._verify_breakdown(breakdown, len(staff))
            if result:
                return self.get_possible_shifts(breakdown)
            else:
                staff = self._remove_extra_staff(breakdown)
        else:
            return {}
</code></pre>

<p>would be more legible as</p>

<pre><code>if not self._is_enough_coverage(staff):
    return {}

breakdown = self._get_breakdown(staff)
result = self._verify_breakdown(breakdown, len(staff))
if result:
    return self.get_possible_shifts(breakdown)

staff = self._remove_extra_staff(breakdown)
</code></pre>

<h2>Generators</h2>

<p>Some of your functions can be simplified with <code>yield</code>:</p>

<pre><code>    avail_staff = []
    for s in staff:
        if s._is_coincides(self.room):
            avail_staff.append(s)
    return avail_staff
</code></pre>

<p>can be</p>

<pre><code>for s in staff:
    if s._is_coincides(self.room):
        yield s
</code></pre>

<p>though in this case, you can condense this further:</p>

<pre><code>return (s for s in staff if s._is_coincides(self.room))
</code></pre>

<p>A grammar nitpick: "is coincides" does not make sense; use either "coincides" or "does coincide".</p>

<h2>Set simplification</h2>

<pre><code>    valid_staff = set()
    for s in breakdown.values():
        valid_staff = valid_staff.union(set(s))
</code></pre>

<p>can be</p>

<pre><code>valid_staff = set(breakdown.values())
</code></pre>

<p>This pattern appears a few times.</p>

<h2>Redundant <code>return</code></h2>

<p>At the end of <code>_find_valid_path</code>.</p>

<h2>Do not do your own time math</h2>

<p>Here.</p>

<pre><code>    hours = self.dur.seconds // 3600
</code></pre>

<p>The way that the Python built-in recommends:</p>

<pre><code>from datetime import timedelta
# ...

hours = self.dur / timedelta(hours=1)
</code></pre>

<p><code>self.dur</code> is already a <code>timedelta</code>. <code>break_length</code> should also be.</p>

<h2>No-op format</h2>

<p><code>f'{self.name}'</code> should just be <code>self.name</code>.</p>

<h2>Combined predicates</h2>

<pre><code>    if isinstance(other, self.__class__):
        return self.name == other.name
    return False
</code></pre>

<p>should be</p>

<pre><code>return isinstance(other, self.__class__) and self.name == other.name
</code></pre>

<h2>Stringy representation</h2>

<p>Why does <code>_room_assignment</code> return a dict? You already have a strong class structure. You should make a class with members <code>max_cap</code> and <code>time_open</code> and return an instance of this.</p>

<h2>Overlap algorithm</h2>

<pre><code>    composition1 = set(self.comp)
    composition2 = set(t2.comp)
    in_common = composition1 &amp; composition2
</code></pre>

<p>is a bad idea. Re-think this in terms of the start and end times of the two objects. I will leave this as an exercise to you.</p>

<h2>Stringy times</h2>

<p><code>draw_graph</code>, first of all, is missing type hints - but even without them I can tell that <code>times</code> is some sequence of strings. It should not be, nor should you be doing string manipulation on formatted times. Instead, pass them as actual time objects, and format them as appropriate.</p>
    </div>