<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There are a few things that I think are common practices in early 2018:</p>

<p>First, call <code>super</code> with <code>...args</code>, like in</p>

<pre><code>class Country extends Component {
  constructor(...args) {
    super(...args);
    // all the things
  }
}
</code></pre>

<p>Next, while I'm personally good with 4 occurrences of the same operation in this particular example, but if you detect a pattern and have a strong sensation that it will repeat in future, it's a good idea to spin it off into a separate pure function. It's usually a fight between programmer's desire to show off and that same programmer's understanding that the code has to be balanced on maintainability-universality scale.</p>

<pre><code>// OKAY
const random = this.state.countries[Math.floor(Math.random()*this.state.countries.length)];
const randomOpt1 = this.state.countries[Math.floor(Math.random()*this.state.countries.length)];
const randomOpt2 = this.state.countries[Math.floor(Math.random()*this.state.countries.length)];
const randomOpt3 = this.state.countries[Math.floor(Math.random()*this.state.countries.length)];

// BETTER?
function randomItem(items = []) {
  return items[Math.floor(Math.random() * items.length)];
}

const random = randomItem(this.state.countries);
const randomOpt1 = randomItem(this.state.countries);
const randomOpt2 = randomItem(this.state.countries);
const randomOpt3 = randomItem(this.state.countries);

// BETTER? Although it's getting obscure, beware!
const randomOptions = Array(4).fill().map(() =&gt; randomItem(this.state.countries).name)
</code></pre>

<p>Sorting that comes immediately after is unnecessary. Also, take note that <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" rel="nofollow noreferrer"><code>Array#sort</code></a> is a non-stable operation, meaning it <em>returns</em> a sorted array while also <em>mutating</em> the original array. In this particular case, it's fine, but in some cases that may cause unexpected behavior.</p>

<p><code>Math.random</code> was used to pick items from <code>this.state.countries</code>, so it's simply irrational to sort the array. The values are already random, it doesn't add value to shuffle the array one more time.</p>

<p>It's recommended to pass a function to <code>setState</code> (see <a href="https://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous" rel="nofollow noreferrer">docs</a>), so every call to <code>this.setState</code> could accept a function that returns an object. It's relevant when it's possible that your component may in some circumstances execute more than one <code>setState</code> at once.</p>

<pre><code>// OLD
this.setState({
  goodGuess: this.state.goodGuess + 1,
});

// NEW
this.setState(prevState =&gt; ({
  goodGuess: prevState.goodGuess + 1,
});
</code></pre>

<p>The <code>userIsWin</code> property of state, in my opinion, should be boolean; it's also a common practice to name boolean variables, properties and predicates beginning with "is". But it may mean 1) user didn't begin the game, 2) in current round, user won, 3) in current round, user lost. How to deal with its ternary nature then? I'd suggest using <code>undefined</code> as a value to support the first case:</p>

<pre><code>class Country extends Component {
  constructor(...args) {
    super(...args);
    this.state = {
      isWin: undefined,
    }
  }

  checkWin(e) {
    // do all the things
    this.setState(() =&gt; {
      isWin: winCountry === userGuess,
    });

    setTimeout(() =&gt; this.setState(() =&gt; ({
      isWin: undefined,
    })), 2000);
  }
}
</code></pre>

<p>The red and green background are controlled by component state. They shouldn't. The background color is simply reflection of whether the user has won. You can even notice a pattern: background color is updated if and only if <code>userIsWin</code> property is updated. It should go to render method. More than that, because you refer to CSS class name, it actually should go to CSS.</p>

<pre><code>render() {
  return (
    &lt;div className=`main ${this.state.isWin === true ? 'main-green' : this.state.isWin === false ? 'main-red' : ''}`&gt;
      all the things
    &lt;/div&gt;
  );
}
</code></pre>

<p>If you use ESLint, there's a chance it'll throw an error because <a href="https://eslint.org/docs/rules/no-nested-ternary" rel="nofollow noreferrer">"no-nested-ternary" rule is violated</a>. It's up to you how to make ESLint happy, but my first suggestion would be to split the condition:</p>

<pre><code>render() {
  return (
    &lt;div className=`main ${this.state.isWin === true &amp;&amp; 'main-green'} ${this.state.isWin === false &amp;&amp; 'main-red'}`&gt;
      all the things
    &lt;/div&gt;
  );
}
</code></pre>

<p>And the last thing. Current implementation relies on <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event" rel="nofollow noreferrer">Event</a> in <code>checkWin</code> method. A common practice in React is to instead mention the value explicitly in <code>onClick</code> prop:</p>

<pre><code>// OKAY
&lt;button className="mui-btn mui-btn--raised" value={this.state.randomOptions[0]}&gt;{this.state.randomOptions[0]}&lt;/button&gt;
&lt;button className="mui-btn mui-btn--raised" value={this.state.randomOptions[1]}&gt;{this.state.randomOptions[1]}&lt;/button&gt;
&lt;button className="mui-btn mui-btn--raised" value={this.state.randomOptions[2]}&gt;{this.state.randomOptions[2]}&lt;/button&gt;
&lt;button className="mui-btn mui-btn--raised" value={this.state.randomOptions[3]}&gt;{this.state.randomOptions[3]}&lt;/button&gt;

// BETTER
&lt;button
  className="mui-btn mui-btn--raised"
  value={this.state.randomOptions[0]}
  onClick={() =&gt; this.checkWin(this.state.randomOptions[0])}
&gt;
  {this.state.randomOptions[0]}
&lt;/button&gt;
&lt;button
  className="mui-btn mui-btn--raised"
  value={this.state.randomOptions[1]}
  onClick={() =&gt; this.checkWin(this.state.randomOptions[1])}
&gt;
  {this.state.randomOptions[1]}
&lt;/button&gt;
&lt;button
  className="mui-btn mui-btn--raised"
  value={this.state.randomOptions[2]}
  onClick={() =&gt; this.checkWin(this.state.randomOptions[2])}
&gt;
  {this.state.randomOptions[2]}
&lt;/button&gt;
&lt;button
  className="mui-btn mui-btn--raised"
  value={this.state.randomOptions[3]}
  onClick={() =&gt; this.checkWin(this.state.randomOptions[3])}
&gt;
  {this.state.randomOptions[3]}
&lt;/button&gt;

// EVEN BETTER
{this.state.randomOptions.map(name =&gt; (
  &lt;button
    key={name}
    className="mui-btn mui-btn--raised"
    value={name}
    onClick={() =&gt; this.checkWin(name)}
  &gt;
    {name}
  &lt;/button&gt;
))}
</code></pre>

<p>That way, the component is truly a reflection of state into DOM and event handlers are reflections of state into state, which is a clean React practice.</p>
    </div>