<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is only one thing I really don't like:</p>

<p>You have the same array instantiated in two different places (the <code>phone/ph</code> array). Here it's fairly simple and easy to maintain, but IRL you should never do that.</p>

<p>You have two options to resolve this:</p>

<p>1) Create the <code>phone</code> array as a class field or property.</p>

<p>2) In the newest versions of C# you can place the recursive <code>GetCombos(...)</code> as an internal/local function inside <code>LetterCombinations(...)</code> and then only have <code>string[] phone = {...}</code> defined in the outer:</p>

<pre><code>IList&lt;string&gt; LetterCombinations(...)
{
  string[] phone = { ... };

  void GetCombos(...)
  {
    ...
    char ch = phone[inputDigits[0] - '0'][charIndex];
    ...
  }  

  int len = phone[digits[0] - '0'].Length;
  ...
}
</code></pre>

<p>As shown the inner function can access the variables defines in the containing method.</p>

<hr>

<p>Other things:</p>

<pre><code>public void GetCombos(string inputDigits, string curVariation, int charIndex, ref List&lt;string&gt; resultList, int length) { ... }
</code></pre>

<p>You don't need the <code>ref</code> keyword because a list is a reference type.</p>

<hr>

<p>I don't think <code>newInput</code> will ever be empty, so you can skip this check:</p>

<pre><code>  if (newInput == "") return;
</code></pre>

<hr>

<p>I would make this test</p>

<pre><code>  if (digits == null || digits.Length == 0) return result;
</code></pre>

<p>as the first thing to do in the method:</p>

<pre><code>  if (string.IsNullOrWhiteSpace(digits)) return new List&lt;string&gt;();
</code></pre>

<p>(or maybe throw an exception?)</p>

<hr>

<p>In <code>GetCombos(...)</code> you could use the <code>yield return</code> concept instead of the resultList argument as shown below:</p>

<pre><code>public IList&lt;string&gt; LetterCombinations(string digits)
{
  if (digits == null || digits.Length == 0) return new List&lt;string&gt;();

  string[] phone = new string[] { "0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };

  List&lt;string&gt; result = new List&lt;string&gt;();

  IEnumerable&lt;string&gt; GetCombos(string inputDigits, string curVariation, int charIndex, int length)
  {
    if (curVariation.Length != length)
    {
      char ch = phone[inputDigits[0] - '0'][charIndex];
      curVariation += ch;
    }
    if (curVariation.Length == length)
    {
      yield return curVariation;
    }
    else
    {
      string newInput = inputDigits.Substring(1, inputDigits.Length - 1);
      int numChars = phone[newInput[0] - '0'].Length;

      for (int i = 0; i &lt; numChars; i++)
      {
        foreach (string variation in GetCombos(newInput, curVariation, i, length))
        {
          yield return variation;
        }
      }
    }
  }

  int len = phone[digits[0] - '0'].Length;
  for (int i = 0; i &lt; len; i++)
  {
    result.AddRange(GetCombos(digits, "", i, digits.Length));
  }

  return result;
}
</code></pre>

<p>The LeetCode challenge states that the return value of <code>LetterCombinations(...)</code> should be <code>IList&lt;string&gt;</code>, but it would be more elegant to let it return <code>IEnumerable&lt;string&gt;</code> as well and then use <code>yield return</code> insted of <code>result.AddRange(GetCombos(...))</code> (you'll have to make it in a <code>foreach ()</code> loop though).</p>

<hr>

<p>Just for the exercise I made my own version:</p>

<pre><code>IEnumerable&lt;string&gt; LetterCombinations(string digits)
{
  string[] phone = new string[] { "0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };

  int length = digits.Length;

  IEnumerable&lt;string&gt; Runner(int buttonIndex, int digitIndex)
  {
    if (buttonIndex &lt; 2 || buttonIndex &gt; 9)
      throw new ArgumentOutOfRangeException(nameof(digits));

    if (digitIndex == length)
    {
      foreach (char ch in phone[buttonIndex])
        yield return ch.ToString();
    }
    else
    {
      int newButtonIndex = digits[digitIndex] - '0';
      digitIndex++;

      foreach (char ch in phone[buttonIndex])
      {
        foreach (string tail in Runner(newButtonIndex, digitIndex))
        {
          yield return $"{ch}{tail}";
        }
      }
    }
  }

  return Runner(digits[0] - '0', 1);
}
</code></pre>

<p>Not to claim it to be better than yours - in fact it seems to be slightly slower - but just to show another approach. </p>

<p>In fact it can be done in one line using LINQ:</p>

<pre><code>IEnumerable&lt;string&gt; LetterCombinations(string digits)
{
  string[] phone = new string[] { "0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };
  return digits.Skip(1).Select(d =&gt; d - '0').Aggregate(phone[digits[0] - '0'].Select(c =&gt; c.ToString()), (acc, i) =&gt; phone[i].SelectMany(c =&gt; acc.Select(a =&gt; $"{a}{c}")));
}
</code></pre>
    </div>