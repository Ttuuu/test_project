<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>ContinuousDimensionInterval</code> constructor should validate that it has valid bounds, i.e. <code>Start</code> &lt;= <code>End</code> (and if they are equal, at least one of them should be inclusive).  This is more likely to be a programming or logic error than an attempt to create an empty interval (which may be something you want to more explicitly support by providing a <code>SetEmpty</code> member).</p>

<p><code>DimensionBound</code> should have some sort of comparison operations defined for it.  The full <code>IComparable</code> interface, not just <code>IEquatable</code>.  This would also make validating the <code>Start</code> and <code>End</code> bounds of <code>ContinuousDimensionInterval</code> easier.</p>

<p>As for your specific questions:</p>

<ol>
<li>Does it make sense that an interval will be unbounded (either positive or negative infinity)?  I don't see a reason to restrict them to finite bounds.</li>
<li>A <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/structs" rel="noreferrer"><code>struct</code></a> in C# is a value type, not a reference type, so it will always be copied when being passed around.  There are other restrictions as well.  Only you can decide if they are acceptable for you.  (My personal preference would be to lean towards making it a class.)</li>
<li>As I mentioned above, you should implement the full <code>IComparable</code> interface for <code>DimensionBound</code>.</li>
<li>Nope.  Small classes that do one thing are the building blocks to larger, more complicated objects.</li>
</ol>
    </div>