<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Disclaimer:</strong> The code below is (partly) untested, so there can be some rough edges that need polishing.</p>

<hr>

<h2>Style</h2>

<p>First, some style-related notes. Python has an official <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide</a>, often just called PEP8. The part most relevant to your code IMHO is <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">documentation strings</a>. In essence, you should follow the official recommendation to put your function documentation in <code>"""triple quotes"""</code> inside the function body. An example adapted from your code:</p>

<pre><code>def compare_images(key_point_image1, descriptor_image1,
                   key_point_image2, descriptor_image2):
    """
    uses Euclidean distance between common key points to judge similarity
    in FLANN (Fast Library for Approximate Neighbors) matching
    """
    ...
</code></pre>

<p>You often use an explicit list to return multiple values from a function. This is unusual and likely unnecessary. Most often there is no explicit type when returning multiple values, e.g.</p>

<pre><code>def swap(a, b):
    return b, a
</code></pre>

<p>Under the hood, Python returns a tuple from the function as can be seen if looking at <code>type(swap(1, 2))</code> which will happily print <code>tuple</code> in an interactive Python interpreter.</p>

<h2>Avoid global variables</h2>

<p>You should try avoid global variables whenever possible. And in your case the global variable is absolutely not necessary. We will cover that in a second.</p>

<h2><code>read_data</code></h2>

<p><code>read_data</code> is written wasteful. You always read the full file just to get a single line. The usual approach would be to read the file line by line and then process it accordingly. Or read the file as a whole and process its contents line by line. This would also allow you to get rid of <code>line_count</code> to keep track of which line you need to look at next. The name of the file to read should probably also be a parameter and not hardcoded. The new version of <code>read_data</code> might look like:</p>

<pre><code>def read_data(input_file):
    """read from CSV file"""
    with open(input_file) as input_data:
        csv_reader = csv.reader(input_data, delimiter=',')
        return [row for row in csv_reader]
</code></pre>

<p>This implementation uses a list comprehension to read all lines of the csv file into memory. With this, <code>count_images()</code> could simply be replaced by </p>

<pre><code>images_list = read_data(...)
total_images_to_compare = len(images_list)
</code></pre>

<p>You could also use a <a href="https://www.python.org/dev/peps/pep-0289/" rel="nofollow noreferrer">generator expression</a> which is basically a list comprehension, but not all the elements have to be kept in memory at once. Note that with a generator expression the above would not work because <code>len(...)</code> is not defined for generator expressions.</p>

<p>Either version could be used as follows in the main part of the script:</p>

<pre><code>for image_names in images_list:
    # read original image and image to compare into memory
    images = read_images(image_names[0], image_names[1])

    ...
</code></pre>

<h2><code>check_identical</code></h2>

<p>Next up on the list is <code>check_identical</code>. IMHO the implementation here is also a lot more complicated than it has to be. numpy can greatly help to simplifiy the code here:</p>

<pre><code>def check_identical(original_image, compared_image):
    """preliminary check of RGB values are same"""
    if original_image.shape == compared_image.shape:
        # if images are the same shape and size - could be identical
        return np.count_nonzero(original_image - compared_image) == 0

    return False
</code></pre>

<p>In its core, the function still does what you did, but for the whole image instead of separately for each color channel. The major difference here is that <code>start_time</code> and <code>image_names</code> have vanished from the parameter list, since there is reason why <code>check_indentical</code> should have to care about writing anything to an output file.</p>

<h2>tuple unpacking</h2>

<p>There are several parts in your code where you do <code>foobar(images[0], images[1])</code>. If <code>images</code> has the same number of elements as expected by <code>foobar(...)</code>, you can simply to <code>foobar(*images)</code>. This is called <a href="https://stackoverflow.com/q/2238355/5682996">tuple unpacking</a>, but also works for other sequences like <code>list</code>s.</p>

<p>Also, sometimes its more understandable to assign multiple return values to named variables to better see what gets passed around, e.g.</p>

<pre><code>correct_matches, total_matches = filter_results(matches)

score = generate_similarity_score(correct_matches, total_matches)
</code></pre>

<p>Sidenote: it would be also possible to do:</p>

<pre><code>score = generate_similarity_score(*filter_results(matches))
</code></pre>

<h2>Hard-coded values</h2>

<p>There are also quite a lot of hard-coded values in your code. Some examples:</p>

<pre><code>'input_test_data.csv'
'result_data.csv'
index_params = dict(algorithm=0, trees=5)
matches = flann.knnMatch(..., k=2)
ratio = 0.6 # approximated through trial and error
</code></pre>

<p>IMHO, they all should be function parameters that can be changed without touching the actual code. You can also assign them default values that match their current ones, so nothing in your program has to be changed. At the current state if you ever want to change some of these values, you would have to jump back to where the function is implemented and change it there directly. Though that might sound feasible for a few values, the trouble really starts if you ever get the idea to try several values in a single run (maybe in an effort to optimize a parameter).</p>

<h2>The <code>main</code> function</h2>

<p>Although your code boldly states <code># Main Function</code> at the end, there is not an actual <code>main</code> function to be found here. But there definitely should be one! And since we are at it, it's also good practice to make sure the <code>main</code> function of the script is only called if the file is actually used as a script, and not imported into some other code. Enter the <a href="https://docs.python.org/3/library/__main__.html#module-__main__" rel="nofollow noreferrer">top-level script environment</a>!</p>

<pre><code># ... all the import and other functions here ...

def main():
    """Read a list of image pairs from disk and check their similarity"""
    ...

if __name__ == "__main__":
    main()
</code></pre>

<p>See <a href="https://stackoverflow.com/a/419185/5682996">this SO post</a> for an extended explanation about <code>__name__</code>.</p>
    </div>