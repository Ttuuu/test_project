<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Encouraging ineffective/wrong usage</h2>

<p>May be for your usage case it is important, but casts are usually an indication that something could be improved or fixed. <code>static_cast</code>s are usually implicit. <code>dynamic_cast</code>s are somewhat arguable, but there should be some better solution, albeit harder to find. <code>const_cast</code>s are outright wrong (there is a case when non-const member function calls const version and then <code>const_cast</code>s the constness away). <code>reinterpret_cast</code>s are usually done in a more explicit manner. Having them hidden somewhere is asking for trouble.</p>

<h2>decltype(auto)</h2>

<p>I argued with @Quuxplusone about the feature. I argued that it is safe to use in general. I was wrong. The feature requires a great deal of care to be used correctly. This case is borderline dangerous. <em>Never</em> use <code>decltype(auto)</code> where value needs to be returned. Don't use it unless reference is expected and the referenceness needs to be preserved.</p>

<h2>Accept by forwarding reference</h2>

<p>Some people also call it generalized reference. It is particularly applicable to <code>ActionT</code>. IIRC the new wording says that the temporaries do not need to fully "materialize" if they will not outlive the scope. Transform function could take input array by forwarding reference too, as not all actions might operate on const array elements.</p>

<h2>Inheriting constructors</h2>

<p>It would be better to use "using declarations" (thanks to @BenSteffan) to inherit constructors and duplicate them as part of <code>Array</code>.</p>

<h2>Curiously recurring templates</h2>

<p>In my opinion, rather than adding every possible utility member function, one should write <code>x_getter&lt;T&gt;</code>, which SFINAE's correctly based on <code>T</code>. That will reduce the interface bloat greatly and allows people to choose.</p>

<p>Here is an example of <code>x_getter</code> I mentioned in the comments on a stub class:</p>

<pre><code>#include &lt;array&gt;
#include &lt;iostream&gt;

template &lt;typename T&gt;
struct x_getter
{
    friend T;

    double x() const
    {
        return (*static_cast&lt;const T*&gt;(this))[0];
    }

    void x(double new_x)
    {
        (*static_cast&lt;T*&gt;(this))[0] = new_x;
    }

private:
    x_getter() = default; //prevents accidental creation
};

struct coordinates : std::array&lt;double, 3&gt;, x_getter&lt;coordinates&gt;
{
    using std::array&lt;double, 3&gt;::array;
};


int main()
{
    coordinates origin{};
    std::cout &lt;&lt; origin.x();
    origin.x(12.7);
    std::cout &lt;&lt; ' ' &lt;&lt; origin.x() &lt;&lt; '\n';
}
</code></pre>

<p><a href="https://wandbox.org/permlink/kSoNYzYW3sftNOB9" rel="noreferrer">Demo</a>.</p>

<p>It actually took me a trip to stackoverflow to get it to work, but now I understand why it works. <code>static_cast</code>  is the right cast, because it will cast downwards the inheritance tree, and the only child that can hold the getter is <code>T</code> itself, thus no <code>dynamic_cast</code> is needed. It would be great though to smoothen out the ugly casts. I believe it also has a disadvantage in aggregates, but I believe it is not applicable in this case.</p>

<p>Now you can write several of these facades, and let users choose which ones they want. This will make mixing and matching easier for users. Also, <code>[[no_unique_address]]</code> in C++20 will make it as efficient as hand written code (currently they take up a little bit of space inside of the object, in C++20 empty base optimization will hopefully be performed using the tags).</p>

<h2>Naming convention</h2>

<p>The convention is rather unusual, and more C# style. Also, names could follow more standard library style to be grasped immediately. For example, <code>TransformArray</code> could be renamed to <code>transform_construct</code>, and be placed into <code>utils</code> namespace.</p>

<h2>Tuple utilities</h2>

<p><code>std::array</code> is considered to be tuple by standard library. All of the helpers for <code>std::tuple</code> work the same way for <code>std::array</code> in terms of template metaprogramming. Thus the utilities are not too useful.</p>
    </div>