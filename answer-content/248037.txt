<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Use named constants consistently</h1>
<p>You defined <code>grid_width</code> and <code>grid_height</code>, very good, but unfortunately you are not using it consistently. In <code>grid_new()</code> for example, the first line can be replaced with:</p>
<pre><code>if ((grid_width % group_width != 0) || (grid_height % group_height != 0))
</code></pre>
<p>Also, it is customary to have global constants such as these written in ALL CAPS, so it is easier to distinguish from variables.</p>
<h1>Make use of <code>memset()</code></h1>
<p>You have written loops in <code>grid_clear()</code> and <code>grid_fill()</code>, but you can easily do this task with <a href="https://en.cppreference.com/w/c/string/byte/memset" rel="nofollow noreferrer"><code>memset()</code></a>, which is more likely to be optimized. For sure, <code>grid_clear()</code> can be rewritten to do <code>memset(g-&gt;buffer, 0, g-&gt;buffer_size * sizeof(*g-&gt;buffer))</code>. If <code>g-&gt;buffer</code> was a <code>uint8_t *</code>, then you can also use <code>memset()</code> inside <code>grid_fill()</code>.</p>
<h1>Use <code>uint8_t</code> for the grid</h1>
<p>You are only using 8 bits for each character in the grid, so you can store it in an <code>uint8_t</code> instead of an <code>int</code>. This reduces memory usage of the grid by a factor 4, and also allows <code>memset()</code> to be used in <code>grid_fill()</code>.</p>
<h1>Consider hardcoding the lookup table</h1>
<p>You might think, what blasfemy is this?! Everyone knows you should avoid hardcoding things! But in this case, the Unicode Braille characters are set in stone, and you are wasting a lot of code to generate the characters, and some CPU cycles everytime you start your program, when you can just write:</p>
<pre><code>wchar_t lookup_table[256] = L"⠁⠂⠃⠄⠅⠆⠇⡀⡁⡂⡃⡄⡅⡆⡇"
                            L"⠈⠉⠊⠋⠌⠍⠎⠏...      "
                              ...
                            L"              ...⣿";
</code></pre>
<h1>Consider using ncursesw</h1>
<p>Instead of having to convert from <code>wchar_t</code> to a UTF-8 string yourself, you can use the wide version of ncurses that allows you to print <code>wchar_t</code> strings directly. Since ncurses version 6, this is included by default, and you to print wide strings you can use <a href="https://linux.die.net/man/3/mvaddwstr" rel="nofollow noreferrer"><code>mvaddwstr()</code></a> instead of <code>mvprintw()</code>.</p>
<h1>Consider not caching the grid yourself</h1>
<p>A big feature of ncurses is that it caches what is on screen, and will only send the necessary characters and control codes to the terminal to update what has really been changed. You are doing the same yourself, thus duplicating what ncurses is doing.</p>
<p>I see two ways to get rid of this inefficiency. First, you can do away with your own buffers altogether, and just write directly to the screen with curses functions. Of course, if you need to update a single dot in a Braille character, you need to know what Braille pattern is already on screen. You can read the contents of the screen back with commands like <a href="https://linux.die.net/man/3/mvin_wch" rel="nofollow noreferrer"><code>mvin_wch()</code></a>. The drawback is that reading back individual characters might result in lots of function calls, and you have to decode the Braille character back into a bitmask.</p>
<p>Another option is to keep a single buffer, and just give the whole buffer to ncurses every refresh. If you think that is inefficient, consider that you yourself were copying the whole buffer to the cached buffer every refresh. If you go this way though, you probably want to have the original buffer for easy manipulation of individual dots, and a second buffer of type <code>wchar_t *</code> that you update in parallel, and that you can send off to ncurses to print in one go. Note, there is also a <a href="https://en.cppreference.com/w/c/string/wide/wmemset" rel="nofollow noreferrer"><code>wmemset()</code></a> which might be helpful here.</p>
<p>I would suggest going for the second option. You should start benchmarking your code so you will be able to measure its performance objectively.</p>
    </div>