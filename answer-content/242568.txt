<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can use recursive type class to parse arbitrarily nested axes. </p>

<pre><code>instance Read a =&gt; Read (Axis a) where
  readsPrec n str = do
    (a, str) &lt;- readsPrec n str
    (b, str) &lt;- readsPrec n str
    (c, str) &lt;- readsPrec n str
    return (Axis a b c, str)
</code></pre>

<p>Now you can</p>

<pre><code>read $ unwords $ map show [1..3^2] :: Axis (Axis Int)
read $ unwords $ map show [1..3^3] :: Axis (Axis (Axis Int))
read $ unwords $ map show [1..3^4] :: Axis (Axis (Axis (Axis Int)))
...
</code></pre>

<hr>

<p>It is handy to use <a href="https://wiki.haskell.org/GHC/Type_families#An_associated_type_synonym_example" rel="nofollow noreferrer">associated type synonyms</a> to implement <code>axify</code>:</p>

<pre><code>{-# LANGUAGE TypeFamilies #-}

class Axify a where
  type Res a
  axify :: a -&gt; Res a

instance Axify Int where
  type Res Int = Int
  axify a = a

instance Axify a =&gt; Axify [a] where
  type Res [a] = Axis (Res a)
  axify [a,b,c] = Axis (axify a) (axify b) (axify c)

-- axify [1,2,3::Int] :: Axis Int
-- axify [[1,2,3], [4,5,6], [7,8,9::Int]] :: Axis (Axis Int)
</code></pre>

<p>Actually this is the same approach as in your own answer (with <code>MultiParamClassTypes</code>) but a bit more robust as associated types establish one-to-one correspondence between <code>[a]</code> and <code>Axis a</code>.</p>

<p>This allows type checker to infer more types. E.g.</p>

<pre><code>axify [1,2,3::Int]
</code></pre>

<p>typechecks with associated types but requires additional type signature with multiparam type class.</p>
    </div>