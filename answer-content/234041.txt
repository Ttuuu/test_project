<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's take a look line per line.</p>

<pre><code>var payloadArray: List&lt;Byte&gt;? = this.readBytes().toList()
</code></pre>

<p>That's a really terrible idea. Generally you stream files using <code>FileInputStream</code>, or you can <em>map</em> files using the NIO (new I/O) interface of Java. Then you can read the bytes piecemeal.</p>

<pre><code>val salt = payloadArray.sliceArray(0 until 32)
</code></pre>

<p>* Salts only have to be 128 bits maximum, 256 bits is complete overkill. You can slice or cut bytes from arrays just as well, or from a stream of course. No need for the salt and <code>realData</code> as <code>List</code>.</p>

<pre><code>val cipher = Cipher.getInstance("AES/CFB/PKCS7Padding")
</code></pre>

<p>* CFB mode with PKCS#7 doesn't make any sense; CFB is a streaming mode of operation, so padding the plaintext makes no sense whatsoever. Try <code>NoPadding</code> for future encryptions.</p>

<pre><code>val secretKey: SecretKeySpec? = SecretKeySpec(keyBytes, "AES")
</code></pre>

<p>You expect <code>secretKey</code> to become <code>null</code>? </p>

<pre><code>return d.readLine()
</code></pre>

<p>Wait, what? Single line string of 10 MB? Somebody needs to learn how to end lines I think. Generally such large strings are not useful, think of a way to split them up. Are you sure you need it all in one go? If not, keep it on disk.</p>

<p><em>Note that it is perfectly possible to decrypt CFB ciphertext from on any position, as long as the starting position is a multiple of the block size (16 for AES) and the previous ciphertext block is known.</em></p>

<hr>

<p>The ones with the * are issues with the protocol, and those cannot be changed without re-encrypting the plaintext.</p>
    </div>