<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Even though this is a fairly short program, resist the temptation to do everything in the <code>Program</code> class of your console app. Whenever I start a new console app, the first thing I do is create a <code>Runner</code> class with an <code>Execute()</code> method and call that from the <code>Main()</code> of <code>Program</code>.</p>

<hr>

<p>Using <code>goto</code> is IMHO incredibly rare in a C#/.NET program. Make this code block a method and call it.</p>

<hr>

<p>Whenever you start copy-pasting code, it's a sign you're doing something wrong.</p>

<pre><code>switch (responseIndex)
{
    case 1:
        Console.WriteLine("Great!");
        Console.WriteLine("Your score: " + score);
        break;
    case 2:
        Console.WriteLine("You nailed it!");
        Console.WriteLine("Your score: " + score);
        break;
    case 3:
        Console.WriteLine("You're correct!");
        Console.WriteLine("Your score: " + score);
        break;
    default:
        Console.WriteLine("Good Job " + userName + ", Keep it up!");
        Console.WriteLine("Your score: " + score);
        break;
}
</code></pre>

<p>Clearly <code>Console.WriteLine("Your score: " + score);</code> should be in a method of its own, and the other line you be as well, with its message the parameter for that method, e.g.</p>

<pre><code>private void ReportResult(string message, int score)
{
    Console.WriteLine(message);
    Console.WriteLine("Your score: " + score);
}
</code></pre>

<p>You could even write the second line as <code>Console.WriteLine("Your score: {0}", score);</code> or <code>Console.WriteLine($"Your score: {score}");</code>. While a small amount of string concatenation isn't a performance killer, newer versions of C# offer nicer and more readable ways to format strings.</p>

<hr>

<p><code>int Answer</code>: "Answer" should be camelCase.</p>

<hr>

<p>Considering that you calculate <code>int correctAnswer = num01 * num02;</code>, why then do you do <code>if (Answer == num01 * num02)</code> next? Use <code>correctAnswer</code>.</p>

<hr>

<p>Even though the current code is fairly short, I'd still move the code in the <code>if</code> and the code in the <code>else</code> block to a method of their own (e.g. "ReportSuccess" and "ReportFailure"). This will make your code easier to follow and splits up the logic into smaller chunks.</p>
    </div>