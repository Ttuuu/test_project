<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a general rule, when you are trying to define a recursive function that operates on a data type like this:</p>

<pre><code>data Expr = Plus Expr Expr | Value Int
</code></pre>

<p>you want to <em>first</em> try to define your function using one pattern per constructor:  one pattern for <code>Plus</code> and another pattern for <code>Value</code>.  For some functions, you may find that this isn't sufficient, and then you will have to add additional patterns, but you'll be surprised how many useful functions can be written using this "one pattern per constructor" rule.</p>

<p>So, you want a pattern that can match all <code>Value x</code> expressions, and you already have that:</p>

<pre><code>evaluate (Value a) = a
</code></pre>

<p>If you want a second pattern that can match <strong>ALL</strong> <code>Plus e1 e2</code> expressions, then you can't write something like this:</p>

<pre><code>evaluate (Plus (Value a) (Value b)) = ...
</code></pre>

<p>because that will only match <em>some</em> <code>Plus</code> expressions (namely those that are adding two <code>Value</code> expressions).  If you want to match them <em>all</em>, you need to start with:</p>

<pre><code>evaluate (Plus left right) = ...
</code></pre>

<p>Now, on the right-hand side, <code>left</code> and <code>right</code> are expressions, and the only thing we can do with them is evaluate them to integers, and then it becomes pretty obvious that you want to write:</p>

<pre><code>evaluate (Plus left right) = evaluate left + evaluate right
</code></pre>

<p>You basically already figured this out, but you did it inside special cases like the pattern <code>Plus (Plus left right) (Value b)</code> instead of realizing that you could do it in the general <code>Plus left right</code> case.</p>

<p>And that's it!  The full definition is:</p>

<pre><code>evaluate :: Expr -&gt; Int
evaluate (Value a) = a
evaluate (Plus left right) = evaluate left + evaluate right
</code></pre>

<p>and you'll find it works perfectly on all expressions.  For more complicated expressions, the recursion automatically breaks it down:</p>

<pre><code>evaluate (Plus (Value 1) (Plus (Value 2) (Value 3))
-- apply second pattern w/ left=(Value 1) and right=(Plus (Value 2) (Value 3))
=== evaluate (Value 1) + evaluate (Plus (Value 2) (Value 3))
-- apply first pattern w/ a=1
=== 1 + evaluate (Plus (Value 2) (Value 3))
-- apply second pattern w/ left=(Value 2) and right=(Value 3)
=== 1 + (evaluate (Value 2) + evaluate (Value 3))
-- apply first pattern w/ a=2
=== 1 + (2 + evaluate (Value 3))
-- apply first pattern w/ a=3
=== 1 + (2 + 3)
=== 6
</code></pre>
    </div>