<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>that's me who did the review of your previous version.</p>

<p>I'd still stick to what I proposed in the other answer. So here I will just add a few additions and clarifications. Then I will mostly try to focus on where you break SOLID and maybe other OOP principles in your current version. I will also include a few references to iSR5's answer.</p>

<p>I realized the <code>IEater</code> interface is never used alone, so the <code>Eat</code> method could belong to IAnimal directly.</p>

<p>Also maybe the IDictionary would better be hidden within an implementation of a new interface</p>

<pre><code>interface IEatingPreferences
{
  public bool CanEat(IDinner eater, IDinner dinner);
}
</code></pre>

<p>Now you see we have basically a comparator interface for two dinners, which maybe tells us that instead of <code>IAnimal</code> extending <code>IDinner</code>, it could just have a property of <code>IDinner</code> type and the <code>IDinner</code> interface itself would deserve a better name like <code>IAnimalAppearance</code> (assuming animals will decide their prey on its apprearance is a good desription of how its supposed to be working here).</p>

<p>Notice that IEatingPreferences plays the role of a strategy of the strategy pattern (in my implementation where it is held by the animal objects).</p>

<p>As I already mentioned (in previous post comments) and opposed to your and iSR5's solutions, it allows for animals to behave in individual manner (not every small lion has to behave like every other small lion). And I believe for this reason both your and iSR5's solution break encapsulation principle in this respect. You expose data classes to cover the behaviour from outside. You should encapsulate the data with the behaviour together. Now if you do that you are free to extend the animls for example that they can have mood which would actually influence their eating preferences at certain mood.</p>

<p>Further the abstract factory was there just to simplify the common cases, while nothing is preventing you from extending the factory (as oposed to modifying it) to create those individually behaved animals that dont behave like others of their kind. Or you could implement a builder for the animals. Whatever will ease the creating of the animals...</p>

<h2>Errors in Enums</h2>

<p>I am not sure why you added <code>AnimalKind.Error</code> and <code>Size.Error</code>. Nor I see them being referenced from anywhere nor I see reason for them to part of the respective enums.</p>

<p>I would actually recommend to go the other way. Instead promote the enums to classes with comparision operators etc. (again this would strenghten the encapsulation)</p>

<h2>Dependency Inversion Principle (The "D" in SOLID)</h2>

<p><code>EatingPreferencesService</code> violates this principle because it calls static method <code>EatingPreferencesFactory.GetEatingPreferences</code>. The factory should be injected to the service from outside.</p>

<h2>Single Responsibility Principle (The "S" in SOLID)</h2>

<p>The <code>AnimalPark</code> class now break this principle because it manipulates list of animals and also allows to build it in the first place. We already have interface we can use (and that's something I would also argue against in iSR5's solution, why reinventing what already exists?): <code>ICollection&lt;IAnimal&gt;</code>.</p>

<h2>Interface Segregation Principle (The "I" in SOLID)</h2>

<p>On few places you depend on <code>Animal</code> but never use <code>IsDead</code> or <code>Eat</code>. This breaks the above principle. Like why is EatingPreferencesFactory allowed to kill the animals?</p>

<p>For this reason, in my solution, I have separated <code>IDinner</code>/<code>IAnimalAppearance</code> from <code>IAnimal</code>. In my solution there are places that need just the appearance and there are places which need the entire animal. As I mentioned above, doing this through composition leaves us with a more flexible base (we are now free to extend base animal to privde those individuum overrides, while allowed same crazyness for all kinds of animals)</p>

<p>Ie.</p>

<pre><code>class CrazyAnimal : Animal
{
  // ...
}

// yet still we can have
new CrazyAnimal(AnimalKind.Lion)
new CrazyAnimal(AnimalKind.Hyena)

// without implementing CrazyLion and CrazyHyena. And eventually CrazyElephant when elepthants become a thing.

// although maybe we have even an extra level of freedom to do this:
new Animal(AnimalKind.Lion, new CrazyEatingPreferences(/*...*/));
// if eating preferences are the crazy thing about that animal indiviuum.
</code></pre>

<p>In relation to this, it buffles me why you still have Lion and Hyena classes extending Animal if there is nothing abstract about the Animal except (and idk why) the constructor. Smells like SRP or Liskov Substition principle violation...</p>
    </div>