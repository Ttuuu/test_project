<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your solution is <code>O(n*n)</code>, due to the usage of the nested <code>for</code> loop.  For just 6 elements, this may not be such a big deal, but if the number of elements are in the hundreds or thousands, the comments in the main section explains why this solution is not really viable.</p>

<p>Thus a better (probably not the best, but somewhat better) should be worked out.  This requires some manipulation of one of the arrays.  Here is a proposed solution:</p>

<p>The "goal amount" is the integer you want to find the pair of numbers closest to it (in your case, this value is <code>24</code>).</p>

<ol>
<li>Sort the second array of numbers in ascending order</li>
<li>Keep a "global minimum" value, which holds the current smallest distance between the goal amount and the pair of numbers you're testing.</li>
<li>Iterate through the first array.  For each iteration, subtract the current value in the first array from the goal amount (call this value the "search value").  For example, <code>search_value = 24 - arr01[i]</code> if <code>i</code> is the index of the current item.</li>
<li>Given that the items in the second array are now sorted, using a binary search (i.e. <code>std::lower_bound</code>) can be used to find the item in the second array closest to the search value found in step 3. </li>
<li>If the value found (call this the "found_value") using <code>std::lower_bound</code> added to <code>arr01[i]</code>, less the goal amount, is smaller than the global minimum distance, then the new minimum distance is the pair <code>[arr01[i], found_value]</code>.</li>
</ol>

<p>The runtime of doing this, given <code>n</code> elements is:</p>

<ol>
<li><code>O(n * log(n))</code> -- for the initial sort (use <code>std::sort</code>), plus</li>
<li><code>O(n * log(n))</code> -- for the linear traversal through the first array and for the binary search.</li>
</ol>

<p>So if you add all this up, the algorithmic complexity should be <code>O(n * log(n))</code> (someone correct me if this analysis is not correct).</p>

<p>Thus, when given a large amount of input, the runtime of doing things this way will outweigh using an <code>O(n*n)</code> solution (which is the one you came up with -- read my comments about the nested <code>for</code> loop).  </p>

<p>For example, a thousand numbers would be <code>1000 * 10 == 10 000</code> using the logarithmic runtime, as opposed to <code>1000 * 1000 == 1 000 000</code> iterations using the <code>O(n*n)</code> runtime.</p>

<hr>

<p>Here is a probable solution (disclosure: not tested 100%), that captures the steps above:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;vector&gt;
#include &lt;utility&gt;
#include &lt;climits&gt;
#include &lt;iostream&gt;
#include &lt;cmath&gt;
#include &lt;cstdlib&gt;

int arr01[] = { 5,-8,6,7,-10,9 };
int arr02[] = { 1,3,10,20,-5,6 };

int main()
{
    int goal = 24;  // Our goal amount

    // The final pair of numbers 
    std::pair&lt;int, int&gt; answer;

    // 1. Sort the second array
    std::sort(std::begin(arr02), std::end(arr02));

    // 2. Initialize the minimum distance found so far 
    int min_distance = std::numeric_limits&lt;int&gt;::max();

    // 3. Iterate through the first array 
    for (size_t i = 0; i &lt; std::size(arr01); ++i)
    {
        // This is the search value
        int search_value = goal - arr01[i];

        // 4. Get value in our sorted list that is closest to the search value
        int *pClosest = std::lower_bound(std::begin(arr02), std::end(arr02), search_value);

        // 5. check if the distance is smaller than our current minimum 
        int test_distance = abs(arr01[i] + *pClosest - goal);
        if ( test_distance &lt; min_distance)
        {
            // Yes, so our new answer is the pair we just tested,
            // and we set the minimum distance to the smaller distance
            answer = std::make_pair(arr01[i], *pClosest);
            min_distance = test_distance;
        }
    }

    // Output results 
    std::cout &lt;&lt; answer.first &lt;&lt; " " &lt;&lt; answer.second;
}
</code></pre>

<p>Output:</p>

<pre><code>5 20
</code></pre>
    </div>