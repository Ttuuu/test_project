<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're not making good use of regular expressions. A single regex can do the job:</p>

<pre><code>pattern := regexp.MustCompile(`([a-zA-Z]+)=`)
</code></pre>

<p>The parentheses <code>(...)</code> are the capture the interesting part for you.</p>

<p>You can use <code>result = pattern.FindAllStringSubmatch(s)</code> to match a string against the regex pattern. The return value is a <code>[][]string</code>, where in each <code>[]string</code> slice, the 1st element is the entire matched string, and the 2nd, 3rd, ... elements have the content of the capture groups. In this example we have one capture group <code>(...)</code>, so the value of the key will be in <code>item[1]</code> of each <code>[]string</code> slice.</p>

<p>Instead of a <code>map[string]string</code> map for <code>seen</code>, a <code>map[string]boolean</code> would be more efficient.</p>

<p>Putting it together:</p>

<pre><code>func GetKeys(logs []string) []string {
    var keys []string
    pattern := regexp.MustCompile(`([a-zA-Z]+)=`)

    seen := make(map[string]bool)
    for _, log := range(logs) {
        result := pattern.FindAllStringSubmatch(log, -1)
        for _, item := range result {
            key := item[1]
            if _, ok := seen[key]; !ok {
                keys = append(keys, key)
                seen[key] = true
            }
        }
    }

    return keys
}
</code></pre>

<p>If the input strings are not guaranteed to be in the right format matching the pattern, then you might want to add a guard statement inside the main for loop, for example:</p>

<pre><code>    if len(result) != 2 {
        continue
    }
</code></pre>
    </div>