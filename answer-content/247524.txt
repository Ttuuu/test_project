<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code looks really good, so I'll ask some questions on the design decisions that have been made.</p>
<pre><code>Path(__file__).parent.resolve()
</code></pre>
<p>I haven't used this before, so I may be wrong, but this looks a little fragile.</p>
<p>The Python docs for <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.parent" rel="nofollow noreferrer">pathlib</a> include a very useful note under parent</p>
<p><a href="https://i.stack.imgur.com/NHPh9.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/NHPh9.png" alt="enter image description here"></a></p>
<p>Namely, it may do something unexpected if the path is not an absolute path. From this <a href="https://stackoverflow.com/a/7116925/3503611">stack overflow answer</a>, the result returned from <code>__file__</code> may be relative, if the directory is in sys.path. In conclusion, you probably want to resolve before getting the parent, to avoid some unexpected paths.</p>
<pre><code>ROOT = Path(__file__).resolve().parent
</code></pre>
<p>Also, why set the root based on the file location, rather than <code>__main__</code> or a fixed location? Another consideration is <code>__file__</code> is not always set, do you care about the use-case of running the code in an interpreter?</p>
<hr>
<pre><code>def get_epochs(date):
    """ Get epoch dates for the start and end of the (current) day. """
    ...
</code></pre>
<p>This code all looks good. I would maybe include a note specifying that the API is inclusive of the end time, and is quantised in seconds. A change to either of these assumptions (which is unlikely) would warrant changing the code here.</p>
<hr>
<pre><code>def fetch_questions(start, end, tag, site="stackoverflow"):
    """ Fetch questions from stackoverflowAPI. """

    _params = {
        ...
    }
    requests.get(URL, params=_params).json()
</code></pre>
<p>Some very minor points</p>
<ul>
<li>The API is for stack exchange, not stack overflow.</li>
<li>You don't need the underscore in front of params. It is a local name to the function, so it doesn't need to be marked private. Keyword args can share their name with the parameter name. <code>params=params</code> works.</li>
<li>I would split up the request, and extracting result as a certain file format. If this function starts returning bad results, it will be easier to debug if the fetch and parsing of results are separated.</li>
<li>I would change the parameter <code>tag</code> to <code>tags</code> since you can pass more than one tag by delimiting with ';'. A note on how to use tag would be a good addition to the docstring.</li>
</ul>
<hr>
<pre><code>if __name__ == "__main__":
    
    readme = ROOT / "README.md"
    start, end = get_epochs(DATE)

    pandas, beautifulsoup, code_review = build_table(
        fetch_questions(start, end, tag="pandas"),
        fetch_questions(start, end, tag="beautifulsoup"),
        fetch_questions(start, end, tag="python", site="codereview")
    )
    
    readme_contents = readme.open().read()
    rewritten = replace_chunk(readme_contents, "date", DATE.strftime("%Y-%m-%d"), inline=True)
    rewritten = replace_chunk(rewritten, "pandas", pandas)
    rewritten = replace_chunk(rewritten, "bs", beautifulsoup)
    rewritten = replace_chunk(rewritten, "code_review", code_review)
    
    with open(readme, "w") as output:
        output.write(rewritten)
</code></pre>
<p>I would move this code to a function, since it will be a little easier to test (and therefore update if needed). What happens if you make a typo in a tag between <code>fetch_questions</code> and <code>replace_chunk</code>?</p>
    </div>