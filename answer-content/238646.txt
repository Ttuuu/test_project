<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Invalid access</h1>

<p>There are several occurrences of out-of-range access as <a href="https://codereview.stackexchange.com/questions/238641/an-implementation-of-levenshtein-distance-algorithm-in-modern-c#comment468015_238641">1201ProgramAlarm's comment</a> pointed out:</p>

<blockquote>
<pre><code>for (std::size_t k{ 0 }; k &lt;= size_2; ++k) costs[k] = k;
</code></pre>
  
  

<pre><code>costs[j + 1]
</code></pre>
  
  

<pre><code>return costs[size_2];
</code></pre>
</blockquote>

<p>This problem can be fixed by increasing the size of <code>costs</code> by one.</p>

<h1>Usage of the standard library</h1>

<blockquote>
<pre><code>std::vector&lt;std::size_t&gt; costs(size_2);
for (std::size_t k{ 0 }; k &lt;= size_2; ++k) costs[k] = k;
</code></pre>
</blockquote>

<p>Use <code>std::iota</code>:</p>

<pre><code>std::vector&lt;std::size_t&gt; costs(size_2 + 1);
std::iota(costs.begin(), costs.end(), std::size_t{0}); // or 0_zu; see below
</code></pre>

<blockquote>
<pre><code>auto t{ upper &lt; corner ? upper : corner };
costs[j + 1] = (costs[j] &lt; t ? costs[j] : t) + 1;
</code></pre>
</blockquote>

<p>Use <code>std::min</code>:</p>

<pre><code>costs[j + 1] = std::min({upper, corner, costs[j]}) + 1;
</code></pre>

<h1><code>auto</code></h1>

<p>When you want the type of a variable to be deduced, <code>auto</code> is handy, because you don't have to write the type or expression twice.  When you want the type of a variable to be fixed, however, <code>auto</code> becomes cumbersome â€” so feel free to write</p>

<pre><code>std::size_t i = 0;
</code></pre>

<p>An alternative is to use a user-defined literal: (there's a proposal <a href="https://wg21.link/p0330" rel="nofollow noreferrer">P0330 Literal Suffix for (signed) <code>size_t</code></a> to add builtin literals for <code>std::size_t</code>)</p>

<pre><code>namespace util_literals {
    constexpr std::size_t operator""_zu(unsigned long long number)
    {
        return static_cast&lt;std::size_t&gt;(number);
    }
}
</code></pre>

<p>So you can write:</p>

<pre><code>using namespace util_literals;
auto i = 0_zu;
</code></pre>

<p>Also, instead of</p>

<blockquote>
<pre><code>for (const auto&amp; itr_1 : string_1)
</code></pre>
</blockquote>

<p>it is more common to access characters by value.  Also, <code>itr</code> is a misleading name for characters:</p>

<pre><code>for (char c_1 : string_1)
</code></pre>

<h1>Simplification</h1>

<p>This check is redundant:</p>

<blockquote>
<pre><code>if (size_1 == 0) return size_2;
if (size_2 == 0) return size_1;
</code></pre>
</blockquote>

<p>because the algorithm works well with empty strings.</p>

<hr>

<p>Here's my version:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;cstddef&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;
#include &lt;vector&gt;

std::size_t Levenshtein_distance(std::string_view string_a, std::string_view string_b)
{
    const auto size_a = string_a.size();
    const auto size_b = string_b.size();

    std::vector&lt;std::size_t&gt; distances(size_b + 1);
    std::iota(distances.begin(), distances.end(), std::size_t{0});

    for (std::size_t i = 0; i &lt; size_a; ++i) {
        std::size_t previous_distance = 0;
        for (std::size_t j = 0; j &lt; size_b; ++j) {
            distances[j + 1] = std::min({
                std::exchange(previous_distance, distances[j + 1]) + (string_a[i] == string_b[j] ? 0 : 1),
                distances[j] + 1,
                distances[j + 1] + 1
            });
        }
    }
    return distances[size_b];
}

int main()
{
    std::string string_a;
    std::string string_b;
    while (std::cin &gt;&gt; std::quoted(string_a) &gt;&gt; std::quoted(string_b)) {
        std::cout &lt;&lt; Levenshtein_distance(string_a, string_b) &lt;&lt; '\n';
    }
}
</code></pre>

<p>Input:</p>

<pre class="lang-none prettyprint-override"><code>kitten sitting
corporate cooperation
123 ""
"" ""
</code></pre>

<p>Output:</p>

<pre class="lang-none prettyprint-override"><code>3
5
0
0
</code></pre>

<p>(<a href="https://wandbox.org/permlink/0ZValXTB8RPkFAYS" rel="nofollow noreferrer">live demo</a>)</p>
    </div>