<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your solution works fine, and it's fairly efficient. You're using loops and mutation, which are speedy, but also not terribly readable. This algorithm can be expressed more functionally in terms of recursion and mapping, which can make it somewhat more readable, though slightly less efficient.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function pairwise(list) {
  if (list.length &lt; 2) { return []; }
  var first = list[0],
      rest  = list.slice(1),
      pairs = rest.map(function (x) { return [first, x]; });
  return pairs.concat(pairwise(rest));
}

var result = pairwise(['a', 'b', 'c', 'd', 'e']);
console.log(result);
document.getElementById('output').innerHTML = JSON.stringify(result);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;pre id="output"&gt;&lt;/pre&gt;</code></pre>
</div>
</div>


<p>Additionally, if you're willing to use an external library, here's an equivalent solution using Lo-Dash. It's an identical algorithm, but it can help with readability to use a library designed for functional programming.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function pairwise(list) {
  if (list.length &lt; 2) { return []; }
  var first = _.first(list),
      rest  = _.rest(list),
      pairs = _.map(rest, function (x) { return [first, x]; });
  return _.flatten([pairs, pairwise(rest)], true);
}

var result = pairwise(['a', 'b', 'c', 'd', 'e']);
console.log(result);
document.getElementById('output').innerHTML = JSON.stringify(result);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/2.4.1/lodash.min.js"&gt;&lt;/script&gt;

&lt;pre id="output"&gt;&lt;/pre&gt;</code></pre>
</div>
</div>

    </div>