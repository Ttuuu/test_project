<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>return value unused from <code>PokerHand.compareWith()</code></h3>

<p>The return value from the function to compare the hands doesn't appear to be used:</p>

<blockquote>
<pre><code>playerOneHand.compareWith(playerTwoHand);
</code></pre>
</blockquote>

<p>So why bother returning anything from that function (besides exiting the function early)?</p>

<h3>Assignment of <code>message</code> before returning a value</h3>

<p>That function <code>PokerHand.compareWith()</code> has many cases where a string literal is assigned to <code>message</code> (with scope beyond the function) followed by a <code>return</code> statement. This seems unorganized. Why not merely return the result (I would suggest adding an additional <em>tie</em> case, for the scenario where player2 has the high card). That way, the message can be set in the click handler (or another function), so that <code>compareWith</code> isn't responsible for checking the result and setting the mesage (refer to the <a href="http://www.oodesign.com/single-responsibility-principle.html" rel="nofollow noreferrer">Single Responsibility principle</a>). That way, the messages can be set in one place (instead of repeated, as they are in both cases) - adheres to the <a href="http://deviq.com/don-t-repeat-yourself/" rel="nofollow noreferrer">Don't repeat yourself principle</a>.</p>

<p>To change this, the case <code>winHigh</code> could be added to the result set:</p>

<pre><code>const Result = {
    "winHigh": 0,
    "win": 1,
    "loss": 2,
    "tie": 3
};
</code></pre>

<p>and the messages could be stored in a mapping (i.e. an array), with the index (starting at 0) of each message corresponding to the result : </p>

<pre><code>const messages = [
  "You are the Winner! High card", //0 == "winHigh"
  "You are the Winner!",           //1 == "win"
  "You Lost, BetterLuck next Time",//2 == "loss"
  "Its a Tie !!"                   //3 == "tie"
];
</code></pre>

<p>Then take the result of calling <code>compareWith()</code> and check if that result corresponds to a key in <code>messages</code> - if so, set the message to that message; otherwise set it to the error message.</p>

<pre><code>const result = playerOneHand.compareWith(playerTwoHand);
if (result in messages) {//.hasOwnProperty(result)) {
  message = messages[result];
} else {
  message = "Error Occured Please try again";
}
</code></pre>

<p>See this in action in <a href="https://jsfiddle.net/aelliott/1uL9f6ew/3/" rel="nofollow noreferrer">this updated fiddle</a>. Instead of using an array for the messages, an object (i.e. a Plain-old JavaScript object - POJO) could be used, with the key of each message corresponding to the result:</p>

<pre><code>const messages2 = {
    0: "You are the Winner! High card", //0 == "winHigh"
    1: "You are the Winner!",           //1 == "win"
    2: "You Lost, BetterLuck next Time",//2 == "loss"
    3: "Its a Tie !!"                   //3 == "tie"
};
</code></pre>

<p>And then check for the key using <code>Object.hasOwnProperty()</code>:</p>

<pre><code>const result = playerOneHand.compareWith(playerTwoHand);
if (messages.hasOwnProperty(result)) {
    message = messages[result];
}
</code></pre>

<h3>Cache DOM references</h3>

<p>There are lines like below, which occur during the click handler:</p>

<pre><code>let playerOneResult = document.getElementById('playerResult');
let playerTwoResult = document.getElementById('oppoResult');   
</code></pre>

<p>Those assignments can occur outside the click handler (optionally in a DOM-ready callback) - and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer">const</a> can be used since the value shouldn't change within the lifetime of the page.</p>

<h3>Use <code>filter()</code> for pairs</h3>

<p>Instead of <code>map()</code> with a conditional:</p>

<blockquote>
<pre><code>let pairs = [];
    denoms.map((ele, i) =&gt; {
        if (denoms[i] === denoms[i + 1]) {
            pairs.push(denoms[i]);
        }
    });
</code></pre>
</blockquote>

<p>you can use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" rel="nofollow noreferrer">Array.filter()</a> for the pairs:</p>

<pre><code>const pairs = denoms.filter((ele, i) =&gt; denoms[i] === denoms[i + 1]);
</code></pre>

<h3>Classes</h3>

<p>Since you are using keywords like <code>let</code> and arrow functions it appears you are coding for EcmaScript 2015, and this could use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" rel="nofollow noreferrer">classes</a>. While only really syntactic sugar over the prototype syntax, they can streamline some things...</p>
    </div>