<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>(Sort of) Unnecessary OOP</h1>

<p>A lot of things like LeetCode will require that the solution is in a <code>class</code> for likely submission reasons, but if we concern ourselves with <em>only</em> the task at hand, I would recommend you get rid of the class and just use functions for this. (And if get rid of the unnecessary class, you'll shorten the code, although, I wouldn't encourage you to be preoccupied with shortening your code.)</p>

<p>Also, if you had to keep the class (for whatever reason), observe:</p>

<pre><code>def __init__(self, nums, m):
    self.nums = nums
    self.m = m
</code></pre>

<p>When you pass parameters like this, you can reuse them over and over again. They are sort of like pseudo-global variables. So you would need to do:</p>

<pre><code>def is_valid(self, nums, m, n):
</code></pre>

<p>it would just be:</p>

<pre><code>def is_valid(self):
</code></pre>

<p>and (in general) you would access <code>self.m</code> and <code>self.n</code>.</p>

<h1>Iterate over the iterables, not over the <code>len</code> of the iterable.</h1>

<p>Unless you are mutating <code>nums</code> (which I don't believe you are) the more idiomatic way of doing this is iterating through the iterable so:</p>

<pre><code>for i in range(len(nums)):
</code></pre>

<p>becomes:</p>

<pre><code>for num in nums:
</code></pre>

<p>and instances of <code>nums[i]</code> are replaced by <code>num</code>, for example <code>if nums[i] &gt; n:</code> becomes <code>if num &gt; n:</code>.</p>

<p>Side note: if you were to need the value <code>i</code> and <code>nums[i]</code>, you might want to consider utilizing <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> if you need both.</p>
    </div>