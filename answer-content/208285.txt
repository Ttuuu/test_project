<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some quick remarks:</p>

<ul>
<li><p><code>pid</code>, <code>dateofvisit</code>, <code>stamp</code>, <code>type</code> are all properties and thus should follow Microsoft's <a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines" rel="nofollow noreferrer">naming guidelines</a>. Moreover "pid" is fairly meaningless, why not call this "PetId" as well?</p></li>
<li><p><code>testTypes</code> does not convey its actual contents.</p></li>
<li><p>Using an <code>int</code> to indicate a type is meaningless. I don't know what a test of type "1" is, or a "2". You should translate this into an <code>enum</code> with meaningful values.</p></li>
<li><p>WRT <code>// columns are the number of tests in every TestTable</code>: why do you need this? Can't you just count the entries in the property <code>Tests</code>?</p></li>
<li><p>Why is <code>GetTable(Test test, ref TestTable table, int index)</code> a <code>public</code> method? I doubt this is re-used elsewhere. Please apply the correct access modifier to a method, class, property, field etc.</p></li>
</ul>

<hr>

<p>I find your logic hard to understand. I've tried to rewrite it, based on what I think is happening, and this is what I came up with:</p>

<pre><code>    public IEnumerable&lt;TestTable&gt; TestHistoryItems()
    {
        IEnumerable&lt;Test&gt; tests = // get data

        var testTables = new List&lt;TestTable&gt;();

        foreach (var testType in new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 16 })
        {
            var relevantTests = tests.Where(x =&gt; x.Type == testType).ToList();

            if (!relevantTests.Any())
            {
                continue;
            }

            testTables.Add(GetTestTable(relevantTests));
        }

        return testTables;
    }

    private TestTable GetTestTable(IReadOnlyCollection&lt;Test&gt; tests)
    {
        var sampleTest = tests.First();
        return new TestTable
        {
            TestName = sampleTest.TestTypeName,
            Type = sampleTest.Type,
            Rows = sampleTest.TestDatas.Count,
            Tests = tests
        };
    }
</code></pre>

<p>You could even reduce the first method even more:</p>

<pre><code>    public IEnumerable&lt;TestTable&gt; TestHistoryItems()
    {
        IEnumerable&lt;Test&gt; tests = // get data

        return new[] { 3, 4, 5, 6, 7, 8, 9, 10, 16 }
            .Select(testType =&gt; tests.Where(x =&gt; x.Type == testType).ToList())
            .Where(relevantTests =&gt; relevantTests.Any())
            .Select(GetTestTable)
            .ToList();
    }
</code></pre>

<p>To me, this looks a lot clearer: I see there's a list of test types you filter on, and based on that you make a <code>List</code> of <code>TestTable</code>s for each type that has actual tests.</p>

<p>Again: I'm not 100% sure this is what you're doing, and that's because of the convoluted way your code works. And that is a major problem: good code can almost be "read" as a story. When I need to spend time trying to figure out that <code>index</code> is actually a test type that you've re-purposed, etc., that's a waste of time and energy.</p>
    </div>