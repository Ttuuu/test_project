<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>don't mix german and english words for names. Best is to stick to english because most/all developers knows the language.</li>
<li><p>don't repeat yourself. You have some duplicated code which should be removed. </p>

<p>e.g:</p>

<p>You create the same <code>Point</code> for printing at 4 different location (<code>new Point(Convert.ToInt32(pageWidth * 0.35), offsetY + 37)</code>)  </p></li>
<li><p>don't omit braces <code>{}</code> although they might be optional. Omitting them can lead to hidden and therfore hard to track bugs.  </p></li>
</ul>

<hr>

<p>Let's take a look at the <code>if..else</code> construct and how we could refactor it  </p>

<blockquote>
<pre><code>if (ZumDrucken.Items[elemente].Checked == true)
{
    if ZumDrucken.Items[elemente].Text.Substring(ZumDrucken.Items[elemente].Text.Length - 1) != "1")
        graphic.DrawImage(Properties.Resources.pfeilU, new Point(Convert.ToInt32(pageWidth * 0.35), offsetY + 37));
    else
        graphic.DrawImage(Properties.Resources.pfeilO, new Point(Convert.ToInt32(pageWidth * 0.35), offsetY + 37));
}
else
{
    if (ZumDrucken.Items[elemente].Text.Substring(ZumDrucken.Items[elemente].Text.Length - 1) != "1")
        graphic.DrawImage(Properties.Resources.pfeilO, new Point(Convert.ToInt32(pageWidth * 0.35), offsetY + 37));
    else
        graphic.DrawImage(Properties.Resources.pfeilU, new Point(Convert.ToInt32(pageWidth * 0.35), offsetY + 37));
}  
</code></pre>
</blockquote>

<p>First we can remove the <code>== true</code> because comparing a non nullable <code>bool</code> to <code>true</code> is senseless. Either it is <code>true</code> or <code>false</code>.  </p>

<p>Now let us create a </p>

<pre><code>var imagePoint = new Point(Convert.ToInt32(pageWidth * 0.35), offsetY);  
</code></pre>

<p>just before the loop and increase the <code>Y</code> before the <code>if..else</code> we are talking about so the whole thing becomes  </p>

<pre><code>imagePoint.Y += 37;
if (ZumDrucken.Items[elemente].Checked)
{
    if (ZumDrucken.Items[elemente].Text.Substring(ZumDrucken.Items[elemente].Text.Length - 1) != "1")
    {
        graphic.DrawImage(Properties.Resources.pfeilU, imagePoint);
    }
    else
    {
        graphic.DrawImage(Properties.Resources.pfeilO, imagePoint);
    }
}
else
{
    if (ZumDrucken.Items[elemente].Text.Substring(ZumDrucken.Items[elemente].Text.Length - 1) != "1")
    {
        graphic.DrawImage(Properties.Resources.pfeilO, imagePoint);
    }
    else
    {
        graphic.DrawImage(Properties.Resources.pfeilU, imagePoint);
    }
}
</code></pre>

<p>If we extract the checking of the last character from the text outside of the <code>if..else</code> like so  </p>

<pre><code>bool lastCharIsAOne =  ZumDrucken.Items[elemente].Text[ZumDrucken.Items[elemente].Text.Length - 1] == '1';  
</code></pre>

<p>we don't create a new string because we just access the char array directly.  </p>

<p>But for readability I would introduce a </p>

<pre><code>var currentItem = ZumDrucken.Items[elemente]; 
</code></pre>

<p>then the <code>if..else</code> will become  </p>

<pre><code>var currentItem = ZumDrucken.Items[elemente]; 
... some more code

bool lastCharIsAOne =  currentItem.Text[currentItem.Text.Length - 1] == '1';  
imagePoint.Y += 37;
if (currentItem.Checked)
{
    if (lastCharIsAOne)
    {
        graphic.DrawImage(Properties.Resources.pfeilU, imagePoint);
    }
    else
    {
        graphic.DrawImage(Properties.Resources.pfeilO, imagePoint);
    }
}
else
{
    if (lastCharIsAOne)
    {
        graphic.DrawImage(Properties.Resources.pfeilO, imagePoint);
    }
    else
    {
        graphic.DrawImage(Properties.Resources.pfeilU, imagePoint);
    }
}  
</code></pre>

<p>Now we need to do something about the image which should be printed. We see that <code>pfeilU</code> should be printed if:</p>

<p><code>(currentItem.Checked &amp;&amp; lastCharIsAOne) || (!currentItem.Checked &amp;&amp; !lastCharIsAOne)</code> which is the same as <code>(currentItem.Checked == lastCharIsAOne)</code>like @DDrmmr stated in the comments, hence we only need one <code>if</code> and one <code>else</code> which we could reduce to a simple <code>if</code> like so  </p>

<pre><code>var currentImage = Properties.Resources.pfeilO;

if (currentItem.Checked == lastCharIsAOne)  
{
    currentImage = Properties.Resources.pfeilU;  
}  
graphic.DrawImage(currentImage, imagePoint);
</code></pre>

<p>If we now extract the setting of the <code>graphic.InterpolationMode</code> outside of the loop we will get this </p>

<pre><code>graphic.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.NearestNeighbor;

var imagePoint = new Point(Convert.ToInt32(pageWidth * 0.35), offsetY);  
var barcodePoint = new Point(Convert.ToInt32(pageWidth * 0.6), 0);  

for (; elemente &lt; ZumDrucken.Items.Count; elemente++)
{
    var currentItem = ZumDrucken.Items[elemente]; 

    graphic.DrawString(currentItem.Text, font, brush, startX, startY + offsetY);

    var currentImage = Properties.Resources.pfeilO;

    bool lastCharIsAOne =  currentItem.Text[currentItem.Text.Length - 1] == '1';  
    if (currentItem.Checked == lastCharIsAOne)  
    {
        currentImage = Properties.Resources.pfeilU;  
    }

    imagePoint.Y += 37;  
    graphic.DrawImage(currentImage, imagePoint);

    b.Encode(TYPE.CODE128A, currentItem.Text, Color.Black, Color.Transparent, 600, 100);

    barcodePoint.Y = offsetY;
    graphic.DrawImage(b.EncodedImage, barcodePoint);

    offsetY = offsetY + 175;  

    ... the other `if..else`
</code></pre>
    </div>