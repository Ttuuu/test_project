<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall it's very readable and fast already. Good job.</p>

<p>I have some suggestions for possible improvements:</p>

<ul>
<li>As <code>n</code> must be equal to <code>ar.size</code>, you could drop that parameter from the method and use <code>ar.size</code> in place of <code>n</code> within the method body.</li>
<li>This method is a pure function except for the side effect of printing the result. Being a "pure function" is often a good thing so you can move the printing of the result to outside the method. Printing something is also quite time-consuming.</li>
<li>Your method could easily support more than <code>Int</code>, it doesn't have to be restricted by a specific type. You could check for duplicates of any type so we can make this method generic.</li>
<li>As you are iterating over elements you could use <code>for (e in ar)</code> instead of iterating over the indexes with <code>for (i in 0 until n)</code>. This would make it more efficient for data structures that doesn't have a <span class="math-container">\$O(1)\$</span> lookup-time, for example <code>LinkedList</code>.</li>
<li>The method <code>HashSet.add</code> returns <code>false</code> if the value already exists, so you don't need the call to <code>.contains</code>.</li>
<li>There is a typo in the name <code>enteries</code>, it should be called <code>entries</code>.</li>
<li><code>ar</code> could be called <code>input</code> to make it more readable.</li>
</ul>

<p>After applying all of the above, this is what you would end up with:</p>

<pre><code>fun &lt;T&gt; getNumberOfPairs(input: Array&lt;T&gt;): Int {
    val entries = HashSet&lt;T&gt;()
    var pairs = 0

    for (e in input) {
        if (!entries.add(e)) {
            pairs++
            entries.remove(e)
        }
    }
    return pairs
}
</code></pre>
    </div>