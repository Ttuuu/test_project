<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don't have much time, just some things I noticed.
</p><hr>

<h1><code>Deck.__str__</code></h1>

<p>This method can utilize the <code>.join</code> built in method. Your current implementation leaves a "," at the end of the string. <code>.join</code> is smart enough not to. Take  a look:</p>

<pre><code>def __str__(self):
    return ', '.join(str(card) for card in cards).strip()
</code></pre>

<p>Does the exact same thing yours does, but in one line. <code>.strip()</code> removes the extra whitespace at the end of the string.</p>

<h1><code>ask_for_new_game</code></h1>

<p>This function can also be written in one line. Since you're checking one boolean expression, and returning a value either way, the <code>while True:</code> loop isn't necessary. There is also an easier way to return a boolean. Take a look:</p>

<pre><code>def ask_for_new_game():
    return input('Another run? Enter y to continue, enter any other key to exit ').upper() == 'Y'
</code></pre>

<p>Since you are evaluating a <em>boolean</em> expression, and returning <em>boolean</em> values, you can simply return the expression. Since it returns a boolean value, that value will be returned.</p>

<h1><code>Deck.__init__</code></h1>

<p>You can simplify this method to one line using list comprehension. Take a look:</p>

<pre><code>def __init__(self, type_of_deck='empty'):
    self.cards = [Card(suit, num) for num in ranks for suit in suits if type_of_deck == 'full']
</code></pre>

<p>While it may seem like a longer line, it reduces line count, which is <em>almost</em> always a good thing.</p>

<h1><code>Player.bet</code> bug</h1>

<p>There is a bug in this method. It allows the user to bet 0 and start the game. Take a look at the first line in the method:</p>

<pre><code>def bet(self, amount):
    if amount &gt; self.account or amount &lt; 0:
        raise ValueError('Balance_Exceeded or invalid value')
    else:
        self.account -= amount
        return amount
</code></pre>

<p>A simple fix is to change <code>amount &lt; 0</code> to <code>amount &lt;= 0</code>.</p>

<h1>Type Hints</h1>

<p>You should use type hints to express what type of parameter are accepted and what values are returned by your methods/functions. Here's an example:</p>

<pre><code>def bet(self, amount: int) -&gt; int:
</code></pre>

<p>This says that the parameters <code>amount</code> should be an integer when passed, and that the method returns an integer. While this may be a trivial example, it helps as you write bigger and more expandable programs. It also helps people reading your code understand what types the method accepts.</p>

<h1>Docstrings</h1>

<p>You should include docstrings to your methods/functions to provide description about what each of them do. Take a look at <a href="http://www.sphinx-doc.org/en/master/" rel="noreferrer">sphinx</a>. It's a great tool that can "create intelligent and beautiful documentation".</p>
    </div>