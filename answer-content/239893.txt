<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In all, this is a nice, solid effort, especially for a self-avowed "newbie."  Keep up the good work!  With that, here are some things that may help you improve your program.</p>

<h2>Use SFML more fully</h2>

<p>I would suggest that it would be a good idea to have the <code>Flock</code> class derive from both the <code>sf::Transformable</code> and <code>sf::Drawable</code> classes.  Your <code>Flock::Display()</code> would then become an implementation of <code>Flock::draw</code>. See the <a href="https://www.sfml-dev.org/tutorials/2.5/graphics-vertex-array.php#creating-an-sfml-like-entity" rel="nofollow noreferrer">SFML tutorial on creating entities</a> for more details.</p>

<h2>Think carefully about inheiritance</h2>

<p>The <code>Boid</code> class is currently this:</p>

<pre><code>struct Boid
{
    sf::CircleShape boid;
    float m_radius;

sf::Vector2f m_Velocity;
sf::Vector2f m_Force;
Boid(const sf::Vector2f&amp; init_Pos, const sf::Vector2f init_Vel);
void AddForce(const sf::Vector2f&amp; force);
void Move();
};
</code></pre>

<p>I would make several changes to this:</p>

<pre><code>struct Boid : public sf::CircleShape
{
    float m_radius = 2;
    sf::Vector2f m_Velocity;
    sf::Vector2f m_Force;
    Boid(const sf::Vector2f&amp; init_Pos, const sf::Vector2f init_Vel);
    void AddForce(const sf::Vector2f&amp; force);
};
</code></pre>

<p>I've changed the <code>Boid</code> to inherit from <code>sf::CircleShape</code> which cleans things up.  For example, lines like these:</p>

<pre><code>sf::Vector2f b1 = boid1.boid.getPosition();
sf::Vector2f b2 = boid2.boid.getPosition();
</code></pre>

<p>are now a bit simpler with this:</p>

<pre><code>sf::Vector2f b1 = boid1.getPosition();
sf::Vector2f b2 = boid2.getPosition();
</code></pre>

<p>I also moved the default value for <code>m_radius</code> into the declaration rather than the constructor.  Finally, I removed the <code>Move</code> function entirely, since we can now use <code>sf::CircleShape::move</code> directly:</p>

<pre><code>void Flock::Move()
{
    for (Boid&amp; boid : m_boidStorage)
    {
        boid.move(boid.m_Velocity);
        Borders(boid);
    }
}
</code></pre>

<p>However, see the next suggestion.</p>

<h2>Think carefully about class responsibilities</h2>

<p>It seems to me that <code>Borders</code> should be a function of <code>Boid</code> rather than of <code>Flock</code>.  Just pass in <code>width</code> and <code>height</code> and I think you'll find it a much nicer looking piece of code.  Also, <code>Borders</code> is a noun rather than a verb which makes it a somewhat misleading name for a function.  I'd call it <code>Wrap</code> instead.  Similarly, the only uses of <code>m_randomEngine</code>, <code>m_uniform</code>, <code>m_gaussian</code> are within <code>AddBoid</code> which strongly suggests to me that they would be better as static members of <code>Boid</code> and used for a default constructor of <code>Boid</code>.</p>

<h2>Put default values in the class definition</h2>

<p>Rather than assigning values in the constructor, such as for <code>kA</code>, <code>kB</code>, etc. it's better to put those into the class definition.  If you do that and provide a default <code>Boid</code> constructor as mentioned above, your <code>Flock</code> constructor could look like this:</p>

<pre><code>Flock::Flock(sf::RenderWindow* winPtr) :
    m_boidStorage(TOTAL_BOIDS),
    m_winPtr(winPtr)
{
}
</code></pre>

<p>This also simplifies <code>AddBoid</code> by removing the need for a passed parameter.</p>

<h2>Use <code>emplace_back</code> instead of <code>push_back</code> where appropriate</h2>

<p>We don't really need to separately construct a <code>Boid</code> and push it onto the <code>std::vector</code>.  Instead, we can do both in a single step:</p>

<pre><code>void Flock::AddBoid()
{
    static const sf::Vector2f middle{ WIDTH / 2.0, HEIGHT / 2.0 };
    static const sf::Vector2f zero{ 0, 0 };
    m_boidStorage.emplace_back(middle, zero);
    maxVelocity += 0.05;
}
</code></pre>

<p>This assumes that the previous suggestion is also used.</p>

<h2>Watch out for missing <code>break</code>s</h2>

<p>A common error in C++ is to forget to put a <code>break;</code> at the bottom of each <code>case</code> to prevent it from falling through.  There is such a missing <code>break;</code> in <code>Main.cpp</code>.</p>

<h2>Use <code>const</code> where appropriate</h2>

<p>Helper functions such as <code>VectorMagnitude</code> don't modify the underlying <code>Flock</code> object and so should be <code>const</code>.  However, in this case, see the next suggestion instead.</p>

<h2>Omit helper functions from the interface</h2>

<p>There's no need to use <code>VectorMagnitude</code> outside of the <code>Flock</code> implementation code, so I'd recommend that it (and the similar functions) be non-class member <code>static</code> functions instead.</p>

<h2>Eliminate unused functions</h2>

<p>The <code>VecBoidDistance</code> is never used and can be eliminated.</p>

<h2>Consider refactoring using objects</h2>

<p>The <code>MassCalculate</code> function has a lot of nearly duplicate code.  I would be inclined to refactor that into three <code>Influence</code> objects with <code>Influence</code> being a pure virtual base class that would do all of the common stuff and two virual functions <code>updateForce</code> and <code>applyForce</code>.</p>
    </div>