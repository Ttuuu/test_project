<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><code>ArchiveTreeEntry</code></strong>  </p>

<p>Returning early will enhance readability. So the <code>AddChild()</code> and <code>AddChildRange()</code> method should look like so   </p>

<pre><code>internal void AddChild(ArchiveTreeEntry child)
{

    if (child == null) { return; }

    mChildren.Add(child);
}
</code></pre>

<p>an additional check with <code>!Any()</code> will make the programm flow more prominent because it clearly states to add only if ther are any items to add.  </p>

<pre><code>internal void AddChildRange(IEnumerable&lt;ArchiveTreeEntry&gt; children)
{

    if (children == null || !children.Any())  { return; }

    mChildren.AddRange(children);

}  
</code></pre>

<hr>

<p><strong><code>ArchiveBuilder</code></strong></p>

<ul>
<li><p>In the <code>CreateRootEntries()</code> method you have a <strong>copy&amp;pasta bug</strong>. The return statement says <code>return rootArchiveTreeEntries;</code> instead of <code>return rootEntries;</code>  </p></li>
<li><p>you really should use the <code>var</code> type if it is obvious from the right hand side of the assignment which type is assigned like for instance here  </p>

<pre><code>List&lt;ArchiveTreeEntry&gt; rootEntries = new List&lt;ArchiveTreeEntry&gt;();  
</code></pre></li>
</ul>

<p>like so   </p>

<pre><code>    var rootEntries = new List&lt;ArchiveTreeEntry&gt;();  
</code></pre>

<hr>

<p>Implementing the mentioned points together with the mentioned points from <a href="https://codereview.stackexchange.com/users/49350/pimgd">@Pimgd</a> <a href="https://codereview.stackexchange.com/a/58995/29371">answer</a> will lead to  </p>

<pre><code>public class ArchiveBuilder
{
    public static IEnumerable&lt;ArchiveTreeEntry&gt; Build(IEnumerable&lt;ArchiveDefinition&gt; archiveDefinitions)
    {
        if (archiveDefinitions == null || !archiveDefinitions.Any()) { return Enumerable.Empty&lt;ArchiveTreeEntry&gt;(); }

        IEnumerable&lt;ArchiveDefinition&gt; localEntries = new List&lt;ArchiveDefinition&gt;(archiveDefinitions);

        var rootArchiveTreeEntries = new List&lt;ArchiveTreeEntry&gt;(CreateRootEntries(localEntries));

        localEntries = RemoveRootArchiveDefinitions(localEntries);

        foreach (var rootEntry in rootArchiveTreeEntries)
        {
            HandleEntriesForParent(localEntries, rootEntry);
        }

        return rootArchiveTreeEntries;
    }

    private static IEnumerable&lt;ArchiveTreeEntry&gt; CreateRootEntries(
        IEnumerable&lt;ArchiveDefinition&gt; archiveDefinitions)
    {

        var rootEntries = new List&lt;ArchiveTreeEntry&gt;();

        rootEntries.AddRange(
            archiveDefinitions.Where(e =&gt; e.TypeOfArchive == ArchiveType.Archive)
                              .Select(d =&gt; new ArchiveTreeEntry(d)));

        return rootEntries;
    }

    private static IEnumerable&lt;ArchiveDefinition&gt; RemoveRootArchiveDefinitions(
        IEnumerable&lt;ArchiveDefinition&gt; archiveDefinitions)
    {

        return archiveDefinitions.Except(
                archiveDefinitions.Where(e =&gt; e.TypeOfArchive == ArchiveType.Archive));

    }


    private static void HandleEntriesForParent(
        IEnumerable&lt;ArchiveDefinition&gt; archiveDefinitions,
        ArchiveTreeEntry parent)
    {

        if (!archiveDefinitions.Any()) { return; }

        var children = GetChildren(archiveDefinitions, parent.Id);

        AddChildrenToParent(parent, children);

        RemoveChildren(archiveDefinitions, parent.Id);

        foreach (ArchiveTreeEntry nextParent in parent.Children)
        {
            HandleEntriesForParent(archiveDefinitions, nextParent);
        }

    }

    private static IEnumerable&lt;ArchiveDefinition&gt; GetChildren(
        IEnumerable&lt;ArchiveDefinition&gt; archiveDefinitions, string parentId)
    {
        return archiveDefinitions.Where(e =&gt; e.ParentId == parentId);
    }

    private static void AddChildrenToParent(ArchiveTreeEntry parent,
        IEnumerable&lt;ArchiveDefinition&gt; children)
    {
        parent.AddChildRange(children.Select(x =&gt; new ArchiveTreeEntry(x)));
    }

    private static void RemoveChildren(
        IEnumerable&lt;ArchiveDefinition&gt; archiveDefinition,
        string parentId)
    {
        archiveDefinition.Select(e =&gt; e.ParentId != parentId);
    }
}
</code></pre>
    </div>