<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>I think you're over-commenting, but you're a student, so your professor probably is requiring more than needed.</li>
<li>I think your code has some pretty big problems even after my answer. Over use of globals, lack of SRP, and I don't think your code works with all Sodoku boards. But my answer is long enough.</li>
</ul>

<p>In <code>board_filler</code>:</p>

<ul>
<li>I'd prefer the name <code>create_board</code>, it's not really filling something passed to it, it's creating something.</li>
<li>Don't raise types, raise instances. <code>raise ValueError(...)</code></li>
<li>When raising an error always enter a description.</li>
<li>Don't use errors for standard control flow. Your <code>if</code> that raises the error can very easily be in the <code>else</code> of the <code>try</code>.</li>
<li>You can clean up the function by only using two <code>if</code>s to handle correct numbers and empty cells.</li>
<li>You can populate <code>board</code> when you are in the loops. You can use a generator function to make the entire function a little more clean too.</li>
<li>IMO your code violates SRP. By making the innermost <code>while</code> loop be it's own function, you can easily use two comprehensions to make <code>create_board</code> really clean.</li>
<li>Stop relying on globals and enter the cols and rows.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>def get_cell(x, y):
    """Get cell from user input."""
    number = input(
        f"Please enter an integer for the square in column {x + 1}"
        f" and in row {y + 1} (hit enter for no number): "
    )
    while True:
        try:
            number = int(number)
        except TypeError:
            if not number:
                return " "
        else:
            if 1 &lt;= number &lt;= 9:
                return number
        print("Please enter an integer between 1 and 9"
              ", or just hit enter")


def create_board(cols, rows):
    """Create a Sudoku board from user input."""
    return [
        [get_cell(x, y) for y in range(cols)]
        for x in range(rows)
    ]
</code></pre>

<p>In <code>board_printer</code>:</p>

<ul>
<li>Stop relying on globals. You're just limiting the functionality and reusability of your code without really any benefit.</li>
<li>Use <code>enumerate</code>, rather than <code>range</code> and indexes.</li>
<li>Rather than using modulo arithmetic for each row, you can just make a new list using slices.</li>
<li>You don't need to use modulo arithmetic to display the line. You can just check if the row index is 3 or 6.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>def board_printer(board):
    """Prints the sudoku board."""
    for y, row in enumerate(board, 1):
        format_row = (
            row[0:3]
            + ['|']
            + row[3:6]
            + ['|']
            + row[6:9]
        )
        line = ' '.join(map(str, format_row))
        print(line)
        if y in (3, 6):
            print('-' * len(line))
</code></pre>

<p>In <code>filler</code>:</p>

<ul>
<li>You should merge both loops into one. You can also merge <code>listOfLists</code> into this loop too.</li>
<li>Your name <code>listOfLists</code> isn't PEP 8 compliant.</li>
<li>To make the code more reliable you can pass the amount of rows and columns. And also pass what you want to default to.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>import copy


def filler(rows, columns, value):
    """Fills the possible board."""
    board = []
    for _ in range(rows):
        row = []
        for _ in range(columns):
            row.append(copy.deepcopy(value))
    return board
</code></pre>

<p>in <code>line_solver</code>:</p>

<ul>
<li>You don't need two nested loops. <code>if board[x][y] == " ":</code> and the proceeding loops are the same.</li>
<li>Make two new functions for filling vertically and horizontally.</li>
<li>There is no need to return.</li>
<li>Stop relying on globals and just use <code>enumerate</code>.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>def remove_existing_horizontal(board, x, y):
    for z in range(len(board[0])):
        try:
            possibleBoard[x][y].remove(board[x][z])
        except (ValueError, AttributeError):
            pass

def remove_existing_vertical(board, x, y):
    for z in range(len(board)):
        try:
            possibleBoard[x][y].remove(board[z][y])
        except (ValueError, AttributeError):
            pass


def line_solver(board):
    """Remove confirmed values from the possible values in the lines."""
    for x, row in enumerate(board):
        for y, item in enumerate(row):
            if item == " ":
                remove_existing_horizontal(board, x, y)
                remove_existing_vertical(board, x, y)
</code></pre>

<p>In <code>square_solver</code>:</p>

<ul>
<li><code>blockNum</code> is a PEP 8 naming violation.</li>
<li>Use <code>!=</code> rather than <code>not foo == bar</code>.</li>
<li>You can simplify your code by making a function that does all the <code>blockNum[0] * 3 + x</code> noise.</li>
<li>Don't return <code>board</code>.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>def square_positions(x, y):
    x *= 3
    y *= 3
    return (
        (x + i, y + j)
        for i in range(3)
        for j in range(3)
    )


def square_solver(board):
    """Remove confirmed values from the possible values in the squares"""
    for block_y in range(3):
        for block_x in range(3):
            for x, y in square_positions(block_x, block_y):
                if board[x][y] != " ":
                    for i, j in square_positions(block_x, block_y):
                        try:
                            possibleBoard[i][j].remove(board[x][y])
                        except (ValueError, AttributeError):
                            pass
</code></pre>

<p>In <code>solver</code>:</p>

<ul>
<li>Use <code>square_positions</code> that we defined before.</li>
<li>Use <code>isinstance</code> not <code>type</code> to check the type of a value.</li>
<li>Use <code>enumerate</code> not <code>for i in range(len(foo)): foo[i]</code>.</li>
<li>Stop using <code>ROWS</code> and <code>COLS</code> and instead use <code>enumerate</code>.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>def solver(board):
    """Solves a few number of the sudoku board"""
    global possibleBoard
    board_updater(board)
    line_solver(board)
    square_solver(board)

    counters = [0] * 9
    for block_y in range(3):
        for block_x in range(3):
            for x, y in square_positions(block_x, block_y):
                if isinstance(possibleBoard[x][y], list):
                    for z in range(len(possibleBoard[x][y])):
                        counters[possibleBoard[x][y][z] - 1] += 1
            for i, counter in enumerate(counters, 1):
                # Checks to see if there was any times only one number appeared
                if counter == 1:
                    for x, y in square_positions(block_x, block_y):
                        try:
                            if i in possibleBoard[x][y]:
                                board[x][y] = i
                        except TypeError:
                            pass
    counters = [0] * 9
    for x, row in enumerate(possibleBoard):
        for y, item in enumerate(row):
            if (isinstance(item, list)
                and len(item) == 1
            ):
                board[x][y] = item[0]
    return board
</code></pre>
    </div>