<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a few things:</p>

<ul>
<li><p>good you're using <code>`</code> (template literals) to format your HTML inside the JavaScript code</p></li>
<li><p>don't use <code>innerHTML +=</code> as it forces the browser to re-render the DOM when called. Read more here: <a href="https://stackoverflow.com/questions/11515383/why-is-element-innerhtml-bad-code">Why is <code>Element.innerHTML +=</code> bad code?</a>. Instead create an HTML element with <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement" rel="nofollow noreferrer"><code>.createElement</code></a> and append it to an existing DOM element <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild" rel="nofollow noreferrer"><code>.appendChild</code></a>. </p>

<p>So instead of appending the the HTML string <code>&lt;div class="item"&gt;...&lt;/div&gt;</code> to the parent div you can:</p>

<ol>
<li><p>create a wrapping <code>div</code> element:</p>

<pre><code>const div = document.createElement('div');
</code></pre></li>
<li><p>append the HTML string to the div wrapper (remember <code>div</code> is an object of type <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element" rel="nofollow noreferrer"><code>Element</code></a> but it's not already rendered in the page DOM). You can use all of Element's methods on it, including <code>.innerHTML</code>:</p>

<pre><code>div.innerHTML = `
  &lt;div class="item"&gt;
    ...
  &lt;/div&gt;
`;
</code></pre></li>
<li><p>then append the wrapper's first child to the parent element:</p>

<pre><code>divParent.appendChild(div);
</code></pre></li>
</ol></li>
<li><p>you can use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll" rel="nofollow noreferrer"><code>.querySelectorAll</code></a> instead of <code>.getELementByClassName</code>. The former allows you to pass in an actual CSS selector instead of a className (the latter method). In your case you only want the first matching element, so use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector" rel="nofollow noreferrer"><code>.querySelector</code></a> instead.</p></li>
<li><p>I always use single quotes <code>'</code> for JavaScript strings and double quotes <code>"</code> when I need quotes inside the strings e.g. with HTML attributes. That's personal preference though.</p></li>
<li><p>no need to define the variable <code>docData</code> as <code>doc.data()</code> is already pretty self-explanatory</p></li>
<li><p>you can use arrow functions outside also <code>(arg1, arg2, ...) =&gt; {}</code> or if you have a single argument <code>arg =&gt; {}</code> (no need for the parenthesis).</p></li>
<li><p>you could use <code>const</code> for constant variable to make sure they don't get their values changed: for instance <code>itemsDiv</code> (fyi: renamed to <code>itemsParent</code> for clarity) can be defined with <code>const</code> instead of <code>var</code>.</p></li>
</ul>

<hr>

<p>Here's a possible refactoring of your code:</p>

<pre class="lang-js prettyprint-override"><code>const itemsParent = document.querySelector('.items')[0];
let items = [];

const renderItems = items =&gt; {

  items.forEach(item =&gt; {

    const div = document.createElement('div');

    div.innerHTML = `
      &lt;div class="item"&gt;
        &lt;img class="itemImgBackground" src="assets/${item.name.replace(" ", "")}.png"&gt;
        &lt;img class="itemImg" src="assets/${item.name.replace(" ", "")}.png"&gt;
        &lt;span class="itemName"&gt;${item.name}&lt;/span&gt;
        &lt;span class="itemCondition"&gt;${item.condition}&lt;/span&gt;
        &lt;span class="itemPrice"&gt;${item.price}&lt;/span&gt;
      &lt;/div&gt;
    `.trim();

    itemsParent.appendChild(div.firstChild);

  });
}

db.collection('items').get().then((querySnapshot) =&gt; {

  querySnapshot.forEach(doc =&gt; {
    items.push(doc.data());
  });

  renderItems(items);

});
</code></pre>

<hr>

<p><strong>Edit:</strong> testing div creation, it appears you need to trim the string first:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const div = document.createElement('div');
div.innerHTML = `
  &lt;div class="parent"&gt;
    &lt;div class="child"&gt;&lt;/div&gt;
  &lt;/div&gt;
`.trim();

console.log(div.outerHTML)
console.log(div.firstChild.outerHTML)</code></pre>
</div>
</div>

    </div>