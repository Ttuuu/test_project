<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Very nice program for a beginner! Great attempt! Here are some points.</p>

<h2>Imports</h2>

<p>For multiple imports for the same module, you use <code>,</code></p>

<pre class="lang-py prettyprint-override"><code>from x_module import y, z
</code></pre>

<p>But for our purpose, </p>

<pre class="lang-py prettyprint-override"><code>import math
import random
</code></pre>

<p>works better. Python is concerned about readability and space saving might not always be the best option.</p>

<h2>Naming</h2>

<p>Python follows a style convention known as <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a>. The normal variable naming convention can be summarised as:</p>

<ul>
<li>use snake_case instead of PascalCase or camelCase. <code>my_pencil</code> instead of <code>MyPencil</code> and <code>myPencil</code></li>
<li>use CAPITAL for constants. PI = 3.14, as the value of this variable won't change but like pencils = [], pencils will be reduced and expanded.</li>
</ul>

<p>Some improvements</p>

<p><code>homeSkill</code> -&gt; <code>home_skill</code></p>

<p><code>POINTS</code> -&gt; <code>points</code> as we see points being modified at <code>POINTS += [0]</code></p>

<p><code>higher = 1.148698355</code> -&gt; <code>HIGHER = 1.148698355</code> since it is a constant</p>

<h2>A note on objects</h2>

<p>Since i see nowhere you needed to use the teams individually and since this is a simulation, teams could be defined as:</p>

<pre class="lang-py prettyprint-override"><code>teams = [
    Team("Arsenal", 16),
    Team("Aston Villa", 6),
    Team("AFC Bournemouth", 8),
    ...,
    Team("Wolverhampton Wanderers", 13)
]
</code></pre>

<h2>String formatting</h2>

<p>The table can be simplified.
This</p>

<pre class="lang-py prettyprint-override"><code>print("| TEAM                      | POINTS | WINS | DRAWS | LOSSES | GOALS FOR | GOALS AGAINST |")
</code></pre>

<p>can be written as</p>

<pre class="lang-py prettyprint-override"><code>print("| {:&lt;20} | {:^10} | {:^10} | {:^10} | {:^10} | {:^10} | {:^10} |".format('TEAM',
    'POINTS', 'WINS', 'DRAWS', 'LOSSES', 'GOALS FOR', 'GOALS')
</code></pre>

<p>so that the following loop can be simplified to</p>

<pre class="lang-py prettyprint-override"><code>for team in sorted_teams:
    print("| {:&lt;20} | {:&lt;10} | {:&lt;10} | {:&lt;10} | {:&lt;10} | {:&lt;10} | {:&lt;10} |".format(team.name, 
    team.points, team.wins, team.draws, team.losses, team.gf, team.ga))
</code></pre>

<p>where <code>&lt;</code> means left align and <code>^</code> means align to the center.</p>

<h2>Looping</h2>

<pre class="lang-py prettyprint-override"><code>league_size = 20
POINTS = []
GOALS_FOR = []
...
for x in range(league_size):
    POINTS += [0]
    ...
</code></pre>

<p>can be written as </p>

<pre class="lang-py prettyprint-override"><code>league_size = 20
POINTS = [0] * league_size
GOALS_FOR = [0] * league_size
...
</code></pre>
    </div>