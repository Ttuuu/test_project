<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know you're not seeking advice about <code>Card</code>, but I feel I should point out that you don't need to inherit from <code>object</code> in Python 3.</p>

<p>I would remove the <code>return_string</code> option; if someone wants a list they should just call <code>splitlines</code>.</p>

<p>Your</p>

<pre><code>suits_name = ['Spades', 'Diamonds', 'Hearts', 'Clubs']
suits_symbols = ['♠', '♦', '♥', '♣']
</code></pre>

<p>should probably be tuples:</p>

<pre><code>suits_name = 'Spades', 'Diamonds', 'Hearts', 'Clubs'
suits_symbols = '♠', '♦', '♥', '♣'
</code></pre>

<p>but they're only ever used as a mapping:</p>

<pre><code>name_to_symbol = {
    'Spades':   '♠',
    'Diamonds': '♦',
    'Hearts':   '♥',
    'Clubs':    '♣',
}
</code></pre>

<p>Your</p>

<pre><code># add the individual card on a line by line basis
lines[0].append('┌─────────┐')
lines[1].append('│{}{}       │'.format(rank, space))  # use two {} one for char, one for space or char
lines[2].append('│         │')
lines[3].append('│         │')
lines[4].append('│    {}    │'.format(suit))
lines[5].append('│         │')
lines[6].append('│         │')
lines[7].append('│       {}{}│'.format(space, rank))
lines[8].append('└─────────┘')
</code></pre>

<p>looks a bit ugly, but I can see why you did that. What might be better is making an auxillary function to stack lines of strings first:</p>

<pre><code>def join_lines(strings):
    string_lines = [string.splitlines() for string in strings]
    return '\n'.join(''.join(out_line) for out_line in zip(*string_lines))
</code></pre>

<p>And then do:</p>

<pre><code>card = (
    '┌─────────┐\n'
    '│{r}{_}       │\n'
    '│         │\n'
    '│         │\n'
    '│    {s}    │\n'
    '│         │\n'
    '│         │\n'
    '│       {_}{r}│\n'
    '└─────────┘\n'
).format(r=rank, _=space, s=suit)

card_strings.append(card)
</code></pre>

<p>Since the formatting of the card matters for prettiness, I'd be tempted to do:</p>

<pre><code>    card = (
        '┌─────────┐\n'
        '│{}       │\n'
        '│         │\n'
        '│         │\n'
        '│    {}   │\n'
        '│         │\n'
        '│         │\n'
        '│       {}│\n'
        '└─────────┘\n'
    ).format(
        format(card.rank, ' &lt;2'),
        format(card.suit, ' &lt;2'),
        format(card.rank, ' &gt;2')
    )
</code></pre>

<p>Of course, since <code>card</code> is from a static, you can move it out to get just</p>

<pre><code>    card = CARD.format(
        format(rank, ' &lt;2'),
        format(suit, ' &lt;2'),
        format(rank, ' &gt;2')
    )
</code></pre>

<p>This removes the need for <code>space</code>. You can then make the main loop a comprehension if you make a function, and stick it inside the <code>join_lines</code> call:</p>

<pre><code>def card_to_string(card):
    # 10 is the only card with a 2-char rank abbreviation
    rank = card.rank if card.rank == '10' else card.rank[0]
    suit = name_to_symbol[card.suit]

    # add the individual card on a line by line basis
    return CARD.format(
        format(rank, ' &lt;2'),
        format(suit, ' &lt;2'),
        format(rank, ' &gt;2')
    )

return join_lines(map(card_to_string, cards))
</code></pre>

<p>The calls to <code>format</code> can be removed by making <code>card</code> like:</p>

<pre><code>CARD = """\
┌─────────┐
│{}       │
│         │
│         │
│    {}   │
│         │
│         │
│       {}│
└─────────┘
""".format('{rank: &lt;2}', '{suit: &lt;2}', '{rank: &gt;2}')
</code></pre>

<p>and doing:</p>

<pre><code>def card_to_string(card):
    # 10 is the only card with a 2-char rank abbreviation
    rank = card.rank if card.rank == '10' else card.rank[0]

    # add the individual card on a line by line basis
    return CARD.format(rank=rank, suit=name_to_symbol[card.suit])
</code></pre>

<p><code>ascii_version_of_hidden_card</code> can then be just:</p>

<pre><code>def ascii_version_of_hidden_card(*cards):
    """
    Essentially the dealers method of print ascii cards. This method hides the first card, shows it flipped over
    :param cards: A list of card objects, the first will be hidden
    :return: A string, the nice ascii version of cards
    """

    return join_lines((HIDDEN_CARD, ascii_version_of_card(*cards[1:])))
</code></pre>

<p>Here's the full thing:</p>

<pre><code>CARD = """\
┌─────────┐
│{}       │
│         │
│         │
│    {}   │
│         │
│         │
│       {}│
└─────────┘
""".format('{rank: &lt;2}', '{suit: &lt;2}', '{rank: &gt;2}')

HIDDEN_CARD = """\
┌─────────┐
│░░░░░░░░░│
│░░░░░░░░░│
│░░░░░░░░░│
│░░░░░░░░░│
│░░░░░░░░░│
│░░░░░░░░░│
│░░░░░░░░░│
└─────────┘
"""

def join_lines(strings):
    """
    Stack strings horizontally.
    This doesn't keep lines aligned unless the preceding lines have the same length.
    :param strings: Strings to stack
    :return: String consisting of the horizontally stacked input
    """
    liness = [string.splitlines() for string in strings]
    return '\n'.join(''.join(lines) for lines in zip(*liness))

def ascii_version_of_card(*cards):
    """
    Instead of a boring text version of the card we render an ASCII image of the card.
    :param cards: One or more card objects
    :return: A string, the nice ascii version of cards
    """

    # we will use this to prints the appropriate icons for each card
    name_to_symbol = {
        'Spades':   '♠',
        'Diamonds': '♦',
        'Hearts':   '♥',
        'Clubs':    '♣',
    }

    def card_to_string(card):
        # 10 is the only card with a 2-char rank abbreviation
        rank = card.rank if card.rank == '10' else card.rank[0]

        # add the individual card on a line by line basis
        return CARD.format(rank=rank, suit=name_to_symbol[card.suit])


    return join_lines(map(card_to_string, cards))


def ascii_version_of_hidden_card(*cards):
    """
    Essentially the dealers method of print ascii cards. This method hides the first card, shows it flipped over
    :param cards: A list of card objects, the first will be hidden
    :return: A string, the nice ascii version of cards
    """

    return join_lines((HIDDEN_CARD, ascii_version_of_card(*cards[1:])))
</code></pre>
    </div>