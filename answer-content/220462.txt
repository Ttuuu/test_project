<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's a <code>Linq</code> approach that allows you to perform an <em>analytical function</em> on a collection, given a <em>order by</em> clause, and a <em>predicate</em> to determine whether the current item and the previous item (<em>analytical lag</em>) are in the same group. It can be extended to also take into account a <em>partition</em>, but that's out of scope to serve your purpose.</p>

<p>This is a more generalized approach for the OP's <em>SplitByEqualProperty</em> method. I have augmented the problem into not just <em>equal property check</em>, but any kind of property check. Because of this generalization, I opt to use IEnumerable over IGrouping.</p>

<p><strong>Usage</strong></p>

<pre><code>using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Globalization;

public class Program
{
    public static void Main()
    {
        var results = new List&lt;Result&gt; 
        {
            Create("JAN", true), Create("FEB", true),
            Create("MAR", false),
            Create("APR", true),
            Create("MAY", false), Create("JUN", false), Create("JUL", false),
            Create("AUG", true),
            Create("SEP", true), Create("OCT", true),
            Create("NOV", false), Create("DEC", false),
        };

        var grouped = results.JoinBy(
            x =&gt; x.Checked, 
            x =&gt; x.IsWorking, 
            (previous, current) =&gt; previous == current);
    }

    internal static Result Create(string month, bool isWorking) {
        return new Result {
            Checked = DateTime.ParseExact("2019" + month + "01", "yyyyMMMdd", CultureInfo.InvariantCulture),
            IsWorking = isWorking
        };
    }

    public class Result
    {
        public DateTime Checked { get; set; }
        public bool IsWorking { get; set; }
    }
}
</code></pre>

<p><strong>Linq</strong></p>

<pre><code>public static class LinqExtension
{
    public static IEnumerable&lt;IEnumerable&lt;TSource&gt;&gt; JoinBy&lt;TSource, TOrderKey, TKey&gt;(
        this IEnumerable&lt;TSource&gt; source,
        Func&lt;TSource, TOrderKey&gt; orderBy,
        Func&lt;TSource, TKey&gt; keySelector,
        Func&lt;TKey, TKey, bool&gt; join) {
        var results = new List&lt;List&lt;TSource&gt;&gt;();
        var orderedSource = new List&lt;TSource&gt;(source).OrderBy(orderBy).ToArray();

        if (orderedSource.Length &gt; 0) {
            var group = new List&lt;TSource&gt; { orderedSource[0] };
            results.Add(group);
            if (orderedSource.Length &gt; 1) {
                for (int i = 1; i &lt; orderedSource.Length; i++) {
                    var lag = orderedSource[i - 1];
                    var current = orderedSource[i];
                    if (join(keySelector(lag), keySelector(current))) {
                        group.Add(current);
                    }
                    else {
                        group = new List&lt;TSource&gt; { current };
                        results.Add(group);
                    }
                }
            }
        }

        return results;
    }
}
</code></pre>
    </div>