<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Searching the sets</h1>

<p>Your first function searches for the sets, so why not call it that. Apart from that, there is little reason so define a <code>namedtuple</code> as you can just return a tuple and use unpacking when calling it</p>

<p>using <code>//</code> (floor division) and some dict comprehension, splitting the dice roll in found sets and remaining dice becomes a lot more easy. <code>dict.get(key, default)</code> can be very handy too to prevent having to check if something is <code>in</code></p>

<pre><code>def search_simple_sets(dice_rolls: dict):
    set_length = 3
    sets = {dice: dice_rolls.get(dice, 0) // set_length for dice in range(1, 7)}
    remaining_dice = {dice: dice_rolls.get(dice, 0) - count * set_length for dice, count in sets.items()}
    return sets, remaining_dice
</code></pre>

<h1>Calculating the score</h1>

<p>For keeping the scores, I would suggest using a simple dict. Which can be made a lot simpler than manually defining each score. You can just use the built-in <code>sum</code> instead of the <code>functools.reduce</code> and yet again, <code>dict.get()</code> to the rescue</p>

<pre><code>def score_simple(dice_roll: list):
    dice_roll = collections.Counter(dice_roll)
    sets, remaining_dice = search_simple_sets(dice_rolls)

    # define the scores
    set_scores = {i: i*100 for i in range(2, 7)}
    set_scores[1] = 1000 
    dice_score = {1:100, 5: 50}

    # calculating

    set_total = sum(set_scores.get(dice_set, 0) * count for dice_set, count in  sets.items())
    remaining_total = sum(dice_score.get(dice, 0) * count for dice, count in  remaining_dice.items())

    return set_total + remaining_total
</code></pre>

<h1>Arbitrary sets</h1>

<p>If you do it like this, adding arbitrary sets can be not too difficult. Do keep in mind that the order in which the <code>set_scores</code> is iterated over can affect the result</p>

<pre><code>def score_arbitrary(dice_roll: list):
    dice_roll = collections.Counter(dice_roll)

#     define the scores
#     the allowed_sets are tuples
    set_scores = {(i,) * 3: i*100 for i in range(2, 7)}
    set_scores[(1, 1, 1,)] = 1000
    set_scores[(2, 3, 4,)] = 999
    dice_score = {1:100, 5: 50}

    sets, remaining_dice = search_arbitrary_sets(dice_roll, set_scores)

    set_total = sum(set_scores.get(dice_set, 0) * count for dice_set, count in  sets.items())
    remaining_total = sum(dice_score.get(dice, 0) * count for dice, count in  remaining_dice.items())

    return set_total + remaining_total

def dice_rolls_contains(dice_rolls: dict, dice_set: dict):
    return all(dice_rolls.get(key, 0) &gt;= dice_set[key] for key in dice_set)

def search_arbitrary_sets(dice_rolls: dict, allowed_sets):
    sets_found = collections.Counter()
    remaining_dice = collections.Counter(dice_rolls)
    for dice_set in allowed_sets:
        while dice_rolls_contains(remaining_dice, collections.Counter(dice_set)):
            sets_found[dice_set] += 1
            remaining_dice -= collections.Counter(dice_set)
    return sets_found, remaining_dice
</code></pre>
    </div>