<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Your Preamble</h3>
<p>Descriptive but concise names are always important, C++ or not.</p>
<p>But there are limits:</p>
<ol>
<li><p>If there is no additional information to convey in the parameter-name (the types and the function-name are more prominent and obligatory), than brevity wins.</p>
</li>
<li><p>The smaller the scope, the more brevity should be favored.</p>
</li>
<li><p>If an algorithm / formula is implemented, it generally makes sense to keep the blueprint's nomenclature for easier verification, even if it is far less descriptive.</p>
</li>
<li><p>Generally, keeping the subject-areas nomenclature can be confusing for the uninitiated. Not that not doing so would help him much at all.</p>
</li>
</ol>
<p>Anyway, assigning a floating-point-literal to an integer will trigger a warning at least, if you ask for compiler-warnings, because of the loss of all the decimals. You are not forgetting to ask for that help, be it with <code>-Wall -Wextra</code> or whatever incantation your compiler prefers, are you?</p>
<h3>The Code</h3>
<p>In line with I said about your preamble, and to avoid having to juggle more pieces than unavoidable, keep scopes small and try to extract useful abstractions.<br>
Doing so also allows you to directly initialize nearly all variables, eliminating a source of errors.</p>
<p>You know that <code>rand()</code> is generally of very limited quality? Try to look at <code>&lt;random&gt;</code> for something better.</p>
<p>Also, you can generate a random-number smaller than 10000, and then print it with leading zeroes. Personally, I consider <code>std::string_stream</code> much too heavy for that, preferring <code>sprintf</code> or hand-rolling.</p>
<p><code>using namespace std;</code> is an abomination, as you cannot know what all <em>is</em> in there, nor <em>will be</em> in there. Thus, you can have name-clashes and silent changes of meaning.</p>
<p>Don't compare with <code>true</code>, that's pointlessly verbose. Simply use negation as needed.</p>
<p><code>std::endl</code> flushes the output-stream, which is unnecessarily costly. It is flushed on closing, like returning from <code>main()</code>. Also, reading from <code>std::cin</code> flushes <code>std::cout</code>.</p>
<p><code>return 0;</code> is implicit for <code>main()</code>.</p>
<p>There might be more, but I'm running out of time for now. Have fun.</p>
    </div>