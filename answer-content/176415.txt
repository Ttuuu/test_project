<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Mutually exclusive conditions</h3>

<p>Here, the second condition will be evaluated too, even when the first one is true. To avoid that, the second <code>if</code> should be <code>else if</code>.</p>

<blockquote>
<pre><code>if(key == "esc"){//exit           
  // ...
}
if(key == "left" || key == "up" || key == "down" || key == "right"){//newt move
  // ...
}
</code></pre>
</blockquote>

<p>The same goes for this sequence of conditionals:</p>

<blockquote>
<pre><code>if(key == "left")px-=step;
if(key == "right")px+=step;
if(key == "up")py-=step;
if(key == "down")py+=step;
</code></pre>
</blockquote>

<p>And these, and so on, you get the idea:</p>

<blockquote>
<pre><code>if(px&lt;0)px = canvas.width-step;//new head position
if(py&lt;0)py = canvas.height-step;
if(px&gt;canvas.width-step)px = 0;
if(py&gt;canvas.height-step)py = 0;
</code></pre>
</blockquote>

<h3>Variable scope</h3>

<p>This writing style of <code>var i</code> may lead to confusions in JavaScript:</p>

<blockquote>
<pre><code>for(var i = 1; i &lt; tail; i++){
  // ...
}
</code></pre>
</blockquote>

<p>Because this writing style suggests that <code>i</code> will be visible only within the body of the <code>for</code> statement, when in fact it's visible in the body of the entire function.
The recommended practice is to declare variables at the top of the function.</p>

<h3>Writing style</h3>

<p>For better readability, it's generally recommended to put spaces around operators and parentheses in conditionals. For example instead of this:</p>

<blockquote>
<pre><code>while(mealy%step){
  mealy+=1;
}
</code></pre>
</blockquote>

<p>Write like this:</p>

<pre><code>while (mealy % step) {
    mealy += 1;
}
</code></pre>

<p>And instead of <code>mealy += 1</code>, you can write <code>++mealy</code> or <code>mealy++</code>.
Note that the <code>++</code> prefix and postfix operators are exempt from the recommendation to put spaces around operators.</p>

<h3>Use boolean values for false and true meanings</h3>

<p>Instead of using 0 and 1 values for <code>meal</code> to indicate false and true,
it would be better to use <code>false</code> and <code>true</code>.
And then write conditions on the value of <code>meal</code> as <code>if (meal)</code> or <code>if (!meal)</code>.</p>

<h3>Duplicated logic</h3>

<p>The <code>if</code> and <code>else</code> branches execute the same non-trivial <code>fillRect</code> operations.
It would be good to extract the 4 lines called on <code>ctx</code> into a helper function that takes two style parameters:</p>

<blockquote>
<pre><code>if(bigHead == 0){//drawing head
  ctx.fillStyle = "lime";
  ctx.fillRect(pos[0][0], pos[0][1], step-brd, step-brd);
  ctx.fillStyle = "DarkGreen";
  ctx.fillRect(pos[0][0]+step/7, pos[0][1]+step/7, step/1.8, step/1.8 );  
}else{
  ctx.fillStyle = "yellow";
  ctx.fillRect(pos[0][0], pos[0][1], step-brd, step-brd);
  ctx.fillStyle = "red";
  ctx.fillRect(pos[0][0]+step/7, pos[0][1]+step/7, step/1.8, step/1.8 );
  // ...
}
</code></pre>
</blockquote>
    </div>