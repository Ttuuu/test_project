<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>@osuka_ and @anderas gave some very good advice. I just have a couple things I want to add:</p>

<h3>Macros</h3>

<pre><code>#define MAX_THREADS std::thread::hardware_concurrency() - 1;
</code></pre>

<p>While it doesn't really make sense to do arithmetic on this, macros like this should be surrounded by parentheses so the order of operations works correctly. Without it you get weird stuff like (assume <code>std::thread::hardware_concurrency()</code> is 4): <code>MAX_THREADS * 5 =&gt; 4 - 1 * 5 =&gt; -1</code> instead of <code>MAX_THREAD * 5 =&gt; (4 - 1) * 5 =&gt; 15</code>. Also, macros <em>should not</em> end in a semicolon. The user of the macro should add the semicolon (like you did - <code>int tmp = MAX_THREADS;</code>).</p>

<p>Alternatively, avoid macros altogether (this is C++ after all) and use <code>const auto MAX_THREADS = std::thread::hardware_concurrency() - 1;</code></p>

<h3>In <code>push()</code>:</h3>

<pre><code>std::unique_lock&lt;std::mutex&gt; lock(JobMutex);
</code></pre>

<p>This is a minor point, but seeing this I would expect something to unlock <code>lock</code> at some point (like the condition variable in <code>threadManager()</code>, which by the way has the confusing name <code>thread</code>). If the lock should be held until the end of its scope like in this case use a <code>std::lock_guard&lt;std::mutex&gt;</code> instead.</p>
    </div>