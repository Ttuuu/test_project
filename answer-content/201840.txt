<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hard-coding all of these relationships is problematic: you have to rewrite all of your code if any relationships change or if new employees are added. What if you have a company with a few hundred or a few thousand employees?</p>

<p>To scale up, first create a data structure for your employees. This could be an array or an object keyed by ID. Generally, this information will be populated from JSON or XML returned from a database, so I've created an <code>employeeData</code> structure that mimics this.</p>

<p>Once you have a workable <code>employees</code> array and relationships have been created, write an <code>Employee</code> method <code>employeeOf</code>. This method works exactly as you're doing it, but dynamically using a loop rather than a series of hard-coded conditionals.</p>

<p>In terms of HTML, I recommend specific DOM element names and using an <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventListener" rel="nofollow noreferrer">event listener</a> as an alternative to an <code>onclick</code> property. Consider making your input/button combo a <code>&lt;form&gt;</code>.</p>

<p>Here's a potential first refactor, keeping your basic design but addressing some of the above:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>(function() {

  function Employee(name, id, manager) {
    this.name = name;
    this.id = id;
    this.manager = manager;
  }
  
  Employee.prototype.employeeOf = function(target) {
    let manager = this.manager;

    while (manager) {
      if (manager.name === target) {
        return true;
      }

      manager = manager.manager;
    }

    return false;
  };

  const employeeData = [
    {name: "ceo", id: 1, manager: null},
    {name: "e1", id: 2, manager: "ceo"},
    {name: "e2", id: 3, manager: "e1"},
    {name: "e3", id: 4, manager: "e1"},
    {name: "e4", id: 5, manager: "e2"},
    {name: "e5", id: 6, manager: "e2"},
    {name: "e6", id: 7, manager: "e3"}
  ];

  const employees = employeeData.reduce((a, e) =&gt;
    a.concat([new Employee(
      e.name, e.id, a.find(m =&gt; m.name === e.manager
    ))]), []
  );

  document.getElementById("find-employees-btn").addEventListener("click", e =&gt; {
    const target = document.getElementById("employee-input").value;
    const result = employees.filter(e =&gt; e.employeeOf(target)).map(e =&gt; e.name);

    document.getElementById("employee-result")
      .innerHTML = "Ans: " + (result.length ? result : "No reportees");
  });
})();</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>Manager Name = &lt;input type="text" id="employee-input"&gt;
&lt;button id="find-employees-btn"&gt;Result&lt;/button&gt;
&lt;p id="employee-result"&gt;&lt;/p&gt;</code></pre>
</div>
</div>


<p>This works, but there are many areas to improve.</p>

<p>For example, building the <code>employees</code> structure requires <code>find</code>, which is succinct but traverses up to the entire array on each call. Managers are assumed to have been added to the array prior to their employees which can cause issues.</p>

<p>More seriously, the bottom-up "employee has a manager" relationship makes it awkward and slow to retrieve the top-down, opposite relationship: employees of a manager. If redesigning your <code>Employee</code> class is an option, consider <code>this.employees</code> (an array of <code>Employees</code>) rather than (or in addition to) <code>this.manager</code> (an <code>Employee</code>) as a member field. This makes searching for employees much more efficient and simpler to code: simply iterate over the target manager's employees and recursively collect all of those employees' underlings. There won't be any wasted checks or conditionals in this design.</p>
    </div>