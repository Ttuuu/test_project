<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can make some general suggestions. Having code completely rewritten is offtopic here though.</p>

<hr>

<p>In <code>play_game</code>, you import <code>random</code> from within the function. <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">PEP8 notes though that</a>:</p>

<blockquote>
  <p>Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants.</p>
</blockquote>

<p>It's conceivable that you may want to have an import conditionally happen inside of a function if the import is expensive, and would only rarely be used. That certainly isn't the case here though.</p>

<hr>

<pre><code>changed_list = [char for char in changed_word]
</code></pre>

<p>This just creates a copy of <code>changed_word</code> in a verbose way. You would be better off doing what you did before:</p>

<pre><code>changed_list = changed_word[:]
</code></pre>

<hr>

<p>You use far too many global variables. For clarity, those variables making up the state of the game should be explicitly passed to each function that needs them. You could use a <code>dataclass</code> to hold the data, and then pass the state object around.</p>

<p>Having everything as global with complicate testing, and makes your program harder to understand.</p>

<hr>

<p>You have a loop that's written in a confusing way:</p>

<pre><code>while True:
    guess = input("Input a letter: ")
    if len(guess) != 1:
        print("You should print a single letter\n")
        continue
    if guess != guess.lower() or not guess.isalpha():
        print("It is not an ASCII lowercase letter\n")
        continue
    break
</code></pre>

<p>You <code>continue</code> in two branches, then <code>break</code> at the bottom. You might as well just use an <code>elif</code> and <code>else</code> to set it up so you only break if both checks were false:</p>

<pre><code>while True:
    guess = input("Input a letter: ")
    if len(guess) != 1:
        print("You should print a single letter\n")
    elif guess != guess.lower() or not guess.isalpha():
        print("It is not an ASCII lowercase letter\n")
    else:
        break
</code></pre>

<hr>

<pre><code>"\n%s\nYou guessed the word!\nYou survived!" % hidden_word
</code></pre>

<p>In more modern Python, this can be written more cleanly using f-strings like you use later:</p>

<pre><code>f"\n{hidden_word}\nYou guessed the word!\nYou survived!"
</code></pre>

<hr>

<pre><code>if setting == "check_lives":
    if lives != 0:
        if lives &lt; 5: # HINT CONDITION
            if hint_flag:
</code></pre>

<p>You don't have an <code>else</code> case for any of those checks, so you might as well just <code>and</code> them:</p>

<pre><code>if setting == "check_lives" and 0 &lt; lives &lt; 5 and hint_flag:
</code></pre>

<p>That will cut down on a lot of nesting.</p>

<hr>

<pre><code>list((len(chosen_word))*"-")
</code></pre>

<p>Would make a lot more sense as just:</p>

<pre><code>len("chosen_word") * ["-"]
</code></pre>

<hr>

<pre><code>for _ in range(len(changed_list)):
    guess = changed_list[_]
</code></pre>

<p>Don't call something <code>_</code> unless you don't use it. If you use it, give it a good, descriptive name. Here though, you should just iterate the word directly:</p>

<pre><code>for letter in changed_list:
    guess = letter  # Which mostly gets rid of the need for guess
</code></pre>
    </div>