<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Don't repeat yourself</h1>

<p>Your code violates the DRY principle. If we replace</p>

<pre><code>germanNumeralShort = parseTimeM True defaultTimeLocale
    "%-d.%-m.%y" (t2s datestring) :: Maybe UTCTime
isoformat = parseTimeM True defaultTimeLocale
    "%Y-%m-%d" (t2s datestring) :: Maybe UTCTime
...
</code></pre>

<p>with</p>

<pre><code>parse format = parseTimeM True defaultTimeLocale format (t2s datestring)

germanNumeralShort = parse "%-d.%-m.%y"
isoformat          = parse "%Y-%m-%d"
...
</code></pre>

<p>then we immediately notice that we use <code>parse</code> on all formats after another till we find a suitable one.</p>

<p>This can be modelled with <code>map parse</code>, e.g.</p>

<pre><code>map parse
    [ "%b %-d, %Y"
    , "%B %-d, %Y"
    , "%b. %-d, %Y"
    , "%-d.%-m.%Y"
    , "%-d.%-m.%y"
    , "%Y-%m-%d"
    ]
</code></pre>

<p>We could use <code>&lt;|&gt;</code> alternatively, e.g.</p>

<pre><code>parse "%b %-d, %Y" &lt;|&gt; parse "%B %-d, %Y" &lt;|&gt; ...
</code></pre>

<p>but that's less flexible than the list approach.</p>

<h1>Use <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Foldable.html#v:asum" rel="nofollow noreferrer"><code>asum</code></a> to get a single <code>Maybe</code> from a list of <code>Maybe</code>s</h1>

<p>To get a single <code>Maybe a</code> from <code>[Maybe a]</code>, we can use <code>asum</code>. To get the <code>errorT</code>, we just need to pattern match on a single result and end up with</p>

<pre><code>readDate3 :: Text -&gt;   UTCTime
readDate3 datestring = case result of
   Nohing -&gt; errorT ["readDate3", datestring, "is not parsed"]
   Just t -&gt; t
 where 
   parse format = parseTimeM True defaultTimeLocale format (t2s datestring) 
   result = asum . map parse $
        [ "%b %-d, %Y"
        , "%B %-d, %Y"
        , "%b. %-d, %Y"
        , "%-d.%-m.%Y"
        , "%-d.%-m.%y"
        , "%Y-%m-%d"
        ]
</code></pre>

<p>As the current strings are missing some documentation, we could introduce additional types to remedy that:</p>

<pre><code>data DateFormat = ShortMonth
                | LongMonth
                | MonthPoint
                | GermanNumeral
                | GermanNumeralShort
                | ISOFormat

toFormatString :: DateFormat -&gt; String
toFormatString f = case f of
    ShortMonth -&gt; "%b %-d, %Y"
    LongMonth  -&gt; "%B %-d, %Y"
    MonthPoint -&gt; "%b. %-d, %Y"
    -- other left as an exercise
</code></pre>

<p>We can also use <code>fromMaybe</code> to get rid of the last pattern match and end up with</p>

<pre><code>import Data.Foldable (asum)
import Data.Maybe (fromMaybe)

readDate :: Text -&gt;   UTCTime
readDate datestring = 
    fromMaybe (errorT ["readDate", datestring, "is not parsed"]) $
      asum . map parse $
        [ ShortMonth
        , LongMonth
        , MonthPoint
        , GermanNumeral
        , GermanNumeralShort
        , ISOFormat
        ]
 where 
   parse format = parseTimeM True defaultTimeLocale (toFormatString format) (t2s datestring) 
</code></pre>
    </div>