<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code># Uses python3
</code></pre>
</blockquote>

<p>I don't see much to argue against documenting this instead with a hashbang:</p>

<pre><code>#!/usr/bin/python3
</code></pre>

<p>Sure, on Windows that path won't work, but on many other platforms it will.</p>

<hr>

<blockquote>
<pre><code>n, m =  [int(x) for x in input().split()]
...
print (fib(n))
</code></pre>
</blockquote>

<p>It is generally considered best practice to use</p>

<pre><code>if __name__ == "__main__":
    ...
</code></pre>

<p>as a guard around "immediate" code. This makes the file reusable as a library.</p>

<p>I don't understand the inconsistency in making <code>m</code> a global but <code>n</code> an argument to the function.</p>

<hr>

<blockquote>
<pre><code>def fib(n):
    a = [0, 1]
    if (n &lt;=1):
        return n
    else:
        for i in range(1, n):
            a.append((a[-1] + a[-2])%m)
        return a[i+1]
</code></pre>
</blockquote>

<p>There are two PEP8 violations in this code: the missing space after <code>&lt;=</code> on line 3, and the missing space around <code>%</code> on line 7. As a matter of style I would also drop the parentheses around the condition on line 3.</p>

<p>Other answers have addressed saving memory by keeping only the two most recent values, or saving time by exploiting the periodicity modulo <code>m</code>. Depending on your priorities for optimisation and expected values of <code>n</code> and <code>m</code> there are a couple of other things you could consider:</p>

<ul>
<li>Using the identities <span class="math-container">\$F(2n) = 2 F(n+1) F(n) - F(n)^2\$</span> and <span class="math-container">\$F(2n+1) = F(n+1)^2 + F(n)^2\$</span> you can calculate <span class="math-container">\$F(n)\$</span> in <span class="math-container">\$O(\lg n)\$</span> arithmetic operations. I describe this in much more detail, with SML code, <a href="http://cheddarmonk.org/Fibonacci.html" rel="nofollow noreferrer">on my personal website</a>.</li>
<li>If you prefer to attack the running time via periodicity (perhaps because <span class="math-container">\$\lg n &gt; 6m\$</span>), there are some tricks you can use to try to optimise it. The <a href="https://en.wikipedia.org/wiki/Pisano_period" rel="nofollow noreferrer">Pisano period</a> is multiplicative, so if you can factor <code>m</code> that can reduce the number of steps you have to take to find the period. And there are number-theoretical theorems you can apply to reduce the search space.</li>
</ul>
    </div>