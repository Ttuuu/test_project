<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The bad part is that <code>ToEnumerable</code> returns an <code>IEnumerable</code> that blocks for each element until it is produced by the <code>IObservable</code> it is called on. This means that you might as well be doing:</p>

<pre><code>public static IEnumerable&lt;R&gt; SelectAsync&lt;T, R&gt;(this IEnumerable&lt;T&gt; source, Func&lt;T, Task&lt;R&gt;&gt; selector)
{
    foreach (var item in source)
        yield return selector(item).Result;
}
</code></pre>

<p>and depending on what kind of app you're writing, this might deadlock, though I think your version of going through Rx might avoid that and be more functionality close to:</p>

<pre><code>public static IEnumerable&lt;R&gt; SelectAsync&lt;T, R&gt;(this IEnumerable&lt;T&gt; source, Func&lt;T, Task&lt;R&gt;&gt; selector)
{
    foreach (var item in source)
        yield return Task.Run(() =&gt; selector(item)).Result;
}
</code></pre>

<p>Either way, you're blocking a <code>Thread</code> which is seen as a bad thing to do in the age of async/await and the TPL. It would be as bad as using <code>Thread.Sleep</code> with <code>Task.Run</code>. It is not likely to lock up your app, especially if your app is multi-threaded, but it most certainly will block a <code>Thread</code> on the thread pool.</p>

<p>I've certainly seen people get away with using <code>Thread.Sleep</code> with <code>Task.Run</code> with no real consequences, but keep in mind that it can cause issues when you scale.</p>

<p>As for how you might know this without being intimately familiar with Rx and the details of how its operators work? That's easy. Just know that you can never go from having an asynchronous value (<code>Task&lt;T&gt;</code>) to having a synchronous value (<code>T</code>) without awaiting (which requires that you stay in an async context) or blocking. Even Rx doesn't have enough magic to change that :)</p>
    </div>