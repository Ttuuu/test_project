<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Overview</h1>

<ul>
<li>If you are using ES6, you should use the full ability of arrow functions: <code>(args) =&gt; returnVal</code></li>
<li>In addition, some of the methods don't need to be defined as a property.</li>
<li><code>calculatorOperations</code> should be a constant.</li>
<li>You don't need to access each element in an array like this: <code>(getArgs[0], getArgs[1])</code>, you can do <code>(...getArgs)</code></li>
<li>I agree with <a href="https://codereview.stackexchange.com/users/120114/s%e1%b4%80%e1%b4%8d-on%e1%b4%87%e1%b4%8c%e1%b4%80">@SamOnela</a> in that you can iterate over the operations. However, their method pollutes global namespace</li>
</ul>

<h1>Questions</h1>

<ul>
<li>Why are you using <code>x</code> not <code>*</code>?</li>
</ul>

<h1>Rewrite</h1>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>    function operateOnEntry(userEntry) {
        let indexOfOperand,
            operation;
        Object.keys(calculatorOperations.ops).forEach(function(functionName) {
            while (userEntry.includes(functionName)) {
                indexOfOperand = userEntry.indexOf(functionName);
                userEntry = calculatorOperations.calculationSequence(functionName, indexOfOperand, userEntry);
            };
        });
        return userEntry;
    }
    
    const calculatorOperations = {
        ops: {
            'x': (arg1, arg2) =&gt; arg1 * arg2,
            '/': (arg1, arg2) =&gt; arg1 / arg2,
            '+': (arg1, arg2) =&gt; arg1 + arg2,
            '-': (arg1, arg2) =&gt; arg1 - arg2
        },
        returnIndexOfEntry(index, userEntry) {
            let arg1 = Number(userEntry[index - 1]),
                arg2 = Number(userEntry[index + 1]);
            return [arg1, arg2];
        },
        returnSpliced(index, newTotal, userEntry) {
            userEntry.splice((index - 1), 3, newTotal);
            return userEntry;
        },
        calculationSequence(operation, indexOfOperand, userEntry) {
    
            let getArgs = calculatorOperations.returnIndexOfEntry(indexOfOperand, userEntry),
                newTotalForEntry = calculatorOperations.ops[operation](...getArgs),
                newUserEntry = calculatorOperations.returnSpliced(indexOfOperand, newTotalForEntry, userEntry);
            return newUserEntry;
        }
    };
    var userEntry = [3, '+', 3, 'x', 3];
    console.log(operateOnEntry(userEntry));</code></pre>
</div>
</div>

    </div>