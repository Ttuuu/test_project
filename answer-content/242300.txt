<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>    return evensum == oddsum &amp;&amp; evensum != 0 &amp;&amp; oddsum != 0;
</code></pre>

<p>Why can't sums be zero?  With this array ... <code>{-5, 7, 0, 5 }</code> ... if you remove the <code>7</code>, then the even elements <code>-5</code> and <code>5</code> would sum to zero, and the odd elements <code>0</code> also sum to zero, giving a "balanced" array.</p>

<hr>

<p>Move tests out of loops wherever possible.</p>

<pre><code>    for (int i = 0; i &lt; arr.length; i++) {
      if (i % 2 == 0) {
        evensum += arr[i];
      } else {
        oddsum += arr[i];
      }
    }
</code></pre>

<p>Here, with a 1 million element array, <code>i % 2 == 0</code> is being done 1 million times.  If you summed the even and odd elements separately ...</p>

<pre><code>    for (int i = 0; i &lt; arr.length; i += 2) {
      evensum += arr[i];
    }
    for (int i = 1; i &lt; arr.length; i += 2) {
      oddsum += arr[i];
    }
</code></pre>

<p>... you never have to even test <code>i % 2 == 0</code>, which should be a speed improvement.</p>

<hr>

<p>The above also applies to copying elements in <code>removeElementInArr()</code>:</p>

<pre><code>    for (int i = 0, j = 0; i &lt; arr.length &amp;&amp; j &lt; result.length; i++, j++) {
      if (i == index) {
        result[j] = arr[i + 1];
        i++;
      } else {
        result[j] = arr[i];
      }
    }
</code></pre>

<p>You know you'll be copying elements up to <code>index</code>, and then copying the elements after <code>index</code>, but you do an <code>i == index</code> inside the loop.  With a million elements, that is a lot of extraneous testing.</p>

<pre><code>    // Copy elements before index:
    for (int i = 0; i &lt; index; i++) {
        result[i] = arr[i];
    }

    // Copy elements after index:
    for (int i = index + 1, j = index; i &lt; arr.length; i++, j++) {
        result[j] = arr[i];
    }
</code></pre>

<p>But this is still a lot of manual copying.  The JVM can do the copying for you, a lot more efficiently using <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/System.html#arraycopy(java.lang.Object,int,java.lang.Object,int,int)" rel="noreferrer"><code>System.arraycopy</code></a></p>

<pre><code>    System.arraycopy(arr, 0, result, 0, index);
    System.arraycopy(arr, index + 1, result, index, result.length - index);
</code></pre>

<p>Now the JVM does all the bound-checking once for each call, instead of two million times when done manually on an array of one million entries.  Much faster.</p>

<hr>

<p>If you add elements of <code>int[]</code>, you may overflow, especially if you have a lot of elements in those arrays.  You may want to use <code>long</code> accumulators.</p>

<hr>

<h1>Algorithmic Improvement</h1>

<p>While the above optimizations will speed up the code, the algorithm is still <span class="math-container">\$O(N^2)\$</span>.  I believe you can improve this to <span class="math-container">\$O(N)\$</span>.</p>

<p>The problem is you are doing a whole lot of additions, and the partial results of those additions aren't changing.  Given an array of one million entries, when you are deleting the element around index 500,000 or so, the sums of the first 200,000 even indices and the first 200,000 odd indices don't change.</p>

<p>Consider the array:</p>

<pre><code>1, 3, 5, 7, 9, 11, 13, 15, 17, 19, ...
</code></pre>

<p>If you were asked to find the sum of various spans of elements, say 4rd through 8th, how would you go about doing it?  How about 2nd through 9th? Can you save any work?</p>

<p>If you maintained a list of cumulative sums:</p>

<pre><code>1, 4, 9, 16, 25, 36, 49, 64, 81, 100, ...
</code></pre>

<p>The sum of the 4rd through 8th element would be:</p>

<pre><code>                 7 + 9 + 11 + 13 + 15
= (1 + 3 + 5) + (7 + 9 + 11 + 13 + 15) - (1 + 3 + 5)
= (1 + 3 + 5  +  7 + 9 + 11 + 13 + 15) - (1 + 3 + 5)
=                    64                -      9
=               cumulative[8]          -  cumulative[3]
</code></pre>

<p>We've preprocessed the input into a cumulative sum array, which is done once <span class="math-container">\$O(N)\$</span>, and then any subrange sum can be computed in <span class="math-container">\$O(1)\$</span> by a simple subtraction.</p>

<p>You've got some issues to work out, such as how and where to store cumulative sums of only the even/odd indices, how to compute the sum of all even indices after an element at index <code>x</code> is removed, etc. But given this is a programming challenge, the implementation is left to student.</p>
    </div>