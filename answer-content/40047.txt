<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Firstly I would consider injecting the DbContext into the repository.  Even though your RepositoryBase class is abstract I would have a protected constructor</p>

<pre><code>protected RepositoryBase(Context dbContext) {
  _context = dbContext;
}
</code></pre>

<p>I would then look at injecting the context into each repository and letting object that ends up creating the context be responsible for it's disposing.  Perhaps you could take a look at the UnitOfWork pattern as that goes well with the repository pattern (There are plenty of articles online).</p>

<p>In light of this I then probably would let another class/object be responsible for when the changes are persisted to the database.  Perhaps look at it like a UI that lets you add items to a list as much as you want.  Then there is a save button that will actually do the persist to the db.  This save button is separate to the adding itself and means that you can bulk add items and only save when you are ready.</p>

<p>One other point of doing it this way is that you never get to share Context.  That means that each repositories set of changes will not be visible in another set (until the changes are persisted).  This maybe what you are after but if not, it's something to consider.</p>
    </div>