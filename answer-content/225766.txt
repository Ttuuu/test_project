<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Most people are talking about code style, optimization, and documentation, but to me those things aren't typically that vital. I know people will get on my case about that, but here's my reasoning.</p>

<p>Although those things are VERY important, none of your code is so poorly optimized that it makes a serious impact on performance. Other things would definitely be a larger bottleneck in your code.</p>

<p>Your code style and documentation while not the most helpful or perfect weren't really that bad. If I was a co-worker looking at the code, I definitely wouldn't have been <em>that</em> upset with it. Just make sure you run your auto-formatter more.</p>

<p>However, your naming and general code design were not the greatest. As a co-worker, I definitely would have gotten frustrated at times.</p>

<h1>Naming</h1>

<p>These are grouped by what exactly you are naming.</p>

<h2>Method Names</h2>

<h3>Interface Methods</h3>

<pre class="lang-java prettyprint-override"><code>void recordUserBidOnItem(Bid bid, Item item) throws InvalidBidException;

Optional&lt;Bid&gt; getCurrentWinningBidForItem(Item item);

List&lt;Bid&gt; getAllBidsForItem(Item item);

Set&lt;Item&gt; getAllItemsWithBidFromUser(User user);
</code></pre>

<p>Each of these method names are incredibly verbose for no real reason. Here's how I would recommend naming them:</p>

<pre class="lang-java prettyprint-override"><code>void recordBidForItem(Bid bid, Item item) throws InvalidBidException;
</code></pre>

<p>Can someone other than a <code>User</code> submit a <code>Bid</code>? If not, then having the word "user" as part of the method name is redundant and confusing.</p>

<pre class="lang-java prettyprint-override"><code>Optional&lt;Bid&gt; getCurrentWinningBidForItem(Item item);
</code></pre>

<p>Why specify both "current" and "winning"? If someone told you "I have the current bid for an auction" or "I have the winning bid for an auction", you would understand those as the same thing.</p>

<pre class="lang-java prettyprint-override"><code>List&lt;Bid&gt; getBidsForItem(Item item);

Set&lt;Item&gt; getItemsWithBidFromUser(User user);
</code></pre>

<p>Typically you should try to avoid the word "all" unless it really is <em>all</em> of something. If you have the word "for" or "of" after "all", typically your naming is not right. The main reason for that is if you later decided to add a filter option and wanted to overload that method, it would no longer be an accurate method name.</p>

<h3>Other Methods</h3>

<pre class="lang-java prettyprint-override"><code>private void checkBidIsHighEnough(Bid bid, Item item) throws InvalidBidException
</code></pre>

<p>When I see a method starting with <code>check</code>, I assume it will return a boolean with whether or not the condition is met. For methods that throw an exception, I typically see things like <code>validate</code>, <code>ensure</code>, or <code>require</code>. For this, try <code>ensureBidHigher</code>.</p>

<h2>Variable names</h2>

<p>There are a couple things that are problematic.</p>

<pre class="lang-java prettyprint-override"><code>LinkedList&lt;Bid&gt; bids = new LinkedList&lt;&gt;(getAllBidsForItem(item));
</code></pre>

<p>When you name lists, try to avoid just adding the letter 's' to the end. Appending "List" at the end makes it easier to notice at a quick glance what a variable is. This one is more of a personal preference, but I know that most people at my company agree. I notice you actually do this in the <code>containsBidFromUser</code> method. You can ignore my advice on this one or listen to it, but above all, and I'm sure everyone else here agrees, <strong><em>BE CONSISTENT</em></strong>.</p>

<pre class="lang-java prettyprint-override"><code>Optional&lt;Bid&gt; currentWinningBid = getCurrentWinningBidForItem(item);
</code></pre>

<p>Just name it <code>currentBid</code> or <code>winningBid</code>. See my notes above for reasoning.</p>

<pre class="lang-java prettyprint-override"><code>@Override
public Set&lt;Item&gt; getAllItemsWithBidFromUser(User user) {
  return auctionBoard.entrySet().stream()
      .filter(entry -&gt; containsBidFromUser(entry.getValue(), user))
      .map(Map.Entry::getKey)
      .collect(Collectors.toSet());
}
</code></pre>

<p>Don't name lambda parameters after their data type if that type is not descriptive. If you aren't the one who wrote the code, would you know what the type of <code>entry</code> is without scrolling up to <code>auctionBoard</code>? My advice is to name it something like <code>bid</code>.</p>

<h1>Class Structure</h1>

<p>Here's my biggest gripe with your code. One of the primary purposes for classes is separation of concerns. A class should only contain functionality that is specific to that class.</p>

<p>Besides that, you overuse checked exceptions. Here's an excerpt from a StackOverflow post: 
checked exceptions should only be used when <strong>predictable</strong>, but <strong>preventable</strong>, errors that are <strong>reasonable to recover from</strong>.</p>

<h1>Class Member Ordering</h1>

<p>This is really a pet peeve of mine. Class members should always have a logical order. What order you use is completely up to the maintainer, BUT you definitely <em>need</em> to have an order. Public and private methods/fields should NOT be mixed together arbitrarily. Here is my personal preference for class members. Feel free to use it or not, but definitely fix the random jumble:</p>

<ul>
<li>private static final fields</li>
<li>protected static final fields</li>
<li>public static final fields</li>
<li>private static fields</li>
<li>protected static fields</li>
<li>public static fields</li>
<li>static initializer block</li>
<li>private final fields</li>
<li>protected final fields</li>
<li>public final fields</li>
<li>private fields</li>
<li>protected fields</li>
<li>public fields</li>
<li>initializer block</li>
<li>constructors</li>
<li>public methods</li>
<li>private methods</li>
<li>public static methods</li>
<li>private static methods</li>
<li>enums</li>
<li>interfaces</li>
<li>static classes</li>
<li>classes</li>
</ul>
    </div>