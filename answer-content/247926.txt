<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><code>int pairs[MAXN][2];</code> wastes memory. You don't need to read all the queries at once:</p>
<pre><code>  for(int i = 0; i &lt; q; i++)
  {
      cin &gt;&gt; L &gt;&gt; R;
      cout &lt;&lt; sumBetween(L - 1, R - 1) &lt;&lt; endl;
  }
</code></pre>
<p>works equally well. Besides, the problem statement doesn't say how many queries are there; it could be way more than the size of the array.</p>
</li>
<li><p>Your feeling that you use the wrong algorithm is well founded. Bruteforcing is almost always wrong. Look at the underlying math first. I don't want to spell out everything, just a couple of hints:</p>
<ul>
<li><p><span class="math-container">\$1*a_{L} + 2*a_{L+1}+ ... + 2^{R-L}*a_{R} = \dfrac{2^L*a_{L} + 2^{L+1}*a_{L+1}+... + 2^R*a_{R}}{2^L}\$</span></p>
</li>
<li><p>The numerator above is a difference of two partial sums of the <span class="math-container">\$2^n*a_{n}\$</span> sequence.</p>
</li>
<li><p><span class="math-container">\$1000000007\$</span> is a prime number, so division by <span class="math-container">\$2^L\$</span> modulo <code>1000000007</code> is a multiplication by a multiplicative inverse of <code>2</code> modulo <code>1000000007</code> (which is trivial to find) to the same power.</p>
</li>
</ul>
<p>I hope it is enough to get you going in the right direction. You should be able to answer each query in constant time.</p>
</li>
</ul>
    </div>