<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Efficiency &amp; Clarity</h3>

<p>For <strong>efficiency</strong> the only "flaws" (it's more for "good habit" than noticeable optimization - it doesn't matter for such a small strings) would be the order of functions (regexp is costly so it should be called on string processed as far as possible) and regexp itself which could be optimized for least amount of steps.</p>

<p>When it comes to <strong>clarity</strong> it's enough to split those function calls into named variables, so you could later read what steps you're doing here. It can be later split into separate methods, but there's no need since method stays small (style) and <em>IS</em> responsible for one thing (see below).</p>

<pre class="lang-php prettyprint-override"><code>public function getModelName(): string
{
    $className = substr(strrchr(__CLASS__, "\\"), 1);
    $camelCase = lcfirst($className);
    $snakeCase = strtolower(preg_replace('/[A-Z]/', '_$0', $camelCase));

    return $snakeCase; //seems redundant, but don't be afraid to do that
                       //when it helps in readability
                       //it's more important than that 1ms/req
}
</code></pre>

<h3>Things to consider</h3>

<ul>
<li>This method may be static - it doesn't rely on object fields, but refers to the
class, and static scope denotes that. It still might be called using instance
identifier: <code>$object::getModelName();</code></li>
<li>You're dealing with meta programming
magic here - unless it's not some dev tool your first thought should
be <strong>don't do it</strong></li>
<li><strong>SRP</strong> that @KIKOSoftware brought up is often misunderstood (vaugue naming),
and it's not about doing one thing inside the class/method (that's hardly
possible), but upon calling a method from the outside - responsibility towards
client that expects one concrete thing (coherent group of things). You're
breaking this principle anyway since your "model name" is not even an <em>instance
method</em> and it represents some meta data next to, I persume, other methods of
the class (it's not important when this class is only a data structure, but you
will be coupled to convention here instead of abstraction).</li>
</ul>
    </div>