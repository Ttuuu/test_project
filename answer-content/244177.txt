<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>About your code</h1>
<h2>Style</h2>
<p>Your style is mostly fine, except lacking a bit of white space, especially after the imports, and having mostly useless comments that break the 80 character barrier.</p>
<h2>Input validation</h2>
<p>You don't check if the user input can be parsed as an integer in the first input. The <code>int()</code> methods validates its input, however a bad input will crash your program. It would be preferable to reject the input, and ask again.</p>
<p>You don't validate the input for the yes/no question either, and it is much worse.â€¯Typing anything other than a lowercase <code>y</code> will be treated as a no. At the very least, add a <code>.lower()</code> to handle inputs like <code>Y</code>. It would be high priority to check for <code>n</code>/<code>N</code>, instead of silently treating anything else than <code>y</code> as meaning no.</p>
<p>Since you ask 3 yes/no questions (and possibly more if you'd like to add stuff like special characters), you should delegate the input and its validation to a separate method.</p>
<h2>Bug</h2>
<p>If the user says "no" (more precisely: not "y") to all 3 questions, the program will hang indefinitely, as <code>counter</code> will never increase and the inner <code>while</code> loop will never end.</p>
<h2>Security</h2>
<p><code>random</code> is not a cryptographically secure random number generator. Use <a href="https://docs.python.org/3/library/secrets.html" rel="nofollow noreferrer"><code>secrets</code></a> instead, which is very similar to use.</p>
<p>Also, ideally you'd want the probability for any character to be chosen to be the same. By separating the character categories as you did, digits are over-represented if they appear alongside letters.</p>
<h2>Outer while loop</h2>
<p>You put the entire code in an infinite loop. How many passwords do you think a user would want to generate?</p>
<h1>My take on the problem</h1>
<pre><code>def generate_password():
    password_length = ask_for_int('Enter the length of the password')
    
    choices = ''
    if ask_for_bool('Use lowercase letters? [y/n]'):
        choices += string.ascii_lowercase
    if ask_for_bool('Use uppercase letters? [y/n]'):
        choices += string.ascii_uppercase
    if ask_for_bool('Use digits? [y/n]'):
        choices += string.digits
    
    password = ''
    for _ in range(password_length):
        password += secrets.choice(choices)
        
    return password


def ask_for_int(msg):
    while True:
        print(msg)
        try:
            return int(input('&gt; '))
        except ValueError:
            print('Unable to parse number. Please try again.')


def ask_for_bool(msg):
    while True:
        print(msg)
        user_in = input('&gt; ').lower()
        if user_in =='y':
            return True
        if user_in =='n':
            return False
        print('Unable to parse answer. Please try again.')
</code></pre>
    </div>