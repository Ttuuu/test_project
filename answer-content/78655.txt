<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>Dijkstra's algorithm is an unnecessary complication when all the edges have the same cost. A simple breadth first search could be used instead.</li>
<li>Building the graph in breadth first order would allow you to set the predecessors on the same pass. Then you would be able to answer different queries directly by following the predecessors from the final state, as long as the jug sizes and start state are the same. If you only need to answer a single query you could even stop building the graph as soon as you produce the target node. </li>
<li><p>This calculation</p>

<pre><code># Pour jug 1 to jug 2.
if jug1 &gt; 0 and jug2 &lt; jug2_size:
    new_jug1 = jug1 - jug2_size + jug2
    if new_jug1 &lt; 0:
        new_jug1 = 0
    new_jug2 = jug2 + jug1 if jug1 + jug2 &lt;= jug2_size else jug2_size    
</code></pre>

<p>could be written in a simpler way:</p>

<pre><code># Pour jug 1 to jug 2.
measure = min(jug1, jug2_size - jug2)
if measure &gt; 0:
    new_jug1 = jug1 - measure
    new_jug2 = jug2 + measure
</code></pre></li>
<li><p>In <code>build_gallon_graph</code> the same call to <code>_add_connection</code> repeats many times. One way to avoid that would be to refactor into a generator:</p>

<pre><code>def transitions(jug1, jug2, jug1_size, jug2_size):

    # Fill jug 1.
    if jug1 &lt; jug1_size:
        yield jug1_size, jug2

    # Fill jug 2.
    if jug2 &lt; jug2_size:
        yield jug1, jug2_size

    # Pour jug 1 to jug 2.
    measure = min(jug1, jug2_size - jug2)
    if measure &gt; 0:
        yield jug1 - measure, new_jug2 = jug2 + measure

    # Pour jug 2 to jug 1.
    measure = min(jug1_size - jug1, jug2)
    if measure &gt; 0:
        yield jug1 + measure, new_jug2 = jug2 - measure

    # Empty jug 1.
    if jug1 &gt; 0:
        yield 0, jug2

    # Empty jug 2.
    if jug2 &gt; 0:
        yield jug1, 0

def build_gallon_graph(g, jug1, jug2, jug1_size, jug2_size):
    for new_jug1, new_jug2 in transitions(jug1, jug2, jug1_size, jug2_size):
        _add_connection(g, jug1, jug2, new_jug1, new_jug2,
                        jug1_size, jug2_size) 
</code></pre></li>
</ul>
    </div>