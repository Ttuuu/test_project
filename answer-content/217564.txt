<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I don't see anything major. Just some nitpicks:</p>

<p><code>offsets_to_surrounding_tiles</code> could be written using a list comprehension/generator expression so the offsets don't need to be hard-coded:</p>

<pre><code>def offsets_to_surrounding_tiles2():
    return [(x, y)
            for y in range(-1, 2)
            for x in range(-1, 2)
            if (x, y) != (0, 0)] # So we don't include the centre

&gt;&gt;&gt; offsets_to_surrounding_tiles()
[(1, 0), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (0, 1), (1, 1)]
</code></pre>

<p>This has the benefit that if you ever decided to expand beyond the Moore Neighborhood that you're currently using, you can modify this function to generate the offsets for a greater neighborhood by including a <code>depth</code> parameter:</p>

<pre><code>def offsets_to_surrounding_tiles2(depth):
    return [(x, y)
            for y in range(-depth, depth + 1)
            for x in range(-depth, depth + 1)
            if (x, y) != (0, 0)]

&gt;&gt;&gt; offsets_to_surrounding_tiles2(1)
[(-1, -1), (0, -1), (1, -1), (-1, 0), (1, 0), (-1, 1), (0, 1), (1, 1)]

&gt;&gt;&gt; offsets_to_surrounding_tiles2(2)
[(-2, -2), (-1, -2), (0, -2), (1, -2), (2, -2), (-2, -1), (-1, -1), (0, -1), (1, -1), (2, -1), (-2, 0), (-1, 0), (1, 0), (2, 0), (-2, 1), (-1, 1), (0, 1), (1, 1), (2, 1), (-2, 2), (-1, 2), (0, 2), (1, 2), (2, 2)]
</code></pre>

<p>This is potentially a violation of <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it" rel="nofollow noreferrer">YAGNI</a>, but it may be a good example of what can be done with comprehensions. This function could also be written as a generator expression if you think that the whole list won't necessarily need to be consumed.</p>

<p>It also doesn't seem proper to have this function as an instance method of the class since it doesn't have anything to do with any particular instance (evidenced by the fact that <code>self</code> is ignored). This would be better as a static/class method, or (imo) better yet, as a loose function unrelated to the class.</p>

<hr>

<p>You have a few functions that use several <code>return</code>s instead of just using logical operators. For example:</p>

<pre><code>def inside_image(self, x, y):
    if x &lt; 0:
        return False
    if y &lt; 0:
        return False
    if x &gt;= self.WIDTH:
        return False
    if y &gt;= self.HEIGHT:
        return False
    return True
</code></pre>

<p>I think this would be cleaner by making use of <code>and</code> and comparison chaining:</p>

<pre><code>def inside_image(self, x, y):
    return 0 &lt;= x &lt; self.WIDTH
           and 0 &lt;= y &lt; self.HEIGHT
</code></pre>

<p>I think it's much easier to tell the logic at a glance with this version. Arguably, this function could be made easier to test by passing in the width and height too. Right now, you need to instantiate a <code>Maze</code> to test this function, which is more painful than it needs to be.</p>
    </div>