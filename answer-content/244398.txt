<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>
<p>Your style is quite good, but you can tell that the code isn't written by a Pythonista.</p>
<ul>
<li><p>Whilst line length can be a touchy subject, it's mostly left at 79 if you follow PEP 8 or 90 if you're running Black.<br>
This is causing me to have a suboptimal experience editing your code.</p>
</li>
<li><p>Defining functions on one line, like <code>set_x_for_yes</code>, are normally big no-nos.</p>
</li>
<li><p>I'm not a fan of your single letter variables. But I'm also not entirely sure what I'd replace most of them with.</p>
</li>
<li><p>(Potential religious war) The 'Pythonic' form of <code>list(map(...))</code> is a list comprehension.
For example in <code>virsh</code> we can use:</p>
<blockquote>
<pre class="lang-py prettyprint-override"><code>return list(map(lambda line: list(map(lambda x: x.strip(), re.split('\\s{2,}', line))), out))
</code></pre>
</blockquote>
<pre class="lang-py prettyprint-override"><code>return [
    [x.strip() for x in re.split('\\s{2,}', line)]
    for line in out
]
</code></pre>
</li>
<li><p>Like most interpreted languages there is no 'main' entry point.
As the code is interpreted from top to bottom.
However sometimes we don't want code to run if it is not the 'main' script.
To deal with this we can use an <code>if __name__ == '__main__'</code> guard to prevent this code running if you import it.</p>
</li>
<li><p>Python is quite allergic to chaining, and so it's common for the <code>subprocess.Popen</code> and <code>.communicate()</code> chain to be split across two assignments.</p>
<pre class="lang-py prettyprint-override"><code>proc = subprocess.Popen(
    ['virsh', command, arg],
    stdout=subprocess.PIPE,
    stderr=subprocess.STDOUT
)
out, _ = proc.communicate()
</code></pre>
</li>
<li><p>Having unneeded parentheses are really discouraged as they impede readability.</p>
</li>
</ul>
<h1>Changes</h1>
<ul>
<li><p>In <code>print_table</code>, converting the iterator returned from <code>map</code> to a <code>list</code> is unneeded.
Additionally we can opt to use a generator expression instead.
This is the same as the list comprehension before except it is wrapped in parentheses <code>()</code> and builds a generator.
Python has some sugar when a generator expression is the only argument to a function and lets you drop the double parentheses <code>()</code>.</p>
<blockquote>
<pre class="lang-py prettyprint-override"><code>sum(list(map(lambda col: col[1] + 1, cols)))
</code></pre>
</blockquote>
<pre class="lang-py prettyprint-override"><code>sum(col[1] + 1 for col in cols)
</code></pre>
</li>
<li><p>In <code>print_table</code>, it's nice to see you using the <code>' ' * total_len</code> sugar.</p>
</li>
<li><p>In <code>print_table</code>, we can use <code>enumerate</code> rather than manually looping through <code>c</code> and <code>i</code>.</p>
<pre class="lang-py prettyprint-override"><code>for i, item in enumerate(items, 1):
</code></pre>
</li>
<li><p>In <code>print_table</code>, rather than using a turnery to build 1 or 0, you can just use <code>int</code>.
I would also be surprised if the functions don't support taking a bool in-place for an integer.</p>
</li>
<li><p>In <code>print_table</code>, <code>col_offset</code> is only ever used as <code>x + col_offset</code>. At which point you might as well just update <code>x</code>.</p>
</li>
<li><p>In <code>print_table</code>, you can merge the <code>if grey else</code> turnery into the <code>gray_color</code> line to build the correct colour with less lines of code.</p>
</li>
</ul>
<p>Additional changes not made to the below code:</p>
<ul>
<li><p>It would be nice to add an Enum to make building the colour pairs easier. By using an <code>IntFlag</code> we can get the benefits of it acting like an int and act like flags.
However your current mapping makes this hard.
I would change it so the last bit is to change if the colour is grey.</p>
<pre class="lang-py prettyprint-override"><code>class Colours(enum.IntFlag):
    DEFAULT = 0
    GRAY = 1
    SELECT = 2
    HEAD = 4
</code></pre>
<p>This has a couple of benefits:</p>
<ol>
<li>If you decide to later change what the values are it is easier.</li>
<li>We can use <code>Colours.DEFAULT</code> or <code>Colours.SELECT | Colours.GRAY</code> to select the wanted colours.</li>
<li>It means we can change <code>print_help</code> to not use magic numbers.</li>
</ol>
</li>
<li><p>In <code>render</code>, I would rearrange a lot of the table information.</p>
<p>The following values never change:</p>
<ul>
<li>Headers.</li>
<li>Which columns can be grey.</li>
<li>Mutations (<code>set_x_for_yes</code>) to the items.</li>
<li>Selecting grey rows, <code>gray_sel</code> / <code>sel_test</code>.</li>
</ul>
<p>Values that can change each run:</p>
<ul>
<li>The x position.</li>
<li>The y position.</li>
<li>The items.</li>
<li>The width of each column.</li>
</ul>
<p>And so I would move all the constants outside of the function.
We can join these two tables together with <code>zip</code>.</p>
</li>
<li><p>In <code>print_table</code>, you can remove the need for the two calls to <code>stdscr.insstr</code> with the value <code>' ' * total_len</code> if you pad the values.</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; '{1:&lt;{0}}|{2:^{0}}|{3:&gt;{0}}'.format(5, 1, 2, 3)
'1    |  2  |    3'
</code></pre>
</li>
<li><p>A lot of <code>print_table</code> is not actually about printing the table it's about colouring it correctly.
I would build another function that correctly colours everything.</p>
<ul>
<li>If we change each item to a tuple of the item's string and the item's colour than it is easier to print the entire table.</li>
<li>If we include the headers in this function we can format everything correctly, and make <code>print_table</code> a very simple nested for loop.</li>
</ul>
<pre class="lang-py prettyprint-override"><code>def select_colors(values, sel_i, gray_sel, grays):
    for i, row in enumerate(values):
        gray_row = gray_sel(row)
        new_row = []
        for item, gray in zip(row, grays):
            color = Colours.SELECT if sel_i == i else Colours.DEFAULT
            if gray_row and gray:
                color |= Colours.GRAY
            if i == 0:
                color = Colours.HEAD
            new_row.append((item, curses.color_pair(color)))
        yield new_row
</code></pre>
</li>
</ul>
<pre class="lang-py prettyprint-override"><code>import subprocess
import re
import time
import curses


def virsh(command, arg):
    proc = subprocess.Popen(
        ['virsh', command, arg],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT
    )
    out, _ = proc.communicate()
    return [
        [
            x.strip()
            for x in re.split('\\s{2,}', line)
        ]
        for line in re.split('[\r\n]+', out.decode("utf-8"))
    ]


def print_table(stdscr, head_color, sel_color, sel_i, x, y, cols, gray_sel, items):
    total_len = sum(col[1] + 1 for col in cols)
    stdscr.insstr(y, x, ' ' * total_len, head_color)
    if sel_i &gt; -1:
        stdscr.addstr(y + sel_i + 1, x, ' ' * total_len, sel_color)

    for c, (name, minsize, gray) in enumerate(cols):
        stdscr.addstr(y, x, name, head_color)
        for i, item in enumerate(items, 1):
            color = curses.color_pair(
                sel_i == (i - 1)
                + (3 if gray and gray_sel(item) else 0)
            )
            stdscr.addstr(y + i, x, item[c], color)
        x += minsize + 1


def print_help(stdscr, help_color, helps):
    height, width = stdscr.getmaxyx()
    stdscr.insstr(height - 1, 0, ' ' * width, help_color)
    max_len = max(len(h[1]) for h in helps) + 1
    offset = 0
    for key, name in helps:
        stdscr.insstr(height - 1, offset, key)
        stdscr.insstr(height - 1, offset + len(key), name, help_color)
        offset += len(key) + max_len


def set_x_for_yes(x):
    return 'X' if x == 'yes' else ' '


def render(stdscr, vms, nets, pools, sel, sel_i):
    pool_diff = 2
    longest_net = max(len(net[0]) for net in nets)
    longest_pool = max(len(pool[0]) for pool in pools)
    longest_net = max(longest_net, longest_pool - pool_diff)
    height, width = stdscr.getmaxyx()
    net_offset = width - longest_net - 9 - pool_diff - 3
    vm_width = net_offset - 3 - 9 - 1 - 2

    vm_table = [("ID", 3, False), ("VM", vm_width - 1, True), ("STATUS", 9, False)]
    net_table = [("NET", longest_net, True), ("STATUS", 8, False), ("A", 1, False), ("P", 1, False)]
    pool_table = [("POOL", longest_net + pool_diff, True), ("STATUS", 8, False), ("A", 1, False)]
    nets = [
        [net[0], net[1], set_x_for_yes(net[2]), set_x_for_yes(net[3])]
        for net in nets
    ]
    pools = [
        [pool[0], pool[1], set_x_for_yes(pool[2])]
        for pool in pools
    ]

    tables = [
        (0, 0, 0, vm_table, lambda vm: vm[2] != "running", vms),
        (1, net_offset, 0, net_table, lambda net: net[1] != "active", nets),
        (2, net_offset, len(nets) + 2, pool_table, lambda pool: pool[1] != "active", pools)
    ]

    head_color = curses.color_pair(2)
    sel_color = curses.color_pair(1)
    for (sel_c, x, y, table, sel_test, items) in tables:
        print_table(stdscr, head_color, sel_color, sel_i if sel == sel_c else -1, x, y, table, sel_test, items)

    print_help(
        stdscr,
        curses.color_pair(1),
        [("TAB", "Next"), ("F1", "Start"), ("F2", "Stop"), ("F10", "Quit")]
    )


def main(stdscr):
    curses.curs_set(0)
    curses.halfdelay(20)
    curses.start_color()
    curses.use_default_colors()
    curses.init_pair(1, 0, 6)
    curses.init_pair(2, 0, 2)
    curses.init_pair(3, 8, -1)
    curses.init_pair(4, 8, 6)
    sel = 0
    sel_i = 0

    start_commands = ['start', 'net-start', 'pool-start']
    stop_commands = ['destroy', 'net-destroy', 'pool-destroy']

    while True:
        vms = virsh('list', '--all')[2:][:-1]
        nets = virsh('net-list', '--all')[2:][:-1]
        pools = virsh('pool-list', '--all')[2:][:-1]

        args = [vms, nets, pools]
        arg_indexes = [1, 0, 0]

        stdscr.clear()
        render(stdscr, vms, nets, pools, sel, sel_i)
        stdscr.refresh()
        c = stdscr.getch()

        if c == curses.KEY_F10:
            exit()
        elif c == ord('\t'):
            sel = 0 if sel == 2 else sel + 1
        elif c == curses.KEY_DOWN or c == curses.KEY_UP:
            sel_i += -1 if c == curses.KEY_UP else 1
        elif (c == curses.KEY_F1 or c == curses.KEY_F2) and sel_i &lt; len(args[sel]):
            commands = stop_commands if c == curses.KEY_F2 else start_commands
            virsh(commands[sel], args[sel][sel_i][arg_indexes[sel]])

        if sel_i == -1:
            sel_i += 1
        if sel_i &gt;= len(args[sel]):
            sel_i = len(args[sel]) - 1


if __name__ == '__main__':
    curses.wrapper(main)
</code></pre>
    </div>