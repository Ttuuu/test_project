<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Slepic and Henrik are wondering about the use of <code>foreach</code> and enumerator, and I'm too.</p>

<p>Anyway, instead of having different versions with actual implementations for the same purpose (count the distinct elements), you can create one private method with the full implementation, and then, just call back this method on the other methods. </p>

<p>So, the main implementation would be like this : </p>

<pre><code>private static int CountDistinctIterator&lt;TSource&gt;(IEnumerable&lt;TSource&gt; source, Func&lt;TSource, bool&gt; predicate, IEqualityComparer&lt;TSource&gt; comparer)
{
    if (source == null) throw new ArgumentNullException(nameof(source));

    var set = new HashSet&lt;TSource&gt;(comparer);
    var count = 0;
    foreach (TSource element in source)
    {
        checked
        {
            if (set.Add(element) &amp;&amp; predicate(element))
            {
                count++;
            }

        }
    }

    return count;
}
</code></pre>

<p>Now, it's a matter of calling back this method with the appropriate arguments. </p>

<p>Like this : </p>

<pre><code>public static int CountDistinct&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source)
{
    return CountDistinctIterator&lt;TSource&gt;(source, (s) =&gt; true, null);
}

public static int CountDistinct&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source,  IEqualityComparer&lt;TSource&gt; comparer)
{
    return CountDistinctIterator&lt;TSource&gt;(source, (s) =&gt; true, comparer);
}

public static bool AnyDistinct&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, bool&gt; predicate)
{
    return CountDistinctIterator&lt;TSource&gt;(source, predicate, null) == 1;
}

public static bool AnyDistinct&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source)
{
    return CountDistinctIterator&lt;TSource&gt;(source, (s) =&gt; true, null) == 1;
}
</code></pre>

<p>although, for this <code>Distinct</code> I don't see any usage for <code>Func&lt;TSource, bool&gt; predicate</code> except for checking if the element exists or not. As the <code>Distinct</code> would get the unique elements, and if you say <code>element == xxx</code> it'll always return <code>1</code> if exists, and <code>0</code> if not. Unless there is any other uses except this one, in my opinion, I find it beneficial if rename this method: </p>

<pre><code>DistinctCount&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, bool&gt; predicate)
</code></pre>

<p>to something meaningful other than <code>DistinctCount</code> like for instance <code>DistinctAny</code> which return boolean (true if <code>DistinctCount</code> returns 1, false if 0). </p>

<p><strong>UPDATE :</strong> 
I have changed the methods name from <code>DistinctCount</code> to <code>CountDistinct</code> the reason of this is because the method is <code>Counting</code>, so the Count needs to be first so it would be easier to picked up, the other reason is doing this will make it appear after <code>Count</code> on the intellisense list. I also added <code>AnyDistinct</code> methods which replaced the mentioned method (the one with <code>Func&lt;TSource, bool&gt;</code>).</p>
    </div>