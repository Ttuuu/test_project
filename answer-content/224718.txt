<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>while len(points) &gt; 1:
</code></pre>
</blockquote>

<p>Shouldn't it be: </p>

<pre><code>while len(points) &gt; 0:
</code></pre>

<p>or else the last point "hangs" unhandled in the points list when finished.</p>

<hr>

<blockquote>
<pre><code>    ...
    groups[key] = []
    ref = points.pop(0)
    ...
</code></pre>
</blockquote>

<p>Don't you forget to insert the <code>ref</code> point itself into the new list?:</p>

<pre><code>     ...
     ref = points.pop(0)
     groups[key] = [ ref ]         
     ...
</code></pre>

<hr>

<blockquote>
  <p><code>if d &lt; 30:</code></p>
</blockquote>

<p>I would have this distance (<code>30</code>) as a parameter of the function:</p>

<pre><code>def group_points(points, distance):
</code></pre>

<p>in order to make it more useful.</p>

<hr>

<blockquote>
<pre><code>for i, point in enumerate(points):
    d = get_distance(ref, point)
    if d &lt; distance:
        groups[key].append(points[i])
        points[i] = None
points = list(filter(lambda x: x is not None, points))
</code></pre>
</blockquote>

<p>can be simplified to:</p>

<pre><code>for point in points:
    if get_distance(ref, point) &lt; distance:
        groups[key].append(point)
points = list(filter(lambda x: x not in groups[key], points))
</code></pre>

<p>But as eric.m notices in his comment, the original may be more efficient than my suggestion.</p>

<hr>

<blockquote>
<pre><code>return list([[int(np.mean(list([x[0] for x in groups[arr]]))), int(np.mean(list([x[1] for x in groups[arr]])))] for arr in groups])
</code></pre>
</blockquote>

<p>A rather scary statement. Split it up in meaningful parts:</p>

<pre><code>def points_mean(points):
  return list(np.mean(points, axis = 0).astype(int))
</code></pre>

<p>and then</p>

<pre><code>return map(points_mean, groups)
</code></pre>

<p>BtW: Why are you operating in integers and not in floating points?</p>

<hr>

<p>Your method changes the input data set (<code>points.pop()</code>), which you as a client normally don't expect. To avoid that, you can do something like:</p>

<pre><code>def group_points(points, distance):
    if len(points) == 0 or distance &lt; 0: return []
    groups = [[points[0]]]
    for point in points[1:]:
        handled = False
        for group in groups:
            if get_distance(group[0], point) &lt; distance:
                group.append(point)
                handled = True
                break

        if not handled:
            groups.append([point])

# perform average operation on each group
return map(points_mean, groups)

def points_mean(points):
  return list(np.mean(points, axis = 0).astype(int))

def get_distance(ref, point):
    x1, y1 = ref
    x2, y2 = point
    return math.hypot(x2 - x1, y2 - y1)
</code></pre>

<hr>

<p>Disclaimer: I'm not that familiar with Python, so something in the above can maybe be done simpler and more succinct, so regard it as an attempt to think along your lines of thoughts and not as a state of the art.</p>
    </div>