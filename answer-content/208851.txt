<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Performance measurement</li>
</ol>

<p>"The only problem is that it takes about 1-1.2 seconds to create, save, password protect, format, create two data validation lists, etc"</p>

<p>Which portion of this 1000 to 1200 milliseconds corresponds to data retrieval? which one to formatting ranges or to saving? Try setting multiple timers each for a different task.</p>

<ol start="2">
<li>Variables and naming scheme</li>
</ol>

<p>Perhaps this has nothing to do with performance, however, it affects the readability and appreciation of your algorithm. I see hard-coded variables like:</p>

<pre><code>Dim BASEPATH As String: BASEPATH = "M:\11-19-2018\"
</code></pre>

<p>Consider using constants:</p>

<pre><code>Const BASEPATH As String = "M:\11-19-2018\"
Const colManager = 3, colLogin As Long = 4, colEC As Long = 5
</code></pre>

<p>Consider using self-explanatory names. Insead of i, j, k, varArray() varArray2 etc, I would rather use:
iRow, iColm, iField, iRecord, iManager, iEmployee.
vManagers(), vManagers_trans(), the latter being the transpose of the former</p>

<ol start="3">
<li>Code simplification and efficiency</li>
</ol>

<p>Instead of reffering frequently to the upper bound of 1st dimension, which is constant throughout the procedure, one may fix it like this:</p>

<pre><code>Const NbFields As Integer = 19
Dim varArray() As Variant: ReDim varArray(1 To NbFields, 1 To 1)
</code></pre>

<p>For this line:</p>

<pre><code>For j = 2 To .UsedRange.Rows.Count + 1
</code></pre>

<p>What is the point in retrieving data below the UsedRange? By definition, it's not USED, hence has no datum to get from.</p>

<p>I'm not sure how helpful are these assignments:</p>

<pre><code>strEC = .Cells(j, colEC)
strManager = .Cells(j, colManager)
strLogin = .Cells(j, colLogin)
</code></pre>

<p>These strings will be overwritten by the next iteration. Only those of the last iteration will SURVIVE!</p>

<p>For the following loop:</p>

<pre><code>For k = 1 To UBound(varArray, 1)
    varArray(k, x) = .Cells(1, k)
Next
</code></pre>

<p>I think it may be replaced by one assignment:</p>

<pre><code>   varArray() = .Cells(1,1).Resize(1, NbFields).Value2
</code></pre>

<p>Even the If-Else may be optimized, so instead of:</p>

<pre><code>For k = 1 To UBound(varArray, 1)
    If k = 1 Then
       varArray(1, x) = CStr(Format(.Cells(j, k), ...
    Else
       varArray(k, x) = .Cells(j, k)
    End If
</code></pre>

<p>why not simplifying things:</p>

<pre><code>varArray(1, 1) = CStr(Format(.Cells(j, 1), ...
For k = 2 To NbFields
    varArray(k, x) = .Cells(j, k)
</code></pre>

<p>As you can see, reaping that conditional expression (j * k) times is an unnecessary overhead.</p>
    </div>