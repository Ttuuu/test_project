<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here's a solution that only uses one extra data structure.  I use the <code>heapq</code> library to maintain a heap, where it easy to check the smallest item and remove it when it's not needed any longer.  You could also use <code>SortedList</code> from the wonderful <a href="http://www.grantjenks.com/docs/sortedcontainers/" rel="nofollow noreferrer">sortedcontainers</a> library.</p>

<p>The basic idea is to loop over the intervals sorted by start time. If some intervals have the same start time, then sort those by end time.  Fortunately, Python's <code>sort()</code> method or <code>sorted()</code> function will take care of that.</p>

<p>For each start-end interval, the end time is saved in the heap.  </p>

<p>For any end times in the heap that are earlier than the current start time, we reduce the number of guests and remove the end time from the heap.</p>

<p>The start time represents the arrival of a guest, so increment the number of guests and check if it is a new maximum number.</p>

<p>After the last start time, the number of guests can only decrease, so we don't need to process any left over end times.</p>

<p>Here is the code:</p>

<pre><code>import heapq

    def maxIntervalOverlap(intervals):
        guests = 0
        maxguests = 0
        maxtime = None

        heap = []

        for start, end in sorted(intervals):
            heapq.heappush(heap, end)

            # handle intervals that ended before 'start' time
            while heap[0] &lt; start:
                heapq.heappop(heap)
                guests -= 1

            # add the guest that just arrived at 'start' time
            guests += 1
            if guests &gt; maxguests:
                maxguests = guests
                maxtime = start

        print(f"Time with maximum guests is {maxtime}.")
</code></pre>
    </div>