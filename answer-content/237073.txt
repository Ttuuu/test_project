<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Interesting code! Am about to write something similar for a quite extreme case (decoration elements for procedurally generated terrain) so I could share a few thoughts I had:</p>

<p>That mechanism for <code>prePooledObjects</code> feels a bit too entwined with the pooling system itself. Why not provide a single function like:</p>

<pre><code>PrePoolObjects(GameObject go, int count);
</code></pre>

<p>That would directly prepool a number of objects without the need for that extra struct and all that. Your concept is only necessary if you really want to provide the information what needs to be prePooled a single time and also clear the pool regularly for some reason.</p>

<p>Consider adding more than one new object when the queue is empty. For memory access reasons, it tends to be faster to instantiate multiple instances one after another than to instantiate multiple times at separate times.</p>

<p>Together with the above, it might make sense to shrink the number of pooled objects over time. At least if there are rare moments when a ton of a particular object is needed.</p>

<p>A really, really smart pooling system would evaluate the size of the pool constantly in the background (for example once every 5 physics updates) and ensure that there are not too few and not too many objects held "in stock". Important for that is a hysteresis, because of course you do not want to immediately grow the pool whenever a single instance was removed from it and vice versa. Only when it is too full or too empty for a certain period of time, it would start destroying or creating instances. Such a system would nicely adapt to the current need and not load up the memory when a single level progresses.
Admittedly this concept might be more necessary for my infinite-terrain game than for a game that's based on levels where you can flush the pool when switching scenes.</p>

<p>Last but not least: Using .name and perform that dictionary search every time could be replaced with custom constants that just hold an <code>int</code> and are the indices in an array/list of pool queues.
Then instead of providing the prefab to the <code>GetPooledObject</code> call, you provide that int constant and it takes the relevant queue from the array/list without any lookup operation.
The downside of this concept is the slight inconvenience of not being able to use prefabs immediately but first needing to define that constant. Also that might make using drag and drop with the prefabs more complicated or impossible.</p>
    </div>