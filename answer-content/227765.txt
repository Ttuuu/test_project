<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Some style points first.</h2>

<ul>
<li><p>Always wrap statement and loop blocks in <code>{}</code> eg you wrote <code>for (let j = 0; j &lt; x2; j++) someFunction(j)</code> to avoid maintenance headaches use the curlies <code>for (let j = 0; j &lt; x2; j++) { someFunction(j) }</code></p></li>
<li><p>Don't declare the same variable over and over. There is no advantage to locally scoping variables to code blocks unless you are writing very long functions, and you should avoid writing functions more than a page long. </p></li>
<li><p>In this case <code>j</code> is not the best choice of variable name for the loop counter. <code>x</code> would be far better.</p></li>
</ul>

<p>Rewriting your function with the above points</p>

<pre><code>var x;
if (x1 &lt; 0) {
    for (x = x1 + gridX; x &lt; gridX; x++) { someFunction(x) }
    for (x = 0; x &lt; x2; x++) { someFunction(x) }
} else if (x2 &gt;= gridX) {
    for (x = x1; x &lt; gridX; x++) { someFunction(x) }
    for (x = 0; x &lt; x2 - gridX; x++) { someFunction(x) }
} else {
    for (x = x1; x &lt;= x2; x++) { someFunction(x) }
}
</code></pre>

<h2>The remainder operator <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder" rel="nofollow noreferrer"><code>%</code></a></h2>

<blockquote>
  <p><em>"I feel like there must be a better way to write it."</em></p>
</blockquote>

<p>You can simplify the solution by using the remainder operator <code>%</code>. First ensure that <code>x1</code>, and <code>x2</code> are positive by adding the grid width (or height)
Then use remainder as you loop over the items to get the wrapped coordinate.</p>

<h3>Example replaces your function</h3>

<pre><code>// Assumes x1 is never less than -gridX and that x2 is always &gt; x1
const end = x2 + gridX;
var x = x1 + gridX;    
while (x &lt;= end) { someFunction((x++) % gridX) }
</code></pre>

<h3>More detailed example of wrapped play-field</h3>

<p>The example below demonstrates using remainder and has two functions that take a x,y gird coordinated and map it to an array. <code>setGrid(x, y, val)</code> as long as the grid coordinates are greater than <code>gridSteps</code> (same as your <code>gridX</code>) <code>* -gridMin</code></p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const AABB = { x: 0, y: 0, w: 90, h: 90 } // values in pixels
const gridSteps = 10;  // same as your gridX
const gridMin = 100; // min number of grids below origin 0,0. Used to translate 
                     // coordinates to positive values
const grid = new Uint8Array(gridSteps ** 2); // grid array

function setGrid(x, y, val) {  
    x += gridSteps * gridMin; // translate to positive space
    y += gridSteps * gridMin; // translate to positive space
    const idx = (x % gridSteps) + (y % gridSteps) * gridSteps;
    grid[idx] = val;
}

// version 2
const gridMinC = gridSteps * gridMin;
function setGrid(x, y, val) {  
    const idx = ((x + gridMinC) % gridSteps) + ((y + gridMinC) % gridSteps) * gridSteps;
    grid[idx] = val;
}

   




requestAnimationFrame(update);
const scaleMouse = 0.05; // scales mouse to add movement
const inset = 3, inset2 = inset * 2;
var w = 1, h = 1;
const gridImg = createImage(w, h);
const ctx = canvas.getContext("2d");
const mouse  = {x : 0, y : 0};
document.addEventListener("mousemove", mouseEvents);
function fillGrid(AABB, gridSteps, col = "#9998") { // Draw wrapped collision boxes
    var x, y, xs = w / gridSteps, ys = h / gridSteps;
    const yStart = AABB.y / ys | 0, yEnd = (AABB.y + AABB.h) / ys | 0;
    const xStart = AABB.x / xs | 0, xEnd = (AABB.x + AABB.w) / xs | 0;
    ctx.fillStyle = col;
    ctx.beginPath();
    for (y = yStart; y &lt;= yEnd; y += 1) {
        const yy = y % gridSteps;
        for (x = xStart; x &lt;= xEnd; x += 1) {
            const xx = x % gridSteps;
            ctx.rect(xx * xs + inset, yy * ys + inset, xs - inset2, ys - inset2);            
        }
    }
    ctx.fill();
}
function drawBox(AABB, col = "#000") {  // draws AABB box wrapped
    ctx.strokeStyle = col;
    ctx.lineWidth = 2;
    const x = AABB.x % w;
    const y = AABB.y % h;
    ctx.strokeRect(x, y, AABB.w, AABB.h);
    var corner = 0;
    if (x + AABB.w &gt; w) {
        ctx.strokeRect(x- w, y, AABB.w, AABB.h);
        corner ++;
    }    
    if (y + AABB.h &gt; h) {
        ctx.strokeRect(x, y - h, AABB.w, AABB.h);
        corner ++;
    }
    if (corner === 2) { ctx.strokeRect(x - w, y - h, AABB.w, AABB.h) }
}
function update() {
    if (w !== (innerWidth / 2 | 0) || h !== innerHeight) {
        w = gridImg.width = canvas.width = innerWidth / 2 | 0;
        h = gridImg.height = canvas.height = innerHeight;
        drawGridLines(gridImg.ctx, gridSteps);
    }
    ctx.globalCompositeOperation = "copy";  // copy transparent pixels to destination 
    ctx.drawImage(gridImg, 0, 0);
    ctx.globalCompositeOperation = "source-over"; // default comp mode  
    
    //Use mouse dist from center to scale speed of AABB
    AABB.x = (AABB.x + (mouse.x - w / 2) * scaleMouse + w) % w;
    AABB.y = (AABB.y + (mouse.y - h / 2) * scaleMouse + h) % h;
    fillGrid(AABB, gridSteps);
    drawBox(AABB);
    requestAnimationFrame(update);
}
function mouseEvents(e){
    const bounds = canvas.getBoundingClientRect();
    mouse.x = e.pageX - bounds.left - scrollX;
    mouse.y = e.pageY - bounds.top - scrollY;
}
function createImage(width, height) {
    const img = document.createElement("canvas");
    img.width = width, img.height = height;
    img.ctx = img.getContext("2d");
    return img;
}
function drawGridLines(ctx, gridSteps, col = "red") {
    var i, xs = w / gridSteps, ys = h / gridSteps;
    ctx.lineWidth = 2;
    ctx.strokeStyle = col;
    ctx.beginPath();
    for (i = 0; i &lt;= gridSteps; i ++) {
        ctx.moveTo(0, i * ys);
        ctx.lineTo(w, i * ys);
        ctx.moveTo(i * xs, 0);
        ctx.lineTo(i * xs, h);
    }
    ctx.stroke();
}</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>canvas { position : absolute; top : 0px; left : 0px; cursor: crosshair;}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;canvas id="canvas"&gt;&lt;/canvas&gt;</code></pre>
</div>
</div>


<h2>Last point</h2>

<blockquote>
  <p><em>"especially if I wanted to make my game 3 dimensional in future."</em></p>
</blockquote>

<p>You would never use a 3D grid for collisions as their size can grow very quickly, a 1024 cube would require a minimum or 1Gig of RAM. What you want are <a href="https://en.wikipedia.org/wiki/Quadtreehttps://en.wikipedia.org/wiki/Quadtree" rel="nofollow noreferrer">Quad Trees</a> or even <a href="https://en.wikipedia.org/wiki/Octree" rel="nofollow noreferrer">Octrees</a> and the many variations, as they provide fast data structures for all sorts of spacial related problems 2D, 3D, and more :D</p>

<p>Collision grids are great for lowres 2D and limited 3D uses but you will need to consider alternatives when resolutions grow.</p>
    </div>