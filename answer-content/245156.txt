<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>On the whole this is nicely done for an application made during your first week of C programming. The functions are generally reasonably-sized, the code is comprehensible and the design decisions are understandable given the size and purpose of the application.</p>
<p>My remarks mostly center around improving the design to support new features and avoid bugs. The merit of many of my points may be negligible if you're never planning on adding to the application beyond what you have, but if you'd like to add (for example) even fairly unassuming improvements like an AI opponent or arbitrary board sizes, the current design would be pushed beyond its narrow limits.</p>
<h3>Avoid globals</h3>
<p>Your core state variables</p>
<pre><code>int player = 1, choice;
int places[10] = {'o', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
</code></pre>
<p>should all be scoped to <code>main</code> at minimum. The problem with the existing design is that all functions operating on these <a href="https://en.wikipedia.org/wiki/Global_variable" rel="nofollow noreferrer">global variables</a> are <a href="https://en.wikipedia.org/wiki/Idempotence#Computer_science_meaning" rel="nofollow noreferrer">non-idempotent</a>. This means they are <a href="https://en.wikipedia.org/wiki/Reentrant_(subroutine)" rel="nofollow noreferrer">unsafe in a multithreaded environment</a> and modify <a href="https://en.wikipedia.org/wiki/State_(computer_science)#Program_state" rel="nofollow noreferrer">state</a> outside of themselves which makes the application difficult to reason about and may lead to bugs.</p>
<p>The parameterless functions in your original code creates an illusion of simplicity. But in reality these functions are quite unsafe and would inhibit a larger application significantly.</p>
<h3>Encapsulate related data</h3>
<pre><code>int player = 1, choice;
int places[10] = {'o', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
</code></pre>
<p>Are loose variables that are conceptually attributes of the same entity and as such should be grouped in a <code>TicTacToePosition</code> structure along with a set of functions that operate on this structure. This makes it easier to understand the purpose and relationship between these pieces of data. Taken out of context, a variable name like <code>places</code> has non-obvious purpose, but as a struct member, <code>position.places</code> or <code>ttt_state.squares</code> is a bit clearer.</p>
<h3>Separate UI from game logic</h3>
<p>If you want to generalize and expand on your code, you'll need to detach user interaction from game logic. Doing so makes the code maintainable and expandable through <a href="https://en.wikipedia.org/wiki/Loose_coupling" rel="nofollow noreferrer">looser coupling</a>.</p>
<p>There are many subtle manifestations of the strong UI-game logic coupling throughout the app, like:</p>
<pre><code>int markBoard(char mark){
    for (int i = 1; i &lt; 10; ++i) {
        //       ^
        if (choice == i &amp;&amp; places[i]-48 == i) {
            //                      ^^^
            places[i] = mark;
            return 0;
        }
    }
    return 1;
}
</code></pre>
<p>In the above code, the 1-indexing seems to be a convenience measure to avoid having to normalize 1-indexed user input to internal logic. But this convenience leads to an awkward board design for the programmer and a confusing <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)" rel="nofollow noreferrer">magic</a> <code>'o'</code> character at the 0-th index.</p>
<p>Additionally, <code>-48</code> is a conversion between external UI and internal game logic that <code>markBoard</code> <a href="https://en.wikipedia.org/wiki/Single-responsibility_principle" rel="nofollow noreferrer">shouldn't be responsible for</a>. The correct name for this function is <code>convertFromUserInputCharAndMarkBoard</code>, which is overburdened. Normalize/sanitize user input outside of the tic tac toe board logic. This lets you keep the interface user-centric while supporting an intuitive internal representation for the programmer.</p>
<p><code>switchPlayers</code> does more than switch players: it also takes user input. Those are two distinct things that should be separate.</p>
<p><code>checkForWin</code> does win checking but also does IO, a <a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)" rel="nofollow noreferrer">side effect</a>. Better to just return the result and let the caller handle the IO. In fact, <code>checkForWin</code> is called twice in the main function, once to check for a win and the second time to display the winning player after clearing the screen.</p>
<h3>UX</h3>
<p>I recommend spelling out the input format more precisely and using <code>X wins!</code> or <code>O wins!</code> instead of <code>You won!</code>.</p>
<p>Instead of <code>Player 1</code> and <code>Player 2</code>, using <code>X</code> and <code>O</code> throughout removes ambiguity and lets you avoid a layer of indirection by having to display/explain <code>Player 1 (X) - Player 2 (O)</code> which asks the user to mentally translate between multiple terms for the players.</p>
<p>Bad input into <code>scanf</code> spams the console and there are no error messages or handling to speak of. <code>scanf</code> isn't the right tool here; use <a href="https://linux.die.net/man/3/fgets" rel="nofollow noreferrer"><code>fgets</code></a> to pull the line in as a string and parse the number out of it.</p>
<p>I'm not really crazy about <code>system("clear")</code>. It feels invasive. If you're committed to this sort of interface, I'd go all in with <a href="https://en.wikipedia.org/wiki/Ncurses" rel="nofollow noreferrer">curses</a>. Or just keep it simple and keep printing without clearing.</p>
<h3>Avoid convoluted logic</h3>
<p>In <code>checkForWin</code>, the draw logic is somewhat hard to follow:</p>
<pre><code>//Check for draw
for (int j = 1; j &lt; 10; ++j) {
    if (places[j] - 48 != j)
        draw++;
}
if (draw == 9){
    printf("\t  Draw!\n");
    return 1;
}
</code></pre>
<p>Once again, the <code>-48</code> is an artifact of user input conversion that really doesn't belong in the game engine. Instead of a <code>player</code> variable and this manual draw check logic, most two-player board games use a single number, <a href="https://en.wikipedia.org/wiki/Ply_(game_theory)" rel="nofollow noreferrer">ply</a>, which counts the turn. A draw check then becomes <code>ply &gt;= length of board</code> assuming <code>is_won</code> is called first, figuring out whose turn it is becomes <code>ply % 2</code> and switching sides is <code>ply++</code>.</p>
<p>Ply can be used to avoid pointless win checks if not enough moves have been played. In tic tac toe, it seems like a minor optimization but it can speed up an AI that's running win checks thousands of times per turn, and it's a single extra line of code.</p>
<h3>Consider breaking commented code out into functions</h3>
<p>The <code>checkForWin</code> function has 4 distinct parts to it: checking horizontals, verticals, diagonals and draws. Each could be a separate function instead of delimiting the areas with comments. Otherwise, some of these loops could be merged and the logic simplified (it's debatable which is best).</p>
<h3>Code style</h3>
<ul>
<li><p>Keep your braces consistent: <code>void switchPlayers(){</code> should be <code>void switchPlayers() {</code>.</p>
</li>
<li><p>Use <code>#include &lt;stdbool.h&gt;</code>:</p>
<pre><code>  if (draw == 9){
      printf("\t  Draw!\n");
      return 1;
  }
</code></pre>
<p>could then be</p>
<pre><code>  if (draw == 9){
      printf("\t  Draw!\n");
      return true;
  }
</code></pre>
<p>which is easier for the programmer to understand.</p>
</li>
</ul>
<h3>Possible rewrite</h3>
<p>While I'd prefer to use a <a href="https://en.wikipedia.org/wiki/Bitboard" rel="nofollow noreferrer">bitboard</a> and bitmasks to check win patterns, I think it's most instructive to keep the array format to avoid too radical of a departure from your design.</p>
<p>Feel free to accuse this code of being prematurely future-proof or anticipating adding AI and other features. Fair enough--it <em>is</em> more code. While I've gone somewhat deep into generalizing board sizes and so forth, you can cherry-pick the techniques that make sense for you and take the rest with a grain of salt.</p>
<p>Future steps might be adding a <a href="https://www.libsdl.org/" rel="nofollow noreferrer">GUI</a>, generalizing the board sizes with <a href="https://en.wikipedia.org/wiki/C_dynamic_memory_allocation" rel="nofollow noreferrer"><code>malloc</code></a> or a <a href="https://en.wikipedia.org/wiki/Flexible_array_member" rel="nofollow noreferrer">FAM</a>, adding an <a href="https://en.wikipedia.org/wiki/Minimax" rel="nofollow noreferrer">AI</a>, adding a <a href="https://en.wikipedia.org/wiki/Tic-tac-toe_variants" rel="nofollow noreferrer">variant</a> or <a href="https://beej.us/guide/bgnet/" rel="nofollow noreferrer">network</a> play.</p>
<pre><code>#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;
#include &lt;stdio.h&gt;

struct TicTacToePosition {
    uint8_t ply;
    uint8_t board_len;
    uint8_t side_len;
    char board[3][3];
};

struct TicTacToePosition ttt_init() {
    struct TicTacToePosition ttt_pos = {};
    ttt_pos.board_len = sizeof ttt_pos.board;
    ttt_pos.side_len = sizeof ttt_pos.board[0];
    return ttt_pos;
}

char ttt_current_player(const struct TicTacToePosition *pos) {
    return pos-&gt;ply % 2 ? 'O' : 'X';
}

char ttt_last_player(const struct TicTacToePosition *pos) {
    return pos-&gt;ply % 2 ? 'X' : 'O';
}

bool ttt_is_board_full(const struct TicTacToePosition *pos) {
    return pos-&gt;ply &gt;= pos-&gt;board_len;
}

bool ttt_legal_move(const struct TicTacToePosition *pos, int row, int col) {
    return row &gt;= 0 &amp;&amp; row &lt; pos-&gt;side_len &amp;&amp; 
           col &gt;= 0 &amp;&amp; col &lt; pos-&gt;side_len &amp;&amp; !pos-&gt;board[row][col];
}

bool ttt_try_move(struct TicTacToePosition *pos, int row, int col) {
    if (!ttt_legal_move(pos, row, col)) {
        return false;
    }

    pos-&gt;board[row][col] = ttt_current_player(pos);
    pos-&gt;ply++;
    return true;
}

bool ttt_line_win(const unsigned int len, const char *arr) {
    for (int i = 1; i &lt; len; i++) {
        if (!arr[0] || !arr[i] || arr[0] != arr[i]) {
            return false;
        }
    }
    
    return true;
}

bool ttt_is_won(const struct TicTacToePosition *pos) {
    if (pos-&gt;ply &lt; 5) return false;

    const uint8_t len = pos-&gt;side_len;
    char left_diag[len];
    char right_diag[len];

    for (int i = 0; i &lt; len; i++) {
        char column[len];
        left_diag[i] = pos-&gt;board[i][i];
        right_diag[i] = pos-&gt;board[i][len-i-1];

        for (int j = 0; j &lt; len; j++) {
            column[j] = pos-&gt;board[j][i];
        }

        if (ttt_line_win(len, pos-&gt;board[i]) || ttt_line_win(len, column)) {
            return true;
        }
    }

    return ttt_line_win(len, left_diag) || ttt_line_win(len, right_diag);
}

char ttt_fmt_square(const struct TicTacToePosition *pos, int i, int j) {
    return pos-&gt;board[i][j] ? pos-&gt;board[i][j] : i * pos-&gt;side_len + j + '1';
}

void ttt_print_board(const struct TicTacToePosition *pos) {
    puts("");

    for (int i = 0; i &lt; pos-&gt;side_len; i++) {
        for (int j = 0; j &lt; pos-&gt;side_len - 1; j++) {
            printf("   |");
        }

        printf("\n %c ", ttt_fmt_square(pos, i, 0));

        for (int j = 1; j &lt; pos-&gt;side_len; j++) {
            printf("| %c ", ttt_fmt_square(pos, i, j));
        }

        if (i &lt; pos-&gt;side_len - 1) {
            printf("\n___");

            for (int j = 1; j &lt; pos-&gt;side_len; j++) {
                printf("|___");
            }
        }

        puts("");
    }

    for (int i = 0; i &lt; pos-&gt;side_len - 1; i++) {
        printf("   |");
    }

    puts("\n");
}

int ttt_get_num(const char *failure_prompt) {
    for (;;) {
        int result;
        char buf[128];
        fgets(buf, sizeof buf, stdin);

        if (sscanf(buf, "%d", &amp;result)) {
            return result;
        }
        
        printf("%s", failure_prompt);
    }
}

void ttt_get_move(struct TicTacToePosition *ttt_pos) {
    for (;;) {
        printf("Choose a square for %c's move: ", 
               ttt_current_player(ttt_pos));
        int move = ttt_get_num("Invalid input. Try again: ") - 1;
        int row = move / ttt_pos-&gt;side_len;
        int col = move % ttt_pos-&gt;side_len;

        if (ttt_try_move(ttt_pos, row, col)) {
            break;
        }

        puts("Invalid move. Pick an empty square between 1 and 9.");
    }
}

void ttt_play_game() {
    for (struct TicTacToePosition ttt_pos = ttt_init();;) {
        ttt_print_board(&amp;ttt_pos);
        ttt_get_move(&amp;ttt_pos);

        if (ttt_is_won(&amp;ttt_pos)) {
            ttt_print_board(&amp;ttt_pos);
            printf("%c won!\n", ttt_last_player(&amp;ttt_pos));
            break;
        }
        else if (ttt_is_board_full(&amp;ttt_pos)) {
            ttt_print_board(&amp;ttt_pos);
            puts("The game is a draw");
            break;
        }
    }
}

int main() {
    ttt_play_game();
    return 0;
}
</code></pre>
    </div>