<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Recursive Definition</h1>

<p>Recursive algorithms gain efficiency by reducing the scope of the problem until the solution is trivial.  Thus, we need to define the problem in terms of sub-array.  With that in mind, we can define longest-increasing subsection as the first array element plus the longest-increasing subsection of all remaining elements that are greater than that first array element.  </p>

<p>In pseudo-code:
<code>LIS(a) = a[0] + LIS(a[1:]&gt;a[0])</code></p>

<p>Now that we have that definition, we need a terminal state.  Since the last subarray in this definition will be an empty array, that is the terminal state. <code>if(a == []): return 0</code> will be the end of the recursive chain.  </p>

<h1>Implementation Details</h1>

<p>Since c does not have slices like Python, we can traverse with a pointer from the head of the remaining array.  We use the address of the last element to flag the end of the traversal.</p>

<pre><code>int _lis(int *arr, int *end){
    if(arr == NULL || end == NULL) return 0; //input validation

    //arr holds the last element of the lis, so we need a traversal pointer
    int *traverse;  
    traverse = arr;

    //Find the next array element greater than the current lis
    while(*traverse &lt;= *arr &amp;&amp; traverse != end)
    {   traverse++; }

    if(traverse == end) //traversal reached end of the array
    {   
        return (*traverse &gt; *arr)? 1: 0;  //Check if the last element is in the lis
    }
    return 1+_lis(traverse, end) //look at the rest of the list
}
</code></pre>

<p>Now you can re-write your input function <code>LIS</code> to give a clean face to the user:</p>

<pre><code>LIS(int arr[], int arr_len){
    if(len == 0) return 0;

    int max = 0, temp;
    for(int i = 0; i &lt; arr_len; ++i){
        temp = _lis(&amp;(arr[i]), &amp;(arr[arr_len-1]));
        max = (temp &gt; max)?temp: max;
    }
}
</code></pre>

<p>This way, you traverse the array at most once for each starting point.  It's still O(n^2), but that's much better than O(n!) and it shows the recursive definition much more clearly.  </p>
    </div>