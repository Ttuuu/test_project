<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you will be able to implement this in a cleaner way by representing the key codes as <em>data</em> instead of <em>control flow</em>. Not only will the resulting code be shorter, but it will be more abstract. If you need to add new sequences or support multiple sets of sequences, you will be able to use the same basic logic.</p>
<p>More specifically, a <a href="https://en.wikipedia.org/wiki/Trie" rel="nofollow noreferrer">trie</a> data structure is a good match for your problem. The mapping process is simple: start at the root, input a character, and follow the corresponding branch. If there is no branch, fail. This must be modified slightly to output the original character if it is the sequence does not start with 27.</p>
<p>There is no trie in the Java collections framework, so you will have to build your own. The signature should be something like</p>
<pre><code>class AsciiTrie {
  AsciiTrie[] children;
  int data;
}
</code></pre>
<p>Given this data structure, your new algorithm is the following</p>
<pre><code>private static int readInputKey(AsciiTrie t) {
  if (System.in.available() == 0) {
    return 0;
  }

  int c;
  int depth = 0;
  while (t != null) {
    try {
      c = System.in.read();
    } catch {
      // handle error properly
    }

    t = t.children[c];
    depth += 1;

    if (t.data != 0) {
      return t.data;
    }
  }

  if (depth == 1) {
    return c;
  } else {
    return 0;
  }
}
</code></pre>
<p>I have not included code to build or populate the trie. But it is quite similar to traversal.</p>
    </div>