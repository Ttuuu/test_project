<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Foreword</h2>

<p>I haven't used CodeIgniter in the past so I am not as well-versed with the idiomatic ways it is used but I have used similar frameworks like Laravel.</p>

<p>I did look at the code in the github repository for references (e.g. the routes) but am mostly planning to review the code embedded directly in the post.</p>

<h2>General Feedback</h2>

<p>I see a fair amount of repeated code. It is wise to abstract out such repeated blocks into methods (make them private if you wish) and call those methods when appropriate. That way if a change needs to happen to each place, it can be done in one spot instead of each occurrence. </p>

<p>In <a href="https://www.youtube.com/watch?v=GtB5DAfOWMQ" rel="nofollow noreferrer">this presentation about cleaning up code</a>  Rafael Dohms talks about limiting the indentation level to one per method and avoiding the <code>else</code> keyword. (<a href="https://www.slideshare.net/rdohms/bettercode-phpbenelux212alternate/11-OC_1Only_one_indentation_level" rel="nofollow noreferrer">see the slides here</a>).</p>

<p>It is wise to return early - which your code does in a few places - like in <code>edit()</code> and <code>delete()</code> when the user isn't logged in. But there are other places this could be done. See below for more details on this.</p>

<h2>Specific Feedback</h2>

<h3>Overriding Constructors without side-effects</h3>

<p>I see both <code>Install</code> and <code>Posts</code> classes have a constructor that merely calls the parent method: </p>

<blockquote>
<pre><code>public function __construct()
{
    parent::__construct();
}
</code></pre>
</blockquote>

<p>If nothing else happens in that method, there isn't really a point to override it.</p>

<p>The <a href="https://www.codeigniter.com/user_guide/general/controllers.html?highlight=controller#class-constructors" rel="nofollow noreferrer">CodeIgniter Documentation for Controller has a section about _Class Constructors</a> which states:</p>

<blockquote>
  <p>If you intend to use a constructor in any of your Controllers, you MUST place the following line of code in it:</p>

<pre><code>parent::__construct();
</code></pre>
</blockquote>

<p>That documentation <em>could</em> be updated to state that it only needs to be overridden if code is added beyond what the parent constructor does. While it may be very unlikely that the signature of the base constructor will never change, it is possible. If that did happen (which would likely lead to a major version release) all code using it would need to be updated. Without overriding it then it wouldn't need to be updated.</p>

<hr>

<h3>Else blocks</h3>

<p>In the <code>search()</code> method there is a conditional block with a <code>return</code> statement, and then an <code>else</code> block:</p>

<blockquote>
<pre><code>// If search fails
    if ($this-&gt;form_validation-&gt;run() === FALSE) {
        return $this-&gt;index();
    } else {
</code></pre>
</blockquote>

<p>There isn't really any need to use the <code>else</code> here.</p>

<p>The same is true in the method <code>Install::index()</code> there is this logic:</p>

<blockquote>
<pre><code>if (count($tables) == 0) {
        redirect('migrate');
    } else {
        redirect('/');
    }
</code></pre>
</blockquote>

<p>Since <code>redirect()</code> terminates the script, it could be treated as an early return (just as  <code>Posts</code> methods <code>edit()</code>, <code>create()</code> and <code>delete()</code> also have early returns with <code>redirect()</code>). Thus the <code>else</code> is not needed - the <code>redirect('/')</code> can just be the last statement in the method, after the conditional block.</p>

<p>A ternary operator could also be used to shorten that block to a single line:</p>

<pre><code>redirect( count($tables) == 0 ? 'migrate' : '/' );
</code></pre>

<hr>

<h3>Repeated Code</h3>

<p>Both the methods <code>post()</code> and <code>create()</code> have the following lines. Those could be abstracted out to a separate method and called in both places.</p>

<blockquote>
<pre><code>$data = $this-&gt;Static_model-&gt;get_static_data();
$data['pages'] = $this-&gt;Pages_model-&gt;get_pages();

$data['categories'] = $this-&gt;Categories_model-&gt;get_categories();
$data['posts'] = $this-&gt;Posts_model-&gt;sidebar_posts($limit=5, $offset=0);

if ($data['categories']) {
    foreach ($data['categories'] as &amp;$category) {
        $category-&gt;posts_count = $this-&gt;Posts_model-&gt;count_posts_in_category($category-&gt;id);
    }
}
</code></pre>
</blockquote>

<p>Those could also be abstracted into a separate method to get the data object and called in both places. Actually, I see those first four lines mentioned above are also present in the <code>edit()</code> method so the block to set the counts on each category could be run if categories is set and optionally when a parameter is passed to the method.</p>

<hr>

<h3>Calls to <code>Posts_model::sidebar_posts()</code></h3>

<p>Also on this line in <code>create()</code>, <code>post()</code> and <code>edit()</code>:</p>

<blockquote>
<pre><code>$data['posts'] = $this-&gt;Posts_model-&gt;sidebar_posts($limit=5, $offset=0);
</code></pre>
</blockquote>

<p>it is likely doing more than you think- <code>$limit</code> is assigned the value 5 and <code>$offset</code> is assigned the value 0. There isn't really anything wrong with this but if those methods created a variable with either of those names before this line then it would be over-written. Perhaps you copied the method signature from <a href="https://github.com/Ajax30/lightblog/blob/0d199ffa4108f8a00c7a3ecaa9ce181dd7f681e4/application/models/Posts_model.php#L38" rel="nofollow noreferrer"><code>Posts_model::sidebar_posts()</code></a> and added the assignment; Instead just pass the values without the assignment:</p>

<pre><code>$data['posts'] = $this-&gt;Posts_model-&gt;sidebar_posts(5, 0);
</code></pre>

<hr>

<h3>updating page parameter in $_GET</h3>

<p>The <code>_initPagination()</code> method has this block:</p>

<blockquote>
<pre><code>if (!isset($_GET[$config['query_string_segment']]) || $_GET[$config['query_string_segment']] &lt; 1) {
    $_GET[$config['query_string_segment']] = 1;
}
</code></pre>
</blockquote>

<p>And given that </p>

<blockquote>
<pre><code>    $config['query_string_segment'] = $query_string_segment;
</code></pre>
</blockquote>

<p>and <code>$query_string_segment</code> isn't changed between there, it may be slightly simpler to read if the block above is changed to:</p>

<pre><code>if (!isset($_GET[$query_string_segment]) || $_GET[$query_string_segment] &lt; 1) {
    $_GET[$query_string_segment] = 1;
}
</code></pre>
    </div>