<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can fail safe and explicitly handle connection issues by changing the intention of the method:</p>

<pre><code>package bookstore.scraper;

import lombok.extern.slf4j.Slf4j;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import java.io.IOException;

@Slf4j
public class JSoupConnector {

    public static Optional&lt;Document&gt; attemptConnectionTo(String url) {
        try {
           return Optional.of(Jsoup.connect(url).get());
        } catch (IOException e) {
            log.warn("Failed to connect to URL {}: {}", url, e.getMessage());
        }
        return Optional.empty();
    }
}
</code></pre>

<p>This way you emphasize that clients of your utility class should explicitly handle the absence of a document as part of their logic.
If your clients would be in an invalid state or there responsibility does not stretch to handling missing documents, then throw an application exception instead to fail fast and delegate to an exception handler.
My conclusion is don't return null but clarify your intention as this class is tightly integrated with your app's domain.</p>
    </div>