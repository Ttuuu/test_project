<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>On top of Thomas Ward answer, here is a short and important comment:</p>

<p><strong>More beautiful functions</strong></p>

<p>Your functions are performing some mathematical computations and handling the formatting to show the result to the 2 users. These correspond to 2 concerns that could be separated.</p>

<p>Also, your functions rely on the <code>list_one</code> global variable. It would be clearer to have this provided to the functions using an argument.</p>

<p>You'd have something like:</p>

<pre><code>def mean(lst):
    return sum(lst) / len(lst)

def range_(lst):
    return lst[-1] - lst[0]

def median(lst):
    length = len(lst)
    if length % 2 == 0:
        return sum(lst[length//2-1:length//2+1]) / 2
    else:
        return lst[length//2]


...
            print('Mean: ' + str(mean(list_one)))
            print('Median: ' + str(median(list_one)))
            print('Range: ' + str(range_(list_one)))
</code></pre>

<p>These are easier to understand and to reason about. They are also easier to test. This is an interesting exercise that you can try to practice.</p>

<p><strong>Small improvements in <code>median</code></strong></p>

<p>The expression <code>length//2</code> is used in multiple places which makes the code tedious to read and less efficient than it could be.
Using a temporary variable makes things clearer:</p>

<pre><code>def median(lst):
    length = len(lst)
    mid = length//2
    if length % 2 == 0:
        return sum(lst[mid-1:mid+1]) / 2
    else:
        return lst[mid]
</code></pre>

<p>From here, I think it's pretty good already. Let's see what can be still be done for the sake of learning new techniques.</p>

<p>When you want to compute both the quotient and the remainder of the division, you can use "/" and "%" just like you did. Another option is to use the <code>divmod</code> builtin which returns both directly:</p>

<pre><code>def median(lst):
    length = len(lst)
    mid, rem = divmod(length, 2)
    if rem == 0:
        return sum(lst[mid-1:mid+1]) / 2
    else:
        return lst[mid]
</code></pre>

<p>The operation <code>sum(lst[mid-1:mid+1]) / 2</code> looks a lot like things we've just somewhere else: we compute the sum of a list and we divide by the number of elements which is happens to be 2.</p>

<p>We could reuse our <code>mean</code> function here.</p>

<pre><code>def median(lst):
    length = len(lst)
    mid, rem = divmod(length, 2)
    if rem == 0:
        return mean(lst[mid-1:mid+1])
    else:
        return lst[mid]
</code></pre>

<p>To go further, we could use the ternary operator to have a single return value.
We could also use the fact that in a boolean context, non-zero integers are equivalent to True and zero is equivalent to false.
This would lead to the following code which is, from my point of view, not really better:</p>

<pre><code>def median(lst):
    length = len(lst)
    mid, rem = divmod(length, 2)
    return lst[mid] if rem else mean(lst[mid-1:mid+1])
</code></pre>
    </div>