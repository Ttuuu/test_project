<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Using <code>from math import *</code> is highly discouraged. Please always use either:</p>

<ul>
<li><code>from math import sqrt</code>, or</li>
<li><code>import math</code> and use <code>math.sqrt</code> instead of <code>sqrt</code>.</li>
</ul></li>
<li><p>You are not using <code>math</code> and so the import is not needed.</p></li>
<li><p>It is commonly recommended to use either f-strings or <code>str.format</code> to format your strings. This is as they make reading the format easier on more complex formats.</p>

<p>In your case you won't see this benefit too much but it would be a good habit to get now, rather than later.</p>

<pre class="lang-py prettyprint-override"><code>print("Bunnies will cost {} dollars each.".format(bunnies))
print(f"Bunnies will cost {bunnies} dollars each.")
</code></pre></li>
<li><p>Please don't use unnecessary parentheses. This is as they add unneeded clutter to your code.</p></li>
<li><p>You can simplify the calculation for <code>final_cost</code></p>

<p><span class="math-container">$$
\begin{array}{r l}
c &amp;= bq\\
t &amp;= 0.089c\\
f &amp;= c + t\\
f &amp;= 0.089c + c\\
f &amp;= (0.089 + 1)c\\
f &amp;= 1.089bq
\end{array}
$$</span></p></li>
<li><p>The statement <code>final_cost == final_cost &gt; 57.89</code> is confusing and only works due to Python splitting the code into two different conditionals connected with an <code>and</code>.</p>

<p>The statement <code>final_cost == final_cost</code> will always be true, and so by all metrics is just bad.</p></li>
<li><p>Your ifs are missing if the final cost is 57.89 exactly. I assume this is a mistake.</p>

<p>When you have two ifs like this when one is getting half the options and the other is getting the other half it is better to use an <code>if</code> and an <code>else</code> rather than two <code>if</code>s.</p></li>
<li><p>You don't need to store <code>discount1</code> in a variable, it's just adding lines with no visible benefit.</p></li>
<li><p>Whilst there's nothing inherently wrong with printing the same string with a slight modification twice, you may be inclined to change it so you only define the structure of the print once.</p></li>
</ul>

<p>Overall this would get:</p>

<pre class="lang-py prettyprint-override"><code>bunnies = 30
print(f"Bunnies will cost {bunnies} dollars each.")
quantity = int(input("How many would you like to buy?: "))
final_cost = 1.089 * bunnies * quantity
if final_cost &gt;= 57.89:
    with_discount = final_cost - 0.13 * final_cost
    print(f"Your total will be {with_discount} with a discount")
else:
    print(f"Your total will be {final_cost} without a discount")
</code></pre>

<p>From here we can see all the other options have almost exactly the same code. There are only three things that change:</p>

<ol>
<li>The variable name <code>bunnies</code>.</li>
<li>The value of the variable <code>bunnies</code></li>
<li>The name of the item you're buying.</li>
</ol>

<p>From this we can see that a function would be good.</p>

<pre class="lang-py prettyprint-override"><code>def price_to_buy(item, price):
    print(f"{item} will cost {price} dollars each.")
    quantity = int(input("How many would you like to buy?: "))
    final_cost = 1.089 * price * quantity
    if final_cost &gt;= 57.89:
        with_discount = final_cost - 0.13 * final_cost
        print(f"Your total will be {with_discount} with a discount")
    else:
        print(f"Your total will be {final_cost} without a discount")


ask = input("Would you like to buy bunnies, eggs, or elections?: ")
if ask == "bunnies":
    price_to_buy("Bunnies", 30)
if ask == "eggs":
    price_to_buy("Eggs", 10)
if ask == "elections":
    price_to_buy("Elections", 20)
</code></pre>

<h1>Advanced changes</h1>

<p>Whilst the above is probably what your instructor expects from you, there are more ways to improve the code and make it shorter.</p>

<ul>
<li><p>You can store the name and value in a dictionary, allowing you to condense those ifs into two lines of code.</p>

<p>You may want to use a <code>try</code> and <code>except</code> here to get the code to function the same if you don't enter valid input.</p></li>
<li>You can use <code>str.title()</code> to make the inputted item's name display in title case.</li>
<li>You can use an <code>if __name__ == "__main__":</code> guard to prevent the code from running when imported, normally by accident.</li>
<li><p>You can use a turnery to apply the discount, this is basically just an <code>if</code> and <code>else</code> but on one line!</p>

<p>By also using tuple unpacking we can get the preposition (with/without) and the discount percentage in one line.</p></li>
<li>You can use a <code>try</code> and <code>except</code> to display a nice error message.</li>
<li>You can use <code>foo -= ...</code> rather than <code>foo = foo - ...</code>.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>def price_to_buy(item, price):
    print(f"{item} will cost {price} dollars each.")
    value = input("How many would you like to buy?: ")
    try:
        quantity = int(value)
    except ValueError:
        print(f"{value} is not an integer.")
        return
    cost = 1.089 * price * quantity
    discount, prep = (0.13, "with") if cost &gt;= 57.89 else (0, "without")
    cost -= discount * cost
    print(f"Your total will be {cost} {prep} a discount")


PRICES = {"bunnies": 30, "eggs": 10, "elections": 20}

if __name__ == "__main__":
    item = input("Would you like to buy bunnies, eggs, or elections?: ")
    price_to_buy(item.title(), PRICES[item])
</code></pre>
    </div>