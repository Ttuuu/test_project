<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>private string _Data;

public String Data
{
    get { return _Data; }
    private set { _Data = value; }
}  
</code></pre>
</blockquote>

<p>You should make this immutable by either declaring <code>_Data</code> as <code>readonly</code> and remove the setter or by having only <code>public readonly string Data;</code>.<br>
In addition you should be consitent with the style you are using. Here you use one time the alias <code>string</code> and one time the <code>String</code> object. Most C# developers use only the alias, but thats a decision for you to make. Once you have made a decision you should stick to your style.  </p>

<blockquote>
<pre><code>public ProtectedString(String value)
{
    _Data = "";
    _Data = CreateHash(value);
}  
</code></pre>
</blockquote>

<p>the assignment of <code>""</code> to <code>_Data</code> is only adding noise to the code. Remove it.  </p>

<p>because it is a struct the default parameterless constructor needs to be called like so  </p>

<pre><code>public ProtectedString(String value)
    :this()
{
    _Data = CreateHash(value);
}  
</code></pre>

<blockquote>
<pre><code>public override bool Equals(object obj)
{
    return base.Equals(obj);
}  
</code></pre>
</blockquote>

<p>This should be changed in way that it is really doing an <code>Equal</code> of the class rather then only calling the <code>base.Equals()</code> like so  </p>

<pre><code>public override bool Equals(object obj)
{
    var protectedString = obj as ProtectedString;

    if (protectedString == null) { return false; }

    return _Data.Equals(protectedString.Data);
}
</code></pre>

<p>It could be possible that this isn't 100% correct, because I can't test it.</p>

<blockquote>
<pre><code>private string CreateHash(String value)
{
    RNGCryptoServiceProvider csprng = new RNGCryptoServiceProvider();

    byte[] salt = new byte[SALT_BYTE_SIZE];

    csprng.GetBytes(salt);

    byte[] hash = PBKDF2(value, salt, PBKDF2_ITERATIONS, HASH_BYTE_SIZE);

    return 
        Convert.ToBase64String(salt) +
        Convert.ToBase64String(hash);
} 
</code></pre>
</blockquote>

<p><code>RNGCryptoServiceProvider</code> implements through its base class the <code>IDisposable</code> interface hence you should use a <code>using</code> block to proper dispose it. I would extract the generation of the salt to a separate method.  </p>

<pre><code>private byte[] GetSalt()
{
    using (RNGCryptoServiceProvider csprng = new RNGCryptoServiceProvider())
    {
         byte[] salt = new byte[SALT_BYTE_SIZE];

         csprng.GetBytes(salt)

         return salt;
    }
}

private string CreateHash(String value)
{

    byte[] salt = GetSalt();

    byte[] hash = PBKDF2(value, salt, PBKDF2_ITERATIONS, HASH_BYTE_SIZE);

    return 
        Convert.ToBase64String(salt) +
        Convert.ToBase64String(hash);
}   
</code></pre>

<blockquote>
<pre><code>private bool ValidateHash(String value, String validHash)
{
    byte[] full = Convert.FromBase64String(validHash);

    byte[] salt = full.Take(SALT_BYTE_SIZE).ToArray();

    byte[] hash = full.Skip(SALT_BYTE_SIZE).ToArray();

    byte[] testHash = PBKDF2(value, salt, PBKDF2_ITERATIONS, hash.Length);

    return SlowEquals(hash, testHash);
}  
</code></pre>
</blockquote>

<p>here you should replace <code>hash.Length</code> with <code>HASH_BYTE_SIZE</code> as the last parameter of the call to <code>PBKDF2()</code>.  </p>

<blockquote>
<pre><code>private bool SlowEquals(byte[] a, byte[] b)
{
    uint diff = (uint)a.Length ^ (uint)b.Length;

    for (int i = 0; i &lt; a.Length &amp;&amp; i &lt; b.Length; i++)
        diff |= (uint)(a[i] ^ b[i]);

    return (diff == 0);
}  
</code></pre>
</blockquote>

<p>You should always use braces <code>{}</code> although they might be optional. Using braces makes your code less error prone which should have top priority for security related stuff.  </p>

<blockquote>
<pre><code>private byte[] PBKDF2(string value, byte[] salt, int iterations, int outputBytes)
{
    Rfc2898DeriveBytes pbkdf2 = new Rfc2898DeriveBytes(value, salt);

    pbkdf2.IterationCount = iterations;

    return pbkdf2.GetBytes(outputBytes);
}  
</code></pre>
</blockquote>

<p><code>Rfc2898DeriveBytes</code> is implementing <code>IDispoable</code> through its base class too, hence you should use a <code>using</code> block.  </p>

<pre><code>private byte[] PBKDF2(string value, byte[] salt, int iterations, int outputBytes)
{
    using (Rfc2898DeriveBytes pbkdf2 = new Rfc2898DeriveBytes(value, salt))
    {
        pbkdf2.IterationCount = iterations;

        return pbkdf2.GetBytes(outputBytes);
    }
}
</code></pre>
    </div>