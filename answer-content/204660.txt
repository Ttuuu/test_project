<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Another thing I thought about was the technique for removing the element if it exists in the array i.e.:</p>

<blockquote>
<pre><code>if(in_array($item, $this-&gt;cache))
{
    $this-&gt;cache = array_diff($this-&gt;cache, [$item]);
}
</code></pre>
</blockquote>

<p>Obviously this works but it requires re-assigning the array to a new array constructed by computing the diff of that array and an array with the item to be found. An alternate approach might be to store the index of the element using <a href="http://php.net/array_search" rel="nofollow noreferrer"><code>array_search()</code></a> and as long as that doesn't return <code>FALSE</code> (explicitly, since <code>0</code> would be a <em>falsey</em> value), use <a href="http://php.net/array_splice" rel="nofollow noreferrer"><code>array_splice()</code></a> to remove the element at the given index.</p>

<pre><code>$index = array_search($item, $this-&gt;cache);
if($index !== FALSE)
{
    array_splice($this-&gt;cache, $index, 1);
}
</code></pre>

<p>The reason for the explicit check of <code>FALSE</code> is explained in the documentation for <code>array_search()</code>:</p>

<blockquote>
  <h3>Warning</h3>
  
  <p>This function may return Boolean <strong><code>FALSE</code></strong>, but may also return a non-Boolean value which evaluates to <strong><code>FALSE</code></strong>. Please read the section on <a href="http://php.net/manual/en/language.types.boolean.php" rel="nofollow noreferrer">Booleans</a> for more information. Use <a href="http://php.net/manual/en/language.operators.comparison.php" rel="nofollow noreferrer">the <code>===</code> operator</a> for testing the return value of this function.<sup><a href="http://php.net/manual/en/function.array-search.php#refsect1-function.array-search-returnvalues" rel="nofollow noreferrer">1</a></sup></p>
</blockquote>

<p>With this approach, there is no need to create an array just to contain the item, compute the diff or re-assign the array. While it may require a slight amount of more memory for the index, it could in theory take less memory overall when the array doesn't need to be re-assigned. I did try comparing the memory usage between <a href="http://phpfiddle.org/main/code/4apu-gjhe" rel="nofollow noreferrer">the original code</a> and <a href="http://phpfiddle.org/main/code/kbg3-qj11" rel="nofollow noreferrer">updated code</a> and the memory and time consumption appears to be negligibly different... perhaps for larger data sets it might be more noticeable. I tried to research if <code>in_array()</code> is noticably faster than <code>array_search()</code> and didn't find much in a cursory search, though the answers to <a href="https://stackoverflow.com/q/4518404/1575353"><em>which is best array_search or in_array?</em> on SO</a> are interesting. One answer suggests flipping the array and checking if the key is set using <code>isset()</code>, but you would have to flip the array each time just to check and that might slow things down dramatically.</p>

<p>While some may argue this is less readable, the assignment of <code>$index</code> can be combined into the conditional:</p>

<pre><code>if(($index = array_search($item, $this-&gt;cache)) !== FALSE)
{
    array_splice($this-&gt;cache, $index, 1);
}
</code></pre>

<p><sup>1</sup><sub><a href="http://php.net/manual/en/function.array-search.php#refsect1-function.array-search-returnvalues" rel="nofollow noreferrer">http://php.net/manual/en/function.array-search.php#refsect1-function.array-search-returnvalues</a></sub></p>
    </div>