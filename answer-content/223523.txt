<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Usability</h2>

<p>Your <code>addCombinations(String input, int index, List&lt;String&gt; output)</code> is harder to use than necessary.  The user must:</p>

<ul>
<li>create the storage for the result</li>
<li>pass in a mysterious <code>0</code> value</li>
</ul>

<p>It would be better to add a "helper" function, to do these tasks for the user:</p>

<pre><code>  public static void main(String[] args) {
    List&lt;String&gt; output = combinations("0?1?");
    System.out.println(output);
  }

  public static List&lt;String&gt; combinations(String input) {
      List&lt;String&gt; output = new ArrayList&lt;&gt;();
      addCombinations(input, 0, output);
      return output;
  }
</code></pre>

<h2>Flexibility</h2>

<p>Will <code>'?'</code> always be the replacement target?  Will the replacements only be the characters <code>'0'</code> and <code>'1'</code>?  It wasn't asked by the interviewer, but you could make the function more flexible.  Or at least mention the possibility to the interviewer.</p>

<h2>Code Style</h2>

<p>This screams "hacky":</p>

<pre><code>    for (int i = index; i &lt; input.length(); ++i) {
      if (input.charAt(i) == '?') {
        // Do work
        return;
      }
    }
    output.add(input);
</code></pre>

<p>You are looping ... but only execute the "real" body of the loop exactly once -- and <code>return</code> if you do -- and if you get to the end without doing work, you do some different work.  As an interviewer, unless you've impressed me elsewhere, I'd be moving on to the next candidate.</p>

<p>What you are doing - what you intend to do - is find the first <code>'?'</code>, replace that with <code>'0'</code> and <code>'1'</code>, and recursing to find other occurrences for replacement.  Make that clearer.</p>

<pre><code>    int position = input.indexOf('?', index);
    if (position &gt;= 0) {
        addCombinations( ... );
        addCombinations( ... );
    } else {
        output.add(input);
    }
</code></pre>

<p>You've got two cases: found and not found.  Recursive and leaf.  No embedded <code>return</code>.  Pretty clear.</p>

<h2>Premature Optimization?</h2>

<p>You've got an optimization which may be unnecessary.  You pass in <code>index</code> to indicate where to start searching for the next <code>'?'</code>.  But you've replaced the <code>'?'</code>, so if you omitted this, and simply started searching from the start of the string, it would still work.  Yes, you will be doing some unnecessary searching of the beginning of the string over and over again, but you've also removed passing the extra argument on the stack, which complicates the <code>addCombinations(...)</code> call.</p>

<p>To be fair, I've used <code>String.indexOf()</code> to do the searching, which is very fast, where as your code did the search itself, with a loop, a <code>String.charAt()</code> and a comparison, which would be significantly slower, so the optimization definitely makes sense in the original code.</p>

<h2>The Better Way</h2>

<p>As metioned by @greybeard, <code>StringBuffer.setCharAt()</code> would be much simpler to the string manipulation currently being done.  <em>But it is still the wrong choice</em>.  <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/StringBuilder.html#setCharAt(int,char)" rel="nofollow noreferrer"><code>StringBuilder.setCharAt()</code></a> is what you want.  (<code>StringBuilder</code> is <code>StringBuffer</code>, but without the synchronization overhead).</p>

<p>Instead of creating and throwing away multiple <code>StringBuilder</code> objects, it would be possible to reuse one <code>StringBuilder</code> object for all recursive calls.  Create the <code>StringBuilder</code> in the helper method I introduced, and pass it (instead of <code>input</code>) into the <code>addCombinations()</code> method.  When a <code>?</code> is found, replace it with a <code>0</code> and recurse, then a <code>1</code> and recurse, <em>and then change it back to a <code>?</code></em> before returning to ensure subsequent processing still works.</p>

<pre><code>public static List&lt;String&gt; combinations(String input) {
    StringBuilder workspace = new StringBuilder(input);
    List&lt;String&gt; output = new ArrayList&lt;&gt;();
    addCombinations(workspace, output);
    return output;
}

private static void addCombination(StringBuilder workspace, List&lt;String&gt; output) {
    int position = workspace.indexOf('?');
    if (position &gt;= 0) {
        workspace.setCharAt(position, '0');
        addCombination(workspace, output);
        workspace.setCharAt(position, '1');
        addCombination(workspace, output);
        workspace.setCharAt(position, '?');
    } else {
        output.add(workspace.toString());
    }
}
</code></pre>

<p>There is still a lot of repeated work going on.  With 4 question marks, the first question mark is found once, the second is found twice, the third is found 4 times, and the fourth is found 8 times.  You could count the number of question marks, create an <code>int positions[]</code> array, and locate all the question marks only once.  You could also create an <code>int state[]</code> array, and use that to turn the recursion into a loop.  Finally, once each execution of the loop generates one new combination, you could extract the body of the loop into its own <code>Supplier&lt;String&gt;</code>, and use <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/stream/Stream.html#generate(java.util.function.Supplier)" rel="nofollow noreferrer"><code>Stream::generate(Supplier&lt;? extends T&gt;)</code></a> to create a stream of combinations on demand, instead of filling in a list, but we've ran way beyond reasonable expectations for an interview question.</p>
    </div>