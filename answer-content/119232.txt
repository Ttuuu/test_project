<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Your <code>getline</code> function looks more like a variant of <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/fgets.html" rel="nofollow noreferrer"><code>fgets</code></a> than <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/getline.html" rel="nofollow noreferrer"><code>getline</code></a>.</p></li>
<li><p>If <code>size == 0</code>, <code>size - 1 == SIZE_MAX</code>, a very large number.</p></li>
<li><p>Your <code>getline</code> reads up to <code>size</code> bytes from the stream even though it only places only up to <code>size - 1</code> into the buffer. It simply drops the last byte silently. You should switch the order of the loop condition:</p>

<pre><code>while (count &lt; size &amp;&amp; (c = (char)getc(stream)) != '\n') { ... }
</code></pre></li>
<li><p>Your <code>getline</code> also writes to memory outside the range defined by its parameters if <code>size</code> is 0, when it writes the terminating null byte.</p></li>
<li><p>If <code>getc(stream) == EOF</code>, which is an error condition, your <code>getline</code> function will keep trying to read from the stream, always "reading" <code>EOF</code>, placing <code>(char) EOF</code> (usually <code>'\xff'</code>) into the buffer until the end of the buffer is reached.</p>

<p>You can try this by pointing <code>stdin</code> at an empty file.</p></li>
<li><p>Use a <code>for</code> loop instead of a <code>while</code> loop, if you're using an iteration counter. It'll be much clearer, what is incremented where and how.</p></li>
</ul>

<p>This is how I would rewrite your function considering the above points:</p>

<pre><code>ssize_t fgets(FILE *stream, char *buf, size_t size)
{
  if (size == 0)
    return 0;

  size_t count;
  int c = 0;
  for (count = 0; c != '\n' &amp;&amp; count &lt; size - 1; count++) 
  {
    c = getc(stream);

    if (c == EOF) {
      if (count == 0)
        return -1;
      break;
    }

    buf[count] = (char) c;
  }

  buf[count] = '\0';
  return (ssize_t) count;
}
</code></pre>
    </div>