<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>template &lt;typename T, 
  sfinae&lt;bool,
    std::enable_if_t&lt;std::is_integral_v&lt;T&gt;&gt;,
    std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;
  &gt; = true /* provide default option, bc reasons */&gt;
class foo;
</code></pre>

<p>vs</p>

<pre><code>template &lt;typename T, 
  std::enable_if_t&lt;
    std::is_integral_v&lt;T&gt;
    &amp;&amp; std::is_arithmetic_v&lt;T&gt;,
    bool
  &gt; = true
class foo;
</code></pre>

<p>This version doesn't use your new <code>sfinae</code> template, and uses fewer characters, and seems no less functional.</p>

<p>What more in C++20 we'll have named concepts (and failing that) requires clauses.  That will make much SFINAE obsolete.</p>

<p>What more, there are fancier ways to do SFINAE, especially in <a href="/questions/tagged/c%2b%2b20" class="post-tag" title="show questions tagged 'c++20'" rel="tag">c++20</a></p>

<p>There is this:</p>

<pre><code>template&lt;template&lt;class...&gt;class, class...&gt;
struct can_apply;
</code></pre>

<p>which tests if a template can be applied to a list of types.</p>

<p>With <code>constexpr</code> lambdas that can appear in template non type parameter argument calculations, we can do:</p>

<pre><code>template&lt;class F&gt;
constexpr auto apply_test(F &amp;&amp;);
</code></pre>

<p>which returns an object that, when evaluated on some arguments, returns <code>true_type</code> if you can invoke <code>F</code> on it, and <code>false_type</code> otherwise.</p>

<pre><code>template&lt;class T,
  std::enable_if_t&lt;
    apply_test([](auto a, auto b)RETURNS(a+b))( std::declval&lt;T&gt;(), std::declval&lt;T&gt;() ),
    bool
  &gt; = true
&gt;
struct foo;
</code></pre>

<p>here we test if a type <code>T</code> can be added to itself.  (I also use the somewhat ubiquitous <code>RETURNS</code> macro)</p>

<p>Or, more cleanly:</p>

<pre><code>template&lt;class T&gt;
auto foo( T const&amp; lhs, T const&amp; rhs )
requires test_apply(std::plus&lt;T&gt;{})(lhs, rhs)
</code></pre>

<p>assuming sufficiently SFINAE friendly <code>std::plus&lt;T&gt;</code>.</p>
    </div>