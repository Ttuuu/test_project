<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is an attempt at an updated version based on <a href="https://codereview.stackexchange.com/users/39858/visualmelon">@visualmelon</a> suggestions, but not sure If I just ended up making bigger mess of it then before or not, partly because I'm not very familiar with interfaces and not sure how to properly use it to make this simpler <em>(I would happily take some more suggestions)</em>, though this version is a bit more fleshed out then last version with the ability to modify and move the object after it is constructed, so is going to be a bit more code for the extra functionality. <em>(though the extra functionally is not really working yet because I'm not sure how I am going to update the vertices )</em></p>

<p>This code is a mess, going to have to re-think it a bit more, but I'll post this for now.</p>

<p><strong>Changes:</strong></p>

<ul>
<li><p>I created a <code>Transform class</code> containing position, rotation, scale,
and transform matrix.</p></li>
<li><p>I created a <code>Edge struct</code> and define them as vertex index.</p></li>
<li><p>I created a <code>Geometry class</code> containing worldSpaceVertices, localSpaceVertices, and edges.
<em>(storing both world, and local space vertices for performance reasons)</em></p></li>
<li><p>Change my viewpoint draw function to be able to draw the edges</p></li>
<li><p>Change my naming convention a bit and use more descriptive naming instead of shorthands </p></li>
</ul>

<p><strong>BaseObject:</strong></p>

<pre><code>public abstract class BaseObject
{
    protected BaseObject(Transform _transform, Geometry _geometry, string _type, Color _wirecolor, string _name)
    {
        transform = _transform;
        geometry = _geometry;
        wirecolor = _wirecolor;
        name = _name;
        type = _type;
    }

    public Transform transform { get; }
    public Geometry geometry { get; }
    public Color wirecolor { get; set; }
    public string name { get; set; }
    public string type { get; }
}
</code></pre>

<p><strong>Transform Class:</strong></p>

<pre><code>public class Transform
{
    public Transform(Vec3 _positon, Vec3 _rotation, double _scale)
    {
        position = _positon;
        rotation = _rotation;
        scale = _scale;
        UpdateTransformMatrix();
    }

    public Transform(Mat4 _tm)
    {
        matrix = _tm;
        UpdateTransform(_tm);
    }

    public Vec3 position { get; private set; }
    public Vec3 rotation { get; private set; }
    public double scale { get; private set; }
    public Mat4 matrix { get; private set; }

    public void SetTransform(Vec3? _position = null, Vec3? _rotation = null, double? _scale = null)
    {
        position = _position ?? position;
        rotation = _rotation ?? rotation;
        scale = _scale ?? scale;
        UpdateTransformMatrix();
    }

    public void SetTransform(Mat4 _tm)
    {
        matrix = _tm;
        UpdateTransform(_tm);
    }

    private void UpdateTransformMatrix()
    {
        matrix = Mat4.PosRotScaleTM(position, rotation, scale);
        // need to add a way to update vertecies
    }

    private void UpdateTransform(Mat4 _tm)
    {
        position = Mat4.GetPos(matrix);
        rotation = Mat4.GetRot(matrix);
        scale = Mat4.GetScl(matrix);
        // need to add a way to update vertecies
    }

    public Vec3 GetDir()
    {
        return (matrix.GetForwardVec());
    }
}
</code></pre>

<p><strong>Edge Struct:</strong></p>

<pre><code>public struct Edge
{
    /// &lt;summary&gt; Edge start and end, worldSpaceVertex index. &lt;/summary&gt;
    public Edge(int _startVertexIDX, int _endVertexIDX)
    {
        startVertexIDX = _startVertexIDX;
        endVertexIDX = _endVertexIDX;
    }

    public int startVertexIDX { get; }
    public int endVertexIDX { get; }
}
</code></pre>

<p><strong>Geometry Class:</strong></p>

<pre><code>public class Geometry
{
    public Geometry(Vec3[] _verticesLocal, Edge[] _edges, Mat4 _tm)
    {
        verticesLocal = _verticesLocal;
        verticesGlobal = _verticesLocal.ToArray();
        edges = _edges;
        UpdateGlobalVertices(_tm);
    }

    private Vec3[] p_verticesLocal;
    public Vec3[] verticesLocal
    {
        get { return p_verticesLocal; }
        private set { p_verticesLocal = value; }
    }

    public void SetLocalVertices(Mat4 _tm, Vec3[] _verticesLocal)
    {
        p_verticesLocal = _verticesLocal;
        UpdateGlobalVertices(_tm);
    }

    private Vec3[] p_verticesGlobal;
    public Vec3[] verticesGlobal
    {
        get { return p_verticesGlobal; }
        private set { p_verticesGlobal = value; }
    }

    public void UpdateGlobalVertices(Mat4 _tm)
    {
        for (int i = 0; i &lt; verticesLocal.Length; i++)
        {
            verticesGlobal[i] = _tm * verticesLocal[i];
        }
    }

    private Edge[] p_edges;
    public Edge[] edges
    {
        get { return p_edges; }
        private set { p_edges = value; }
    }
} 
</code></pre>

<p><strong>Quad:</strong></p>

<pre><code>   public class Quad : BaseObject
    {
        private Quad(Transform _transform, Geometry _geometry, string _type, Color _wirecolor, string _name, double _width, double _height) : base(_transform, _geometry, _type, _wirecolor, _name)
        {
            width = _width;
            height = _height;
            UpdateVertices();
        }

        private double p_width;
        public double width
        {
            get {return p_width; }
            set
            {
                p_width = value;
                UpdateVertices();
            }
        }

        private double p_height;
        public double height
        {
            get { return p_height; }
            set
            {
                p_height = value;
                UpdateVertices();
            }
        }

        public static Vec3[] ShapeVertices { get; } = new Vec3[4]
        {
            new Vec3(-1, -1, 0),
            new Vec3(1, -1, 0),
            new Vec3(-1, 1, 0),
            new Vec3(1, 1, 0)
        };

        public static Edge[] ShapeEdges { get; } = new Edge[4]
        {
            new Edge(0, 1),
            new Edge(2, 3),
            new Edge(0, 2),
            new Edge(1, 3)
        };

        private void UpdateVertices()
        {
            Vec3[] v = ShapeVertices.ToArray();
            for (int i = 0; i &lt; 4; i++)
            {
                v[i] = new Vec3(v[i].x * width * 0.5, v[i].y * height * 0.5, 0);
            }
            geometry.SetLocalVertices(transform.matrix, v);
        }

        public static Quad Add(Vec3? _position = null, Vec3? _rotation = null, double _scale = 1, Color? _wirecolor = null, string _name = "Quad", bool _add = true, double _width = 100, double _height = 100)
        {
            Vec3 p = _position ?? new Vec3(0, 0, 0);
            Vec3 r = _rotation ?? new Vec3(0, 0, 0);
            Color c = _wirecolor ?? Color.Black;
            Transform tm = new Transform(p, r, _scale);
            Geometry geo = new Geometry(ShapeVertices, ShapeEdges, tm.matrix);
            Quad o = new Quad(tm, geo, "Quad", c, _name, _width, _height);
            if (_add)
            {
                RenderEngine.scene.baseObjects.Add(o);
            }
            return o;
        }

    }
</code></pre>

<p><strong>Box:</strong></p>

<pre><code>public class Box : BaseObject
{
    private Box(Transform _transform, Geometry _geometry, string _type, Color _wirecolor, string _name, double _width, double _height, double _depth) : base(_transform, _geometry, _type, _wirecolor, _name)
    {
        width = _width;
        height = _height;
        depth = _depth;

        UpdateVertices();
    }

    private double p_width;
    public double width
    {
        get { return p_width; }
        set
        {
            p_width = value;
            UpdateVertices();
        }
    }

    private double p_height;
    public double height
    {
        get { return p_height; }
        set
        {
            p_height = value;
            UpdateVertices();
        }
    }

    private double p_depth;
    public double depth
    {
        get { return p_depth; }
        set
        {
            p_depth = value;
            UpdateVertices();
        }
    }

    public static Vec3[] ShapeVertices { get; } = new Vec3[8]
    {
        new Vec3(-1, -1, -1),
        new Vec3(1, -1, -1),
        new Vec3(-1, 1, -1),
        new Vec3(1, 1, -1),
        new Vec3(-1, -1, 1),
        new Vec3(1, -1, 1),
        new Vec3(-1, 1, 1),
        new Vec3(1, 1, 1)
    };

    public static Edge[] ShapeEdges { get; } = new Edge[12]
    {
        new Edge(0, 1),
        new Edge(2, 3),
        new Edge(4, 5),
        new Edge(6, 7),
        new Edge(0, 2),
        new Edge(1, 3),
        new Edge(4, 6),
        new Edge(5, 7),
        new Edge(0, 4),
        new Edge(1, 5),
        new Edge(2, 6),
        new Edge(3, 7)
    };

    private void UpdateVertices()
    {
        Vec3[] v = ShapeVertices.ToArray();
        for (int i = 0; i &lt; 8; i++)
        {
            v[i] = new Vec3(v[i].x * width * 0.5, v[i].y * height * 0.5, v[i].z * depth * 0.5);
        }
        geometry.SetLocalVertices(transform.matrix, v);
    }

    public static Box Add(Vec3? _position = null, Vec3? _rotation = null, double _scale = 1, Color? _wirecolor = null, string _name = "Box", bool _add = true, double _width = 100, double _height = 100, double _depth = 100)
    {
        Vec3 p = _position ?? new Vec3(0, 0, 0);
        Vec3 r = _rotation ?? new Vec3(0, 0, 0);
        Color c = _wirecolor ?? Color.Black;
        Transform tm = new Transform(p, r, _scale);
        Geometry geo = new Geometry(ShapeVertices, ShapeEdges, tm.matrix);
        Box o = new Box(tm, geo, "Box", c, _name, _width, _height, _depth);
        if (_add)
        {
            RenderEngine.scene.baseObjects.Add(o);
        }
        return o;
    }
}
</code></pre>

<p><strong>Draw:</strong></p>

<pre><code>    public static class Draw
    {
        public static void Line(Vec3 _p0, Vec3 _p1, Pen _pen)
        {
            Camera.WorldLineToScreen(_p0, _p1, ref xySS0, ref xySS1); 
            RenderEngine.g.DrawLine(_pen, (float)xySS0.x, (float)xySS0.y, (float)xySS1.x, (float)xySS1.y);
        }

        private static Pen basePen = new Pen(Color.Black);
        public static void BaseObject(BaseObject _obj)
        {
            basePen.Color = _obj.wirecolor;
            foreach (Edge e in _obj.geometry.edges)
            {
                Draw.Line(_obj.geometry.verticesGlobal[e.startVertexIDX], _obj.geometry.verticesGlobal[e.endVertexIDX], basePen);
            }
        }
}
</code></pre>

<p><strong>Program:</strong></p>

<pre><code> Box.Add();
 Quad.Add(_wirecolor:Color.Yellow, _position:new Vec3(200,50,0));
</code></pre>
    </div>