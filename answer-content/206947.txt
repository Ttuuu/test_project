<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the below, I recommend reading <a href="https://codereview.stackexchange.com/a/206995/140921">Maarten Fabré's answer</a>.</p>

<hr>

<h1>Edge case</h1>

<p>Consider the following scenario:</p>

<pre><code>book_tracking = StudentDatabase()
book_tracking.return_book("Student A", "Moby Dick")
# KeyError: 'Student A'
</code></pre>

<p>However, we don't need to do a try-except block to catch the student who never handled books before trying to return a book; Python provides <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">defaultdict</a> in the collections module to help us with this very problem:</p>

<pre><code>from collections import defaultdict

class StudentDatabase:
    def __init__(self):
        self._books = defaultdict(list)

    # ...
</code></pre>

<p>Now, if anything tries to access an unassigned key of <code>_books</code>, it will simply return an empty list. This can subsequently simplify <code>borrow_book()</code>:</p>

<pre><code>    def borrow_book(self, name, book):
        self._books[name].append(book)
</code></pre>

<h1>Interclass operability</h1>

<p><code>Library</code> and <code>StudentDatabase</code> don't seem to interact at all. If they're related, the student database listing book borrows should inform the library when a book is borrowed or returned. The most versatile way to do this at this stage is to add a <code>library</code> parameter to relevant methods.</p>

<pre><code>class StudentDatabase:
    # ...

    def borrow_book(self, name, book, library):
        if library.lend_book(book):
            self._books[name].append(book)

    def return_book(self, name, book, library):
        if book not in self._books[name]:
            print("You don't seem to have borrowed \"%s\"" % book)
        else:
            library.add_book(book)
            self._books[name].remove(book)
</code></pre>

<p>This will require returning False when the book is not found:</p>

<pre><code>class Library:

    # ...

    def lend_book(self, requested_book):
        if requested_book in self._books:
            print("You have now borrowed \"%s\" " % requested_book)
            self._books.remove(requested_book)
            return True

        else:
            print("Sorry, \"%s\" is not there in our library at the moment" % requested_book)
            return False
</code></pre>

<p>The implementation you currently have is very simple, so there's not much else to discuss in terms of design: it becomes more relevant when you have more moving parts. I do find it somewhat odd that it's only tracking by student, and not by book (i.e. <code>Library</code> could know how many copies of each book it had (int), to whom it's checked (a list perhaps with a custom <code>CheckedOut</code> class to store the person and the due date), and any other information pertaining to that book. A <code>BookStatus</code> class could store everything related to each book; the library would then contain a list of BookStatus objects.</p>

<h1>Checking if a sequence is empty.</h1>

<p><em>(Note I previously advocated using <code>len(self._books) &gt; 0</code> until Maarten Fabré (along with three people upvoting his comment) pointed out this suggestion contradicted <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">PEP-8</a>) The relevant passage is excerpted below.</em></p>

<blockquote>
  <p>For sequences, (strings, lists, tuples), use the fact that empty sequences are false.</p>
</blockquote>

<h1>Format string literals</h1>

<p>You seem to be using <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer">printf-style string formatting</a>. In Python 3, <a href="https://docs.python.org/2/library/string.html#format-string-syntax" rel="nofollow noreferrer">format strings</a> are more flexible and would probably be considered more Pythonic. Python 3.6 adds <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">format string literals</a>, which are very compact. Here are some example uses:</p>

<ul>
<li>Original: <code>"You have now borrowed \"%s\" " % requested_book</code>

<ul>
<li>With f-string: <code>f"You have now borrowed \"{requested_book}\"."</code></li>
</ul></li>
<li>Original: <code>"Sorry, \"%s\" is not there in our library at the moment" % requested_book</code>

<ul>
<li>With f-string: <code>f"Sorry, \"{requested_book}\" is not there in our library at the moment"</code></li>
</ul></li>
<li>Original: <code>"You don't seem to have borrowed \"%s\"" % book</code>

<ul>
<li>With f-string: <code>f"You don't seem to have borrowed \"{book}\""</code></li>
</ul></li>
<li>Original: <code>"%s: %s" % (name, books)</code>

<ul>
<li>With f-string: <code>f"{name}: {books}"</code></li>
</ul></li>
</ul>

<h1>Result</h1>

<pre><code>from collections import defaultdict

class Library:
    def __init__(self):
        self._books = []

    def add_book(self, new_book):
        self._books.append(new_book)

    def display_books(self):
        if len(self._books) &gt; 0:
            print("The books we have made available in our library are:\n")
            for book in self._books:
                print(book)
        else:
            print("Sorry, we have no books available in the library at the moment")

    def lend_book(self, requested_book):
        if requested_book in self._books:
            print(f"You have now borrowed \"{requested_book}\".")
            self._books.remove(requested_book)
            return True

        else:
            print(f"Sorry, \"{requested_book}\" is not there in our library at the moment")
            return False

class StudentDatabase:
    def __init__(self):
        self._books = defaultdict(list)

    def get_student(self, name):
        if name not in self._books:
            return "Not Found"

        return self._books[name]

    def borrow_book(self, name, book, library):
        if library.lend_book(book):
            self._books[name].append(book)

    def return_book(self, name, book, library):
        if book not in self._books[name]:
            print(f"You don't seem to have borrowed \"{book}\"")
        else:
            library.add_book(book)
            self._books[name].remove(book)

    def display_students_with_books(self):
        for name, books in self._books.items():
            if books:
                print(f"{name}: {books}")
</code></pre>
    </div>