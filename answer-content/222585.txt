<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Style review</h3>
<ul>
<li><p>I think <code>numberOfGuys</code> should be a parameter obtained in the <code>main</code> args, so that you respect the possibility to obtain <code>n</code> from an external source.</p>
</li>
<li><p>As pointed in the comments, don't do <code>isTrue = false</code>, that's... weird. <code>True</code> is <em>always</em> <code>true</code>, period. You could rename it <code>hasRemainingGuys</code> or something like that.</p>
</li>
</ul>
<h3>Data structure</h3>
<p>Using an <code>ArrayList</code> probably isn't the best data structure for your problem. This data structure is fast when it comes to obtaining data, but removing elements form it, which you do a lot, is slower. You'd want a structure where <code>Remove</code> is an <span class="math-container">\$O(1)\$</span> operation and, obviously, where it's easy to navigate from one element to the next. The <code>LinkedList</code> sounds like a good idea, as I'll point out below.</p>
<h3>Alternative algorithm</h3>
<p>I'd recommend creating some sort of circular linked list, so you wouldn't need to recreate the iterator when you reach the end of the list and to simplify some conditions. The idea is to have a linked list, where the last node's "next node" is the first one. This way, your generator could run until there's no next values.</p>
<pre><code>Iterator&lt;Integer&gt; iterator = circularLinkedList.iterator();
//To start with the "first guy"
int k = -1;
while (iterator.hasNext()) {

    //Move on to the next shooter
    k = iterator.next();

    if (!iterator.hasNext()) {
        break;
    }

    //Move to the next shoot...ee?
    iterator.next();
    iterator.remove();
}
</code></pre>
<p>And... yeah, that's all. <code>k</code> contains the last guy standing.</p>
<p>Now, you need to implement a circular linked list and create an iterator that works with it. There are many examples on internet on how to do this.</p>
<p>You could also explore an option where you don't actually remove the element from the list, but simply keep a <code>boolean</code> where an index is flagged as dead or not. This might also be faster.</p>
    </div>