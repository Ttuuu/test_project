<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This function has a few inefficiencies:</p>

<ul>
<li>Calling <code>hex.substring(2, hex.length())</code> makes a fresh copy of <code>hex</code>, copying the entire contents except the first two characters.  (<a href="https://stackoverflow.com/a/4679775/1157100">Before Java 7, there used to be an optimization for <code>.substring()</code>.</a>)  This is very bad, since it turns an algorithm that should be O(<em>n</em>) into O(<em>n</em><sup>2</sup>).</li>
<li>Similarly, calling <code>.trim()</code> at the end copies nearly the entire string, just to drop the trailing whitespace.  It would be more efficient to truncate <code>builder</code> by calling <code>builder.setLength(â€¦)</code> <em>before</em> <code>.toString()</code>.  Better yet, design your loop so that it doesn't append superfluous whitespace at the end.</li>
<li>The <code>StringBuilder</code> has to guess how large its buffer needs to be, and if it underestimates, it will need to reallocate and copy the buffer.  We know that for every eight characters of input, there will be approximately 13 characters of output (overestimating slightly).</li>
</ul>

<p>Calculating <code>rows</code> and <code>columns</code> overcomplicates the problem.  Every 16th delimiter will be a newline.  Every fourth delimiter will be a double space.  All the others will be a single space.  Except, of course, you don't prepend anything at the very beginning.</p>

<pre><code>public static String toMatrix(String hex) {
    StringBuilder builder = new StringBuilder(hex.length() * 13 / 8);
    String delim = "";
    for (int i = 0; i + 1 &lt; hex.length(); i += 2) {
        builder.append(delim).append(hex.substring(i, i + 2));
        delim = (i % 32 == 30) ? "\n" :
                (i %  8 ==  6) ? "  " : " ";
    }
    return builder.toString();
}
</code></pre>
    </div>