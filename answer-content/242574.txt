<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Lets first respond to your initial question: </p>

<h2><em>is it fine to typecast from one implementation to another?</em></h2>

<p><strong>Absolutely!</strong> When using <em>interfaces</em> to declare behaviours like you have shown, not only is it <em>fine</em> but it becomes important that you <em>DO</em> typecast, otherwise what was the point of declaring the behavior through interfaces in the first place.</p>

<p>The use of interfaces implies that not all classes will implement the behaviour, so you can <em>ONLY</em> access the behaviour if your code knows the exact type of the concrete class or if you know the <em>interface</em> of the behaviour you want to execute, perhaps more importantly you may need to handle the case where the concrete class <em>does NOT</em> implement the expected interface.</p>

<blockquote>
  <p><em>Should you have to Type Cast?</em><br>
  If you are using interfaces, then yes you <em>should</em> have to typecast.</p>
</blockquote>

<p>A better code implementation for <em>WeaponReload</em> would be to check first that the class does in fact implement <code>IReloadable</code> before reloading, since <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#is-operator" rel="nofollow noreferrer">c# 7.0 we can use the <code>is</code> operator</a> to test an expression against a pattern and we can capture the output in a single line of code:</p>

<pre class="lang-cs prettyprint-override"><code>if (weapon is IReloadable reloader)
    reloader.Reload();
</code></pre>

<p>Notice we didn't even need to use the Wrapper <em>Client</em> class <code>WeaponReload</code> to access the <code>IReloadable.Reload()</code> behaviour, I think this is what you are referring to with:</p>

<h2>Is there a better way to handle this object creation part</h2>

<p>Yes, the better way is to skip the <em>Clients</em> altogether. </p>

<p>If you are set on your current implementation, then that is just as easy to incorporate, however you should still handle the cases where the passed in object does not implement your interface.</p>

<pre class="lang-cs prettyprint-override"><code>WeaponReload reloader = null;
if (weapon is IReloadable r)
    reloader = new WeaponReload(r);
...
if (reloader != null)
    reloader.Reload();
</code></pre>

<h2>Is there an entirely better design that I can come up with which does not necessarily ends up in casting.</h2>

<p>There is nothing wrong with casting, it can lead to clear and concise code as you have created clear structural boundaries that can help you separate implementation from definitions. </p>

<blockquote>
  <p>If you are concerned about performance, then we have a solution for that too, <strong>but don't optimise your code for the sake of it</strong>, the performance losses due to boxing values into objects, though comparitively expensive to alternatives, wil not generally be noticied by the user unless you are performing millions of operations in quick succession.</p>
</blockquote>

<p>To avoid performance issues caused by <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/boxing-and-unboxing" rel="nofollow noreferrer"><em>Boxing and Unboxing</em></a> in C# we can use <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/" rel="nofollow noreferrer">Generics</a>. Interfaces play a huge part in C# generics, a generic type argument on a class or method defines <em>all</em> the interfaces or conditions that an <code>object</code> <strong>MUST</strong> implement for it to be passed into the methods as a parameter or stored in a variable. </p>

<p>Because these conditions are validated and enforced by the compiler, the storage and referencing to the underlying object stored in a generic typed variable is a lot more efficient at runtime compared to simply <em>boxing</em> objects into an <code>object</code> typed variable.</p>

<h2>a Better design</h2>

<p>Your interfaces are on the right track, interfaces allow your concrete classes to define explicit behaviors without having to incorporate those behaviours into their base class.</p>

<p>What you have missed here is a base class that all your weapons can inherit from, it's the first logical assumption that one makes when rationalising a domain that includes different types of weapons like shotguns and swords... Common properties might include Name, Description, Cost, BasePower... I would argue that <em>all</em> weapons have a <em>Primary</em> attack function, so really a <code>Weapon</code> base class would be replacing <code>IWeaponPrimaryAttack</code>:</p>

<pre class="lang-cs prettyprint-override"><code>public abstract class Weapon ()
{
    public string Name { get;set; }
    ... 
    public abstract void DoAttack();
}
public interface IWeaponSecondaryAttack
{
    void DoSecondaryAttack();
}
public interface IReloadable
{
    void Reload();
}
</code></pre>

<p>Now for the concrete class implementations, I would classify the weapons a bit differently again, I like to write down a breif story style description about the classes before I write the code, using the following phrasiology to help validate that my classes and interfaces make sense and can be utilised effectivly:</p>

<blockquote>
  <p>A <code>Katana</code> <em>IS</em> a <code>Weapon</code>, it has a Name of 'Katana' but it does <em>NOT</em> have a <code>Reload</code> feature, it's primary attack is a 'Slash' and it has a <code>SecondaryAttack</code> that is a 'Stab'.</p>
  
  <p>A <code>Shotgun</code> <em>IS</em> a <code>Weapon</code>, it has a Name of 'Shotgun' and it <em>DOES</em> have a <code>Reload</code> feature, it only has a capacity of <code>2</code> <em>shells</em> before it must be reloaded, it does not have a <code>SecondaryAttack</code>.</p>
</blockquote>

<p>This will work with your current interfaces, but notice already we have identified an element of redundancy, the <code>Name</code> is always the same as the <code>type</code>. This isn't a problem, but it is an indicator that there is potential room for improvement. Instead lets create classes that categorise the weapons :</p>

<blockquote>
  <p>In real life and in many games, you will find weapons categorised more granularly, for instance Swords vs Guns, Two handed vs One Handed, or Melee vs Ranged... Swords might include daggers and daggers can easily be Ranged as well as Melee...</p>
</blockquote>

<p>Instead if we change our concrete classes to this:</p>

<pre class="lang-cs prettyprint-override"><code>public class Sword : Weapon, IWeaponSecondaryAttack
{
    public override void DoAttack() =&gt; Console.WriteLine("Slash");
    public void DoSecondaryAttack() =&gt; Console.WriteLine("Stab");
}
public class Gun : Weapon, IReloadable
{
    public override void DoAttack() =&gt; Console.WriteLine("Shoot");
    public void Reload() =&gt; Console.WriteLine("Reload");
}
</code></pre>

<p>We haven't yet handled the capacity of attacks before reload, should be easy to add this into the <code>IReloadable</code> interface, so we'll leave this out for.</p>

<p>Now we can create an array of weapons that the user might have access to that includes a 'Katana' as an <em>instance</em> of a 'Sword' as well as a 'Dagger' and of course our 'Shotgun' as an instance of <code>Gun</code>:</p>

<blockquote>
  <p>even though 'Dagger' and 'Katana' have a similar attack style, one would clearly deal more damage than the other, so Damage now becomes another property that we could add...</p>
</blockquote>

<pre class="lang-cs prettyprint-override"><code>List&lt;Weapon&gt; weapons = new List&lt;Weapon&gt;
                           {
                               new Sword { Name = "Katana" },
                               new Sword { Name = "Dagger" },
                               new Gun { Name = "Shotgun" }
                           }; 
</code></pre>

<p>Although it doesn't make sense in a real-world situation to talk about the <em>reload</em> function on a <em>Katana</em>, you could for the purposes of simplifying the code say that <em>all</em> <code>Weapon</code> instances do have a <code>Reload</code> function, but the <code>Reload</code> function on a <em>Katana</em> does nothing. The same could be said for SecondaryAttack, in that case these become properties on the <code>Weapon</code> base class. The argument about if it should or shouldn't be an interface could swing either way depending on how you implement it in the rest of your code. </p>

<p>Another scenario to consider is <em>What is an Attack</em>? By making the attack method a <code>void</code> response type, we're really saying that anything and everything could occur when the method is executed, we have not feedback and cannot determine if the attack succeeded, or if it even ocurred at all.</p>

<p>If Attack returned a value or better yet an object that defined the parameters of the attack, then we can start to tell some interesting stories! Take </p>

<blockquote>
  <p>On the <em>third</em> attack, user with <em>Shotgun</em> equipped was out of ammo and had to use it as a 'blunt force' <em>melee</em> weapon, that had less damage, but required the user to be within melee range...</p>
</blockquote>

<p>Write out user stories that explain the values and states of the objects over time, this will help you to identify the structures that you need, then we can talk about better implementations ;) </p>
    </div>