<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your program.  One positive thing I feel I must note is that you've used <code>const</code> consistently and appropriately to mark read-only member functions.  That's a very good practice and I hope you'll continue to do that as you go on!</p>

<h2>Use consistent case for <code>#include</code> files</h2>

<p>Your operating system might not be case sensitive with respect to files, but many are.  To prevent problems with portability, instead of writing lines like this in <code>ManagementSystem.cpp</code>:</p>

<pre><code>#include "managementsystem.h"
</code></pre>

<p>It should be this:</p>

<pre><code>#include "ManagementSystem.h"
</code></pre>

<h2>Provide definitions for class members</h2>

<p>In a number of classes, such as <code>Item</code>, there is a declaration for a construct such as <code>Item()</code> but no definition.  Either omit the declaration and allow the compiler to generate the constructor or tell the compiler (and the reader!) explicitly to do so:</p>

<pre><code>Item() = default;
</code></pre>

<h2>Eliminate unused variables</h2>

<p>There are several unused variables in the code, such as <code>type</code> in <code>ManagementSystem::populateMembersData()</code>.  Unused variables are a sign of poor quality code, and you don't want to write poor quality code. Your compiler is probably smart enough to tell you about this if you ask it nicely.</p>

<h2>Always <code>return</code> an appropriate value</h2>

<p>Your <code>ManagementSystem::populateMembersData()</code> and <code>MangementSystem::populateDaySales</code> routines have control paths that cause them to end without <code>return</code>ing any <code>bool</code> value.  This is an error and should be fixed.</p>

<h2>Don't hardcode file names</h2>

<p>Generally, it's not a good idea to hardcode a file name in software, and generally especially bad if it's an absolute file name (as contrasted with one with a relative path).  Instead, it might be better to allow the user of the program to specify the name, as with a command line parameter or configuration file.</p>

<h2>Think seriously about security</h2>

<p>I understand that this is probably a project just for learning and exploring, but it's worthwhile to think about security provisions for this.  First, it appears that logins and passwords are stored unencrypted in both memory and in the credentials file.  Second, it's not clear how the logon is managed but the fact that the <code>ManagementSystem</code> class maintains its own <code>logged</code> flag telling whether an administrator or manager is logged in signals potential problems to me.  If there is a bug that forgets to clear that value when an administrator logs out, that's potentially a security problem.  Better might be to check the credentials of whomever is logged in every time higher privileges are needed which would also, potentially, take care of the risk that, say, a manager is demoted or fired while logged in but still has privileges on the system.  There are myriad other considerations, of course; this is just to help remind you to think in that direction.</p>

<h2>Use a <code>class</code> to maintain invariants</h2>

<p>If a data structure has some invariant that it is enforcing, such as that if a membership type is changed, the date is reset, it makes sense to have that done via a <code>class</code>.  However, in the case of a class <code>Member</code>, where there are public setters and getters for every data item and no enforcement of any invariant, just make this a <code>struct</code> instead and eliminate a bunch of useless code.  This isn't Java.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rh-get" rel="nofollow noreferrer">C.131</a> for more details.</p>

<h2>Think carefully about object ownership</h2>

<p>The <code>Sale</code> class currently maintains a pointer to an <code>Item</code>.  First, shouldn't that at least be a <code>const *</code> so that the <code>Sale</code> object can't alter the <code>Item</code>?  Second, what happens if the <code>Item</code> is deleted before the <code>Sale</code> class is?  It would mean that the <code>Sale</code> class instance would contain an invalid pointer.  Those problems could be eliminated by using something like a <code>std::shared_ptr</code>.</p>

<h2>Avoid C-style macros</h2>

<p>There are few valid reasons left for using old-style C macros in modern C++ code.  Better is to create <code>const</code> or <code>constexpr</code> variables instead.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Res-macros2" rel="nofollow noreferrer">ES.31</a></p>

<h2>Provide complete code to reviewers</h2>

<p>This is not so much a change to the code as a change in how you present it to other people.  Without the full context of the code and an example of how to use it, it takes more effort for other people to understand your code.  This affects not only code reviews, but also maintenance of the code in the future, by you or by others.  One good way to address that is by the use of comments.  Another good technique is to include test code showing how your code is intended to be used.</p>
    </div>