<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is the longest possible answer to the shortest problem...</p>

<h2>How to make better loops in python</h2>

<ol>
<li><code>iterables</code></li>
<li><code>for</code> loops</li>
<li><code>range</code></li>
<li>list comprehensions</li>
<li>Generator expressions </li>
</ol>

<h2>How to improve this particular code</h2>

<ol>
<li>what is the simplest way possible of writing it</li>
<li>what is the shortest way possible of writing it</li>
</ol>

<hr>

<h2>How to make better loops in python</h2>

<h3>1. <code>iterables</code></h3>

<p>For loops can iterate over any iterables. What is an iterable? An iterable is a object we can iterate through.</p>

<p>More seriously, an iterable is an object that is itself a sequence of other objects. A list is an iterable, but it is not the only one as you will discover when you learn more about python.</p>

<h3>2. <code>for</code> loops</h3>

<p>A <code>for</code> loop can iterate over an iterable (in this case a list) like so:</p>

<pre><code>for i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
    print(i)
</code></pre>

<h3>3. <code>range</code></h3>

<p>The previous example is ugly because:
1. Hard-coded values can't be easily changed and are prone to mistakes.
2. We stored the first 10 positive integers in memory which take 144 bytes but it isn't scalable as if I want the first 1000000 positive integer, I would need <code>9 mo</code> of memory.</p>

<p>That's where <code>range</code> comes in, it is an iterable that doesn't take much space and is often used in loops:</p>

<pre><code>for i in range(10):
    print(i)
</code></pre>

<p>note: in earlier versions of python, range created a list and was equivalent to the first example.</p>

<p>What if I only want the numbers between 22 and 42 and skip every odd number:</p>

<pre><code>for i in range(22, 43, 2):
    # range(start, end, step) &lt;- this is a comment
    print(i)
</code></pre>

<p>note: the <code>range(22, 43)</code> doesn't actually include 43</p>

<h3>4. list comprehensions</h3>

<p>But wait, I don't want a 5 in my range, how can I remove it ?</p>

<pre><code>for i in range(10):
    if i==5:
        continue
    print(i)
</code></pre>

<p>The technical term for continue is "ugly".</p>

<p>What you can use instead is this:</p>

<pre><code>for i in range(10):
    if i!=5:
        print(i)
</code></pre>

<p>Which is better, but isn't what I want to show you. What I want to show you is list comprehensions:</p>

<pre><code>l = [n for n in range(10) if n!=5]
for i in l:
    print(i)
</code></pre>

<p>A list is an iterable remember. Well, I've created a list containing the first 10 number except 5.</p>

<h3>5. Generator expression</h3>

<p>Remember also that I've said that a list was a very bad choice due to the memory inefficiency. Well fortunately for us, we have a better solution, generator expressions:</p>

<pre><code>l = (n for n in range(10) if n!=5)
for i in l:
    print(i)
</code></pre>

<p>What changed ? Parentheses ! As easy as that. </p>

<p>But wait, I want to do the table of 5. How can I do that ?</p>

<pre><code>l = (n for n in range(10) if n!=5)
for i in l:
    print(i*5)
</code></pre>

<p>Yes, that works, but what if...</p>

<pre><code>l = (n*5 for n in range(10) if n!=5)
for i in l:
    print(i)
</code></pre>

<p>Yep, that also works...</p>

<h2>How to improve your particular code</h2>

<h3>1. what is the simplest way possible of writing it</h3>

<pre><code>for i in range(10):
    if i!=5:
        print(i*5)
</code></pre>

<h3>2. what is the shortest way possible of writing it</h3>

<pre><code>print('\n'.join(str(n*5) for n in range(10) if n!=5))
or 
print(*(n*5 for n in range(10) if n!=5), sep='\n')
</code></pre>

<p>As you learn more about python, you might be tempted to use the second one. But it isn't pythonic because it violates at least 6 of Tim Peter's commandment:</p>

<blockquote>
  <p>Beautiful is better than ugly.&lt;<br>
  Explicit is better than implicit.<br>
  Simple is better than complex.&lt;<br>
  Complex is better than complicated.<br>
  Flat is better than nested.&lt;<br>
  Sparse is better than dense.&lt;<br>
  Readability counts.&lt;<br>
  Special cases aren't special enough to break the rules.<br>
  Although practicality beats purity.<br>
  Errors should never pass silently.<br>
  Unless explicitly silenced.<br>
  In the face of ambiguity, refuse the temptation to guess.<br>
  There should be one-- and preferably only one --obvious way to do it.&lt;<br>
  Although that way may not be obvious at first unless you're Dutch.<br>
  Now is better than never.<br>
  Although never is often better than <em>right</em> now.<br>
  If the implementation is hard to explain, it's a bad idea.<br>
  If the implementation is easy to explain, it may be a good idea.<br>
  Namespaces are one honking great idea -- let's do more of those!</p>
</blockquote>

<p><code>import this</code> to read it at home</p>

<p>Some techniques of looping might be more appropriate in certain cases, but at least now you know what those techniques are.</p>
    </div>