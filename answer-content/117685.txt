<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using strings (in your case: <code>"o"</code> and <code>"x"</code>) to identify the two
players is inflexible and error-prone:</p>

<ul>
<li>If you mistype <code>"o"</code> as <code>"O"</code> or <code>"0"</code> then the program will not work
properly or crash, and the compiler cannot warn you about that.</li>
<li>If you decide to use different player names or different names for the image resources then you have to change it at many places.</li>
<li><p>The actual display of a player's name as uppercase letter is "hidden"
at</p>

<pre><code>winner = row[0].uppercaseString
</code></pre>

<p>in <code>checkForWinner()</code>.</p></li>
</ul>

<p>Defining string constants</p>

<pre><code>let playerO = "o"
let playerX = "x"
</code></pre>

<p>would be one possible solution, but the better way is to use an
<em>enumeration</em> which can take exactly two values:</p>

<pre><code>enum Player : String {
    case X = "x"
    case O = "o"
}
</code></pre>

<p>Methods to get the "other" player, the display image, and to select
a random player can be added directly to the <code>enum</code> definition:</p>

<pre><code>enum Player : String {
    case X = "x"
    case O = "o"

    func other() -&gt; Player {
        switch (self) {
        case .O: return .X
        case .X: return .O
        }
    }

    func image() -&gt; UIImage {
        return UIImage(named: self.rawValue + ".png")!
    }

    static func random() -&gt; Player {
        return arc4random_uniform(2) == 0 ? .O : .X
    }
}
</code></pre>

<p>This makes the <code>pickFirstPlayer</code> and <code>toggleNextPlayer()</code> methods
in the view controller obsolete, and <code>viewDidLoad()</code> becomes</p>

<pre><code>override func viewDidLoad() {
    super.viewDidLoad()
    currentPlayer = Player.random()
}
</code></pre>

<p>where <code>currentPlayer</code> is defined as</p>

<pre><code>var currentPlayer: Player!
</code></pre>

<hr>

<p>To print a player's name, implement the <code>CustomStringConvertible</code>
protocol:</p>

<pre><code>extension Player : CustomStringConvertible {
    var description: String { 
        return self.rawValue.uppercaseString
    }
}
</code></pre>

<p>If <code>winner</code> is value of type <code>Player</code> then </p>

<pre><code>gameResult.text = "\(winner) is the winner!"
</code></pre>

<p>prints the winner's name using the <code>description</code> method, and you 
can adopt that to your needs without affecting the rest of the code or the image resource names.</p>

<hr>

<p>Your <code>gameState</code> variable describes the contents of the game board,
so I would call it <code>board</code> instead. Each field can be empty, or be
occupied by one of the players. This can be modeled by </p>

<pre><code>var board : [Player?] = [nil, nil, nil,
    nil, nil, nil,
    nil, nil, nil,
]
</code></pre>

<p>i.e. an array of <em>optional</em> players.</p>

<hr>

<p>I would separate the determination of a possible winner from the
<em>display</em> of the outcome, e.g. by defining the method as</p>

<pre><code>func checkForWinner() -&gt; Player? { ... }
</code></pre>

<p>which either returns the winner or <code>nil</code>. In that method,</p>

<blockquote>
<pre><code>       var row: [String] = []
        for space in combo {
            row.append(gameState[space])
        }
</code></pre>
</blockquote>

<p>can be simplified using <code>map()</code>. Using the new Player type and return type it  would look this:</p>

<pre><code>func checkForWinner() -&gt; Player? {
    for combo in winningCombos {
        let row = combo.map { board[$0] }
        if (row[0] != nil &amp;&amp; row[0] == row[1] &amp;&amp; row[1] == row[2]) {
            return row[0]
        }
    }
    return nil
}
</code></pre>

<p>It would suffice to check only the rows which are changed by the
last move. On the other hand, with 8 winning combinations, that
does not make a big performance difference.</p>

<hr>

<p>Assuming that the <code>makeMove()</code> action is connected to <em>buttons</em>
only, you should declare it as</p>

<pre><code>@IBAction func makeMove(sender: UIButton) { ... }
</code></pre>

<p>this allows better error checking than <code>sender : AnyObject</code>.
(When you create the action in interface builder, there is an option
for that.)</p>

<p>Using all the above stuff, the <code>makeMove()</code> method becomes</p>

<pre><code>@IBAction func makeMove(sender: UIButton) {
    let space = sender.tag
    if (board[space] == nil &amp;&amp; !gameOver) {

        sender.setImage(currentPlayer.image(), forState: .Normal)
        board[space] = currentPlayer
        turnCount++

        if let winner = checkForWinner() {
            gameOver = true
            gameResult.text = "\(winner) is the winner!"
        } else if (turnCount == 9) {
            gameOver = true
            gameResult.text = "It's a tie!"
        } else {
            currentPlayer = currentPlayer.other()
        }
    }
}
</code></pre>

<hr>

<p>You use the <code>UIView</code>'s <code>tag</code> property to identify from which button
the action method is called. This is OK, but note that <code>0</code> (zero)
is the default tag for all views. It is therefore better to tag the
buttons with <code>1 ... 9</code> instead of <code>0 ... 8</code>, and adjust that in</p>

<pre><code>    let space = sender.tag - 1
</code></pre>

<hr>

<p>A final note about using <code>self</code>: You can access properties and
methods of the current class without using <code>self</code> (unless there
is an ambiguity, e.g. due to a local variable or function parameter with the name name, or if <code>self</code> is captured implicitly in a block.)</p>

<p>Whether you use <code>self</code> or not to access properties is
a matter of taste and programming style,
but in any case it should be <em>consistent</em> in your code, which it
currently isn't:</p>

<pre><code>self.turnCount++
// ...
gameOver = true
</code></pre>

<p>(<em>Remark:</em> There was a <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md" rel="nofollow">language proposal</a> to require self for accessing instance members, which
was <a href="https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160104/005478.html" rel="nofollow">rejected</a> recently.
Also <code>++</code> and <code>--</code> <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md" rel="nofollow">will be deprecated soon and removed in Swift 3</a>.)</p>
    </div>