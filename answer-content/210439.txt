<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Using just a priority queue</strong></p>

<p>Yes, it's possible, although you would need a special implementation of priority queue, which internally is a hash map + a heap. This trick is commonly used in Dijkstra's algorithm. See <a href="https://stackoverflow.com/a/17581306/1370445">https://stackoverflow.com/a/17581306/1370445</a>.</p>

<p>Unlike in Dijkstra's algorithm, in your task, you don't need to be able to alternately update values on the heap and remove the top element. So I would discourage you from using this data structure, and encourage to instead focus on achieving high code quality (including low code volume), using the data structures and operations available in Scala's standard library.</p>

<p>Here are my recommendations regarding possible improvements to the code, some of them obsolete the others in the context of this specific piece of code, but I think it's worth to mention them anyway:</p>

<p><strong>Use UpperCamelCase for class names</strong></p>

<p>Scala has an official naming convention (<a href="https://docs.scala-lang.org/style/naming-conventions.html" rel="nofollow noreferrer">https://docs.scala-lang.org/style/naming-conventions.html</a>) which recommends to name classes with UpperCamelCase, so <code>wordFreq</code> should be <code>WordFreq</code>.</p>

<p><strong>Use Scala syntax consistently</strong></p>

<p>Scala let's you replace the dot and parentheses with a space in some case. <code>x method param</code> is equivalent to <code>x.method(param)</code>. In the snippet of code you've provided you sometimes use that feature (<code>"aa bbb  ccc aa ddd aa ccc" split " +"</code>), sometimes use just part of it <code>c compareTo(that.c)</code> and sometimes you don't use it (<code>myHeap.enqueue(wordFreq(w,c))</code>). I would recommend you to decide which style of code you prefer (I prefer dots and parentheses) and use it consistently, at least within a single source file.</p>

<p><strong>Embrace immutability</strong></p>

<p>Scala provides two sets of collections, mutable and immutable. In most cases it's preferable to use immutable collection as they make reasoning easier and eliminate whole class of bugs. I won't dive deeper into that topic, as it is covered in detail by many articles on the internet, for example:</p>

<ul>
<li><a href="https://www.quora.com/What-are-the-advantages-and-disadvantages-of-immutable-data-structures" rel="nofollow noreferrer">https://www.quora.com/What-are-the-advantages-and-disadvantages-of-immutable-data-structures</a></li>
<li><a href="https://www.yegor256.com/2014/06/09/objects-should-be-immutable.html" rel="nofollow noreferrer">https://www.yegor256.com/2014/06/09/objects-should-be-immutable.html</a></li>
</ul>

<p><strong>Prefer <code>Ordering</code> over <code>Ordered</code></strong></p>

<p><code>Ordered</code> binds together the data structure and the way of ordering/comparing them. This is reasonable for thing which have some notion of "natural order" like Strings, or Integers. <code>Ordering</code> lets you deliver the way of ordering separately from the data structure declaration, resulting in more composable code.</p>

<p>So instead of </p>

<pre><code>case class wordFreq(w: String, c: Int) extends Ordered[wordFreq] {
  override def compare(that: wordFreq): Int = c compareTo(that.c)
}
</code></pre>

<p>I would write</p>

<pre><code>case class WordFreq(w: String, c: Int)
val mostFrequentFirstWordFreqOrdering: Ordering[WordFreq] = 
  (x: WordFreq, y: WordFreq) =&gt; y.c.compareTo(x.c)
</code></pre>

<p>you could make the <code>mostFrequentFirstWordFreqOrdering</code> implicit so that the compiler will pick it up automatic, but since there's more than one reasonable way to sort <code>WordFreq</code> I would prefer to stay explicit and pass the ordering by-hand.</p>

<p><strong>Use sorted/sortBy instead of hand-crafting a heap sort</strong></p>

<pre><code>val myHeap = PriorityQueue[wordFreq]()
wordCount.toSeq foreach { case (w,c) =&gt; myHeap.enqueue(wordFreq(w,c))  }
myHeap.dequeueAll
</code></pre>

<p>Is basically a heap sort implementation.  It could be replaced by the <code>sorted</code> or the <code>sortBy</code> methods of <code>SeqLike</code>. It could look like</p>

<pre><code>wordCount.toSeq.sortBy{case (word, count) =&gt; -count}
</code></pre>

<p>or if you find the <code>-</code> and inelegant way of reversing the order, alternatives are:</p>

<pre><code>wordCount.toSeq.sorted(Ordering.by[(String, Int), Int]{case (word, count) =&gt; count}.reverse)
</code></pre>

<p>or</p>

<pre><code>wordCount.toSeq.sortBy{case (word, count) =&gt; count}.reverse
</code></pre>

<p>the last one being less efficient in terms of allocations.</p>

<p><strong>countBy</strong></p>

<pre><code>val wordCount = HashMap[String, Int]()
for  (word &lt;- words)  {
  wordCount += (word -&gt; (wordCount.getOrElse(word,0) + 1))
}
</code></pre>

<p>can be replaced with </p>

<pre><code>words.groupBy(x =&gt; x).mapValues(_.length)
</code></pre>

<p>In fact I observe this pattern so often, that in some project I have an "extension method" <code>countBy</code> added to Traversable like this:</p>

<pre><code>implicit class RichTraversable[+A](val traversable: Traversable[A]) extends AnyVal {
  def countBy[K, That](accessor: A =&gt; K): Map[K, Int] =
    traversable.groupBy(accessor).mapValues(_.length)
}
</code></pre>

<p><strong>Separate calculations from making side effects</strong></p>

<p>The line <code>println(myHeap.dequeueAll.map(_.w).mkString(","))</code> does two things. It finishes the process of sorting the results <code>myHeap.dequeueAll.map(_.w)</code> and prints them in human readable format println(results.mkString(",")). Two things should be done in two lines, or better, two methods, or better functions (..., but functional IO is a longer topic).</p>

<p><strong>Split by more than just spaces</strong>
In real-world text words may be separated by more than just spaces - new-lines, commas, semicolons, etc.. <code>\W</code> is a regex pattern for "non-word character" (see <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html" rel="nofollow noreferrer">https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html</a>). Using <code>"\\W+"</code> would be better than <code>" +"</code>, although most likely there would still be some edge-cases where it would go wrong.</p>

<p><strong>Final result</strong></p>

<p>After all the suggested modifications the code could look like this:</p>

<pre><code>object FindWordFreq extends App {
  val words = "aa bbb  ccc, aa ddd\naa\rccc" split "\\W+"
  val wordCounts = words.groupBy(x =&gt; x).mapValues(_.length)
  val wordsByDescendingNumberOfOccurrences = wordCounts.toSeq.sortBy{case (_, count) =&gt; count}.reverse
  println(wordsByDescendingNumberOfOccurrences.mkString(","))
}
</code></pre>
    </div>