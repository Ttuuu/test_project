<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Enums</h1>

<p>You have a definite number of courses, weekdays and timeslots. So instead of using numbers to represent them, you can better use <code>Enum</code>s</p>

<pre><code>from enum import Enum
class Courses(Enum):
    Dessin = 1
    English = 2
    Maths = 3
    Info = 4
    Electronique = 5
    Biochimie = 6

class Timeslots(Enum):
    morning = "|8H-11H|"
    noon = "|11H-13H|"
    afternoon = "|14H-17H|"

class Weekdays(Enum):
    Lundi = 1
    Mardi = 2
    Mercredi = 3
    Jeudi = 4
    Vendredi = 5
    Samedi = 6
</code></pre>

<h1><code>"rien"</code></h1>

<p>You use <code>"rien"</code> as a sentinel value. A better way to express this would be to use <code>None</code></p>

<h1>input</h1>

<p>There is a lot of reused code to get the input, and no validation. Better would be to use a separate function to gather the input</p>

<pre><code>def get_input(inputs, message=""):
    while True:
        try:
            msg = ", ".join(f"{value.value}-{value.name}" for value in inputs)
            msg += message
            value= input(msg)
            if value.isdigit():
                return inputs(int(value))
            return inputs[value]
        except (KeyError, ValueError):
            pass
</code></pre>

<p>This can be used as:</p>

<pre><code>course = get_input(Courses, """
Choisissez le chiffre de la matiere a programmer
""")
day = get_input(Weekdays, """
Choisissez le chiffre du jour
""")
timeslot = get_input(Timeslots, """
Choisissez la heure
""")
</code></pre>

<p>The last one might need a slightly different approach</p>

<h1>if-elif</h1>

<p>Then at least the long <code>if-elif-else</code> would be clear:</p>

<pre><code>if (course = Courses.Dessin and day = Weekdays.Lundi and timeslot = Timeslots.morning):
...
</code></pre>

<p>instead of </p>

<pre><code>if x == "1" and y == "1" and z == "1":
</code></pre>

<h1>dict</h1>

<p>Even better would be to use a datastructure to capture the schedule, instead of variables <code>a</code> to <code>p</code>. You can easily create a dict of class times:</p>

<pre><code>from itertools import product
schedule= {
    day: {
        time: None
        for time in Timeslots
        if not (
            day in {Weekdays.Mercredi, Weekdays.Samedi}
            and time == Timeslots.afternoon
        )
    }
    for day in Weekdays
}
</code></pre>

<p>This results in:</p>

<pre><code>{&lt;Weekdays.Lundi: 1&gt;: {&lt;Timeslots.morning: '|8H-11H|'&gt;: None,
  &lt;Timeslots.noon: '|11H-13H|'&gt;: None,
  &lt;Timeslots.afternoon: '|14H-17H|'&gt;: None},
 &lt;Weekdays.Mardi: 2&gt;: {&lt;Timeslots.morning: '|8H-11H|'&gt;: None,
  &lt;Timeslots.noon: '|11H-13H|'&gt;: None,
  &lt;Timeslots.afternoon: '|14H-17H|'&gt;: None},
 &lt;Weekdays.Mercredi: 3&gt;: {&lt;Timeslots.morning: '|8H-11H|'&gt;: None,
  &lt;Timeslots.noon: '|11H-13H|'&gt;: None},
 &lt;Weekdays.Jeudi: 4&gt;: {&lt;Timeslots.morning: '|8H-11H|'&gt;: None,
  &lt;Timeslots.noon: '|11H-13H|'&gt;: None,
  &lt;Timeslots.afternoon: '|14H-17H|'&gt;: None},
 &lt;Weekdays.Vendredi: 5&gt;: {&lt;Timeslots.morning: '|8H-11H|'&gt;: None,
  &lt;Timeslots.noon: '|11H-13H|'&gt;: None,
  &lt;Timeslots.afternoon: '|14H-17H|'&gt;: None},
 &lt;Weekdays.Samedi: 6&gt;: {&lt;Timeslots.morning: '|8H-11H|'&gt;: None,
  &lt;Timeslots.noon: '|11H-13H|'&gt;: None}}
</code></pre>

<p>Now to check whether a slot has been taken already, instead of the long if-elif-else, you get</p>

<pre><code>if schedule[day][timeslot] is not None:
    print("!!!!!!DESOLE la session est deja occupee!!!!!! ")
</code></pre>

<p>and program a class with</p>

<pre><code>else:
    schedule[day][timeslot] = course
</code></pre>

<p>Now to tackle the fact that on Saturday there is only one slot, you can precede this with:</p>

<pre><code>if time not in schedule[day]:
    print("!!!DESOLE les cours s'arretent a midi le mercredi et samedi")
</code></pre>

<p>Even better would be to abstract this in a different functions, but I suggest you already try to incorporate these tips, and then see how far you get, and open a next question if you need more help. </p>

<p>Some future way forwards:</p>

<ul>
<li>return values instead of printing messages</li>
<li>externalize the checks whether a certain course can be taken at a certain time</li>
<li>use <code>Exception</code>s to communicate failures, instead of print messages</li>
<li>To tackle the choice of not allowing the same course on one day, you can implement a small validator</li>
<li>Abstract the schedule to a <code>Class</code> instead of a <code>dict</code></li>
</ul>
    </div>