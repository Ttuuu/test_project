<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your function does a <em>linear search</em> over all elements of the nested array, until the given number is found, or all elements have been visited. The complexity is <span class="math-container">\$ O(mn) \$</span> for an <span class="math-container">\$ m \$</span>-by-<span class="math-container">\$n \$</span> matrix. For a square <span class="math-container">\$ n \$</span>-by-<span class="math-container">\$n \$</span> matrix that makes <span class="math-container">\$ O(n^2) \$</span>, and not <span class="math-container">\$ O(n) \$</span> as you claimed.</p>

<p>This can be improved, but let's first do a</p>

<h3>Review of your current implementation</h3>

<p>The Java <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html" rel="nofollow noreferrer">naming convention</a> for variables is “lower camel case,” e.g. <code>lastRow</code>, <code>lastCol</code> instead of <code>LastRow</code>, <code>LastCol</code>.</p>

<p>The while-loop is a nested loop over all rows and columns in disguise, and can be more clearly written as nested for-loops:</p>

<pre><code>int numRows = a.length;
int numCols = a[0].length;

for (int row = 0; row &lt; numRows; row++) {
    for (int col = 0; col &lt; numCols; col++) {
        if (a[row][col] == x) {
            return true;
        }
    }
}
</code></pre>

<p>This also restricts the scope of <code>row</code> and <code>col</code> to the minimum needed.</p>

<h3>A better algorithm</h3>

<p>Your implementation does not take advantage of the fact that the numbers are sorted in each row and in each column. A better algorithm is described in <a href="https://www.geeksforgeeks.org/search-in-row-wise-and-column-wise-sorted-matrix/" rel="nofollow noreferrer">Search in a row wise and column wise sorted matrix</a> on GeeksForGeeks:</p>

<ol>
<li>Start with top right element.</li>
<li>Loop: compare this element e with x

<ul>
<li>if e = x, then return position of e, since we found x in the given matrix.</li>
<li>if e &gt; x then move left to check elements smaller than e (if out of bound of matrix, then break and return false)</li>
<li>if e &lt; x then move below to check elements greater than e (if out of bound of matrix, then break and return false)</li>
</ul></li>
<li>repeat until you find the element, or return false</li>
</ol>

<p>I do not want to deprive you of the satisfaction of implementing it yourself. Just note that any element is now found after at most <span class="math-container">\$ m+n \$</span> steps, so the complexity is reduced from <span class="math-container">\$ O(mn) \$</span> to <span class="math-container">\$ O(m+n) \$</span> for an <span class="math-container">\$ m \$</span>-by-<span class="math-container">\$n \$</span> matrix.</p>
    </div>