<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>.. review .. mainly on the aspects of <em>OOP</em> and <em>CleanCode</em></p>
</blockquote>

<h2>To Some of Your Thoughts</h2>

<blockquote>
  <p>usage of integer for doors - i think that's not so fancy...</p>
</blockquote>

<p>Additional to a <code>Door</code> class we could add classes for <code>Player</code>, <code>ShowMaster</code>, and <code>MontyHall</code> too.</p>

<blockquote>
  <p>should I break up the code more? maybe one method for removing one door by the showmaster?</p>
</blockquote>

<p>This job is be done when we split up the code with classes into different logical units.</p>

<blockquote>
  <p>too much comments (tell don't ask)</p>
</blockquote>

<p>Comments are add all not bad but when you group your code in a method you all ready see semi-independent logic. In Robert C. Martins words: <a href="https://www.goodreads.com/author/quotes/45372.Robert_C_Martin?page=2" rel="nofollow noreferrer">“Don’t Use a Comment When You Can Use a Function or a Variable”</a></p>

<h1>Review</h1>

<p>Bad news first.. I see no oop at all in your code.. An indicator for non-oop code is the heavy use off <code>static</code> and no own data-types. With other words: You write a huge procedural algorithm. </p>

<h2>Find Objects</h2>

<p>My first step would be to wrap this method into a class called <code>MontyHall</code> and give it a public method <code>caluclateChance</code>. I would avoid the <code>get</code>-prefix because it is not a getter.</p>

<p>After that, we can search for cohesion and abstractions. Your comments helps us very well!</p>

<p>The comment <code>//the player selects one of three doors</code> shows us that we could create a <code>Player</code>. After that the <code>ShowMaster</code> wants <code>//.. remove one goat (but not the selected door)</code>. Than our <code>//player changes door</code> if he wants to. </p>

<p>We should think again about a <code>Door</code>. Currently, the <code>doors</code> are represented as a list of integers. But in the domain of Monty Hill, a door is something that hides a price and has a number. </p>

<pre class="lang-java prettyprint-override"><code>class Door {
    private int number;
    private Price price;

    // all-args constructor..

    // hashcode and equals-method..
}

</code></pre>

<h2>Code Smell</h2>

<h3>Magic Number</h3>

<p>The <a href="https://stackoverflow.com/questions/47882/what-is-a-magic-number-and-why-is-it-bad">magic number</a> <code>3</code> appears two times in your code:</p>

<ul>
<li><code>random.nextInt(3)</code></li>
<li><code>if (..., currentDoor &lt; 3; ..)</code></li>
</ul>

<p>The <code>3</code> represents the number of doors and can be replaced by <code>int NUMBER_OF_DOORS = doors.size()</code>, or you can hide it in an object, which would be the preferred way. </p>

<h3><a href="https://www.martinfowler.com/bliki/FlagArgument.html" rel="nofollow noreferrer">Flag Argument</a></h3>

<p>The method <code>getChanceForPlay</code> takes as second argument a Boolean value, which creates uses <code>if (doChange) { /*...*/}</code> to create a branch in your method. The downside of this flag is that we need to test each branch when writing a unit test (but ok.. in this we have only on possible branch). </p>

<p>This flag has a logical cohesion to a <code>Player</code>. Let's say a <code>Player</code> is an abstract data type and there are two possible types of players: <code>StraightPlayer</code> and <code>ChangePlayer</code>. With polymorphism we can pass both players and call <code>player.chooseDoor</code>. While the <code>StraightPlayer</code> chooses the same door as before and <code>ChangePlayer</code> changes his/her selection.</p>

<h1>Code</h1>

<p><code>// will follow</code></p>
    </div>