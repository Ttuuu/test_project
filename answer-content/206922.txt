<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Took a while but a got the function traits working. To make the check actually work I had to remove the inherit argument type from the Attach function and make it a template function itself. (Type conversion would take place before the static_assert inside the function happens)</p>

<p>Maybe I will remove the yet unused part of the function_traits (arity, return type). Not sure about that yet.</p>

<p>event.hpp:</p>

<pre><code>namespace event {
// The type of the source identifier passed to each event listener
typedef const std::string&amp; source_t;

template&lt;typename... args&gt;
using func = std::function&lt;void(source_t, args...)&gt;;

///
/// \brief A handle that identifiers listeners.
///
/// \details Listeners are functions that get called once a event is fired.
/// This struct is used to identify such functions and is used to detach them.
///
struct listener_handle
{
public:
  ///
  /// \brief Create a new handle
  /// \param s  The source
  /// \param h  The handle id
  ///
  listener_handle(source_t s="", int h=0) :
    source(s),
    handle(h)
  { }

  ///
  /// \brief Equals operator
  /// \param other  The handle to compare
  /// \return   True, if the handles are equal
  ///
  bool operator==(const listener_handle&amp; other) const
  {
    return this-&gt;source == other.source &amp;&amp;
        this-&gt;handle == other.handle;
  }  

  std::string source;
  int handle;
};

template &lt;class... T&gt;
///
/// \brief The event class.
///
class Event
{
public:
  ///
  /// \brief Create new instance
  /// \param source     The name of the event source.
  ///
  Event(source_t source) :
    source(source)
  {}

  ///
  /// \brief Release resources
  ///
  ~Event()
  {
    this-&gt;listeners.clear();
  }

  ///
  /// \brief Attach an event
  /// \param newListener The event listener to attach
  /// \return         The handle that may be used to detach the event
  ///
  template &lt;class... args&gt;
  listener_handle&amp; Attach(const func&lt;args...&gt;&amp; newListener)
  {
    using listener_traits = ftraits::function_traits&lt;typename std::decay&lt;decltype(newListener)&gt;::type&gt;;
    ftraits::assert_traits_equal&lt;listener_traits, traits&gt;();

    this-&gt;listeners.push_front(Listener{newListener, this-&gt;createListenerHandle()});
    return this-&gt;listeners.front().handle;
  }

  ///
  /// \brief Detach an event using its id
  /// \param id The id of the event to detach
  ///
  void Detach(const listener_handle&amp; handle)
  {
    this-&gt;listeners.remove_if([handle] (const Listener&amp; l) {return l.handle == handle;});
  }

  ///
  /// \brief Call all listeners
  /// \param argument The EventArgs to send
  ///
  void Invoke(const T&amp;... args) const
  {
    std::for_each(std::begin(this-&gt;listeners), std::end(this-&gt;listeners), [this, &amp;args...] (const Listener&amp; l) {
      l.listener(this-&gt;source, args...);
    });
  }

private:
  using traits = ftraits::function_traits&lt;func&lt;T...&gt;&gt;;

  struct Listener {
    func&lt;T...&gt; listener;
    listener_handle handle;
  };

  ///
  /// \brief  Create a new listener handle using the registered source name
  /// \return       A new listener handle
  ///
  listener_handle createListenerHandle() const
  {
    return listener_handle{this-&gt;source, createRandom()};
  }

  std::string source;
  std::forward_list&lt;Listener&gt; listeners;
};

} //event namespace
</code></pre>

<p>function_traits.hpp:</p>

<pre><code>namespace ftraits {

///
/// \brief Undefined base
///
template&lt;typename&gt;
struct function_traits;

///
/// \brief Specialization for std::function
///
template &lt;typename Function&gt;
struct function_traits : public function_traits&lt;decltype(&amp;Function::operator())&gt;
{ };

///
/// \brief Function traits implementation
///
template &lt;typename ClassType, typename ReturnType, typename... Arguments&gt;
struct function_traits&lt;ReturnType(ClassType::*)(Arguments...) const&gt;
{
  typedef ReturnType result_type;

  static constexpr std::size_t arity = sizeof...(Arguments);

  template &lt;std::size_t N&gt;
  struct argument
  {
    using type = typename std::tuple_element&lt;N, std::tuple&lt;Arguments...&gt;&gt;::type;
  };
};

template&lt;typename  t1, typename t2&gt;
///
/// \brief Check the the function traits are equal using static assert
///
void assert_traits_equal()
{
  static_assert(std::is_same&lt;t1, t2&gt;::value, "The function signatures do not match.");
};

}

#endif // FUNCTION_TRAITS_H
</code></pre>

<p>I also moved the random number generator to a separate header file. </p>
    </div>