<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd start by splitting out the logic into multiple functions so that the query result loop isn't also responsible for defining all the execution logic that happens within. It instead will call functions where that is defined.</p>

<p>E.g. 
    </p>

<pre><code>$current_forum = sql_fetch(sql_query($conn, "SELECT url, name
FROM forum
WHERE id='".$comment['topic_id']."' and deleted=0"));
</code></pre>

<p>Becomes
    </p>

<pre><code>$current_forum = fetch_current_forum($conn, $comment['topic_id']);
</code></pre>

<p>And
    </p>

<pre><code>function fetch_current_forum($connection, $topic) {
    return sql_fetch(sql_query($conn, "SELECT url, name
        FROM forum
        WHERE id='".$comment['topic_id']."' and deleted=0")
    );
}
</code></pre>

<p>That way common logic is encapsulated in a single area instead of being redefined in multiple areas. Function arguments can also help with small differences (like what's happening <code>if($current_comments[0]&lt;=20)</code>).</p>

<p>P.S. Using variables directly in a SQL query is a security vulnerability (see <a href="https://www.owasp.org/index.php/SQL_Injection" rel="nofollow noreferrer">SQL Injection</a>). <a href="http://php.net/manual/en/book.pdo.php" rel="nofollow noreferrer">PDO</a> can help there.</p>
    </div>