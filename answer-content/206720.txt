<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>We can do a bit better than <code>remove_if</code>. Since we already know which values need to be removed, there's no need to apply a predicate to every element.</p>

<p>To remove an element and preserve the order, we have to move all the elements beyond it to the left. The start of the range to be moved is one past the element to be removed. The end of the range is the next element to be removed. We repeat this until there are no more elements to be removed, at which point the end of the range becomes the end of the original vector. We do one final move, and return the end of the valid range.</p>

<pre><code>#include &lt;vector&gt;
#include &lt;algorithm&gt;

template&lt;class ForwardIt, class ForwardIndexIt&gt;
ForwardIt remove_if_at_indices(ForwardIt first, ForwardIt last, ForwardIndexIt i_first, ForwardIndexIt i_last)
{
    if (first == last)
        return first;

    if (i_first == i_last)
        return last;

    auto dest = std::next(first, *i_first++);
    auto start = std::next(dest);

    while (i_first != i_last)
    {
        auto const end = std::next(first, *i_first++);
        dest = std::move(start, end, dest);
        start = std::next(end);
    }

    dest = std::move(start, last, dest);

    return dest;
}

template &lt;typename T&gt;
void remove_elements_at(std::vector&lt;T&gt;&amp; v, std::vector&lt;std::size_t&gt; const&amp; rm)
{
    v.erase(
        remove_if_at_indices(v.begin(), v.end(), rm.begin(), rm.end()), 
        v.end());
}
</code></pre>

<p>This seems to work out slightly faster than <code>std::remove_if</code>.</p>

<p>Testing / benchmarking code:</p>

<pre><code>#include &lt;chrono&gt;
#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;random&gt;
#include &lt;string&gt;
#include &lt;cassert&gt;

void test(bool condition, std::string const&amp; message)
{
    if (!condition)
        std::cout &lt;&lt; "FAIL: " &lt;&lt; message &lt;&lt; std::endl;
    else
        std::cout &lt;&lt; "pass" &lt;&lt; std::endl;
}

template &lt;typename T&gt;
void print(std::vector&lt;T&gt; const&amp; v)
{
    for (size_t i = 0; i &lt; v.size();i++)
    {
        std::cout &lt;&lt; v[i] &lt;&lt; " ";
    }
    std::cout &lt;&lt; std::endl;
}

int main()
{
    {
        std::vector&lt;std::string&gt; v = { "Alice", "Smith", "is", "very", "clever", "and", "is", "very", "nice" };
        print(v);
        std::vector&lt;std::size_t&gt; toRemove = { 1, 6 };
        remove_elements_at(v, toRemove);
        print(v);
    }

    {
        auto v = std::vector&lt;int&gt;{ };
        auto i = std::vector&lt;std::size_t&gt;{ };
        test(remove_if_at_indices(v.begin(), v.end(), i.begin(), i.end()) == v.begin(), "empty vector and indices");
    }

    {
        auto v = std::vector&lt;int&gt;{ 0, 1, 2, };
        auto i = std::vector&lt;std::size_t&gt;{ };
        test(remove_if_at_indices(v.begin(), v.end(), i.begin(), i.end()) == v.begin(), "empty indices");
    }

    {
        auto v = std::vector&lt;int&gt;{ 0, 1, 2, };
        auto i = std::vector&lt;std::size_t&gt;{ 0 };
        test(remove_if_at_indices(v.begin(), v.end(), i.begin(), i.end()) == v.begin() + 2u, "remove front");
    }

    {
        auto v = std::vector&lt;int&gt;{ 0, 1, 2, };
        auto i = std::vector&lt;std::size_t&gt;{ 2 };
        test(remove_if_at_indices(v.begin(), v.end(), i.begin(), i.end()) == v.begin() + 2u, "remove back");
    }

    {
        auto v = std::vector&lt;int&gt;{ 0, };
        auto i = std::vector&lt;std::size_t&gt;{ 0 };
        test(remove_if_at_indices(v.begin(), v.end(), i.begin(), i.end()) == v.begin(), "remove only");
    }

    {
        auto v = std::vector&lt;int&gt;{ 0, 1, 2, 4 };
        auto i = std::vector&lt;std::size_t&gt;{ 1, 2 };
        test(remove_if_at_indices(v.begin(), v.end(), i.begin(), i.end()) == v.begin() + 2u, "remove adjacent");
    }

    {
        auto v = std::vector&lt;int&gt;{ 0, 1, 2 };
        auto i = std::vector&lt;std::size_t&gt;{ 0, 1, 2 };
        test(remove_if_at_indices(v.begin(), v.end(), i.begin(), i.end()) == v.begin(), "remove all");
    }

    {
        auto v_size = std::size_t{ 10000 };
        auto i_size = std::size_t{ 2000 };
        assert(i_size &lt;= v_size);

        auto v = std::vector&lt;std::size_t&gt;(v_size);
        std::iota(v.begin(), v.end(), std::size_t{ 0 });

        auto rng = std::mt19937_64();
        auto i = v;
        std::shuffle(i.begin(), i.end(), rng); // c++17 could use std::sample instead
        i.resize(i_size);
        std::sort(i.begin(), i.end());

        auto start = std::chrono::high_resolution_clock::now();

        remove_elements_at(v, i);

        auto end = std::chrono::high_resolution_clock::now();
        auto time = std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(end - start);

        std::cout &lt;&lt; i_size &lt;&lt; " elements removed in " &lt;&lt; time.count() &lt;&lt; "ns" &lt;&lt; std::endl;
    }

    return 0;
}
</code></pre>
    </div>