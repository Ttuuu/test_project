<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Pass by reference?</h2>

<p>Not everyone agrees, however, references ain't allowed to be nullptr. If you don't expect a nullptr, pass by reference instead of pointer.</p>

<pre><code>Presenter presenter(board);
</code></pre>

<h2>Initialize your variables</h2>

<p>It's always a good idea to initialize your variables, even when replacing the values with cin.
Cin leaves the value unmodified, when entering invalid data. So you have undefined behavior in your program.</p>

<p>So either initialize your values to an invalid value OR</p>

<h2>Check on input failure</h2>

<pre><code>if (!cin &gt;&gt; oldX)
    // Handle error
</code></pre>

<h2>Check boundaries</h2>

<p>As indicated entering <code>a b c d</code> causes problems, entering <code>0 1 2 3</code> does as well as it will result in out of bounds access.</p>

<h2>Use compound initialization</h2>

<p>If things are good they deserve a mention as well. Calling the move with pairs clearly indicates for the caller how it's grouped:</p>

<pre><code>if (board.move({ oldX, oldY }, { newX, newY })
</code></pre>

<h2>Use standard types</h2>

<pre><code>  if (board.move({ oldX, oldY }, { newX, newY }) == invalid)
</code></pre>

<p>Why return a special value, when you only check on failure? A bool will work as well.</p>

<h2>std::unique_ptr</h2>

<pre><code> if (i &lt; 2)   pieces[i][j] = new Piece({ i, j }, player1);
</code></pre>

<p>From C++14 on, using <code>std::make_unique&lt;Piece&gt;(...)</code> is recommended. Storing the value in a unique_ptr indicates ownership clearly, while preventing memory-leak.</p>

<h2>Constants</h2>

<pre><code> for (int i = 0; i &lt; 8; i++)
</code></pre>

<p>8 is a really nice number, putting it in a constant allows you to give it a name.</p>

<h2>Check on pointers</h2>

<pre><code> if (pieces[old_pos.x][old_pos.y]-&gt;get_owner() != active_player)
</code></pre>

<p>You haven't checked your pointer on null. Again you assume valid input.</p>

<h2>Const?</h2>

<p>If you don't expect changes to an instance, make it const. If catches simple mistakes and clearly sets expectations.</p>

<pre><code> Player get_player(Coord pos) const
</code></pre>

<h2>Initializer list</h2>

<pre><code>Presenter(Board&amp; b) : board(b) {
    board = b;
 };
</code></pre>

<h2>Scoped enumerations</h2>

<pre><code>enum class Player { ... };
</code></pre>
    </div>