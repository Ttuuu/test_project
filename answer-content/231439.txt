<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>let me know what I can improve in this code.</p>
</blockquote>

<hr>

<p>For a real-world code review, code should be correct, maintainable, reasonably efficient, and, most importantly, readable.</p>

<p>Writing code is a process of stepwise refinement.</p>

<p>Here's your code. Consider it as a first draft.</p>

<pre><code>func BubbleSort(arr []int) []int {
    keepRunning := true
    for keepRunning {
        keepRunning = false
        for i := 0; i &lt; len(arr)-1; i++ {
            a := arr[i]
            b := arr[i+1]
            if a &gt; b {
                arr[i], arr[i+1] = b, a
                keepRunning = true
            }
        }
    }
    return arr
}
</code></pre>

<p>Simplify the code. Express the do ... until construct directly. Remove unnecessary variables. Remove the redundant return value. And so on.</p>

<pre><code>func BubbleSort(a []int) {
    for {
        swap := false
        for i := 1; i &lt; len(a); i++ {
            if a[i-1] &gt; a[i] {
                a[i-1], a[i] = a[i], a[i-1]
                swap = true
            }
        }
        if !swap {
            return
        }
    }
}
</code></pre>

<p>Optimize the code. Each pass sorts at least one element to the top.</p>

<pre><code>func BubbleSort(a []int) {
    for i := len(a); i &gt; 0; i-- {
        swap := false
        for j := 1; j &lt; i; j++ {
            if a[j-1] &gt; a[j] {
                a[j-1], a[j] = a[j], a[j-1]
                swap = true
            }
        }
        if !swap {
            return
        }
    }
}
</code></pre>

<p>Seek further optimizations. Elements from and above the last swap are sorted.</p>

<pre><code>func BubbleSort(a []int) {
    for i := len(a); i &gt; 1; {
        swap := 0
        for j := 1; j &lt; i; j++ {
            if a[j-1] &gt; a[j] {
                a[j-1], a[j] = a[j], a[j-1]
                swap = j
            }
        }
        i = swap
    }
}
</code></pre>

<p>Playground: <a href="https://play.golang.org/p/jpoUO5nsJEo" rel="nofollow noreferrer">https://play.golang.org/p/jpoUO5nsJEo</a></p>

<p>Output:</p>

<pre><code>[7 5 6 9 8]
[5 6 7 8 9]
</code></pre>

<p>Write tests using the Go testing package.</p>

<p>Run benchmarks using the Go testing package.</p>

<hr>

<blockquote>
  <p>Comment: I was wondering if I could remove the keepRunning bool
  somehow. and in the above case the swap variable â€“ STEEL</p>
</blockquote>

<hr>

<p>The swap state variable is used to end the sort as soon as possible. It is not necessary.</p>

<p>For example,</p>

<pre><code>func BubbleSort(a []int) {
    for i := 1; i &lt; len(a); i++ {
        for j := len(a) - 1; j &gt;= i; j-- {
            if a[j-1] &gt; a[j] {
                a[j-1], a[j] = a[j], a[j-1]
            }
        }
    }
}
</code></pre>
    </div>