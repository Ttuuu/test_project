<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Object Usage</h1>
<p>This code:</p>
<pre><code>Game game = Game();
Game().Run();
cout &lt;&lt; "Game has terminated successfully, score: " &lt;&lt; game.GetScore()
    &lt;&lt; ", size: " &lt;&lt; game.GetSize() &lt;&lt; endl;
</code></pre>
<p>...isn't doing what I'm pretty sure you think it is. This part: <code>Game game = Game();</code> creates an object named <code>game</code> which is of type <code>Game</code>. But, I'd prefer to use just <code>Game game;</code>, which accomplishes the same thing more easily.</p>
<p>Then you do: <code>Game().Run();</code>. This creates another (temporary) <code>Game</code> object, and invokes the <code>Run</code> member function on that temporary <code>Game</code> object (so the <code>Game</code> object named <code>game</code> that you just creates sits idly by, doing nothing).</p>
<p>Then you do:</p>
<pre><code>cout &lt;&lt; "Game has terminated successfully, score: " &lt;&lt; game.GetScore()
    &lt;&lt; ", size: " &lt;&lt; game.GetSize() &lt;&lt; endl;
</code></pre>
<p>...which tries to print the score accumulated in the object named <code>game</code>--but <code>game</code> hasn't run. Only the temporary object has run (so by rights, the score you display should always be <code>0</code>).</p>
<p>If I were doing this, I'd probably do something more like:</p>
<pre><code>Game game;
game.run();
cout &lt;&lt; "Game has terminated successfully, score: " &lt;&lt; game.GetScore()
    &lt;&lt; ", size: " &lt;&lt; game.GetSize() &lt;&lt; endl;
</code></pre>
<h1><code>using namespace std;</code> isn't just using; it's abusing!</h1>
<p>I'd (strongly) advise against <code>using namespace std;</code>. A using directive for another namespace can be all right, but <code>std::</code> contains a huge amount of stuff, some of it with very common names that are likely to conflict with other code. Worse, every new release of the C++ standard adds still more "stuff" to <code>std</code>. It's generally preferable to just qualify names when you use them, so (for example) the <code>cout</code> shown above would be more like:</p>
<pre><code>std::cout &lt;&lt; "Game has terminated successfully, score: " &lt;&lt; game.GetScore()
    &lt;&lt; ", size: " &lt;&lt; game.GetSize() &lt;&lt; std::endl;
</code></pre>
<h1>Avoid <code>std::endl</code></h1>
<p>I'd advise avoiding <code>std::endl</code> in general. Along with writing a new-line to the stream, it flushes the stream. You want the new-line, but almost never want to flush the stream, so it's generally better to just write a <code>\n</code>. On the <em>rare</em> occasion that you actually want the flush, do it explicitly: <code>std::cout &lt;&lt; '\n' &lt;&lt; std::flush;</code>.</p>
<h1>Avoid the C random number generation routines</h1>
<p>C's <code>srand()</code>/<code>rand()</code> have quite a few problems. I'd generally advise using the new routines in <code>&lt;random&gt;</code> instead. This is kind of a pain (seeding the new generators well is particularly painful) but they generally produce much higher quality randomness, are much more friendly to multi-threading, and using them well will keep the cool C++ programmers (now there's an oxymoron) from calling you names.</p>
<h1>avoid <code>exit()</code></h1>
<p>When writing C++, it's generally better to avoid using <code>exit</code>. Calling it generally prevents destructors for objects on the stack from running, so you can't get a clean shutdown.</p>
<p>As a general rule, I'd add a <code>try</code>/<code>catch</code> block in main, and where you're currently calling <code>exit()</code>, throw an object derived from <code>std::exception</code>. In your case, <code>std::runtime_error</code> probably make sense.</p>
<pre><code>if (renderer == NULL)
{
    throw std::runtime_error("Renderer could not be created!");
}
</code></pre>
<p>In main:</p>
<pre><code>try {
    game.Run();
    std::cout &lt;&lt; "Game has terminated successfully, score: " &lt;&lt; game.GetScore()
        &lt;&lt; ", size: " &lt;&lt; game.GetSize() &lt;&lt; '\n';
} 
catch (std::exception const &amp;e) { 
    std::cerr &lt;&lt; e.what();
}
</code></pre>
<h1>Prefer <code>nullptr</code> to <code>NULL</code></h1>
<p>Pretty much self-explanatory. In C++, <code>NULL</code> is required to be an integer constant with the value <code>0</code> (e.g., either <code>0</code> or <code>0L</code>). <code>nullptr</code> is a bit more special--it can convert to any pointer type, but <em>can't</em> accidentally be converted to an integer type. So, anywhere you might consider using <code>NULL</code>, you're almost certainly better off using <code>nullptr</code>:</p>
<pre><code>if (renderer == nullptr)
</code></pre>
<p>Some also prefer to reverse those (giving "Yoda conditions"):</p>
<pre><code>if (nullptr == renderer)
</code></pre>
<p>This way, if you accidentally use <code>=</code> where you meant <code>==</code>:</p>
<pre><code>if (nullptr = renderer)
</code></pre>
<p>...the code won't compile, because you've attempted to assign to a constant (whereas <code>if (renderer = nullptr)</code> could compile and do the wrong thing, though most current compilers will at least give a warning about it).</p>
    </div>