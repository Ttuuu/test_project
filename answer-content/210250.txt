<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As of now, you only use <code>LinkedHashSet</code> and <code>LinkedHashMap</code>, thus declaring <code>edgeSet</code> and <code>vertexMap</code> as <code>HashSet</code> and <code>HashMap</code> is pointless. You could deploy <a href="https://en.wikipedia.org/wiki/Inversion_of_control" rel="nofollow noreferrer">Inversion of Control</a> in order to demand some <code>Set</code> and <code>Map</code> at construction.</p>

<hr>

<p>Method <code>getEdges(...)</code> could possibly return <code>null</code>, so you may want to wrap the return value in an <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Optional.html" rel="nofollow noreferrer"><code>Optional</code></a>. Using <code>Optional</code>, you can also unify the behaviour of <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#get(java.lang.Object)" rel="nofollow noreferrer"><code>Map#get(Object)</code> (which may or may not throw a <code>NPE</code> if a <code>null</code> is passed as argument)</a>:</p>

<pre><code>public Optional&lt;Set&lt;Edge&gt;&gt; getEdges(Vertex vertex)
{
    Optional&lt;Set&lt;Edge&gt;&gt; result = Optional.empty();
    try 
    {
        result = Optional.ofNullable(vertex);
    }
    catch (NullPointerException e)
    {
        // No action needed, we return an empty Optional
    }
    return result;
}
</code></pre>

<hr>

<p>Your <code>remove...(...)</code>-methods throw a <code>NPE</code> if the <code>Vertex</code>/<code>Edge</code> provided is not contained within the graph or is <code>null</code>. As with <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html#get(java.lang.Object)" rel="nofollow noreferrer"><code>Map#get(Object)</code></a>, <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Set.html#remove(java.lang.Object)" rel="nofollow noreferrer"><code>Set#remove(Object)</code></a> may or may not throw a <code>NPE</code>. You can rewrite them to not throw:</p>

<pre><code>public void removeVertex(Vertex vertex)
{
    Optional&lt;Set&lt;Edge&gt;&gt; deleteEdges = getEdges(vertex);
    if (deleteEdges.isPresent())
    {
        vertexSetMap.remove(vertex);
        edgeSet.removeAll(deleteEdges.get());
        vertexSetMap.keySet().forEach(vertex1 -&gt;
                vertexSetMap.get(vertex1).removeAll(deleteEdges.get()));
    }
}

public void removeEdge(Edge edge)
{
    try
    {
        if (edgeSet.remove(edge))
        {
            Vertex v1 = edge.getVertex1();
            Vertex v2 = edge.getVertex2();
            vertexSetMap.get(v1).remove(edge);
            vertexSetMap.get(v2).remove(edge);
        }
    }
    catch (NullPoionterException e)
    {
        // No action needed, there is nothing to remove.
    }
}
</code></pre>

<hr>

<p>When you add methods</p>

<pre><code>public boolean containsVertex(Vertex vertex)
public boolean getOther(Vertex vertex)
</code></pre>

<p>To your <code>Edge</code>-class, you can rewrite <code>getNeighborsOf(...)</code> to use <code>Stream</code>s</p>

<pre><code>public Set&lt;Vertex&gt; getNeighborsOf(Vertex vertex) {
    return vertexSetMap.get(vertex).stream()
          .filter(edge -&gt; edge.contains(vertex))
          .map(edge -&gt; edge.getOther(vertex))
          .collect(Collectors.toSet());
}
</code></pre>

<hr>

<p>What is missing is a <code>Set&lt;Vertex&gt; getVertices()</code> method (you have one for <code>Edge</code>s, so I would expect one for <code>Vertex</code>s as well). This would probably require creating an additional field <code>Set&lt;Vertex&gt; vertices</code> in your <code>Graph</code> class.</p>
    </div>