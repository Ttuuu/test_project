<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>OpenGL is quickly losing relevance, and Apple is not going to be supporting it on their OSes. Prefer a low-level cross platform rendering engine or Vulkan/Metal/DirectX12.</p>

<hr>

<p>There's many ways to render this faster. The entire construction including noise generation can be done on the GPU and rendering voxels like this is extremely inefficient. Simply drawing a ton of instanced cubes that pull from an instance buffer with no face culling would probably be faster. </p>

<p>Off the top of my head you could try this:</p>

<ul>
<li>Generate/examine the density volume in a compute shader</li>
<li>Compact non-empty voxels on the GPU with a parallel reduction into a single ID buffer</li>
<li>Map the dense list of voxels to a 0-6 faces depending on neighbors and camera position</li>
<li>Compact the faces in another parallel reduction</li>
<li>Render the resultant mesh with a single <code>drawIndexedIndirect</code> call, or maybe a few if you want more sophisticated culling or something.</li>
</ul>

<p>I would estimate being able to render a few million voxels at 60fps on a modern desktop GPU like this, depending on the volume density.</p>

<hr>

<p>Commented out code hurts readability</p>

<hr>

<p>Chunks should not know about rendering and definitely not hold shared pointers to shaders. They should be plain data and have a chunk renderer that owns shaders and uses things with a chunk interface. The only reason not to is if the chunks are going to all be heterogenous which would be bizarre and slow.</p>

<hr>

<p>Using <code>std::future</code>s <em>may</em> be preferrable to threads. I think they definitely would be if there were continuation support in C++, since that's what's functionally being expressed. Testing atomics is brittle and I have yet to see a valid use of them that isn't writing low-level library code. </p>

<hr>

<pre><code>MainCamera(60.0f, 4.0f / 3.0f, 0.1f, 1000.0f)
</code></pre>

<p>This is perfectly readable to me without seeing the camera class. Should probably be width/height instead of 4.0f/3.0f though. I think this is safe because understanding the domain specific semantics of a 3D camera is a reasonable expectation for understanding this code.</p>

<p>Similarly</p>

<pre><code>Color(0.25f, 0.5f, 1, 1);
</code></pre>

<p>is also reasonable to expect r, g, b, a values in floating point form. It would only be unreadable if this isn't actually what they represent. </p>

<hr>
    </div>