<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>From the separation of concerns perspective it seems fine that you do not want to validate against emptiness. On the other hand, one can argue that why do you treat an empty string as a valid name.</p>
<p>My suggestion is to create a ctor with a parameter, where the consumer of the attribute can define how should it behave in case of empty input.</p>
<pre><code>public class NameAttribute : ValidationAttribute
{
    private static readonly Regex NameRegex = new Regex(@"^[a-zA-Z]+(?:['-][a-zA-Z\s*]+)*$", RegexOptions.Compiled);
    private readonly bool shouldTreatEmptyAsInvalid;
    public NameAttribute(bool shouldTreatEmptyAsInvalid = true)
    {
        this.shouldTreatEmptyAsInvalid = shouldTreatEmptyAsInvalid;
    }

    protected override ValidationResult IsValid(object value, ValidationContext validationContext)
    {
        if (value == null)
            return shouldTreatEmptyAsInvalid 
                ? new ValidationResult($"The name is invalid, it should not be empty.") 
                : ValidationResult.Success;

        return NameRegex.IsMatch(value.ToString())
            ? ValidationResult.Success
            : new ValidationResult($"The name '{value}' is invalid, it should consist of only letters, and optionally spaces, apostrophes and/or hyphens.");
    }
}
</code></pre>
<p>I moved the creation of the Regex to a static variable, but you should take some measurements in order to be sure, which has the best performance. Please check <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/best-practices" rel="nofollow noreferrer">this MSDN article</a> for other alternatives.</p>
    </div>