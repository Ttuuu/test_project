<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Learn to love <a href="https://github.com/rust-lang-nursery/rustfmt" rel="nofollow noreferrer">rustfmt</a>. For example, the Rust standard is 4-space indents. </p></li>
<li><p>Learn to love <a href="https://github.com/Manishearth/rust-clippy" rel="nofollow noreferrer">Clippy</a>, which can show you the more idiomatic way to iterate over a collection:</p>

<pre class="lang-none prettyprint-override"><code>warning: it is more idiomatic to loop over references to containers instead of using explicit iteration methods
  --&gt; src/main.rs:43:18
   |
43 |         for x in times.iter() {
   |                  ^^^^^^^^^^^^ help: to write this more concisely, try: `&amp;times`
   |
   = note: #[warn(explicit_iter_loop)] on by default
   = help: for further information visit https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop
</code></pre></li>
<li><p>There's no reason to declare your variables early in the function. That's the kind of thing you would do in very old C or JavaScript and isn't required in modern languages. Declare them as late as possible.</p></li>
<li><p>Extract methods for each of the operations you'd like to perform. This allows you to remove the artificial blocks inside the main function and makes the comments into code identifiers. This removes the need for the variables in the main function at all.</p></li>
<li><p>There's no need to use a <code>Vec</code> as you never add or remove items from the list. A plain array will suffice.</p></li>
<li><p>As mentioned in the comments, <code>Iterator::sum</code> already exists. If it didn't, you could use something like <code>Iterator::fold</code>.</p></li>
<li><p>Your implementation of <code>median</code> is incorrect. When there are an even number of values, the median is defined as the average of the two middle values. I've not changed your code for this because doing so would require changing the type of <code>median</code> and I'm not sure how you'd prefer to do so.</p></li>
<li><p>There's no need to cast the value to <code>usize</code> when counting the number of occurrences; storing the <code>i32</code> in the <code>HashMap</code> makes more sense.</p></li>
<li><p>You can dereference the number using <code>&amp;value</code> in the for loop binding.</p></li>
<li><p>Once you have built your mapping of occurrences, you can iterate over it, taking the maximum value with <code>Iterator::max_by_key</code>, throw away the count using <code>Iterator::map</code>, then have a single <code>expect</code> call.</p></li>
<li><p>Use a better error message than "Fatal" - describe <em>what</em> the problem was.</p></li>
<li><p>Don't use <code>nth(0)</code> - that's just <code>.next()</code></p></li>
</ol>

<pre class="lang-rust prettyprint-override"><code>use std::collections::HashMap;

fn average(numbers: &amp;[i32]) -&gt; f32 {
    numbers.iter().sum::&lt;i32&gt;() as f32 / numbers.len() as f32
}

fn median(numbers: &amp;mut [i32]) -&gt; i32 {
    numbers.sort();
    let mid = numbers.len() / 2;
    numbers[mid]
}

fn mode(numbers: &amp;[i32]) -&gt; i32 {
    let mut occurrences = HashMap::new();

    for &amp;value in numbers {
        *occurrences.entry(value).or_insert(0) += 1;
    }

    occurrences
        .into_iter()
        .max_by_key(|&amp;(_, count)| count)
        .map(|(val, _)| val)
        .expect("Cannot compute the mode of zero numbers")
}

fn main() {
    let mut numbers = [42, 1, 36, 34, 76, 378, 43, 1, 43, 54, 2, 3, 43];

    println!("AVERAGE: {}", average(&amp;numbers));
    println!("MEDIAN: {}", median(&amp;mut numbers));
    println!("MODE: {}", mode(&amp;numbers));
}
</code></pre>

<p>A clever one-pass solution for <code>mode</code> is also possible:</p>

<pre><code>fn mode(numbers: &amp;[i32]) -&gt; Option&lt;i32&gt; {
    let mut counts = HashMap::new();

    numbers.iter().copied().max_by_key(|&amp;n| {
        let count = counts.entry(n).or_insert(0);
        *count += 1;
        *count
    })
}
</code></pre>
    </div>