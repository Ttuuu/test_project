<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Avoid overflow</h2>

<p><code>*left - *right</code> can readily overflow. Use 2 compares instead.  This common idiom is recognized by various compilers to emit efficient code.</p>

<pre><code>int cmp(void const *lhs, void const *rhs) {
    const int *left = (const int *)lhs; 
    const int *right = (const int *)rhs;
    // return *left - *right;
    return (*left &gt; *right) - (*left &lt; *right);
}
</code></pre>

<h2>Consider <code>sizeof</code> object</h2>

<p>Using the correct <em>size of the type</em> is error prone and harder to review and maintain.  Using the <em>size of the object</em> is consistently correct.</p>

<pre><code>// qsort(array, len, sizeof(int), cmp);
qsort(array, len, sizeof *array, cmp);
</code></pre>

<h2>Watch out for corner cases</h2>

<p>The below is <em>undefined behavior</em> when <code>len == 0</code> or if the sum overflows.</p>

<pre><code>if (len % 2 == 0) { // is even
    return  (array[(len - 1) / 2] + array[len / 2] ) /2.0;
}
</code></pre>

<p>Alternative</p>

<pre><code>if (len % 2 == 0 &amp;&amp; len &gt; 0) { // is even
    long long mid = array[(len - 1) / 2];
    mid += array[len / 2];
    return  mid /2.0;
} else if (len == 0) {
    return NAN;
}
</code></pre>

<h2>Does output need 6 decimal places?</h2>

<p>Consider <code>"%g"</code>:</p>

<pre><code>// printf("median: %f\n", result-&gt;median);
///printf("mean: %f\n\n", result-&gt;mean);
printf("median: %g\n", result-&gt;median);
printf("mean: %g\n\n", result-&gt;mean);
</code></pre>

<h2>Use <code>static</code> for local functions</h2>

<p>Should this code exists in some other *.c file, no need to have the local <code>cmp()</code> function visible as named.</p>

<pre><code>// int cmp(void const *lhs, void const *rhs) 
static int cmp(void const *lhs, void const *rhs) 
</code></pre>
    </div>