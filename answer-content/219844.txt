<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Multi-digit number is what is throwing it off. I typically fix this by opting to find the highest number and then offset the rest of them appropriately.  I did this back when I was messing around with polynomial triangles.</p>

<h1>Fixing the spacing issue</h1>

<p>I started by getting the longest possible number and then prepending the space before it to make it line up properly.</p>

<p>Nextly, you have to fix the preappend so it looks better over size 2.  This is accomplished over a fairly odd algorithm.</p>

<p>As for the rest of the code, I did not have time to look at it, but will in a bit.</p>

<h1>Fixing structure</h1>

<p>Overall, your code looked pretty good.  Here are just some suggestions.</p>

<p>I went ahead and moved the pascal array generation to another function.  The idea of a function is that it performs a task.  Logically breaking up these tasks into multiple functions limits the size of each function and increases readability.  From there, we can assign it to a variable inside the <code>pascal</code> function.  I used the intuitive name <code>generatePascalArrays</code>, so you can get the gist of what the function does from the variable assignment.</p>

<p>Secondly, I noticed you split the 1 and 0 exception cases, I combined that into one <code>if</code> and <code>console.log(num)</code>.</p>

<p>Additionally, I did use some arrow functions.  In other languages, you may have heard of them as lambda functions.  If you are not familiar with them, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" rel="nofollow noreferrer">here is a link</a>.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function generatePascalArrays(num) {
  var result = [[1],[1,1]];
  for (var i = 2; i &lt; num; i++) {
    result[i] = [];
    result[i][0] = 1;
    for (var j = 1; j &lt; i; j++) {
      result[i][j] = result[i - 1][j - 1] + result[i - 1][j];
    }
    result[i][j] = 1;
  }
  return result;
}

function pascals(num) {  
  if (num &lt;= 1) {
    console.log(num);
  }
  var result = generatePascalArrays(num),  
      width = Math.max(...result[result.length-1]).toString().length;  
  for (var i = 0; i &lt; result.length; i++) {
	let preOffsetter = result[result.length-i-1].length * Math.floor(width/3) + result.length - i
	console.log(' '.repeat(preOffsetter) + result[i].map((x) =&gt; ' '.repeat(width - x.toString().length) + x));
  }
}

pascals(5)
pascals(6)
pascals(10)</code></pre>
</div>
</div>

    </div>