<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As a follow-up to <strong>t3chb0t</strong>'s and your self-answer, I agree that whilst the original <code>RemoveXMLNode</code> method you have written in your question is technically a one-liner, it is doing a lot.</p>

<p>In response to your self-answer, I have a few pointer:</p>

<ul>
<li>In your case, I don't think you need a separate <code>LoadXMLDocument</code> method. The line <code>XDocument.load(path)</code> is easy enough to understand.</li>
<li>Regarding you new <code>RemoveXMLNode</code> method, you have two options:</li>
</ul>

<p><strong>1. Pass by Reference</strong></p>

<p>In your new method, you are requesting an <code>XDocument</code> argument. Whilst <code>XDocument</code> is a reference type and can be modified through its public methods, you may benefit from using the <code>ref</code> keyword so that you pass the whole object as a reference. This means that any changes to the object you are passing happen on the original object. So to apply this, you would simply change the method arguments to:</p>

<pre class="lang-cs prettyprint-override"><code>                               // VVV - Note the 'ref' keyword!
private static void RemoveXMLNode(ref XDocument doc, string descendant, string element, string elementValue)
</code></pre>

<p>You would then use the method like so:</p>

<pre class="lang-cs prettyprint-override"><code>           // VVV - Note the 'ref' keyword!
RemoveXMLNode(ref doc, "Questions", "quPage", "PAGE60");
</code></pre>

<p>You can find more information on the difference between <em>Pass By Reference</em> and <em>Pass By Copy</em> over <a href="https://stackoverflow.com/questions/373419/whats-the-difference-between-passing-by-reference-vs-passing-by-value">here</a>.</p>

<p>There is also some more information on passing Reference Type classes from Jon Skeet's article over <a href="http://www.yoda.arachsys.com/csharp/parameters.html" rel="nofollow noreferrer">here</a>.</p>

<p>I also wrote some dummy code to try out and demonstrate this behaviour over <a href="https://dotnetfiddle.net/JIPz87" rel="nofollow noreferrer">here</a>.</p>

<p><strong>2. <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods" rel="nofollow noreferrer">Extension Method</a></strong></p>

<p>This simply creates an extension method for your <code>XDocument</code> object. You do so by telling the compiler which of your arguments' object you are extending using the <code>this</code> keyword. When applying, you will actually reduce the number of required parameters by 1, effectively making it shorter.</p>

<p>The only requirement for this option is that your extension method(s) must be in a <strong>non-generic and non-nested static class</strong>.</p>

<p>You would write your method like so:</p>

<pre class="lang-cs prettyprint-override"><code>                               // VVVV - Note the 'this' keyword!
private static void RemoveXMLNode(this XDocument doc, string descendant, string element, string elementValue)
</code></pre>

<p>Now, you would call this method like so:</p>

<pre class="lang-cs prettyprint-override"><code>// Only three arguments!
doc.RemoveXMLNode("Questions", "quPage", "PAGE60");
</code></pre>
    </div>