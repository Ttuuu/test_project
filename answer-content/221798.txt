<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sometimes it is worth generalizing an algorithm to handle an arbitrary number of inputs.  Not always, of course, but at least the exercise of thinking about how you would generalize an algorithm can force you to consider whether there is any unnecessary code duplication---this might be the algorithmic analogue of looking for <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants" rel="nofollow noreferrer">magic constants</a>.</p>

<p>It turns out that, with the exact same number of lines of code, you can make a <code>smallestCommonElement</code> function that takes any number of arrays as arguments.</p>

<p>This has a time complexity at least as good as the original.  Without having done a careful analysis, if there are <span class="math-container">\$k\$</span> arrays of lengths <span class="math-container">\$n_1,\dots,n_k\$</span>, then it seems to run in <span class="math-container">\$O(n_1 + \dots + n_k)\$</span> time.  (The index into a given array is guaranteed to increase at least once every two iterations of the main loop.)  The original seems to have time complexity <span class="math-container">\$O((n_1 + n_2)n_3)\$</span>.</p>

<p>This code uses Roland's idea of using <code>while</code> loops to step indices forward for each array and Kiko Software's suggestion to avoid the <code>while(1)</code>.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>/* Takes sorted numerical arrays as arguments, returns the smallest
   common element between them or null. */
function smallestCommonElement(/*arguments*/) {
  // Indices into the given arrays
  let indices = Array(arguments.length).fill(0);
  // The current possible smallest common element
  let cur_val = -Infinity;

  do {
    var same = true;
    for (let i = 0; i &lt; arguments.length; i++) {
      // Step an array forward to cur_val (or beyond if the array
      // doesn't have cur_val)
      while (indices[i] &lt; arguments[i].length &amp;&amp; arguments[i][indices[i]] &lt; cur_val) {
        indices[i]++;
      }
      if (indices[i] &lt; arguments[i].length) {
        if (arguments[i][indices[i]] &gt; cur_val) {
          // We went past cur_val, so record in 'same' that cur_val does
          // not represent the smallest common element this time through.
          same = false;
          cur_val = arguments[i][indices[i]];
        }
      } else {
        // We got to the end of this array, so there is no smallest common element.
        return null;
      }
    }
  } while (!same);

  return cur_val;
}</code></pre>
</div>
</div>

    </div>