<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Is the <code>try-finally</code> code block really required in your <code>main()</code> method?</p></li>
<li><p>Your <code>get()</code> <strong><em>fails</em></strong> if the default value is not any of those primitive wrapper classes. What if I want a <code>BigDecimal</code> instance? <code>"1.0"</code> can't be casted to that.</p></li>
<li><p>On a related note, you are relying on auto-boxing, which may lead to unexpected consequences:</p>

<pre><code>// code compiles, but throws NullPointerException here
int npe = getValue("invalid-key", (Integer) null);
</code></pre></li>
<li><p>Maybe this is just a quick prototyping, but if you do decide to make this a full-fledged library class, you should not be having the <code>main()</code> method, the <code>static</code> initialization block, or your <code>static</code> fields. The fields should become class fields where <code>Prefs</code> needs to be instantiated. Testing should go into its own class.</p></li>
<li><p>On another related note, you don't necessarily need to create temporary files for testing. There is a <a href="http://docs.oracle.com/javase/8/docs/api/java/util/Properties.html#load-java.io.Reader-" rel="nofollow"><code>Properties.load(Reader)</code></a> method that will work with a <a href="http://docs.oracle.com/javase/8/docs/api/java/io/StringReader.html" rel="nofollow"><code>StringReader</code></a>, which can be used in turn to wrap your test <code>String</code>s/lines.</p></li>
<li><p>I don't think there's a benefit to instantiating a <code>FileOutputStream</code> object immediately after you have <code>load()</code>-ed the file. Things may happen between the loading and storing of properties, so regardless of whether you have this object or not, the storing process may still fail afterwards. Also, it seems like you do not need to explicitly <code>flush()</code> after calling <code>store()</code> as that is already done according to the <a href="http://docs.oracle.com/javase/8/docs/api/java/util/Properties.html#store-java.io.OutputStream-java.lang.String-" rel="nofollow">Javadoc</a>:</p>

<blockquote>
  <p>After the entries have been written, the output stream is flushed. The output stream remains open after this method returns.</p>
</blockquote></li>
</ol>
    </div>