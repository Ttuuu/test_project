<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.  First, yes, you implemented the minimax algorithm correctly, but there's an easy improvement you can make that I'll show later.</p>

<h2>Avoid magic numbers</h2>

<p>Although it's not too bad, the unnamed constant <code>3</code> could instead be made a named constant that indicates the size of the square board.  By assigning this a name, one could easily adapt the game to 4x4, 5x5 or larger grids if desired. </p>

<h2>Write generic rather than specific code</h2>

<p>The <code>checkWin</code> code is correct, but I think it could be made better by making it generic rather than specific.  That is, what the code seeks is whether all of the row or column or diagonal matches the passed <code>player</code> value.  Rather than manually coding like this:</p>

<pre><code>for (unsigned int i = 0; i &lt; 3; i++)
{
    // Check horizontals
    if (board[i][0] == player &amp;&amp; board[i][1] == player &amp;&amp; board[i][2] == player)
        return true;

    // Check verticals
    if (board[0][i] == player &amp;&amp; board[1][i] == player &amp;&amp; board[2][i] == player)
        return true;
}
</code></pre>

<p>I'd probably code that portion like this:</p>

<pre><code>for (unsigned i{0}; i &lt; gridsize; ++i) {
    bool row{true};
    bool col{true};
    for (unsigned int j{0}; j &lt; gridsize; ++j) {
        row &amp;= board[i][j] == player;
        col &amp;= board[j][i] == player;
    }
    if (row || col) {
        return true;
    }
}
</code></pre>

<h2>Use <code>const</code> where practical</h2>

<p>Many of the functions, including <code>printBoard()</code>, <code>isTie()</code>, and <code>checkWin()</code> do not alter the underlying object and therefore should be declared <code>const</code>.</p>

<h2>Use appropriate data types</h2>

<p>The <code>turn</code> variable is declared as an <code>unsigned int</code> but is probably more appropriately a <code>bool</code> because it's only 0 or 1.  Alternatively, one could assign the current <code>Player</code> value types in an array and bounce back and forth between <code>Player::human</code> and <code>Player::computer</code>.</p>

<h2>Consider improving the algorithm</h2>

<p>If the human chooses 00, 22, and 12 in that order, we get this board:</p>

<pre><code>+-----------------+
|  X  |  O  |  -  |
|  -  |  O  |  X  |
|  -  |  -  |  X  |
+-----------------+
</code></pre>

<p>The most logical move would be for the computer to place its <code>O</code> at 21, thus winning the game.  But it doesn't with the current code.  Instead, it puts its <code>O</code> in the upper right corner.  Either move inevitably leads to a computer win, but why not choose the immediate win?  One simple way to do that is to introduce the concept of tree level into the <code>minimax</code> routine.  This changes the <code>maxSearch</code> and <code>minSearch</code> routines to accept an <code>int level</code> as a parameter.  Then within <code>maxSearch</code>, where <code>minSearch</code> is called, one could write the line like this:</p>

<pre><code>score = std::max(score, minSearch(level+1)-level);
</code></pre>

<p>Within <code>minSearch</code>, the call to <code>maxSearch</code> would be this:</p>

<pre><code>score = std::min(score, maxSearch(level+1)+level);
</code></pre>

<p>This simply adjusts the scoring such that shorter trees have lower (more favorable) scores than longer ones.</p>

<h2>Avoid doing extra work</h2>

<p>Instead of iterating through all of the squares in <code>isTie()</code>, the program could instead simply keep a running total of available squares and <code>isTie()</code> would reduce to this:</p>

<pre><code>bool isTie() const { return available == 0; }
</code></pre>

<h2>Separate responsibilities</h2>

<p>The <a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" rel="nofollow noreferrer">Model-View-Controller</a> design pattern is often useful for programs like this.  Because the view in this case is essentially just printing the board to <code>std::cout</code>, we can simplify a bit and just have a model, the <code>TicTacToe</code> class, and a controller, the <code>Game</code> class.  Doing so would make it much easier to make changes to the code such as porting it to use a GUI or adapting it to be playable remotely via a socket.</p>
    </div>