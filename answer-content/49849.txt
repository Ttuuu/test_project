<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd start breaking your code up into chunks. There are a couple of ways you could do this, such as by giving each room its own function (and I can remember doing this with my first text-adventure type game, way back when!) or alternatively by defining a room as a data structure, like this:</p>

<pre><code>struct Choice
{
  int nextroom;
  std::string text;

  Choice(int n, std::string t) : nextroom(n), text(t) {}
};

struct Room
{
  const std::string text;
  std::vector&lt;Choice&gt; choices;
  bool deathroom;

  Room(std::string t, std::vector&lt;Choice&gt; c, bool d = false)
   : text(t), choices(c), deathroom(d) {}
};
</code></pre>

<p>Now, you can define a collection of rooms:</p>

<pre><code>std::vector&lt;Room&gt; rooms;
Room r1(
    "You are in room 1.\n",
    std::vector&lt;Choice&gt;{ Choice(2, "Option 1"), Choice(3, "Option 2") });
rooms.push_back(r1);
</code></pre>

<p>With this, you can turn your game into a single loop:</p>

<pre><code>int room = 0;
while (rooms[room].deathroom == false)
{
    std::cout &lt;&lt; rooms[room].text;
    room = get_choice(room);
}
std::cout &lt;&lt; "Game Over!\n";
</code></pre>

<p>You'll need to implement <code>get_choice</code> yourself, of course ;)</p>

<p>This makes it much simpler to add and remove rooms, or even in the future read room definitions from a text file, and so on.</p>
    </div>