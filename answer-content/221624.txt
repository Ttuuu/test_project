<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Funny how the universe works - I <em>just</em> finished my own implementation of a thread pool (albeit in C++17), and it looks a lot like yours. I found this question on the front page when I went to post my own - here's hoping we're both on the right track!</p>
<h3>Mark the copy c'tor and operator= as deleted</h3>
<p>Instead of actually implementing something that you don't want to be used, in C++11 and newer you can explicitly disallow invocations of the copy constructor and assignment operator:</p>
<pre><code>ThreadPool(const ThreadPool&amp;) = delete;
ThreadPool &amp;operator=(const ThreadPool&amp;) = delete;
</code></pre>
<p>Or, if you would rather stick with the macro:</p>
<pre><code>#define DISALLOW_COPY_AND_ASSIGN(T) \
    T(const T&amp;) = delete; \
    T &amp;operator=(const T&amp;) = delete;
</code></pre>
<p>When a function is marked as deleted, attempting to invoke it results in a compile-time error.</p>
<h3>Do not declare a default constructor</h3>
<pre><code>ThreadPool(); //prevent default constructor from being called

//real constructor that is used
inline ThreadPool(uint8_t numThreads);
</code></pre>
<p>The declaration of the default constructor above does nothing, other than obscure the <em>real</em> reason the program won't build if you try to invoke the default ctor. A default constructor is compiler-defined if, <em>and only if</em>, there are no constructors explicitly declared.</p>
<p>By declaring a default constructor but not implementing it, you make it legal for a compiler to build code that attempts to invoke it - only to find yourself in a position where the linker will instead fail, which is not the expected outcome of building code that is (supposed to be) ill-formed.</p>
<h3>Drop the inline specifier</h3>
<p>According to <a href="http://eel.is/c++draft/dcl.inline" rel="noreferrer">9.1.6 [dcl.inline]</a>:</p>
<blockquote>
<ol start="4">
<li>A function defined within a class definition is an inline function.</li>
</ol>
</blockquote>
<p>Your <code>inline</code> specifiers do nothing!</p>
<h3>Get rid of <code>Job::func</code></h3>
<p>What is the point of declaring <code>Job::func</code>, only to have it shadowed by <code>AnyJob&lt;T&gt;::func</code>? The base class member variable never even gets touched - it's just adding complexity to the code without any purpose. The <em>only</em> point of <code>Job</code> is to serve as a common base to different types of polymorphic functors (your <code>AnyJob&lt;T&gt;</code>s). Make it as simple as possible.</p>
<h3>Use good names for your variables, and get rid of redundant ones</h3>
<pre><code>//member variables
uint8_t numThreads; // number of threads in the pool
std::vector&lt;std::thread&gt; Pool; //the actual thread pool
std::queue&lt;std::shared_ptr&lt;Job&gt;&gt; JobQueue;
std::condition_variable thread;// used to notify threads about available jobs
std::mutex JobMutex; // used to push/pop jobs to/from the queue
//end member variables
</code></pre>
<p>Why do you have <code>numThreads</code> in the first place, if your vector of threads already keeps track of that information? Why is <code>thread</code> the name of a <code>condition_variable</code>? I'd expect that to be a thread object or container. <code>Pool</code> is also not a great name - something such as <code>workers</code> or <code>threads</code> would be better.</p>
<p>Further, what's with the naming convention? You have camel case (<code>numThreads</code>) and Pascal case (<code>JobQueue</code>) mixed together - that's pretty weird. If you want to take it a step further and make it more C++ey, the <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rl-camel" rel="noreferrer">C++ Core Guidelines advise you to prefer underscore case</a>.</p>
<h3>Make threadManager <code>private</code> - or get rid of it altogether</h3>
<p><code>ThreadPool::threadManager</code> is clearly not meant to be called by the thread that owns the <code>ThreadPool</code> object. Why make it available? It's always better to make it difficult or impossible for mistakes to be done (if within the realm of reason).</p>
<p>In light of the fact that it its only purpose is transitioning the worker threads from working to idle and vice versa, the name is a bit odd. Further, why not simply pass a lambda to the <code>std::thread</code> constructor? This would make your implementation more succinct.</p>
<h3>And other things</h3>
<p>I would also take into consideration things such as the constructor silently capping the number of threads to a set number - is that Funny Behaviorâ„¢, that the programmer should instead be warned about? Maybe we want the program to be able to have more threads than the processor? It could be possible that one of the tasks given to you waits on I/O a significant amount of time - context switching can be your friend!</p>
<h1>but, overall...</h1>
<p>From what I can tell, this is good code. I was fairly nitpicky with it - but with the intention that in doing so, you can make your code better and hopefully learn a few tricks along the way. Good job!</p>
    </div>