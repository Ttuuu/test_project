<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Tests like these often involve a lot of copy-pasted boilerplate and that increases tremendously the effort required to maintain the tests. Instead of writing an assert statement for each array or a separate test method for each case, you could store the arrays into two lists; those that should be detected as sorted and those that should not be and process each array in a common test method.</p>

<pre><code>private static final List&lt;int[]&gt; SHOULD_BE_SORTED = Arrays.asList(
            new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE },
            new int[] { Integer.MIN_VALUE, Integer.MIN_VALUE },
            new int[] { Integer.MAX_VALUE, 1 },
            ...
            );

@Test
public void shouldBeSorted() {
    for (int i; i &lt; SHOULD_BE_SORTED.size(); i++) {
        final int[] arr = SHOULD_BE_SORTED.get(i);
        final int[] orig = (int[]) arr.clone();

        assertTrue("Array " + i + " should have been sorted " + Arrays.toString(arr), 
            SortedOrNot.isSorted(arr));
        assertArrayEquals(orig, arr);
    }
}
</code></pre>

<p>Algorithms that deal with numbers should always be tested with the limits of the allowed value space. The algorithm must work with max and min values and fail with max+1 etc. When the numeric algorithm uses the natural limits of the primitive types, the tests must take into account possible overflows and the ways they may affect the calculations (e.g. adding one to Integer.MAX_VALUE making the result negative).</p>

<p>If the target code processes arrays and is not documented to modify the input, the tests should ensure that the array stays intact.</p>
    </div>