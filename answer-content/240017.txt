<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Singletons</h2>

<p><code>Color</code> has been written as a singleton. That's fine I guess, but it doesn't need the class machinery. All you're effectively doing is making an inner scope. (You're also missing defaults.) You could get away with a submodule called <code>color</code> whose <code>__init__.py</code> consists of</p>

<pre><code>RED: str = ''
YELLOW: str = ''
PINK: str = ''
CYAN: str = ''
GREEN: str = ''
RESET: str = ''

def enable():
    global RED, YELLOW, PINK, CYAN, GREEN, RESET
    RED, YELLOW, PINK, CYAN, GREEN, RESET = (
        f'\u001b[{code}m'
        for code in (
            '31',
            '38;5;221',
            '38;5;213',
            '38;5;38',
            '38;5;112',
            '0',
        )
    )

# Similar disable
</code></pre>

<h2>Type hints</h2>

<p>I have no way of knowing, in the entire definition of the <code>Token</code> class, what <code>token_type</code> is. If it's a string, declare it <code>: str</code> in the function signatures where it appears.</p>

<h2>Typo</h2>

<p><code>collumn</code> -&gt; <code>column</code></p>

<p><code>argumments</code> -&gt; <code>arguments</code></p>

<p><code>recicling</code> -&gt; <code>recycling</code></p>

<p><code>usefull</code> -&gt; <code>useful</code></p>

<h2>Strange logic</h2>

<pre><code>    if len(self.rules) &gt; n or len(self.rules) &gt; n:
</code></pre>

<p>looks like the second predicate is redundant.</p>

<h2>Loop like a native</h2>

<p>Without having tried it, </p>

<pre><code>    i = 0
    for rule in reversed(self.rules):
        item = parser.stack[-1 - i]
        i += 1
</code></pre>

<p>looks like it could be</p>

<pre><code>for rule, item in reversed(zip(self.rules, parser.stack)):
</code></pre>

<h2>Imports</h2>

<pre><code>import inspect
</code></pre>

<p>should appear at the top, not in function scope, unless you have a really good reason.</p>

<h2>Generator</h2>

<p>This</p>

<pre><code>match_rules = []
for arg in args:
    if arg == None or type(arg) == set:
        match_rules.append(arg)
    elif isinstance(arg, str):
        match_rules.append({s for s in arg.split("|") if s})
    else:
        raise TypeError(f"wrong type of argumment: {type(arg)}, {arg}")
</code></pre>

<p>should be pulled out into a function that, rather than building up <code>match_rules</code>, <code>yield</code>s your set on the inside of the loop.</p>

<h2>Length of a comprehension</h2>

<p>Isn't</p>

<pre><code>arg_count = len([type(arg) for arg in args]) + 1
</code></pre>

<p>just</p>

<pre><code>arg_count = len(args) + 1
</code></pre>

<p>?</p>
    </div>