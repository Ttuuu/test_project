<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code:</p>

<ol>
<li><p>You only use things from 3 of the 6 includes. <code>&lt;string.h&gt;</code>, <code>&lt;stddef.h&gt;</code>, and <code>&lt;unistd.h&gt;</code> are superfluous, the last one just limiting portability.</p></li>
<li><p><code>is_legal()</code> does not need to know about the bigger buffer. Just the sequence it should inspect is sufficient.</p></li>
<li><p>You assume everything works out perfectly fine:</p>

<ul>
<li>The file can be opened for reading.</li>
<li>You succeed in allocating 5_000_000 bytes.</li>
<li>You can read all those Bytes from the file.</li>
</ul></li>
<li><p>You fail to free the array you <code>malloc()</code>-ed. Not really a problem though, as the program terminates immediately afterwards.</p></li>
<li><p>If you allocate a fixed amount of memory on <em>every</em> run, why not just make it a static array?</p></li>
<li><p><code>return 0;</code> is implicit for <code>main()</code> since C99.</p></li>
</ol>

<p>Design limitations and considerations:</p>

<ol>
<li><p>Consider using a smaller fixed buffer (size should be a power of 2, at least 32k or so), and scanning the file from start to end, instead of slurping it all in.</p></li>
<li><p>Consider allowing the user to override which characters are forbidden.</p></li>
<li><p>You are only handling single-byte character-sets. That might be enough, and it certainly simplifies things significantly.</p></li>
<li><p>Your code is almost certainly IO-bound, so the gains from optimising the algorithm are probably strictly limited. Still, consider a bit of pre-processing to cut out the more expensive calls.</p>

<p>Specifically, prepare two bitfields <code>character</code> and <code>whitespace</code>, and use a simple lookup.</p></li>
</ol>
    </div>