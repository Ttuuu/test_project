<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>
<h2>Be careful with array lengths</h2>
<p>The memory allocation for the virtual machine is currently this:</p>
<pre><code>i32 mem[0xffff]; /* approx. 64k */
</code></pre>
<p>While there is no intrinsic problem with this declaration or the comment, it means that memory locations 0 through 0xfffe are valid, but memory location 0xffff is not.  That's not inconsistent with the code, but it's an odd choice.  Also, see the next suggestion.</p>
<h2>Avoid <code>magic numbers</code></h2>
<p>As mentioned above, the number <code>0xffff</code> is used in both the header and in the <code>.c</code> file.  Because it's quite important, I'd suggest that it would be better if it were a named value.  Similarly, such numbers as 1024 could be named constants.  So if, for example, you wanted to change the memory size to be exactly 64K, it would be easier if you only had to change the value in one place rather than hunting for the constant in multiple places in the code and then having to decide whether this particular 0xffff referred to the memory size or something else.</p>
<h2>Provide a <code>default</code> case</h2>
<p>What happens if the VM encounters an unknown instruction?  At the moment it's silently ignored.  It might be better to flag it as an error and one way to accomplish that nicely would be to add a <code>default</code> case to the <code>switch</code> statement.</p>
<h2>Pass the buffer to the VM directly</h2>
<p>Instead of having <code>main</code> reach into the VM and manipulate its internal data directly, I'd suggest a better approach might be to provide a version of <code>new_vm()</code> that takes a pointer and length so that it can do the copying instead.</p>
<h2>Consider adding flags</h2>
<p>Real processors typically have a set of flags, such as a Zero or Negative flag, as well as Overflow and Carry.  As you expand your virtual machine, you will find those additions important as you start adding things such as conditional jumps or looping instructions.</p>
<h2>Consider a data-centric approach</h2>
<p>The code is generally clear and easy to read and understand as it is written.  That's great!  I would suggest that it might be easier to keep that readability as the code is enhanced and expanded if the opcodes and operations are structured into an array of data.  This is likely to make it easier to add or modify instructions and to write assembler and disassembler enhancements if you're interested in doing that.  The current approach, however, has the advantage of lookup speed for instructions since typical compilers generate very efficient code for <code>switch</code> statements.</p>
<h2>Let the compiler generate code</h2>
<p>It's not wrong to put <code>return 0;</code> at the end of <code>main</code> and some people prefer it for stylistic reasons.  I prefer to omit it since it's guaranteed that the compiler will generate the equivalent code by itself.</p>
    </div>