<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>setup_toolbar</code> from <code>settings.py</code></h1>

<p>Maintaining a several lists in parallel is tedious. <code>setup_toolbar</code> has a minimal check with <code>assert len(names) == len(icons) == len(methods) == len(tips) == len(key_shorts)</code> to help here, but even if all the <code>list</code>s have the same length, there is no way to make sure that those values are really consistent.</p>

<p>I'd propose to use something like the following:</p>

<pre class="lang-py prettyprint-override"><code>def setup_toolbar(qt_obj):
    tools = {
        'Upload photos': {
            'icon': 'upload_photo6.png', 
            'callback': qt_obj.upload_photos, 'key': 'O',
            'hint': 'Select photos from a folder and add them to the photo list',
            'checkable': False
        },
        # and so on ...
    }

    # auto-generate shortcuts and rich hints
    for name, properties in tools.items():
        shortcut = f'Ctrl+Shift+{properties['key']}'
        properties['shortcut'] = shortcut
        # Mac symbols omitted out of lazyness ;-)
        properties['hint'] = f'Press {shortcut}:  {properties["hint"]}'
        # this /is redundant, but is in line with the original code
        properties['name'] = name

    return tools
</code></pre>

<p>This should be more robust, since all the relevant parts are closer together. Using a dict here is also more robust than a list because the properties can now be accessed using their names instead of having to remember to order in the list. Of course, <code>ImageLabeler.adjust_tool_bar</code> would have to be adapted to this change.</p>

<p>More on a semantic note, maybe also replace <code>Upload</code> with <code>Load</code> or <code>Open</code>, since, at least in my opinion, "upload" is usually used when pushing some content onto a remote system or device. I guess that's not your intention.</p>

<h1><code>labelpix.py</code></h1>

<h2>Imports</h2>

<p><a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">Imports should be sorted and grouped.</a> Also, avoid wildcard <code>*</code> <code>import</code>s, especially if you only need a single function like <code>setup_toolbar</code>. With these changes the code looks as follows:</p>

<pre><code># built-in libraries
import os
import sys

# third-party libraries
import cv2
import pandas as pd
from PyQt5.QtCore import QPoint, QRect, Qt
from PyQt5.QtGui import QIcon, QPainter, QPen, QPixmap
from PyQt5.QtWidgets import (QAction, QApplication, QDesktopWidget,
                             QDockWidget, QFileDialog, QFrame, QHBoxLayout,
                             QLabel, QLineEdit, QListWidget, QListWidgetItem,
                             QMainWindow, QMessageBox, QStatusBar, QVBoxLayout,
                             QWidget)

# libraries from this module
from settings import setup_toolbar
</code></pre>

<p>The comments between the groups are only for educational purposes.</p>

<h2>Path handling</h2>

<p>The code handles paths at several points. Doing it "manually" like here in <code>foo</code></p>

<blockquote>
<pre><code>def get_image_names(self):
    """
    Return:
        Directory of the current image and the image name.
    """
    full_name = self.current_image.split('/')
    return '/'.join(full_name[:-1]), full_name[-1].replace('temp-', '')
</code></pre>
</blockquote>

<p>is error-prone and won't work on Windows (and possibly other operating systems) where <code>/</code> is not used as path separator.</p>

<p>Fortunately, Python can help here. The could should use <a href="https://docs.python.org/3/library/os.path.html#os.path.split" rel="nofollow noreferrer"><code>os.path.split</code></a> or <a href="https://docs.python.org/3/library/os.path.html#os.path.dirname" rel="nofollow noreferrer"><code>os.path.dirname</code></a>/<a href="https://docs.python.org/3/library/os.path.html#os.path.basename" rel="nofollow noreferrer"><code>os.path.basename</code></a> from the built-in <code>os</code> module, or the <a href="https://docs.python.org/3/library/pathlib.html#module-pathlib" rel="nofollow noreferrer"><code>pathlib</code></a> module, which provides a higher level, more OOP-like abstraction to the whole problem. Similarly building paths should use <a href="https://docs.python.org/3/library/os.path.html#os.path.join" rel="nofollow noreferrer"><code>os.path.join</code></a> or the corresponding functionality from <code>pathlib</code>.</p>

<h1>General feedback</h1>

<p>I tried to use the program on some more or less random example images. Since the aspect ratio of the image display area is fixed to that of the window, images become squished once you resize the window or simply if they don't have the correct aspect ratio. There also seems to be a bug where the original image seems to persist in the background (see screenshot below).</p>

<p><a href="https://i.stack.imgur.com/66wmO.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/66wmO.png" alt="screenshot of a demo image"></a></p>

<p>The image is similar to the one in a <a href="https://codereview.stackexchange.com/q/220863/">question of mine</a> here on Code Review, so the circle on the left should really be a circle, not an ellipse.</p>

<p>Sometimes also freshly drawn bounding boxes vanished immediately and where also not listed in the Image Label List on the right. I admit that I did not really try to look into this, so it might be a simple user error on my side.</p>

<p>I'd also prefer to have a little bit more control over where the label files are stored, or at least have some indication where they were put.</p>

<hr>

<p>There is likely more to say about the code, but that's all for now. Maybe I will have another go at it later. Till then: Happy Coding!</p>
    </div>