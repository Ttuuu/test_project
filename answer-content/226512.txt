<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First, let's  move the replacements into a separate <code>fixErrors</code> method for readability.</p>

<pre><code>String fixErrors(String value) {
    return value
        .replaceAll("%(?![0-9a-fA-F]{2})", "%25")
        .replaceAll("\\+", "%2B");
}
</code></pre>

<p>Now, my solution would be to write a method that returns the result of <code>URLDecoder.decode</code> as an <code>Optional</code>. Then, instead of nesting <code>try/catch</code> statements, we can just use <code>Optional::or</code>. This should look something like</p>

<pre><code>public String decodeValue(String value, Charset charset) {
    if (!Strings.isNullOrEmpty(value)) {
        return tryDecode(value, charset)
            .or(() -&gt; tryDecode(fixErrors(value), charset))
            .orElse(null);
    }
    return value;
}

Optional&lt;String&gt; tryDecode(String value, Charset charset) {
    try {
        return Optional.of(URLDecoder.decode(value, charset.name()));
    } catch (UnsupportedEncodingException ex) {
        return Optional.empty();
    }
}
</code></pre>

<p>Unfortunately, this solution precludes logging details of only the second error. To do this effectively, we could add error handling to <code>tryDecode</code> by passing it a <code>Consumer&lt;UnsupportedEncodingException&gt;</code>. Then we would have:</p>

<pre><code>public String decodeValue(String value, Charset charset) {
    if (!Strings.isNullOrEmpty(value)) {
        return tryDecode(value, charset, ex -&gt; {})
        .or(() -&gt; tryDecode(fixErrors(value), charset, ex -&gt; {
                // log ex
            }))
        .orElse(null);
    }
    return value;
}

Optional&lt;String&gt; tryDecode(String value, Charset charset,
                   Consumer&lt;UnsupportedEncodingException&gt; exConsumer) {
    try {
        return Optional.of(URLDecoder.decode(value, charset.name()));
    } catch (UnsupportedEncodingException ex) {
        exConsumer.accept(ex);
        return Optional.empty();
    }
}
</code></pre>

<p>Hopefully this solution meets your requirements.</p>
    </div>