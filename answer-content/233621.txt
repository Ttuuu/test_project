<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is my response to <a href="https://codereview.stackexchange.com/a/233605/193904">the answer</a> given by @Mathieu Guindon.</p>

<hr>

<h2>Scope and life time of Scripting.FileSystemObject</h2>

<blockquote>
  <p>(...) but like anything accessing external resources (e.g. database connection, file handle, etc.), IMO its scope and lifetime should be as limited as possible.</p>
</blockquote>

<p>Can you please also explain why is that? What pitfalls I might fall into while using external resources like <code>Scripting.FileSystemObject</code>? One of the reasons might be when I decide to start testing my methods which are using this global scope pointer. Are there any others?</p>

<hr>

<h2>Unused LinesCount</h2>

<p>That's correct, <code>LinesCount</code> is not used in this context. I was relaying on Rubberduck to tell me if any method which are not used in this example... turns out it doesn't complain about this method. <code>ProcedureNotUsed</code> inspection should be triggered. I do not have this inspection turned off and filters are not enabled in <strong>Code Inspections</strong> window.</p>

<p><a href="https://i.stack.imgur.com/xvkor.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/xvkor.png" alt="Code quality issues"></a></p>

<p><a href="https://i.stack.imgur.com/1TVlb.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/1TVlb.png" alt="Procedure is not referred to is enabled"></a></p>

<hr>

<p><em>I think, this is the area where I'm expressing my subjective feelings about particular topics rather that hard data.</em></p>

<hr>

<h2>The letter H</h2>

<blockquote>
  <p>That H again? I'm starting to think it just stands for Helper, which is a code smell in itself.</p>
</blockquote>

<p>That's correct, <code>H</code> stands from <code>Helper</code>. I'm using this abbreviation to try mitigate a situation where invocation of a method would be predominantly a module name. I think, what I'm aiming at, is to minimize the noise around my helper/extension calls. IMO, it does not take too long to figure out, what <code>H</code> stands for, even when you this piece of code for the first time.</p>

<pre class="lang-vb prettyprint-override"><code>Public Sub Start()

    Const TestValue As String = "bbaabb"

    ' Case 1: Methods, which are helping dealing with string data type
    ' are collected in the StringExtensions module.
    If StringExtensions.Contains(TestValue, "a") _
       And StringExtensions.StartsWith(TestValue, "b") _
       And StringExtensions.EndsWith(TestValue, "b") Then

        ' ...
    End if

    ' Case 2: The same methods are now in the StringExt module.
    If StringExt.Contains(TestValue, "a") _
       And StringExt.StartsWith(TestValue, "b") _
       And StringExt.EndsWith(TestValue, "b") Then

        ' ...
    End if

    ' Case 3: ... and now, they are in the StringH module.
    If StringH.Contains(TestValue, "a") _
       And StringH.StartsWith(TestValue, "b") _
       And StringH.EndsWith(TestValue, "b") Then

        ' ...
    End if
End Sub
</code></pre>

<hr>

<h2>Hungarian notation</h2>

<p>Yes, I'm actively against using Hungarian notation... But, this one is exception. I used this <code>p</code> (private) prefix here because:</p>

<ul>
<li>The same reasons why you would use <code>_</code> in C#</li>
<li>To avoid hassle of creating an additional private data structure</li>
<li>To speed up a process of creating new variables

<ul>
<li>Right now, I have small code snippet in VS Code which lets me create module/class variable, property Get and Let in a few keyboard strokes. I don't see now the way how I could do it with custom data type.</li>
</ul></li>
</ul>

<pre><code>{
    "New property":{
    "prefix": "prop",
    "body": [
        "Private p${1:name} As ${2:type}",
        "",
        "Public Property Get ${1:name} () As ${2:type}",
        "    ${1:name} = p${1:name}",
        "End Property",
        "",
        "",
        "Public Property Let ${1:name} (ByVal Value As ${2:type})",
        "    p${1:name} = Value",
        "End Property",
    ],
    "description": "Creates a new property."
    }
}
</code></pre>

<ul>
<li>Rubberduck also does not provide a accessors builder for the members of data structures and maybe there are good reasons for it.</li>
</ul>

<hr>

<h2>Case for the ":"</h2>

<p>The only place where I would use the <code>:</code> is where declaration of a variable AND  value assignment is short. Lets say no longer than 65 characters (mine has 67, I know ðŸ˜Š).</p>

<p>Things which I haven't touched on in this answer, I completely agree with.</p>
    </div>