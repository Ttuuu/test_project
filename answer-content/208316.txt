<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The idea behind your script is pretty cool and there's a couple ways to polish it up! While it certainly wouldn't cause a headache, I think that creating an entire class just to measure how long the request is going to take to complete is a little overkill.</p>

<p>Within the class itself, let's look at 2 things which aren't the best practice.</p>

<ul>
<li>Use of a global variable</li>
<li>Use of the <code>try/except</code> block</li>
</ul>

<h3>Global variables</h3>

<p>There's a <a href="https://stackoverflow.com/questions/19158339/why-are-global-variables-evil">brilliant StackOverflow question</a> with really good answers as to why using global variables should be discouraged. While in the scope of your script it is not harmful, imagine you had many functions and methods in your script. Using the global variable could decrease readability and potentially alter the behaviour of your code. Mind you, global variables aren't the same as global constants (also discussed in the StackOverflow question).</p>

<h3>Exception handling</h3>

<p>Using a bare <code>except</code> statement will handle <strong>all</strong> exceptions, even the ones you might not anticipate. Catch errors explicitly, otherwise you might cause unexpected behaviour in your code, should it become more complex. In this scope, your bare <code>except</code> statement should become more like this:</p>

<pre><code>try:
    ...
except requests.exceptions.ConnectionError:
    print("failed to connect")
</code></pre>

<p>This way, you are handling the case where your request actually fails and you let other errors happen in their intended way. Otherwise, a different exception could have been raised and you won't know what caused it.</p>

<p>Additionally, on this class:</p>

<ul>
<li>Following naming conventions, class names should use CapWords.</li>
<li>In Python 3+, classes no longer need to be inherited from <code>object</code>.</li>
</ul>

<p>Instead of the class, you could just define a simple function which retrieves the XML document from the RSS feed, declare your timing functionality within it and returns the XML document. Seeing as the URL query takes in what's seemingly an ISO 3166-2 country code as one of the parameters, you could pass the country code into this function and have the ability to fetch search trends for so many different countries! Please note that in the following snippet I am using <code>f-strings</code> which were introduced since Python 3.6.</p>

<pre><code>def fetch_xml(country_code):
    url = f"https://trendse.google.com/trends/trendingsearches/daily/rss?geo={country_code}"
    start = time.time()
    response = requests.get(url)
    response_time = time.time() - start
    print(f"The request took {response_time}s to complete.")
    return response.content`
</code></pre>

<h2>Parser</h2>

<p>Looking at the docstring of your parser, one might argue it's a little misleading. You're mentioning "storable text" while you're only printing your output! To come closer to the intention of the docstring, it would be better to return the parsed data and decide what to do with it later. I think in this case, a dictionary would a very fitting data structure. Dictionaries store key-value pairs, so lets use the trend title as the key and the traffic approximation as the value.</p>

<p>Using <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub()</code></a> will allow you to remove different characters from a string in a single line, rather than replacing each character separately! This piece of code here:</p>

<pre><code>for x in traffic_unformatted: 
    x = x.text 
    x = x.replace("+","")
    x = x.replace(",", "")
</code></pre>

<p>Can now become:</p>

<pre><code>    for x in traffic_unformatted:
        x = re.sub("[+,]", "", x.text)
</code></pre>

<p>Zip the two lists of titles and traffic approximations together and iterate over them to create the dictionary. I am going to use a dictionary comprehension in the final script, however it works identically to the following.</p>

<pre><code>titles = soup.find_all("title")
approximate_traffic = soup.find_all("ht:approx_traffic")
trends = {}
for title, traffic in zip(titles[1:], approximate_traffic):
    trends[title.text] = re.sub("[+,]", "", traffic.text)
return trends
</code></pre>

<p>Please pay attention to the <code>titles</code> function having its first element sliced off - this is because BeautifulSoup picked up the title of the entire XML document together with titles of the trends.</p>

<p>Finally, I am using an <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == "__main__"</code></a> guard to separate functions from the block of code where I am calling the functions from.</p>

<p>Entire script:</p>

<pre><code>import time
import re
import requests
from bs4 import BeautifulSoup


def fetch_xml(country_code):
    url = f"https://trends.google.com/trends/trendingsearches/daily/rss?geo={country_code}"
    start = time.time()
    response = requests.get(url)
    response_time = time.time() - start
    print(f"The request took {response_time}s to complete.")
    return response.content

def trends_retriever(country_code):
    """Parses the Google Trends RSS feed using BeautifulSoup.

    Returns:
        dict: Trend title for key, trend approximate traffic for value.
    """
    xml_document = fetch_xml(country_code)
    soup = BeautifulSoup(xml_document, "lxml")
    titles = soup.find_all("title")
    approximate_traffic = soup.find_all("ht:approx_traffic")
    return {title.text: re.sub("[+,]", "", traffic.text)
            for title, traffic in zip(titles[1:], approximate_traffic)}


if __name__ == '__main__':
    trends = trends_retriever("US")
    print(trends)
</code></pre>

<p>Output:</p>

<pre><code>The request took 0.2512788772583008s to complete.
{'Tiger vs Phil': '2000000', 'McKenzie Milton': '200000', 'Costco Black Friday': '200000', 'Nebraska Football': '200000', 'Patagonia': '100000', 'Michael Kors': '100000', 'Jcrew': '100000', 'finish line': '100000', 'WVU football': '100000', 'Texas football': '100000', 'Shoe Carnival': '100000', 'J Crew': '100000', 'Llbean': '100000', 'Cards Against Humanity': '100000', 'Bleacher Report': '100000', 'Steph Curry': '50000', 'Apple Cup': '50000', 'Bob McNair': '50000', 'Virginia Tech football': '50000', 'Glossier': '50000'}
</code></pre>
    </div>