<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your solution looks ok to me. But let's understand better how this sort method actually works.</p>

<p><em>The insertion sort</em>, works as it follows: always maintains a sorted sublist in the lower positions of the list. Each new item is then "inserted" back into the previous sublist such that the sorted sublist is one item larger. See below how insertion sorting process works. The shaded items represent the ordered sublists as the algorithm makes each pass.</p>

<p><a href="https://i.stack.imgur.com/CmBBW.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/CmBBW.png" alt="insertion sort"></a><br>
<sub>(source: <a href="https://interactivepython.org/runestone/static/pythonds/_images/insertionsort.png" rel="nofollow noreferrer">interactivepython.org</a>)</sub>  </p>

<p>We begin by assuming that a list with one item (position 00) is already sorted. On each pass, one for each item 1 through nâˆ’1, the current item is checked against those in the already sorted sublist. As we look back into the already sorted sublist, we shift those items that are greater to the right. When we reach a smaller item or the end of the sublist, the current item can be inserted.</p>

<p><a href="https://i.stack.imgur.com/lOvrU.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/lOvrU.png" alt="steps"></a><br>
<sub>(source: <a href="https://interactivepython.org/runestone/static/pythonds/_images/insertionpass.png" rel="nofollow noreferrer">interactivepython.org</a>)</sub>  </p>

<p>Above, a sorted sublist of five items consisting of 17, 26, 54, 77, and 93 exists. We want to insert 31 back into the already sorted items. The first comparison against 93 causes 93 to be shifted to the right. 77 and 54 are also shifted. When the item 26 is encountered, the shifting process stops and 31 is placed in the open position. Now we have a sorted sublist of six items.</p>

<p>With this being said, I'd go with this implementation:</p>

<pre><code>def insertionSort(lst):
    for index in range(1, len(lst)):

        currentvalue = lst[index]
        position = index

        while position &gt; 0 and lst[position - 1] &gt; currentvalue:
            lst[position] = lst[position - 1]
            position = position - 1

        lst[position] = currentvalue


lst = [54, 26, 93, 17, 77, 31, 44, 55, 20]
insertionSort(lst)
print(lst)
</code></pre>
    </div>