<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Aside from the remarks of Frank (which are valid):</p>

<h1>C++ remarks</h1>

<h2>Possible message rot</h2>

<pre><code>if (i % INDENT_SPACES) {
    std::cout &lt;&lt; "line " &lt;&lt; line_counter_
              &lt;&lt; ": one indent is always 4 spaces long. Treating " &lt;&lt; i
              &lt;&lt; " spaces as " &lt;&lt; i / INDENT_SPACES + 1 &lt;&lt; "indents";
}
int indents = (i + INDENT_SPACES - 1) / INDENT_SPACES;
</code></pre>

<p>Here you do the calculations for <code>indents</code> twice, and from experience they tend to get out of sync. Here the fix is straightforward: just swap the lines and use the <code>indents</code> variable when printing.</p>

<h2>Don't return <code>const int</code></h2>

<p>There is no point in that (and is not enforceable). Just return <code>int</code>...</p>

<h2>Use less dynamic allocations</h2>

<pre><code>context_.add_error(make_unique&lt;Error&gt;( /* ... */ ));
</code></pre>

<p>This will cost a lost with sources that contain loads of errors, and also adds unecessary allocations. I think for this case you can go with value directly (this was already said by Frank).</p>

<h1>On the algorithm</h1>

<h2>General</h2>

<p>From reading the code, it seems your language is not free-form (that is, indentation and new lines matters). I don't know if this is wanted, but it completely disallow tabulations.</p>

<p>On a general note, lexers can be treated as very simple compilers that take a string as input, and output an array of lexemes, which are usually all determined by the value of an enumeration (except identifiers). Since they are just the entry - and you want your language tokens to be easily distinguishable by humans - the lexer "language" should be also simple. This is one of the reason why lexer "languages" are usually regular languages.
<strong>Important: only the "language" of the lexer is regular, your toy language is probably not regular</strong> (but that does not matter, as it is a separate phase of compilation).</p>

<p>The corollary is that to efficiently parse a regular language you need a <a href="https://en.wikipedia.org/wiki/Deterministic_finite_automaton" rel="noreferrer">DFA</a>. You can write it by hand (tedious, but good for learning purposes), or use a tool for that.</p>

<h2>More modular code</h2>

<p>First, I would separate the lexing of the indentation in its own function:</p>

<pre><code>void parse_indentation()
{
    int i = 0;
    while (isspace(current_line_[i]))
    {
        if (current_line_[i] != ' ')
        {
            context_.add_error(make_unique&lt;Error&gt;(
                  Error::INDENTATION_ONLY_SPACES, source_-&gt;get_file_name(),
                  current_line_, source_-&gt;get_line_no(), false));
        }
        i++;
    }
    int indents = (i + INDENT_SPACES - 1) / INDENT_SPACES;
    if (i % INDENT_SPACES)
        std::cout &lt;&lt; "line " &lt;&lt; line_counter_
                  &lt;&lt; ": one indent is always 4 spaces long. Treating " &lt;&lt; i
                  &lt;&lt; " spaces as " &lt;&lt; indents &lt;&lt; "indents";

    for (int j = 0; j &lt; indents; j++)
        tokens_.push_back(new Token(Token::Type::indentation, create_lexing_context()));
}
</code></pre>

<p>By the way, what you did with <code>while (isspace(current_line_[i]))</code> is good: you allow more (i.e., tabs and \r even if they should not appear), so your error reports are better.</p>

<h2>Deterministic Finite Automaton</h2>

<p>Now, the remaining <code>while</code> loop can be changed in a DFA. Here is a small example for numbers, <em>elif</em>, <em>else</em>, and strings with single quotes:</p>

<p><img src="https://i.imgur.com/JD4x4wq.png" alt="DFA"></p>

<p>Obviously, there are links from the <em>K</em> * states to <em>Error</em> for unrecognized characters, but I partially hid them for readability.
Once you have an automaton, you try to advance states until you can't (either you reach a final state or you would hit the <em>Error</em> state). What you have before stopping is what you want.</p>

<p>Just repeat that several times, until the whole line is transformed into lexemes.</p>

<h2>Misc</h2>

<p>Try to avoid heavy tokens. If you can use <code>std::string_view</code> (c++17), do it, because <code>std::string</code> will do dynamic allocations (and that costs a lot !)</p>
    </div>