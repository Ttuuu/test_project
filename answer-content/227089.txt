<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Inversion-of-control</h2>

<p>I wouldn't use reflection using error-prone member-by-string lookup, when a simple <code>Func</code> provides type-safe behavior. This signature could be used to have the error callback, client factory and operation provided using <em>inversion-of-control</em>.</p>

<pre><code>public async Task&lt;ValidationResult&lt;TRes&gt;&gt; ExecuteWithTokenRefresh&lt;TApiClient, TRes&gt;(
    Action&lt;ApiException, int&gt; errorCallback,
    Func&lt;Configuration, TApiClient&gt; clientFactory,
    Func&lt;TApiClient, Task&lt;ValidationResult&lt;TRes&gt;&gt; operation) { // ..
</code></pre>

<p>Creating the client:</p>

<pre><code>var apiClient = clientFactory(defaultConfiguration);
</code></pre>

<p>instead of:</p>

<blockquote>
<pre><code> var apiClient = Activator.CreateInstance(typeof(TApiClient), 
    args: defaultConfiguration);
</code></pre>
</blockquote>

<p>Getting the response then becomes:</p>

<pre><code>var apiResponse = await operation(apiClient);
</code></pre>

<p>instead of:</p>

<blockquote>
<pre><code>var apiResponse = await (Task&lt;ApiResponse&lt;TRes&gt;&gt;) 
    typeof(TApiClient).GetMethod(functionName)
        ?.Invoke(apiClient, functionParams);
</code></pre>
</blockquote>

<p>And the error gets handled as:</p>

<pre><code>catch (ApiException exc)
{
    errorCallback(exc, retryIndex);
    if (retryIndex &gt; 0)
        return new ValidationResult&lt;TRes&gt; { IsError = true, Message = exc.Message }; 
}
</code></pre>

<p>so you no longer require that <code>context</code> string:</p>

<blockquote>
<pre><code>Logger.LogError(exc, $"{context} error, retry index = {retryIndex}");
</code></pre>
</blockquote>

<p>This is only one possible way to refactor the code. Perhaps you would like to have improved error flow management and have the error callback control retry management.</p>
    </div>