<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Missing Error Checking</strong></p>
<blockquote>
<p>I usually use c++ so it may not be best practice for c.</p>
</blockquote>
<p>In C++ when memory allocation fails in <code>new</code> an exception is thrown, this is not the case in the C programming language when using <code>malloc()</code>, <code>calloc()</code> or <code>realloc()</code>. An additional check is required after any memory allocation call. The check is to see if the memory returned is <code>NULL</code> or not, if the allocation fails references through the pointer are Unknown Behavior.</p>
<pre><code>Vm *new_vm() {
    Vm *ret = (Vm*)malloc(sizeof(Vm));
    if (!ret)
    {
        fprintf(stderr, "Allocation of the Virtual Machine failed.\n");
        return ret;
    }
    
    ret-&gt;pc = 1024; /* add space for the stack */
    ret-&gt;sp = -1;
    ret-&gt;running = true;
    return ret;
}
</code></pre>
<p>In <code>main()</code>:</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include "vm.h"

int main() {
    Vm *vm = new_vm();
    if (vm == NULL)
    {
        fprintf(stderr, "Exiting Toy Virtual Machine.\n");
        return EXIT_FAILURE;
    }
    i32 buffer[] = {
            0x00000A01, /* push 0x0A(\n) */
            0x00004301, /* push 0x43(C)  */
            0x00004201, /* push 0x42(B)  */
            0x00004101, /* push 0x41(A)  */
            0x00000009, /* output */
            0x00000002, /* pop */
            0x00000009,
            0x00000002,
            0x00000009,
            0x00000002,
            0x00000009,
            0x00000000  /* halt */
    };
    for (int i = 0; i &lt; sizeof(buffer); i++) {
        vm-&gt;mem[vm-&gt;pc+i] = buffer[i];
    }
    run_vm(vm);
    free_vm(vm);
    return EXIT_SUCCESS;
}
</code></pre>
<p><strong>Include Only Necessary Headers</strong><br>
In the code as posted, <code>stdlib.h</code> is included in <code>vm.h</code>, <code>stdlib.h</code> is not necessary in <code>main()</code>, only in <code>vm.c</code>. To reduce the scope of the header files and source files only include what is needed. Amoung other things, this will reduce compile times, and may also reduce linking problems.</p>
<p><strong>Missing Default Case in Switch Statement</strong><br>
It is generally a good programming practice to have a <code>default :</code> case statement in a switch statement to handle cases that haven't been specified yet:</p>
<pre><code>static void execute(Vm *vm) {
    switch(vm-&gt;opc) {
        default:
            fprintf(stderr, "Unknown Opcode in execute(). 0x%x\n", vm-&gt;opc);
            return;
        case 0x00: /* halt */
            vm-&gt;running = false;
            printf("Halt\n");
            break;
        ...
    }
</code></pre>
<p>Then all possible paths through the function have been implemented. This is true in either C or C++ and most other programming languages that have a <code>switch</code> statement.</p>
<p><strong>Use an ENUM for the Opcodes</strong><br>
The code would be much more readable if less numeric constants and more symbolic constants were used. In C there are 2 ways to do this, to create single symbolic constants use macro definition</p>
<pre><code>#define SYMBOL  VALUE
</code></pre>
<p>or to use enums</p>
<pre><code>typedef enum {
    HALT = 0x00,
    PUSH = 0x01,
    POP = 0x02,
    ...
    INPUTCHAR = 0x0A
} OPCODE;


typedef struct {
    i32 mem[0xffff]; /* approx. 64k */
    si32 sp;
    i32 pc;

    i32 raw;
    OPCODE opc;
    i32 param;

    bool running;
} Vm;
</code></pre>
<p><strong>Use Unsigned Types as Indexes</strong><br>
The stack pointer index is currently a signed integer and is initialized to -1, this is what I consider to be a bad practice since stack[-1] will cause Unknown Behavior. It would be better to use <code>size_t</code> or <code>unsigned</code> as the stack pointer index. This will force a change in a number of areas, but here is what I would recommend:</p>
<ol>
<li>Initialize <code>running</code> to <code>false</code> rather than true.</li>
<li>Initialize sp to zero</li>
<li>Only index the stack and increment the stack pointer if <code>running</code> is true</li>
<li>At the beginning of <code>run_vm(Vm *vm)</code> before the loop set <code>running</code> to true</li>
<li>Change the implementation of <code>reset_vm(Vm *vm)</code> to match all of the above</li>
</ol>
<p><strong>Type Names and Variable Names</strong><br>
Initially I was confused about Vm, whether it was a Virtual Memory or a Virtual Machine, this was true of other variables and types as well. Well written code is self documenting and doesn't need a lot of comments, type names and variable names play a big part in this. In my opinion <code>Vm</code> should be renamed <code>VirtualMachine</code>, <code>sp</code> should be renamed <code>StackPointer</code>, <code>pc</code> should be renamed <code>ProgramCounter</code> etc.</p>
<p><strong>Use Library Functions Where Available</strong><br>
C++ contains <code>std::memset()</code>, and <code>memset()</code> in C predates C++. The function <code>reset_vm()</code> should use <code>memset()</code> rather than the loop it is using to reset the memory. The function <code>memset()</code> should be faster than the current loop.</p>
<pre><code>void reset_vm(Vm *vm) {
    vm-&gt;running = true;
    memset(&amp;vm-&gt;mem[0], 0, sizeof(*vm-&gt;mem[0]) * 0xffff);
    vm-&gt;sp = -1;
    vm-&gt;pc = 1024;
}
</code></pre>
    </div>