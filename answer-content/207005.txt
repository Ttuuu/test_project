<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Algorithm</h3>

<p>Your code does strike me as unnecessarily difficult to follow for the task it accomplishes.</p>

<p>Given that the final result needs to consist of alternating characters, I think I'd start by eliminating any characters that include any run of two or more:</p>

<pre><code>std::string &amp;remove_runs(std::string &amp;input) { 
    std::string::iterator pos;

    while ((pos = std::adjacent_find(input.begin(), input.end())) != input.end())
    {
        char a = *pos;
        auto end = std::remove(input.begin(), input.end(), a);
        input.erase(end, input.end());
    }
    return input;
}
</code></pre>

<p>Then I'd generate a histogram, and eliminate all characters that didn't have at least one other character with the same overall count.</p>

<p>Then I'd generate the possible pairs from that set of possibilities.</p>

<pre><code>std::vector&lt;std::string&gt; gen_pairs(std::string &amp;input) { 
    constexpr auto max = std::numeric_limits&lt;unsigned char&gt;::max();

    std::array&lt;std::size_t, max&gt; counts{};

    for (char c : input)
        ++counts[c];

    std::map&lt;std::size_t, std::string&gt; result;

    for (int i=0; i&lt;max; i++)
        if (counts[i] != 0)
            result[counts[i]].push_back(i);

    std::vector&lt;std::string&gt; ret;

    for (auto &amp;s : result) { 
        if (s.second.length() &gt; 1)
            ret.push_back(s.second);
        else {
            auto pos = std::remove(input.begin(), input.end(), s.second[0]);
            input.erase(pos, input.end());
        }
    }
    return ret;
}
</code></pre>

<p>Arguably, that's still not ideal. In particular, <code>gen_pairs</code> not only generates the possible pairs, but also modifies its input to remove characters that couldn't possibly form pairs. That's probably a violation of the single responsibility principle, but I'm not quite ambitious enough at the moment to fix that.</p>

<p>So, for your input, removing characters with runs gives us: "y:4:4:4y:4".</p>

<p>Then generate_pairs reduces the string to <code>:4:4:4:4</code>, and tells us that the only possible pair is <code>4:</code>.</p>

<p>I believe at that point, we could re-run the code to remove runs, so if we previously had a substring something like <code>byb:4</code>, after the <code>y</code> was removed as not a candidate (because it had no pair) we'd remove the two <code>b</code>s because they now form a run.</p>

<h3>Specification</h3>

<p>It looks like it's entirely possible that a single input string could actually contain more than one "Mixed Duo". I'm not sure what you want to do in such a case.</p>

<p>For example, consider a case like: ":4:4:4:4'8'8'8'8". Both ":4" and "'8" seem to fit your specification. Perhaps the entire string has to be composed of the two chosen characters (in which case that string doesn't contain a Mixed Duo), but perhaps not (and it contains two Mixed Duos).</p>

<h3>Code Style</h3>

<p>Looking at some of the details of the code itself, there are a few things I'd change about how it's written as well. For example:</p>

<pre><code>    if(flip == true)
    {
        flip = false;
    }
    else if (flip == false) {
        flip = true;
    }
</code></pre>

<p>...can be rewritten more simply as: <code>flip = !flip;</code></p>

<p>Likewise:</p>

<pre><code>if(input.size() &lt; 4){return false;}
if(input.size() == 4){
    if((input[0] == input[2])&amp;&amp;(input[1] == input[3])){ return true;}
    else {return false;}
}
</code></pre>

<p>...can be rewritten rather more simply as:</p>

<pre><code>return (input.size() == 4 )&amp;&amp; (input[0] == input[2])&amp;&amp;(input[1] == input[3]);
</code></pre>
    </div>