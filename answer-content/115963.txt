<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>Is my API design, naming, coding conventions, performance in order?</code> - not intending to delve into performance or to start with <code>constructTrie()</code>/<code>computeFailureFunction()</code>.</p>

<h2>API</h2>

<p>Don't mix use and reuse/construction. Prefer <code>interface</code>s over <code>abstract class</code>. Have a</p>

<pre><code>public interface Matcher {

    interface Match {
        String getPattern();
        int getConcludingIndex();
    }
// alternatives: NavigableSet&lt;Match&gt;, Stream&lt;Match&gt;
    java.util.Iterator&lt;Match&gt; match(String text);

    static class Utils {
    /** @return new array of distinct {@code pattern}s specified
     * &lt;br/&gt;indexes bound to differ */
    // XXX: what about ""? Throw if unique.size() != patterns.length?
        public static String[] filterPatterns(String[] patterns) {
            java.util.Set&lt;String&gt; unique = new java.util.HashSet&lt;&gt;(
                java.util.Arrays.asList(patterns));
            return unique.toArray(new String[unique.size()]);
        }
    }
}
</code></pre>

<p>(or put utilities in <code>net.coderodde.patternmatching.support</code>.)<br>
I don't expect throwing in</p>

<pre><code>public interface MatcherFactory {
    Matcher create(Object ...params);
}
</code></pre>

<p>, a registry, implementation/class selection by properties, … to be worth the trouble.  </p>

<pre><code>/** This class implements the Aho-Corasick algorithm
 *   for the multiple exact string matching problem.
 * 
 * @author Rodion "rodde" Efremov
 * @version 1.x */
public class AhoCorasickMatcher
    implements Matcher //, MatcherFactory
{
    private Automaton data;
    public AhoCorasickMatcher(String ...literals) {
        if (0 == literals.length)
            throw new IllegalArgumentException(
                "No patterns given.");
        data = constructACAutomaton(
            Matcher.Utils.filterPatterns(literals));
    }

    @Override
    public Iterator&lt;Match&gt; match(String text) {
        …
    }
}
</code></pre>
    </div>