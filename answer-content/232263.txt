<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Avoid Using the <code>this</code> Pointer</h2>
<p>It is very rare to see the <code>this</code> pointer used in c++ code, it generally isn't necessary. The code in this question compiles fine without the this pointer. Consider making the structure into a class.</p>
<h2>Avoid Using Macros in C++</h2>
<p>In C++ it is better to use constexpr <code>TYPE SYMBOL = constant;</code> because it allows the compiler to do type checking when the values are used.</p>
<pre><code>constexpr unsigned bit0 = 0x1;
constexpr unsigned bit1 = 0x1 &lt;&lt; 1;
constexpr unsigned bit2 = 0x1 &lt;&lt; 2;
constexpr unsigned bit3 = 0x1 &lt;&lt; 3;
constexpr unsigned nib = 0xf;
</code></pre>
<p>Instead of macro functions use inline functions.</p>
<pre><code>bool isBit(unsigned val, unsigned bit) { static_cast&lt;bool&gt; ((val &amp; bit) == bit); }
</code></pre>
<p>It might be better to replace bool with unsigned as the underlying storage type, many programmers that program hardware and need to toggle bits will use unsigned.</p>
<h2>The Default Constructor</h2>
<p>In the header file there is this constructor <code>bin_data(int);</code> and in the cpp file there is</p>
<pre><code>bin_data::bin_data( int val = 0 )
    :b0( isBit(val,bit0) ) ,b1( isBit(val,bit1) ) ,b2( isBit(val,bit2) ) ,b3( isBit(val,bit3) )
    ,b4( isBit(val, bit0 &lt;&lt; 4 ) ) ,b5( isBit(val, bit1 &lt;&lt; 4 ) ) ,b6( isBit(val, bit2 &lt;&lt; 4 ) ) 
    ,b7( isBit(val, bit3 &lt;&lt; 4 ) )
{ }
</code></pre>
<p>My compiler (Visual Studio 2019) complains about this portion of the constructor in the cpp file:</p>
<pre><code>bin_data::bin_data( int val = 0 )
</code></pre>
<p>It would probably be better if the code in the header file was <code>bin_data(int val = 0);</code> otherwise another constructor needs to be written which does not accept an <code>int</code> as input, remove the <code>int val = 0</code> in the cpp file.</p>
<pre><code>bin_data::bin_data(int val)
    :b0( isBit(val,bit0) ) ,b1( isBit(val,bit1) ) ,b2( isBit(val,bit2) ) ,b3( isBit(val,bit3) )
    ,b4( isBit(val, bit0 &lt;&lt; 4 ) ) ,b5( isBit(val, bit1 &lt;&lt; 4 ) ) ,b6( isBit(val, bit2 &lt;&lt; 4 ) ) 
    ,b7( isBit(val, bit3 &lt;&lt; 4 ) )
{ }
</code></pre>
<p><em>Note, the comma operator should always be followed by a space.</em></p>
<h2>Use C++ Casts Rather Than Old C Style Casts</h2>
<p>There are old C style casts in several places, it is better to use either <code>static_cast&lt;type&gt;</code> or <code>dynamic_cast&lt;type&gt;</code> in C++. In this code they would all be static_cast.</p>
<p>Current code</p>
<pre><code>#define isBit(val,bit) (bool)( (val &amp; bit) == bit )
</code></pre>
<p>more modern code</p>
<pre><code>bool isBit(unsigned val, unsigned bit) { static_cast&lt;bool&gt; ((val &amp; bit) == bit); }
</code></pre>
    </div>