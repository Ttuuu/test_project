<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Improving L2</h2>

<p>There is an imperfection in the iterative approach: <code>N! - 1</code> useless checks whether <code>j</code> equals <code>-1</code> (in an already sorted array, in an ascending order).</p>

<p>A quicker way would be the following :</p>

<pre><code>while self[j] &gt;= self[j+1] {
    if j &gt; 0 {
        j -= 1
    }
    else {
        return false
    }
}
</code></pre>

<p>(Note that the most probable condition is placed first for )</p>

<p>In my benchmarks, the original takes ~<code>0.062</code>s and the improved version takes ~<code>0.055</code>s which translates to an almost <strong><code>12%</code></strong> speed up. </p>

<hr>

<h2>Improving L3</h2>

<p><code>self[j]</code> is accessed too many times, and it is a <em>two-step</em> read: reading <code>j</code>, then accessing <code>self</code> at <code>j</code>. Better store it in a variable and then it would be a <em>one-step</em> read :</p>

<pre><code>var l = count - 1
let jElement = self[j]
while jElement &gt;= self[l] {
    l -= 1
}
self.swapAt(j, l)
</code></pre>

<p>Which brings the execution time down to ~<code>0.043</code>s  (<strong><code>30%</code></strong> faster than the original).</p>

<hr>

<h2>Zigzagging</h2>

<p>The idea is: we still have to read cells between <code>l - 1</code> and <code>j</code> twice, hence the name of this section. If only we could read each cell once!</p>

<p>This goal is still not attained since <code>self[j]</code> is read twice in the following snippet. It has gained up to ~<code>4ms</code> vis-a-vis the version having the previous improvements :</p>

<pre><code>var tempo = self[j+1]
while self[j] &gt;= tempo {
    if j &gt; 0 {
        tempo = self[j]
        j -= 1
    }
    else {
        return false
    }
}
</code></pre>

<p>The only explanation I could find/guess for this (slight) improvement, is that it avoids the unnecessary number of additions : <code>j+1</code>. That number is given by the following sequence :
<span class="math-container">$$ u_{3} = 4; u_{2} = 2; u_{1} = u_{0} = 0 $$</span>
<span class="math-container">$$ u_{n} = n . u_{n-1} + 1  ;   n \geq 4 $$</span></p>

<p>For n = 10, the number of additions is <code>2,606,501</code>.</p>

<hr>

<p>The following code was used for benchmarking in this section:</p>

<pre><code>class TestClass {
    let tag: Int
    init(t: Int) {
        self.tag = t
    }
}

extension TestClass: Comparable {
    static func == (lhs: TestClass, rhs: TestClass) -&gt; Bool {
        return lhs.tag == rhs.tag
    }
    static func &lt; (lhs: TestClass, rhs: TestClass) -&gt; Bool {
        return lhs.tag &lt; rhs.tag
    }
}

var a: [TestClass] = Array(1...10).map { TestClass(t: $0) }

let N = 10
var count = 0
let start = Date()
repeat {
    count += 1
} while a.permute()
let end = Date()
print(count, end.timeIntervalSince(start))
</code></pre>

<p>The edge given by this improvement is valid for an array of value types too.</p>

<hr>

<h2>Final version</h2>

<p>For convenience, here is the version with all improvements:</p>

<pre><code>mutating func permute() -&gt; Bool {

    // Nothing to do for empty or single-element arrays:
    if count &lt;= 1 {
        return false
    }

    // L2: Find last j such that self[j] &lt;= self[j+1]. Terminate if no such j
    // exists.
    var j = count - 2
    var tempo = self[j+1]
    while self[j] &gt;= tempo {
        if j != 0 {
            tempo = self[j]
            j -= 1
        }
        else {
            return false
        }
    }

    // L3: Find last l such that self[j] &lt;= self[l], then exchange elements j and l:
    var l = count - 1
    let jElement = self[j]
    while jElement &gt;= self[l] {
        l -= 1
    }
    self.swapAt(j, l)

    // L4: Reverse elements j+1 ... count-1:
    var lo = j + 1
    var hi = count - 1
    while lo &lt; hi {
        self.swapAt(lo, hi)
        lo += 1
        hi -= 1
    }
    return true
}
</code></pre>

<hr>

<h2>Other</h2>

<p>In the benchmarking code, creating the array <code>a</code> isn't part of the algorithm, and shouldn't be sandwiched between the <code>start</code> and <code>end</code> dates.  </p>
    </div>