<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Ideally, you wouldn't use Task.Delay, and instead find a way to bind to Process event(s), and thereby create a brand new TaskCompletionSource. Also, you generally shouldn't return true/false, and should use exception throwing instead.</p>

<ul>
<li>see <a href="https://stackoverflow.com/a/15316668/887092">https://stackoverflow.com/a/15316668/887092</a> for TaskCompletionSource</li>
<li>see <a href="https://stackoverflow.com/questions/4504170/why-is-my-processs-exited-method-not-being-called#4504208">https://stackoverflow.com/questions/4504170/why-is-my-processs-exited-method-not-being-called#4504208</a> for example of Process.Exited</li>
<li>see <a href="https://softwareengineering.stackexchange.com/a/159097/78712">https://softwareengineering.stackexchange.com/a/159097/78712</a> - there are still good cases where true/false should be returned (eg. <code>while(reader.Read())</code>)</li>
</ul>

<p>Example of the start of a re-write, which highlights the 3 chages:</p>

<pre><code>static Task MostBasicProcess()
{
    var t = new TaskCompletionSource&lt;bool&gt;(); //Using bool, because TaskCompletionSource needs at least one generic param

    var p = new Process();
    //TODO: more setup
    p.EnableRaisingEvents = true; //VERY important
    p.Exited += (object sender, EventArgs e) =&gt;
    {
        ////TODO: Exceptions will go first, followed by `return;`
        //t.SetException();

        //TODO: Finally, if there are no problems, return successfully
        t.SetResult(true);
    };
    p.Start();
    //TODO: wrap .Start() in try-block and call t.SetException on error

    return t.Task; //We actually don't want the caller using the bool param, it's implicitly casted to plain Task.
}
</code></pre>

<p>Note: That exception processing should appear first to avoid too-much {} nesting. Also, you should really put all the code in a try-block.</p>

<p>Usage:</p>

<pre><code>try
{
    await MostBasicProcess();
}
catch (Exception ex)
{
}
</code></pre>

<p>Of course, you need to adapt this to your broader needs.</p>
    </div>