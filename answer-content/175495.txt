<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>DOM querying is expensive</h3>
<p>Search on Google for "js DOM query expensive" and you will likely find many posts from the past 10 years that discuss how in-efficient it is to be querying the DOM each time. <a href="https://ilikekillnerds.com/2015/02/stop-writing-slow-javascript/" rel="nofollow noreferrer">Stop Writing Slow Javascript</a> appears to be somewhat recent - see the section <strong>Cache DOM Lookups</strong>. <a href="https://stackoverflow.com/a/15046461/1575353">This answer on SO</a> about various DOM-selector functions will likely be interesting as well.</p>
<p>In the code below, notice that the variables <code>searchBox</code> and <code>ul</code> are declared at the top</p>
<pre><code>var searchBox, ul;
</code></pre>
<p>Those variables don't get assigned until the callback for a new event listener for the <a href="https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded" rel="nofollow noreferrer">DOMContentLoaded</a> event is triggered.</p>
<pre><code>document.addEventListener("DOMContentLoaded", function(event) {
    searchBox = getElementById('typeahead');
    searchBox.addEventListener('keyup', typeAhead);

    ul = document.createElement('ul');
    ul.setAttribute('id', 'searchResults')
    appendChild(document.body, ul);
    hideList();
    addEvent(ul);
});
</code></pre>
<p>You will also notice that in that event callback, the unordered list (i.e. <code>ul</code>) is added to the document and hidden. That way there is only one list ever added, and because of that, we can hide and show the list instead of removing it. The function <code>removeChild</code> can be replaced with a function <code>hideList</code> that will set the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display" rel="nofollow noreferrer">display</a> style (using <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style" rel="nofollow noreferrer">HTMLElement.style</a>) to <code>none</code>. Additionally, the call to <code>addEvent()</code> was moved into that callback function, so we only add the event listener once. One could also use <a href="https://davidwalsh.name/event-delegate" rel="nofollow noreferrer">event delegation</a> and have one click handler for the whole page - it would just handle clicks differently depending on the type of element clicked.</p>
<h3>Keep the scopes limited</h3>
<p>Another thing <a href="https://ilikekillnerds.com/2015/02/stop-writing-slow-javascript/" rel="nofollow noreferrer">that article</a> mentions is limiting the scope as much as possible (see the section <strong>Keep your scopes close and your scope even closer</strong>). One way to not clutter up the global namespace is to wrap the code with an IIFE:</p>
<pre><code>;(function(window, document, undefined) {
    var data = ['alabama', 'alaska', 'arizona', 'arkansas', 'california', 'colorado', 'connecticut', 'delaware'];
    //...
})(window, document);
</code></pre>
<p>See the changes applied below. There are likely other improvements that can be made as well...</p>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>'use strict';;
;(function(window, document, undefined) {
  var data = ['alabama', 'alaska', 'arizona', 'arkansas', 'california', 'colorado', 'connecticut', 'delaware'];


  /** 
   * variables: searchBox is where you type the city name, ul is the list of suggestions
   */
  var searchBox, ul;

  /**
   * methods
   */
  function getElementById(id) {
    return document.getElementById(id);
  }

  function iterate(arr, callback) {
    for (var i = 0; i &lt; arr.length; i++) {
      callback(arr[i], i);
    }
  }

  var search = function(val) {
    var arr = [];
    iterate(data, function(item, index) {
      if (item.indexOf(val) !== -1) {
        arr.push(item);
      }
    })
    return arr;
  }

  var addEvent = function(elm) {
    elm.addEventListener('click', function(event) {
    console.log('list click - target: ',event.target,' currentTarget: ',event.currentTarget);
      if (event.target !== event.currentTarget) {
        searchBox.value = event.target.textContent;
        hideList();
      }
      event.stopPropagation();
    });
  }

  var appendChild = function(parent, child) {
    parent.appendChild(child);
  }
  var hideList = function() {
    ul.style.display = 'none';
    while (ul.firstChild) {
      ul.removeChild(ul.firstChild);
    }
  }

  var bindData = function(arr) {
    ul.style.display = '';
    iterate(arr, function(item, index) {
      var li = document.createElement('li');
      var a = document.createElement('a');
      a.textContent = item;
      appendChild(li, a)
      appendChild(ul, li);
    });
  }

  function debounce(func, wait, immediate) {
    var timeout;
    return function() {
      var context = this,
        args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) {
          func.apply(context, args);
        }
      };
      var callNow = immediate &amp;&amp; !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) {
        func.apply(context, args);
      }
    };
  }

  var typeAhead = debounce(function(event) {
    hideList(); //removeChild();
    var value = event.target.value;
    if (value !== '') {
      var arr = search(value);
      bindData(arr);
    }
  }, 400);

  document.addEventListener("DOMContentLoaded", function(event) {
    searchBox = getElementById('typeahead');
    searchBox.addEventListener('keyup', typeAhead);

    ul = document.createElement('ul');
    ul.setAttribute('id', 'searchResults')
    appendChild(document.body, ul);
    hideList();
    addEvent(ul);
  });
})(window, document);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;input type="text" placeholder="type to search" id="typeahead"&gt;</code></pre>
</div>
</div>

    </div>