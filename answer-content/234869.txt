<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is also applicable by using the strategy pattern.</p>

<p>You can use the operations(+,-,/,*) by strategy. And you can give this strategy as a context to the calculate method.</p>

<pre><code>package OOPDesign.calculator;

public interface CalculationStrategy {

    int calculate(int value1, int value2);
}
</code></pre>

<p>AdditionStrategy </p>

<pre><code>package OOPDesign.calculator;

public class AdditionStrategy implements CalculationStrategy {

    @Override
    public int calculate(int value1, int value2) {
        return value1 + value2;
    }
}
</code></pre>

<p>SubtractionStrategy </p>

<pre><code>package OOPDesign.calculator;

public class SubtractionStrategy implements CalculationStrategy {

    @Override
    public int calculate(int value1, int value2) {
        return value1 - value2;
    }
}
</code></pre>

<p>Calculator </p>

<pre><code>package OOPDesign.calculator;

public class Calculator {

    public static Calculator instance = null;

    CalculationStrategy calculationStrategy;

    public void setCalculationStrategy(CalculationStrategy calculationStrategy) {
        this.calculationStrategy = calculationStrategy;
    }

    public static Calculator getInstance(){
        if(instance == null){
            instance = new Calculator();
        }
        return instance;
    }

    public int calculate(int value1, int value2) {
       return calculationStrategy.calculate(value1, value2);
    }
}
</code></pre>

<p>and Test class</p>

<pre><code>package OOPDesign.calculator;

public class CalculatorMain {

    public static void main(String[] args) {

        Calculator c = Calculator.getInstance();

        c.setCalculationStrategy(new AdditionStrategy());
        System.out.println(c.calculate(5 ,2));

        c.setCalculationStrategy(new SubtractionStrategy());
        System.out.println(c.calculate(5 ,2));

        c.setCalculationStrategy(new MultiplicationStrategy());
        System.out.println(c.calculate(5 ,2));

        c.setCalculationStrategy(new DivideStrategy());
        System.out.println(c.calculate(5 ,2));
    }
}
</code></pre>
    </div>