<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As the code cannot be run, here is a wild guess on a way to restructure it:</p>

<pre class="lang-py prettyprint-override"><code>def mean(fileResults, data):
    result = 0
    # do computation
    fileResults["mean"].append(result)

def standard_deviation(fileResults, data):
    pass

def afd(fileResults, data):
    pass

def norma_afd(fileResults, data):
    pass

def asd(fileResults, data):
    pass

def norma_asd(fileResults, data):
    pass

def calculation(file):
    """
    Get the DataFrame and calculate for ever column the different statistical mean
    :param file: DataFrame 56x7681
    :return: 6 different 56x1 lists for (mean, std, afd, norm_afd, asd, norm_asd)
    """
    fileResults = {
        "mean": [],
        "std": [],
        "afd": [],
        "norm_afd": [],
        "asd": [],
        "norm_asd": [],
        }

    functionCallList = [
        mean,
        standard_deviation,
        afd,
        norma_afd,
        asd,
        norma_asd,
        ]

    for column in file:
        data = file[column].to_numpy()

        for functionCall in functionCallList:
            functionCall(fileResults, data)

    return fileResults

def run(load_path, save_path):
    """
    Get (yield) all the different DataFrame from a folder
    and calculate for each file the statistical mean and save it in a csv file

    :param load_path: the folder path to load all the different files
    :param save_path: the folder save path
    :return: none
    """
    results = {}

    for current_path, file in yield_data(load_path, data_type="data"):
        fileResults = calculation(file)

        for key, value in fileResults.items():
            if key not in results:
                results[key] = []

            results[key].append(value)

    if not os.path.exists(save_path):
        os.makedirs(save_path)

    for key, value in results.items():
        pd.DataFrame(value).to_csv(save_path + os.path.sep + key + ".csv", index=False, header=False)
</code></pre>

<p>So, instead of repeating function call, mostly when function prototypes are the same, you can use a list of function callbacks. Then just iterate it.</p>

<p>You can also use a dictionnary to store your data, instead of n lists. It's a little bit more scalable, and clearer than returning a 6-tuple. It also avoids a lot of copy-paste when you save csv files.</p>
    </div>