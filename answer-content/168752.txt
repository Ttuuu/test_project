<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Algorithm</h3>

<p>Let's look at the time complexity of the different parts of the implementation:</p>

<ul>
<li>Build a <code>std::map</code> of frequencies: \$O(n \log n)\$. This could be improved to \$O(n)\$ by using a hash map instead.</li>
<li>Build a max-heap of the <code>m</code> unique elements: \$O(m \log m)\$</li>
<li>Pop the top <code>k</code> items from the heap: \$O(k \log m)\$</li>
</ul>

<p>If <code>k</code> is very small compared to <code>m</code>,
then building a heap from the entire collection is overkill.
It would be better to build a min-heap of <code>k</code> elements.
That way, only <code>k</code> elements will be kept in heap order,
instead of the larger <code>m</code>.
The content of the heap will be the most frequent <code>k</code> elements.</p>

<p>If <code>k</code> is close to <code>m</code>,
then popping <code>k</code> elements is overkill.
It would be better to build a max-heap of <code>m - k</code> elements.
The elements excluded from the heap will be the most frequent <code>k</code> elements.</p>

<h3>Variable scope</h3>

<p>It's good to limit variables to the smallest possible scope.
For example here, the variable <code>i</code> is visible outside the loop,
but it's only used inside:</p>

<pre><code>unsigned i = 0;
while ( i &lt; k )
{  
    result.push_back(heap.front().value);
    pop_heap(heap.begin(), heap.end()-i);
    i++;
}
</code></pre>

<p>It would be better to rewrite this as a <code>for</code> loop,
that will make <code>i</code> visible only inside.</p>

<h3>Program organization</h3>

<p>Building the map of frequencies and then finding the <code>k</code> most frequent items are two independent steps.
It would be good to put these steps in separate private functions.</p>

<h3>Pair of values</h3>

<p>Instead your custom <code>Node</code>,
it would be better to use <code>std::pair</code>.</p>

<h3>C++</h3>

<p>I admit my C++ is pretty rusty,
I was not able to get this code to compile using <code>g++</code> or <code>g++ -std=c++11</code> or <code>g++ -std=c++14</code>.
I would like to think that it's possible to adjust this code so that it becomes trivial to compile.</p>

<p>Mainly I wanted to check if this part can be simplified:</p>

<blockquote>
<pre><code>int value{};
unsigned frequency{};

Node()
{

}
</code></pre>
</blockquote>

<p>To this:</p>

<pre><code>int value;
unsigned frequency;
</code></pre>

<p>Because an empty constructor and the <code>{}</code> after field declaration seem pointless,
and I would like to code to be as simple as possible,
with as little noise as possible.</p>
    </div>