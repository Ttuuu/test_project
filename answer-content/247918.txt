<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Variable naming</strong></p>
<p>Your variables should be named something more telling than <code>breakcount</code> , <code>breakcount1</code> and <code>breakcount2</code>. I suggest <code>breakcount_water</code> (and <code>_eyes</code> , <code>_physical</code>) instead.</p>
<p><strong>Simpler logic</strong></p>
<p>Instead of two variables for each kind of break (6 total), you can do with just one variable for each, starting at the max, and subtract <code>1</code> for each break. Then, you're done when you reach zero.
That lets you do the same thing with half as many (3) variables to keep track of.</p>
<p><strong>Don't repeat yourself</strong></p>
<pre><code>pygame.mixer.init()
pygame.mixer.music.load("water.mp3.mp3")
pygame.mixer.music.play(-1)
</code></pre>
<p>These three lines are identical each time you play music.
Create a function instead that takes the file name as input, and you can call <code>play_music("water.mp3.mp3")</code> which then executes these three lines in the function.</p>
<pre><code>def play_music(filename):
    #the three lines from above
</code></pre>
<p><strong>Stack abuse</strong></p>
<p>You're calling the <code>health()</code> function from inside itself, which means you never let it exit properly and if you did this a few thousand (maybe more) times, the program would crash due to stack overflow.
Instead, you should use a <code>while</code> loop that checks for the condition to loop again, to start over without calling the function another time. That way, you can also initialise your variables at the start of the function (before the while-loop) and you don't need any global variables, since the function has access to them inside its own scope.</p>
    </div>