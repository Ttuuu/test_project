<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The easy way to generate the output in the given format is to build the dynamic tree structure first, to maintain parent and child mappings as a tree. Then we have the structure we can transform the intermediate output to desired output</p>

<pre><code>from collections import defaultdict

all_folders = ["/desktop/folderA/fileA", "/desktop/folderA/folderX/file1", "/diskKH/folderA/fileA",
     "/desktop/folderB/folderC/fileX"]


def build_dynamic_trees(list_of_folders):
    tree = lambda: defaultdict(tree)
    root = tree()
    for folders in list_of_folders:
        dynamic_keys = ''
        for folder_name in folders.split("/"):
            if not folder_name:
                continue
            dynamic_keys += "['{}']".format(folder_name)
        exec('root' + dynamic_keys + ' = None')
    return root

res = to_desired(build_dynamic_trees(all_folders))['children']
</code></pre>

<p>As @Peilonrayz mentioned, you can use <code>to_desired</code> method to recursively transform the output.</p>
    </div>