<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>GenericList.h and GenericList.c</h2>
<p>Generally this is excellent code as long as it is a stack you want. It seems that what is created is really a generic stack implemented on a linked list rather than a generic linked list. If it was truly a generic linked list there would also be an append function and the delete node function would have to be smart enough to reset the next pointer of the previous node to the node being deleted next node.</p>
<p>Good things are that <code>GenericList.h</code> has include guards, <code>malloc()</code> is used properly and the return value is tested, I don't see any memory leaks.</p>
<p>A possible issue with <code>GenericList.h</code> is that all the includes that are required by <code>GenericList.c</code> are included in <code>GenericList.h</code> and those include files are not needed by <code>Test.c</code>.</p>
<p><code>GenericList.c</code> is well designed and implemented, all the functions are well designed and implemented.</p>
<h2>Test.c</h2>
<p>I realize that this is just a test file, but the same care that was given to <code>GenericList.h</code> and <code>GenericList.c</code> should be given to the test code as well.</p>
<p>The <code>main()</code> function is too complex (does too much) and should be broken up into multiple functions (each loop should probably be a function). As it stands it would be very difficult to expand the functionality of the test code if additional functionality was added to <code>GenericList.h</code> and <code>GenericList.c</code>.</p>
<p>Rather than return <code>0</code> or <code>1</code> for the program status, it would be better to include <code>&lt;stdlib.h&gt;</code> in main and utilize the <code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code> symbolic constants.</p>
<p>One other issue I see in <code>Test.c</code> is that it can use some blank lines for vertical spacing between the tests, this wouldn't be necessary if the tests were functions.</p>
    </div>