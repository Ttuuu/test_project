<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is an old question, but it has no answers yet, so what the heck.</p>

<p>I'll just focus on your <code>extract</code> metafunction. Consider a usage such as </p>

<pre><code>using T0 = extract&lt;0, int, int, int&gt;::type;
using T1 = extract&lt;1, int, int, int&gt;::type;
using T2 = extract&lt;2, int, int, int&gt;::type;
using T3 = extract&lt;1, int, int&gt;::type;
using T4 = extract&lt;2, void, int, int&gt;::type;
</code></pre>

<p>for example's sake.</p>

<pre><code>template &lt;std::size_t idx, class... Types&gt;
class extract
{
    static_assert(idx &lt; sizeof...(Types), "index out of bounds");

    template &lt;std::size_t i, std::size_t n, class... Rest&gt;
    struct extract_impl;
</code></pre>

<p>Why a nested type? As written, when I do <code>extract&lt;1, int, int, int&gt;::type</code>, you're going to instantiate <code>extract&lt;1, int, int, int&gt;</code>, and then <code>extract&lt;1, int, int, int&gt;::extract_impl&lt;0, 1, int, int, int&gt;</code>, and then <code>extract&lt;1, int, int, int&gt;::extract_impl&lt;1, 1, int, int&gt;</code>. None of these nested types can be reused for the computation of <code>extract&lt;2, int, int, int&gt;::type</code>. That's inefficiency.</p>

<hr>

<pre><code>    template &lt;std::size_t i, std::size_t n, class T, class... Rest&gt;
    struct extract_impl&lt;i, n, T, Rest...&gt;
    {
        using type = typename extract_impl&lt;i + 1, n, Rest...&gt;::type;
    };
</code></pre>

<p>I might prefer to write this as</p>

<pre><code>    template &lt;std::size_t i, std::size_t n, class T, class... Rest&gt;
    struct extract_impl&lt;i, n, T, Rest...&gt; : extract_impl&lt;i + 1, n, Rest...&gt; {};
</code></pre>

<p>I don't know whether it's actually faster/cheaper to compile an inheritance relationship than a whole new class, but this <em>feels</em> simpler, because we're not proliferating <code>type</code> members all over the place. There's just the one <code>type</code> member that we need, way down at the base of the class hierarchy.</p>

<hr>

<pre><code>    template &lt;std::size_t n, class T, class... Rest&gt;
    struct extract_impl&lt;n, n, T, Rest...&gt;
    {
        using type = T;
    };
public:
    using type = typename extract_impl&lt;0, idx, Types...&gt;::type;
};
</code></pre>

<p>Again I would use inheritance here; which requires that you un-nest the nested types (which I already said were a bad idea for efficiency anyway).</p>

<p>The other thing I would do is rework all your counters to count <em>down</em> instead of <em>up</em>. That way, you can maybe reuse some of your types as the counters approach zero.</p>

<p>And, stylistically, I prefer all my template parameters to be <code>CamelCase</code>, so I'm going to rename your lowercase <code>idx</code> to capital <code>K</code>.</p>

<hr>

<p>Putting it all together:</p>

<pre><code>using T0 = extract&lt;0, int, int, int&gt;::type;
using T1 = extract&lt;1, int, int, int&gt;::type;
using T2 = extract&lt;2, int, int, int&gt;::type;
using T3 = extract&lt;1, int, int&gt;::type;
using T4 = extract&lt;2, void, int, int&gt;::type;
</code></pre>

<p>With your original code, this instantiates the following class types:</p>

<pre><code>extract&lt;0, int, int, int&gt;::extract_impl&lt;0, 0, int, int, int&gt;
extract&lt;1, int, int, int&gt;::extract_impl&lt;0, 1, int, int, int&gt;
extract&lt;1, int, int, int&gt;::extract_impl&lt;1, 1, int, int&gt;
extract&lt;2, int, int, int&gt;::extract_impl&lt;0, 2, int, int, int&gt;
extract&lt;2, int, int, int&gt;::extract_impl&lt;1, 2, int, int&gt;
extract&lt;2, int, int, int&gt;::extract_impl&lt;2, 2, int&gt;
extract&lt;1, int, int&gt;::extract_impl&lt;0, 1, int, int&gt;
extract&lt;1, int, int&gt;::extract_impl&lt;1, 1, int&gt;
extract&lt;2, void, int, int&gt;::extract_impl&lt;0, 2, void, int, int&gt;
extract&lt;2, void, int, int&gt;::extract_impl&lt;1, 2, int, int&gt;
extract&lt;2, void, int, int&gt;::extract_impl&lt;2, 2, int&gt;
</code></pre>

<p>But if we write your code this way instead:</p>

<pre><code>template&lt;size_t K, class T, class... Ts&gt; struct extract_impl : extract_impl&lt;K-1, Ts...&gt; {};
template&lt;class T, class... Ts&gt; struct extract_impl&lt;0, T, Ts...&gt; { using type = T; };

template&lt;size_t K, class... Ts&gt;
struct extract {
    static_assert(K &lt; sizeof...(Ts), "index out of bounds");
    using type = typename extract_impl&lt;K, Ts...&gt;::type;
};
</code></pre>

<p>...well, number one, it's <em>crazy</em> shorter. In fact, we don't really need <code>extract_impl</code> at all! The only reason you might want to keep <code>extract</code> separate from <code>extract_impl</code> is that it gives you a decent place to hang the <code>static_assert</code>.</p>

<p>Anyway, with this version, our example needs only these instantiations:</p>

<pre><code>extract_impl&lt;0, int, int, int&gt;
extract_impl&lt;1, int, int, int&gt;
extract_impl&lt;0, int, int&gt;
extract_impl&lt;2, int, int, int&gt;
extract_impl&lt;1, int, int&gt;
extract_impl&lt;0, int&gt;
extract_impl&lt;2, void, int, int&gt;
</code></pre>

<p>Seven instantiations, versus 11 instantiations in your case.</p>

<p>Hope this helps (belatedly)!</p>
    </div>