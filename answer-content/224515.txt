<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd like to advocate for a more functional programming style. We all know object orientation can provide clarity over procedural programming, but if you can replace for loops and if statements with Select and Where? I'd say that's even better.</p>

<p>Here's how:</p>



<pre class="lang-cs prettyprint-override"><code>public static int GetMoneySpent(int budget, int[] keyboards, int[] drives)
{
    var affordableCombinations = keyboards
        .SelectMany(keyboard =&gt; drives
            .Select(drive =&gt; keyboard + drive))
        .Where(cost =&gt; cost &lt;= budget);

    return affordableCombinations.Any()
        ? affordableCombinations.Max()
        : -1;
}
</code></pre>

<hr>

<p>Is this as efficient as your solution? Not in terms of CPU cycles, no. In terms of what the person reading the code must do, in order to understand the desired behavior? I'll argue yes.</p>

<p>If you believe you'll see large performance gains by filtering out keyboards and drives that exceed the budget on their own, before adding any prices together, there's a concise way to do that with LINQ also:</p>

<pre class="lang-cs prettyprint-override"><code>public static int GetMoneySpent(int budget, int[] keyboards, int[] drives)
{
    Func&lt;int, bool&gt; affordable = cost =&gt; cost &lt; budget;

    var affordableCombinations = keyboards
        .Where(affordable)
        .SelectMany(keyboard =&gt; drives
            .Where(affordable)
            .Select(drive =&gt; keyboard + drive))
        .Where(affordable);

    return affordableCombinations.Any()
        ? affordableCombinations.Max()
        : -1;
}
</code></pre>

<hr>

<p>Is this as efficient as a solution involving manual iteration can be? Again, no. I think the approach in Henrik's answer is about the best you'll do. But this is easily readable, and probably efficient <em>enough</em>.</p>
    </div>