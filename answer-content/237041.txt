<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>feedback on speed and optimization</p>
</blockquote>

<p><strong>O(n) to O(1).</strong></p>

<p>Consider changing <code>appendNode()</code> from O(n) to O(1).</p>

<p>Rather than have a link-list point to the head, let the LL point to the tail <strong>and</strong> the tail point to the head.</p>

<p>To append to the end of the list or to the front is a similar O(1) operation.</p>

<pre><code>// add to the end or front of the LL
void addNode(node_t** ref, int data, bool end) {
  node_t* ptr = malloc(sizeof *ptr);
  if (ptr == NULL) ...
  ptr-&gt;val = data;
  if (*ref == NULL) {
    *ref = ptr;
    ptr-&gt;next = ptr;
  } else {
    ptr-&gt;next = (*ref)-&gt;next;
    (*ref)-&gt;next = ptr;
    if (end) {
      *ref = ptr;
    }
  }
}
</code></pre>

<p>Functions that walk the list need to look for a repeat of the <code>(*ref)-&gt;next</code> rather than <code>NULL</code> to know when to stop.</p>

<p>Code can pop off the front of the list in O(1).  Popping off the end of the list remains O(n).</p>

<hr>

<p>This avoids a huge O(n) on one of the addition functions without the cost of a head <strong>and</strong> tail pointer.  It provides for better distribution of activity.  </p>

<p>I find this approach useful when code may add to the front, add to the end and remove from just one end.</p>

<hr>

<p><strong>Apply rather than just print</strong></p>

<p>Consider a function the passes in the LL, a function pointer and state and returns error status.</p>

<pre><code>int LL_apply(node_t *ref, int (*f)(void *state, node_t *node), void *state) {
  // pseudo code
  for each `node *` in LL
    int retval = f(state, node);
    if (retval) return retval;
  }
  return 0;
}
</code></pre>

<p>Now the print can be had with a supporting helper function <code>f</code>.  </p>

<p>All sorts of functions can be <em>applied</em>: search, find max, average, ..., even a simple count.</p>
    </div>