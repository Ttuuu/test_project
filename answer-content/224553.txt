<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Specific suggestions:</p>

<ol>
<li>You never use the return value of <code>flyby</code>, so it might as well <code>return None</code> or <code>raise InvalidCoordinateError()</code>. Raising exceptions is generally the most useful way to provide information for users to act on, because it tells them not just what went wrong ("Invalid coordinate!") but <em>where</em> because of the stack trace.</li>
<li>Ditto for <code>return response.text</code> - it would be more useful as something like <code>raise UnhandledResponseError(response.text)</code>.</li>
<li>The API key should be configuration, not code. In general such keys should not be anywhere in your repository, for a host of reasons which should be spelled out in the license. This could include rate limiting, whether you are even allowed to share the key, and which groups of people it can be used by (for example, excluding commercial enterprises).</li>
<li><code>dates_diff % avg_time_delta</code> doesn't actually do anything with the result of the calculation, so that line can be deleted.</li>
<li>It is nice that you have test cases, but it would be better to put those in a real <code>TestCase</code> class and being explicit about what they should do. This will show that the code is hard to test because the main side effect is simply printing, and testing <code>print</code> statements is much hairier than testing return values. It seems a useful return value would be the tuple <code>(predicted, sd)</code> or an object.</li>
</ol>

<p>General suggestions:</p>

<ol>
<li><a href="https://github.com/ambv/black" rel="nofollow noreferrer"><code>black</code></a> can automatically format your code to be more idiomatic.</li>
<li><a href="https://github.com/timothycrosley/isort" rel="nofollow noreferrer"><code>isort</code></a> can group and sort your imports automatically.</li>
<li><p><a href="https://gitlab.com/pycqa/flake8" rel="nofollow noreferrer"><code>flake8</code></a> with a strict complexity limit will give you more hints to write idiomatic Python:</p>

<pre><code>[flake8]
max-complexity = 4
ignore = W503,E203
</code></pre>

<p>(That limit is not absolute by any means, but it's worth thinking hard whether you can keep it low whenever validation fails. For example, I'm working with a team on an application since a year now, and our complexity limit is up to 7 in only one place. Conversely, on an ugly old piece of code I wrote without static analysis support I recently found the complexity reaches 87!)</p></li>
<li><p>I would then recommend adding <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a> everywhere and validating them using a strict <a href="https://github.com/python/mypy" rel="nofollow noreferrer"><code>mypy</code></a> configuration:</p>

<pre><code>[mypy]
check_untyped_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
</code></pre></li>
</ol>
    </div>