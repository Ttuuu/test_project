<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is not much to add to the other answers. Your code is well written and easy to understand, but as a brute force algorithm it has its limitation in real world use - for larger data sets at least.</p>

<hr>

<p>The name should be <code>MaxPairProduct</code> (PascalCase) instead of <code>maxPairProduct</code>.</p>

<hr>

<p>There is maybe an issue (that applies to the other answers as well):</p>

<p>For the dataset:</p>

<pre><code>int[] data = { 1, 2, 3 }
</code></pre>

<p>it returns <code>3</code>, but it should return <code>-1</code>, if the multiplier, multiplicand and product must be distinct entries in the data set? The dataset <code>{ 1, 2, 3, 3 }</code> should return <code>3</code>.</p>

<p>Similar</p>

<pre><code>int[] data = { 1, 2, 2, 3, 4, 5 };
</code></pre>

<p>should return <code>4</code> but returns <code>5</code>.</p>

<p>The above is somehow inconsistent with:</p>

<pre><code>int[] data = { 2, 3, 4 };
</code></pre>

<p>that correctly results in <code>-1</code>.</p>

<hr>

<p>Below is an implementation that handles the above problem, and also prevent a possible overflow when multiplying:</p>

<pre><code>static int MaxPairProduct(int[] a)
{
  Array.Sort(a);

  int product = -1;
  int multiplier = -1;
  int multiplicand;

  for (int i = a.Length - 1; i &gt; 1; --i)
  {
    if (a[i] == product) continue;
    product = a[i];

    for (int j = 0; j &lt; i; ++j)
    {
      if (a[j] == multiplier) continue;
      multiplier = a[j];

      if (multiplier == 0) continue;
      multiplicand = product / multiplier;
      if (product % multiplier == 0 &amp;&amp; Array.IndexOf(a, multiplicand, j + 1, i - j - 1) &gt; j)
      {
        return product;
      }
      if (multiplicand &lt; multiplier)
        break;
    }
  }

  return -1;
}
</code></pre>
    </div>