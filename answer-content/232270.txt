<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the place to start is the function <code>boardFunc</code>. Until you get comfortable with "functional programming" and dependency inversion, you should probably never write a function that takes an argument telling it what to do. We can rewrite that function as </p>

<pre class="lang-py prettyprint-override"><code># Set up the player board for a new game. (100 "0"s)
def boardReset():
    global board
    for x in enemyBoard:
        board.append("0")

# Print the player board. (10 rows of 10)
def boardPrint():
    global board
    for x in range(10):
        print(" ".join(board[(x * 10):((x + 1) * 10)]))

# Update the player board based on a shot
def boardUpdate(shot):
    global board
    if enemyBoard[((shot[0] - 1) + (shot[1] - 1) * 10)] == "X":  # If the shot location is an X on the enemy board, mark a hit on the player board
        if board[((shot[0] - 1) + (shot[1] - 1) * 10)] != "X":
            board[((shot[0] - 1) + (shot[1] - 1) * 10)] = "X"
            boardInfoRemover(shot)
            global hits
            hits += 1
    else:
        board[((shot[0] - 1) + (shot[1] - 1) * 10)] = "M"  # If the shot location is not an X on the enemy board, mark a miss on the player board
</code></pre>

<p>I'm testing your code in Jupyter Notebooks, where the <code>while True: ... quit()</code> pattern doesn't work right. We can make it a little more explicit, reliable, and portable by using a mutable variable to break the loop:</p>

<pre class="lang-py prettyprint-override"><code>keepPlaying = True
while keepPlaying:
    boardReset()
    while hits &lt; 15:  # Each board has 15 ship spots, when all are hit it breaks out of this loop
        boardPrint()
        boardUpdate(inputCleaner())
        sunkChecker()
    boardPrint("print", 0)
    keepPlaying = "y" == input("YOU WON!! Would you like to play again? (y/n):")
</code></pre>

<p>In fact, you seem a bit trigger-happy with the <code>while</code> loops in general. If you can use a <code>for</code> loop, that's preferable. When you want to loop over a range of numbers, you can use <code>range</code>, but when you're working with an existing list you're better off looping over <em>the list itself</em> (or a derivation of the list). Even better is to avoid a loop altogether. While you're at it, try to work <em>with</em> the data structures python provides!<br>
(I was able to confirm that your <code>boardInfoRemover</code> function was working for hits in the tenth row or column, but I can't explain how.)</p>

<pre class="lang-py prettyprint-override"><code>#If a shot is on a ship, it removes that shot from the boardInfo list
def boardInfoRemover(hit):
    #pprint.pprint(hit)
    global boardInfo
    #Checks to see which shot location it was, and removes it from the boardInfo list
    for i, boardRow in enumerate(boardInfo):
        for j, value in enumerate(boardRow):
            if value == hit:
                del boardInfo[i][j]
</code></pre>

<p>Looking at <code>boardReset</code>, does it actually reset the board, or does it just assume it's already empty, and then append? I was just saying that you should use fewer loops, so now's a good time to introduce list comprehensions. (The other option would be to map with a lambda, build a const function, but comprehension are a good tool.)</p>

<pre class="lang-py prettyprint-override"><code># Set up the player board for a new game. (100 "0"s)
def boardReset():
    global board
    board = ["0" for _ in enemyBoard]
</code></pre>

<p>The <code>inputCleaner</code> function is large, but without bringing in a new library to do input cleaning for you, there may not be a way to make it <em>shorter</em>. What we can do is make it's flow more clear (linear), not rely on exceptions, and <em>return 0-indexed coordinates</em>. In particular, we can make it recursive, avoiding a lot of the looping behavior. We loose the part where the user only has to re-enter one of the numbers if they're out of range, but that doesn't seem like a big loss.</p>

<pre class="lang-py prettyprint-override"><code>#Takes and cleans the input to prevent errors
def inputCleaner():
    failures = []
    coordinates = None # be careful about None, but it'll do for now.
    input_list = input("Were do you want to shoot your shot? (num1 num2):")
    if 2 != len(input_list):
        failures.append("Please enter exactly two numbers.")
    if any(not coordinate.isdigit() for coordinate in list_input):
        failures.append("Please use only numbers.")
    else:
        coordinates = map(int, input_list)
        local_names = ["first", "second"]
        for i, c in enumerate(coordinates):
            if 10 &lt; c or 1 &gt; c:
                failures.append("Please make sure that your {} number is at least 1 and no more than 10."
                               .format(local_names[i]))
        if not failures:
            return [c - 1 for c in coordinates]
    # If we get here, failures will not be empty.
    failures.append("Enter you shot location again.")
    for f in failures:
        print(failure)
    return inputCleaner()
</code></pre>

<p>Again, use the tools the language gives you to simplify. This time the <code>boardInfoInterp</code> function, because we need to convert it to match the 0-indexing we want to use everywhere. We want to use 0-indexing so that we can do list-lookup.</p>

<pre class="lang-py prettyprint-override"><code>#Turn the line input into a list of lists of pairs (which are lists) of 0-indexed ints
def boardInfoInterp(boardInfo):
    return [
        [
            [int(coordinate) - 1 for coordinate in pair.split()]
            for pair
            in ship.split(",")
        ]
        for ship
        in boardInfo.split(";")
    ]
</code></pre>

<p>Other things we should be doing: </p>

<ul>
<li>Use bools</li>
<li>Store the board as a list of lists.</li>
<li>Use arguments and return values instead of global variables.</li>
</ul>

<p>But getting this to the point where there's <em>no</em> global state would amount to a complete rewrite. If you want to go that route, you'll need to think about how to best represent the <em>game state</em> as an abstract data structure. You'd then write functions like</p>

<pre><code>newGame: ()-&gt;GameState
playerMove: (GameState, PlayerMove)-&gt;GameState
display: GameState-&gt;print
</code></pre>
    </div>