<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>to come up a generic C linked list to store data</p>
</blockquote>

<p><strong>Short-coming in   <em>generic</em>.</strong></p>

<p>Code requires <code>data</code> to not be <code>NULL</code> due to <code>assert(... data != NULL);</code></p>

<p>The legal values in <code>void *data</code> should be determined in the member functions <code>compare, copy, allocate</code>, etc., not in <code>add_data()</code>, etc.</p>

<p><strong>Name space</strong></p>

<p>Could uses global names like <code>struct node, get(), find(), is_empty()</code>, ...  This is certain to collide with other code.</p>

<p>Instead consider all <em>sll</em> items to begin with <code>SSL_</code> like <code>struct SSL_node, SSL_get(), SSL_find(), SSL_is_empty()</code>.</p>

<p><strong>Use <code>const *</code></strong></p>

<p>Functions like <code>is_empty(SLList* list);</code> which do not alter <code>* list</code> could use <code>is_empty(const SLList* list)</code> to 1) expand functionality (Allows const calls), 2) convey functionality better 3) Allow for some optimizations not otherwise recognized by a compiler.</p>

<p><strong>Do not return internal workings</strong></p>

<p><code>Node *find(SLList* list, void* data);</code> should return the data, not the internal structure.  Calling code has no business working with <code>Node</code> members.</p>

<p><strong>Hide information</strong></p>

<p><code>#include "node.h"</code> is not needed in <code>sll.h</code> as <code>struct sllist {
    Node*   head;
    Node*   tail;
    int     _num_nodes;
    ...
};</code> is not needed there.  Hide the implementation from the caller.  Example: <code>stdio</code> functions have <code>FILE *</code>, yet good user code does not "know" <code>FILE</code>.</p>

<p><strong>Search on key</strong></p>

<p>Instead of only <code>find(SLList* list, void* data);</code>, consider another search based on a <em>key</em> like <code>find_key(SLList* list, void* key, ...);</code> that uses some the passed in parameters to form a search.  Perhaps pass in a <code>key, data</code> compare function?</p>
    </div>