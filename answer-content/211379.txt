<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>API</h3>

<p>I don't like that <code>+</code> and <code>*</code> operators return <code>null</code> on mismatched parameters: that's exactly the kind of thing that will obscure bugs and causes crashes 'down the line'. I'd have these throwing an exception explaining why the method failed (e.g. "Could not multiply matrices because first.M and second.N did not match"). This would crash violently as soon as the problem is detected, meaning you are close to the problem, and would tell you what the problem is. The same goes for <code>Reverse</code>.</p>

<p>I also don't understand why you have methods returning <code>0</code> on success, with <code>-1</code> being a seemingly arbitrary alternative. If 'success' and 'failure' are the only conditions, then a <code>boolean</code> would do (which makes testing cleaner), or else use a dedicate return type or enum. I'm also not sure that <code>stdout</code> is a good name for the success flags. <code>if (stdout != 0)</code> is pretty cryptic.</p>

<p>It's great that you have inline documentation on some of your methods, but they should really document the 'return <code>null</code> on failure' conditions, and even <code>N</code> and <code>M</code> (and especially the random constructor) could do with documentation. I'd definitely want documentation on the <code>Matrix(double[,] data)</code> constructor, as it is presently unclear whether <code>data</code> is copied or not.</p>

<h3><code>CompareTo</code></h3>

<p>I don't like that <code>CompareTo</code> doesn't define an ordering: you are performing equality here, so implementing <code>IEquatable&lt;Matrix&gt;</code> would probably make more sense.</p>

<h3><code>Clone</code></h3>

<p>I'd suggest providing a <code>Clone</code> method that returns a copy of the matrix, and provide an explicit implementation for <code>ICloneable.Clone</code>. Copying a matrix requires effort or a cast at the moment, neither of which make programmers happy.</p>

<p>At the very least, it would remove code like <code>u = (Matrix)a.Clone();</code> from your own methods, which just feels slightly unclean.</p>

<h3><code>Transpose</code></h3>

<p>These methods currently assume a square matrix, and will both crash on a non-square matrix. I'm not sure what the inplace version should do, but the other should presumably produce an <code>M*N</code> matrix.</p>

<h3>Misc</h3>

<ul>
<li><p>In <code>operator *</code>, I wouldn't use <code>m</code> to count up to <code>M</code>: that's just asking for someone to make a mistake, and makes the code harder to read quickly.</p></li>
<li><p>Personally I'd write the 'random' constructor as 2 constructors, and I'd replace the 'diagonal' fielded constructor with a static <code>Identity(int)</code> method (or at least rename the <code>diagonal</code> to <code>identity</code>, which is more explicit): it's not clear what <code>p = new Matrix(a.N, true)</code> does at the moment.</p></li>
<li><p>Is there a particular reason you use <code>GetUpperBound(i) + 1</code> rather than <code>GetLength(i)</code> to determine <code>N</code> and <code>M</code>?</p></li>
<li><p>I'm not qualified to comment on the quality of the numerical methods, but I'm a bit suspicious that you compare <code>&lt; Double.Epsilon</code> and <code>&gt; Double.Epsilon</code>, but never allow equality (of what is a perfectly valid value).</p></li>
<li><p>It seems odd to provide a public <code>Reverse(out Matrix)</code> method but no in-place equivalent given you provide both for <code>Transpose</code>. I also wonder why where is no <code>operator -</code> to go with <code>operator +</code>.</p></li>
</ul>
    </div>