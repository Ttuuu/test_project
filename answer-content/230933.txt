<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's been an old question, just thought to add an alternative to a name-with-counter solution already offered above.</p>

<h1>ID using CRC32</h1>

<h2>ID based on data</h2>

<p>Usually when I need an ID that is based on user's full name or some other type of data, I'd do something like this:</p>

<h3>php example</h3>

<pre class="lang-php prettyprint-override"><code>class myUtils {
   static public function genID( $firstName, $lastName ) {
      $strDesc = $firstName . "-" . $lastName;
      return "".dechex(crc32($strDesc));
   }
}
</code></pre>

<p>This will return an 8-character long string representation of a 32-bit integer, for example: <code>a072c35b</code></p>

<p>This is then simple and fast to use:</p>

<pre class="lang-php prettyprint-override"><code>$id = myUtils::genID("First name","Last name");
</code></pre>

<p>This way you can generate ID that represents bunch of data grouped together, for example instead of just providing first and last name, you can add his passport number into the mix etc. to generate ID that is unique to that user. </p>

<p>However, if you just require a unique ID number, there's even simpler way:</p>

<h2>Just a Unique ID</h2>

<p>If I need to generate a unique ID that is just that - unique, I'd go for something like this:</p>

<h3>php example</h3>

<pre class="lang-php prettyprint-override"><code>class myUtils {
   static public function uid_32bit() {
      return "".dechex(crc32(date("YdmHis").bin2hex(openssl_random_pseudo_bytes(10))));
   }
   static public function uid_64bit() {
      return self::uid_32bit().self::uid_32bit();
   }
}
</code></pre>

<p>This way I could get 8-character long unique string - representing 32-bit integer:</p>

<pre class="lang-php prettyprint-override"><code>$id = myUtils::uid_32bit();
</code></pre>

<p>or, I could get 16-character long unique string, representing 64-bit integer value:</p>

<pre class="lang-php prettyprint-override"><code>$id = myUtils::uid_64bit();
</code></pre>

<p>Main advantage of this approach is that is easily read by humans, as it contains only lowercase letters (a...f) and numbers (0...9), and can be used for instance invoice unique numbers that are shown to user, or some other client-facing output, without revealing any information about how you have structured your data in the back-end.</p>
    </div>