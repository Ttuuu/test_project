<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd say that this code has the right amount of verbosity - not too terse, not too wordy. It's very readable, with one exception I'll mention below. In order to assess the performance, I'd probably need to implement it myself a couple different ways. I don't doubt it could be better, but don't have any great suggestions there. (Although, a depth-first search might use less memory at any one time, which might improve the speed, too. I'm not really sure.) I don't find the code to be repetitive, either.</p>
<p>Here are some specific things I'd change:</p>
<h1>Use Named Types When Possible</h1>
<p>I have mixed feelings about <code>tuple</code>. In general, I find it makes code harder to read and understand. As a return value, it can be very useful, but I don't think they should be passed around when a named type would be much clearer. For one thing, what is the ordering of the <code>tuple</code> in your code? I can't tell at a glance because all the members are the same type. Is it <code>&lt;x,y,P&gt;</code>? <code>&lt;P,x,y&gt;</code>? Something else? Just make a <code>struct</code> like this:</p>
<pre><code>struct cow {
    int x;
    int y;
    int power;
};
</code></pre>
<p>This has knock-on effects for other types. Instead of:</p>
<pre><code>vector&lt;tuple&lt;int, int, int&gt;&gt; cows;
</code></pre>
<p>you'd get:</p>
<pre><code>vector&lt;cow&gt; cows;
</code></pre>
<p>That's much clearer and much easier to type.</p>
<h1>Use Functions</h1>
<p>You have put helper functionality into separate functions, which is great. I think you need to do the same thing with the main functionality, too. I'd have something like this for your <code>main()</code> function:</p>
<pre><code>int main() {
    vector&lt;cow&gt; cows;
    read_cows_from_file(cows, "moocast.in");
    
    unordered_map&lt;int, vector&lt;int&gt;&gt; cow_graph;
    create_cow_graph(cows, cow_graph);
    
    int highest = find_longest_broadcast(cows, cow_graph);
    
    write_highest_to_file(highest, "moocast.out");
}
</code></pre>
<p>This makes it very clear and easy to understand. Each of the functions would just contain the code that's currently in each section of <code>main()</code>.</p>
<h1>Improve Your Naming</h1>
<p>Most of your naming is pretty good. I see 2 things that could be improved:</p>
<ol>
<li>In your <code>main()</code> function, the variable <code>n</code> should have a better name. While <code>n</code> is commonly used to be the "number of something" to act on, it's better to name it <code>num_cows</code> or whatever. If you ever have to count 2 different things in the same function, you start resorting to less and less useful names like <code>n2</code> or <code>m</code> and it quickly falls apart. So just naming it <code>num_&lt;whatever&gt;</code> is better.</li>
<li>Also in <code>main()</code> you have a variable which is a <code>std::stack</code> that you have named <code>queue</code>. But there is a <code>std::queue</code> type already! Don't name a variable something it is not. It's a <code>stack</code> and you're using it as such. Just name it <code>stack</code>. Or better yet, name it <code>cow_stack</code> or <code>current_path</code> or something more meaningful. But whatever you name it, don't lie!</li>
</ol>
<h1>Comparison With Proposed Solution</h1>
<p>In the comments I was asked to compare this solution to the proposed solution from the site. <a href="http://usaco.org/current/data/sol_moocast_silver_dec16.html" rel="nofollow noreferrer">Here's their Java solution</a>. And here are my thoughts on it:</p>
<p>Your solution look about as complex as theirs to me.</p>
<ul>
<li>You both make a graph of who can talk to whom</li>
<li>then you both traverse that graph to find the longest path in it</li>
</ul>
<p>There are 2 main differences between your solutions:</p>
<ol>
<li>You use a breadth-first traversal, whereas they use depth-first.</li>
<li>Theirs uses a recursive method to do the traversal whereas you build your own stack and do it in a loop.</li>
</ol>
<p>Theirs uses less memory, which is nice, but because its recursive they run the risk of running out of stack space for very long paths. I prefer your non-recursive solution because it avoids that problem.</p>
    </div>