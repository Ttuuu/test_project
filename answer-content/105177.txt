<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p><strong>Use <code>Map</code> instead of <code>HashMap</code> for variable/return type declaration</strong></p>

<pre><code>private static HashMap&lt;Integer, int[]&gt; sgtin96_company_prefix_len_partitions;

public static HashMap&lt;String, String&gt; decode(String sgtin96_epc) {
    // ...
    HashMap&lt;String, String&gt; rv = new HashMap&lt;String, String&gt;();
    // ...
    return rv;
}
</code></pre>

<p>These can be declared as <code>Map</code> instead of <code>HashMap</code>, as all the users/callers of the variable and method only need to operate on the <code>Map</code> interface, instead of knowing that it's a <code>HashMap</code> implementation.</p></li>
<li><p><strong>Naming convention</strong></p>

<p>Interestingly, only <code>BIN</code> and <code>HEX</code> are provided using Java's naming convention for <code>static final</code> (small note here, but I think <code>static final</code> is more often used...) fields, and the rest are not. I'm not sure if there's a peculiar coding style you are adhering to here, but further standardization may be desired. :)</p>

<p>Java's naming convention is also <code>camelCase</code> for fields, rather than <code>snake_case</code> as you have used here, but at least you are using this style consistently...</p></li>
<li><p><strong>Zero-padding</strong></p>

<p>Instead of always prepending a <code>zeroes</code> (note: small <code>z</code>) to the input <code>String</code> even when it is long enough, you may want to simplify the step here as such:</p>

<pre><code>private static String zeroFill(String s, int n) {
    return s.length() &gt;= n ? s
            : new String(new char[n - s.length()]).replace('\0', '0') + s;
}
</code></pre>

<p>Note that <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#replace-char-char-" rel="nofollow"><code>replace(char, char)</code></a> is also used here, as it will likely offer better performance over the <code>CharSequence</code>/<code>Pattern</code>-based implementation.</p></li>
<li><p><strong>Auto-boxing</strong></p>

<p>There are a few places where the use of the <code>Integer</code> wrapper class can simply be done with the primitive <code>int</code> equivalent. Again, some form of consistency here will be preferred, partly to aid in readability, and partly also to eliminate any possible chances of <code>NullPointerException</code> when you (accidentally?) create <code>null</code> instances of <code>Integer</code>.</p></li>
<li><p><strong>Better modeling class...?</strong></p>

<p>Given the various places where you are accessing the array elements, I wonder if using better modeling classes may be of some help here to improve the readability and to standardize the usage of the array elements. For example (reducing empty lines here solely to make it fit into the box without the scrollbars):</p>

<pre><code>enum Partition {
    SIX(20, 24), SEVEN(24, 20), EIGHT(27, 17), NINE(30, 14), 
    TEN(34, 10), ELEVEN(37, 7), TWELVE(40, 4);

    private final int companyPrefixBits;
    private final int itemReferenceIndicatorBits;
    private Partition(int companyPrefixBits, int itemReferenceIndicatorBits) {
        this.companyPrefixBits = companyPrefixBits;
        this.itemReferenceIndicatorBits = itemReferenceIndicatorBits;
    }
    public int getCompanyPrefixLength() {
        return ordinal() + 6;
    }            
    public int getPartitionValue() {
        return ordinal();
    }
    public int getCompanyPrefixBits() {
        return companyPrefixBits;
    }
    public int getItemReferenceIndicatorBits() {
        return itemReferenceIndicatorBits;
    }
    public static Partition getByCompanyPrefixLength(int companyPrefixLength) {
        if (companyPrefixLength &lt; 6 || companyPrefixLength &gt; 12) {
            throw new IllegalArgumentException("Invalid company prefix length."); 
            // or return null?
        }
        return values()[companyPrefixLength - 6];
    }
    public static Partition getByPartitionValue(int partitionValue) {
        if (partitionValue &lt; 0 || partitionValue &gt; 6) {
            throw new IllegalArgumentException("Invalid partition value.");
        }
        return values()[6 - partitionValue];
    }            
}
</code></pre>

<p>With this, you eliminate the reliance on accessing the array elements, and you get the bonus of calling the values as they are 'known', e.g. <code>Partition.getCompanyPrefixLength()</code> instead of <code>partitionValues[0]</code>. The two <code>public static</code> methods above simply replaces the current <code>getPartitionsByCompanyPrefixLengthInDigits(int)</code> and <code>getPartitionsByPartitionValue(int)</code> methods.</p></li>
</ol>
    </div>