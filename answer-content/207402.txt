<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You might want to turn on automatic code formatting in your editor.
In Eclipse this can be found under Window&gt;Preferences&gt;Java&gt;Editor&gt;Save actions.
Consistent formatting will make your code more readable for you and other specially people.</p>

<p>There's also an unused variable in the code. A Java IDE should be able to highlight problems like that, so you can easily fix them. Unused code shouldn't be kept around as it's just confusing to the reader.</p>

<p>It's a bit unusual to use meta programming in normal application code but I think it's great that you learn and explore these options.
You find many discussions on the problems with reflections and ways to avoid it on this site, eg., <a href="https://softwareengineering.stackexchange.com/questions/193526/is-it-a-bad-habit-to-overuse-reflection">here</a> and <a href="https://softwareengineering.stackexchange.com/questions/358847/why-is-it-a-bad-idea-to-create-a-generic-setter-and-getter-with-reflection">here</a>.</p>

<p>Your methods and variables sometimes could have more descriptive names.
For example <code>count</code> is used as a counter to set the indices in the UI text but is also used in the exit condition of the while loop. This way you have to read <code>menuView()</code> to understand the while loop.</p>

<p>I've reworked the code a bit to use the stream api and added a comment here and there:</p>

<pre><code>public class Menu2 {

    // deleted comment that didn't match anything
    // deleted unused variable
    private int selection; // ints are always implicitly initialized with 0
    private String menuDisplay;
    private List&lt;Method&gt; callableMethods;
    private int quitOptionIndex;

    /**
     * creates menu to navigate directory list
     * 
     */
    public Menu2(Object o) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        callableMethods = findCallableMethods(o.getClass());
        menuDisplay = buildMenuMessage();

        do {
            selection = showMenuView();
            if (selection &gt; 0 &amp;&amp; selection &lt; quitOptionIndex) { // guard against IndexOutOfBoundException
                callableMethods.get(selection - 1).invoke(o);
            }
        } while (selection != quitOptionIndex);
    }

    private List&lt;Method&gt; findCallableMethods(Class&lt;? extends Object&gt; klass) {
        return Arrays.stream(klass.getDeclaredMethods()) // convert array to stream
                .filter(method -&gt; method.getParameterCount() == 0 &amp;&amp; !method.getName().equalsIgnoreCase("iterator")
                        &amp;&amp; !method.getName().equalsIgnoreCase("tostring")) // only select methods the user can call
                .collect(Collectors.toList()); // collect to list
    }

    private String buildMenuMessage() {
        StringBuilder sb = new StringBuilder(); // using string concatination in a loop might give you poor performance, since the list will never be that long it's probably overkill here
        for (int i = 0; i &lt; callableMethods.size(); i++) {
            sb = sb.append(i + 1).append(". ").append(callableMethods.get(i).getName()).append(System.lineSeparator());
        }
        quitOptionIndex = callableMethods.size() + 1;
        return sb.append(quitOptionIndex + ". " + "Quit").toString();
    }

    public int showMenuView() {
        String choice = JOptionPane.showInputDialog(menuDisplay);
        return Integer.parseInt(choice);
    }

}
</code></pre>

<p>If it's okay for you to have the user pick from a dropdown then you could get rid of the index by having the UI selection options backed by an array of methods:</p>

<pre><code>public class Menu2 {

    class SelectableMethod {

        private Method method;

        public SelectableMethod(Method method) {
            this.method = method;
        }

        public void invoke(Object obj)
                throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
            method.invoke(obj);
        }

        // JOptionPane calls this to get the strings to display in the dropdown
        @Override
        public String toString() {
            return method.getName();
        }

    }

    private List&lt;SelectableMethod&gt; callableMethods;

    /**
     * creates menu to navigate directory list
     * 
     */
    public Menu2(Object o) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        callableMethods = findCallableMethods(o.getClass());

        while (true) {
            showMenuView().invoke(o);
        }
    }

    private List&lt;SelectableMethod&gt; findCallableMethods(Class&lt;? extends Object&gt; klass) {
        return Arrays.stream(klass.getDeclaredMethods()) // convert array to stream
                .filter(method -&gt; method.getParameterCount() == 0 &amp;&amp; !method.getName().equalsIgnoreCase("iterator")
                        &amp;&amp; !method.getName().equalsIgnoreCase("tostring")) // only select methods the user can call
                .map(SelectableMethod::new)
                .collect(Collectors.toList()); // collect to list
    }

    public SelectableMethod showMenuView() {
        // since the selectable items are backed by the Methods we don't need the index anymore
        return (SelectableMethod) JOptionPane.showInputDialog(null, "Choose a method", "Choose a method",
                JOptionPane.QUESTION_MESSAGE, null,
                callableMethods.toArray(new Object[callableMethods.size()]), 0);
    }

}
</code></pre>

<p>Edit: I sadly don't have any more time right now but have a look at this implementation of the <a href="https://en.wikipedia.org/wiki/Command_pattern#Java_8" rel="nofollow noreferrer">strategy pattern</a>.
Instead of implementing the methods that your user should be able to call on the Dir, save them in a Map or List inside the Dir, as lambdas (anonymous functions).
Then <code>Menu2</code> can then get them like it currently does with <code>klass.getDeclaredMethods()</code> by iterating over the values of the collection.</p>

<p>Hope this helps and sends you in the right direction.</p>
    </div>