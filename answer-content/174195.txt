<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Apart from what the others have written, in C++ the use of C-style arrays is discouraged. It's thus preferable to use <code>std::array</code> instead as the type for your <code>criba</code> variable (since you know the size at compile time - otherwise <code>std::vector</code> is the equivalent). You can use it exactly the same way you do now, except you don't need to use C functions like <code>memset()</code> - you can use <a href="http://www.cplusplus.com/reference/algorithm/fill_n/" rel="nofollow noreferrer">fill_n()</a> instead. Using a standard library container also enables you to use all the algorithms of the standard library, which may make your life easier and your code cleaner.</p>

<p>Also, for the array of bools, <code>std::bitset</code> might seem like a natural choice. It's syntactically nice to use it in your case, since setting all bits to true would be just <code>criba.set()</code>, and printing all the values is as simple as <code>std::cout &lt;&lt; criba</code>. That said, using <code>std::array&lt;bool&gt;</code> (but not <code>std::vector&lt;bool&gt;</code>) might be faster since bitset is not that good if you call <code>operator[]</code> and read/write individual bits' values frequently - see <a href="https://stackoverflow.com/questions/30295174/what-is-the-performance-of-stdbitset">this thread</a>. I don't think performance is going to be an issue in your case though. On the other hand, bitset stores bool value as 1 bit, so your data is going to take roughly 8 times less space as bitset than as bool array - it's going to make a big difference if your data gets allocated on stack. Another advantage of <code>std::bitset</code> is that its constructor is <code>constexpr</code>, so allocating it costs you nothing time-wise at runtime.</p>

<p>The bottom line is: consider using <code>std::array</code> or <code>std::bitset</code> for your <code>criba</code> variable weighing the pros and cons described above.</p>

<p>Last but not least, apart from making your <code>n</code> variable non-global as pointed out in another answer, you could also declare it as <code>constexpr</code> since you know its value at compile time.</p>
    </div>