<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One thing you could consider is making this a little more generic and thus reusable. Currently you seem to assume, that there is only one <code>.tab</code> element in your document. If you had multiple (independent) <code>.tab</code> elements, each with their own set of <code>select</code> elements and you did't want to allow "tabbing" between then, then <code>$(".tab select")</code> will select all selects and not only the ones in the "current" <code>.tab</code>. So instead of </p>

<pre><code>let tabs = $(".tab select");
</code></pre>

<p>I'd use </p>

<pre><code>let tabs = $(this).closest(".tab").find("select");
</code></pre>

<p>Furthermore instead of hardcoding the selectors, consider making them variable, so that the script could be used with other class names and form elements:</p>

<pre><code>function initArrowKeyTabbing(parentSelector, formElementSelector) {
  $(document).on('keydown', parentSelector + " " + formElementSelector, function (e) {
    $(this).closest(parentSelector).find(formElementSelector);
    // ...
  }
}

initArrowKeyTabbing(".tab", "select");
</code></pre>

<hr>

<p>In the line</p>

<pre><code>let tab = tabs.index($($(document.activeElement)));
</code></pre>

<p>you are calling <code>jQuery</code> twice. <code>tabs.index($(document.activeElement))</code> would suffice. For the matter of the fact, <code>.index()</code> alternatively takes a DOM element as its parameter, so you even only need <code>tabs.index(document.activeElement)</code>.</p>

<hr>

<p>With an <code>if ... else if ...</code> construct you don't need the brackets around the second if:</p>

<pre><code>if (e.which == 37) {
    tab -= 1;
} else if (e.which == 39) {
    tab += 1;
}
</code></pre>

<p>In this case instead of using <code>if</code>, a <code>switch</code> statement would be more flexible:</p>

<pre><code>switch (e.which) {
    case 37:
       tab--; // Short form of tab -= 1;
       break;
    case 39:
       tab++;
       break;
}
</code></pre>

<hr>

<p>The <code>which</code> event property is deprecated. The "proper" replacement is the <code>key</code> property, which however requires concessions towards IE and Edge, which use non-standard key names:</p>

<pre><code>switch (e.key) {
  case "Left": // IE/Edge specific value
  case "ArrowLeft":
    tab--;
    break;
  case "Right": // IE/Edge specific value
  case "ArrowRight":
    tab++;
    break;
}
</code></pre>
    </div>