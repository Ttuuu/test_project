<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I should say that your work might get easier here if you are using an ORM such as ActiveRecord or Squeel or Sequel.</p>

<p>I think that the <code>TeamFixture</code> may be incorrect there.</p>

<p><code>Fixture</code> feels like an object, with attributes of <code>home_team_id</code> and <code>away_team_id</code>, and 'home_team_score' and 'away_team_score'.</p>

<p>This allows you to report fixtures for all teams and also whether they are playing home or away.</p>

<p>You would probably have two associations, <code>home_fixtures</code> and <code>away_fixtures</code>, and could also construct an association for <code>fixtures</code> by hand-writing the join condition, I think.</p>

<p>It's fine to reach through an object to another, and a <code>through</code> association allows you to do that without referencing the intermediate object if you like. But you can also eager load the opposing team as well to get access to both the fixture attributes and the opposing team attributes.</p>

<p>I suppose that where a <code>TeamFixture</code> object might come into play is when you want to define attributes for the team in the context of that one fixture. For example, you might want to list players, with a <code>TeamFixturePlayer</code> model that has stats on who scored, who got a yellow or red card, playing time etc.</p>
    </div>