<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The contributed answers each had some valuable contributions, but they did not really achieve the clarity (as perceived by me) I was hoping for. I guess this was mainly due to the fact that the answers were focused very much on how to express code elegantly, but in contrast my thinking is focused on the data.</p>

<p>So I picked some advice from those answers, i.e.</p>

<ul>
<li>follow the main function convention for CLI programs</li>
<li>split everything into functions</li>
<li>read the file to memory at the beginning</li>
</ul>

<p>But I also kept much of my code, which follows along very much the data as it is presented in the log file. For me, everything I take from the log file is a kind of "observation", so storing them as a list of dictionaries makes perfect sense to me and using pandas to transform all those observation in a usable shape also seems straightforward to me.</p>

<p>So in summary, I implemented the advice above and cleaned up my existing code a bit to make it more uniform:</p>

<pre><code>import re
import pandas as pd
import os
import sys

def read_log(filename):
    with open(filename,'r') as logfile:
        return logfile.readlines()

def parse_steps(log):
    steps_data = []

    step_number = 0

    for line in log:
        step_definition = re.match(r'\.step (.*)', line)
        if step_definition:
            step_number += 1
            row = { 'step': step_number }
            for parameter_match in re.finditer(r'(\S+)=(\S+)', step_definition[1]):
                parameter, value = parameter_match.groups()
                row[parameter] = float(value)
            steps_data.append(row)

    return steps_data

def parse_measurements(log):
    measurements_data = []

    log_iterator = iter(log)

    while True:
        try:
            line = next(log_iterator)
        except StopIteration:
            break

        measurement_definition = re.match(r'Measurement: (\S+)', line)
        if measurement_definition:
            measurement_name = measurement_definition[1]
            next(log_iterator) # skip one line

            while True:
                line = next(log_iterator)
                if re.match(r'^\s*\n', line): # empty line
                    break

                measurement_observation = re.match(r'^\s*(\S+)\s+(\S+)', line)
                if measurement_observation:
                    step, value = measurement_observation.groups()
                    row = { 'step': int(step), measurement_name: float(value) }
                    measurements_data.append(row)

    return measurements_data


def main():
    logfilename = sys.argv[1]
    log = read_log(logfilename)

    steps = parse_steps(log)
    measurements = parse_measurements(log)

    csvfilename = os.path.splitext(logfilename)[0] + '.csv'

    frame = pd.DataFrame(steps + measurements).set_index('step').groupby('step').first()
    frame.to_csv(csvfilename)


if __name__== "__main__":
    main()
<span class="math-container">```</span>
</code></pre>
    </div>