<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Packet fragmentation</h2>
<pre><code>    data = conn.recv(4096)

    #error
    if repr(data)!="b'dslp-3.0'":
</code></pre>
<p>To quote the documentation for <a href="https://docs.python.org/3/library/socket.html#socket.socket.recv" rel="nofollow noreferrer"><code>recv</code></a>,</p>
<blockquote>
<p>The <strong>maximum</strong> amount of data to be received at once is specified by bufsize.</p>
</blockquote>
<p>Emphasis mine. This is a common pitfall that beginners encounter when attempting low-level socket programming. The socket library gives you no guarantee that you will actually get 4096 bytes, or even a complete message. You need to iterate until you think you have enough bytes or a valid message, however you define that.</p>
<p>Put another way, it would be trivially easy to write a client that sends fragmented data to your server that <em>should</em> be valid but will in fact be erroneously rejected.</p>
<p>Though I haven't tried it, <a href="https://docs.python.org/3/library/socketserver.html#socketserver.StreamRequestHandler" rel="nofollow noreferrer"><code>socketserver</code></a> seems like its <code>rfile</code> should be able to abstract this away for you since it handles buffering. In other words, you don't need to worry about packets or buffer sizes; you can ask for <code>rfile.readline()</code>, which is what you actually want given your protocol.</p>
<p>If you do not want the abstraction of <code>socketserver</code>, you can also use <a href="https://docs.python.org/3/library/socket.html#socket.socket.makefile" rel="nofollow noreferrer"><code>makefile</code></a> - which is called by <code>socketserver</code> anyway.</p>
    </div>