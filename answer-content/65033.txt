<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I believe your solution is \$O(n^2)\$, and we can reduce that to \$O(n \log n)\$. I'm not well-versed in python, but this is the general idea:</p>

<ul>
<li>The output is a permutation of the indices \$0, 1, \ldots, n - 1\$, where \$n\$ is the length of the input.</li>
<li>We sort the indices based on the element at the specified index. In your example, we get \$6, 0, 4, 1, 2, 3, 5\$, i.e. the \$6\$th element (\$3\$) is smallest, so \$6\$ is first.</li>
<li>Seeing that \$6\$ is at index \$0\$, we know that the \$6\$th element of the output is \$0\$, and so on. This step is easier to explain in code than in words, sorry about that.</li>
</ul>

<p>In code,</p>

<pre><code>indices = list(range(len(input)))
indices.sort(key=lambda x: input[x])
output = [0] * len(indices)
for i, x in enumerate(indices):
    output[x] = i
</code></pre>

<p>Or the more terse</p>

<pre><code>output = [0] * len(input)
for i, x in enumerate(sorted(range(len(input)), key=lambda y: input[y])):
    output[x] = i
</code></pre>

<p>I used the <code>timeit</code> module to compare the running times of this version and the original for different input sizes. The functions were each called 1,000 times on randomly shuffled input of size \$n\$. Here are some of the results</p>

<pre><code>   n     this version (s)  original version (s)
  10                 0.02                  0.04
 100                 0.17                  1.40
1000                 1.81                133.35
</code></pre>

<p>This is asymptotically optimal, since if it were not, we would have a sub-linearithmic comparison sort:</p>

<pre><code>sorted = [0] * len(input)
for i, x in enumerate(output):
    sorted[x] = input[i]
</code></pre>
    </div>