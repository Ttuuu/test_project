<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Interface suggestions</h1>

<p>Anything that can be parameterized instead of hard-coded should be.  I would pass the dimensions to the <code>Rectangle</code> constructor.  Then I would create a <code>draw(PrintStream out)</code> method.  In other words, the rectangle knows how to draw itself to a <code>PrintStream</code> of your choice, whether it's <code>System.out</code> or some other output destination.</p>

<h1>Loop Simplification</h1>

<p>You can simplify your code by letting <code>Arrays.fill()</code> do the boring looping work to populate some buffers.  Then, you only need one <code>for</code>-loop to iterate over the rows.  A bonus is that you take advantage of the fact that many of the lines to be printed are identical to each other.</p>

<h1>Solution</h1>

<pre><code>import java.io.PrintStream;
import java.util.Arrays;

public class Rectangle {
    private int rows, cols;

    public Rectangle(int rows, int cols) {
        this.rows = rows;
        this.cols = cols;
    }

    public void draw(PrintStream out) {
        char[] buf = new char[cols];

        Arrays.fill(buf, '*');
        String cap = new String(buf);

        Arrays.fill(buf, 1, cols - 1, ' ');
        String body = new String(buf);

        out.println(cap);
        for (int i = rows - 2; i &gt;= 0; i--) {
            out.println(body);
        }
        out.println(cap);
    }

    public static void main(String[] args) {
        (new Rectangle(8, 8)).draw(System.out);
    }
}
</code></pre>
    </div>