<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Unfortunately, I've never used <code>pandas</code> before (I've been meaning to try it for awhile), so I can't comment on its usage. Looking at how it's being used here though, it may help, but parsing a list of lines would still be fairly simple.</p>

<hr>

<p>Honestly, this is some clean looking code. You actually format things fairly similarly to how I like, so I don't have much to say in that regard.</p>

<p>To nit pick though, here</p>

<pre><code>data_avg = {key: total/max(data_counter[key], 1)
            for (key, total)
            in data_totals.items()}
</code></pre>

<p>I wouldn't break up the <code>for...in</code>. It's not that long of a line.</p>

<p>I also wouldn't use a <a href="https://stackoverflow.com/questions/1301346/what-is-the-meaning-of-a-single-and-a-double-underscore-before-an-object-name">double underscore prefix</a> for <code>__average_and_append</code>. If your intent was to mark it as "private", just use one leading underscore.</p>

<hr>

<p>The one suggestion I can make though is to try out <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a>. Right now, you're indicating the type in the docstring, and I don't think that it's in a format that IDEs can read readily. Type hints allow some type errors to be caught as you're writing, and show up in a more readable way in docs.</p>

<p>For an example of their use, you could annotate <code>response_time_under_load</code> as:</p>

<pre><code>def response_time_under_load(input_file: str, output_file: str) -&gt; None:
</code></pre>

<p>This does a few things:</p>

<ul>
<li>The types show up in the docs in the signature instead of buried in the doc string</li>
<li>If you accidentally pass something of the wrong type, a good IDE will warn you</li>
<li>From within the function, it knows <code>input_file</code> is a string, so it can give better autocomplete suggestions</li>
<li><p><code>-&gt; None</code> means that the function doesn't return anything (AKA, it implicitly returns <code>None</code>). If you attempt to do</p>

<pre><code>some_var = response_time_under_load(inp, out)
</code></pre>

<p>You'll get a warning that <code>response_time_under_load</code> doesn't return anything.</p></li>
</ul>

<p>You can also annotate the types that dictionaries and lists hold. This allows it to know the types when you do a lookup. For example, <code>__average_and_append</code> takes two dictionaries, a <code>Dataframe</code>, and an <code>int</code>. You don't say what the dictionary is holding though. The values are numbers, but I can't tell what the keys are. Pretend for the example that the keys and values are both integers.</p>

<pre><code>def _average_and_append(data_totals, data_counter, out_data, new_index):
</code></pre>

<p>Could be changed to</p>

<pre><code>from typing import Dict

def _average_and_append(data_totals: Dict[int, int],
                        data_counter: Dict[int, int],
                        out_data: Dataframe,  # Assuming Dataframe is imported
                        new_index: int
                        ) -&gt; Dataframe:
</code></pre>

<p>Yes, this is quite verbose, but it conveys a lot of useful information. <code>Dict[int, int]</code> can also be aliased to reduce redundancy and neaten up:</p>

<pre><code>Data = Dict[int, int]  # Type alias

def _average_and_append(data_totals: Data,
                        data_counter: Data,
                        out_data: Dataframe,
                        new_index: int
                        ) -&gt; Dataframe:
</code></pre>

<p><code>Dataframe</code> may be generic like <code>Dict</code> is, so you may be able to specify the types that it holds as well. The docs for the class should mention that.</p>
    </div>