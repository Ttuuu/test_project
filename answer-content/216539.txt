<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Time complexity</h3>

<p>Your time complexity is linear but you can save a few traversals over the string and lower the constant factor as you improve readability. Checking whether a string is a palindrome can be done in one pass with two pointers at each end of the string (plus some conditionals for your special characters), but this gains speed at the expense of readability; I'd encourage a round of clean-up before going for optimizations.</p>

<h3>Repeated code</h3>

<p>Repeated code harms maintainability and readability. Notice that the line</p>

<pre><code>str.replace(/[^\w\s]|_/g, "").toLowerCase().split(" ").join("");
</code></pre>

<p>appears in two places in the code. If you decide to change one to accept a different regex but forget to change the other one, you've introduced a potentially subtle bug into your program. Move this to its own function to avoid duplication.</p>

<h3>Use accurate function names and use builtins</h3>

<p><code>reverseString</code> is a confusing function: it does more than reversing a string as advertised: it also strips whitespace and punctuation, which would be very surprising if I called this function as a user of your library without knowing its internals. All functions should operate as black boxes that perform the task they claim to, nothing more or less.</p>

<p>The array prototype already has a <code>reverse()</code> function, so there's no need to write this out by hand.</p>

<h3>Avoid unnecessary verbosity</h3>

<p>The code:</p>

<pre><code>  if(str === reverseString(str))
  {
   return true; 
  }
  else
  {
    return false;
  }
</code></pre>

<p>is clearer written as <code>return str === reverseString(str);</code>, which says "return the logical result of comparing <code>str</code> and its reversal".</p>

<h3>Improve the regex to match your specification</h3>

<p>Including spaces in your regex substitution to <code>""</code> is easier than <code>.split(" ").join("")</code>. If you wish to remove all non-alphanumeric characters, a regex like <code>/[^a-z\d]/gi</code> reflects your written specification accurately (or use <code>\W</code> if you don't mind including underscores).</p>

<h3>Style remarks</h3>

<ul>
<li>JS uses K&amp;R braces instead of Allman by convention.</li>
<li>Add a blank line above <code>for</code> and <code>if</code> blocks to ease vertical congestion.</li>
<li>Add a space around keywords and operators like <code>for(</code> and <code>&gt;=0</code>, which are clearer as <code>for (</code> and <code>&gt;= 0</code>.</li>
<li>No need for parentheses around a <code>return</code> value.</li>
<li><code>array.push(str[i])</code> is missing a semicolon.</li>
<li>CodeReview's snippet autoformatter will automatically do most of this for you.</li>
</ul>

<h3>Rewrite 1</h3>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const palindrome = str =&gt; {
  str = str.replace(/[^a-z\d]/gi, "").toLowerCase();
  return str === str.split("").reverse().join("");
};

console.log(palindrome("My age is 0, 0 si ega ym."));</code></pre>
</div>
</div>


<h3>Rewrite 2: uglier, but faster</h3>

<p><a href="https://jsperf.com/pppalindrome" rel="noreferrer">Benchmark</a></p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const palindrome = str =&gt; {
  str = str.replace(/[^a-z\d]/gi, "").toLowerCase();
  let left = 0;
  let right = str.length;

  while (left &lt; right) {
    if (str[left++] !== str[--right]) {
      return false;
    }
  }

  return true;
};

[
  "",
  "a",
  "aba",
  "racecar",
  "racecar ",
  " racecar",
  " race car",
  " r  r a c e   c a  rr     ",
  ".a .. r . ... . .{9f08e988-1e35-4dc6-a24a-5c7e03bce5ba}$ $!ace ca r3  a",
].forEach(test =&gt; console.log(palindrome(test)));

console.log();
[
  "ab",
  "abc",
  "racecars",
  "racescar",
  " ra scecar",
  " r   sace car",
  "a r  r a c e   c a  rr     ",
  " r  r a c e   c a  rr     a",
  ".a .. r . ... . .$$$ $!aces ca r  a",
].forEach(test =&gt; console.log(palindrome(test)));</code></pre>
</div>
</div>

    </div>