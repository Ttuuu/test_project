<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Okay...wow, that is a lot of code. I'm not going to get all the points, but let's start at the beginning. You're missing an entry point - the usual:</p>

<pre><code>if __name__ == "__main__":
    # begin the game
</code></pre>

<p>This is where you should be defining initial variables and values which will live inside the program, including the Player class and instantiating it. From the look of your code, you're not up to doing classes yet, so let's leave that for another day.<br>
Next is naming of variables. You're using a mix of snake_case and camelCase. If you're going to do Python, stick with snake_case.<br>
So if I grab all the code that is outside functions (anything starting with <code>def</code>), and pop it all after an entry point, it runs.<br>
The next point I have is there is a bit of inferred information with the players do not have when they start the game. For instance:</p>

<pre><code>piece1 = input("What piece would player1 like to play as? ")
</code></pre>

<p>Doesn't explain what input is necessary. Maybe you can add "[enter x or o]" at the end of the prompt?</p>

<pre><code>pieces = ("x", "o")
for piece in pieces:
    if piece != piece1:
        piece2 = piece
</code></pre>

<p>As a suggestion, you could shortcut the above code by making pieces a list instead of a tuple, so that when the first player selects cross or naught, pop that from the list and you have your answer for which piece that player two has to play as.<br>
I've noticed that you not only define the board: <code>board = [[0 for _ in range(3)] for _ in range(3)]</code> at the start of the code, but you also have the same code inside the function <code>def InitializeGame():</code>. You might want to remove any duplication you have.  </p>

<p>Another point I see is that you pass <code>None</code> around quite a bit. You might want to change your functions and the calling code so you only pass specific data. For instance, you have:</p>

<pre><code>def IncrementValues(turn, round):
</code></pre>

<p>and you use:</p>

<pre><code>turn = IncrementValues(turn, None)[0]
round = IncrementValues(None, round)[1]
</code></pre>

<p>But I would change this to: </p>

<pre><code>def IncrementValues(turn = None, round = None):
</code></pre>

<p>and make the callers:</p>

<pre><code>turn = IncrementValues(turn=turn)[0]
round = IncrementValues(round=round)[1]
</code></pre>

<p>Okay, I'm going to wrap this answer up as I've given you quite a bit to digest already. I'd like to make a point on the remaining construction of the game, specifically the <code>while ContinueGame(current_score, goal_score):</code> loop and your construction of the board.  </p>

<p>If I was making this game, I would use a simple string representation for the board and not list of lists. As you know the board is 3x3, this is a simple 9-character string like <code>"-x-oox--xo"</code>. The only thing that cares about the formatting of this string is the print function.<br>
Updating a string is easy, and checking if the slice is a <code>"-"</code> (hence available to be changed) is a simple action too. This would remove a huge amount of complexity in your current code.<br>
The <code>ContinueGame(current_score, goal_score)</code> loop from first view is really unnecessary in both a construction sense and a real-life sense. I mean, you don't agree with someone that you'll play 8 and only 8 games, right? You can get up in the middle of a game and leave too, right?<br>
That's what you should head towards. An input system which will allow players to exit at any time. An input system which can handle player names, player board selections, and players wanting to leave at any time.<br>
So give all that go, and I look forward to seeing your next iteration posted here on Code Review.</p>

<p>Thanks for reading</p>
    </div>