<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>There is a potential here to mangle type conversions</h2>

<p>I noticed that you are trying to manipulate integers in ways only strings and other iterables can: both <code>len(num)</code> and <code>num[0]</code>/<code>num[-1]</code> will give you a <code>TypeError</code>. In order to prevent that from happening, you would need to first convert the number to a string and then to a <code>list</code>:</p>

<pre><code>def round10(num):
    number = list(str(num))
</code></pre>

<p><a href="https://tio.run/##K6gsycjPM/7/PyU1TaEovzQvxdBAI680V9OKSwEIgKyk1CIFW4WczOISjeKSIrCcJliuoCgzrwTM/w/TaKrJBWMaGiDYJsYItrGJmeZ/AA" rel="nofollow noreferrer" title="Python 3 – Try It Online">Try it online!</a></p>

<p>However, a further problem arises from the fact that integers cannot be subtracted from strings (once again, <code>TypeError</code>), so each list item needs to be converted to an integer:</p>

<pre><code>def round10(num):
    number = list(str(number))
    for i in range(len(number)): # Doable because num is a list
        number[i] = int(number[i])
</code></pre>

<p><a href="https://tio.run/##RY49DsIwDIX3nMISS7y1SmGoxMYtEENCXYgUnCo/A6cPIajE02e/52dv7/T0rEpZaIXgMy/jIDm/cBZQq5KhAGdwNiYZU2gaNm31ASxYhqD5QdIRy58dcYYDXLw2jsDQXedI3ySwEXRLavs9/2pv9YTlJP89iubZQp9i2f87othxHDpPqrOaTlg@" rel="nofollow noreferrer" title="Python 3 – Try It Online">Try it online!</a></p>

<p>Then, once all the logic has been applied, it needs to be converted back to an integer. This means that you would have to convert the list to a single string and call <code>int()</code> on that string:</p>

<pre><code>def round10(num):
    number = list(str(num))
    for i in range(len(number)): # Doable because num is a list
        number[i] = int(number[i])

    if len(number) &lt; 2 and num &gt;= 5:
        number = [1, 0]

    elif len(number) &gt; 2 and number[-1] &gt;= 5:
        number[0] += 1
        number[-1] = 0

    else:
        number[0] -= 1
        number[-1] = 0

    final = ""
    for n in number:
        final += str(n)

    # Here, I'd use final = "".join([str(n) for n in number])

    return int(final)
</code></pre>

<p><a href="https://tio.run/##hZLBTsMwEETv@YpRe8AWLUpIyyEiPXGAb4hycMgGjMKmspMDXx9spzSQVsIHyzuefbbGPn717x2n41hTA9MNXCex4OFTZhHccKuKDHK02vbC9ibsybDXdAYammEUv5FoicVklzLDGk@dqlpCRa9qsORJ0BYqkEL/zC906Y7Q3ItzLaPg0Q1@cfGIeyiuA@yQY58tQI5SJBvEZdDDRO2CcZgZ/qhtUl5FFXGJ2xzJUvb@HHF0glu61rj9r7HRrFpXrlbnKNlHOXln5ORz9wjRn0JZ45kMbfByU8NHO8PuPjrNopjMS2op51QM9YPhEHnoluPR@OLnB@zdG/9VkvhC2qUXUrp7kHL8Bg" rel="nofollow noreferrer" title="Python 3 – Try It Online">Try it online!</a></p>

<p>As you can see, there is quite a potential to confuse all the types in use.</p>

<h2>There are logic errors within your <code>if</code>-statements</h2>

<p>If you go to the <strong>Try It Online!</strong> link from the above function, you'll see that there are issues with your logic:</p>

<ol>
<li>Numbers with more than one digit round incorrectly.</li>
<li>The number <code>10</code> gets rounded to <code>0</code>.</li>
<li>If the last digit is less than five, then the number gets rounded down too far.</li>
<li><strong>Very important</strong>: If a number happens to round up to the next hundred (e.g. 599 -&gt; 600), then there is no incrementation of the rest of the number.</li>
</ol>

<p>Below is a fixed version of your proposed method that works for numbers up to <code>194</code>:</p>

<pre><code>def round10(num):
    number = list(str(num))
    for i in range(len(number)): # Doable because num is a list
        number[i] = int(number[i])

    if len(number) &lt; 2 and num &gt;= 5:
        number = [1, 0]

    elif len(number) &gt;= 2 and number[-1] &gt;= 5:
        number[-2] += 1
        number[-1] = 0

    else:
        number[-1] = 0

    final = ""
    for n in number:
        final += str(n)

    # Here, I'd use final = "".join([str(n) for n in number])

    return int(final)
</code></pre>

<p><a href="https://tio.run/##fZHBToQwEIbvPMVk92Abdw3dXUwg4smDPgPpocigNThsChx8emzLCkrNcmiYv/980/49f/XvLR3HscIaTDtQJWJGwyfPIrCf/SvRQA6N7nrW9cbvcb9XtwY0aAKj6A1Zg8QmO@cZbOGpVWWDUOKrGjp0JNAdKE/y/Qu/0NKO0NSzueaR9@gafnHhAQ6gqPKwxxySbAWylELsIJZe9ws2K4btmyFu1l7If1nF/iDhNgcR6MKdNo4u@A6zq45ak2psudnMqZFLbfIuvZPPDvQpX@6/hWc0uIOXmwpcigvs7qPVxIrJvKZKvgRgsB8M@XR9Nx/PxhU/j53Y5/yriDiQTsfQlZ4CLbkPpLAxTTkfvwE" rel="nofollow noreferrer" title="Python 3 – Try It Online">Try it online!</a></p>

<h3>Changes:</h3>

<ul>
<li><code>elif len(number) &gt; 2 and number[-1] &gt;= 5:</code> has been changed to <code>elif len(number) &gt;= 2 and number[-1] &gt;= 5:</code>. This fixes the issue where numbers with two or more digits do not round correctly.</li>
<li>I have removed <code>number[0] -= 1</code> from the <code>else</code> block in order to address points 2 and 3</li>
</ul>

<p>Notice how I haven't addressed issue 4. That's because I feel like implementing such a system would be beyond the scope of the CodingBat challenge.</p>

<h2>That's because there is a simpler way to do this</h2>

<p>Indeed, I suggest that instead of relying on string manipulation, you utilise mathematics to do the rounding for you.</p>

<h3>Use the modulus (<code>%</code>) operator</h3>

<p>The <code>%</code> operator returns the remainder of the first number divided by the second. This can be used to see how far the number is from the nearest 10:</p>

<pre><code>def round10(num):
    distance = num % 10
</code></pre>

<p><a href="https://tio.run/##K6gsycjPM/7/PyU1TaEovzQvxdBAI680V9OKSwEIUjKLSxLzklMVbBWAggqqCoYGYPGi1JLSojy49P@Cosy8Eg2YflNNTS5UEUMDDCEzc03N/wA" rel="nofollow noreferrer" title="Python 3 – Try It Online">Try it online!</a></p>

<p>Then, if the distance from the nearest 10 is greater than or equal to 5, simply add 10 minus that distance onto the original number. Otherwise, subtract 10 minus that distance from the original number:</p>

<pre><code>def round10(num):
    if num % 10 &gt;= 5: 
        return num + (10 - (num % 10))
    else:
        return num - (10 - (num % 10))
</code></pre>

<p><a href="https://tio.run/##K6gsycjPM/7/PyU1TaEovzQvxdBAI680V9OKSwEIMtMUgBwFVQVDAwU7WwVTKwWwMAgUpZaUFuWBpbUVNIDyugoaMLWammBlqTnFqVbYNOhi0fC/oCgzr0QD5gZToBCqCFgVqpCZuabmfwA" rel="nofollow noreferrer" title="Python 3 – Try It Online">Try it online!</a></p>

<h2>A Minor Point</h2>

<p>I assume that CodingBat wants the function that performs the summing to be called <code>sum</code>. In that case, you can't really change it. But if this were in a proper program, I would strongly recommend you change the function name. Why? To avoid "masking" (that is, overwriting) the built-in function called <code>sum</code>.</p>
    </div>