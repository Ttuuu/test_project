<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your current code looks like a big block of black characters. I find it difficult to read, since there are so many words in it. Therefore, my first idea was to paste this code into the IDE and let the IDE transform it into something more readable.</p>

<pre><code>static void checkForDuplicates() {
    Map&lt;String, Object&gt; existingProperties = requires.get(requiresIndex).getProperties();
    for (Map.Entry&lt;String, Object&gt; property : properties.entrySet()) {
        if (existingProperties.containsKey(property.getKey())) {
            if (existingProperties.get(property.getKey()) instanceof String &amp;&amp; property.getValue() instanceof String) {
                String existingValue = (String) existingProperties.get(property.getKey());
                String newValue = (String) property.getValue();
                if (existingValue.equals(newValue)) {
                    throw new Exception("Property " + property.getKey() + " is existsing with value " + newValue + "in requires " + requiresName);
                }
            }
        }
    }
}
</code></pre>

<p>I first wrapped the piece of code in a properly named method. This is something you should have done before posting the code here, to make clear what the input is and where it comes from.</p>

<p>Then, I formatted the code to get rid of the inconsistent spacing. Watching for the basic layout of the code is not a humane task, therefore the IDE should do it for you.</p>

<p>Now, the code doesn't compile. In a strict sense, this could already make your question off-topic for this site, which requires <em>working</em> code. And code that doesn't even compile does not work by definition.</p>

<p>After converting all unknown variables into parameters, the code is:</p>

<pre><code>static void checkForDuplicates(
        Map&lt;String, Object&gt; existingProperties,
        Map&lt;String, Object&gt; properties,
        String requiresName) throws Exception {

    for (Map.Entry&lt;String, Object&gt; property : properties.entrySet()) {
        if (existingProperties.containsKey(property.getKey())) {
            if (existingProperties.get(property.getKey()) instanceof String &amp;&amp; property.getValue() instanceof String) {
                String existingValue = (String) existingProperties.get(property.getKey());
                String newValue = (String) property.getValue();
                if (existingValue.equals(newValue)) {
                    throw new Exception("Property " + property.getKey() + " is existsing with value " + newValue + "in requires " + requiresName);
                }
            }
        }
    }
}
</code></pre>

<p>Still no improvement on the readability. Let's ask the IDE whether it can make this code more beautiful. Iterating over a map is known to require a lot of code in Java before Java 8. But first, let's make the code a little lighter by extracting <code>key</code> and <code>value</code> to variables:</p>

<pre><code>static void checkForDuplicates(
        Map&lt;String, Object&gt; existingProperties,
        Map&lt;String, Object&gt; properties,
        String requiresName) throws Exception {

    for (Map.Entry&lt;String, Object&gt; property : properties.entrySet()) {
        String key = property.getKey();
        Object value = property.getValue();

        if (existingProperties.get(key) instanceof String &amp;&amp; value instanceof String) {
            String existingValue = (String) existingProperties.get(key);
            String newValue = (String) value;
            if (existingValue.equals(newValue)) {
                throw new Exception("Property " + key + " is existsing with value " + newValue + "in requires " + requiresName);
            }
        }
    }
}
</code></pre>

<p>It's getting better. The black code slowly disappears, making place for more colors.</p>

<p>The next thing is to replace the <code>throw new Exception</code> with <code>throw new IllegalStateException</code>, since the latter does not have to be explicitly declared in the method definition (the <code>throws Exception</code>) and enables a nice refactoring in the next step.</p>

<p>And now the IDE (in my case IntelliJ) can automatically transform this large code into equivalent shorter code. To do that, place the cursor on the <code>for</code> keyword, press Alt+Enter and select <em>Replace with Map.forEach</em>:</p>

<pre><code>static void checkForDuplicates(
        Map&lt;String, Object&gt; existingProperties,
        Map&lt;String, Object&gt; properties,
        String requiresName) {

    properties.forEach((key, value) -&gt; {
        if (existingProperties.get(key) instanceof String &amp;&amp; value instanceof String) {
            String existingValue = (String) existingProperties.get(key);
            String newValue = (String) value;
            if (existingValue.equals(newValue)) {
                throw new IllegalStateException("Property " + key + " is existsing with value " + newValue + "in requires " + requiresName);
            }
        }
    });
}
</code></pre>

<p>This already helped a lot. Instead of two paragraphs of code, there is only one paragraph left.</p>

<p>In the next step, extract the call to <code>existingProperties.get(key)</code> into a variable (<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>V</kbd>), calling it <code>existingValue</code>. This produces a compile error because there is already another variable of the same name. We don't really need the two variables inside the <code>if</code> clause, so just remove them and replace them with the outer variables:</p>

<pre><code>static void checkForDuplicates(
        Map&lt;String, Object&gt; existingProperties,
        Map&lt;String, Object&gt; properties,
        String requiresName) {

    properties.forEach((key, value) -&gt; {
        Object existingValue = existingProperties.get(key);
        if (existingValue instanceof String &amp;&amp; value instanceof String) {
            if (existingValue.equals(value)) {
                throw new IllegalStateException("Property " + key + " is existsing with value " + value + "in requires " + requiresName);
            }
        }
    });
}
</code></pre>

<p>The text of the exception contains is missing a space before the <code>in requires</code>, but that is not easy to see. To make this code more readable, let the IDE replace the <code>+</code> operators with <code>String.format</code> by placing the cursor somewhere in the string and pressing Alt+Enter. From the menu, select <em>Replace '+' with 'String.format'</em>:</p>

<pre><code>static void checkForDuplicates(
        Map&lt;String, Object&gt; existingProperties,
        Map&lt;String, Object&gt; properties,
        String requiresName) {

    properties.forEach((key, value) -&gt; {
        Object existingValue = existingProperties.get(key);
        if (existingValue instanceof String &amp;&amp; value instanceof String) {
            if (existingValue.equals(value)) {
                throw new IllegalStateException(String.format("Property %s is existsing with value %sin requires %s", key, value, requiresName));
            }
        }
    });
}
</code></pre>

<p>The line containing the exception is still very long, so extract the exception message into a variable (<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>V</kbd>) and format it nicely. Then, replace the <code>if</code> conditions with a shorter, equivalent one:</p>

<pre><code>static void checkForDuplicates(
        Map&lt;String, Object&gt; existingProperties,
        Map&lt;String, Object&gt; properties,
        String requiresName) {

    properties.forEach((key, value) -&gt; {
        Object existingValue = existingProperties.get(key);
        if (existingValue instanceof String &amp;&amp; Objects.equals(existingValue, value)) {
            String message = String.format(
                    "Property %s is existsing with value %sin requires %s",
                    key, value, requiresName);
            throw new IllegalStateException(message);
        }
    });
}
</code></pre>

<p>The final step is fixing the typos (<code>existing</code> and <code>in</code>) in the exception message. Then you're done:</p>

<pre><code>static void checkForDuplicates(
        Map&lt;String, Object&gt; existingProperties,
        Map&lt;String, Object&gt; properties,
        String requiresName) {

    properties.forEach((key, value) -&gt; {
        Object existingValue = existingProperties.get(key);
        if (existingValue instanceof String &amp;&amp; Objects.equals(existingValue, value)) {
            String message = String.format(
                    "Property %s is existing with value %s in requires %s",
                    key, value, requiresName);
            throw new IllegalStateException(message);
        }
    });
}
</code></pre>
    </div>