<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some additions to the review from @Quuxpluson. </p>

<p>With regard to threadsafety, i'd be concerned that you are not calling <code>deAllocatePool</code> in the destructor. It's undefined behavior to call a destructor on <code>std::mutex</code> when the mutex is locked. It is also <em>a bad thing</em> to call the destructor on <code>std::thread</code> when it is considered <code>joinable</code>. Both of these may happen if you destruct your threadpool without clearing out the work queue. </p>

<p>Looking further at your <code>deAllocatePool</code>, I think that you could get into cases where you can't end a thread. You are setting <code>done</code> but if the queue is empty, the thread could be waiting in <code>waitAndPop()</code>. While the <code>notifyAllThreads</code> will cause it to wake the lambda expression that you are using in your <code>wait</code> statement</p>

<pre><code>dataCond.wait(lk,[this](){return !taskQueue.empty();});
</code></pre>

<p>would immediately go back into a wait state after awoken. If you manage to call <code>join()</code> on this kind of thread your <code>deallocatePool</code> would hang. I think is that checking for an abort condition inside the wait would mitigate that. If this hasn't happened yet there could be a variety of issues, i could be wrong, your use pattern has prevented this, or just pure coincidence ... </p>

<p>Both of your task types could be reduced to a functor with the type <code>std::function&lt;void(void)&gt;</code>. You could use either lambdas or <code>std::bind</code> to enclose the state information, this would reduce the complexity inside your threadpool. </p>
    </div>