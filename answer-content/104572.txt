<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think, there is room for some improvement:</p>

<p><strong>1) You are mixing OOP with procedural code</strong></p>

<p>If you choose one paradigm, you should stick with it. Besides: why are you abstracting <code>selections</code> into a class and not the whole <code>menu</code>?</p>

<p><strong>2) DRY - Don't repeat yourself</strong></p>

<pre><code>print "=" * 25
print "Please Select An Option"
print "=" * 25
</code></pre>

<p>Why are you repeating the same task? You could refactor the <code>"=" * 25</code> into a constant: <code>separator = "=" * 25</code>.</p>

<p>Everytime you need a separator, you could use <code>separator</code>, which is more meaningful.</p>

<p><strong>3) You should separate concerns</strong></p>

<pre><code>print "4. filler\n"
menuOption = input("Select Option: ")
</code></pre>

<p>Here you are mixing two concerns <em>printing the options</em> and <em>prompting for input</em>. This pollutes your <code>mainMenu</code>. One function should only do <em>one thing</em> (<a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow">SRP</a>).</p>

<p><strong>4) Your code lacks an overall structure</strong></p>

<p>If you take every point together, this should now be clear.</p>

<hr>

<p>I came up with the following:</p>

<pre><code>#!/usr/bin/env python2

import os
from collections import namedtuple

class Menu():

    Option = namedtuple('Option', 'label')
    _separator = "=" * 25
    _options = {1: Option("option one"), 2: Option("option two"),
                3: Option("option three"), 4: Option("option four")}

    def print_header(self):
        print "{0}\n Please Select An Option\n{0}\n".format(self._separator)

    def print_mainMenu(self):
        self.print_header()
        for option in sorted(self._options.keys()):
            print "{0} {1}".format(option, self._options[option].label)

    def prompt(self):
        return input("Select Option: ")

    def handle_input(self, chosen_option):
        try:
            print self._options[chosen_option].label
        except KeyError:
            print "Wrong Option"


def main():
    menu = Menu()
    menu.print_mainMenu()
    menu.handle_input(menu.prompt())

if __name__ == '__main__':
    main()
</code></pre>

<p>For this example, the use of <code>namedtuple</code> is not necessary, but on the other hand gives you something like a lightweight <em>object</em> which could not only contain <em>lables</em>. On top <code>options[chosen_option].label</code> is very readable.</p>

<hr>
    </div>