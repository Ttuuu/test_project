<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a few things that stand out to me:</p>

<h1>Unused import</h1>

<p>You <code>import time</code> but don't use it in your code. It should be removed</p>

<h1>Style</h1>

<p>You should adhere to the <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> style guide. This guide may seem a little superfluous, but having a consistent style makes your code easier to work with should you modify it and having your code follow the same style guide as mostly all python code makes it easier to review.</p>

<p>Constants should be in capitals, so your colors should be called <code>COOL_BLUE</code>, <code>BLACK</code>, etc.</p>

<p>Top level functions should be surrounded by 2 blank lines. In your code, they are surrounded with 1 to 3 blank lines.</p>

<p>Also, you use random strings (<code>"GENERAL GAME FUNCTIONS"</code>) as... comments? Something else? Don't do that, it makes no sense.</p>

<h1>Documentation</h1>

<p>Your code uses some comments that makes it a bit easier to follow, but doesn't include any docstring. Docstrings should document everything your function does (which should be only one thing), what are the arguments it takes and their purposes, and what it returns, so anyone using it (including yourself in the future) can know what it does without working out the logic of the code. </p>

<h1>Code layout</h1>

<p>Your code has some executed statements, then function definitions with some executed statements between some of them, then some more executed statements. It makes it hard to read and follow the logic. Put every statement shat should be executed together, preferably at the end, preferably behind an <code>if __name__ = '__main__':</code> guard (except for the constants)</p>

<h1>Globals</h1>

<p>You use global variables. This is considered to be bad practice, as it makes your logic harder to follow and error prone (it is quite easy to forget that a global was modified in another part of the code). Instead, pass the relevant values as arguments.</p>

<h1>Separation of concerns</h1>

<p>Your code mixes the game logic and its representation with Pygame. It makes the logic flow hard to follow. Instead, you should ensure your game can run independently, and call it with whatever you use for I/O (Pygame for now, but you may want to switch to something else or debug the game in the terminal).</p>

<p>Encapsulating the game logic in a class is probably the way to go.</p>

<h1>Lack of flexibility</h1>

<p>Your nim game has 3 rows of respectively 2, 3 and 5 items, each stored in its own, hardcoded variable. However, there are a lot of variants for the game. The first picture on the <a href="https://en.wikipedia.org/wiki/Nim" rel="nofollow noreferrer">Wikipedia page</a> shows a game with 4 rows of 1, 3, 5 and 7 items. In fact, you could play the game with any number of rows, containing each any number of item. </p>

<p>A list of list to contain these game objects would be much more flexible, and the number of items per row should be passed as parameters to the game class's <code>__init__()</code> function.</p>
    </div>