<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    ByteSpecification spec = null;
    switch (category.ToLower())
    {
      case "date":
        spec = dateSpec;
        goto case "cast";
      case "constants":
        spec = mathConstantsSpec;
        goto case "cast";
      case "secrets":
        spec = secretsSpec;
        goto case "cast";
      case "cast":
        string hascii_bytes = GetHasciiBytes(spec, fieldName); // Retrieve bytes from underlying string
        return castop[fieldName](hascii_bytes); // Cast to appropriate type, according to mapping defined in CastOperation
    }
    return new ArgumentException();
</code></pre>
</blockquote>

<p>As t3chb0t addresses in his comment the above concept is a rather unconventional use of the <code>switcth-case</code> statement. <code>switch</code> statements are ment to select between discrete values of the same type, but here you use the last case to effectively make a local function. For a small context as this, it is maybe readable for now, but in maintenance situations (in five years by another programmer) it may be cumbersome to figure out why this kind of design is chosen. In general: I would avoid to "bend" statements just to be "smart".</p>

<p>Instead I would use a method to extract the value or you could just make the "cast" after the <code>switch</code>:</p>

<pre><code>  get
  {
    ByteSpecification spec = null;
    switch (category.ToLower())
    {
      case "date":
        spec = dateSpec;
        break;
      case "constants":
        spec = mathConstantsSpec;
        break;
      case "secrets":
        spec = secretsSpec;
        break;
      default:
        throw new ArgumentException();
    }

    string hascii_bytes = GetHasciiBytes(spec, fieldName); // Retrieve bytes from underlying string
    return castop[fieldName](hascii_bytes); // Cast to appropriate type, according to mapping defined in CastOperation
  }
</code></pre>

<p>By the way: you probably mean <code>throw new ArgumentException()</code> rather than returning it?</p>

<hr>

<blockquote>
  <p>ByteSpecification assumes base-1 indexing</p>
</blockquote>

<p>Why do you choose an one based indexing? I don't see it justified in the context. It's just used internally in the <code>PD0Format</code> class. IMO you make things more complicated than they have to be.</p>

<hr>

<p>Some of your conversions could be made a little more intuitively:</p>

<blockquote>
<pre><code>public static string HexToString(string hascii)
{
  StringBuilder sb = new StringBuilder();
  for (int i = 0; i &lt; hascii.Length; i += 2)
  {
    string hexByte = hascii.Substring(i, 2);
    sb.Append(Convert.ToChar(Convert.ToUInt32(hexByte, 16)));
  }
  return sb.ToString();
}
</code></pre>
</blockquote>

<p>=&gt;</p>

<pre><code>public string HexToString(string hascii)
{
  byte[] bytes = new byte[hascii.Length / 2];
  for (int i = 0; i &lt; slice.Length; i += 2)
  {
    bytes[i / 2] = byte.Parse(hascii.Substring(i, 2), NumberStyles.HexNumber);
  }
  return Encoding.UTF8.GetString(bytes);  // Or use Encoding.Default
}
</code></pre>

<blockquote>
<pre><code>public static string StringToHex(string str, int maxWidth, bool padLeft = true, char padChar = '0')
{
  StringBuilder sb = new StringBuilder();
  foreach (char c in str)
  {
    sb.AppendFormat("{0:X}", Convert.ToInt32(c));
  }

  if (padLeft)
  {
    return sb.ToString().PadLeft(maxWidth, padChar);
  }
  return sb.ToString().PadRight(maxWidth, padChar);
}
</code></pre>
</blockquote>

<p>=&gt;</p>

<pre><code>public string StringToHex(string value)
{
  byte[] bytes = Encoding.UTF8.GetBytes((string)value);
  string slice = string.Join("", bytes.Select(b =&gt; b.ToString("X2"))).PadLeft(Length, '0');
  return SetSlice(hasciiFormat, slice);
}
</code></pre>

<hr>

<blockquote>
<pre><code>  //  Usage: Writing
  string defaultData = "0000000000000000000000000000000000000000000000000000000000000000000000";
  PD0Format defaultRecord = new PD0Format(defaultData);
</code></pre>
</blockquote>

<p>It is very error prone to let the client provide a "zero-string" this way. Why not provide a default constructor: </p>

<pre><code>public PD0Format()
{
  _hasciiData = "0000000000000000000000000000000000000000000000000000000000000000000000";
}
</code></pre>

<p>that sets the neutral <code>_hasciiData</code> value. </p>

<hr>

<p>Regarding the overall design of <code>PD0Format</code>, I don't like the <code>ByteSpecification</code> and <code>CastOperation</code> fields, because you have to address them via the <code>switch</code> statement.</p>

<p>Instead I would make a dictionary, so it would be possible to write the indexer as:</p>

<pre><code>public dynamic this[string category, string fieldName]
{
  get
  {
    // TODO: check the input values for null and existence if default behavior of Dictionary&lt;&gt; isn't enough. 
    return categories[category.ToLower()][fieldName.ToLower()].Extract(_hasciiData);
  }
  set
  {
    categories[category.ToLower()][fieldName.ToLower()].Insert(ref _hasciiData, value);
  }
}
</code></pre>

<p><code>categories</code> is then defined as:</p>

<pre><code>static Dictionary&lt;string, Dictionary&lt;string, PD0Entry&gt;&gt; categories;

static PD0Format()
{
  categories = new Dictionary&lt;string, Dictionary&lt;string, PD0Entry&gt;&gt;
  {
    { "date", new Dictionary&lt;string, PD0Entry&gt;
      {
        { "year", new PD0IntEntry(0, 2) },
        { "month", new PD0IntEntry(2, 1) },
        { "day", new PD0IntEntry(3, 1) },
      }
    },
    { "constants", new Dictionary&lt;string, PD0Entry&gt;
      {
        { "pi", new PD0FloatEntry(4, 4) },
        { "eulersnumber", new PD0FloatEntry(8, 4) },
      }
    },
    { "secrets", new Dictionary&lt;string, PD0Entry&gt;
      {
        { "secretvalue", new PD0IntEntry(12, 4) },
        { "secretmessage", new PD0StringEntry(16, 11) },
        { "bigint", new PD0LongEntry(27, 8) },
      }
    },
  };
}
</code></pre>

<p>where <code>PD0Entry</code> is an abstract base class for classes that can handle sections of <code>int</code>, <code>float</code>, <code>long</code> and <code>string</code>:</p>

<pre><code>  abstract class PD0Entry
  {
    public PD0Entry(int start, int length)
    {
      Start = start * 2;
      Length = length * 2;
    }

    public int Start { get; }
    public int Length { get; }

    protected string GetSlice(string hasciiFormat) =&gt; hasciiFormat.Substring(Start, Length);
    protected string SetSlice(string hasciiFormat, string slice)
    {
      string prefix = hasciiFormat.Substring(0, Start);
      string postfix = hasciiFormat.Substring(Start + Length);
      return $"{prefix}{slice}{postfix}";
    }

    public abstract void Insert(ref string hasciiFormat, object value);
    public abstract object Extract(string hasciiFormat);
  }
</code></pre>

<p>The definition of this could be different - for instance after thinking about it, I don't like the definition of <code>Insert(...)</code> because of the <code>ref string..</code> argument...</p>

<p><code>PD0IntEntry</code> as an example could then be defined as: </p>

<pre><code>  class PD0IntEntry : PD0Entry
  {
    public PD0IntEntry(int start, int length) : base(start, length)
    {
    }

    public override object Extract(string hasciiFormat)
    {
      string slice = GetSlice(hasciiFormat);
      return Convert.ToInt32(slice, 16);
    }

    public override void Insert(ref string hasciiFormat, object value)
    {
      hasciiFormat = SetSlice(hasciiFormat, ((int)value).ToString($"X{Length}"));
    }
  }
</code></pre>

<p>In this way it is easy to add/remove sections/entries to/from the categories because you'll only have to change the <code>categories</code> dictionary.</p>

<p>Besides that, the responsibility is clear and separated.</p>
    </div>