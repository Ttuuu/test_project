<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Add empty lines and whitespace</h1>
<p>You hardly use empty lines and sometimes omit spaces around operators, leading to very dense code. This makes it very hard to see the structure in your code. I recommended these rules of thumb:</p>
<ul>
<li>Add empty lines between functions and classes.</li>
<li>Add an empty line before and after every <code>if-then-else</code>-block.</li>
<li>Add whitespace around binary operators, except:</li>
<li>Add whitespace after a comma, but not before.</li>
<li>Add whitespace after a semicolon if another statement or a comment follows.</li>
</ul>
<p>Also just avoid having multiple statements on one line. That includes things like:</p>
<pre><code>if(!this-&gt;theSize) return false;
</code></pre>
<p>That should become:</p>
<pre><code>if(!this-&gt;theSize) {
    return false;
}
</code></pre>
<h1>Don't write <code>this-&gt;</code> unnecessarily</h1>
<p>In C++ it is usually not necessary to explicitly write <code>this-&gt;</code> inside member functions. However, there are a few cases where it is necessary, such as:</p>
<ol>
<li>When you have a local variable in a member function that shadows a member variable. To be able to access the member variable you need to specify <code>this-&gt;</code>.</li>
<li>When you to pass a pointer or reference to the current object.</li>
<li>When you are referring to a member function or variable of a templated base class.</li>
</ol>
<p>The reason for the latter is <a href="https://stackoverflow.com/questions/4643074/why-do-i-have-to-access-template-base-class-members-through-the-this-pointer">explained in this question</a>.</p>
<p>It might be tempting to write <code>this-&gt;</code> everywhere, but it does hurt readability. So try to only do it where necessary.</p>
<h1>Split up complex expressions</h1>
<p>Similar to the whitespace issue, very complex one-line expressions can be hard to follow. Take for example:</p>
<pre><code>this-&gt;theArray[(this-&gt;tail == N ? (this-&gt;tail = 0)++ : this-&gt;tail++)] = Cell&lt;T,true&gt;(std::move(theObj));
</code></pre>
<p>Part of the complexity is from all the <code>this</code>es, but also because of the ternary expression and the combined assignment and post-increment of <code>tail</code>.
You cannot get rid of <code>this-&gt;</code> inside <code>theQueue</code> when referring to members of the base class <code>commonQueueFunctions</code>, however you can minimize it by creating a helper function in the base class to update the tail pointer and return a reference to the next free element in the array for you:</p>
<pre><code>template&lt;class T, std::size_t N, typename Idxtype&gt;
struct commonQueueFunctions {
    ...
    constexpr auto &amp;nextFreeElement() {
        if (tail == N)
            tail == 0;
        return theArray[tail++];
    }
};
</code></pre>
<p>Then inside <code>push()</code> for trivial types, you can write:</p>
<pre><code>this-&gt;nextFreeElement() = Cell&lt;T, true&gt;(std::move(theObj));
</code></pre>
<p>Inside the variant for non-trivial types, you can write:</p>
<pre><code>new(&amp;this-&gt;nextFreeElement().value) T(std::move(theObj));
</code></pre>
<p>You can do something similar for <code>pop()</code>. You can also consider moving the updating of <code>this-&gt;theSize</code> into the base class itself. Basically, move as much as possible into the base class, and only handle the actual differences in the derived class.</p>
    </div>