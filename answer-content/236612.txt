<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>if (std::find_if(result.begin(), result.end(), [&amp;b = outline](line &amp;a)
        {
            bool result{};
            if ((result = (a.e == b.b) &amp;&amp; ((a.b.x * (b.b.y - b.e.y)) + (b.b.x * (b.e.y - a.b.y)) + (b.e.x * (a.b.y - b.b.y)) == 0)))
                a.e = b.e;
            return result;

        }) == result.end())
</code></pre>

<p>You're modifying the contents of the result collection within a find_if predicate. It might work, but it's very unintuitive and should be just as easy to modify the value outside the predicate.</p>

<hr>

<p>You have a point data structure you don't seem to be using.</p>

<hr>

<pre><code>int x{}, y{};
</code></pre>

<p>In my opinion, don't zero initialize these, as it's not adding anything of value, even semantically. There's no reason a default initialized point needs to be assumed to be 0, especially when it could be zero initialized itself.</p>

<hr>

<pre><code>bool result{};
if ((result = (a.e == b.b) &amp;&amp; ((a.b.x * (b.b.y - b.e.y)) + (b.b.x * (b.e.y - a.b.y)) + (b.e.x * (a.b.y - b.b.y)) == 0)))
            a.e = b.e;
</code></pre>

<p>This needs to be cleaned up. Declaring the result like that is unnecessary. Ideally the code should be understandable with a minimal amount of surrounding context. These are not appropriate names for variables.</p>

<hr>

<p>The lines method is tightly coupling lines to your cell data structure. I recommend removing it, and keeping the cell data structure as plain data with no methods. </p>

<hr>

<p>If you are guaranteed that the grid is always 8x8 (due to your design), then it's fine to store an array of bools. It's the size of 8 doubles. You presently use more memory if your grid is over 12.5% full since each cell is 8 bytes. The advantage of a sparse data structure is if you have a huge grid with significantly fewer entries.</p>

<hr>

<p>If you're bound to using a sparse representation, you can store it more coherently such that the outlines can be extracted more conveniently. It seems very much like a connected components problem. For example, if you had a huge grid, you could represent occupied cells with a 
<code>std::unordered_map&lt;CellColumnIndexType, std::unordered_set&lt;CellRowIndexType&gt;&gt;</code></p>

<p>This has nearly no superfluous memory overhead with constant time searching. Note that this will perform significantly slower on small grid sizes (e.g. 8x8).</p>
    </div>