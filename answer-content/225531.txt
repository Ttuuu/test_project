<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Specification</h2>

<h3>SliceBySize</h3>

<p>I have verified your method against that of the OP. The OP splits slices in chunks of desired length, with any remainder in a smaller chunk.</p>

<blockquote>
<pre><code>[TestMethod()]
public void SplitTestNotEqual()
{
    string input = "12345";
    string[] expected = new string[] { "123", "45" };
    string[] actual = input.Split(3);

    CollectionAssert.AreEqual(expected, actual);
}
</code></pre>
</blockquote>

<p>I expected your <code>SliceBySize</code> to have equivalent behavior. Instead, you add the remainder to the last chunk.</p>

<blockquote>
<pre><code>[TestMethod()]
public void SplitTestNotEqual()
{
    string input = "12345";
    string[] expected = new string[] { "123", "45" };
    string[] actual = input.SliceBySize(3, false);      // &lt;- yields "12345"

    CollectionAssert.AreEqual(expected, actual);        // &lt;- assertion failure
}
</code></pre>
</blockquote>

<p>It is not clear from your question whether this is as designed. </p>

<h3>SliceByNumber</h3>

<p><code>SliceByNumber</code> has similar behavior that no chunks are smallar than the calculated chunk size. For instance,
"OnceUponATime" split in 5 numbers yields </p>

<ul>
<li>"On", "ce", "Up", "on", "ATime" </li>
</ul>

<p>while I would expect it to return </p>

<ul>
<li>"Onc", "eUp", "onA", "Tim", "e"</li>
</ul>

<hr>

<h2>Use Cases</h2>

<p>These extensions only make sense when working with special characters and extended unicode, as described in the original question (linked in your question) and comes at a performance cost. I would not use these extensions for day to day string manipulations.</p>

<p>I would provide extensions for simple strings (used in most cases):</p>

<pre><code>namespace MyNamespace.Text
{
    public static class StringExtensions 
    { 
        // .. slice simple strings (1 character = 1 code point)
    }
}
</code></pre>

<p>And specialized extensions, in case you need the behavior of <code>StringInfo</code>.</p>

<pre><code>namespace MyNamespace.Text.Specialized
{
    public static class StringExtensions 
    { 
        // .. slice exotic strings (extended unicode, diacritics)
    }
}
</code></pre>
    </div>