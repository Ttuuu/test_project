<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since <code>Weapon</code> and <code>Attack</code> are partially related, you may need to implement each separately in order to make them flexible for future changes, and since <code>Attack</code> can be defined in multiple classes (not just for weapons), we can either implement an interface for it, or an abstract class, (or both if needed) and use it as <code>definition</code> of the attack logic.</p>

<p>If you want to define a concrete class for each weapon, and just inherit the <code>Weapon</code> class, you can do that, though, it won't be easy to handle nor to memorized; because more weapons, means more classes to handle.</p>

<p>For your current code, you could start with something like these interfaces : </p>

<pre><code>public interface IWeapon
{
    WeaponType Type {  get; set;  }
}

public interface IReloadable 
{
    double IsReloadable {  get; set;  }     
    void Reload();    
}

public interface IAttack
{
    AttackType Type { get; set; }
}
</code></pre>

<p>Then, using <code>enum</code> to define some types : </p>

<pre><code>public enum WeaponType { Katana, Shutgun, Knife }
public enum AttackType { Primary, Secondary }
</code></pre>

<p>now, we will use them in our classes</p>

<pre><code>public class Weapon : IWeapon, IReloadable
{
    public WeaponType Type { get; set; }

    public bool IsReloadable  { get; set; } 

    public void Reload()
    {
        if(IsReloadable)
        {
            .....
        }
    }
    ...
}

public class Attack : IAttack
{
    public AttackType Type { get; set; }    
    ....    
}

public class WeaponAttack
{
    private readonly Weapon _weapon; 

    private readonly Attack _attack;

    public WeaponAttack(Weapon weapon, Attack attack)
    {
        _weapon = weapon; 
        _attack = attack;
    }

    public void DoAttack()
    {
        if(_attack.Type == AttackType.Primary)
        {
            // do something..
        }       
    }   

}
</code></pre>

<p>With this, we know if we use <code>Weapon</code> or <code>Attack</code> we are defining types, and setting their properties, logic for each type to be ready for use. <code>WeaponAttack</code> will use these <code>prepared</code> objects to do some actions on them. </p>

<p>so in your example of shutgun, we'll be revised to this </p>

<pre><code>//define your weapon
var shutgun = new Weapon
{
        Type = WeaponType.Shutgun, 
        IsReloadable = true 
};
//define your attack 
var attack = new Attack
{
    Type = AttackType.Primary, 
    DamagePoints = 2.5
}; 

// take the action 
var attackAction = new WeaponAttack(shutgun, attack); 
attackAction.DoAttack();
</code></pre>

<p>This is the simplest form that came to my mind. It'll be easy to extend, for instance, say you want to add a new interface <code>IDamage</code> for storing damage points per attack : </p>

<pre><code>public interface IDamage
{
    double DamagePoints { get; set; }
}
</code></pre>

<p>Then, you just implement it on <code>Attack</code> class : </p>

<pre><code>public class Attack : IAttack, IDamage
{
    public AttackType Type { get; set; }    

    public double DamagePoints { get; set; }
}
</code></pre>

<p>Same thing applies to the Weapon class, if you want to add new features, it would be easy to add with minimal modifications to the current code. Also, I would prefer to change the constructor on <code>WeaponAttack</code> to accept the interfaces instead of the concrete class, it would be more fixable this way. But I used the concrete classes just for demonstration purpose. </p>
    </div>