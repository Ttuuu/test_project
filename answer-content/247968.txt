<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your approach is wrong. It creates too complex code for a very simple and common problem. To use a sort of event aggregator to report progress is overkill.</p>
<p>First notice that you generally distinguish between IO bound tasks and CPU bound tasks. CPU bound tasks are executed on a background thread. The performance of CPU bound tasks can be improved by using multi threading. For example calculations are CPU bound.<br>
CPU bound tasks should be executed in parallel using background threads.</p>
<p>Reading from a file or download data are IO bound tasks. The performance of IO bound tasks cannot be improved using multiple threads, but by improving the IO devices. For example a download's performance is not limited by available CPU resources, but transfer rate or other network conditions and hardware. Using a thread for IO bound tasks is a waste of resources, since IO bound operations generally require almost no CPU resources.<br>
IO bound tasks should be executed asynchronously or event-driven.</p>
<p>This means you should check the library you are using to download resources for asynchronous methods and await them e.g. <code>await DownloadAsync()</code>. Alternatively subscribe to corresponding API events e.g. <code>DownloadProgressChanged</code>. Every modern UI related API exposes asynchronous methods.</p>
<p>Since all <code>DispatcherObject</code> objects are associated with a <code>Dispatcher</code> and each thread has its own <code>Dispatcher</code>, you can't use or access a <code>DispatcherObject</code> on a different thread then the thread the <code>DispatcherObject</code> was created on. Except the <code>DispatcherObject</code> derives from <code>Freezable</code> and is in a frozen state.<br>
To access a <code>DispatcherObject</code> from a different thread you must use the associated <code>Dispatcher</code>.</p>
<p>The following examples show how to update e.g., a <code>Progressbar</code> from a background thread:</p>
<p><strong>MainWindow.xaml</strong></p>
<pre><code>&lt;Window&gt;
  &lt;Progressbar x:Name="CompressionProgressbar" /&gt;
&lt;/Window&gt;
</code></pre>
<p><strong>MainWindow.xaml.cs</strong></p>
<pre><code>private async Task CompressData()
{
  // Start a background thread
  await Task.Run(() =&gt;
  {
    // Access the DispatcherObject from a background thread 
    // using the associated Dispatcher
    this.Dispatcher.Invoke(() =&gt; this.CompressionProgressbar.Value = 33.33);
  });
}
</code></pre>
<p>Since .NET 4.5 the recommended approach is to use <a href="https://docs.microsoft.com/en-us/dotnet/api/system.iprogress-1?view=netcore-3.1" rel="nofollow noreferrer"><code>IProgress&lt;T&gt;</code></a> to report progress (or delegate data back to the UI thread). The library offers a ready to use implementation, the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.progress-1?view=netcore-3.1" rel="nofollow noreferrer"><code>Progress&lt;T&gt;</code></a> class. The constructor captures the current <code>SynchronizationContext</code> to post the registered callback to it. Therefore it is important to create the instance on the UI thread and then pass it to the background thread.</p>
<pre><code>private async Task CompressData()
{
  // Create an instance of Progress&lt;T&gt; using the constructor
  // to register the callback which will be executed on the current thread e.g. to report the progress
  var progressReporter = new Progress&lt;double&gt;(progressValue =&gt; this.CompressionProgressbar.Value = progressValue);

  // Start a background thread
  await Task.Run(() =&gt;
  {
    // Access the DispatcherObject from a background thread 
    // using the IProgress&lt;T&gt; instance
    progressReporter.Report(33.33);
  });
}
</code></pre>
    </div>