<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I figured out how to do this with a ton of set math and generalised it to N acceptable repetitions of each items. Here is the code below with a ton of print statements to help understanding and what I consider to be an acceptable amount of code duplication.</p>

<pre><code>import numpy as np
import random


n_items = 6
pick_lim = 2

nums = list(range(n_items-1))
indices = set(range(len(nums)))

picked = list(np.zeros(len(nums), dtype=int))
picked_lim = set()
picked_pairs = {n: set() for n in range(len(nums))}
res = []

for n in range(n_items):
    a_pick = indices - picked_lim
    print(f"pick from {a_pick}")
    if len(a_pick) == 0:
        break
    a_idx = random.sample(a_pick, 1)[0]

    picked[a_idx] += 1
    if picked[a_idx] == pick_lim:
        print(f"a {a_idx} was picked twice!")
        picked_lim.add(a_idx)
        print(picked_lim)

    b_pick = indices - {a_idx} - picked_lim - picked_pairs[a_idx]
    if len(b_pick) == 0:
        break
    print(f"pick from {b_pick}")
    b_idx = random.sample(b_pick, 1)[0]

    picked[b_idx] += 1
    if picked[b_idx] == pick_lim:
        print(f"b {b_idx} was picked twice!")
        picked_lim.add(b_idx)
        print(picked_lim)

    picked_pairs[a_idx].add(b_idx)

    res.append((nums[a_idx], nums[b_idx]))
    print(f"{res[-1]}\n")

print(res)
</code></pre>

<p>Bonus Internet points for generalizing this algo to triplets.</p>
    </div>