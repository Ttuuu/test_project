<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>About the code:</p>

<ol>
<li><code>List&amp; operator =(const List&lt;T&gt;&amp;)=default;</code> and <code>List(const List&lt;T&gt;&amp;)=default;</code> provide excellent opportunity to get double delete with 100% chance of success.</li>
<li>Your linked list required data to be copyable and it copies it on usage. It is bad, since now you cannot store data like <code>std::unique_ptr</code> that are not copyable. Also it is inefficient as it will have to copy large data structures like <code>std::vector</code> instead of moving their internal data around. Utilize <code>std::move</code> in functions like <code>push_back/push_front</code>.</li>
<li>Functions <code>front()/back()</code> should return data by reference so user can modify them. Also you ought to implement their <code>const</code> versions that return data by const reference (or by value for trivial enough data types).</li>
<li><code>std::list</code> stores also the size of the list so the function call is lazy unlike your implementation. People generally assume that <code>size()</code> is a fast operation which is not the case in your implementation.</li>
<li>Normally in a linked-list you store both <code>head</code> and <code>tail</code> as otherwise all operations regarding the other end are ridiculously slow.</li>
<li><code>std::cout</code> is not exactly thread safe. It doesn't crash or cause malfunctions but it might can mingle the characters you print. In a multi-threaded environment you need a logger.</li>
<li>Wait... your linked-list doesn't provide any options for iterating over elements. Only adding / deleting / exploring elements at the head/tail and even those are slow. You need iterators or something. One important aspect of a linked list is ability to move elements from one list to another efficiently. This functionality doesn't exist in this implementation.</li>
<li>Your mutex <code>m</code> is shared across all your linked lists-instances and types. If you want any sensible implementation of multi-threaded linked with mutexes list you ought to privately store a <code>std::unique_ptr&lt;std::mutex&gt;</code> for each instance of the linked-list.</li>
<li>Honestly, I don't know why you want to use a linked list or implement one - it is one of the slowest and most inefficient data structures.</li>
</ol>

<p>In general, I don't think that it is a good idea to make a thread-safe linked-list. Make a concurrent linked-list at most I'd say (I not too familiar on this topic as far as I am aware it is still being researched). Just use <code>std::list</code> and have an associated mutex nearby so whenever user wants to do something with the list - they have to lock the mutex. It might be annoying to write and relying on the user to use it right is problematic but frequently user needs to make composite operations (several in a row without interruptions) which will result in program errors if another users locks the list in between these operations and does something with it.</p>
    </div>