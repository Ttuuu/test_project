<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><code>Remove...</code> family methods fail with an exception if from the list is of size 1. <code>pointer.Previous == null</code> does not mean that <code>pointer.Next</code> is not.</p></li>
<li><p>It is quite important to convey a success/failure of the removal to the caller. <code>Remove</code> should return at least a boolean.</p></li>
<li><p>I am not sure why do you disallow a <code>Node</code> having <code>null</code> data. In any case, if you want to enforce it, do it in a <code>Node</code> constructor, rather than in insertion methods.</p></li>
<li><p><code>AddHead</code> should be streamlined. After all, the <code>new Node</code> is created in both branches, and becomes <code>head</code> no matter what. Lift the common functionality out:</p>

<pre><code>public void AddHead(T item)
{
    var node = new Node(item);
    node.Next = _head;

    if (_head == null &amp;&amp; _tail == null)
    {
        _tail = node;
    }
    else
    {
        _head.Previous = node;
    }
    _head = node;
}
</code></pre>

<p>Ditto for <code>AddTail</code>.</p></li>
<li><p>A <code>while (pointer.Data.Equals(item) == false)</code> loop deserves to become a <code>Find</code> method.</p></li>
</ul>
    </div>