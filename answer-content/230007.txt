<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Const capitalization</h2>

<pre><code>cream = '#fafaeb'
umber = '#21201f'
</code></pre>

<p>should be</p>

<pre><code>CREAM = '#fafaeb'
UMBER = '#21201f'
</code></pre>

<h2>Dict lookups</h2>

<pre><code>    if event.char == 'u':
        direction = 'UP'
    if event.char == 'd':
        direction = 'DOWN'
    if event.char == 'r':
        direction = 'RIGHT'
    if event.char == 'l':
        direction = 'LEFT'
</code></pre>

<p>Make a dictionary where the keys are your individual letters and the values are the output direction. This will reduce the actual lookup code to one line.</p>

<p>Do similarly for this block:</p>

<pre><code>        # direction logic
        directional_additive = 0
        if direction == 'RIGHT':
            directional_additive = numpy.array([arc_width,0])
        if direction == 'LEFT':
            directional_additive = numpy.array([-arc_width,0])
        if direction == 'UP':
            directional_additive = numpy.array([0,-arc_width])
        if direction == 'DOWN':
            directional_additive = numpy.array([0,arc_width])
</code></pre>

<p>as well as your <code>normalizer</code> assignment, and so on. In fact, this pattern of four lookups happens so very often that you're probably better off making a <code>Direction</code> class with four instances. Each instance would hold all data specific to its direction.</p>

<h2>Functions</h2>

<p>Try to move your globally-scoped code into logical functions or classes (as appropriate).</p>

<h2>Grammar</h2>

<p><code>indice</code> should actually be <code>index</code>, plural <code>indices</code>.</p>

<h2>Logical, not bit-wise, operations</h2>

<pre><code>    if even_row &amp; even_column:
</code></pre>

<p>Those variables are boolean, so use <code>and</code> instead of <code>&amp;</code>.</p>

<h2>In-place addition</h2>

<pre><code>coords = coords + numpy.array([0, 0 + grid_indice, 0, 0 + grid_indice])
</code></pre>

<p>should be</p>

<pre><code>coords += numpy.array([0, 0 + grid_indice, 0, 0 + grid_indice])
</code></pre>

<h2>Exclusive or</h2>

<p>First, </p>

<pre><code>    if even_row &amp; even_column:
        Box(tuple(box_coords))
    elif odd_row &amp; odd_column:
        Box(tuple(box_coords))
</code></pre>

<p>shouldn't have an <code>elif</code> at all. Your second branch does the exact same thing as your first. Instead, use</p>

<pre><code>if (
   even_row and even_column or
   odd_row and odd_column
):
</code></pre>

<p>If you want to get fancier, recognize that this is an <em>exclusive nor</em>:</p>

<pre><code>if not (even_row ^ even_column):
</code></pre>
    </div>