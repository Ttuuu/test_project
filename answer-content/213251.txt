<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Hello and thank your for your code. I dont' know what kind of improvements you want but from an Object Oriented perspective I see some improvements.</p>

<p>The first one is to get rid of all the static methods and fields. You can easily move all your methods to an <code>AsciiTable</code> class with a <code>print(OutputStream out):void</code> method.</p>

<p>You can also use <em>arrays</em> instead of list and split the single argument to one for the columns titles and another for the content. This will clarify the initiliazation of your table.</p>

<pre><code>Table table = new Table(
    new String[]{"Name", "Sex", "Age"},
    new Object[][]{
            {"Klaus Ulbrecht", "male", 12},
            {"Dieter", "male", 14},
            {"Ursula", "female", 16}
        });
</code></pre>

<p>As you can see I changed the order so that the cognitive load is reduced, by 
looking at the declaration we alrdeay have an idea of what are the titles and the content. We read for top to bottom, so it is more easier to have a declaration that already looks like that. This avoid your brain to switch the representation.</p>

<p>Another improvement that you can do is apply the <em>separation of concerns</em> principle by moving the "printing" away of the table. This is done easily with the <em>builder</em> where your <code>Table</code> is a director that drive a <code>Format</code>.</p>

<p>With this pattern you should be able to add another representation without changing the <code>Table</code>.</p>

<pre><code>interface Format {
    void startHeader();
    void endHeader();

    void startBody();
    void endBody();

    void startRow();
    void endRow();

    void addColumn(Object value);
}

Format console = new Ascii(System.out, "   "); 
table.writeTo(console);
</code></pre>

<p>Now that your model (<code>Table</code>) is separated from the view (<code>Format</code>) you may discover that the model is quite simple and exists mainly to drive the view as the director in the builder pattern. But you can add new methods to filter or sort your table.</p>

<pre><code>Table table = new Table(
    new String[]{"Name", "Sex", "Age"},
    new Object[][]{
            {"Klaus Ulbrecht", "male", 12},
            {"Dieter", "male", 14},
            {"Ursula", "female", 16}
    });
table.filter(1, "male"::equalsIgnoreCase)
     .sort(2, Comparator.naturalOrder())
     .writeTo(console);

Name             Sex    Age   
Klaus Ulbrecht   male   12    
Dieter           male   14          
</code></pre>

<p>If you don't want to migrate to the object oriented way you can still improve the robustness of your code by dealing with empty columns or rows.</p>

<p>[1] Single Responsibility Priniciple is part of the S.O.L.I.D. acronym. <a href="https://en.wikipedia.org/wiki/SOLID" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/SOLID</a></p>

<p>[2] When I speak about the builder pattern I refer to the creational pattern. Not the "fluent way of writing". <a href="https://en.wikipedia.org/wiki/Builder_pattern" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Builder_pattern</a></p>
    </div>