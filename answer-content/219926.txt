<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Interface</h1>
<h2>Naming</h2>
<p>Functions returning a <code>bool</code> should be phrased as a question. <code>empty</code> should be <code>is_empty</code> instead. Yes, the standard library does it wrong too, leading to confusion like "I used <code>vector.empty();</code>, but it didn't empty my vector. Why?"<br>
<code>get</code> should be <code>pop</code> or <code>pop_get</code>. Getters are not supposed to change the object.<br>
Note that it is impossible to write <code>get</code> with the <a href="https://en.cppreference.com/w/cpp/language/exceptions" rel="nofollow noreferrer">strong exception guarantee</a>, which is the reason why <code>std::vector::pop_back</code> returns <code>void</code> instead of the element.</p>
<h2><code>constexpr</code></h2>
<p>Currently you can mark all your functions <code>constexpr</code>. Sometimes it is possible to evaluate the result of your <code>CircularBuffer</code> at compile time. That probably rarely comes up, but there is no good reason not to do it (yet).</p>
<h2>Generality</h2>
<h3>Type restrictions</h3>
<p>There are limits for what <code>T</code>s I can use your <code>CircularBuffer</code> with. <code>T</code> must be copyable and default constructible. That means I cannot use a <code>struct Foo{ Foo(int); };</code> or a <code>std::unique_ptr&lt;int&gt;</code>. Arguably those should be allowed.</p>
Move-Only
<p>Supporting move-only types is possible by using <code>std::move</code> in the appropriate spots, mainly <code>buffer[head] = std::move(item);</code> and <code>auto result = std::move(buffer[tail]);</code>. Just try to use a <code>CircularBuffer&lt;std::unique_ptr&lt;int&gt;&gt;</code> and the compiler will tell you about each spot.</p>
Non-Default-Constructible
<p>To be able to use <code>CircularBuffer&lt;Foo&gt;</code> you would need to delay constructing objects until the user uses <code>put</code>. You can achieve that by changing <code>std::array&lt;T, sz&gt; buffer;</code> to <code>alignas(alignof(T)) std::array&lt;char, sz * sizeof(T)&gt; buffer;</code>. That way no <code>T</code>s are default constructed. When you add an element in <code>put</code> you have to placement <code>new</code> the element: <code>new (&amp;buffer[head * sizeof(T)]) T(std::move(item));</code>. <code>get</code> then has to call <code>std::destroy_at(reinterpret_cast&lt;T*&gt;(&amp;buffer[tail * sizeof(T)]));</code> (or just call the destructor). This makes things more complicated and also <code>reinterpret_cast</code> and <code>new</code> are not <code>constexpr</code>.</p>
Brick Types
<p>Some types like <code>std::mutex</code> cannot be copied or moved, but you could still support them. To do that, offer an <code>emplace</code> function similar to <code>std::vector::emplace_back</code> that constructs the  <code>T</code> in place from a given list of arguments.</p>
<h2><code>get</code> Return Type</h2>
<p>Returning a <code>T</code> by value seems reasonable. You are taking out the element. Returning a <code>T &amp;</code> instead seems dangerous, because usage of the buffer will eventually change the value you got. Maybe add 2 <code>peek</code> functions instead that return a reference to the current object without removing it. One of the functions would be <code>T &amp;peek()</code> and the other <code>const T &amp;peek() const</code>.</p>
<h1>Bugs</h1>
<h2><code>empty</code> When Full</h2>
<pre><code>CircularBuffer&lt;int, 3&gt; b;
b.put(1);
b.put(2);
b.put(3);
std::cout &lt;&lt; std::boolalpha &lt;&lt; b.empty();
</code></pre>
<p>That should really not print <code>true</code>.</p>
<h2>Over- and Underflow</h2>
<p>If I <code>put</code> more items into the buffer than it has space it silently overwrites objects. If I try to <code>get</code> items without putting items in, it simply returns uninitialized objects which is undefined behavior for builtins. This is my fault for using your container incorrectly, but you could be nice and add an <code>assert</code> so that I can find my bug easier.</p>
<h2><code>inline</code></h2>
<p>Your functions are already implicitly marked <code>inline</code> which changes the linkage and has nothing to do with inlining. Whether inlining is the right choice is a complicated case-by-case question that you should leave to your compiler. Only use <a href="https://en.cppreference.com/w/c/language/inline" rel="nofollow noreferrer"><code>inline</code></a> to mean "I want internal linkage", which you can also do for variables since C++17.</p>
    </div>