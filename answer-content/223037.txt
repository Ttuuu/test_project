<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>Command="$3"
for (( i=4 ; i&lt;="$#"; i++)); do
    Command="${Command} ${!i}"
done
# …
${Command} &amp;
</code></pre>
</blockquote>
<p>Much cleaner to just reference the end of the <code>$@</code> array directly.  Since you're running the commands later, and would like to keep quoting intact, use an array:</p>
<pre><code>declare -a Command=( "${@:3}" )

"${Command[@]}" &amp;
</code></pre>
<hr>
<blockquote>
<pre><code># Break if the process has stopped running
if [[ ${mem} == "" ]]; then
    break
fi
</code></pre>
</blockquote>
<p>The idiomatic way to test for process existence is with <code>kill -0</code>, as in:</p>
<pre><code> kill -0 $pid || break
</code></pre>
<p>Since <code>$mem</code> is a number, or empty, an arithmetic test is good too:</p>
<pre><code>(( mem )) || break
</code></pre>
<hr>
<blockquote>
<pre><code>if [ "${mem}" -gt "${MemoryPeak}" ]; then
    MemoryPeak=$mem
fi

if [ "${MemoryPeak}" -gt "${MaxMemory}" ];then
    #echo "process consumed too much memory"
    kill ${pid}
    break
fi
</code></pre>
</blockquote>
<p>Prefer parentheses over single brackets (or double brackets) for arithmetic operations:</p>
<pre><code> (( MemoryPeak = ( mem &gt; MemoryPeak ? mem : MemoryPeak ) ))
 
 if (( MemoryPeak &gt; MaxMemory )); then # etc.
 
</code></pre>
<hr>
<blockquote>
<pre><code> # If it consumed too much CPU time, then kill
</code></pre>
</blockquote>
<p>You're measuring wallclock time, not CPU time.  There's also some slop:  <code>timeBefore</code> is recorded when the script collects it, which might not be close to the binary invocation time.  Better to read the <code>times</code> and <code>cputimes</code> values from <code>ps</code>, and calculate with those:</p>
<pre><code> MaxElapsed= # …
 MaxCPU= # …
 # …
 read mem dt ct &lt;&lt;&lt; $( ps --no-headers -o rss,etimes,cputimes -p$pid )
 # …
 if (( dt &gt; MaxElapsed || ct &gt; MaxCPU )); then # …
 
</code></pre>
<hr>
<blockquote>
<pre><code>timeAfter=$(date +"%s")
timeUsage=$((timeAfter - timeBefore))
</code></pre>
</blockquote>
<p>See timing comments above.  If you make the outer loop condition <code>kill -0 $pid</code>, you can simply reference <code>$dt</code> here.</p>
<hr>
<h2>Putting it all together:</h2>
<pre><code> MaxMemory=$1 MaxElapsed=$2 MaxCPU=$3 Command=( "${@:4}" ) MemoryPeak=0
 "${Command[@]}" &amp; pid=$!
 while kill -0 $pid; do
    read mem dt ct &lt;&lt;&lt; $( ps --no-headers -o rss,etimes,cputimes -p$pid )
    (( mem )) || break
    (( MemoryPeak = ( mem &gt; MemoryPeak ? mem : MemoryPeak ) ))
    (( MemoryPeak &gt; MaxMemory || dt &gt; MaxElapsed || ct &gt; MaxCPU )) &amp;&amp; kill $pid &amp;&amp; wait $pid  # loop conditional will break for us
done
echo "MEM $MemoryPeak ELAPSED $dt CPU $ct"
</code></pre>
    </div>