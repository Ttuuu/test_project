<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As far as I understand, the only difference between <code>if</code> / <code>else</code> branches is that the output has HTML tags in one case and is plain text in another.
We can use this to simplify the statements.</p>

<p>Let's create 2 helper functions:</p>

<pre><code>def heading(text, format: false)
  format ? simple_format(text, {}, wrapper_tag: "h6") : text
end

def paragraph(text, format: false)
  format ? simple_format(text) : text  
end
</code></pre>

<p>Here we return either html or text based on the value of <code>format</code> argument (which is the <code>view</code> basically).</p>

<p>Second step would be removing one of the branches and turning another one into a <code>case</code>. As a side effect we avoid typos like the one you have in <code>agreement_type = 'agreement_1'</code> (which almost always guarantees the developer a very fun debugging session).</p>

<p>After that the code can be divided into 4 blocks, one for each of the states. We extract these blocks into proper methods.</p>

<p>So the final code might look like that:</p>

<pre><code>def heading(text, format: false)
  format ? simple_format(text, {}, wrapper_tag: "h6") : text
end

def paragraph(text, format: false)
  format ? simple_format(text) : text  
end

def agreement_type_explanation(view, state, agreement)
  # Here be headers

  case state
  when 'state_1' then explanation_for_state1(view, agreement_type)
  when 'state_2' then explanation_for_state2(view, agreement_type)
  when 'state_3' then explanation_for_state3(view, agreement_type)
  else agreement_for_unknown_state(view, agreement_type)
  end
end

def explanation_for_state1(view, agreement_type)
  case agreement_type
  when 'agreement_1'
    heading(heading_1, format: view) +
    paragraph(paragraph_1, format: view)
  when 'agreement_2'
    heading(heading_1, format: view) +
    paragraph(paragraph_2, format: view)
  else
    heading(heading_2, format: view) +
    paragraph(paragraph_3, format: view)
  end
end

def explanation_for_state2(view, agreement_type)
  case agreement_type 
  when 'agreement_1'
    heading(heading_1, format: view) +
    paragraph(paragraph_1, format: view) +
    heading(heading_2, format: view) +
    paragraph(paragraph_4, format: view)
  when 'agreement_2'
    heading(heading_1, format: view) +
    paragraph(paragraph_2, format: view) +
    paragraph_4
  else
    heading(heading_2, format: view) +
    paragraph(paragraph_3, format: view) +
    paragraph_4
  end
end

def explanation_for_state3(view, agreement_type)
  heading(heading_2, format: view) +
  paragraph(paragraph_5, format: view) +
  heading(heading_2, format: view) +
  paragraph(paragraph_6, format: view)
end

def explanation_for_unknown_state(view, agreement_type)
  heading(heading_3, format: view) + paragraph(paragraph_7, format: view)
end
</code></pre>

<p>I would also move all the static strings out of the models and put them in a I18n file. After that hey can be accessed via <code>I18n.t('agreement_explanations.header1')</code> etc.</p>
    </div>