<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>this.values = []</code> will never be used.  It is unnecessary.</p>

<pre><code>setValues($event: string) {
    //this.values = []; //unnecessary
    this.values = Object.values(this.substantiveFormGroup.value); // the user choices from the form group saved to an array 
    this.setDeclination(this.values);
  }
</code></pre>

<p>The code's logic will always set a value for <code>this.declination</code>, so it makes sense to just assign it at the top, so you know that <code>this.declination</code> will always be overwritten and by default should be initialized to an empty array.  It also allows the code to be shorter.<br>
If there will be more than two conditions, you should probably have them in a list anyways.  This way of organizing still benefits, and the use of an array list and destructuring with <code>for of</code> loop expresses the code's use of conditions to check for and suffixes to use in an organized list in one place, as well as shortening the code significantly and making it more concise.<br>
The result is that it can be more simply read as an iteration on a list of conditions to process.<br>
Brevity and DRY naturally occurs when it is distilled this way.</p>

<pre><code>setDeclination(values) {
    this.declination = [];
    for (const [condition, suffixes] of [
     [this.conditionOne, this.conditionOneSuffixes],
     [this.conditionTwo, this.conditionTwoSuffixes]
    ])
       if(condition.every(i =&gt; values.includes(i))) {
         const inputValue = this.substantiveFormGroup.get("input").value;
         this.declination = suffixes.map(suffix =&gt; inputValue + suffix));
         break;
       }
 }
</code></pre>

<p>I have made some modifications to the formatting and the declaration of variables to control line length and make the code more concise, and it should be mostly self-explanatory.</p>
    </div>