<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you should have a <code>Game</code> class, which the user would call like so:</p>

<pre><code>Game(number_of_games=10)
</code></pre>

<p>The <code>Game</code> instance would then keep track of the games by itself.</p>

<p><code>Game</code> would then call <code>GameEngine</code> which would handle <strong>only one game</strong> and would  be run like so:</p>

<pre><code># somewhere in `Game`
result = GameEngine().run()
self.report(result)
</code></pre>

<p>I think all the report stuff should go in the <code>Game</code> class itself as methods. If I am not clear enough, maybe I should draw you a picture...</p>

<pre><code>├── Game
│   │ with attributes to keep track of the score
│   ├── __init__(number_of_games)
│   ├── nextgame()
│   └── report(result)
│
└── GameEngine
    │ with attributes to keep track of the board
    ├── __init__()
    └── ... the game engine ...
</code></pre>

<p><code>Game</code> would be kind of the "meta" version of <code>GameEngine</code> if you think of it like that. The user won't be exposed to the internals of the game but only to the "launcher".</p>

<p>What is the separation of concerns. Well <code>Game</code> doesn't care about the board. </p>

<p>And <code>GameEngine</code> doesn't care about the user, and the score. </p>

<p>You can test the <code>GameEngine</code> easily because it only includes the core stuff. </p>

<p>You can test <code>Game</code> easily by using <code>Mocking</code>. How can I do "mocking" ? Simple add this before doing <code>unittesting</code>:</p>

<pre><code>class GameEngine:
    def run(): return 'Tie'
</code></pre>

<p>See <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer"><code>unittest.mock</code></a> for more info.</p>
    </div>