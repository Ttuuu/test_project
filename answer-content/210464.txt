<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If this were my project, I'd certainly entertain the idea of using regex.  Now, it is common knowledge that regular expressions typically offer flexibility with a cost of drag on efficiency. However, because it avoids reading line by line and so many iterated explosions, there may be a chance that it performs well on your large data size.  (no guarantees, just a suggestion to benchmark)</p>

<p>Code:</p>

<pre><code>$zip = '67401';
if (preg_match_all("~^{$zip},([^,]+),([^,]+)$~m", file_get_contents('zip.csv'), $matches)) {
    foreach ($matches[1] as $index =&gt; $city) {
        $result[$city][$matches[2][$index]] = $matches[2][$index];
    }
}
var_export($result);  // see the correct/desired result
</code></pre>

<p>The simple above pattern, matches one whole line at a time by using anchors <code>^</code> and <code>$</code>.  The <code>$zip</code> variable is wrapped in curly braces as a matter of personal preference / readability, but it is not captured, because the value is known and it is not used in the output.  By using negated characters classes containing commas, the regex engine can move with maximum efficiency (in a greedy fashion).</p>

<hr>

<p>Alternatively, it seems a good idea to <code>break</code> early (assuming your csv file is already sorted by zipcode).  Of course, a function like <code>fgetcsv()</code> is a very sensible/reliable tool for processing rows of csv data.  The following snippet largely resembles @Victor's answer.</p>

<pre><code>$zipcode = '67401';
$result = [];
$handle = fopen('zip.csv', 'r');
while (($row = fgetcsv($handle)) !== false) {
    if ($zipcode == $row[0]) {
        $result[$row[1]][$row[2]] = $row[2];
    } elseif ($result) {  // the current row doesn't match $zipcode; and $result is not empty
        break;
    }
}
fclose($handle);
var_export($result);
</code></pre>

<p>and of course, if you prefer to write meaningful variables names, you can make iterated declarations of <code>$zip</code>, <code>$city</code>, and <code>$district</code> if you like, by way of <a href="https://webdevetc.com/blog/php-7-array-destructuring-explained" rel="nofollow noreferrer">array destructuring</a>.</p>

<p>p.s. If your csv data is not already pre-sorted and you require the output to be sorted in a particular way, please express these facts in your question.</p>
    </div>