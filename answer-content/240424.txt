<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First some basic observations:</p>

<ol>
<li><p>Your <code>running</code> variable is shared across all <code>CoffeeMachine</code> objects -- as soon as you create one <code>CoffeeMachine</code>, it starts itself, and then any subsequent <code>CoffeeMachine</code> you create anywhere in the universe is also "running" and so it doesn't start itself!  Unless this is a property you intended it to have (it would certainly not match the behavior of real-world coffee machines), you should make <code>running</code> an instance variable (i.e. put it in the <code>__init__</code>), or better yet, not have it at all (since you immediately initialize it anyway and never use it for anything else thereafter -- if a machine is always "running" as soon as it's created, no point in having a bool to indicate that state).</p></li>
<li><p>Some of your instance variables are created after <code>__init__</code>.  Python lets you do this, but it's considered bad practice because it's very easy to have bugs where you access a variable before it's initialized.  In general, all instance variables should be declared in <code>__init__</code>.</p></li>
<li><p>Your <code>self.reduced</code> variable is only used for <code>available_check</code> and <code>deduct_supplies</code>, which are called immediately after <code>reduced</code> is set -- <code>reduced</code> should simply be a parameter.  If it's a parameter, then you know that its value doesn't matter after those functions return (which is the case) and you don't need to worry about what other parts of your code setting <code>self.reduced</code> might affect.  The general rule here is that state should be as "short-lived" and/or "narrowly scoped" as possible.  (edit: as I go through the rest of the code, I see that there's a common pattern of assigning values to <code>self</code> where a locally-scoped value would suffice.  Never make data more persistent than it needs to be!)</p></li>
</ol>

<p>Now, some more "big picture" notes on the structure of the methods:</p>

<ol>
<li><p>All of your actions call back to <code>return_to_menu</code> which calls back to <code>start</code>.  Maybe <code>start</code> should just loop?  That way <code>return_to_menu</code> doesn't need to get called at the end of every action method, and it's also obvious to someone reading your <code>start</code> method that it's actually a loop (you want the way your code works to be obvious to everyone who reads it).</p></li>
<li><p>Specifying the different types of objects as <code>Enum</code>s makes it a little easier to keep track of the possible values and keep different parts of your code from having different versions of them.</p></li>
<li><p>When you have associations between different pieces of data (like "type of ingredient" and "quantity"), a natural way to store that is in a dictionary.  Again, this makes it easier to keep track of things, and it also makes it easier to say "do this for every ingredient" without having to copy and paste.</p></li>
</ol>

<p>I took a few passes over this code seeing if I could convert everything into enums and dictionaries, with the general goal of never having to copy+paste the same word in multiple places, and turning all those <code>if</code>...<code>elif</code> chains into iterations or lookups.  The general pattern I've followed is to have the "name" of the enumeration be the way you refer to it in your code and the "value" be the user-visible rendering (which is usually but not always the same); in real life you'd probably have a slightly more complex (and extensible) mapping that would allow for localization, etc, but as a general demonstration of the concept I think this is good enough.  </p>

<p>Here's what I came up with; there's a lot more data declared up front that defines how the coffee machine operates, and a lot less actual code in the methods.</p>

<pre><code>from enum import Enum, auto
from typing import Dict, List

class Inventory(Enum):
    """Inventory items."""
    water = "water"
    milk = "milk"
    coffee_beans = "coffee beans"
    cups = "disposable cups"
    money = "money"

# The unit description of each inventory item.
UNITS = { 
    Inventory.water: "ml of",
    Inventory.milk: "ml of",
    Inventory.coffee_beans: "grams of",
    Inventory.cups: "of",
    Inventory.money: "of",
}

class Action(Enum):
    """Menu actions."""
    buy = "buy"
    fill = "fill"
    take = "take"
    status = "remaining"

class Product(Enum):
    """Products for sale."""
    espresso = "1"
    latte = "2"
    cappuccino = "3"

# The cost of each product.
COSTS = { 
    Product.espresso: {
        Inventory.water: 250,
        Inventory.milk: 0,
        Inventory.coffee_beans: 16,
        Inventory.cups: 1,
        Inventory.money: 4,
    },
    Product.latte: {
        Inventory.water: 350,
        Inventory.milk: 75,
        Inventory.coffee_beans: 20,
        Inventory.cups: 1,
        Inventory.money: 7,
    },
    Product.cappuccino: {
        Inventory.water: 200,
        Inventory.milk: 100,
        Inventory.coffee_beans: 12,
        Inventory.cups: 1,
        Inventory.money: 6,
    },
}

class CoffeeMachine:

    def __init__(
        self, 
        water: int, 
        milk: int, 
        coffee_beans: int, 
        cups: int, 
        money: int
    ):
        self.quantities = {
            Inventory.water: water,
            Inventory.milk: milk,
            Inventory.coffee_beans: coffee_beans,
            Inventory.cups: cups,
            Inventory.money: money,
        }

        self.run()

    def run(self) -&gt; None:
        do_action = {
            Action.buy: self.buy,
            Action.fill: self.fill,
            Action.take: self.take,
            Action.status: self.status,
        }
        actions = ', '.join(action.value for action in Action)

        while True:
            action = input(f"Write action ({actions}, exit):\n")
            print()
            if action == "exit":
                break
            do_action[Action(action)]()
            print()

    def available_check(self, cost: Dict[Inventory, int]) -&gt; bool:
        """checks if it can afford making that type of coffee at the moment"""
        for item in Inventory:
            if self.quantities[item] &lt; cost[item]:
                print(f"Sorry, not enough {item.value}!")
                return False
        else:
            print("I have enough resources, making you a coffee!")
            return True

    def deduct_supplies(self, cost: Dict[Inventory, int]) -&gt; None:
        """performs operation from the cost list, based on the coffee chosen"""
        for item in Inventory:
            self.quantities[item] -= cost[item]

    def buy(self) -&gt; None:
        products = ", ".join(
            f"{product.value} - {product.name}" for product in Product
        )
        choice = input(
            f"What do you want to buy? {products}, back - to main menu:\n"
        )
        if choice == "back":
            return
        cost = COSTS[Product(choice)]
        if self.available_check(cost):
            self.deduct_supplies(cost)

    def fill(self) -&gt; None: 
        """for adding supplies to the machine"""
        for item in Inventory:
            if item == Inventory.money:
                continue
            self.quantities[item] += int(input(
                "Write how many "
                f"{UNITS[item]} {item.value}"
                " do you want to add:\n"
            ))

    def take(self) -&gt; None:
        """for taking the money from the machine"""
        print(f"I gave you ${self.quantities[Inventory.money]}")
        self.quantities[Inventory.money] = 0

    def status(self) -&gt; None: 
        """display the quantities of supplies in the machine at the moment"""
        print(f"The coffee machine has:")
        for item in Inventory:
            print(f"{self.quantities[item]} {UNITS[item]} {item.value}")

# specify the quantities of supplies at the beginning
# water, milk, coffee beans, disposable cups, money
CoffeeMachine(400, 540, 120, 9, 550) 
</code></pre>
    </div>