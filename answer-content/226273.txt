<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It's a good idea to encapsulate transaction-management.</p>

<p>You don't go anywhere far enough though. Use <a href="https://en.cppreference.com/w/cpp/error/uncaught_exception" rel="nofollow noreferrer"><code>std::uncaught_exceptions()</code></a> to automate it more. (Before C++17, you have to use some non-standard ways to get that count.)</p>

<p>Also, while rolling back must never fail, committing may. So, mark <code>noexcept</code> and <code>noexcept(false)</code> as appropriate.</p>

<p>Last but not least, while copying a <code>std::shared_ptr</code> is not really expensive, moving it is much cheaper still.</p>

<pre><code>class SqlTransaction {
public:
    SqlTransaction(std::shared_ptr&lt;sqlite::database&gt; db_)
    : db(std::move(db_))
    { *db &lt;&lt; "begin;"; }
    ~SqlTransaction() noexcept(false) {
        auto current = std::uncaught_exceptions();
        if (count == current)
            do_commit();
        else if (count &lt; current)
            do_rollback();          
    }
    void commit() {
        if (std::exchange(count, max_count) != max_count)
            do_commit();
    }
    void rollback() noexcept {
        if (std::exchange(count, max_count) != max_count)
            do_rollback();
    }
private:
    void do_commit() {
        *db &lt;&lt; "commit;";
    }
    void do_rollback() noexcept {
        *db &lt;&lt; "rollback;";
    }

    SqlTransaction(const SqlTransaction&amp;) = delete;
    SqlTransaction&amp; operator=(const SqlTransaction&amp;) = delete;

    std::shared_ptr&lt;sqlite::database&gt; db;
    int count = std::uncaught_exceptions();
    static constexpr max_count = std::numeric_limits&lt;int&gt;::max();
};
</code></pre>
    </div>