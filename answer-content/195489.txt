<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It is good practise to define an interface (or use one that is already defined) and implement it in your class, especially for containers. That way a user can replace your implementation by another one (or vice versa) without changing any surrounding code.</p>

<hr>

<blockquote>
<pre><code>public static final int MAX_SIZE = 1040;
private int frontIndex;
private int rearIndex;
private int queueElement[];
</code></pre>
</blockquote>

<p>I like to improve readability by separating groups of members with different access modifiers with a blank line in between.</p>

<p><code>int queueElement[]</code> is valid in Java, but the syntax stems from C. I would always use <code>int[] queueElement</code>, which is more idomatic in Java. In my opinion it is also way more intuitive, because it reads like "an integer array named queueElement", rather than "an integer named queueElement array".</p>

<p>Since an array (usually) contains multiple elements, the convention is to use a plural name like <code>queueElements</code>.</p>

<hr>

<blockquote>
<pre><code>public ArrayQueue()
{
    frontIndex = 0;
    rearIndex = 0;
    queueElement = new int [MAX_SIZE];
}
</code></pre>
</blockquote>

<p>These member variables are already set to 0 by default. It is good to be explicit, but I would do it in the member declaration rather than the constructor to make the code shorter without losing readability.</p>

<hr>

<blockquote>
<pre><code>public boolean isFull()
{
    return (size() == MAX_SIZE - 1);
}
</code></pre>
</blockquote>

<p>Most users would probably expect <code>MAX_SIZE</code> to be the maximum amount of enqueued items, rather than <code>MAX_SIZE - 1</code>. I am not sure whether you thought about it as an array index, or whether this compensates for an off by one error in the <code>size()</code> method. If a user checks for the MAX_SIZE and adds 1040 items in a loop, then, because <code>enqueue()</code> neither throws an exception nor returns anything when the queue is full, the last item will just be ignored silently.</p>
    </div>