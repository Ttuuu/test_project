<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Some minor problems</h1>

<ul>
<li><p>The function counts characters in a string and is called <code>characterCounter</code> yet that is not what it does.</p>

<p>It checks if the argument is not falsy like and can be coerced to a string (which is already known to be true) and if so counts the number of lowercase characters, not spaces, and returns an object containing counts.</p>

<p>This is very problematic as any code that calls the function must also check that the result it returns is not an <code>Object</code> containing character counts but a string telling the caller that he does not know what a string is. (rude)</p></li>
<li><p>It is a semantic grinch that I would never use in my code as its name would make meaningless gibberish out of my perfect code (Yes all coders write perfect code, me more so :P).</p>

<p>Maybe  <code>mapCharacterCounts</code> would restore the balance.</p></li>
<li><p><code>Object.toString</code> is inherited from <code>Object</code>, any argument passed to the function will have a <code>toString</code> function, thus the return <code>"Invalid input"</code> will only happen if for some reason <code>toString()</code> returned a non string </p>

<p>Yes possible if someone changes the function but that is not your function's problem.</p>

<p>If we imagine that a argument could not be converted to a string then there would not be a <code>toString</code> function would there?</p></li>
<li><p>The function incorrectly counts the number of characters in </p>

<ul>
<li><code>""</code> gets (<code>"String input required"</code> ... wtf <code>""</code> is a string :( me confuseded ), </li>
<li><code>0</code> gets (<code>"String input required"</code>) </li>
<li><code>"0"</code> gets (<code>{"0":1}</code>), </li>
<li><code>true</code> gets (<code>"String input required"</code>),</li>
<li><code>false</code> gets  (<code>{f:1,a:1,l:1,s:1,e:1}</code>) </li>
</ul>

<p>to name a few.</p></li>
<li><p>If I pass something that is not string like and that would be coerced to a non representative string, eg <code>{}</code> is <code>[object Object]</code> that would return a Object that counts a very knowable quantity that does not represent the question asked of the function.</p>

<p>Personally if I called the function <code>characterCounter({})</code> I would expect an empty object as the return.</p>

<p>Hang on now I am confused, maybe I should only call the functions with something I know to be string like?</p></li>
<li><p>Using objects as maps is very ECMAScript5 and is hard to use. It would be much more useful if it returned a <code>Map</code> of character counts</p></li>
<li><p>You don't count spaces, but you count tabs, form feed, returns and all the other white space characters.</p>

<p>Why is a space uncountable yet a tab can count (in my book tab is always 4 spaces)</p></li>
</ul>

<h2>What is a string?</h2>

<p>So to make the function practical we first remove the problem of defining what is a string. Its too complicated and can change depending on need. </p>

<p>If you want you can create additional functions to do the vetting and coercion that callers can use to help them work out what type their variables are!! </p>

<p>The function has one role and that is Map Character Counts. </p>

<h2>Maybe it would be more practical as?</h2>

<pre><code>// Function count characters in the  str returning a map by character
// as {character, count}
// It's the caller's responsibility to ensure the correct type
function mapCharacterCounts(str) {
    str = (str + "").replace(/\s/g,"").toLowerCase();
    const result = new Map();
    var i;

    for (i = 0; i &lt; str.length; i++) {
        const c = str[i];
        if (result.has(c)) { result.get(c).count ++ }
        else { result.set(c, {character : c, count : 1}) }
    }
    return result;
}
</code></pre>
    </div>