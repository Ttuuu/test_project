<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Naming</h3>

<p>Some variable names should be more descriptive: </p>

<ul>
<li>What does <code>set</code> contain?</li>
<li>What does <code>num</code> count?</li>
<li>What is <code>cent</code> or <code>arrayThree</code>?</li>
</ul>

<h3>Simplifications</h3>

<p><code>if String(char) == "."</code> can be shorted to <code>if char == "."</code>, the conversion to
a string is not needed because <code>"."</code> can be both a string literal and a
character literal.</p>

<p>In </p>

<pre><code>var num = board[i].reduce(0 , {(result : Int, char : Character)
    in
    var cent = 0
    if String(char) == "."{
        cent = 1
    }
    return result + cent
})
</code></pre>

<p>the closure can be shortened to</p>

<pre><code>var num = board[i].reduce(0 , {(result, char) in
    char == "." ? result + 1 : result
})
</code></pre>

<p>without the need for a temporary variable.</p>

<p>In</p>

<pre><code>set = Set(board.reduce([Character]() , { resultArray, chars in
    return resultArray + [chars[i]]
}))
</code></pre>

<p>an array is created with the elements in column #i, and put into a set. That can be simplified to</p>

<pre><code>let column = board.map { $0[i]} // Column #i
set = Set(column)
</code></pre>

<p>and <code>column</code> can then also be used in the following count of empty fields.</p>

<p>The creation of an array of all entries of a block can be simplified using
array slices:</p>

<pre><code>let firstRow = 3 * (i / 3)
let firstCol = 3 * (i % 3)
let block = board[firstRow..&lt;firstRow+3].flatMap { $0[firstCol..&lt;firstCol+3]}
</code></pre>

<p>Generally, the check for duplicate digits in a row/column/block can
be simplified if you filter out empty fields <em>before</em> creating the set,
that makes counting the empty fields obsolete.</p>

<h3>Comments</h3>

<p>The comments</p>

<pre><code>// firstly
// secondly
// thirdly
</code></pre>

<p>are not really helpful. </p>

<h3>Putting it together</h3>

<p>Summarizing the above suggestions so far, the code could look like this:</p>

<pre><code>class Solution {
    func isValidSudoku(_ board: [[Character]]) -&gt; Bool {

        for i in 0..&lt;9 {
            // Check digits in row #i:
            let rowDigits = board[i].filter { $0 != "." }
            if rowDigits.count != Set(rowDigits).count {
                return false
            }

            // Check digits in column #i:
            let colDigits = board.map { $0[i] }.filter { $0 != "." }
            if colDigits.count != Set(colDigits).count {
                return false
            }

            // Check digits in block #i:
            let firstRow = 3 * (i / 3)
            let firstCol = 3 * (i % 3)
            let blockDigits = board[firstRow..&lt;firstRow+3].flatMap { $0[firstCol..&lt;firstCol+3]}
                .filter { $0 != "." }
            if blockDigits.count != Set(blockDigits).count {
                return false
            }       
        }

        return true
    }
}
</code></pre>

<h3>An alternative approach</h3>

<p>The Python solution can not be translated directly to Swift, one reason is
that tuples are not <code>Hashable</code> and therefore cannot be put into a set.
Also inhomogeneous collections are better avoided in Swift.</p>

<p>But we <em>can</em> enumerate the board in a similar fashion, and put each element
into a set corresponding to its row, column, and block. The return value
from the <code>insert</code> statement already indicates if an identical element was
already present.</p>

<p>That leads to the following implementation:</p>

<pre><code>class Solution {
    func isValidSudoku(_ board: [[Character]]) -&gt; Bool {
        var rowSets = Array(repeating: Set&lt;Character&gt;(), count: 9)
        var colSets = Array(repeating: Set&lt;Character&gt;(), count: 9)
        var blockSets = Array(repeating: Set&lt;Character&gt;(), count: 9)

        for (i, row) in board.enumerated() {
            for (j, char) in row.enumerated() where char != "." {
                if !rowSets[i].insert(char).inserted {
                    return false
                }
                if !colSets[j].insert(char).inserted {
                    return false
                }
                let block = (i / 3) + 3 * (j / 3)
                if !blockSets[block].insert(char).inserted {
                    return false
                }
            }
        }

        return true
    }
}
</code></pre>

<p>I haven't checked which one is more efficient, I leave that task to you :)</p>
    </div>