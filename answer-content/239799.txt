<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see a number of things that may help you improve your program.</p>

<h2>Decompose the code into smaller functions</h2>

<p>This code is very dense, very long and not well organized making it difficult to follow and understand.  As a first step, I'd recommend extracting out smaller functions, such as to calculate error values.  Each function should be small, well documented and testable.</p>

<h2>Pass needed variables</h2>

<p>Instead of relying on interspersed code and function declarations as in this code, gather things into a <code>main</code> function.  Here's one way to do that:</p>

<pre><code>if __name__ == "__main__":
    prediction = 0 # 0 means no prediction and 1 is prediction enabled

    ns3_files = ['EQ_100p_1Hz_50U.txt','EQ_100p_5Hz_50U.txt','EQ_100p_10Hz_50U.txt',
            'EQ_100p_20Hz_50U.txt','EQ_100p_30Hz_50U.txt','EQ_100p_40Hz_50U.txt',
            'EQ_100p_50Hz_50U.txt','EQ_100p_100Hz_50U.txt']

    sumo_file = ['Loc_Circle_50U.txt']
    sumo_df = pd.read_csv(sumo_file[0], delim_whitespace = True)
    sumo_headers = {'Time', 'VID', 'Pos(X)', 'Pos(Y)', 'Vel(X)', 'Vel(Y)'} 
    if validate_headers(sumo_df, sumo_headers):
        print("sumo file ", sumo_file[0], " is OK")

    [start_process(fil, sumo_df) for fil in ns3_files]
</code></pre>

<h2>Write more "pythonic" code</h2>

<p>Python makes extensive use of data structure such as lists, dictionaries and sets.  If you find yourself writing long <code>if</code> constructs as in this code, STOP!  There is almost always a better way to do it.  For example, you'll see that in the sample code above there is a <code>validate_headers</code> function.  Here's the definition</p>

<pre><code>def validate_headers(df, headerset):
    return headerset &lt;= set(df.columns.values)
</code></pre>

<p>It uses the <code>&lt;=</code> operator on two sets to determine whether one is a strict subset of the other.  In this case, we're trying to assure that all of the required fields exist in a dataframe, so we pass the dataframe and the set of header names.  Simple!</p>

<h2>Don't do redundant work</h2>

<p>The original code loads the entire dataframe of each file just to validate the header and then loads it again to actually process the data.  This is pointless and wastes time and memory.</p>

<h2>Use <code>pandas</code> as it is intended</h2>

<p>Iterating over <code>pandas</code> data, row by row using an index is the very slowest possible way to process the data.  Instead, you should seek to use <em>vectorization</em>.  For example, if you want to create a new column <code>errx</code> for each row in the dataframe, you could write this:</p>

<pre><code>df['errx'] = abs(df['TxTruePos(X)'] - df['TxHeadPos(X)'])
</code></pre>

<p>Using vectorized operations is the way pandas is intended to be used and is very efficient compared to using <code>for</code> loops.  If you find you need still more performance, however, you can use <code>numpy</code>, which you're already including but not making much use of.</p>

<h2>Understand your data</h2>

<p>I haven't validated all of it, but it appears that much of the calculation may be redundant.  For example, the program calculates an <code>error_x_val</code> but the <code>ns3_data</code> files appear to already have such a column.  If that actually contains the data you need, use it instead of recalculating.  If it doesn't, I'd suggest dropping it from the data frame if it's not useful.  That can be done like this:</p>

<pre><code>del df['Error(X)']
</code></pre>
    </div>