<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have two functions defined inline in the class definition, with the rest defined later.  For consistency these should be defined outside of the class like the others.</p>

<p>The <code>ctor_initialized</code> member variable is defined at the end of the class, while the rest of the members are defined at the top.  All the member variables should be grouped together, since it is very easy to miss that one extraneous variable.  But you don't need <code>ctor_initialized</code> at all.  It is only read in one place - <code>emplace_back</code> - and its use there is nonsensical (other places where you attempt to resize the vector don't look at it).</p>

<p>You could simplify your list of constructors by making use of default parameters and by using the <em>mem-initializer-list</em> with them.  For example, by using a default value in <code>Vector(size_t sz, const T&amp; v = T());</code> you can get rid of <code>Vector(size_t sz);</code>.  This constructor should be <code>explicit</code> to avoid accidental conversions of integers to Vectors.</p>

<p>All of the template out-of-class member function definitions do not need the <code>inline</code> keyword, since a template function definition is implicitly an inline function.</p>

<p>The code to do a reallocation should be completely contained in a member function.  You have multiple places with code that follows the "double capacity, then reallocate" pattern.  Some of them will misbehave if the capacity is 0, or the needed size is more than twice the current capacity (<code>insert(iterator pos, size_t n, const T&amp; v )</code> is one place if <code>n</code> is sufficiently large).  All this should be centralized, so that there is only one place in the code that modifies <code>m_capacity</code>.  Tweaks to <code>reallocate</code> should do it. Pass in the new minimum size required, then <code>reallocate</code> can determine what the new capacity should be (which may be more than twice the existing capacity).</p>

<p>Your class will not work with types that are not default constructable.  If you set the capacity to 100, you'll construct 100 objects.  The real <code>std::vector</code> allocates character arrays and uses placement new to solve these problems.</p>

<p>The move constructor <code>Vector(const Vector&lt;T&gt;&amp;&amp; mv)</code> is broken, because you're swapping with an unconstructed object (<code>*this</code>).  This will result in Undefined Behavior.</p>

<p>The <code>emplace</code> looks wrong.  <code>pos</code> doesn't seem to be the right type.  Should this be an integer or an iterator?  In its current form you pass a pointer to a <code>T</code>, which can be anywhere.  The calculation of <code>dist</code> will be undefined if <code>pos</code> does not point to an element of the <code>values</code> array.</p>

<p>In <code>erase( const_iterator pos )</code>, the use of <code>pow</code>, which is a floating point function, is a potential source of error.  You can simply use the bit shift operator, <code>1 &lt;&lt; inc</code>, to calculate a power of two.  Why does this function do any memory allocations? It shouldn't be. The two parameter version does not, resulting in different behavior for <code>erase(p)</code> vs <code>erase(p, p + 1)</code>.</p>

<p><code>empty()</code> can be simplified to just <code>return v_size == 0;</code>.</p>

<p>Your size and capacity members are <code>size_t</code> (assuming this is <code>std::size_t</code>, it is an unsigned type), but many of your uses compare those values with a signed number (often <code>int i</code>).  This can result in a compiler warning on some platforms (comparing a signed value with an unsigned one).  If <code>size_t</code> is a larger integer than an <code>int</code> (64 vs 32 bits), you'll have problems when <code>i</code> overflows.</p>

<p>The <code>size()</code> and <code>capacity()</code> functions return unsigned quantities as potentially smaller signed values.</p>
    </div>