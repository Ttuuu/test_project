<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<h2>Style</h2>

<blockquote>
  <p>feedback on how clear my comments were and how easy the code was to follow</p>
</blockquote>

<p>I'm not a big fan of <em>line comments</em>. I think they make the code a bit harder to follow. That's why I prefer <em>tail comments</em> along with a nice tabular layout of the labels, instructions, operands, and tail comments.<br>
And of course don't write redundant comments like "Update the disk address packet sector count" when looking at the names of the identifiers already tells what is happening.</p>

<p>You've got some pushes and pops that are fairly distant apart. If you would number these (or tag them somehow), verifying what the stack holds and whether the stack was correctly balanced becomes a bit easier.</p>

<pre class="lang-none prettyprint-override"><code>push    dx                              ; (1)
push    eax                             ; (2)

...

push    ax                              ; (3)
movzx   ax, byte [bpbSectorsPerCluster]
mov     [dapSectorCount], ax
pop     ax                              ; (3)

...

pop     eax                             ; -(2)-
push    eax                             ; -(2)-

...

pop     eax                             ; (2)

...

pop     dx                              ; (1)
</code></pre>

<h2>Optimizations</h2>

<blockquote>
<pre class="lang-none prettyprint-override"><code>mov word [dapDataOffset], dx
</code></pre>
</blockquote>

<p>Most assemblers will not require you to write this <code>word</code> size tag because the use of the <code>DX</code> register made already clear that this has to be a word-sized operation. Not writing the redundant size tag makes your code a bit clearer.</p>

<pre class="lang-none prettyprint-override"><code>mov     [dapDataOffset], dx
</code></pre>

<p>You did this several times.</p>

<hr>

<blockquote>
<pre class="lang-none prettyprint-override"><code>xor ebx, ebx
mov bl, byte [bpbSectorsPerCluster]
</code></pre>
</blockquote>

<p>The instruction set has the <code>MOVZX</code> instruction for this kind of situations. It will also reduce the code's footprint which is important in a bootloader that is limited to just 512 bytes. Notice that here the <code>byte</code> size tag is required.</p>

<pre class="lang-none prettyprint-override"><code>movzx   ebx, byte [bpbSectorsPerCluster]
</code></pre>

<p>You did this several times.</p>

<hr>

<blockquote>
<pre class="lang-none prettyprint-override"><code>push eax
xor ax, ax
mov al, byte [bpbSectorsPerCluster]
mov word [dapSectorCount], ax
pop eax
</code></pre>
</blockquote>

<p>Pushing and popping the 32-bit register <code>EAX</code> from real address mode uses an operand size prefix. In this case the high word was never changed and so you can shave off 2 bytes if you only push/pop <code>AX</code>.  </p>

<p>Better still, the program doesn't need you to preserve <code>AX</code> at this point. Again 2 bytes less.</p>

<pre class="lang-none prettyprint-override"><code>movzx   ax, byte [bpbSectorsPerCluster]
mov     [dapSectorCount], ax
</code></pre>

<hr>

<blockquote>
<pre class="lang-none prettyprint-override"><code>pop eax
and ax, 0x007F

; Multiply offset by 4 to get it in bytes
shl ax, 2

; Calculate the memory address of the cluster in the FAT
add ax, 0x7E00

; Read cluster value
mov bx, ax
mov eax, dword [bx]
</code></pre>
</blockquote>

<p>Here's another opportunity to shave off a byte. Pop the value directly in the register that you'll use to retrieve the cluster number: </p>

<pre class="lang-none prettyprint-override"><code>pop     ebx
and     bx, 0x7F
shl     bx, 2      ; Multiply offset by 4 to get it in bytes
add     bx, 0x7E00 ; Calculate the memory address of the cluster in the FAT
mov     eax, [bx]  ; Read cluster value
</code></pre>

<p>Exactly the same length but less instructions:</p>

<pre class="lang-none prettyprint-override"><code>pop     ebx
and     ebx, 0x7F
mov     eax, [ebx*4 + 0x00007E00]  ; Read cluster value
</code></pre>

<hr>

<blockquote>
<pre class="lang-none prettyprint-override"><code>; Update the disk address packet sector count
mov word [dapSectorCount], 1

; Update the disk address packet data offset to load the fat to 0x7E00
mov word [dapDataOffset], 0x7E00
</code></pre>
</blockquote>

<p>The above instructions total 12 bytes. Because <em>dapSectorCount</em> and <em>dapDataOffset</em> follow each other in memory, you can combine the writes. The total then becomes 9 bytes.</p>

<pre class="lang-none prettyprint-override"><code>; Update dapSectorCount=1 and dapDataOffset=0x7E00 together
mov     dword [dapSectorCount], 0x7E000001
</code></pre>

<p>This last optimization is of course killing readability in favor of code size. Your choice!</p>

<h2>Beware</h2>

<p>Your <em>loadClusterChain</em> routine uses some 32-bit registers. Given that this is 16-bit code the <code>pusha</code> and <code>popa</code> instructions will not preserve the high words. Maybe this can become a problem for the rest of your program!</p>
    </div>