<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What's the point of <code>_continuations</code>? I can see three options which use a single dictionary:</p>

<ol>
<li>Just store and return <code>concreteTask</code>. If this fails because the continuation is GC'd, document this for the benefit of maintainers.</li>
<li>Just store and return the continuation. If this fails because the continuation is executed multiple times, document it.</li>
<li>Store the task and return the continuation, so the first caller has the hard reference. I can't think how this could fail unless the caller actively discards the task.</li>
</ol>

<p>TL;DR: if there are obvious ways of simplifying the code which break for non-obvious reasons, document the reasons so that the maintainer doesn't break it.</p>

<hr>

<p>A further advantage of using a single dictionary would be that you could use <code>ConcurrentDictionary</code> instead of the manual locking. (In fact you could do this even if you do need both copies of the task, using <code>ConcurrentDictionary&lt;string, Tuple&lt;Task, Task&gt;&gt;</code>). The code might be as simple as</p>

<pre><code>    public class TaskManager : ITaskManager
    {
        private readonly ConcurrentDictionary&lt;string, Task&gt; _tasks = new ConcurrentDictionary&lt;string, Task&gt;();

        public Task&lt;T&gt; ExecuteOnceAsync&lt;T&gt;(string taskId, Func&lt;Task&lt;T&gt;&gt; taskFactory)
        {
            var task = _tasks.GetOrAdd(
                taskId,
                id =&gt; taskFactory().ContinueWith(_ =&gt; _tasks.TryRemove(taskId, out var _)));
            return (task as Task&lt;T&gt;) ??
                throw new Exception($"Task with id {taskId} already exists but it has a different type {task.GetType()}. {typeof(Task&lt;T&gt;)} was expected");
        }
    }
</code></pre>

<hr>

<p>I would like to add: I like the level of detail in the exception message. That should be very helpful in tracking down bugs if it is thrown and logged.</p>
    </div>