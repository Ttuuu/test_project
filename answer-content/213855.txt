<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some suggestions:</p>

<ul>
<li><a href="https://mywiki.wooledge.org/Quotes" rel="nofollow noreferrer">Use More Quotes™</a>

<ul>
<li><code>$@</code> should be double quoted to pass the parameters without word splitting.</li>
<li><em>Any</em> variable use should be quoted. It is very rare that word splitting is actually what you want, and it causes sometimes very subtle bugs.</li>
<li><a href="https://mywiki.wooledge.org/CommandSubstitution" rel="nofollow noreferrer">Command substitution</a> should be quoted.</li>
</ul></li>
<li>Use <a href="https://stackoverflow.com/q/3427872/96588">good bashisms</a> such as <code>[[</code> instead of <code>[</code>.</li>
<li>Local variables should be lowercase to distinguish them from system variables, which are uppercase.</li>
<li><p>There is no need for semicolons in Bash scripts. This may be more contentious, but I generally write like this:</p>

<pre><code>if [[ "$variable" = 'value' ]]
then
    …
</code></pre>

<p>Apropos: <code>==</code> to compare strings is a bit of a historical accident. The original operator is just <code>=</code>, but <code>==</code> is probably not going away.</p></li>
<li><code>$(pwd)</code> can be simplified to <code>.</code> - it also means the current directory.</li>
<li>The home directory should not be used for temporary file storage (unless that is actually your configured temporary directory). In general you should use something like <code>working_dir="$(mktemp --directory)"</code> (or <code>-d</code> if you don't have GNU coreutils <code>mktemp</code>). This has a few advantages:

<ul>
<li>It means your home directory isn't going to fill up with temporary files which are never cleaned up (but more about that below).</li>
<li>It is often a memory mapped filesystem, so it may be much faster than your home directory.</li>
</ul></li>
<li>Long <code>if</code>/<code>elif</code> sections testing the value of a single variable can usually be easier written as a <code>case</code> block.</li>
<li><p><code>head</code> does <em>not</em> fail if run on an empty file:</p>

<pre><code>$ touch foo
$ head foo
$ echo $?
0
</code></pre>

<p>So your first test could fail for the wrong reason. You might want to <code>[[ -s "$path" ]]</code> to check if a file is empty.</p></li>
<li>The file name "dt_tmp" doesn't tell me anything about what it contains or what it's used for - in general I find that adding the project name to <em>anything</em> within the project is redundant, and marking something as temporary is not particularly helpful to know what it <em>is,</em> unless it really can contain anything. Is there a better name you can give it? It looks like it's some sort of command queue, maybe?</li>
</ul>
    </div>