<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>DRY code with functions</h2>

<p>Oh dear your code is completely un-maintainable, a bug waiting to happen.</p>

<p>When ever you find yourself writing code that is the same repeated over and over, with only some minor differences, create a function and pass it the differences as arguments. It will make the code easier to read, and maintain, and save you a lot of work.</p>

<h2>The reduction</h2>

<p>The following is how I took your code and reduced it by small steps. Some are only to help clarify the patterns in my head.</p>

<h3>Reduce the noise</h3>

<p>So first lets create some alias names as its a sea text to me</p>

<pre><code>const L = "lentils";
const C = "coconuts";
const O = "onions";
const H = "horses";
const M = "maple";
const A = "apples";
</code></pre>

<p>We can then use bracket notation to locate each item</p>

<pre><code>y[i][L] 
// is the same as
y[i].lentils
</code></pre>

<h3>Align the logic</h3>

<p>Now looking at the if statements you are switching between &lt; and &gt; a lot.</p>

<pre><code>if (y[i].trees === 1 ) {
    if (y[i].lentils &gt; y[i].coconuts  &amp;&amp; 
        y[i + 1].apples &gt; y[i].coconuts &amp;&amp; 
        y[i + 1].onions &lt; y[i].coconuts &amp;&amp; 
        y[i+1].horses &lt; y[i+1].maple) {
            y[i].coupons = y[i].coconuts
    }
} else //... and so on
</code></pre>

<p>In this case to help design better source code use only &gt; and swap the references if there is a &lt;. Thus the above becomes</p>

<pre><code>if (y[i].trees === 1 ) {
    if (y[i].lentils &gt; y[i].coconuts  &amp;&amp; 
        y[i+1].apples &gt; y[i].coconuts &amp;&amp; 
        y[i].coconuts &gt; y[i+1].onions &amp;&amp; 
        y[i+1].maple &gt; y[i+1].horses ) {
            y[i].coupons = y[i].coconuts;
    }
} else //... and so on
</code></pre>

<h3>Start from the smallest logic unit</h3>

<p>and work up.</p>

<p>This is how to start building the functions that will help reduce overall source code size. First a function called <code>greater</code> that will do a single left side greater that right side</p>

<pre><code>const greater = (name1, name2, i1 = 0, i2 = 0) =&gt; y[i + i1][name1] &gt; y[i +i2][name2];
</code></pre>

<p>How we apply that function in a statement</p>

<pre><code>if (y[i].lentils &gt; y[i].coconuts  &amp;&amp; 
    y[i+1].apples &gt; y[i].coconuts &amp;&amp; 
    y[i].coconuts &gt; y[i+1].onions &amp;&amp; 
    y[i+1].maple &gt; y[i+1].horses )

// becomes      
if (
    greater(L,C) &amp;&amp; 
    greater(A, C, 1) &amp;&amp; 
    greater(C, O, 0, 1) &amp;&amp; 
    greater(M, H, 1, 1) ) {
</code></pre>

<h3>Special cases to separate functions</h3>

<p>A function to handle min lentils via a loop so you need not have to do <code>y[i] ... y[i + 1]</code> and so on. Also the min is not really needed, rather if min lentils greater than coconuts.</p>

<pre><code>const minLentils = (count, min = Infinity) =&gt; {
    while (count--) { Math.min(y[i + count].lentils, min) }
    return min &gt; y[i].coconuts;
}

// Thus 
Math.min(y[i].lentils, y[i + 1].lentils, y[i + 2].lentils) &gt;  y[i].coconuts;

// becomes 
minLentils(3);
</code></pre>

<p>And same for <code>maxHorses</code> but include start offset     </p>

<pre><code>const maxHorses = (count, offset, max = -Infinity) =&gt; {
    if (count &gt; 1) {
        while (count--) { Math.max(y[i + offset + count].horses, max) }
        return max &lt; y[i].coconuts;
    }
    return true; 
}

// thus 
Math.max(y[i + 2].horses, y[i + 3].horses, y[i + 4].horses) &lt; y[i].coconuts

// becomes
maxHorses(3, 2);
</code></pre>

<h3>What action to perform</h3>

<p>If any of the statements are true, assign coconuts to coupons within the if statements. For now create a flag (semaphore) that if true will, on the last line inside the loop, move coconuts to coupons</p>

<pre><code>let getCoupons = false;

 ... if statements ...

if (getCoupons) { y[i].coupons = y[i].coconuts } 
</code></pre>

<h3>Find a pattern</h3>

<p>We need to find a pattern to the logic so we can further reduce to functions</p>

<p>For a more complex statement, align the greater side to the left</p>

<pre><code>if( Math.min(y[i].lentils, y[i + 1].lentils, y[i + 2].lentils) &gt; y[i].coconuts &amp;&amp; 
   y[i + 3].apples &gt; y[i].coconuts &amp;&amp; 
   y[i].coconuts &gt; y[i + 3].onions  &amp;&amp; 
   y[i + 3].maple &gt; y[i + 3].horses  &amp;&amp; 
   Math.max(y[i + 4].horses, y[i + 5].horses) &lt; y[i].coconuts) {   

// replace Math.min and Math.max functions with the new min max functions
// and add the greater function for the rest


if( minLentils(3) &amp;&amp; 
   greater(A, C, 3) &amp;&amp; 
   greater(C, O, 0, 3) &amp;&amp; 
   greater(M, H, 3, 3) &amp;&amp; 
   maxHorses(2, 4) {      
</code></pre>

<p>Still not seeing the pattern but almost there. </p>

<h3>Look for similarities</h3>

<p>Calling the function <code>greater(L, C)</code> is the same as calling <code>minLentils(1)</code> and <code>greater(H, C, 3)</code> is the same as <code>maxHorses(1, 3)</code></p>

<p>So rather than manually call each function we can create an array of arrays, each sub array contains the arguments for each call to <code>greater</code>, <code>minLentils</code>, and <code>maxHorses</code></p>

<pre><code>// the line
if (minLentils(3) &amp;&amp; greater(A, C, 3) &amp;&amp; greater(C, O, 0, 3) &amp;&amp;  greater(M, H, 3, 3) &amp;&amp; maxHorses(2, 4)) {    

// has the set of arguments as an array
[[3], [A, C, 3], [C, O, 0, 3], [M, H, 3, 3], [2, 4]];
</code></pre>

<p>Create a function that takes the above array that uses the first sub array to call<code>minLentils</code>, last sub array calls <code>maxHorses</code> and the rest call <code>greater</code></p>

<pre><code>const pass = (...args) =&gt; {
    if (! maxHorses(...args.pop()) &amp;&amp; minLentils(...args[0])) { return false }
    while (args.length &gt; 1) { 
        if (! greater(...args.pop()) ) { return false }
    }
    return true;
}

// the line
if (minLentils(3) &amp;&amp; greater(A, C, 3) &amp;&amp; greater(C, O, 0, 3) &amp;&amp;  greater(M, H, 3, 3) &amp;&amp; maxHorses(2, 4)) {    

// now becomes 
if (pass([[3], [A, C, 3], [C, O, 0, 3], [M, H, 3, 3], [2, 4]]) { getCoupons = true }
</code></pre>

<h3>Finding the logic pattern</h3>

<p>Now we have a shorter way of writing the statements using the arrays and functions, lets convert a set of statements into the new declarative code</p>

<pre><code>} else if (y[i].trees === 5) {
    if (y[i].lentils &gt; y[i].coconuts &amp;&amp;
        y[i + 1].apples &gt; y[i].coconuts &amp;&amp; 
        y[i + 1].onions &lt; y[i].coconuts &amp;&amp; 
        y[i + 1].horses &lt; y[i + 1].maple &amp;&amp;
        Math.max(y[i + 2].horses, y[i + 3].horses, [i + 4].horses, y[i + 5].horses) &lt; y[i].coconuts) {
        y[i].coupons = y[i].coconuts
    } else if (
        Math.min(y[i].lentils, y[i + 1].lentils) &gt; y[i].coconuts &amp;&amp;
        y[i + 2].apples &gt; y[i].coconuts &amp;&amp; 
        y[i + 2].onions &lt; y[i].coconuts &amp;&amp; 
        y[i + 2].horses &lt; y[i + 2].maple &amp;&amp;
        Math.max(y[i + 3].horses, y[i + 4].horses, y[i + 5].horses) &lt; y[i].coconuts) {
        y[i].coupons = y[i].coconuts
    } else if (
        Math.min(y[i].lentils, y[i + 1].lentils, y[i + 2].lentils) &gt; y[i].coconuts &amp;&amp; 
        y[i + 3].apples &gt; y[i].coconuts &amp;&amp; 
        y[i + 3].onions &lt; y[i].coconuts &amp;&amp; 
        y[i + 3].horses &lt; y[i + 3].maple &amp;&amp; 
        Math.max(y[i + 4].horses, y[i + 5].horses) &lt; y[i].coconuts) {
        y[i].coupons = y[i].coconuts
    } else if (
        Math.min(y[i].lentils, y[i + 1].lentils, y[i + 2].lentils, y[i + 3].lentils) &gt; y[i].coconuts &amp;&amp;
        y[i + 4].apples &gt; y[i].coconuts &amp;&amp; 
        y[i + 4].onions &lt; y[i].coconuts &amp;&amp; 
        y[i + 4].horses &lt; y[i + 4].maple &amp;&amp; 
        y[i + 4].horses &lt; y[i].coconuts) {
        y[i].coupons = y[i].coconuts                                                                                                        
    } else if (Math.min(y[i].lentils, y[i + 1].lentils, y[i + 2].lentils, y[i + 3].lentils, y[i + 4].lentils) &gt; y[i].coconuts &amp;&amp; 
        y[i + 5].apples &gt; y[i].coconuts &amp;&amp; 
        y[i + 5].onions &lt; y[i].coconuts &amp;&amp; 
        y[i + 5].horses &lt; y[i + 5].maple) {
        y[i].coupons = y[i].coconuts
    }
</code></pre>

<p>becomes </p>

<pre><code>    if(pass([[1], [A, C, 1], [C, O, 0, 1], [M, H, 1, 1], [4, 2]]) ||
        pass([[2], [A, C, 2], [C, O, 0, 2], [M, H, 2, 2], [3, 3]]) ||
        pass([[3], [A, C, 3], [C, O, 0, 3], [M, H, 3, 3], [2, 4]]) || 
        pass([[4], [A, C, 4], [C, O, 0, 4], [M, H, 4, 4], [1, 4]]) ||
        pass([[5], [A, C, 5], [C, O, 0, 5], [M, H, 5, 5], [0]]) ) { getCoupons = true }
</code></pre>

<p>We finally can see the pattern (That's me, you likely know the pattern very well)</p>

<h3>Implement the common pattern</h3>

<p>A loop can be used to create the arrays to test. That loop uses the value in y[i].trees as the count. If a function pass return true then we are done and can assign coconuts coupons</p>

<pre><code>const testTree = (count) =&gt; {
    var j = 0;
    while(i &lt; count) {
        if (pass([[j], [A, C, j], [C, O, 0, j], [M, H, j, j], [count - 1 - j, j + 1]])) {
            y[i].coupons = y[i].coconuts;
            break;
        }
    }
}
</code></pre>

<h2>The DRY result</h2>

<p>Gather all the functions. Wrap them in closure, add some extra args to the function <code>testTree</code> to the to allow the functions to see the index <code>i</code>, and the array <code>y</code></p>

<p>Remove the aliases and use the names as strings.</p>

<p>The following snippet is a full replacement of your code and able to handle any value of <code>y[i].tree</code> if the pattern found continues.</p>

<pre><code>const testTree = (()=&gt; {
    var y, idx;
    const greater = (name1, name2, i1 = 0, i2 = 0) =&gt; y[idx + i1][name1] &gt; y[idx +i2][name2];
    const minLentils = (count, min = Infinity) =&gt; {
        while (count--) { Math.min(y[idx + count].lentils, min) }
        return min &gt; y[idx].coconuts;
    }
    const maxHorses = (count, offset, max = -Infinity) =&gt; {
        if (count &gt; 1) {
            while (count--) { Math.max(y[idx + offset + count].horses, max) }
            return max &lt; y[idx].coconuts;
        }
        return true;
    }
    const pass = (...args) =&gt; {
        if (! maxHorses(...args.pop()) &amp;&amp; minLentils(...args[0])) { return false }
        while (args.length &gt; 1) { 
            if (! greater(...args.pop()) ) { return false }
        }
        return true;
    }    
    return (yy, i) =&gt; {
        var j = 0; 
        const count = yy[i].tree;
        y = yy; 
        idx = i;
        while (j &lt; count) {
            if (pass(...[
                [j], ["apples", "coconuts", j], ["coconuts", "onions", 0, j], ["maple", "horses", j, j], 
                [count - 1 - j, j + 1]
            ])) {
                y[i].coupons = y[i].coconuts;
                break;
            }
        }
    };
})();

for (const item of y) { item.coupon = 0 }
for (let i = 49; i &lt; y.length - 1; i++) {
    const trees = y[i].trees;
    if (trees &gt; 0 &amp;&amp; y[i].coconuts &gt; 0 &amp;&amp; (i + trees) &lt; y.length - 1) { testTree(y, i) }
}
</code></pre>

<h2>NOTE</h2>

<ul>
<li><p>As there was no data to test on the is likely many typos in the code. It is aas an example only</p></li>
<li><p>There where some odd values in your example that I assumed where typos on your part. If they were not typos or the pattern I found not the pattern at higher counts you will have to continue the process of reduction via functions.</p></li>
</ul>
    </div>