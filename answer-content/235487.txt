<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Splitting words</h3>

<p>The Python script splits the shell command's full line to words using <code>shlex</code>.
I see a few issues with this:</p>

<ol>
<li><p>I'm not sure this will split the line exactly the same way as the shell would. Looking at <code>help(shlex)</code>, I see <em>"A lexical analyzer class for simple shell-like syntaxes"</em>, and I find that not very reassuring.</p></li>
<li><p>I think command line completion should be blazingly fast, so I look suspiciously at anything that needs to be <code>import</code>-ed, such as <code>shlex</code>.</p></li>
<li><p>Looking at the <strong>Programmable Completion</strong> section in <code>man bash</code>, it seems that Bash populates the <code>COMP_WORDS</code> array with the result of the split.</p></li>
</ol>

<p>Therefore, it would be good to pass <code>COMP_WORDS</code> to the Python script,
which would eliminate all the above concerns.</p>

<p>One way to achieve this would be to call the Python script with:</p>

<pre><code>python3 script.py complete "$COMP_CWORD" "${COMP_WORDS[@]}"
</code></pre>

<p>And then change the Python script accordingly:</p>

<pre><code>#!/usr/bin/env python3

import sys


def complete(comp_cword, *comp_words):
    prefixes = ("test", "test-中文", "test-한글")
    word = comp_words[int(comp_cword)]
    items = (prefix + "-level-" + comp_cword for prefix in prefixes)
    return (item for item in items if item.startswith(word))


if __name__ == "__main__":
    sys.stdout.write(" ".join(complete(*sys.argv[2:])))
    sys.stdout.flush()
</code></pre>

<h3>Avoid converting generators to list when not needed</h3>

<p>No lists were needed in the original script, everything could have been just generator expressions.</p>

<h3>Keep it simple</h3>

<p>I don't understand why the script imports <code>os</code> and uses <code>os.sys</code> and nothing else in <code>os</code>.
You could just <code>import sys</code> instead.</p>

<p>I don't understand why <code>sys.argv.__getitem__(slice(2, None))</code> was used instead of the simple and natural <code>sys.argv[2:]</code>.</p>

<hr>

<p>This line is complex, it takes attention to understand:</p>

<blockquote>
<pre><code>word = "" if len(split) - 1 &lt; int(current_word) else split[int(current_word)]
</code></pre>
</blockquote>

<p>This is a lot easier to understand:</p>

<pre><code>if len(split) - 1 &lt; int(current_word):
    word = ""
else:
    word = split[int(current_word)]
</code></pre>

<p>Looking further, <code>word</code> is used only in a filter <code>.startswith(word)</code>.
That filter will match every string.
In which case, to maximize performance,
it would be best to not create <code>word</code>, and not do any filtering,
but return <code>items</code> directly:</p>

<pre><code>if len(split) - 1 &lt; int(current_word):
    return items
</code></pre>

<p>On even closer look,
I don't see how <code>COMP_CWORD</code> can ever be an index out of range.
So the check for bounds was unnecessary.
(Strictly speaking, an index out of bounds may be possible when splitting words with <code>shlex</code>, since that might not be identical to the shell's own word splitting. Even then, it would be a highly unlikely case, therefore a more Pythonic way to handle the situation would be using a <code>try-expect</code> for a <code>IndexError</code>.)</p>

<h3>Use better names</h3>

<p>The name <code>i</code> is really best reserved for loop counters.
(Even then, often you may find better names...)</p>

<p>In the suggested solution above I renamed the parameter names to match the shell variables they come from.
I find this reduces the cognitive burden when reading the documentation of the variables in <code>man bash</code>, and the implementation of the completion code in Python.</p>
    </div>