<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can see how this could get a bit confusing. The way the requirements are phrased make it bit more difficult. Maybe it was written in an attempt to not give an obvious solution. But, it did take more effort to follow at least for me.</p>

<p>I'm making the assumption that you're only supposed to use inheritance for this step, and interfaces are not necessary.</p>

<p>Let's start with <strong>DbConnection</strong>, which need:</p>

<ul>
<li>ConnectionString property</li>
<li>Timeout property</li>
<li>Open abstract method</li>
<li>Close abstract method</li>
</ul>

<pre><code>public class DBConnection
{
[...]
</code></pre>

<p>The class needs to be abstract if we're going to use abstract methods.</p>

<pre><code>[...]
    private readonly string _connectionString;
[...]
</code></pre>

<p>There doesn't seem to be any way to access connection string from classes inheriting <code>DBConnection</code> see <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/accessibility-levels" rel="nofollow noreferrer">Access Levels</a> </p>

<pre><code>[...]
    public TimeSpan Timeout { get; set; }
[...]
</code></pre>

<p>No problem with the above, but I would recommend at least making it virtual so that the classes inheriting from this abstraction can control the accessibility if requirements change. </p>

<pre><code>[...]
    public virtual void Open()
    {
        var startTime = DateTime.Now;

        // connection code would go here...

        var endTime = DateTime.Now;

        CheckTimeout(startTime, endTime);
    }

    public virtual void Close()
    {
    }

    private void CheckTimeout(DateTime startTime, DateTime endTime)
    {
        if (endTime - startTime &gt;= this.Timeout)
            throw new TimeoutException("The connection timed out...");
    }
}
[...]
</code></pre>

<ol>
<li>On the above, I notice that neither <strong>Open</strong> or <strong>Close</strong> methods are abstract</li>
<li>Neither method should have any code in the DBConnection. SqlServer and OracleDatabase will likely use different APIs so the code in the abstraction will likely always get overwritten and not used. Even if you do try and force its use, you would be calling open twice in a way. And, the part that interacts with the API will end up having nothing to do with the start time/endtime variables.</li>
<li>About this <code>CheckTimeout</code> it's not really in the requirement. So I invoke <a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it" rel="nofollow noreferrer">YAGNI</a>. Problem is that, it will be very difficult to deal with that at the Base Class since we are given a hint that we <strong>may</strong> need to use it during implementation.</li>
</ol>

<p>Once you take care of the DBConnection class you shouldn't need to call <code>base.Open()</code> in the implementations. And, you shouldn't need to set timeout in the constructor, nor write timeout line in the implementation open method.</p>

<p>The only other issue that I see with the code is in the <strong>DBCommand</strong> constructor:</p>

<pre><code>[...]
        this._sql = sql ?? throw new InvalidOperationException("sql required.");
[...]
</code></pre>

<p>The requirement states:</p>

<blockquote>
  <p>[...] So make sure to receive it in the constructor and cater for the null reference or an empty string.</p>
</blockquote>

<p>This may deal with a null value. But, it will not catch string.Empty or whitespace strings. You should probably use string.IsNullOrWhiteSpace() like you did in SqlConnection. </p>

<p>Actually I think this may be the first time I've seen the <code>??</code> operator to throw. That's not saying, it's good or bad, I just never thought of it. Though, it does make the line longer, which depending on formatting rules can be a problem. Than again, it could be formatted slightly different to help. Maybe someone else has a better opinion on that.</p>

<p>Hope that helps.</p>
    </div>