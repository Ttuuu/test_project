<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Now that we have more classes we can start utilizing more OOP.
All the classe <code>NNode</code>, <code>Section</code> and <code>Material</code> have the <code>load</code> class method.
This means we can utilize inheritance to simplify the code using inheritance</p>

<pre class="lang-py prettyprint-override"><code>class LoadCSV:
    _FLAG: ClassVar[str] = ''
    _KEYS: ClassVar[Tuple[str, ...]] = ()

    @classmethod
    def load(cls, file):
        file.seek(0)
        while not file.readline().startswith(cls._FLAG):
            continue
        amount = int(file.readline())
        values = []
        for node in range(amount):
            values.append(dict(zip(
                cls._KEYS,
                file.readline().split(',')
            )))
        return cls(values)


@dataclass
class NNode(LoadCSV):
    _FLAG = 'NNODES'
    _KEYS = ('ID', 'x', 'y')

    nodes: List[dict]


@dataclass
class Section(LoadCSV):
    _FLAG = 'SECTION'
    _KEYS = ('Sec', 'Area', 'Inertia','Depth','ShearCF')

    sections: List[dict]


@dataclass
class Material(LoadCSV):
    _FLAG = 'MATERIALS'
    _KEYS = ('Mat', 'Young', 'Poisson','Thermal','Weight')

    materials: List[dict]
</code></pre>

<blockquote>
  <p>Next, if the script is modified to handle more data, one can use inheritance.</p>
</blockquote>



<blockquote>
  <p>Anyway, I don't see any convenience in using this approach instead of simply modify the Mesh class.</p>
</blockquote>



<blockquote>
  <p>The code can be further improved as @Peilonrayz said in the first question (while cycle and controls over the input data) but I would stay focused only on OOP improvements</p>
</blockquote>

<p>No inheritance there sucks, much like the original <code>Mesh</code> class. Both of them are bad. You can see that they're bad, so you should give up on this OOP quest, and actually implement something of substance. Because OOP is a means to organize code not actually do something. "Doing something in OOP" may sound like OOPs doing all the work, but people should really say "Doing something utilizing OOP".</p>

<p>You have gotten all the OOP improvements you can get. Since you only want OOP improvements, I can do no more.
Please further improve the code.</p>

<ol>
<li><p>Change <code>Mesh</code>, with the three loads, so that it can work on any of the provided files. If NNODES is there, or if it's not.</p>

<p>If you make this change in <code>LoadCSV.load</code> then all of the other objects will automatically benifit from it.</p></li>
<li>Remove <code>_KEYS</code> from the classes. Your file provides them, and what you're doing is unOOP like and just janky.</li>
</ol>
    </div>