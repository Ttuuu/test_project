<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>As <a href="https://codereview.stackexchange.com/a/141829/32521">you have already been made aware</a>, you should <strong>not</strong> be using <code>&amp;mut Vec&lt;T&gt;</code> unless you plan on adding or removing items from the <code>Vec</code>. Using <code>&amp;mut [T]</code> better expresses the contract of the function <em>and</em> is more flexible, allowing you to also sort arrays and anything else that can be expressed as a slice.</p></li>
<li><p><code>where</code> clauses go on a separate line. This allows them to be easily found, which is important considering how much they affect the behavior of the function.</p></li>
<li><p>There's no need to declare the type of <code>pos</code>. Type inference will take care of it.</p></li>
<li><p>There's no need to redeclare <code>pos</code> just to make it mutable and decrement it. Just make the variable binding in the function declaration <code>mut</code>.</p></li>
<li><p>There's no need to return the unit value (<code>()</code>). Just <code>return</code> will suffice.</p></li>
<li><p><a href="https://doc.rust-lang.org/std/primitive.slice.html#method.swap" rel="noreferrer"><code>slice::swap</code></a> exists. In the broader world, so does <a href="https://doc.rust-lang.org/std/mem/fn.swap.html" rel="noreferrer"><code>mem::swap</code></a>.</p></li>
<li><p>With the power of <code>swap</code>, you can remove the need for the <code>Copy</code> bound.</p></li>
<li><p><a href="https://github.com/BurntSushi/quickcheck" rel="noreferrer">Quickcheck</a> is an invaluable tool for problems like this. You can create a <em>property</em> that can be validated across a wide range of automatically generated input.</p></li>
</ol>



<pre><code>pub fn insertion_sort&lt;T&gt;(values: &amp;mut [T])
    where T: Ord
{
    for i in 0..values.len() {
        for j in (0..i).rev() {
            if values[j] &gt;= values[j + 1] {
                values.swap(j, j + 1);
            } else {
                break
            }
        }
    }
}

#[macro_use]
extern crate quickcheck;

#[test]
fn test_insertion_sort_empty() {
    let mut values: [i32; 0] = [];
    insertion_sort(&amp;mut values);
    assert_eq!(values, [])
}

#[test]
fn test_insertion_sort_one() {
    let mut values = [1];
    insertion_sort(&amp;mut values);
    assert_eq!(values, [1]);
}

#[test]
fn test_insertion_multi() {
    let mut values = [9, 8, 7, 11, 10];
    insertion_sort(&amp;mut values);
    let values_expected: Vec&lt;_&gt; = (7..12).collect();
    assert_eq!(values_expected, values);
}

quickcheck! {
    fn test_insertion_everything(xs: Vec&lt;i32&gt;) -&gt; bool {
        // Macro doesn't allow `mut` in the `fn` declaration :-(
        let mut xs = xs;

        let mut expected_sorted = xs.clone();
        expected_sorted.sort();

        insertion_sort(&amp;mut xs);

        expected_sorted == xs
    }
}
</code></pre>
    </div>