<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Docstrings</h1>

<p>You should include a <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="noreferrer"><code>docstring</code></a> at the beginning of every function, class, and module you write. This will allow documentation to identify what your code is supposed to do. This also helps other readers understand how your code works. I see that you already have a couple for your functions, but stay consistent.</p>

<h1>Parameter Names</h1>

<p>Parameter names should be descriptive enough to be able to tell what should be passed. While <code>l</code> might be obvious to some programmers as an <code>iterable</code>, to others it might not. Since you're passing a <code>list</code>, renaming it to <code>list_</code> (to avoid using reserved word <code>list</code>) makes it more obvious what you're passing, and accepting.</p>

<h1>Constant Variables</h1>

<p>When you have a constant in your program, it should be UPPER_CASE to identify it as such.</p>

<h1>Code Reduction</h1>

<p>You want as little code as possible in your program. So, instead of:</p>

<pre><code>def subject_list_fastafiles():
    """ Method Docstring """
    subject_fastafiles = sorted_nicely([fastafile for fastafile in os.listdir(subject_path) if os.path.isfile(os.path.join(subject_path, fastafile))])
    return subject_fastafiles

def query_list_fastafiles():
    """ Method Docstring """
    query_fastafiles = sorted_nicely([fastafile for fastafile in os.listdir(query_path) if os.path.isfile(os.path.join(query_path, fastafile))])
    return query_fastafiles

def filter_files_ending_with_one(sorted_files):
    """ Method Docstring """
    files_end_with_one = [name for name in subject_fastafiles if name[-1].isdigit() and not name[-2].isdigit() == 1]
    return files_end_with_one
</code></pre>

<p>You can simply <em>return the function call</em>, instead of assigning it to a variable and returning the variable, like so:</p>

<pre><code>def subject_list_fastafiles():
    """
    Method Docstring
    """
    return sorted_nicely([fastafile for fastafile in os.listdir(SUBJECT_PATH) if os.path.isfile(os.path.join(SUBJECT_PATH, fastafile))])

def query_list_fastafiles():
    """
    Method Docstring
    """
    return sorted_nicely([fastafile for fastafile in os.listdir(QUERY_PATH) if os.path.isfile(os.path.join(QUERY_PATH, fastafile))])

def filter_files_ending_with_one():
    """
    The function filters the files end with 1
    """
    return [name for name in SUBJECT_FASTAFILES if name[-1].isdigit() and not name[-2].isdigit() == 1]
</code></pre>

<h1>Main Guard</h1>

<p><em>This is an excerpt from <a href="https://stackoverflow.com/a/419189/8968906">this fabulous StackOverflow answer</a>.</em></p>

<p>When your script is run by passing it as a command to the Python interpreter,</p>

<pre><code>python myscript.py
</code></pre>

<p>all of the code that is at indentation level 0 gets executed.  Functions and classes that are defined are, well, defined, but none of their code gets run.  Unlike other languages, there's no <code>main()</code> function that gets run automatically - the <code>main()</code> function is implicitly all the code at the top level.</p>

<p>In this case, the top-level code is an <code>if</code> block.  <code>__name__</code> is a built-in variable which evaluates to the name of the current module.  However, if a module is being run directly (as in <code>myscript.py</code> above), then <code>__name__</code> instead is set to the string <code>"__main__"</code>.  Thus, you can test whether your script is being run directly or being imported by something else by testing</p>

<pre><code>if __name__ == "__main__":
    ...
</code></pre>

<p>If your script is being imported into another module, its various function and class definitions will be imported and its top-level code will be executed, but the code in the then-body of the <code>if</code> clause above won't get run as the condition is not met.</p>

<h1><strong><em>Updated Code</em></strong></h1>

<pre><code>"""
Module Docstring (A description of your program goes here)
"""

import os
import re

SUBJECT_PATH = "/Users/catuf/Desktop/subject_fastafiles/"
QUERY_PATH = "/Users/catuf/Desktop/query_fastafiles"

def sorted_nicely(list_):
    """
    Sort the given iterable in the way that humans expect. https://blog.codinghorror.com/sorting-for-humans-natural-sort-order/
    """
    convert = lambda text: int(text) if text.isdigit() else text
    alphanum_key = lambda key: [convert(c) for c in re.split('([0-9]+)', key)]
    return sorted(list_, key=alphanum_key)

def subject_list_fastafiles():
    """
    Method Docstring
    """
    return sorted_nicely([fastafile for fastafile in os.listdir(SUBJECT_PATH) if os.path.isfile(os.path.join(SUBJECT_PATH, fastafile))])

def query_list_fastafiles():
    """
    Method Docstring
    """
    return sorted_nicely([fastafile for fastafile in os.listdir(QUERY_PATH) if os.path.isfile(os.path.join(QUERY_PATH, fastafile))])

def filter_files_ending_with_one():
    """
    The function filters the files end with 1
    """
    return [name for name in SUBJECT_FASTAFILES if name[-1].isdigit() and not name[-2].isdigit() == 1]

if __name__ == '__main__':

    SUBJECT_FASTAFILES = subject_list_fastafiles()
    QUERY_FASTAFILES = query_list_fastafiles()
    SUBJECT_FILES_ENDING_WITH_ONE = filter_files_ending_with_one()
</code></pre>
    </div>