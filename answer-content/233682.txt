<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Thank you for well-formed question :)</p>

<p>I will write my review only regarding <code>ProcessInput</code> class for now, as overall review needs more time then I have at the moment ... </p>

<ol>
<li><p>Personally I don't like the method name <code>GenerateOrbitalPairs</code> as you do not generate anything, but rather read or parse. So i think <code>ReadOrbitalpairs</code> or <code>ParseOrbitalPairs</code> would be better.</p></li>
<li><p>I think that you should not return empty <code>List</code> if file was not found. Empty list is expected result for empty file ! But for missed file I would say that <code>Exception</code> is expected. <code>System.IO.FileNotFoundException</code> which is raised by <code>File.ReadAllLines</code> in this case is fine.</p></li>
<li><p><code>Tuple</code> is not the best option for public method to return, because it's not clear what it contains for another person (in this case for me) ... When I first saw this method I needed go inside it, read all inner code in order to understand what it does return. Method signature should be clear, so I would create a separate class like <code>OrbitPair 
{ 
   public string OrbitFrom;
   public string OrbitTo;
}</code></p>

<p>Or at least used named <a href="https://docs.microsoft.com/en-us/dotnet/csharp/tuples" rel="noreferrer">Tuples</a></p></li>
<li><p>Use LINQ instead of <code>for each</code> loop.
Usually it makes code clearer and shorter. 
That is what your code could look like</p>

<pre><code>internal List&lt;(string OrbitFrom, string OrbitTo)&gt; GenerateOrbitalPairs(string textFile)
{
    return File.ReadAllLines(textFile).Select(s =&gt; (OrbitFrom: s.Split(')')[0], OrbitTo: s.Split(')')[1])).ToList();
}
</code></pre></li>
</ol>
    </div>