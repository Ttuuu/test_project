<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The customary name for what you called <code>splitter</code> would be <code>delimiter</code> or <code>sep</code> (the letter is used e.g. in <code>split</code>, the former for example in <code>numpy</code>). Regardless of what you choose, you should be consistent, right now you use both <code>splitter</code> and then later <code>separator</code>.</p>

<p>When using the <code>with..as</code> construct (as you should), you don't need to manually close the file. This is one of the reasons of why you should use it in the first place.</p>

<p>In your function <code>write_score</code>, you should use <code>str.join</code>.</p>

<p>In <code>read_scores</code> you can directly iterate over the lines of the file, which is a lot more memory-efficient. You can also use tuple assignment to make it clearer what is what.</p>

<p>In <code>sort_scores</code>, you can use <code>sorted</code> directly on <code>zip</code>, there is no need to cast it to a list first. You can also return the result right away.</p>

<p>In <code>has_better_score</code> you can just return the result of the comparisons.</p>

<p>In <code>print_scores</code> you can use <code>str.join</code> again.</p>

<pre><code>#!/usr/bin/env python3

def write_score(score, name, scores, filename, splitter=','):
    """writes a score with a name to a file, in a specified format"""
    scores.append((score, name))
    with open(filename,'w') as f:
        for s in scores:
            f.write(splitter.join(map(str, s)) + '\n')

def read_scores(filename, splitter=','):
    """reads scores and names from a file, and returns a list of each"""
    scores = []
    names = []

    with open(filename) as f:
        for score in f:
            score, name = score.strip().split(splitter)
            scores.append(int(score))
            names.append(name)
    return scores, names

def sort_scores(scores, names, reverse_bool=True):
    """sorts the scores from greatest to least and returns in a list of tuples format"""
    return sorted(zip(scores,names), reverse=reverse_bool)

def print_scores(score_list, splitter=' ', top_amount=5):
    """prints the number of leaderboard scores stated"""
    for score_tuple in score_list[:top_amount]:
        print(splitter.join(map(str, score_tuple)))

def has_better_score(score, scores, leaderboard_len=5):
    """returns if the score should be written to a file"""
    return (len(scores) &gt; leaderboard_len and score &gt;= scores[leaderboard_len - 1][0]) or len(scores) &lt;= leaderboard_len:
</code></pre>

<p>In your "small program", catching <code>KeyboardException</code> and then just exiting is not really different from letting the exception rise all the way to the top. Also, <code>exit()</code> should only be used in the interactive session, use <code>sys.exit()</code> in a script instead (because it allows passing of a return value).</p>
    </div>