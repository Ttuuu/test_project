<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a decent improvement over your first posting.  Let's start off with some things you are doing right.</p>
<ul>
<li>Your use of <code>Decimal</code> is correct.  Many first attempts will incorrectly use <code>double</code>.</li>
<li>Nice indentation.</li>
<li>Most names are fairly good.  Whereas many will over-abbreviate, you tend to make the names too long.</li>
</ul>
<p>Let's think of how an ATM should work.  A customer inserts a card, inputs a PIN, and at that instant the ATM knows who the customer is and what account(s) belong to that customer.  I note that your <code>BankAccount</code> class lacks any customer info.  I bring it up as food for thought, but will (like you) ignore it for now.</p>
<p>I don't see where <code>BankAccount.ID</code> is used.  I wouldn't recommend getting rid of it, but rather trying to integrate it.  In real life, I would expect banking info to be stored in a SQL database, and most likely it a bank account record would have a GUID as the ID.  That record would include the account no, which unlike the GUID could change albeit very rarely, and a customer GUID.</p>
<p>I would not expect to see a public parameter-less constructor for <code>BankAccount</code>.</p>
<p>Purists would say you should not throw an exception in a constructor.  I find it acceptable in limited cases.  An alternative would be to make the constructor's <code>private</code> and have a public static <code>Create</code> method.  Before we get to that, let's address 2 other points:</p>
<ol>
<li>Parameter names should begin with a lowercase letter.</li>
<li>You should omit <code>this</code>.</li>
</ol>
<p>I also think property <code>BankAccountNo</code> is too wordy.  It should be <code>AccountNo</code>.</p>
<pre><code>private BankAccount(int accountNo, decimal balance)
{
    AccountNo = accountNo;
    Balance = balance;
}

public static BankAccount Create(int accountNo, decimal balance)
{
    if(balance &lt;= 0)
    {
        throw new ArgumentException("Create bank account failed. Balance should be more than zero.");
    }
    return new BankAccount(accountNo, balance);
}
</code></pre>
<p>You have private setters for some properties.  You should identify which of those properties should not change and make them read-only.  Off the top, it would be the unused <code>ID</code> and <code>AccountNo</code>:</p>
<pre><code>public int ID { get; }
public int AccountNo { get; }
</code></pre>
<p>This means they can only be assigned during initialization/construction.  Couple this thought to using a static Create method, I trust you can envision many other such methods.  Maybe you want the Create to read info from SQL.  Or if you were given a customer ID, then you would fetch all accounts for that customer.</p>
<p><code>TransactionTypeEnum</code> is too long of a name.  Tacking <code>Enum</code> on the end is no better than prefixing it on the start.  It should be <code>TransactionType</code>.</p>
<p>The <code>BankTransaction</code> could also employ a static create.  I've already covered this, so let's consider another alternative.  Rather than throw an exception on a negative transaction, you could have a <code>bool IsValid</code> property.  Something similar to:</p>
<pre><code>public class BankTransaction
{
    public int Id { get; set; }
    public decimal Amount { get; set; }
    public TransactionType TransactionType { get; set; }
    public bool IsValid =&gt; Amount &lt;= 0;

    public BankTransaction(decimal amount)
    {
        Amount = amount;
    }
}
</code></pre>
<p>[Sorry.  Running out of time and must get back to my job.]</p>
<p>My last remarks are for you to consider IF and HOW you should expose things to others.  Making it read-only is one way.  For example, in <code>BankTransactionRepository</code> the <code>bankTransactions</code> is a List.  Things to correct:</p>
<p>The property name should begin with an uppercase, so <code>BankTransactions</code>.
It should either be an <code>IList&lt;BankTransaction&gt;</code> or most likely should be an <code>IReadOnlyList&lt;BankTransaction&gt;</code>.</p>
<p>Sorry.  Gotto go.</p>
<p><strong>UPDATE READ ONLY LISTS</strong></p>
<p>In the comments you say you cannot use a read-only list.  I disagree.  What I want to walk away with is that you may have objects internal to a class that allow certain things, but what you expose publicly to others should be more restrictive.  This is particular true with something as sensitive as bank accounts.</p>
<p>With just a small change, you can have it both ways:</p>
<pre><code>public class BankTransactionRepository : IBankTransactionRepository
{
    // Mock DB
    private List&lt;BankTransaction&gt; _transactions = new List&lt;BankTransaction&gt;();
    public IReadOnlyList&lt;BankTransaction&gt; BankTransactions =&gt; _transactions;

    public BankTransactionRepository()
    {
        _transactions = new List&lt;BankTransaction&gt;();
    }

    public void InsertTransaction(BankTransaction bankTransaction)
    {
        _transactions.Add(bankTransaction);
    }

    // more code 

}
</code></pre>
<p>Within the class, you would be interacting with object <code>_transactions</code>.  But publicly you restrict what others can do with those transactions.  The important thing is not the specific code, but rather the reasoning of why you want to do this.</p>
<p>Also, while I appreciate the speedy upvote from yesterday, I would suggest you not be too quick to accept an answer.  Give it a day to see if others would chime in.</p>
<p><strong>UPDATE #2 WHY A PRIVATE SETTER IS USELESS</strong></p>
<p>OP commented asked why not use a private setter on a list?  The answer is because while someone cannot change the reference to the overall list, they can still change individual items.</p>
<p>Example code:</p>
<p>A very simple User class</p>
<pre><code>public class User
{
    // Intentionally a very simplified DTO class
    public string Name { get; set; }
    public bool IsAdmin { get; set; }
}
</code></pre>
<p>Some class that works with some users.  Note no user is an Admin.</p>
<pre><code>public class SomeClassWithUsers
{
    public List&lt;User&gt; UserList1 { get; private set; }

    private List&lt;User&gt; _users = new List&lt;User&gt;();
    public IReadOnlyList&lt;User&gt; UserList2 =&gt; _users;

    public static SomeClassWithUsers CreateSample()
    {
        var x = new SomeClassWithUsers();
        x.CreateSampleUsers();
        return x;
    }

    public void CreateSampleUsers()
    {
        _users = new List&lt;User&gt;()
        {
            new User() {Name = "Alice", IsAdmin = false },
            new User() {Name = "Bob", IsAdmin = false },
            new User() {Name = "Carl", IsAdmin = false },
            new User() {Name = "Dan", IsAdmin = false },
            new User() {Name = "Eve", IsAdmin = false },
        };

        UserList1 = _users.ToList();  // independent copy
    }
}
</code></pre>
<p>Okay, so we have 2 different user lists.  Are both of them protected from external changes?  No.  Even though <code>UserList1</code> has a private setter, someone can still alter individual items.</p>
<p>Example:</p>
<pre><code>static void Main(string[] args)
{
    var x = SomeClassWithUsers.CreateSample();

    // Even though UserList1 has a private setter, I can still change individual members.
    for (var i = 0; i &lt; x.UserList1.Count; i++)
    {
        x.UserList1[i] = new User() { Name = $"Evil {x.UserList1[i].Name}", IsAdmin = true };
    }

    Console.WriteLine("UserList1 has been modifed!");
    foreach (var user in x.UserList1)
    {
        Console.WriteLine($"{user.Name} {(user.IsAdmin ? "IS" : "is NOT")} an Admin.");
    }

            // But I cannot altger UserList2 in any way since it is properly marked as a IReadOnlyList.
            // You cannot compile the code below.
            //for (var i = 0; i &lt; x.UserList2.Count; i++)
            //{
            //    x.UserList2[i] = new User() { Name = $"Evil {x.UserList1[2].Name}", IsAdmin = true };
            //}

    Console.WriteLine("\nUserList2 remains unchanged.");
    foreach (var user in x.UserList2)
    {
        Console.WriteLine($"{user.Name} {(user.IsAdmin ? "IS" : "is NOT")} an Admin.");
    }

    Console.WriteLine("\nPress ENTER key to close");
    Console.ReadLine();
}
</code></pre>
<p><strong>Console output:</strong></p>
<pre><code>UserList1 has been modifed!
Evil Alice IS an Admin.
Evil Bob IS an Admin.
Evil Carl IS an Admin.
Evil Dan IS an Admin.
Evil Eve IS an Admin.

UserList2 remains unchanged.
Alice is NOT an Admin.
Bob is NOT an Admin.
Carl is NOT an Admin.
Dan is NOT an Admin.
Eve is NOT an Admin.

Press ENTER key to close
</code></pre>
    </div>