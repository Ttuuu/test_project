<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>On top of the other great answers, here are a few additional comments.</p>

<p><strong>Style</strong></p>

<p>There is a <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python code called PEP 8</a> and I'd recommend reading it and trying to follow it more or less strictly.
It your case, you could change the functions/variables names.</p>

<p><strong>Better tests</strong></p>

<p>Your test suite can be improved with a few simple details:</p>

<ul>
<li><p>add the edge cases (strings of length 0 or 1) - also, these would need to be documented in the function docstring</p></li>
<li><p>add to your structure the expected output so that you can check the result automatically</p></li>
</ul>

<p>You could write something like:</p>

<pre><code>def unit_test_only_substring():
    # test cases - list of (input, expected_output)
    tests = [
        # Edge cases
        ('', False),  # To be confirmed
        ('t', False),  # To be confirmed
        # No repetition
        ('ab', False),
        ('tetestst', False),
        ('testteste', False),
        # Repetition
        ('tt', True),
        ('ttt', True),
        ('testtest', True),
        ('testtesttest', True),
    ]

    for str_input, expected_out in tests:
        out = onlySubstrings(str_input)
        print(out, '\t', expected_out, '\t', str_input)
        assert out == expected_out

if __name__ == '__main__':
    unit_test_only_substring()
</code></pre>

<p>You could go further and use a proper unit-test framework.</p>

<p><strong>More code improvement</strong></p>

<p>(Based on Hesham Attia)
This is great chance to learn about Python builtins <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all</code></a> and <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a>:</p>

<pre><code>def onlySubstrings(string):
    # The string can only contain equal substrings if you can shift it n
    # times (0 &lt; n &lt; len) and get the same original string.
    return any(shiftedString(string, i) == string for i in range(1, len(string)))
</code></pre>
    </div>