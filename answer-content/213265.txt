<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The two things that currently bother me most about this code are <strong>Naming</strong> and <strong>Abstraction</strong>.</p>

<p>Don't get me wrong, this is something pretty cool and it's really well-crafted for the most part. But I'm still waiting for this to go the last mile:</p>

<p>There is <strong>12</strong> local variables or functions in your main. I reckon you can easily reduce that to <strong>half</strong> as many by adding some more abstraction.<br>
While we're working on that, we should also look at the naming of these things.</p>

<p>Rough steps to make this much easier to grasp:</p>

<ol>
<li><p>Extract <code>getRotation</code> into a separate module and rename it to <code>computePhaseDelta</code> or something like that. Note that neither "Rotation" nor "Phase Difference" are accurate descriptions of what you try to describe.<br>
A phase difference is really only meaningful when comparing waveforms with the same frequency. For all other waveforms the phase difference is a function of time. I do prefer "phase difference" over "rotation", though. </p></li>
<li><p>Extract input-prompting into it's own function and encapsulate all information relating to the problem into a single type. This allows you to utterly abstract all the "low-level" prompting and handling away another step.</p></li>
<li><p>Move the image-drawing local function out of main. It's an infodump that's interrupting the control flow. It also adds another bunch of local variables. </p></li>
<li><p>Extract the gif conversion into it's own function. It's comparatively long as well.</p></li>
</ol>

<p>Overall <code>main</code> is intermingling a lot of abstaction levels. To avoid that you'll need to extract more functions.</p>

<hr>

<p>Now that I've bashed around there, I should mention that I found the <code>Input</code> module somewhat annoying to follow, mostly because of the line length and the the way functions are chained. 
Then again writing nice and abstract input functions in a functional language often is somewhat ugly ;)</p>

<p>I like very much the way you've set up <code>drawLine</code> and <code>drawPoint</code>. It's a bit hard to grasp on first reading, but you've made them "coordinate-system aware". They are also trivial to partially apply, which lends itself really well to functional programming.</p>

<p>You could've used extended partial application to reduce the complexity inside <code>drawSaveImage</code> after encapsulating it into a separate module (or attaching it to <code>Graphics.fs</code>). While you used it to construct <code>drawLine1</code>, <code>drawLine2</code> and <code>drawPoint</code>, you have not gained that much because all of the setup for colors and pens is still in <code>drawSaveImage</code></p>

<p>On that note: you're recursing inside <code>drawSaveImage</code>. I'd have preferred the function to only draw and save a single image given it's name. That might have also allowed you to simplify the pen and draw* setup across all invocations of the function by passing these as parameters.</p>

<hr>

<p>Overall I very much like this code, but I want to see the abstraction it performs taken to it's logical conclusion.</p>
    </div>