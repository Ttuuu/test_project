<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Make use of the keyword <code>final</code></strong></p>

<blockquote>
  <p>A final variable can only be initialized once, either via an
  initializer or an assignment statement. It does not need to be
  initialized at the point of declaration: this is called a "blank
  final" variable. A blank final instance variable of a class must be
  definitely assigned in every constructor of the class in which it is
  declared; similarly, a blank final static variable must be definitely
  assigned in a static initializer of the class in which it is declared;
  otherwise, a compile-time error occurs in both cases.[6] (Note: If the
  variable is a reference, this means that the variable cannot be
  re-bound to reference another object. But the object that it
  references is still mutable, if it was originally mutable.)</p>
</blockquote>

<p>Read more <a href="https://en.wikipedia.org/wiki/Final_(Java)" rel="nofollow">here</a></p>

<hr>

<p><strong><code>List</code> vs <code>ArrayList</code></strong></p>

<p>Also when you can declare the <code>ArrayList&lt;T&gt;</code> as <code>List</code>, that goes for <code>Map</code> as well. Reason being if you ever want to change which implementation it is easily done by just changing <code>ArrayList&lt;&gt;</code> to <code>LinkedList&lt;&gt;</code>, as an example.</p>

<hr>

<p>Which would change lines like these</p>

<pre><code>private int boardLength = 0;
private String[] colors = {"r", "g", "l", "y", "p", "b", "w"};
private ArrayList&lt;String&gt; board = new ArrayList&lt;String&gt;();
private ArrayList&lt;String&gt; tempBoard = new ArrayList&lt;String&gt;();
</code></pre>

<p>to</p>

<pre><code>private final int boardLength;
private final String[] colors = {"r", "g", "l", "y", "p", "b", "w"};
private final List&lt;String&gt; board = new ArrayList&lt;String&gt;();
private final List&lt;String&gt; tempBoard = new ArrayList&lt;String&gt;();
</code></pre>

<hr>

<p><strong>Commenting</strong></p>

<p>I would strongly advice against <code>//end else</code> comments like that one. As I can already track where it ends by following the code. Comments are a bit tricky to write. Most of the times they aren't needed if you are using good variable naming. In some cases however they can do wonders.</p>

<hr>

<p><strong>Redundancy</strong></p>

<pre><code>public void setPlayerName(String n) {
    playerName = n;
}

public String getPlayerName() {
    return playerName;
}
</code></pre>

<p>These are not needed as you can directly access the variable <code>playerName</code> in the <code>Game</code> class. When you want to change it you can simply type <code>playerName = "str";</code> and <code>System.out.println(playerName);</code> wherever you want in your <code>Game</code> class.</p>

<p><strong>ScreenHelper.java</strong></p>

<p>This only has one method, one could argue that that method can be moved to your <code>Game</code> class, however I would strongly advice to just make the method static and the constructor private. That means that you do not need to instantiate <code>ScreenHelper</code>to use the <code>String getUserInput(String prompt)</code>.</p>

<pre><code>public class ScreenHelper {

    private ScreenHelper ();

    public static String getUserInput(String prompt) {
        String inputLine = null;
        System.out.print(prompt + " ");
        try {
            BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
            inputLine = is.readLine();
            if (inputLine.length() == 0 ) return null;
        } catch (IOException e) {
            System.out.println("IOException: " + e);
        }
        return inputLine;
    }
}
</code></pre>

<p>Also the name <code>ScreenHelper</code> isn't great. Maybe let this class handle all input and output to the prompt? That would turn the class into something like this.</p>

<pre><code>public class Console {

    private Console ();

    public static String userInput(String msg) {
        String inputLine = null;
        System.out.print(prompt + " ");
        try {
            BufferedReader is = new BufferedReader(new InputStreamReader(System.in));
            inputLine = is.readLine();
            if (inputLine.length() == 0 ) return null;
        } catch (IOException e) {
            System.out.println("IOException: " + e);
        }
        return inputLine;
    }

    public static void output(String msg, boolean newline) {
        System.out.print(msg);
        if (newline) {
            System.out.println();   
        }
    }
}
</code></pre>

<p><strong>CodeBreaker.java</strong></p>

<p>Can easily be removed with these changes. Instead you will invoke the output and input like <code>Console.userInput ("Enter a guess: ")</code> and <code>Console.output ("NotANewLine", false)</code>.</p>
    </div>