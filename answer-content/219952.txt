<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>Academic/formal</em> is not what's needed here. <em>Simple</em> is what's needed.</p>

<p>A dict whose keys are all integers from 0 to n is suspicious. Why not use a list instead? You can add items to the end with <code>.append</code> and remove them with <code>.pop</code>. Then you don't have to bother with <code>max(_directory_stack.keys())</code>.</p>

<p>This is the usual way to implement a stack in Python.</p>

<p>Edit: oh, wait, here's an academic/formal issue: <code>popd</code> doesn't restore correctly with relative paths. For example:</p>

<pre><code>pushd('foo')
pushd('bar')
popd()
</code></pre>

<p>Should the directory now be <code>foo</code> or <code>foo/bar/foo</code>?</p>

<p>There are two ways to fix this:</p>

<ol>
<li><code>pushd</code> can convert the path to an absolute path with <code>os.path.abspath</code>.</li>
<li>Instead of saving the directory it's changing to, <code>pushd</code> can save the current directory (<code>getcwd</code>), and <code>popd</code> can just <code>chdir</code> to whatever it popped.</li>
</ol>

<p>Which one to do depends on where you want to restore to if someone changes the directory without telling <code>pushd</code>. Consider this sequence:</p>

<pre><code>pushd('/foo')
chdir('bar')
pushd('/baz')
popd()
</code></pre>

<p>Should the directory now be <code>/foo</code> or <code>/foo/bar</code>?</p>
    </div>