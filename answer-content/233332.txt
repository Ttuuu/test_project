<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>On what is slow. Not the if-chain.</p>

<p><code>ID=...</code> is very slow, maybe you can pass the terms to <code>print</code> individually.</p>

<p>The regular expression usage is slow too. Precompiling regex outside the looping is faster.</p>

<p>The if-chain can be reduced, but to some extent the compiler should be able to do it better. As the code can become a difficult and-or chaos.</p>

<p>Doing it yourself, I would transform</p>

<pre><code>if R1 == 6 and mis == 1:
    pass

elif R1 == 6 and mis == 0 and 0 &lt;= spacer &lt;= 3:
    pass

elif R1 == 7 and mis == 0 and 0 &lt;= spacer &lt;= 1:
    pass

elif R1 == 7 and mis == 1 and 0 &lt;= spacer &lt;= 3:
    pass
</code></pre>

<p>first <em>suboptimally</em> into:</p>

<pre><code>r16 = R1 == 6
r17 = R1 == 7
mis0 = mis == 0
mis1 = mis == 1
spg0 = 0 &lt;= spacer
spl1 = spacer &lt;= 1
spl3 = spacer &lt;= 3
</code></pre>

<p>Receiving the or'ed conditions:</p>

<pre><code>r16 and mis1
r16 and mis0 and spg0 and spg3
r17 and mis0 and spg0 and spg1
r17 and mis1 and spg0 and spg3
</code></pre>

<p>transformed into</p>

<pre><code>(r16 and (mis1 
          or (mis0 and spg0 and spg3)
          )
)
or
(r17 and ((mis0 and spg0 and spg1)
          or (mis1 and spg0 and spg3)
         )
)
</code></pre>

<p>transformed into</p>

<pre><code>(r16 and (mis1 
          or (mis0 and spg0 and spg3)
          )
)
or
(r17 and spg0 and ((mis0 and spg1)
          or (mis1 and spg3)
         )
)
</code></pre>

<p>transformed into</p>

<pre><code>(r16 and (mis1 
          or (mis0 and spg0 and spg3)
          )
)
or
(r17 and spg0 and ((mis0 and spg1)
          or (mis1 and spg3)
         )
)
</code></pre>

<p>These 7 boolean variables would lean themselves using a <a href="https://en.wikipedia.org/wiki/Karnaugh_map" rel="nofollow noreferrer">Karnaugh map</a>
to the most compact boolean expression.</p>

<p>As said the gain/effort ratio is little.</p>

<p>I would just exploit the exclusive conditions to make a simple nested if.</p>
    </div>