<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Comments are below the code fragments.</p>

<pre><code>const ENC_IN = "utf8";
const ENC_OUT = "base64";
</code></pre>

<p>With the choice of encryption and encoding, I'd include the "encoding" part fully (e.g. <code>ENCODING_IN</code> and <code>ENCODING_OUT</code>).</p>

<pre><code>const KEY = Buffer.from("â€¦", ENC_IN);
</code></pre>

<p>No, a key should not be a constant, and a key should certainly not be a string, even if it has a specific encoding. A key should be 16, 24 or 32 fully unpredictable bytes (for 128, 192 or 256 bit keys respectively). With UTF-8 you only have some 108 possible printable characters for each byte. Besides that, many libraries will not handle partial or overly long keys well.</p>

<p>If you want to use a password, then use a password based key derivation function (PBKDF) and then <code>createCipheriv</code> / <code>createDecipheriv</code>. Support for that is build in (note that <code>createCipher</code> / <code>createDecipher</code> is deprecated).</p>

<h2>Encryption</h2>

<pre><code>const encrypt = async function encrypt(data) {
</code></pre>

<p>At this point you may want to document the character encoding and the base 64 encoding that is being applied, the mode of operation and that an IV and authentication tag is added. Document or point to the protocol in other words.</p>

<pre><code>const IV = Buffer.from(CRYPTO.randomBytes(BUFFER_SIZE));
</code></pre>

<p>Good, random IV. For GCM though I'd use 12 bytes or the mode has to perform additional operations for no security benefit.</p>

<pre><code>const ENCRYPTED = Object.freeze({
</code></pre>

<p>Even though you froze the variable, it's still a local variable and therefore you should not be using all uppercase.</p>

<pre><code>data: enc,
iv: IV,
authTag: CIPHER.getAuthTag()
</code></pre>

<p>Now this is a bit weird. Unless I'm mistaken <code>enc</code> is now base 64 encoded, but <code>iv</code> and <code>authTag</code> are just plain buffers of binary data.</p>

<h2>Decryption</h2>

<pre><code> * @param {string} iv - initialisation vector
</code></pre>

<p>Strange, your <code>iv</code> of type <code>Buffer</code> seems to have magically become a string...</p>

<p>Otherwise the <code>decrypt</code> function is nicely symmetrical to the <code>encrypt</code> function, which is good.</p>

<hr>

<p>Beware of overly stringifying your code. Beware of wrapper classes; don't start using above class for all your code: use <strong>user specific</strong> encryption routines insetead, and clearly specify your protocol.</p>

<p>When using GCM, you may want to allow additional authenticated data (AAD) to be included in the calculation of the tag.</p>
    </div>