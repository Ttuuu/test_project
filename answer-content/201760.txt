<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Great job so far! I have a few suggestions for your code:</p>

<ol>
<li><p>Avoid writing functions with <a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)" rel="nofollow noreferrer">side effects</a> such as printed output. Side effects make a function much less reusable. Instead, you may return a <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator</a> that <code>yield</code>s the next entry. This gives the caller maximum control over what to do with the result set: print it, iterate one by one, just get the first few items without searching the entire structure, etc.</p></li>
<li><p>Consider adhering more strictly to <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Python naming conventions</a>. For example, functions should be lower_camel_cased. Since your function returns multiple PLUs, the function name seems more accurately written as <code>get_plus</code>. You can remove the <code>pass</code> keyword in your function and pay close attention to spacing, for example in the <code>print (data[item])</code> function call and your <code>else :</code> block.</p></li>
<li><p>Clean up lines like </p>

<pre><code>else :
    if item == 'PLU':
        print (data[item])
</code></pre>

<p>Which is logically equivalent to:</p>

<pre><code>elif item == 'PLU':
    print(data[item])
</code></pre></li>
<li><p>Use <code>data.items()</code> to iterate through your dictionary's keys and values rather than only keys. This allows cleaner syntax to access values.</p></li>
<li><p>Make your function more general for maximum reusability. Fetching a list of values by key from a dictionary is a task that should work for any key. Why not make "PLU" a search parameter? If you want to keep the original <code>get_plus</code> version, write both functions and have <code>get_plus</code> wrap the generalized version.</p></li>
<li><p><code>isinstance</code> may be a more <a href="https://stackoverflow.com/a/25232010">accurate choice</a> than <code>type</code> if you wish to allow collection subclasses of dictionary to use your function.</p></li>
</ol>

<p>Here's my version for consideration:</p>

<pre><code>def find_by_key(data, target):
    for key, value in data.items():
        if isinstance(value, dict):
            yield from find_by_key(value, target)
        elif key == target:
            yield value


def main():
    menu = {
      'PLU' : '234',
      'Salad': {
        'salad': {
            'ceaser':{
                'PLU': '32'
            },
            'italian':{
                'PLU': '33'
            }
        }
      },
      'Dessert': {
        'cookie': {
          'PLU': '334',
          'NAME': 'cookie ',
        }
      },
      'Appetizer': {
        'extra sauce': {
          'PLU': '61',
          'NAME': 'extra sauce',
        }
      }
    }

    for x in find_by_key(menu, "PLU"):
        print(x)


if __name__ == '__main__':
    main()
</code></pre>
    </div>