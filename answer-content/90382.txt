<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Eliminate unused variables</h2>

<p>The program currently doesn't do anything with <code>argc</code> or <code>argv</code>, so you could simply use <code>int main()</code> instead.  This would give a strong clue to the reader of the code that there are no command line options.</p>

<h2>Use all required <code>#include</code>s</h2>

<p>The code uses <code>exit(1)</code> but doesn't include the corresponding header.  The code should have</p>

<pre><code>#include &lt;cstdlib&gt;
</code></pre>

<p>And then use <code>std::exit(1)</code>.  Alternatively, since it's already in <code>main</code>, you could just use <code>return 0</code> instead of <code>exit</code>.</p>

<h2>Use string concatenation</h2>

<p>The menu includes these lines:</p>

<pre><code>cout &lt;&lt; "Menu Lab v1" &lt;&lt; endl;
cout &lt;&lt; "--------------" &lt;&lt; endl;
cout &lt;&lt; endl;
cout &lt;&lt; "A) Display Names in list" &lt;&lt; endl;
// etc.
cout &lt;&lt; "Enter your choice:";
</code></pre>

<p>Each of those is a separate call to <code>operator&lt;&lt;</code> but they don't need to be.  Another way to write that would be like this:</p>

<pre><code>cout &lt;&lt; "Menu Lab v1\n" 
        "--------------\n\n"
        "A) Display Names in list\n" 
        // etc.
        "Enter your choice:";
</code></pre>

<p>This reduces the entire menu to a single call to <code>operator&lt;&lt;</code> because consecutive strings in C++ (and in C, for that matter) are automatically concatenated into a single string by the compiler.</p>

<h2>Don't duplicate important constants</h2>

<p>The filename is hardcoded right now (see next suggestion), but worse than that, it's done in two completely indpendent places.  Better would be to create a constant:</p>

<pre><code>static const char *FILENAME = "namelist.txt";
</code></pre>

<h2>Consider the user</h2>

<p>Instead of having a hardcoded filename, it might be nice to allow the user to control the name and location of the file.  For this, it would make sense to use a command line argument and then pass the filename to the functions as needed.</p>

<h2>Be consistent with file operations</h2>

<p>In <code>addName</code> the file is explicitly close, but in <code>openFile</code> it is not.  This is because in <code>openFile</code>, <code>openfile</code> is a local variable that gets destroyed when the function returns, so the file is automatically closed.  Either is acceptable, but it would be a good idea to just do it one way consistently.  Similarly, the code uses the idiomatic combination declaration and open for <code>openFile</code> but uses two steps in <code>addName</code>. The latter could be rewritten as:</p>

<pre><code>ofstream outfile(FILENAME, std::ios_base::app);
</code></pre>

<h2>Separate user I/O from program functions</h2>

<p>In the <code>addName</code> function, there are really two things happening: getting the name from the user and then appending that name to the file.  Instead of interleaving those operations, I'd recommend separating them into separate functions.  This would allow for better error reporting if any of the operations fail (e.g. if the file can't be opened).  One possibility:</p>

<pre><code>void appendName(const char *filename, string &amp;name)
{
    ofstream outfile(filename, std::ios_base::app);
    outfile &lt;&lt; name &lt;&lt; endl;
}
void addName(){
    string name;
    cout &lt;&lt; "Please type a name you would like to add:";
    cin &gt;&gt; name;
    appendName(FILENAME, name);
    cout &lt;&lt; "Name added!" &lt;&lt; endl;
}
</code></pre>

<h2>Add error handling</h2>

<p>File operations can fail, so your program should both detect and handle such failures.  The one place the program currently checks a file operation at the moment is, unfortunately, not actually useful because it has no effect.  Specifically this:</p>

<pre><code>if(openfile.is_open())
{
    while(getline(openfile, getcontent))
    {
        cout &lt;&lt; getcontent &lt;&lt; endl;
    }
}
</code></pre>

<p>operates just like this:</p>

<pre><code>while(getline(openfile, getcontent))
{
    cout &lt;&lt; getcontent &lt;&lt; endl;
}
</code></pre>

<h2>Consider improving names</h2>

<p>I think <code>addName</code> is not a bad function name, but <code>openFile</code> is, since that function does more than simply open a file, and particularly because it also contains a variable named <code>openfile</code> (which is also a bad name in my opinion). Perhaps <code>listNames</code> would be a better name. </p>
    </div>