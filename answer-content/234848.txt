<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>"Impossible" check</strong></p>

<p>Per task description, <code>k &gt;= 2</code> and <code>n &gt;= 3</code>. But nevertheless you're performing this "impossible" check:</p>

<pre><code>if (n &lt; 3 || k &lt; 2) return 0;
</code></pre>

<p><strong>Redundant check</strong></p>

<p>I don't understand why you're checking cases <code>n == 3</code> separately. You could remove these <code>2</code> checks and have this case handled in your <code>for</code> loop quite easily as below (please note that the values of <code>i</code>, <code>countOne</code> and <code>countOther</code> have changed):</p>

<pre><code>long countOne = 0, countOther = 1, temp;
for (int i = 3; i &lt; n; i++) {
    temp = countOther * (k - 1) % MOD;
    countOther = (countOne % MOD + countOther * (k - 2) % MOD) % MOD;
    countOne = temp;
} 
</code></pre>

<p><strong>Variable naming</strong></p>

<p><code>countOne</code> or <code>countOther</code> are not a good way to call your variables - their names don't convey their purpose. I'll leave it up to you to come up with better names. </p>

<p><strong>Excessive modulo operation</strong></p>

<p>You don't have to perform a modulo operation more times than is needed. Given you task constraints, your can perform a modulo operation twice per iteration as below:</p>

<pre><code>temp = countOther * (k - 1) % MOD;
countOther = (countOne + countOther * (k - 2)) % MOD;
countOne = temp;
</code></pre>

<p><strong>Reduce scope of <code>temp</code></strong></p>

<p>As @Barmar correctly pointed out, your <code>temp</code> variable should be local to the <code>for</code> loop. It's not needed anywhere out of it.</p>

<p><strong>Simplify return statements</strong></p>

<p>You don't have to calculate <code>countOne</code> or <code>countOther</code> once you leave the <code>for</code> loop. You can do it all there, just fix your loop condition from <code>i &lt; n</code> to <code>i &lt;= n</code> and swap <code>countOne</code> with <code>countOther</code> in your <code>return</code> statements.</p>

<pre><code>for (int i = 3; i &lt;= n; i++) {
    long temp = countOther * (k - 1) % MOD;
    countOther = (countOne + countOther * (k - 2)) % MOD;
    countOne = temp;
}

if (x == 1) {
    return countOne;
}

return countOther;
</code></pre>

<p><strong>Final Code</strong></p>

<pre><code>public static long countArray(int n, int k, int x) {

    long countOne = 0, countOther = 1;
    for (int i = 3; i &lt;= n; i++) {
        long temp = countOther * (k - 1) % MOD;
        countOther = (countOne + countOther * (k - 2)) % MOD;
        countOne = temp;
    }


    return x == 1 ? countOne : countOther;
}
</code></pre>
    </div>