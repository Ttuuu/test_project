<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Please. Oh please stop doing this.</p>

<pre><code>using namespace std;
</code></pre>

<p>If this was a header file you just polluted the global namespace for anybody that uses your file. This will get it banned from any serious project. This is done in textbooks for some reason and is fine for short ten line example programs. But once you get past 10 lines it has issues. Stop using it; it is a bad habbit that will get you into real problems on any decent sized project.</p>

<p><a href="https://stackoverflow.com/q/1452721/14065"><em>Why is “using namespace std;” considered bad practice?</em></a></p>

<p>You do really the standard library is in the namespace std. So it only costs you 5 extra characters to use it.</p>

<pre><code>std::list&lt;T&gt;    myList;
</code></pre>

<p>Node is an implementation detail of the list. There is no reason for anybody using the list to know exactly how you implemented. Nor is there a reason to provide them with a <code>Node</code> class (as you will now need to maintain that concept).</p>

<pre><code>template&lt;class T&gt;
class Node
{
public:
    T data;
    Node&lt;T&gt; * next;
    Node&lt;T&gt;(const T&amp; d):data(d), next() {}
    Node&lt;T&gt;(const Node&lt;T&gt;&amp; copyNode) : data(copyNode.data), next() {}

private:
    Node&lt;T&gt;&amp; operator=(const Node&lt;T&gt;&amp;);
};
</code></pre>

<p>So I would make <code>Node</code> a private member of <code>LinkedList</code>.</p>

<p>Its not really a copy constructor if you don't copy the <code>next</code> member.</p>

<pre><code>Node&lt;T&gt;(const Node&lt;T&gt;&amp; copyNode) : data(copyNode.data), next() {}
</code></pre>

<p>But OK. I can see this as an optimization.
But personally I would have used a third constructor.</p>

<pre><code>Node&lt;T&gt;(const Node&lt;T&gt;&amp; copyNode, Node&lt;T&gt;* next)
    : data(copyNode.data)
    , next(next) 
{}
</code></pre>

<p>Then you can pass NULL as the second parameter, to initialize next.</p>

<p>So you have disabled the assignment operator:</p>

<pre><code>private:
    Node&lt;T&gt;&amp; operator=(const Node&lt;T&gt;&amp;);
</code></pre>

<p>This is correct in C++03. But this is 2014 and C++11 is supported by all modern compilers and most already support C++14. So you should start using the modern version of the language.</p>

<pre><code>    Node&lt;T&gt;&amp; operator=(const Node&lt;T&gt;&amp;) = delete;
</code></pre>

<p>Your implementation of linked list uses NULL as a terminator (which is fine). <strong>But</strong> if you add a fake sentinel value to your list it makes the implementation much easier as you never have NULL pointers (and end points at the sentinel).</p>

<p>In the copy constructor:</p>

<pre><code>    if (!head &amp;&amp; curr)
</code></pre>

<p>At this point <code>head</code> is always NULL. You just set it two lines above.</p>

<p>The other thing to note about the copy is that it will leak if you throw an exception. Since you don't know what the type of <code>T</code> is you have no idea how it will react to being copied. If halfway through the copy it throws an exception you should clean up any memory allocated so far before letting the exception propagate out of the constructor.</p>

<p>You are on the correct track with the assignment operator.</p>

<pre><code>template&lt;class T&gt;
LinkedList&lt;T&gt;&amp; LinkedList&lt;T&gt;::operator=(LinkedList byValList)
{
    // BUT this line is not enough
    //     Assignment should make a copy of all the elements.
    std::swap(head, byValList.head);


    // Usually this is implemented as:
    // Now you need to write a version of swap for this class
    // (both member and free standing)
    byValList.swap(*this);

    return *this;
}
</code></pre>

<p>I would write them like this:</p>

<pre><code>template&lt;class T&gt;
LinkedList&lt;T&gt;::swap(LinkedList&lt;T&gt;&amp; rhs) noexcept // swap is supposed to be 
{                                                // free from exception
    std::swap(head,  rhs.head);                  // throwing
    std::swap(tail,  rhs.tail);
}

template&lt;class T&gt;
void swap(LinkedList&lt;T&gt;&amp; lhs, LinkedList&lt;T&gt;&amp; rhs) {lhs.swap(rhs);}
</code></pre>

<p>In the destructor:<br>
You don't use <code>curr</code> to do anything useful. Remove it.</p>

<pre><code>    Node&lt;T&gt; * curr = head;

        curr = head;
</code></pre>

<p>In your insert methods. I personally would return a reference to <code>*this</code> (see below). But in both your insert methods you check for empty is always a bit weird before assigning the other end. I would break the test for empty into its own method <code>empty()</code> then you can test <code>empty()</code> before doing your special case code.</p>

<pre><code>template&lt;class T&gt;
LinkedList&lt;T&gt;&amp; LinkedList&lt;T&gt;::insertToTail(T val);
</code></pre>

<p>This allows you to use operator chaining.</p>

<pre><code>LinkedList&lt;T&gt;  list;
list.insertToTail(1).insertToTail(2).insertToTail(3);
</code></pre>

<p>Nothing wrong with a print method. But I would do three additional things. As the <code>print()</code> method does not modify the content of the list it should be marked as <code>const</code>. Rather than always printing to <code>std::cout</code> I would pass the output stream as a parameter (it can default to <code>std::cout</code> when none is provided. I would also write the output operator  <code>operator&lt;&lt;</code> as that is the normal way of printing in C++.</p>

<pre><code>template&lt;class T&gt;
void LinkedList&lt;T&gt;::print(std::ostream&amp; stream = std::cout) const;

std::ostream&amp; operator&lt;&lt;(std::ostream&amp; stream, LinkedList&lt;T&gt; const&amp; data)
{
    data.print(stream);
    return stream;
}
</code></pre>

<p>That's an expensive print when done backwards.<br>
But once you have the list reversed. Why not re-use your standard print function?</p>

<pre><code>template&lt;class T&gt;
void LinkedList&lt;T&gt;::printBackwards(std::ostream&amp; stream = std::cout) const
{
     LinkedList&lt;T&gt;  rev;
     for(Node&lt;T&gt;* curr = rev.head; curr != NULL; curr = curr-&gt;next)
     {    rev.insertToHead(curr-&gt;data);
     }
     rev.print(stream);
}
</code></pre>

<p>Finally. In the sumLists. Its fine upto the point. where one list is empty. But the second part where one list is empty is over complex and you have a lot of nested ifs. Why not check and do each list individually.</p>

<pre><code>template&lt;class T&gt;
LinkedList&lt;int&gt; LinkedList&lt;T&gt;::sumLists(const LinkedList&lt;int&gt;&amp; LL1, LinkedList&lt;int&gt;&amp; LL2)
{
    // First part good.

    // Only one is true.
    // But if you look at the code it is neater.
    // and more self contained.
    while (curr1)
    {
        if (carry)
        {
            ResultList.insertToTail(curr1-&gt;data + carry);
            carry = 0;
            continue;
        }
        ResultList.insertToTail(curr1-&gt;data);
        curr1 = curr1-&gt;next;
    }

    while (curr2)
    {
        if (carry)
        {
            ResultList.insertToTail(curr2-&gt;data + carry);
            carry = 0;
            continue;
        }
        ResultList.insertToTail(curr2-&gt;data + carry);
        curr2 = curr2-&gt;next;
    }
}
</code></pre>

<p>You will also notice that the two loops are very similar. So you can break that code into a separate method and call it twice.</p>

<pre><code>template&lt;class T&gt;
LinkedList&lt;int&gt; LinkedList&lt;T&gt;::sumLists(const LinkedList&lt;int&gt;&amp; LL1, LinkedList&lt;int&gt;&amp; LL2)
{
    // First part good.

    // Only one is true.
    // But if you look at the code it is neater.
    // and more self contained.
    AddStuffToListOne(curr1, ResultList);
    AddStuffToListOne(curr2, ResultList);

}
</code></pre>
    </div>