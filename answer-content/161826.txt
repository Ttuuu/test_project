<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Make it <strong>simpler</strong>, you can use read-only properties:</p>

<pre><code>public class User
{
    public string FirstName { get; }
    public string Surname { get; }
    public string Email { get; }

    public User(string firstName, string surname, string email)
    {
        FirstName = firstName;
        Surname = surname;
        Email = email;
    }
}
</code></pre>

<p>Now let's consider to make it <strong>closed</strong>, I do not see any <em>extension point</em> then if you don't have any other requirement against this you should also mark it as not inheritable:</p>

<pre><code>public sealed class User
</code></pre>

<p>What next? Make it <strong>safer</strong>. Your class and its ctor are public then you should validate parameters:</p>

<pre><code>public User(string firstName, string surname, string email)
{
    if (firstName == null)
        throw new ArgumentNullException(nameof(firstName));

    if (surname == null)
        throw new ArgumentNullException(nameof(surname));

    if (email == null)
        throw new ArgumentNullException(nameof(email));

    FirstName = firstName;
    Surname = surname;
    Email = email;
}
</code></pre>

<p>If you're using C#7 then consider to use throw exceptions (see <a href="https://codereview.stackexchange.com/questions/161825/really-simple-immutable-user-class/161826#comment307128_161826">pgerchev's</a> comment and <a href="https://codereview.stackexchange.com/a/161883/13424">t3schb0t</a>'s answer).</p>

<p>Class has not to be public? Remove <code>public</code> from its declaration. Constructor is not intended to be called outside your own assembly but class has to be public? Mark ctor as <code>internal</code> and assert  about its arguments.</p>

<p>Note about <code>Debug.Assert</code>: obviously this does not mean you won't need to validate <em>somewhere</em> these arguments (<a href="https://codereview.stackexchange.com/questions/161825/really-simple-immutable-class#comment307161_161826">see also comments</a>) when building in release mode, just that here you assume they're right. See also <a href="https://stackoverflow.com/a/1276318/1207195">Exception Vs Assertion</a>, consider pre/post-conditions not an alternative to validation but - sort of - run-time unit testing:</p>

<pre><code>internal User(string firstName, string surname, string email)
{
    Debug.Assert(firstName != null);
    Debug.Assert(surname != null);
    Debug.Assert(email != null);

    FirstName = firstName;
    Surname = surname;
    Email = email;
}
</code></pre>

<p>Do you need any other validation (<code>email</code> has not to be empty and it has to be a valid e-mail address, for example)? Add them all there. Be careful with people's name validation (see David's <a href="http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/" rel="nofollow noreferrer">linked post</a>).</p>

<p>Anything else? Make it <strong>easier to debug</strong>:</p>

<pre><code>[DebuggerDisplay("{FirstName} {Surname} ({Email})")]
public sealed class User
</code></pre>

<p>Last note: yes, there is an <code>[ImmutableObject]</code> attribute you may use to decorate your class but AFAIK it's used only by <code>PropertyGrid</code> control. You may add it as reminder (for you or for future readers) that class has to be immutable but nothing else.</p>
    </div>