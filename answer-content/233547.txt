<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p><code>__getitem__</code>, <code>__setitem__</code>, and <code>__delitem__</code> should share index-validation and repair code. In <code>__delitem__</code> you check the type of <code>index</code> as well as its algebraic sign (whether it's negative). In <code>__getitem__</code> and <code>__setitem__</code>, you check only the algebraic sign; did you intend to not check the type of <code>index</code> in those two functions? If so, you should comment on why. If not, then you should write something like </p>

<pre><code>def __validate_and_repair_index(self, index):
    if type(index) is not int:
        raise TypeError('list index must be an integer')
    # count from the end if "index" is negative
    index = self._size + index if index &lt; 0 else index
    return index
</code></pre>

<p>and call it from all three of <code>__getitem__</code>, <code>__setitem__</code>, and <code>__delitem__</code>, and maybe some other places, too.</p></li>
<li><p>The following block in <code>__delitem__</code> seems to have a bug (testing <code>_head</code> instead of <code>_tail</code>)</p>

<pre><code>elif index == self._size - 1 and self._head is not None:
    self._tail = self._tail._prev
    self._tail._next = None
    self._size -= 1
</code></pre></li>
<li><p>Many of your docstrings and comments are vapid and should be removed or made informative. For example <code>"""Initialize default values"""</code> in <code>__init__</code> doesn't tell the reader anything, but wastes the reader's time. A docstring in <code>__len(self)__</code> that says <code>"""Implement len(self)"""</code> similarly adds no information and simply wastes your reader's attention and energy. A comment that says <code>change index if negative</code> right above code that does nothing other than change index if negative is not an informative comment. A better one would be <code>count from the end if index is negative</code> because that's the <em>intent</em> of <code>change index if negative</code>: that's <em>why</em> you're changing index if negative. A comment like <code>if t is not int:  # check if index is integer</code> is unnecessary: it simply re-iterates the plain meaning of the code in other words. If you were writing a story, you would not write "I went to the store this morning; this morning, to the store I went." So why would you write comments like that in code that is already crystal clear and can't have any intent other than the obvious one? There are more cases in the code. Some comments can profitably made into <code>asserts</code>. For instance, in <code>insertStart</code>, you might replace <code># or not self._tail</code> with <code>assert not self._tail</code> on a new line.</p></li>
<li><p>The fields of <code>_Node</code> should not be named <code>_value</code>, <code>_prev</code>, and <code>_next</code> because the underscore prefix conventionally connotes "protected," meaning accessible only in subclasses. Various linters and IDEs (like PyCharm) will flag every access of those fields because <code>_Node</code> is used directly in the rest of the code, not through subclasses.</p></li>
<li><p>Is there a bug in <code>__contains__</code>? Should <code>i == item</code> be <code>i.value == item</code>?. Likewise, should <code>__getitem__</code> return the <code>Node</code> object or the value of the <code>Node</code> object?</p></li>
<li><p>I'm allowed to insert <code>math.nan</code> and <code>cmath.nanj</code>, but they will fail equality tests such as that in <code>__contains__</code>. Fixing this requires some design. Should nans be disallowed? How? Silently rejected? Ignored? Raise a <code>ValueError</code>? With or without a message?</p></li>
</ol>

<p>As a general comment, if you write tests along with your code before going to code review, you will have many fewer issues in the review. I highly recommend <a href="https://hypothesis.readthedocs.io/en/latest/" rel="nofollow noreferrer">hypothesis for Python</a>, which runs on <a href="https://docs.pytest.org/en/latest/getting-started.html" rel="nofollow noreferrer">pytest</a>. Here, for instance, is a <code>strategy</code> for <code>hypothesis</code> that generated many examples that broke much of the original code:</p>

<pre><code>from typing import Union
import hypothesis.strategies as st

Atom = Union[str, float, bool, int, complex]

PayloadStrategy = st.deferred(
    lambda: st.from_type(Atom) |
            st.lists(PayloadStrategy) |
            st.tuples(PayloadStrategy) |
            st.iterables(PayloadStrategy) |
            # st.sets(PayloadStrategy) |  # TODO: why doesn't this work?
            st.dictionaries(
                keys=st.from_type(str),
                values=PayloadStrategy))
</code></pre>
    </div>