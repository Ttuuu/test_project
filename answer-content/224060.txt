<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If bishop <code>X</code>, <code>Y</code> &amp; <code>Z</code> are all on a diagonal, <code>X</code> can capture <code>Y</code>, <code>Y</code> can capture both <code>X</code> &amp; <code>Z</code>, and <code>Z</code> can capture <code>Y</code>.  All 3 are unsafe.  If the problem has <em>no requirement to determine exactly which bishop captures which bishops</em> -- just determine the number which could be captured -- then you don't need to move each bishop along the each of the four <code>dx, dy in moves</code> directions until it encounters another bishop.  That is just mechanical busy work.</p>

<p>A bishop <code>X</code> is unsafe if any other bishop <code>Y</code> satisfies either (or both) of the following:</p>

<ul>
<li><code>bishop[X][0] + bishop[X][1] == bishop[Y][0] + bishop[Y][1]</code>, or</li>
<li><code>bishop[X][0] - bishop[X][1] == bishop[Y][0] - bishop[Y][1]</code>.</li>
</ul>

<p>You can partition the bishops according to diagonals.  If two or more bishops are on the same diagonal, all of those bishops are unsafe.</p>

<p>Note that the <code>size</code> of the board is unnecessary.</p>

<hr>

<p>The following is a review of and improvement upon <a href="https://codereview.stackexchange.com/a/224052/100620">@RootTwo's answer</a>.</p>

<p>A vanilla dictionary is a poor choice for <code>nwse</code> and <code>nesw</code>.  That requires you check if the diagonal index has already been created in the dictionary, to determine whether to store a new list in the dictionary, or to appended to the existing list.  A better option is to use <a href="https://docs.python.org/3/library/collections.html?highlight=defaultdict#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a>, which automatically creates the entry using the provided default if that entry is not present:</p>

<pre><code>from collections import defaultdict

nwse = defaultdict(list)
nesw = defaultdict(list)
</code></pre>

<p>The <code>bishops</code> is already a collection of <code>tuple</code> coordinates.  Creating your own tuples in <code>= [(row,col)]</code> and <code>.append((row,col))</code> is creating new objects identical to the existing ones in everything except identity.  There is no need to pollute the memory with these new tuples; just reuse the existing ones:</p>

<pre><code>for bishop in bishops:
    row, col = bishop
    nwse[row + col].append(bishop)
    nesw[row - col].append(bishop)
</code></pre>

<p>The <code>for k,v in nwse.items():</code> loop never uses the dictionary key value (<code>k</code>) in the body of the loop.  It makes no sense to extract it from the dictionary.  Just loop over the <code>values()</code> of the dictionaries:</p>

<pre><code>in_danger = set()

for v in nwse.values():
    if len(v) &gt; 1:
        in_danger.update(v)

for v in nesw.values():
    if len(v) &gt; 1:
        in_danger.update(v)
</code></pre>

<p>The problem asks for "how many bishops are unsafe", not the number that are safe.  So the output should be:</p>

<pre><code>print(len(in_danger))
</code></pre>

<p>Finally, follow the PEP-8 standards.  Specifically, you need a space after all of your commas.</p>

<pre><code>from collections import defaultdict

bishops = [(0, 0),
           (1, 1),
           (0, 2),
           (1, 3),
           (2, 0),
           (2, 2)]

nwse = defaultdict(list)
nesw = defaultdict(list)

for bishop in bishops:
    row, col = bishop
    nwse[row + col].append(bishop)
    nesw[row - col].append(bishop)

in_danger = set()

for v in nwse.values():
    if len(v) &gt; 1:
        in_danger.update(v)

for v in nesw.values():
    if len(v) &gt; 1:
        in_danger.update(v)

print(len(in_danger))
</code></pre>
    </div>