<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Learn to love <a href="https://github.com/rust-lang-nursery/rustfmt" rel="noreferrer">rustfmt</a>. It will correct your code to the idiomatic Rust style.</p></li>
<li><p>Learn to love <a href="https://github.com/rust-lang-nursery/rust-clippy" rel="noreferrer">clippy</a>. It will provide more lints to change your code to be more idiomatic. For example, it identifies many unneeded <code>return</code> statements in your code.</p></li>
<li><p>When you accept a reference, you do not need to dereference and reference it. You can just use the variable directly.</p></li>
<li><p>Recent Rust versions removed the need to use <code>ref</code> in patterns when it's "obviously" the right thing. It also removed the need to match on a dereferenced variable (<code>match *foo</code>).</p></li>
<li><p>Instead of calling <code>format!("{}", foo)</code>, just call <code>foo.to_string()</code>.</p></li>
<li><p>Instead of having functions called <code>foo_bar</code> taking a <code>Foo</code> as the first argument, make them methods. Methods can automatically take references to their <code>self</code> parameter.</p></li>
<li><p>Naming the subexpressions and integer value doesn't really bring much value. I'd switch to a tuple struct.</p></li>
<li><p>Bringing the variants of the enum into scope in a method (<code>use Foo::*</code>) can reduce duplication.</p></li>
<li><p>Instead of creating a custom <code>to_str</code> method, implement <code>Display</code>.</p></li>
<li><p>Use <code>///</code> for documentation comments.</p></li>
</ol>



<pre><code>use std::fmt;

/// Simple expression for working on numbers
enum Exp {
    Add(Box&lt;Exp&gt;, Box&lt;Exp&gt;),
    Mul(Box&lt;Exp&gt;, Box&lt;Exp&gt;),
    Int(i32),
}

impl Exp {
    /// Evaluate an expression to a number
    fn to_num(&amp;self) -&gt; i32 {
        use Exp::*;
        match self {
            Add(e1, e2) =&gt; e1.to_num() + e2.to_num(),
            Mul(e1, e2) =&gt; e1.to_num() * e2.to_num(),
            Int(i) =&gt; *i,
        }
    }
}

impl fmt::Display for Exp {
    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {
        use Exp::*;
        match self {
            Add(e1, e2) =&gt; write!(f, "({}) + ({})", e1, e2),
            Mul(e1, e2) =&gt; write!(f, "({}) * ({})", e1, e2),
            Int(i) =&gt; write!(f, "{}", i),
        }
    }
}

fn main() {
    // Create an expression
    let e1 = Exp::Add(
        Box::new(Exp::Mul(Box::new(Exp::Int(2)), Box::new(Exp::Int(3)))),
        Box::new(Exp::Int(4)),
    );

    // Evaluate the expression
    println!("e1 : {}", e1.to_num());
    println!("e1 : {}", e1);
}
</code></pre>
    </div>