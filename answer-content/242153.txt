<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This outputs the same as your function:</p>

<pre class="lang-py prettyprint-override"><code>import array
from itertools import count


def sieve():
    primes = array.array("L", [2])  # L: unsigned long int
    for candidate in count(start=3, step=2):
        n = 0
        while primes[n] ** 2 &lt;= candidate:
            if candidate % primes[n] == 0:
                break
            n += 1
        else:  # nobreak
            yield primes[-1]
            primes.append(candidate)


n = 0
primes = sieve()

while True:
    prime = next(primes)
    print(prime)
    n += 1
</code></pre>

<p>I did not touch the algorithm itself because I am unfamiliar, but Python (tested on 3.8.2, but also runs on 2.7.18, as you seem to need given your tag <a href="/questions/tagged/python-2.x" class="post-tag" title="show questions tagged 'python-2.x'" rel="tag">python-2.x</a>) has the <code>while</code>/<code>else</code> construct that can help you with your control flow here.</p>

<p>A <code>break break</code>, <code>break &lt;label&gt;</code> or similar thinkable constructs have been <a href="https://www.python.org/dev/peps/pep-3136/" rel="noreferrer">proposed</a>, as you linked as well, but rejected.
A possible remedy is to extract sub-routines into functions and to use their <code>return</code> statements for control flow/multi-level breaking.
In your case, that is not needed.</p>

<p>The <code>while</code>/<code>else</code> construct is unfamiliar to many. In fact, it is so alien that Guido <a href="https://mail.python.org/pipermail/python-ideas/2009-October/006157.html" rel="noreferrer">would not implement it again</a> nowadays.
For now, it is best to think of the <code>else</code> as <code>nobreak</code>: the <code>while</code> loop finished normally (its condition evaluated to <code>False</code>) and exited.
Since <em>no</em> <code>break</code> occurred, the <code>else</code> block is executed.</p>

<p>In the above case, if <code>break</code> is hit in the <code>if</code> block, the <code>else</code> is <em>skipped</em>: no <code>yield</code> occurs, and since after the <code>else</code> block, there is no code left, a <code>continue</code> for the outer <code>for</code> loop is implied and not explicitly necessary, since there is nothing else to do anyway.</p>

<hr>

<p>A frequent example is in the form of <code>for</code>/<code>else</code> (which works like the <code>while</code>/<code>else</code>) when looking for a hit, like in your case:</p>

<pre class="lang-py prettyprint-override"><code>for file in files:
    if file == file_looked_for:
        file.do_something()
        break
else:  # nobreak
    # code to handle file not found
</code></pre>

<p>So while, like you, I have been tripped up by the lack of advanced <code>break</code> functionalities, I agree with Guido.
Apart from the unfortunate naming of <code>else</code> in the <code>while</code> construct (more discussion <a href="https://news.ycombinator.com/item?id=17169331" rel="noreferrer">here</a>), it can do the job just fine.
Trying to break through multiple levels is an occasion to rethink the implementation.</p>

<hr>

<p>Other observations:</p>

<ul>
<li><p><code>primes[n]</code> has to call <code>__getitem__</code>, which happens twice. This is constant-time, but the following will probably provide a speed-up (but requires the "walrus" operator from Python 3.8):</p>

<pre class="lang-py prettyprint-override"><code>  while (
      (prime := primes[n]) ** 2 &lt;= candidate
  ):  # You only need to check up to the square root of a number.
      if candidate % prime == 0:
</code></pre>

<p><code>primes</code> no longer has to be looked up, the simple, local <code>prime</code> suffices for the second call.</p></li>
<li><code>n = n + 1</code> can be <code>n += 1</code>. However, this is possibly slower.</li>
<li><p>Finally, the built-in <code>array.array</code> can be much faster than a <code>list</code>. This is because <code>list</code>s can hold arbitrary objects, whereas an <code>array</code> has to be initiliazed for a specific one (here: <code>L</code> for <code>long int</code>, which will <a href="https://en.wikibooks.org/wiki/C_Programming/limits.h" rel="noreferrer">last a while</a>). As a positive consequence, the <code>array</code> can then be optimized accordingly.</p>

<p>Note how <code>array.array</code>, in this case, is a 1:1 drop-in for the previous <code>list</code>. As such, the code did not have to change. As such, it is also easy for you to revert the change if unwanted.</p></li>
</ul>
    </div>