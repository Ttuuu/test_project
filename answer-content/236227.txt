<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Can I hide the <code>value</code> member variable so it is not visible to the rest of the program, but only within this namespace?</p>
</blockquote>

<p>I prefer to move independent modules to external dll library (libraries), in which case I may use <code>internals</code> magic and then expose only <code>public</code> classes to outer world. Unity3d's Assembly Definition system basically does the same thing.</p>

<p>In your case you could make <code>value</code> private and create public property:</p>

<pre><code>[SerializeField]
private double value;
public double Value =&gt; value;
</code></pre>

<p>So now external scripts cannot modify internal state of the struct, which generally is desired behavior.</p>

<blockquote>
  <p>Are the Equals() and GetHashCode() methods implemented correctly?</p>
</blockquote>

<p>Equals() can be simplified a little:</p>

<pre><code>obj is Meter other &amp;&amp; value.Equals(other.value);
</code></pre>

<p>GetHashCode(), on the other hand, references <code>value</code> field, which is mutable. Part of my answer already covered it, but if you'll keep your <code>value</code> internal, evil might happen:</p>

<pre><code>var unit = new Unit(1);
var dictionary = new Dictionary&lt;Unit, int&gt; {[unit] = 1};
unit.value = 2;
Assert.True(dictionary.ContainsKey(unit)); // Is it true? Is it false?
</code></pre>

<p>You might think it's convenient that <code>Unit</code> with new value represents completely different entity which no longer exists inside the dictionary... Or you might think that <code>Unit</code> is still the same object whatever its value is. Or you might accidentally modify <code>value</code> and wonder why your dictionary returns KeyNotFoundException.</p>

<blockquote>
  <p>Are there other changes that I should do to make this more idiomatic C#?</p>
</blockquote>

<p>There might be problem with equality operations. Consider following example:</p>

<pre><code>double a = 0.1d;
double b = 0.2d;
double c = 0.3d;
Assert.True(a + b == c); // Actually it's false.
</code></pre>

<p>I prefer instead of <code>m1.value == m2.value</code> use <code>Math.Abs(m1.value - m2.value) &lt; tolerance</code>.</p>
    </div>