<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>AbstractImmutable</code> doesn't seem to do anything except provide operators to the underlying type. However, many of the operators aren't necessarily relevant (e.g. dividing a <code>std::string</code>). </p>

<p>When adding another <code>ImmutableFoo</code> object to the hierarchy (e.g. an <code>ImmutableUInt</code>), would we add all the operators to the base class? Why support addition, subtraction, multiplication, and division, but not the remainder, or bitwise operators? Note that none of these operators will make sense for <code>std::string</code> either.</p>

<p>There seems no reason to prefer the <code>StateName : ImmutableString : AbstractImmutable&lt;T&gt;</code> hierarchy over a simple <code>(const) std::string</code> member in <code>State</code>.</p>

<hr>

<p>What is the purpose of <code>Callable</code>? Using <code>State</code> as a base class seems sufficient - there is no reason for <code>Callable</code> to exist in the provided code, since it isn't used.</p>

<p>(Note that <code>Callable&lt;NextState&gt;</code> is a different type from <code>Callable&lt;void&gt;</code>, as used by the <code>StateManager</code>. So they can't be stored by a common base class (if that's the intent), because there isn't one.)</p>

<hr>

<p><code>State::run</code> should probably be an abstract function (<code>virtual NextState run() = 0;</code>), to force derived classes to implement it and remove the need for the <code>NotImplementedException</code>.</p>

<p><code>isTerminalState()</code> should probably also be abstract to prevent mistakes (forgetting to override it would be quite easy).</p>

<p>Note that <code>AbortState</code> would throw a <code>NotImplementedException</code> with a somewhat misleading message if run. "Function must not be called" would be more accurate.</p>

<hr>

<p>We should use the <code>override</code> keyword to indicate overriding virtual functions in derived classes (if not also the <code>virtual</code> keyword).</p>

<hr>

<p>Use <a href="https://en.cppreference.com/w/cpp/thread/sleep_for" rel="nofollow noreferrer"><code>std::this_thread::sleep_for()</code></a> as a cross-platform solution, instead of <code>sleep</code> or <code>usleep</code>.</p>

<hr>

<p>Note that it's <a href="https://en.cppreference.com/w/cpp/memory/shared_ptr/shared_ptr" rel="nofollow noreferrer">possible to create a <code>std::shared_ptr</code> directly from a <code>std::unique_ptr</code></a>. <code>StateManager</code> could therefore take the starting state by <code>unique_ptr</code> in the constructor (enforcing transfer of ownership) rather than the ambiguous raw pointer.</p>

<p><code>State::run()</code> should probably also return a <code>std::unique_ptr</code>.</p>

<p>... In fact, is there a reason to use <code>std::shared_ptr</code> here at all?</p>

<hr>

<p>I believe it is generally preferred to make mutex data-members <code>mutable</code>, allowing for const-correctness (e.g. for <code>StateManager::isRunning()</code> and <code>StateManager::getStateName()</code>).</p>

<hr>

<p>Should <code>StateManager::setCurrentState()</code> really be public?</p>

<hr>

<p>We should use <a href="https://en.cppreference.com/w/cpp/error/exception_ptr" rel="nofollow noreferrer"><code>std::exception_ptr</code></a> to propagate an exception to the main thread. This removes the need for the <code>AbortState</code>.</p>

<hr>

<p>Instead of (presumably) looping in the <code>EndState</code> until the main thread checks on us, why not return an empty <code>NextState</code> pointer in <code>State::run</code>? If we check for this and return in the <code>StateManager</code>, then we don't need the <code>EndState</code> or the <code>isTerminalState()</code> functions either.</p>

<hr>

<p><em>Some other things to maybe try:</em></p>

<ul>
<li><p>It might be useful to keep track of whether a given state is currently-running, has-been-created-and-is-waiting-to-be-run, or has-ended-and-is-waiting-to-be-destroyed.</p>

<p>This system is perhaps somewhat contrary to C++ principles of RAII. Perhaps it could be re-worked so that <code>State</code> objects exist only while they are being run. This could be done by changing the <code>State::run()</code> to return a factory-function used to create the next state, rather than the created state itself.</p></li>
<li><p>Perhaps the <code>State</code> class-hierarchy could be entirely eliminated in favor of something like:</p>

<pre><code>struct State {
    std::string _name;
    std::function&lt;std::unique_ptr&lt;State&gt;()&gt; _function;
};
</code></pre></li>
</ul>
    </div>