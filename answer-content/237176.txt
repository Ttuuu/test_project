<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I won't repeat the germane critiques of the other answers, which are good. Rather than concentrating on the line-by-line improvements, I have some suggestions for the general organization of the code.</p>

<p>First off, your general technique here is sound. But I want to describe two techniques you can use to make the code easier to read and understand, and to make more powerful tools that you can use in other projects.</p>

<p>The first is to notice that <em>you have created a new data structure but done it in a completely ad-hoc way</em>.  You have built a data structure called "multidictionary" -- that is, a dictionary that is a map from a key to a <em>set</em> of values -- out of a dictionary. That's great, but your code would be easier to read and better organized if you actually just made a multidictionary type!</p>

<pre><code>sealed class Multidictionary&lt;K, V&gt;
{
    private Dictionary&lt;K, List&lt;V&gt;&gt; dictionary = ...
    // Can you fill in the rest of this class?
    // Here are some methods you'll probably want:
    public void Add(K k, V v) { ... }
    public IEnumerable&lt;K&gt; Keys { get ... }
    public IEnumerable&lt;IEnumerable&lt;V&gt;&gt; Values { get ... }
}
</code></pre>

<p>(Of course you can always download a professional multidictionary class; there are plenty of such packages available. But for the learner it is skill-building to make your own.)</p>

<p>Once you have that class, look at how much nicer your main algorithm gets:</p>

<pre><code>        var anagramsTable = new Multidictionary&lt;string, string&gt;();
        foreach (string str in strList)
            anagramsTable.Add(string.Concat(str.OrderBy(c =&gt; c), str);
        var anagrams = anagramsTable.Values
          .Select(vs =&gt; vs.ToList()).ToList();
</code></pre>

<p>By offloading the boring mechanical details into its own class, the <em>meaning</em> of the code becomes very clear. What are we doing? Putting each string into a multidictionary keyed on a canonicalization, then extracting the values of that multidictionary into a list of lists.  The code makes it very clear what is happening.</p>

<p>Some of the other answers have suggested that you can do the same with <code>GroupBy</code>. That is completely accurate. <strong>You now have some insight into how <code>GroupBy</code> is implemented</strong>. <code>GroupBy</code> constructs a multidictionary behind the scenes!</p>

<p>Let's for the sake of pedagogy assume that <code>GroupBy</code> does not exist or you are not familiar with it. Can we improve this further?  Yes, by again seeing that there is a generalization.  What are you <em>really</em> doing here, <em>in general</em>?  <em>You are taking a set and partitioning it into equivalence classes.</em></p>

<p>In case you are not familiar with this jargon, let me give you a brief explanation. An <em>equivalence relation</em> is a function that takes two things and returns a Boolean that means "equivalent" if true and "not equivalent" if false.  </p>

<p>Equivalence relations follow three rules:</p>

<ul>
<li>X is always equivalent to itself no matter what X is. This is the <em>reflexive property</em>.</li>
<li>The equivalence of X and Y is the same as the equivalence of Y and X. This is the <em>symmetric property</em>.</li>
<li>If X is equivalent to Y and Y is equivalent to Z then X must be equivalent to Z. This is the <em>transitive property</em>.</li>
</ul>

<p>The two most basic equivalence relations are the two extremes. Equality -- two things are equivalent if they are exactly equal and unequivalent otherwise -- is the equivalence relation where the least number of things are equivalent to each other, and "everything is equivalent to everything" is the one with the most.  </p>

<p>The tricky bit comes when we have equivalences that are somewhere in the middle.  "Two strings are equivalent if they are anagrams of each other" is an equivalence relation (exercise: check that all three properties are met).</p>

<p>If you have a set of things -- strings in your case -- then a <em>partition into equivalence classes</em> is what you are doing. You are finding all the subsets of those strings which are equivalent to each other; that subset is called an "equivalence class". </p>

<p>As you have discovered, an efficient algorithm for partitioning a set into its equivalence classes is the algorithm:</p>

<ul>
<li>For each member of the set, find the "canonical value" of the equivalence class, even if that member is not in the set itself. That is in your case, the <em>smallest string in lexicographic order that is equivalent to the given string</em>.</li>
<li>Group the members of the set on <em>equality of their associated canonical value</em>.</li>
</ul>

<p>So my challenge to you is:  can you implement this algorithm?</p>

<pre><code>static List&lt;List&lt;T&gt;&gt; Partition(
  this IEnumerable&lt;T&gt; items,
  Func&lt;T, T&gt; canonicalize)
{ ... }
</code></pre>

<p>If you can, then your specific problem becomes a one-liner!</p>

<pre><code>var anagrams = items.Partition(s =&gt; string.Concat(s.OrderBy(c =&gt; c));
</code></pre>

<p>And you will then have a new tool in your toolbox. I use the partition-by-canonical-value function all the time in my work.</p>

<p>Again, this is just a special case of <code>GroupBy</code>, as noted in other answers. However, consider now this challenge. Suppose we do not have a canonicalizer but we do have a relation:</p>

<pre><code>static List&lt;List&lt;T&gt;&gt; Partition(
  this IEnumerable&lt;T&gt; items,
  Func&lt;T, T, bool&gt; relation)
{ ... }
</code></pre>

<p>Can you come up with an efficient implementation of the partition function <em>only</em> having a predicate which tells you when two things are equivalent? Remember that you are allowed to take advantage of the reflexive, symmetric and transitive properties of the relation. A naive algorithm is straightforward but this is a surprisingly tricky problem to make efficient. The paper <a href="https://link.springer.com/chapter/10.1007%2F978-3-319-21840-3_36" rel="noreferrer">https://link.springer.com/chapter/10.1007%2F978-3-319-21840-3_36</a> has an analysis of this problem if it interests you.</p>

<p>Another exercise to consider: suppose your original list contains duplicates. Is it correct to have duplicates in the output list of lists? Or should they be deduplicated?  Can you modify the algorithms you've created so far to ensure that they are efficiently deduplicated?</p>
    </div>