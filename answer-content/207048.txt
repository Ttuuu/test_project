<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd like to suggest to do it in a a way, that </p>

<ol>
<li>doesn't have two loops that basically do the same thing</li>
<li>is more Java-esque </li>
</ol>

<p>Instead of storing the result in an array, which requires you to first count the potential tokens, store the tokens in a <code>LinkedList</code>. </p>

<p>Normally one would then just return that list instead of an array, because in Java arrays are usually used as an implementation detail hidden inside objects. If you yet need to return an array, <code>LinkedList</code> has a <code>toArray</code> method, that copies the list into an array.</p>

<p>My solution would look like this:</p>

<pre><code>public static String[] tokenize(String str, char separator) {

    Collection&lt;String&gt; result = new LinkedList&lt;&gt;();

    int len = str.length();
    int pos = 0;
    int start = 0; 

    while (pos &lt; len) {
        if (str.charAt(pos) != separator) {
            pos++;
            continue;
        }
        if (pos &gt; start) {
            result.add(str.substring(start, pos));
        }
        do {
            pos++;
            start = pos;
        } while (pos &lt; len &amp;&amp; str.charAt(pos) == separator);
    }

    if (pos &gt; start) {
        result.add(str.substring(start, pos));
    }

    return result.toArray(new String[result.size()]);
}
</code></pre>

<hr>

<p>EDIT: Here's a version without additional import :)</p>

<pre><code>static class LinkedList {

    private class Node {
        Node(String value) {
            this.value = value;
        }

        String value;
        Node next;
    }

    private Node first = null;
    private Node last = null;
    private int size = 0;

    public void add(String value) {
        Node node = new Node(value);
        size++;
        if (first == null) {
            first = last = node;
            return;
        }
        last.next = node;
        last = node;
    }

    public String[] toArray() {
        String[] array = new String[size];

        int i = 0;
        Node current = first;
        while (current != null) {
            array[i] = current.value;
            i++;
            current = current.next;
        }

        return array;
    }

}

public static String[] tokenize(String str, char separator) {

    LinkedList result = new LinkedList();

    int len = str.length();
    int pos = 0;
    int start = 0;

    while (pos &lt; len) {
        if (str.charAt(pos) != separator) {
            pos++;
            continue;
        }
        if (pos &gt; start) {
            result.add(str.substring(start, pos));
        }
        do {
            pos++;
            start = pos;
        } while (pos &lt; len &amp;&amp; str.charAt(pos) == separator);
    }

    if (pos &gt; start) {
        result.add(str.substring(start, pos));
    }

    return result.toArray();
}
</code></pre>
    </div>