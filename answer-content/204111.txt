<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think this code is pretty good, I like the <strong>docstrings</strong>!</p>

<p>Some things strike me as a bit awkward though,</p>

<ol>
<li><p>Stay DRY</p>

<p>These log functions are really similar, the only thing that differentiates is the operators</p>

<p>You could make the operator an argument of the function, then you'd only have 1 function</p>

<p>You'd then need a lookup table for the operators so you know when to subtract or add.</p></li>
<li><p>The are better testing modules</p>

<p>Assertions are fine, but are not the best testsuites, there are some good modules for 
testing in python (I'm a big fan of <a href="https://docs.python.org/3/library/doctest.html" rel="nofollow noreferrer">doctest</a>) but <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">unittest</a> is also pretty good</p></li>
</ol>

<p>So I would rewrite the log functions to this:</p>

<pre><code>import operator
import doctest

MATH_OPER = {
                operator.gt: operator.add, 
                operator.ge: operator.add,
                operator.lt: operator.sub,
                operator.le: operator.sub
            }

def log_oper(op, value, base):
    """
    The logarithmic function with an operator

    Test all operators
    &gt;&gt;&gt; log_oper(operator.gt, 3, 2)
    2
    &gt;&gt;&gt; log_oper(operator.ge, 3, 2)
    2
    &gt;&gt;&gt; log_oper(operator.lt, 3, 2)
    1
    &gt;&gt;&gt; log_oper(operator.le, 3, 2)
    1

    Test assertion Exception
    &gt;&gt;&gt; log_oper(operator.le, -1, 2)
    Traceback (most recent call last):
     ...
    AssertionError: Logarithm is only defined for numbers greater than zero (the power approaches negative infinity as the value approaches zero)
    """
    add_or_sub = MATH_OPER[op]
    assert value &gt; 0, 'Logarithm is only defined for numbers greater than zero (the power approaches negative infinity as the value approaches zero)'
    power, limit = _lut[base][value.bit_length()]
    return add_or_sub(power, op(value, limit))

if __name__ == '__main__':
    max_value = 10**6
    base = 2
    init_upto_bitlen(max_value.bit_length(), base)
    doctest.testmod()
</code></pre>
    </div>