<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<ul>
<li>If the purpose is to output each of the descendant inner exceptions, you are missing all except the first inner exception in case of an <code>AggregateException</code>. And this is a common exception.</li>
<li>Don't use <code>\n</code> as new line unless you specifically need to comply to this style of new line. Prefer <code>Environment.NewLine</code>.</li>
<li>I am not convinced of the <code>exception != null</code> -&gt; <code>string.Empty</code> clause. This seems to be coded just so you can make a one-liner method implementation. I would check for <code>exception.InnerException == null</code> to short-circuit the return value.</li>
<li><code>msgCount</code> is not hierarchical, so it does not make much sense when dealing with exception trees (see <code>AggregateException</code>). Consider using a count tree ("1.1.4", etc..) or not using a count at all. Perhaps an indentation suits the layout better.</li>
<li>Does <code>exception.ToString()</code> provide sufficient information for you? It handles inner exceptions and inner exception trees.</li>
</ul>

<h3>Alternative</h3>

<p>This is your code reworked to take into account all the above.</p>

<pre><code>public static string GetExceptionMessages(Exception exception, string indent = "\t")
{
    exception = exception ?? throw new ArgumentNullException(nameof(exception));
    indent = indent ?? string.Empty;
    var builder = new StringBuilder();
    GetExceptionMessages(exception, builder, indent, new Stack&lt;string&gt;());
    return builder.ToString();
}

private static void GetExceptionMessages(
    Exception exception, StringBuilder builder, string indent, Stack&lt;string&gt; currentIndent)
{
    if (exception == null) return;
    builder.AppendLine($"{string.Join(string.Empty, currentIndent)}{exception.Message}");
    currentIndent.Push(indent);
    if (exception is AggregateException aggregateException)
    {
        foreach (var innerException in aggregateException.InnerExceptions)
        {
            GetExceptionMessages(innerException, builder, indent, currentIndent);
        }
    }
    else
    {
        GetExceptionMessages(exception.InnerException, builder, indent, currentIndent);
    }
    currentIndent.Pop();
}
</code></pre>
    </div>