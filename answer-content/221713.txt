<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I liked the idea of doing this in a way which is analogous to the way the image is drawn, that is to say, creating a data structure which is somewhat similar to the image you have above, and then using that to count which spaces would hold water.</p>

<p>This isn't so much of a code review, as a presentation of an alternative way of doing the same thing (as are many of the answers here). I don't know that I'd say it's better, but it was interesting to me at least.</p>

<p>The code maps the size array to a grid of ones and zeroes, trims any initial zeroes, and then counts how many are left in each row. I'm fairly sure this will always give a correct result, but then, I may well have missed something.</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const data = [1,0,2,1,0,1,3,2,1,2,1];

const sizesToRows = sizeArray =&gt; [...Array(Math.max(...sizeArray))]
  .map((_, i) =&gt; sizeArray.map(s =&gt; s &gt; i ? 1 : 0))

const trimArray = condition =&gt; array =&gt; array.slice(
  array.findIndex(condition),
  array.length - array
    .reduce((ary, ele) =&gt; {ary.unshift(ele); return ary}, [])
    .findIndex(condition)
);

const removeLeadingAndTrailingZeroes = trimArray(x =&gt; x !== 0);

const countConditionMatches = condition =&gt; array =&gt; array
  .reduce((p, c) =&gt; condition(c) ? p + 1 : p, 0);
  
const countZeroes = countConditionMatches(x =&gt; x === 0);

const sum = (p, c) =&gt; p + c

const result = sizesToRows(data)
  .map(removeLeadingAndTrailingZeroes)
  .map(countZeroes)
  .reduce(sum, 0);
  
console.dir(result)</code></pre>
</div>
</div>

    </div>