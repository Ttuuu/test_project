<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your implementation is close, but it can be a bit shorter. You correctly use two stacks, but you duplicate the code alternating between using the two. That's a bit of a waste of space. Instead, at the end of the first while loop, you can just assign <code>nextLevel</code> to <code>currentLevel</code>, create a new stack to <code>nextLevel</code>, and repeat:</p>

<pre><code>    while (currentLeveL.Count &gt; 0 || nextLevel.Count &gt; 0)
    {
        var nodes = new List&lt;int&gt;();
        while (currentLeveL.Count &gt; 0)
        {
            var curr = currentLeveL.Pop();
            if (curr.left != null)
            {
                nextLevel.Push(curr.left);
            }

            if (curr.right != null)
            {
                nextLevel.Push(curr.right);
            }
            nodes.Add(curr.val);
        }

        if (nodes.Count &gt; 0)
        {
            result.Add(nodes);
        }
        currentLevel = nextLevel;
        nextLevel = new Stack&lt;TreeNode&gt;();
    }
</code></pre>

<p>The <code>while</code> condition can also be made easier, <code>nextLevel</code> is known to be empty when it is evaluated:</p>

<pre><code>while (currentLeveL.Count &gt; 0)
</code></pre>

<hr>

<p>Since you're looping over the stack, only removing each item, not adding items back or anything, you can just replace the <code>while</code> for a <code>foreach</code>:</p>

<pre><code>public static IList&lt;IList&lt;int&gt;&gt; ZigzagLevelOrder(TreeNode root)
{
    List&lt;IList&lt;int&gt;&gt; result = new List&lt;IList&lt;int&gt;&gt;();
    if (root == null)
    {
        return result;
    }
    Stack&lt;TreeNode&gt; currentLeveL = new Stack&lt;TreeNode&gt;();
    Stack&lt;TreeNode&gt; nextLevel = new Stack&lt;TreeNode&gt;();
    currentLeveL.Push(root);
    while (currentLeveL.Count &gt; 0)
    {
        var nodes = new List&lt;int&gt;();
        foreach(var curr in currentLeveL)
        { 
            if (curr.left != null)
            {
                nextLevel.Push(curr.left);
            }

            if (curr.right != null)
            {
                nextLevel.Push(curr.right);
            }
            nodes.Add(curr.val);
        }

        if (nodes.Count &gt; 0)
        {
            result.Add(nodes);
        }
        currentLeveL = nextLevel;
        nextLevel = new Stack&lt;TreeNode&gt;();
    }

    return result;
}
</code></pre>
    </div>