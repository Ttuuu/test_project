<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've reviewed another one of your question and there's a recurrent point I think needs to be addressed. Your usage of <code>IList</code>.</p>

<p>When you return something, you expect the user of your method to use it in a certain scope. Say I need a method to return all numbers between a certain range.</p>

<pre><code>public IList&lt;int&gt; Range(int low, int high)
{
    // My C# is rusty, but if I remember correctly this works.
    return Enumerable.Range(low,high).ToList();
}

public void FooBar()
{
    var list = Range(0,10);

    //Why?
    list.Add(11);
}
</code></pre>

<p>This might not be a strong example, but my point is : <code>IList</code> represents a data structure where you can add, remove, replace elements and use the indexer. That's a lot of things, do the users of your method <strong>need</strong> all these things? No. By returning an <code>IList</code> you tell your users that the result is expected to be modified or accessed via an index, but they don't need this. You could use <code>ICollection</code>, which let's you add/remove/modifiy elements, without index access. Then again, do you want your users to do this? Probably notÂ­. What I'd recommend is using <code>IEnumerable</code>. This states : Here's the "list" of things that you wanted, you can take a look, if you want to modify them change it to a list it's not my problem anymore.</p>

<p>The beauty of this changes is that you don't need to change anything in your code except for the return type of your <code>GroupAnagrams</code> method.</p>

<hr>

<p>There's a bug in your equality checker, or at least an undocumented feature.</p>

<pre><code>//Returns false, why?
CharComparer().Equals((char[])null, (char[])null);
</code></pre>

<p>The rest of the points I wanted to address have been touched by the other (great) reviews. But I want to stress <strong>Never override <code>GetHashCode()</code> to <code>return 0</code> that's a bad idea.</strong></p>
    </div>