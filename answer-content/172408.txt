<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few points of criticism of your approach:</p>

<h3>Prefer <code>protected</code> to <code>private</code></h3>

<p>This isn't really about your overall design, but - unless you have very good reason, use <code>protected</code> rather than <code>private</code> member. In few cases is it useful to hide data from your subclasses.</p>

<h3>"Where did my data go?!"</h3>

<p>Suppose you have vectors types T_1 and T_2 in your tuple, and you <code>add()</code> an element of type T_3, which may be implicitly cast into both a T_1 and a T_2. Where will it go? The answer is: It depends on which casting is preferred, which in turns depends both on language defaults and on your own choices of constructors and casting operations for T_1, T_2 and T_3. </p>

<p>Do you remember with certainty which implicit casts are preferred over which? I know I don't, and I write C++ all the time. Now, ok, maybe you're a smart guy and have that all memorized. What about the next person reading your code? And what if it's in code which itself is templated? And what if somebody adds or removes some T_1, T_2 or T_3 code? It seems to me this is just asking for trouble. </p>

<p>If your data goes in a vector other than the one you expect, you'll have to start searching vectors you have trouble even referring to, for that data.</p>

<p>So, you asked about what's "safe" - I would say this is not too safe.</p>

<h3>Motivation</h3>

<p>This is not a problem with the code, it's a problem with your presentation. Why would you need a tuple of vectors of arbitrary types? Are you really sure that's what you need? Not, say, an array of <code>std::variant</code>s like one of the comments suggests? Or a class with named vector, e.g.</p>

<pre><code>struct A {
    std::vector&lt;Foo&gt; foos;
    std::vector&lt;Bar&gt; bars;
}
</code></pre>

<p>Now, this is much less "fancy" and "hi-tech" and modern-C++'ish, but it is simpler and easier to debug. There are also other points in the design space. I just find it a bit hard to believe that you would really need a completely generic tuple of typed vectors.</p>
    </div>