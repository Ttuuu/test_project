<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a bit large to offer a detailed review, but there are some things which stand out.</p>

<h3>Whitespace</h3>

<p>The indentation seems rather variable, and there are several places with multiple blank lines which don't appear to be to structure the code. The whitespace should help to show the structure: use consistent indentation and use blank lines consistently too.</p>

<h3>Pointless code</h3>

<p>For example, from <code>MainActivity</code>:</p>

<blockquote>
<pre><code>   try {

       setContentView(R.layout.activity_main);
      MySurfaceView surfaceView;
      surfaceView = (MySurfaceView) findViewById((R.id.surfaceView));


   }
   catch (Exception e)
   {
       e.printStackTrace();
   }
</code></pre>
</blockquote>

<p>(This also illustrates the previous points about whitespace).</p>

<p>What purpose does <code>surfaceView</code> serve?</p>

<h3>Comments contradicting code</h3>

<blockquote>
<pre><code>@Override
public boolean onDown(MotionEvent e) {

  // don't return false here or else none of the other
  // gestures will work

    return  false;
}
</code></pre>
</blockquote>

<h3>God class anti-pattern</h3>

<p><code>MySurfaceView</code> seems to do almost everything. I'm sure it could be refactored at least into one class for the game state and another class for the visualisation of the game state - the Model/View style. It's probably also worth pulling out one or two classes for two-dimensional Cartesian coordinates: maybe <code>Size</code> and <code>Point</code>. I haven't analysed in detail the way in which the coordinates are used, but it is quite noticeable that the fields of <code>MySurfaceView</code> include a number of decomposed 2D vectors.</p>

<h3>DRY</h3>

<blockquote>
<pre><code>public MySurfaceView(Context context) {
    super(context);
    this.context = context;
    metrics = getResources().getDisplayMetrics();
    setWillNotDraw(false);
    gestureDetector = new GestureDetector(context, new GestureListener(this));
    init(context);
}

public MySurfaceView(Context context, AttributeSet attrs) {
    super(context, attrs);
    this.context = context;
    metrics = getResources().getDisplayMetrics();
    setWillNotDraw(false);
    gestureDetector = new GestureDetector(context, new GestureListener(this));
    init(context);
}

public MySurfaceView(Context context, AttributeSet attrs, int defstyles) {

    super(context, attrs, defstyles);
    this.context = context;
    metrics = getResources().getDisplayMetrics();
    setWillNotDraw(false);
    gestureDetector = new GestureDetector(context, new GestureListener(this));
    init(context);
}
</code></pre>
</blockquote>

<p>There are two ways to make this less redundant. The first is to move</p>

<pre><code>    this.context = context;
    metrics = getResources().getDisplayMetrics();
    setWillNotDraw(false);
    gestureDetector = new GestureDetector(context, new GestureListener(this));
</code></pre>

<p>into <code>init(context)</code>. The second, which is generally preferred, is to chain the constructors:</p>

<pre><code>public MySurfaceView(Context context) {
    this(context, null);
}

public MySurfaceView(Context context, AttributeSet attrs) {
    this(context, attrs, 0);
}
</code></pre>

<p>Note that <a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/SurfaceView.java" rel="nofollow noreferrer">this is exactly what the superclass does</a> (lines 198ff).</p>
    </div>