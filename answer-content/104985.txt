<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>Give your Node class a constructor, so you can say <code>p.next = new Node(data, p.next)</code> to insert a new node after <code>p</code>.</p></li>
<li><p>Do one-less-than-N loop iterations, to stop at the node before where you want to insert.  Then you don't need to shuffle around current and previous pointers.</p></li>
<li><p>Use the same code for both new-head special cases (<code>pos = 0</code> or <code>head = null</code>).  Your special-case handling takes more reading than it needs to because you operate differently in those cases.</p></li>
<li><p>Redesign the API to not throw away the work of chasing pointers out to the Nth node.  Getting the head is O(1) if the caller wants it.  Getting the Nth node is O(N), so the the hard-to-compute thing you could return is the Nth node (or its parent, but that is a little obscure).  Talk to whoever gave you that behaviour requirement and help them design the API you and they are implementing so it doesn't suck.  Using an API that makes efficient code impossible is really frustrating.</p></li>
</ul>

<p><a href="https://stackoverflow.com/a/623155/224132">Java makes it hard / inconvenient to return multiple values from one function, since there is no pass-by-reference</a>.  In C or C++, I'd probably pass <code>head</code> by reference, so it'd be <code>node_t *insert_nth(node_t *head, int data, int pos)</code> in C.  It's not the cleanest, though, and the "hidden" modification of some of your function parameters is what makes C++ non-const references nasty.  That's why passing an actual pointer is clearer (so the caller has to write <code>insert_nth(&amp;head, ...)</code>, which makes it clear that <code>head</code> is being passed by reference, and the function might modify it.</p>

<p>Anyway, sorry for the tangent into C.  In Java, your best bet might be to have callers pass iterators to your functions, instead of passing around raw <code>Node</code> references.  Since you'd have a reference to the caller's iterator, you can modify it to point to a new head if you need to insert a new head.</p>

<p>If you don't want to do that, another option would be to not even provide this function.  Or implement it as a convenience function on top of two others, for cases where the caller doesn't have a use for a reference to the new node you just inserted.  vnp's answer already suggests breaking FindNth out as its own function.</p>

<p>The more basic functions would be</p>

<ul>
<li><code>Node Advance(Node from, int distance)</code> (same as <a href="http://www.cplusplus.com/reference/iterator/advance/" rel="nofollow noreferrer">C++'s <code>std::advance(std::iterator it, int distance)</code></a>).</li>
<li><code>Node InsertBefore(Node head, int data)</code>  and/or  <code>Node InsertAfter(Node at, int data)</code>, each returning the node they just inserted (new head or new tail, if used at the ends of the list).  The arg to InsertBefore is named <code>head</code> as a reminder that it can't know about or do anything about the previous node's <code>.next</code> field.</li>
</ul>

<p>I think it's a problem to pack so many different modes of operation into <code>InsertNth</code>.  Often the caller will have to special case inserting a new head when <code>position = 0</code>, or whatever produced position=0 was the result of a special case.  So just passing pos=0 to a do-everything function means the do-everything function has to decode the mode of operation again.</p>

<p>Even having an InsertNth function means thinking about your container as having numbered positions.  If you want an InsertNth function, a linked list is probably the wrong data structure.  I guess it can make sense for very small N at the front of a long list.</p>

<p>Anyway, having InsertNth as a basic building block in a linked list class, not implemented on top of anything else, doesn't pass the smell test, IMO.  That said, once you do have an <code>Advance()</code>, <code>InsertAfter</code>, and <code>InsertBefore</code>, it's dead easy to implement <code>InsertNth</code>, and easy to look at and understand that it's correct without needing many comments to explain how it works.</p>

<pre><code> ///////////// UNTESTED CODE /////////////

/* Code is over-commented with comments on the design choice
 * I wouldn't pack this much into comments mixed in with the code normally

 * I decided not to use head as the name for my method arguments
 * to emphasize that they can and should be used on any element.
 */

// returns null if you go too far, rather than the tail
// a more useful API might give you the tail but also indicate that it wasn't actually the Nth
Node Advance(Node from, int distance)
{
    Node p = from;
    // maybe omit the p!=null test so we NullPointerException on distance too large
    while (p != null &amp;&amp; distance-- &gt; 0) {
        p = p.next;
    }
    return p;
    /* Depending on Advance to do nothing on a negative argument would be a poor choice
     * and would confuse people familiar with C++ std::advance,
     * which can go forward or backward (and would throw an exception trying to go backward on an iterator that can't do that.)
     * 
     * We could overload a negative argument to mean forward abs(distance), but return the tail instead of null on EOL
     * Using a differently-named function would be better, like AdvanceTail (not an ideal name, can't think of a good one).
     */
}

Node InsertBefore(Node head, int data)
{
    return new Node(data, head);
}

// Returns the new node, for symmetry with with InsertBefore
// maybe useful for callers that want to insert a new tail and keep track of it.
void InsertAfter(Node p, int data)
{
 /* letting the attempt to access p.next throw a NullPointerException is prob. best.
  * TopinFrassi had a good point that doing something similar to
  * but not exactly what was requested just makes it harder to debug.
  */
    // if (!p)
    //    return new Node(data, p); // this is InsertBefore
    p.next = new Node(data, p.next);
    return p.next;
}

Node InsertNth(Node head, int data, int pos) throws IllegalArgumentException
{
    if (head == null || pos &lt;= 0)  // all the new-head special cases.
        return InsertBefore(head, data);
    Node prev = Advance(head, pos-1);
    if (prev == null)
        throw new IllegalArgumentException("End of list reached while looking for node " + pos-1);
    InsertAfter(prev, data);
    return head;
    // do nothing with prev
}
</code></pre>

<p>I think this is a pretty clean decomposition of the basic list ops into pieces that are likely to be widely useful in functions using lists.  I think it's also quite easy to convince oneself that each method does what it claims, without having to think for too long.  (Unless I've screwed one of them up. :P)</p>

<p>Having a Node constructor with initializer args is another big part of making the code clean, since being able to build &amp; return it without needing a variable name saves a lot of lines of code.  (Actually, InsertBefore just wraps the constructor, since we don't have any other bookkeeping for it to do.  It could wrap a no-args constructor, and InsertNth would still use it and be compact and clean.)</p>

<hr>

<p>First stab at writing InsertNth, before I thought about the API and the original problem-statement was leading you to implement a bad function.</p>

<pre><code>Node InsertNth(Node head, int data, int position) throws IllegalArgumentException
{
    if (head == null || pos &lt;= 0)  // all the new-head special cases.
        return new Node(data, head);

    Node p = head;  // p is a time-honoured variable name for list pointers in small C functions.  Choose a more Javaish (Java-ey?) name if you like.
    /* separate the counter check from the null check so we don't have a hard time sorting out what happened after the loop
     *  assuming we want to avoid just appending to the tail when that's not what was requested
     */
     // pre-decrement to stop on the node before N.
     //  Not that easy to notice, so maybe pos-- &gt; 1 would be better
     //  to make it clear we stop one short of N.
    while (--position &gt; 0) {
        // testing p.next instead of maintaining curr and prev pointers keeps the code compact.
        if (p.next == null)
            throw new IllegalArgumentException("End of list reached with " + position + " positions left to go");
        p = p.next;
    }
    p.next = new Node(data, p.next);
    return head;
}
</code></pre>

<hr>

<pre><code>// or with the dummy-node technique:
Node InsertNth_dummynode(Node head, int data, int position) throws IllegalArgumentException
{
     Node dummy = new Node(data, head);  // janos's dummy node idea.
     // now inserting a new head isn't a special case anymore.
     /* Having to follow the special-case through the rest of the function
      * to make sure the right thing happens
      * is extra work if you aren't used to the idiom.
      * It does an extra conditional branch, though.
      */

    Node p = dummy;
    while (position-- &gt; 0) { ///// post-decrement, because the dummy node offsets us by one
        if (p.next == null)
            throw new IllegalArgumentException("End of list reached with " + position + " positions left to go");
        p = p.next;
    }

    // p.next = new Node(data, p.next);
    // return dummy.next;   // the simple way that discards dummy

   /* Reuse dummy as the newly inserted node,
    * with the downside of hurting your brain.
    * Complicated because of the possibility of p == dummy.
    * Using this harder-to-read code would usually be a case of premature optimization.
    */
    Node tmp = p.next;
    p.next = dummy;      // insert dummy into the list

    head = dummy.next;   // new head if p == dummy.  This statement has to appear in this order, after p.next=dummy, and before setting dummy.next to point to the rest of the list

    dummy.next = tmp;    // tack on the rest of the list
    // dummy.data = data;  // we did that in the constructor
    return head;
}
</code></pre>

<p>Creating <code>dummy</code> and throwing it away may not stress the garbage collector <a href="https://stackoverflow.com/a/25903366/224132">if your JVM realizes it can just allocate it on the stack</a>.  Since nothing outside the function ever sees a references to it, it's the easiest case for escape analysis.</p>

<p>Unless the JVM does a really good job with creating <code>dummy</code> efficiently on the stack (not heap) without a real call to <code>new</code>, reusing the <code>dummy</code> will be more efficient.  That sequence at the end that sets p.next and dummy.next doesn't do much work per line.  In terms of number of actual CPU operations, it's only 2 loads of locals vars from objects, and 2 stores to fields in objects.  The other version does nearly that much just constructing a new Node, never mind the call to <code>new</code>.</p>

<p>However, it's significantly less readable, and needs comments to point out what's going on, so it's a pretty clear case of premature optimization.</p>
    </div>