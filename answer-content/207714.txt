<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>The S in SOLID</h3>

<p>Since you mention SOLID, I'd like to point out that <code>IConverter</code> has too many responsibilities:</p>

<ol>
<li>It converts from one unit to another.</li>
<li>It splits input on newlines</li>
<li>It contains display-related information.</li>
</ol>

<p>The first is exactly what you'd expect a converter to do.</p>

<p>The second is better left to the caller. If they need to convert multiple inputs they can simply call <code>IConverter.Convert</code> multiple times. You already need to do that anyway if you've got a comma-separated string or an array of inputs, so why should the conversion logic contain a special case for newlines?</p>

<p>The third should be the responsibility of the UI layer of your program, where you can take care of things like localization and visualization.</p>

<h3>Scalable design</h3>

<p>Another issue with this design is that it's not very scalable. Every 'unit-to-unit' conversion requires a different converter instance. With just inches, centimeters and millimeters, you already need 6 converters: <code>inch-&gt;cm</code>, <code>inch-&gt;mm</code>, <code>cm-&gt;inch</code>, <code>cm-&gt;mm</code>, <code>mm-&gt;inch</code> and <code>mm-&gt;cm</code>. For 10 units, you'll need 90.</p>

<p>A better design would define each unit in terms of a single base unit. For example, taking centimeter as base: <code>Unit("inch", 2.54)</code>, <code>Unit("cm", 1.0)</code>, <code>Unit("mm", 0.1)</code>. That gives you enough information to be able to convert from any of these units to any other. Adding another unit now only requires a single new piece of information.</p>

<h3>Other issues</h3>

<ul>
<li>Those <code>IConverter</code> properties should not have public setters - you don't want other code to be able to modify the conversion rate of a converter!</li>
<li>There's no documentation, and several things aren't clear from the code itself: the purpose of that <code>ConvertedUnits</code> array, or why the return type of <code>Convert</code> is an array of strings, among other things.</li>
<li>The builder contains two <code>AddConversionRate</code> methods - one of them should be renamed to <code>AddConvertedUnits</code>.</li>
<li>This has been pointed out already: you're repeating work by calling <code>input.Split('\n')</code> too many times. But the same goes for the controller code: you're also repeatedly calling <code>converter.Convert</code>.</li>
<li>A related issue is that of code duplication: in <code>Convert</code>, the <code>if</code> part is doing the same as the <code>else</code> part, minus the string-splitting. However, if the input does not contain any newlines then <code>string.Split</code> will return an array with one element, so the <code>else</code> part alone is sufficient.</li>
</ul>

<h3>Simplicity</h3>

<p>Finally, I agree with what Konrad Rudolph said in the comments: what's the benefit of using an interface and a builder here? This sort of design is very useful when, for example, you're working with a database: it allows you to swap <code>DatabaseConnection</code> for <code>SimulatedDatabaseConnection</code> while testing. But can you think of a situation where being able to swap <code>Converter</code> for another implementation would be useful?</p>

<p>Keep in mind that this extra flexibility doesn't come for free - there's more code to maintain, and more complex designs are also more difficult to maintain. So first ask yourself: do I need this kind of flexibility, and is it worth the cost?</p>

<p>In this case, a simpler design will likely suffice:</p>

<pre><code>public class Unit
{
    public string Name { get; }
    public double Ratio { get; }

    public Unit(string name, double ratio)
    {
        Name = name;
        Ratio = ratio;
    }

    /// &lt;summary&gt;
    /// Converts a value from the current unit to the specified unit.
    /// &lt;/summary&gt;
    public double Convert(double value, Unit toUnit)
    {
        return (value * Ratio) / toUnit.Ratio;
    }
}
</code></pre>

<p>It makes sense to combine that with a <code>Unit GetUnit(string name)</code> 'factory method', so you don't need to modify calling code when adding a unit. <code>GetUnit</code> could load units from a database, a file, or simply contain a few hard-coded ones - details that calling code shouldn't need to worry about.</p>

<p>A <code>Unit[] AvailableUnits()</code> method (or property) would also be useful, if you want to show users which units they can convert between. That's better than having the user type out the unit name, and then wonder why <code>"centimeter"</code> doesn't work but <code>"cm"</code> does.</p>

<pre><code>// Basic conversion, inch to cm:
var convertedValue = GetUnit("inch").Convert(value, toUnit: GetUnit("cm"));

// Your controller code, refactored - including some error handling:
var fromUnit = AvailableUnits[fromUnitIndex];
var toUnit = AvailableUnits[toUnitIndex];
return string.Join(Environment.NewLine,
    input.Split('\n')
        .Select(part =&gt;
        {
            if (double.TryParse(part, out var value))
                return fromUnit.Convert(value, toUnit).ToString();
            else
                return $"Invalid input: '{part}'";
        }));
</code></pre>
    </div>