<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Two opportunities for optimization that suggest themselves to me:</p>

<ol>
<li><p>Seems like you should be able to produce an exhaustive list of 4-digit palindromes by taking every 2-digit number and then appending its mirror to it, rather than having to iterate through every 4-digit number and throw most of them out.  That would let you build your palindrome list in about one-hundredth the time (you'll be iterating over 90 two-digit numbers instead of 9000 four-digit numbers in that first loop).</p></li>
<li><p>A lot of the sums you're checking will be too small (i.e. they'll be 4 digits); none will be too big (9999+9999=19998).  You can minimize the work you do on those sums by iterating from largest to smallest and breaking the inner loop once the sum gets too small.</p></li>
</ol>

<p>An alternative to the nested for loops would be using one of the <code>itertools</code> functions to generate all the combinations as a set of tuples, but I don't <em>think</em> that'd get you any performance wins.</p>
    </div>