<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What's going on with the indentation?</p>

<hr>

<blockquote>
  <p><code>long long</code></p>
</blockquote>

<p>No. We're not in the 1970s. Use <code>&lt;cstdint&gt;</code>. Here you probably want <code>std::uint_fast64_t</code>.</p>

<hr>

<p>IMO <code>n</code> should be <code>const</code> and the copy (<code>x</code>) should be the variable which is modified in the loop.</p>

<hr>

<blockquote>
<pre><code>    for(long long i=2;i*i&lt;=n;i++)
</code></pre>
</blockquote>

<p>The first step to optimising prime divisor searches is to use a wheel. If you special-case <code>i=2</code> then you can search <code>for(i=3;i*i&lt;=x;i+=2)</code>, which is already a speedup by about a factor of 2.</p>

<p>On some architectures, multiplication is expensive and it's faster to maintain a variable <code>ii</code> or <code>iSquared</code> which is updated using the identity <span class="math-container">\$(i+a)^2 - i^2 = 2ai + a^2\$</span>: e.g. (untested, may be buggy): <code>for(i=3,ii=9;ii&lt;=x;ii+=(i+1)&lt;&lt;2,i+=2)</code></p>

<hr>

<blockquote>
<pre><code>          long long current_sum=1,current_term=1;
           while(n%i==0)
           { 
              n/=i;                 
              current_term*=i;
              current_sum+=current_term;
            }
</code></pre>
</blockquote>

<p>This can be simplified:</p>

<pre><code>           std::uint_fast64_t current_sum=1;
           while(x%i==0)
           {
              x/=i;
              current_sum=current_sum*i+1;
           }
</code></pre>

<hr>

<p>The first big step to improving the algorithm would be to exploit the fact that up to 500 test cases are passed at a time. If you read them all and find the largest, you can do a variant of Eratosthenes' sieve once to set up an array which allows you to factor all numbers up to that largest one very fast.</p>

<p>If that's not enough, it's probably necessary to switch factorisation approach, starting with Pollard's rho algorithm.</p>
    </div>