<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is essentially a box blur. A box blur is separable. That means that you can significantly reduce the amount of work that you perform by first doing a horizontal-only pass with a kernel of all 1s (so for a 3x3, it would be just [1 1 1]), and then do a vertical-only pass on the result of the horizontal-only pass with the kernel rotated 90Â°. <a href="https://blogs.mathworks.com/steve/2006/10/04/separable-convolution/" rel="nofollow noreferrer">This website</a> explains it pretty well:</p>

<blockquote>
  <p>Filtering an M-by-N image with a P-by-Q filter kernel requires roughly MNPQ multiplies and adds (assuming we aren't using an implementation based on the FFT). If the kernel is separable, you can filter in two steps. The first step requires about MNP multiplies and adds. The second requires about MNQ multiplies and adds, for a total of MN(P + Q).</p>
  
  <p>The computational advantage of separable convolution versus nonseparable convolution is therefore:</p>
  
  <p>For a 9-by-9 filter kernel, that's a theoretical speed-up of 4.5.</p>
</blockquote>

<p>If you're  going to  work on the CPU, there are further techniques you can use for speed-ups, as well. Another example is to use a <a href="https://en.wikipedia.org/wiki/Summed-area_table" rel="nofollow noreferrer">summed area table</a>. In this technique, you iterate over the input image and the output image is the sum of all pixel above and to the left of the current pixel. It's very fast to calculate this. Once you have that, you can find the mean of any given pixel for an n x n area with 2 subtractions and 1 addition.</p>
    </div>