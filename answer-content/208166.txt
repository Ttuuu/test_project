<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can use a sorting algorithm to first sort the list, this can be done (in many ways) with a complexity of O(nlog(n)).
Once the list is sorted (small to large for example), the problem can be solved with complexity O(n) as followed:</p>

<pre><code>head = 0
tail = len(list) - 1
while (head &lt; tail):
    sum = list[head] + list[tail]
    if sum == num:
        cnt += 1
        head += 1
        tail -= 1
    elif sum &gt; num:
        tail -= 1
    else:
        head += 1
</code></pre>

<p>This results in an overall complexity of O(nlog(n))</p>

<p>Note : This runs under the assumption that all elements are unique. This can be easily fixed depending on how you want to handle cases with duplicate elements.</p>
    </div>