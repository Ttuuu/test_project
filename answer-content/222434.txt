<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Structure</h2>

<p><code>Database</code> does not adhere to the concept of Single Responsibility. Ignoring the test code, there are some considerations to make. I would only keep the autenthication methods and perhaps add DBMS methods as transaction functionality in this class. All ORM-related methods should be put in seperate <code>Repository</code> classes.</p>

<pre><code>public class EmployeeRepository : Repository&lt;Employee&gt; {
    public void save(Employee employee) { /* .. */ }
    public void delete(int employeeId) { /* .. */ }
    public Employee Get(int employeeId) { /* .. */ }
    // and so on ..
}
</code></pre>

<p><code>Employee</code> is an entity, but does not have a primary key. I would add an <code>int employeeId;</code>. Some fields are final, others aren't, but only getters are available. You are inconsistent. Always override <code>equals</code> and <code>hashcode</code> for entities, in order to distinguish them from other instances.</p>

<hr>

<h2>Login Mechanism</h2>

<p>You check a plain password against a stored plain password. <strong>This is as bad a practice I can think of</strong>. Fortunately for you, many companies wouldn't even mind this flow ;-)</p>

<p>You are much better of hashing the password, using a salt, perhaps some pepper using key stretching. And please don't try to implement this yourself, use <a href="https://howtodoinjava.com/security/how-to-generate-secure-password-hash-md5-sha-pbkdf2-bcrypt-examples/" rel="nofollow noreferrer">existing APIs</a>.</p>

<hr>

<h2>Exceptions</h2>

<p>Your <code>*Exception</code> classes provide utility methods that write to the console. I can understand why you add them for a trivial example as this, but they wouldn't make sense otherwise. There already is the <code>message</code>. I don't understand why you don't print the message, but a hardcoded string instead.</p>

<blockquote>
<pre><code>public void printErrorMessage() {
        System.out.println("LoginException: Not logged in!");
}
</code></pre>
</blockquote>

<pre><code>   public void printErrorMessage() {
        System.out.println(e.getMessage());
   }
</code></pre>

<blockquote>
  <p>I used Eclipse while writing these exceptions, so the serialVersionUID
  is auto-generated.</p>
</blockquote>

<p>If your IDE generates code for you, do you want to know <a href="https://stackoverflow.com/questions/285793/what-is-a-serialversionuid-and-why-should-i-use-it">why this was done</a>?</p>

<hr>

<h2>Efficiency/Compactness</h2>

<p>Your loops can be refactored. Let's take one example.</p>

<blockquote>
<pre><code> Employee highest = this.employees.get(0);
      for(Employee employee : this.employees) {
          if(employee.getSalary() &gt; highest.getSalary()) {
              highest = employee;
          }
 }
</code></pre>
</blockquote>

<pre><code>Employee highest = Collections.max(employees, Comparator.comparing(c -&gt; c.getSalary()));
</code></pre>

<p>How efficient is it to sort entities on the repository? This is something calling code should bother with, not the repository.</p>

<pre><code>  public void sortEmployees() { /* .. */ }
</code></pre>
    </div>