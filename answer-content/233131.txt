<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Not a finite state machine</h3>

<p>The state machine in the posted code has infinite states.
This is caused by the recursive calls of <code>get_coin</code> and <code>error</code>.
Consider for example these states:</p>

<ul>
<li>zero-pence with nothing entered yet</li>
<li>zero-pence, after zero-pence and an invalid input</li>
<li>zero-pence, after zero-pence and an invalid input twice</li>
<li>...</li>
</ul>

<p>And so on. You can see these are different states,
because the content of the stack is different.</p>

<p>There are theoretically infinite zero-pence, five-pence, etc, states.
Practically there are finite, because after enough invalid inputs,
the stack will eventually overflow.</p>

<p>There should be precisely one zero-pence, five-pence, etc, states.</p>

<p>This is easy to fix by replacing the <code>error</code> function with a loop inside <code>get_coin</code>.</p>

<h3>There are too many states</h3>

<p>Even after making the states finite,
there will still be more states than required by the exercise.</p>

<p>Why, again, because of the stack.
For example, there are two ways to reach 10 pence:</p>

<ul>
<li>0 -&gt; 5 -&gt; 5</li>
<li>0 -&gt; 10</li>
</ul>

<p>At this point, the machine should be in the 10 pence state,
but these two states are not the same,
because the stack stores two different histories.</p>

<p>If you want truly identical ten-pence, fifteen-pence, etc, states,
you have to eliminate history, you have to eliminate stack,
you have to eliminate function calls.</p>

<p>This is easy to fix by implementing state transitions in a loop,
instead of through function calls.</p>

<h3>Don't use varargs if you don't need it</h3>

<p>The <code>get_coin</code> function takes a variable number of functions as arguments.
But in fact it will only ever use 3,
and in fact it's only ever called with 3.
Therefore, it would be more natural to give those parameters dedicated, descriptive names.</p>

<h3>Why convert input to <code>int</code>?</h3>

<p>The <code>get_coin</code> function converts input to <code>int</code>,
but doesn't actually perform any numeric operations with it.</p>

<h3>Use a more portable shebang</h3>

<p>Not all systems have Python 3 installed in <code>/usr/bin/python3</code>.
A more robust, portable shebang would be:</p>

<pre><code>#!/usr/bin/env python3
</code></pre>
    </div>