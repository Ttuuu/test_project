<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The readability can be improved by using explanatory variables, (of course changing the variable names as they make sense to you).</p>

<pre><code>public static boolean isDummy(TriState a, TriState b) {
    boolean oneOfTheInputsIsZero = a.is(ZERO) || b.is(ZERO);
    boolean oneOfTheInputsIsNull = a.is(NULL) || b.is(NULL);
    return oneOfTheInputsIsZero &amp;&amp; oneOfTheInputsIsNull;
}
</code></pre>

<p>First one makes it obvious that the function is commutative, in the second one you have to check the LHS and RHS are indeed the mirror image of each other.</p>

<p>Although the two functions may evaluate the same thing they don't say the same thing.
First one says "There is at least one zero and there is at least one null."
Second one says "There is one zero and the other one is null." (which matches the javadoc)</p>

<p>But the comments sometimes also lie. To check the veracity of the comment consider how would you write the function if it took more parameters.</p>

<p>They still say what they say before but now they don't evaluate the same coincidentally.</p>

<pre><code>public static boolean isDummy(TriState a, TriState b, TriState c) {
    return (a.is(ZERO) || b.is(ZERO) || c.is(ZERO))
        &amp;&amp; (a.is(NULL) || b.is(NULL) || c.is(NULL));
}


public static boolean isDummy(TriState a, TriState b, TriState c) {
    return a.is(ZERO) &amp;&amp; b.is(NULL) &amp;&amp; c.is(NULL) 
        || a.is(NULL) &amp;&amp; b.is(ZERO) &amp;&amp; c.is(NULL) 
        || a.is(NULL) &amp;&amp; b.is(NULL) &amp;&amp; c.is(ZERO);
}
</code></pre>
    </div>