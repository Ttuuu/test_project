<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To expand on l0b0's answer:</p>

<ul>
<li><p>Don't chain <code>str.replace</code>'s for the same reason you don't concatenate strings. If you need to perform multiple translations at the same time instead use <code>str.maketrans</code> and <code>str.translate</code>.</p>

<pre><code>&gt;&gt;&gt; table = str.maketrans('ab', 'cd', 'e')
&gt;&gt;&gt; 'abeeba'.translate(table)
'cddc'
</code></pre></li>
<li><p>Your code only supports Unix paths, this means it doesn't work on Windows. To fix this change all of your <code>'/'</code> to <code>os.sep</code>.</p></li>
<li><p>Rather than manual string file handling, you should use <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a>.</p>

<pre><code># From
"/".join(frame.filename.split("/")[:-1])
logpath + os.sep + "log"

# To
pathlib.Path(frame.filename).parent
logpath / "log"
</code></pre></li>
<li>Add some more function calls. With good names they should remove your comments.</li>
<li>You have two quite large bugs with <code>log_path</code> generation. Firstly if the <code>inspect.stack()[1:]</code> is empty or all the file names start with <code>'&lt;'</code> your code results in a <code>NameError</code>. The second won't even print the warning.</li>
<li>If you can't create the log file, you can always default to <code>os.devnull</code> or some other reasonable default.</li>
</ul>

<pre><code>import datetime
import inspect
import os
import pathlib

print("Setting up logfile via very_nice_log.py")


def get_datetime_file_name():
    table = str.maketrans(None, None, "- :")
    return (
        str(datetime.datetime.today()).translate(table)
        + '.txt'
    )


def get_log_path():
    for frame in inspect.stack()[1:]:
        if frame.filename[0] != '&lt;':
            return pathlib.Path(frame.filename).parent
    print("WARNING: could not locate file that called very_nice_log")
    return None


def make_log_file():
    log_path = get_log_path()
    if log_path is None:
        return open(os.devnull, "w")
    log_path /= "log"
    log_path.mkdir(parents=True, exists_ok=True)
    log_path /= get_datetime_file_name()
    print(str(log_path))
    return log_path.open("w+")


print("Created log file")
log_file = make_log_file()
log_file.write("Starting to log...\n\n")
</code></pre>
    </div>