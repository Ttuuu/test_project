<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A bit late to answer but since no previous answer was accepted this may still be useful to anyone ending up on this question.</p>

<p>The most important and at the same time hardest part about solving a logic puzzle like NQueens is coming up with a good representation of the solution space.</p>

<p>Your <code>boolean[][]</code> works and looks like the most obvious choice. But it doesn't use any extra information that we know about the solution.<br>
We already know that each row and column will contain exactly 1 queen. So we can change the problem statement from </p>

<blockquote>
  <p>For each of the N queens, try to find a row and column to place them so they don't attack each other</p>
</blockquote>

<p>into an alternative search:</p>

<blockquote>
  <p>For each of the rows, find the column on which the queen is placed.</p>
</blockquote>

<p>or switching rows/columns:</p>

<blockquote>
  <p>For each of the columns, find the row on which the queen is placed.</p>
</blockquote>

<p>This translates nicely into representing the board by an array of <code>n</code> numbers: <code>int[] board = new int[n]</code>.</p>

<p>What this means is that the index in that list is the number of the row, and the value is the column (or vice versa).</p>

<p>Notice that just by choosing this representation we don't have to check for the same rows at all. There will always be exactly 1 queen on each row.</p>

<p>Checking for 2 queens on the same column is also as easy as checking if 2 of the values in this array are equal.</p>

<p>For the diagonals it's slightly trickier. 2 queens are attacking diagonally when either the row + column of queen 1 is equal to row + column of queen 2. Or if (row queen 1 + column queen 2) is equal to (row queen 2 + column queen 1).</p>

<p>Since we're gonne put the queens in recursively we can us a method that checks for a given row if any queens placed on the rows above that are attacking her. This looks as follows:</p>

<pre><code>private static boolean isAttacking(int[] board, int row){
    for(int i = 0; i &lt; row; i++){
        //check same column
        if(board[i] == board[row]){
            return true;
        }
        //check diagonals
        if (board[i]+i == board[row]+row) {
            return true;
        }

        if (board[row]+i == board[i]+row) {
            return true;
        }
    }
    return false;
}
</code></pre>

<p>The actual recursion can then look like this:</p>

<pre><code>private static boolean placeQueen(int[] board, int queenIndex){
    if(queenIndex &gt;= board.length){
        //we have succesfully placed all N queens
        return true;
    }
    for(int i = 0; i &lt; board.length; i++){
        board[queenIndex] = i;
        if(!isAttacking(board, queenIndex)){
            if(placeQueen(board, queenIndex + 1)) {
                return true;
            }
        }
    }
    return false;
}
</code></pre>

<p>Which reads as: For the given row, try to put the queen on each of the columns and check recursively if the remaining queens can still be placed.</p>

<p>To test the program and see if it actually finds a solution let's also write a quick printing method to show us the solution:</p>

<pre><code>private static void print(int[] board) {
    for (int row : board) {
        System.out.print('|');
        for (int col = 0; col &lt; board.length; col++) {
            if (row == col) {
                System.out.print("Q|");
            } else {
                System.out.print(" |");
            }
        }
        System.out.println();
    }
}
</code></pre>

<p>And all that's left is writing a simple main method to actually call the solver:</p>

<pre><code>public static void main(String[] args) {
    long start = System.currentTimeMillis();
    final int N = 8;
    int[] board = new int[N];
    placeQueen(board,0);
    print(board);
    System.out.println((System.currentTimeMillis() - start) + " milliseconds");
}
</code></pre>

<p>Quick note: I also added a simple timing printout to know how many miliseconds it took to find the solution. For n = 8 this printed out:</p>

<blockquote>
<pre><code>|Q| | | | | | | |  
| | | | |Q| | | |  
| | | | | | | |Q|  
| | | | | |Q| | |  
| | |Q| | | | | |  
| | | | | | |Q| |  
| |Q| | | | | | |  
| | | |Q| | | | |  
1 milliseconds
</code></pre>
</blockquote>

<p>When you want to time your application it's also worth removing all printing of in between steps since printing to console takes a bit more time than the rest of the code.</p>

<p>Just for fun: I added a count on number of backtracks too. For n=8 it takes only 113.</p>

<p>For n=16 it takes 8 milliseconds and 10052 backtracks.</p>

<p>Your solution on my pc took (after removing all prints) 2 milliseconds for n=8 and 19 milliseconds for n=16 (with 170748 backtracks).</p>
    </div>