<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>PEP-8</h1>
<pre><code>class vertex:
class graph:
</code></pre>
<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a> asks that you name these <code>Vertex</code> and <code>Graph</code>, with initial capital.</p>
<h1>naming nodes</h1>
<pre><code>    self.key = key
</code></pre>
<p>Yes, you will be using this as a <code>dict</code> key.
But <code>name</code> would have been the more natural identifier for a node name.</p>
<h1>unused attribute</h1>
<p>Please delete this line:</p>
<pre><code>    self.nbnodes = 0
</code></pre>
<p>That quantity may be trivially obtained with <code>len(self.root)</code>,
and in any event you never reference it.</p>
<h1>edge weight</h1>
<p>At first blush this appears to be a default edge ID of zero:</p>
<pre><code>def add(self, key1, key2, edge=0):
</code></pre>
<p>Later it looks more like an edge weight, an attribute of the edge.
It would be helpful for a docstring to clarify this.
Or just name it <code>edge_weight</code>.</p>
<h1>API</h1>
<p>Consider having <code>cutver()</code> print nothing,
and instead <code>return</code> a result which the caller may print.</p>
<p>Also, <code>_cutver()</code> feels a lot like a Fortran subroutine,
as it has side effects on the <code>result</code> parameter,
rather than <code>return</code>ing a result.</p>
<h1>sentinel</h1>
<p>You use this:</p>
<pre><code>      parent[vertex] = -1
</code></pre>
<p>without every verifying that a node name is not <code>-1</code>,
or constraining each node name to be a <code>str</code>.
The usual convention would be to use <code>None</code> to represent this.</p>
<h1>docstring</h1>
<pre><code>    self.curr = 0
</code></pre>
<p>This is absolutely not self-descriptive enough.
Use a <code>"""docstring"""</code> or <code>#</code> comment to tell us what quantity it is measuring.</p>
<h1>reference</h1>
<p>In general <code>_cutver()</code> is obscure,
which increases the difficulty of answering your two questions.
It cites no references and does not attempt to justify
any of its algorithmic steps.
Perhaps it correctly finds cut vertices,
but the text does not give us any reason to see why that is obviously true.
If the code tries to adhere to Hopcroft73 (with Tarjan, algorithm 447),
then choosing to omit identifiers like <code>lowpoint</code>
is not helping the reader to see how the current implementation
corresponds to what Hopcroft describes.</p>
    </div>