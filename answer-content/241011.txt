<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There’s a lot of going on here. At a cursory glance:</p>

<ul>
<li><a href="https://stackoverflow.com/a/5849668/1968">You <em>must not</em> use <code>using</code> in headers at file scope</a>.</li>
<li>It’s not clear why your template parameter is called <code>S</code> instead of <code>T</code>, and the more I read your source code the more this confuses me. What does <code>S</code> stand for? — The use of <code>T</code> for such member types is near-universal.</li>
<li>I’m not sure public inheritance is a good idea here: why are you modelling an is-a relationship? Why not private inheritance or a <code>std::array</code> member?</li>
<li>Don’t declare functions with a <code>(void)</code> parameter list. In C this is necessary to create the correct prototype. In C++ it has no purpose — <code>()</code> does the same, and is conventional.</li>
<li>Your <code>setFrom</code> member functions should be constructors and assignment operators instead.</li>
<li>Don’t pass <code>std::array</code> by value, pass it by <code>const&amp;</code> — otherwise a very expensive copy might be created. At the very least make this depend on <code>N</code> as well as <code>sizeof(S)</code> so you can optimise for arrays small enough to be passed inside a single register.</li>
<li>Use algorithms (<code>std::copy</code>, constructors, assignment) instead of copying your arrays in a <code>for</code> loop.</li>
<li><code>output</code> is redundant if you define a suitable formatted output stream operator.</li>
<li>If you want to follow C++ convention, <code>asString</code> should be called <code>str</code>. That’s not necessary of course.</li>
<li><code>S denom = static_cast&lt;S&gt;(0);</code> can usually be written as <code>auto denom = S{0};</code>, and those cases where this fails because no suitable constructor exists are probably cases where you <em>want</em> this to fail.</li>
<li>Don’t use <code>while</code> loops to iterate over ranges, it’s unidiomatic and therefore confusing: either use <code>for</code> loops or, better yet, ranged-<code>for</code> loops where possible. And once again use appropriate algorithms. The loop that calculates <code>denom</code> can be replaced by a call to <code>std::accumulate</code>, for instance. That way you can also declare <code>denom</code> as <code>const</code> and initialise it directly.</li>
<li><code>randomize</code> guards against <code>S</code> being an integral type; <code>renomalize</code> does not, but also needs this constraint.</li>
</ul>
    </div>