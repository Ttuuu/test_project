<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><a href="https://github.com/rust-lang-nursery/rustfmt" rel="nofollow noreferrer">Rustfmt</a> is a tool for automatically formatting Rust code to the community-accepted style.</li>
<li><a href="https://github.com/rust-lang-nursery/rust-clippy" rel="nofollow noreferrer">Clippy</a> is a tool for finding common mistakes that may not be compilation errors but are unlikely to be what the programmer intended.</li>
</ul>

<p>Rustfmt points out that you are using 3-space indents (Rust uses 4), and that some of your lines don't need to be split.</p>

<p>Clippy points out:</p>

<pre class="lang-none prettyprint-override"><code>warning: returning the result of a let binding from a block
 --&gt; src/main.rs:9:5
  |
7 |     let to_binary = hex[2..].chars().map(|c| to_binary(c)).collect();
  |     ----------------------------------------------------------------- unnecessary let binding
8 |
9 |     to_binary
  |     ^^^^^^^^^
  |
  = note: #[warn(clippy::let_and_return)] on by default
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
  |
7 |
8 |
9 |     hex[2..].chars().map(|c| to_binary(c)).collect()
  |

warning: redundant closure found
 --&gt; src/main.rs:7:42
  |
7 |     let to_binary = hex[2..].chars().map(|c| to_binary(c)).collect();
  |                                          ^^^^^^^^^^^^^^^^ help: remove closure as shown: `to_binary`
  |
  = note: #[warn(clippy::redundant_closure)] on by default
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure
</code></pre>

<p>There's no reason to return a <code>String</code> here, a <code>&amp;'static str</code> is lighter-weight. See <a href="https://stackoverflow.com/q/24158114/155423">What are the differences between Rust's <code>String</code> and <code>str</code>?</a> for full details, but a <code>String</code> requires a heap allocation, while a <code>&amp;'static str</code> is a reference to some existing data in the compiled binary.</p>

<p>With these changes, all of your tests pass:</p>

<pre><code>fn main() {
    let binary_value = convert_to_binary_from_hex("0x39A7F8");
    println!("Converted: {}", binary_value);
}

fn convert_to_binary_from_hex(hex: &amp;str) -&gt; String {
    hex[2..].chars().map(to_binary).collect()
}

fn to_binary(c: char) -&gt; &amp;'static str {
    match c {
        '0' =&gt; "0000",
        '1' =&gt; "0001",
        '2' =&gt; "0010",
        '3' =&gt; "0011",
        '4' =&gt; "0100",
        '5' =&gt; "0101",
        '6' =&gt; "0110",
        '7' =&gt; "0111",
        '8' =&gt; "1000",
        '9' =&gt; "1001",
        'A' =&gt; "1010",
        'B' =&gt; "1011",
        'C' =&gt; "1100",
        'D' =&gt; "1101",
        'E' =&gt; "1110",
        'F' =&gt; "1111",
        _ =&gt; "",
    }
}
</code></pre>

<p>In fact, deleting all of your code causes your tests to pass. It would be a good idea to add some tests!</p>

<p>Depending on what routes you want to look down next, you could try:</p>

<ul>
<li>to handle strings that do not start with <code>0x</code> without panicking.</li>
<li>to handle upper- and lower-case hex</li>
<li>to reduce/avoid string munging yourself</li>
</ul>
    </div>