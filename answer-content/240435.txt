<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review. I have some suggestions for you and I modified part of your code in your <code>main</code> , using just only arrays as you said:</p>

<p>Starting from your class declaration:</p>

<blockquote>
<pre><code>public class twoDArrayPractice { ... }
</code></pre>
</blockquote>

<p>Java classes always start with an uppercase letter, you can rename it:</p>

<pre><code>public class TwoDArrayPractice { ... }
</code></pre>

<p>Use of <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html" rel="nofollow noreferrer">try with resources</a> statement, why worry about closing of one file if there is a construct automatically doing it for you ? So instead of :</p>

<blockquote>
<pre><code>try {
      File file = new File("test.txt");
      Scanner inputFile;
      inputFile = new Scanner(file);
      inputFile.close();
} catch (FileNotFoundException e) {
        System.out.println("File not found");
}
</code></pre>
</blockquote>

<p>You can rewrite it like this:</p>

<pre><code>try (Scanner inputFile = new Scanner(new File("test.txt"))) { /* here your code */ }
</code></pre>

<p>Some minor changes to your <code>main</code> method  to improve readibility:</p>

<pre><code>public static void main(String[] args) throws FileNotFoundException {

    final int ROWS = 10;
    final int COLS = 10;
    String[][] numString = new String[ROWS][COLS]; // 2-d array of strings

    try (Scanner inputFile = new Scanner(new File("test.txt"))) { /* here your code */ }
}
</code></pre>

<p>You have the following code:</p>

<blockquote>
<pre><code>while (inputFile.hasNextLine() &amp;&amp; i &lt; 10) {
       tempString.append(inputFile.nextLine());
       if (!(tempString.toString().trim().isEmpty())) {
           numString[i] = removeSpaces(tempString.toString().split(" "));
           i++;
       }
       tempString.setLength(0);
}
</code></pre>
</blockquote>

<p>Rewrite it in a more readable way:</p>

<pre><code>for (int i = 0; inputFile.hasNextLine() &amp;&amp; i &lt; 10; ++i) {
    String line = inputFile.nextLine();
    if (!line.trim().isEmpty()) {
        numString[i] = removeSpaces(line.split(" "));
    }
}
</code></pre>

<p>Same approach for this code:</p>

<pre><code>for (i = 0; i &lt; doubleMatrixLength; i++) {
    numStringLength = numString[i].length;
    for (j = 0; j &lt; numStringLength; j++) {
    if (j == 0) {
       doubleMatrix[i] = new Double[numString[i].length];
    }
    try {
       doubleMatrix[i][j] = Double.parseDouble(numString[i][j]);
    } catch (NumberFormatException e) {
      System.out.println("Couldn't convert to double");
    } catch (NullPointerException e) {
      System.out.println("Can't convert Null value");
    }
}
</code></pre>

<p>You can rewrite like this:</p>

<pre><code>for (int i = 0; i &lt; doubleMatrix.length; i++) {
    int numStringLength = numString[i].length;
    doubleMatrix[i] = new Double[numStringLength];
    for (int j = 0; j &lt; numStringLength; j++) {
    try {
        doubleMatrix[i][j] = Double.parseDouble(numString[i][j]);
    } catch (NumberFormatException e) {
    System.out.println("Couldn't convert to double");
    } catch (NullPointerException e) {
        System.out.println("Can't convert Null value");
    }
}
</code></pre>

<p>Here the complete version of method <code>main</code>:</p>

<pre><code>public static void main(String[] args) throws FileNotFoundException {

    final int ROWS = 10;
    final int COLS = 10;
    String[][] numString = new String[ROWS][COLS]; // 2-d array of strings

    try (Scanner inputFile = new Scanner(new File("test.txt"))) {

        // stores contents from file into numString
        for (int i = 0; inputFile.hasNextLine() &amp;&amp; i &lt; 10; ++i) {
            String line = inputFile.nextLine();
            if (!line.trim().isEmpty()) {
                numString[i] = removeSpaces(line.split(" "));
            }
        }

        // counts and stores number of non-null rows from numString 
        //in n variable
        int n = 0;
        while (n != 10 &amp;&amp; numString[n][0] != null) { n++; }


        Double[][] doubleMatrix = new Double[n][];

        //takes elements in numString, parses them to 
        //double and stores them in doubleMatrix
        for (int i = 0; i &lt; doubleMatrix.length; i++) {
            int numStringLength = numString[i].length;
            doubleMatrix[i] = new Double[numStringLength];
            for (int j = 0; j &lt; numStringLength; j++) {
                try {
                    doubleMatrix[i][j] = Double.parseDouble(numString[i][j]);
                } catch (NumberFormatException e) {
                    System.out.println("Couldn't convert to double");
                } catch (NullPointerException e) {
                    System.out.println("Can't convert Null value");
                }
            }
        }

        //print contents of doubleMatrix
        for (n = 0; n &lt; doubleMatrix.length; n++) {
            for (int j = 0; j &lt; doubleMatrix[n].length; j++) {
                System.out.print(doubleMatrix[n][j] + " ");
            }
            System.out.println();
        }
    }

}
</code></pre>

<p>With <code>List</code> and generally dynamic structures the code would be extremely simpler.</p>
    </div>