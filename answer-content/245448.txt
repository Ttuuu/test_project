<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Because of the initial constraints (a for loop for two threads different why one prints <code>"foo"</code> and the other one prints <code>"bar"</code>) set by leetcode site on the problem I see no alternatives to the way you solved it. Answering your first question:</p>
<blockquote>
<p>Do you see any cases, where this solution would not work? (Assuming
the input is correct, i.e. n&gt;=1.)</p>
</blockquote>
<p>None, because you are setting the guard condition to one initial value (<code>0</code>) and you are ensuring the alternate order with <code>wait</code> and <code>notify</code>.</p>
<p>Your second question:</p>
<blockquote>
<p>Do you see any issues with performance? (I know the code waits in a
while-loop, but it calls wait, which is supposed to be optimal.)</p>
</blockquote>
<p>Again, following leetcode constraints there are no alternatives, while it seems that from some solutions posted on the site if you are less strict with constraints performance can be better, but this is probably bound to the fact that
threads just print one string and nothing else, so <code>wait</code> and <code>notify</code> calls represent a significative portion of working time.</p>
<p>Your third question:</p>
<blockquote>
<p>In general, is there a way this solution could be improved?</p>
</blockquote>
<p>You can use for the lock instead of your static class an <code>Object</code> instance and a boolean variable for the condition, but result should be quite similar.</p>
<p>Fourth question:</p>
<blockquote>
<p>Does this pattern (threads running multiple times in a given order and
waiting for each other) have a name, or a high-level Java concurrency
object which implements them? (Slightly related: what better name
would you give to syncer?)</p>
</blockquote>
<p>I see this situation like a <em>token ring</em> anomalous case where the token is in this case the value of the status guard, with more than two threads you could use a <code>String</code> token with the name of thread that would be activated.</p>
    </div>