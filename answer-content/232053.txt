<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd say that </p>

<pre><code>game_board = [["O", "O", "O", "O", "O"],
            ["O", "O", "O", "O", "O"],
            ["O", "O", "O", "O", "O"],
            ["O", "O", "O", "O", "O"],
            [ "O", "O", "O", "O", "O"]]

for i in game_board:
    print(*i)
</code></pre>

<p>produces a neat display:</p>

<pre><code>O O O O O
O O O O O
O O O O O
O O O O O
O O O O O
</code></pre>

<p>which is an awesome way of translating array to display.</p>

<pre><code>elif (row, column) == ship1
</code></pre>

<p>is also an intelligent way of coupling function with comparison where initialisation is class like:</p>

<pre><code>ship1 = create_random_ship()
</code></pre>

<p>but, a ship class might be better</p>

<h3>The Ship class</h3>

<pre><code>class Ship:
    def __init__(self):
        self.coord = (random.randint(0, 5), random.randint(0, 5))

    def __eq__(self, other):
        return self.coord == other
</code></pre>

<p>with initialisations as</p>

<pre><code>ship1 = Ship()
ship2 = Ship()
ship3 = Ship()
</code></pre>

<p>This also helps if you want to add more info to your ships like let's say you want to make 3 teams</p>

<h3>Messages Display</h3>

<p>We might want to hold messages in a structure like</p>

<pre><code>class Message:
    welcome = ("Welcome to the Battleship game!\n"
                "Your main objective is to find and destroy all the hidden ships on map!\n")
    instructions = ("\nIntroductions:\n"
                "You have 10 ammo and there are 3 hidden ships on map.\n"
                "In order to hit them, you have to enter specific numbers for that location. For example:\n"
                "For the first row and first column, you have to write 1 and 1.\n"
                "I wish you good fortune in wars to come!\n")
    # ...
</code></pre>

<p>and use as</p>

<pre><code>print(Message.welcome)
print(Message.instructions)
</code></pre>

<h3>Ship Initialisations</h3>

<p>Ships could be better instantiated, maybe a function which modifies the game coordinates to represent the ship with a new symbol. Could be useful in the case where one ship occupies more than one tile</p>

<h3>Game Class</h3>

<p>A game class might be better suited with initialisations of the board size and number of random ships.</p>

<pre><code>battle_ship = Game(board_size=(5,5), rand_ships=3)
</code></pre>

<p>Then you have methods as</p>

<pre><code>battle_ship.play()
battle_ship.play_again()
</code></pre>

<h3>Miscellaneous</h3>

<ul>
<li>+1 for use of f strings. </li>
<li>The game is also pretty smooth, maybe an Exception to catch KeyboardInterrupt might enhance it better. </li>
<li>I find it tiring to add row and col line by line, maybe a format like <code>1 5</code> might be used to specify it at once.</li>
</ul>
    </div>