<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let's start simple. First of all, your code seems fine. However, as you've noticed yourself, there's an abundance of <code>returns</code>. Several of them don't seem necessary, so let us inspect some patterns:</p>

<pre class="lang-hs prettyprint-override"><code>((merge (return a') (return ys)) &gt;&gt;= \z -&gt; return (y : z))
</code></pre>

<p>The pattern <code>x &gt;&gt;= \z -&gt; return (f z)</code> is the same as <code>fmap f x</code>. That already reduces the number of returns by two:</p>

<pre class="lang-hs prettyprint-override"><code>type ArrayWithLogging a = WriterT [String] Identity [a]

merge :: (Show a, Ord a) =&gt; ArrayWithLogging a -&gt; ArrayWithLogging a -&gt; ArrayWithLogging a
merge al bl = do
    a &lt;- al
    b &lt;- bl
    case (a, b) of
        ([], b') -&gt; tell ["Returning " ++ show b'] &gt;&gt; return b'
        (a', []) -&gt; tell ["Returning " ++ show a'] &gt;&gt; return a'
        (a'@(x:xs), b'@(y:ys)) -&gt; if (x &lt;= y)
                                    then tell ["Min " ++ show x ++ " merging " ++ show xs ++ " with " ++ show b] 
                                        &gt;&gt; fmap (x:) (merge (return xs) (return b'))
                                    else tell ["Min " ++ show y ++ " merging " ++ show a ++ " with " ++ show ys] 
                                        &gt;&gt; fmap (y:) (merge (return a') (return ys))
</code></pre>

<p>Now, for the next step, let's get rid of the <code>WriterT</code> monad in the first two arguments. There's no reason for that, and it further removes the <code>return</code>:</p>

<pre class="lang-hs prettyprint-override"><code>merge :: (Show a, Ord a) =&gt; [a] -&gt; [a] -&gt; ArrayWithLogging a
merge a b = do
    case (a, b) of
        ([], b') -&gt; tell ["Returning " ++ show b'] &gt;&gt; return b'
        (a', []) -&gt; tell ["Returning " ++ show a'] &gt;&gt; return a'
        (a'@(x:xs), b'@(y:ys)) -&gt; if (x &lt;= y)
                                    then tell ["Min " ++ show x ++ " merging " ++ show xs ++ " with " ++ show b] 
                                        &gt;&gt; fmap (x:) (merge xs b')
                                    else tell ["Min " ++ show y ++ " merging " ++ show a ++ " with " ++ show ys] 
                                        &gt;&gt; fmap (y:) (merge a' ys)
</code></pre>

<p>We can still get the old variant by using the following <code>merge'</code>:</p>

<pre class="lang-hs prettyprint-override"><code>merge' a1 b1 =
  a &lt;- a1
  b &lt;- b1
  merge a b
</code></pre>

<p>Now that we've reduced function pretty far (but didn't lose any functionality!), we can go ahead and change some indentation to make our intend more clear. Furthermore, let us also introduce a small helper called <code>message</code>:</p>

<pre class="lang-hs prettyprint-override"><code>merge :: (Show a, Ord a) =&gt; [a] -&gt; [a] -&gt; ArrayWithLogging a
merge a b = do
    case (a, b) of
        ([], b') -&gt; tell ["Returning " ++ show b'] &gt;&gt; return b'
        (a', []) -&gt; tell ["Returning " ++ show a'] &gt;&gt; return a'
        (a'@(x:xs), b'@(y:ys)) -&gt; 
            if (x &lt;= y)
                then message x xs b  &gt;&gt; fmap (x:) (merge xs b')
                else message y a  ys &gt;&gt; fmap (y:) (merge a' ys)
  where
   message e ls rs = tell ["Min " ++ show e ++ " merging " ++ show ls ++ " with " ++ show rs]
</code></pre>

<p>OK, let's reiterate our steps:</p>

<ol>
<li>We changed <code>x &gt;&gt;= \z -&gt; (f z)</code> to <code>fmap f x</code></li>
<li>We changed the arguments into their non-monad variant</li>
<li>We introduced another function to keep the old behaviour (if necessary)</li>
<li>We changed the indentation to make sure that it looks nicer.</li>
<li>We introduced a small helper to make sure that we don't repeat ourselves.</li>
</ol>

<p>And those are all the non-opinionated (well, except the last one) changes I'd recommend to you. In my personal opinion, the function gets even a little bit nicer if we use pattern matching on the arguments:</p>

<pre class="lang-hs prettyprint-override"><code>type ArrayWithLogging a = WriterT [String] Identity [a]

merge :: (Show a, Ord a) =&gt; [a] -&gt; [a] -&gt; ArrayWithLogging a
merge a        []     = tell ["Returning " ++ show a] &gt;&gt; return a
merge []       b      = tell ["Returning " ++ show b] &gt;&gt; return b
merge a@(x:xs) b@(y:ys)
  | x &lt;= y    = message x xs b  &gt;&gt; fmap (x:) (merge xs b)
  | otherwise = message y a  ys &gt;&gt; fmap (y:) (merge a ys)
  where
    message e ls rs = tell ["Min " ++ show e ++ " merging " ++ show ls ++ " with " ++ show rs]

merge' :: (Show a, Ord a) =&gt; ArrayWithLogging a-&gt; ArrayWithLogging a-&gt; ArrayWithLogging a
merge' a b = do
   a1 &lt;- a
   b1 &lt;- b
   merge a1 b1
</code></pre>
    </div>