<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a similar idea to the other answers here, but the implementation is a bit different.</p>

<p>First of all, we can assume that the array's length is at least 3, since it needs to have at least two of the same values and one different value.</p>

<p>Let's start by handling the case where the stray value is not in the first element. We could simply write:</p>

<pre><code>a.find(v =&gt; v != a[0])
</code></pre>

<p>That is, find an element that's different from the first element. But what if the stray element comes first in the array? We can check if the first two elements differ. If they do, then the stray is either in the first or second position, so the third element is not a stray. In this case, we can check against the third element instead of the first; otherwise we check against the first element as before, thus:</p>

<pre><code>a.find(v =&gt; a[0] != a[1] ? v != a[2] : v != a[0])
</code></pre>

<p>This is a bit code-golfey and not very readable, so I wouldn't recommend it in production, but it may be of some interest as a curiosity.</p>

<p>It may be worth noting that this solution <a href="https://www.measurethat.net/Benchmarks/Show/5560/0/find-the-stray" rel="noreferrer">appears to perform quite well</a>, and can be <a href="https://www.measurethat.net/Benchmarks/Show/5561/0/find-the-stray-v2" rel="noreferrer">further optimized</a> by doing the inequality check on the first two elements before invoking <code>find</code>, and by using the third parameter to <code>find</code> to access the array, making the callback a pure function and eliminating the need to reference the array via the closed-over variable, for example:</p>

<pre><code>a.find(a[0] != a[1] ?
    (v, i, a) =&gt; v != a[2] :
    (v, i, a) =&gt; v != a[0])
</code></pre>
    </div>