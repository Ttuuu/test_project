<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>How about checking the current time instead of checking the existence of the subfolder.<br></p>

<p>The script below has a function to back up the data of the specified date.</p>

<pre><code>function Backup-Data ([string]$Path, [string]$Dest, [datetime]$Date) {

    $baseName = $Date.ToString("yyyyMMdd")
    Copy-Item "$Path<span class="math-container">\$baseName" $Dest -Recurse
    Copy-Item "$Path\ARCHIVE\$</span>baseName.zip" "$Dest\ARCHIVE"
    Copy-Item "$Path\EDC<span class="math-container">\$baseName.stl" "$Dest\EDC"
    RunGenPoll -InputFolder "$Path\$</span>baseName"
}


$backupPath = "$uncroot\$backup"
$now = Get-Date
$targetDate = if ($now.Hour -lt 12) { $now.AddDays(-1).Date } else { $now.Date }

if ($targetDate.DayOfWeek -eq "Sunday") {
    -2..0 | ForEach-Object { Backup-Data $iber $backupPath $targetDate.AddDays($_) }
}
else {
    Backup-Data $iber $backupPath $targetDate
}
</code></pre>

<p>If you run the script in the morning,  the <code>$targetDate</code> will be previous day.<br>
If <code>$targetDate.DayofWeek</code> is Sunday, it will backup data from two days ago to today.</p>
    </div>