<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>For styling, variable naming etc. conventions, please take a <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">look at PEP-8</a>. Your globals should be <code>UPPERCASED</code> and function names should be <code>snake_cased</code>.</p>

<p>Since you are not at all interested in the <code>rolled</code> list, why store a thousand values in memory?</p>

<p>You <a href="https://devdocs.io/python~2.7/library/random#random.seed" rel="nofollow noreferrer"><strong>should always</strong> seed</a> when using a RNG function. For more information on why this practice is favoured, check <a href="https://stackoverflow.com/a/22639752/1190388">this SO response</a>.</p>

<p>Instead of using <code>random.randrange</code>, prefer using <a href="https://devdocs.io/python~2.7/library/random#random.randint" rel="nofollow noreferrer"><code>random.randint</code></a>.</p>

<p>With those in place, you have:</p>

<pre><code>import random
import operator

random.seed()

ROLLED = {i: 0 for i in range(1, 7)}
ITERATIONS = int(input('How many times would you like to roll the dice? '))

def probability():
    print("Calculation of probability: ")
    for key, count in ROLLED.items():
        print("\t{}: {:.2f}".format(key, count*100./ITERATIONS*1.))

for _ in range(ITERATIONS):
    ROLLED[random.randint(1, 6)] += 1

probability()
</code></pre>

<p>To find the most rolled, and least rolled face of the die, you can use a custom operator on <code>ROLLED</code> dictionary:</p>

<pre><code>max(ROLLED.iteritems(), key=operator.itemgetter(1))
min(ROLLED.iteritems(), key=operator.itemgetter(1))
</code></pre>
    </div>