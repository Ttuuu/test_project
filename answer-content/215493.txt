<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>template &lt;typename Less, typename T, typename... Ts&gt;
constexpr const T&amp; min(Less less, const T&amp; a, const T&amp; b, const Ts&amp;... rems) {
</code></pre>

<p>This function requires a minimum of 2 elements. A minimum element will exist if the user provides a single argument variadic list. Consider handling that.</p>

<pre><code>auto&amp; min1 = min(std::less&lt;&gt;{}, 4, 5);  // okay!
auto&amp; min2 = min(std::less&lt;&gt;{}, 4);     // candidate function not viable, reqs 3 args, 2 provided
</code></pre>

<hr>

<pre><code>        return min(less, std::min(a, b, less), rems...);
</code></pre>

<p>Your approach here uses recursion and implementations are permitted to put a recursion depth limit on <code>constexpr</code> calculations. Consider an iterative solution  that expands the pack while calculating the minimum.</p>

<pre><code>template &lt;typename Comparator, typename First, typename... Rest&gt;
constexpr decltype(auto) variadic_min(Comparator cmp, First const&amp; first, Rest const&amp;... rest) {
    const First* result = std::addressof(first);

    // cast each evaluated expr to void in case of overloaded comma operator shenanigans
    ((void)(result = std::addressof(std::min(*result, rest, cmp))), ...);

    return *result;
}
</code></pre>

<p>An explanation with what is going on with the <a href="https://en.cppreference.com/w/cpp/language/fold" rel="noreferrer">fold expression</a>:</p>

<pre><code>((void)(result = std::addressof(std::min(*result, rest, cmp))), ...);
 ^     ^         ^                                            ^ 
 |     |         |                        expand using comma op
 |     |         safer than built-in, now constexpr in 17
 |     evaluate the expression for each pack variable
 cast to void the entire expression to avoid overloaded comma op.
</code></pre>

<hr>

<p>Just thinking beyond the standard library and reinventing the wheel. This <code>min</code> works fine for homogenous packs. What about heterogenous packs?</p>

<pre><code>auto&amp; min1 = min(std::less&lt;&gt;{}, 4, 5, -1);  // min1 = -1
auto&amp; min2 = min(std::less&lt;&gt;{}, 4, 5, -1.); // candidate template ignored...
</code></pre>

<p>One of the benefits of the conditional operator (<code>?:</code>) is that if both resulting expressions return lvalues of the same type, then the result will have the same type. If that type is <code>T&amp;</code>, we could assign to that variable. Could we mimic that behavior with <code>min</code> and friends?</p>

<pre><code>auto a = 4;
auto b = 5;
((b &lt; a) ? b : a)  = 42;        // a = 42, b = 5
min(std::less&lt;&gt;{}, a, b) = 42;  // cannot assign to return value, returns const-qualified type
std::min(a, b) = 42;            // same with standard library.
min(std::less&lt;&gt;{}, 5, 6) = 42   // cannot assign, makes sense!
</code></pre>
    </div>