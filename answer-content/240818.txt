<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Nomenclature</h2>

<p>The standard capitalization for classes is TitleCase, i.e.</p>

<pre><code>class Animal:
class Land:
class Sea:
class Air:
</code></pre>

<h2>Parent methods</h2>

<p>Your <code>land_show_info()</code> should be moved to <code>Animal</code>. It does not need to be re-implemented in each of the children.</p>

<h2>Interpolation</h2>

<p>This:</p>

<pre><code>"Animal Type: {}\nNutrition: {}\nRespiratory: {}\nExcretory: {}\nReproductive: {}\nClimate: {}\n".format(
        self.animal_type, self.nutrition, self.respiratory, self.excretory, self.reproductive, self.climate)
</code></pre>

<p>is more easily expressed as</p>

<pre><code>(
    f'Animal Type: {self.animal_type}\n'
    f'Nutrition: {self.nutrition}\n'
    f'Respiratory: {self.respiratory}\n'
    f'Excretory: {self.excretory}\n'
    f'Reproductive: {self.reproductive}\n'
    f'Climate: {self.climate}\n'
)
</code></pre>

<h2>Enumerations</h2>

<p>You should make an <code>enum.Enum</code> class to represent the nutrition type:</p>

<pre><code>class Nutrition(enum.Enum):
    CARNIVOROUS = 'c'
    HERBIVOROUS = 'h'
    OMNIVOROUS = 'o'
    NO_INFORMATION = 'n'
</code></pre>

<p>Then your input routine can be (for example)</p>

<pre><code>def nutrition():
    prompt = (
        'Please Enter Nutrition Type\n' +
        '\n'.join(
            f"{i}. {nut.name.title():15} --&gt; '{nut.value}'"
            for i, nut in enumerate(Nutrition)
        ) + '\n'
    )
    while True:
        nut_value = input(prompt)
        try:
            return Nutrition(nut_value)
        except ValueError:
            print(f"""!WARNING!
            ...Improper Input {nut_value} Detected...""")
</code></pre>

<p>The return value of your <code>nutrition()</code> function will then have a more useful type than <code>str</code>. The same applies to your respiratory, animal_type, climate, reproductive and excretory input methods.</p>

<h2>Shadowing</h2>

<p>Since you have a method called <code>nutrition</code>, do not also name a variable <code>nutrition</code>.</p>

<h2>Global code</h2>

<p>Starting with these lines onward:</p>

<pre><code># input from user
nutrition = nutrition()
</code></pre>

<p>you should pull out all of your global code into one or more methods.</p>

<h2>Factory</h2>

<p>You can change this:</p>

<pre><code># animal classification
if animal_type == 'Land':
    animal1 = land(nutrition, respiratory, excretory, reproductive, climate, animal_type)
    print(animal1.land_show_info())
elif animal_type == 'Sea':
    animal1 = sea(nutrition, respiratory, excretory, reproductive, climate, animal_type)
    print(animal1.land_show_info())
else:
    animal1 = air(nutrition, respiratory, excretory, reproductive, climate, animal_type)
    print(animal1.land_show_info())
</code></pre>

<p>to temporarily store a type and use it for construction:</p>

<pre><code>animal_class = {
    'Land': land,
    'Sea': sea,
    'Air': air,
}[animal_type]

animal1 = animal_class(nutrition, respiratory, excretory, reproductive, climate, animal_type)
print(animal1.land_show_info())
</code></pre>

<h2>Parametric paths</h2>

<p>The paths in here:</p>

<pre><code>file_ = input("""Is there a file on C:/Users/Gökberk/Desktop/Animal List.txt directory\n(y/n)""")
if file_ == "y":
    with open("C:/Users/Gökberk/Desktop/Animal List.txt", "a", encoding="utf-8") as file:
        file.write("##############################\n")
        file.write(animal1.land_show_info())
        break
elif file_ == "n":
    with open("C:/Users/Gökberk/Desktop/Animal List.txt", "w", encoding="utf-8" ) as file:
        file.write("...Welcome to Animal List File...\n")
        file.write("##############################\n")
        file.write(animal1.land_show_info())
    print("File has been created to C:/Users/Gökberk/Desktop/Animal List.txt")
</code></pre>

<p>should not be hard-coded. Accept them as command-line arguments, environmental variables or in a configuration file.</p>

<h2>Example code</h2>

<pre><code>from dataclasses import dataclass
from enum import Enum, unique
from pathlib import Path
from typing import Type


class AnimalParam:
    # Python does not support extending Enum, so this is left as a mix-in

    @property
    def title(self: Enum) -&gt; str:
        return self.name.title().replace('_', ' ')

    @classmethod
    def from_stdin(cls: Type[Enum]) -&gt; 'Enum':
        prompt = (
            f'Please enter {cls.__name__} type\n' +
            '\n'.join(
                f"  '{v.value}' -&gt; {v.title}"
                for v in cls
            ) + '\n'
        )
        while True:
            v = input(prompt)
            try:
                return cls(v)
            except ValueError:
                print(f'Invalid {cls.__name__} type "{v}"')


@unique
class Nutrition(AnimalParam, Enum):
    CARNIVOROUS = 'c'
    HERBIVOROUS = 'h'
    OMNIVOROUS = 'o'
    NO_INFORMATION = 'n'


@unique
class Respiratory(AnimalParam, Enum):
    WITH_OXYGEN = '+o2'
    WITHOUT_OXYGEN = '-o2'
    NO_INFORMATION = 'n'


@unique
class Excretory(AnimalParam, Enum):
    AMMONIA = 'a'
    UREA = 'u'
    URIC_ACID = 'ua'
    NO_INFORMATION = 'n'


@unique
class Reproductive(AnimalParam, Enum):
    SEXUAL = 's'
    ASEXUAL = 'a'
    NO_INFORMATION = 'n'


@unique
class Climate(AnimalParam, Enum):
    DESERT = 'd'
    FOREST = 'f'
    TUNDRA = 't'
    ICE_FIELD = 'i'
    NO_INFORMATION = 'n'


@unique
class Habitat(AnimalParam, Enum):
    LAND = 'l'
    SEA = 's'
    AIR = 'a'


@dataclass(frozen=True)
class Animal:
    habitat: Habitat
    nutrition: Nutrition
    respiratory: Respiratory
    excretory: Excretory
    reproductive: Reproductive
    climate: Climate

    def __str__(self) -&gt; str:
        return '\n'.join(
            f'{k.title()}: {v.title}'
            for k, v in self.__dict__.items()
        )

    @classmethod
    def from_stdin(cls) -&gt; 'Animal':
        return cls(**{
            field.name: field.type.from_stdin()
            for field in cls.__dataclass_fields__.values()
        })


def main():
    # input from user
    animal = Animal.from_stdin()
    print(animal)

    path = Path(input('Please enter the path to the list file: '))
    with path.open('a') as f:
        banner = 'Welcome to Animal List File.'
        f.write(
            f'{banner}\n'
            f'{"#" * len(banner)}\n\n'
            f'{animal}\n\n'
        )


if __name__ == '__main__':
    main()
</code></pre>

<p>Notable changes:</p>

<ul>
<li>Use a mix-in class for formatting and input utilities</li>
<li>Rename "animal type" to "habitat" because the former was not clear enough to me</li>
<li>Use a <code>dataclass</code> with some shortcuts that assume that every member is an instance of our special enum</li>
<li>Use <code>pathlib</code>, and do not care whether the file already exists - append mode will take care of it</li>
<li>Global code moved to a <code>main</code></li>
</ul>
    </div>