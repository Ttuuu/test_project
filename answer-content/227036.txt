<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After around of iterations I have come up with this solution, and I'm pretty please with it.
I had introduced a static class as a some kind of data container for <strong>min</strong>, <strong>max</strong> and <strong>MeasuredType</strong> variables, but when completed with that iteration I saw clearly that code could be more simplified.
So by abstracting code to more functions lead me to my final solution.</p>

<pre><code>private void checkForOverage(List&lt;GoogleUsageMapping&gt; records) {
    MeasuredType measuredType = sumByMeasuredType(records);
    for (GoogleUsageMapping record : records) {
        if (record.getUsage().getMeasuredType() == measuredType) {
            record.setState(GoogleTrackingState.IGNORED_OVERAGE);
        }
    }
}

private MeasuredType sumByMeasuredType(List&lt;GoogleUsageMapping&gt; records) {
    long allocatedSize = 0L;
    long logicalSize = 0L;
    for (GoogleUsageMapping record : records) {
        if (record.getUsage().getMeasuredType() == MeasuredType.ALLOCATED_SIZE) {
            allocatedSize += record.getUsage().getQuantity().longValue();
        } else if (record.getUsage().getMeasuredType() == MeasuredType.LOGICAL_SIZE) {
            logicalSize += record.getUsage().getQuantity().longValue();
        }
    }
    return (allocatedSize &gt;= logicalSize) ? MeasuredType.LOGICAL_SIZE : MeasuredType.ALLOCATED_SIZE;
}
</code></pre>
    </div>