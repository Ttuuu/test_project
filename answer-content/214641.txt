<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>Simplify <code>@user</code>/<code>@user_index</code>/<code>switch_user</code> using <code>Array#rotate!</code></li>
</ol>

<pre class="lang-rb prettyprint-override"><code>user_queue = ['A', 'B']
user_queue.rotate!.first # 'B'
user_queue.rotate!.first # 'A'
</code></pre>

<ol start="2">
<li>The boolean-success return value is fine for this small program, but in general, it's strange because the methods like <code>update?</code> aren't only reads, they're actions as well. It's like if <code>number.even?</code> somehow modified <code>number</code> underneath.<br>
I think the code would flow better if the actions and the validations were separated. For example:</li>
</ol>

<pre class="lang-rb prettyprint-override"><code>until @grid.gameover?
  turn_user = @user_queue.first
  move = gets_move(turn_user) until @grid.valid_move?(move, turn_user)
  @grid.update!(turn_user, move)
  @user_queue.rotate!
  # ...
end
</code></pre>

<ol start="3">
<li>Leverage the built-in bounds-checking and concise syntax sugar of Ruby:</li>
</ol>

<pre class="lang-rb prettyprint-override"><code>def valid_move?(move, user)
  !!@grid.dig(*move)&amp;.empty? # simplified to one line, same as:
  # @grid.dig(*move)         # nil if out of bounds
  #             cell&amp;.empty? # same as `cell &amp;&amp; cell.empty?`
end

not full?                            # substitutes to:
not @cells.none?{|cell| cell.empty?} # double negative, easily avoidable:

@cells.any?(&amp;:empty?) # `&amp;:empty?` same as sending a `{ |x| x.empty? }` block
</code></pre>
    </div>