<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><em>(I won't comment on the prescribed <code>BinaryTreeNode</code> definition)</em></p>

<h2>API</h2>

<p>Both <code>GetMaxTreeDepth</code> and <code>GetMaxHelper</code> can, and arguably should, be static, as they have no logical dependencies. <code>GetMaxTreeDepth</code> should of course be in some way <code>public</code> (i.e. expose an API), and <code>GetMaxHelper</code> should remain <code>private</code>/<code>internal</code> as an implementation detail.</p>

<p>There is little documentation here, and inline documentation (<code>///</code>) of public APIs is invaluable for discoverability and usability. In particular, I'd expect the throw-on-null documented, and a precise statement of the return value (e.g. I might expect that <code>null</code> would return <code>0</code>, and a tree with only one node and no children return <code>1</code>, but I'd be wrong). If I was feeling helpful, I might add note clarifying that it is a tree search, and that passing a graph with cycles is not supported (it will eventually crash with a stack-overflow); it is stated that you are processing a binary tree, but the definition you are given is clearly not going to prevent anyone building a graph.</p>

<p>I don't know if it was clarified in the question statement, but throwing on <code>null</code> is a design decision, and isn't something you can assume as an implementer (certainly not without documentation to go with the assumption). This is also not the most helpful exception ever:</p>



<pre><code>throw new ArgumentNullException();
</code></pre>

<p>Which argument? Granted there is only one, but this could have bubbled up from an internal method which takes some parameter which is a function of root. Everyone will be happier if you tell them exactly how it was they violated your API's contract:</p>

<pre><code>throw new ArgumentNullException(nameof(root), "Ideally a helpful message here, unless it's just going to state the obvious and create confusion");
</code></pre>

<h2>Recursion</h2>

<p>Recursion is always dodgy*: you don't know where you might end up, and it could well be a stack overflow. As a 'quick and easy' implementation this looks fine (and is easy to understand), but for production code I would consider an iterative solution using an explicit stack, as this can be considerably more space efficient and cope with much deeper trees. A reasonable iterative solution will almost certainly also be faster for larger trees.</p>

<h2><code>GetMaxHelper</code></h2>

<p>I'd break that last line of <code>GetMaxHelper</code> out a bit, making it clearer and easy to read in a narrow window. I'd be inclined to change <code>root</code> to <code>node</code> or something less important sounding also, since <code>root</code> sounds like it should be at depth <code>0</code> (or <code>1</code>?), and these guys are not necessarily so.</p>

<pre><code>int leftDepth = GetMaxHelper(node.Left, depth + 1);
int rightDepth = GetMaxHelper(node.Right, depth + 1);
return Math.Max(leftDepth, rightDepth);
</code></pre>

<p>We could probably argue all day about where the <code>depth++</code> bit should go, so I won't.</p>

<h2>Tests</h2>

<p>It's good that you are testing boundary conditions, but you really need more comprehensive tests than this (I guess this is where the 15min time-limit shows up). An implementation where you 'forgot' to look down the right-hand branches, or made a C&amp;P error (like I did when writing the above snippet) to the same effect would pass your tests.</p>

<p>Sorry, just noticed that you <em>do</em> use a right-hand branch; it's just that your diagram for <code>GetMaxTreeDepthTest</code> is misleading, only showing left-hand branches (which is obviously not ideal). There is value, however, in having tests which explicitly test different bits of logic (e.g. if you have one which only worries about left-branches, and another which only worried about right-branches, you can single out some class of problems more quickly).</p>

<h2>Boring Stuff</h2>

<p>The <code>int depth = 0</code> is clearly redundant, and though that wouldn't bother me, you might consider a named argument or default (<code>= 0</code>) parameter to avoid leaving a variable floating around or to avoid misusing the method by accident. (That said, I seem to spend most of my life regretting using default parameters, so I wouldn't be tempted)</p>

<p>This spacing is inconsistent:</p>

<pre><code> return Math.Max( GetMaxHelper(root.Right, depth+1),  GetMaxHelper(root.Left, depth+1));
</code></pre>

<p>As is this:</p>

<pre><code>Assert.AreEqual(3,result);
</code></pre>

<hr>

<p>* <em>unless it's a tail-call in an explicitly tail-call optimising language, of course</em></p>
    </div>