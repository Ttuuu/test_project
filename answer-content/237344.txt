<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your usage of <code>iter()</code> and <code>next()</code> is unnecessarily confusing.  This comes from the requirement of using a <code>set</code> as an input, where sets are not indexable.</p>

<p>If you passed in a list, then instead of this:</p>

<pre><code>   elif l == 1: return next(iter(s))
</code></pre>

<p>you could write:</p>

<pre><code>   elif l == 1: return s[0]
</code></pre>

<p>which is much clearer.  It gets even clearer when you remove the iterator from the <code>all( ... for ii in i)</code>, which necessitates using <code>i = iter(s); next(i)</code> to reset the iterator.  Here is the updated code:</p>

<pre><code>def common_start(*s):
   l = len(s)
   if l == 0:
       return None
   elif l == 1:
       return s[0]

   start = s[0]
   while start != "" and not all(ii.startswith(start) for ii in s[1:]):
       start = start[:-1]

   return start
</code></pre>

<p>Usage:</p>

<pre><code>&gt;&gt;&gt; s = { "abc1", "abcd", "abc", "abc abc" }
&gt;&gt;&gt; common_start(*s)
'abc'
</code></pre>

<p>The <code>*s</code> explodes the set into a list of arguments.</p>

<hr>

<h1>Reduce</h1>

<p>What is the common prefix among N strings?  It would be the same as taking the common prefix of the first two strings, and using that compute the common prefix with the third string, and so on, until you reach the last string.</p>

<pre><code>common_start({a, b, c, d}) == common_prefix(common_prefix(common_prefix(a, b), c), d)
</code></pre>

<p>Which leads us to <a href="https://docs.python.org/3/library/functools.html?highlight=reduce#functools.reduce" rel="noreferrer"><code>functools.reduce()</code></a>.</p>

<pre><code>from functools import reduce

def common_start(s):
   if s:
       return reduce(common_prefix, s)

   return None
</code></pre>

<p>Now, we just need a function to return the common prefix of two strings.</p>

<p>As an example, this works, although is a bit cryptic.  You might be able to come up with a simpler, possibly faster method:</p>

<pre><code>from itertools import takewhile

def common_prefix(a, b):
    return a[:len(list(takewhile((lambda z: z[0] == z[1]), zip(a, b))))]
</code></pre>

<hr>

<h1>os.path</h1>

<p>Surprisingly, Python comes with <a href="https://docs.python.org/3/library/os.path.html#os.path.commonprefix" rel="noreferrer">the required function built-in to the <code>os.path</code> module</a>.  Just need to convert the <code>set</code> to a <code>list</code>, and handle the empty set to <code>None</code> special case:</p>

<pre><code>import os

def common_start(s):
   if s:
       return os.path.commonprefix(list(s))

   return None
</code></pre>
    </div>