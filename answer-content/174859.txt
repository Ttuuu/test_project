<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>All in all, this code looks very good. I will touch on a few minor things that can be improved. This will probably be rather unordered as I'm repeatedly scrolling up and down, but I'll do my best to keep it sane. Enough.</p>

<h1>Line length</h1>

<p>I have to scroll horizontally in a 1920 pixel wide window (mainly due to the amount of empty space on the left and right, but that's not the point). Consider imposing a limit to line length on yourself, something around 80 or 100 characters. This has multiple benefits:</p>

<ul>
<li>Wide enough for most statements</li>
<li>Makes you rethink very long lines</li>
<li>Source is able to be read without scrolling on (nearly) any display</li>
<li>It looks... clean shaven? I feel some very long lines sprinkled here and there make it look like the code is trying to grow a beard, but fails.</li>
</ul>

<h1>General program usage</h1>

<p>This probably is very subjective, but since it's C code I deem it fitting: Instead of reading from stdin in an endless loop (that you cannot exit without Ctrl-C!), make it so the programs takes the date as a command line argument. It's more in the spirit of C to do something like</p>

<pre><code>./date_information 6/1/2017
The 6th of January...
</code></pre>

<p>instead of</p>

<pre><code>./date_information
Enter date:
</code></pre>

<p>At least that's my take on that.</p>

<h1>Clever code</h1>

<pre><code>for(int i = 0; i &lt; 5 &amp;&amp; sscanf(input, format[i], &amp;date.day, &amp;date.month, &amp;date.year) != 3; i++)
        ;
</code></pre>

<p>This line is clever, I admit. But I had to stop and think a moment about what's actually going on here. Why not do something like</p>

<pre><code>for(int i = 0; i != 5; ++i) {
    if (sscanf(input, format[i], &amp;date.day, &amp;date.month, &amp;date.year) == 3) {
        break;
    }
}
</code></pre>

<p>which does the same thing but shows what's going on intuitively? But props to you for including that semicolon on the otherwise empty line to show the empty loop body is intended! Not many people do that.</p>

<p>The same goes for</p>

<pre><code>return (day += month &lt; 3 ? year-- : year - 2, 23 * month / 9 + day + 4 + year / 4 - year / 100 + year / 400) % 7;
</code></pre>

<p>which is... I don't even know. It does so many things, there's even the good old comma operator there! Remember, just because it's written on one line does not mean it's faster. The compiler still produces three-address code.</p>

<p>(Ab)using the ternary operator falls into this category as well. </p>

<pre><code>suffix[ (date.day == 1 || date.day == 21 || date.day == 31) ? 0     
        (date.day == 2 || date.day == 22) ? 1 :
        (date.day == 3 || date.day == 23) ? 2 : 3]
</code></pre>

<p>This is borderline readable. But it's mostly a formatting thing!</p>

<pre><code>suffix[ (date.day == 1 || date.day == 21 || date.day == 31) ? 0
      : (date.day == 2 || date.day == 22)                   ? 1
      : (date.day == 3 || date.day == 23)                   ? 2 : 3]
</code></pre>

<p>This looks (a bit) cleaner. Haskell probably biased me towards that style of formatting, but I really like it. You can refactor that whole segment though, no shame in local variables.</p>

<h1>Tetris-packing Types</h1>

<pre><code>short day = date.day;
short month = date.month;
short year = date.year;
...
</code></pre>

<p>Now, I could be picky and say both <code>day</code> and <code>month</code> don't need a <code>short</code>, but just a <code>char</code> - a single <code>byte</code> that is. Since their highest possible values are 31 and 12 respectively, you could even cram them into a single byte. Generally, you should prefer using <code>int</code> to any cramming. They will be handled most efficiently (since they're as large as a word) [<a href="https://xkcd.com/285/" rel="nofollow noreferrer">citation needed</a>]. Using three shorts in a function which is rather short itself (pun intended) is no big deal, yet it may affect performance. Or it may not. This is such a small scale, it's hard to notice. Better go with "default type for integers" instead of "use as little space as possible for these 4 instructions".</p>

<h1>Declare it like it's 1980</h1>

<p>You declare all your variables at the very top of <code>main</code>. You're doing K&amp;R, so this is expected, but not needed anymore. Also, if the months and days are global, why not make the formats global as well?</p>

<h1><code>printf</code>, <code>sprintf</code>, <code>fprintf</code></h1>

<p>I see lots of usages for <code>fprintf</code> where you don't actually... format something. If you just want to print a string, use <code>puts</code> or <code>fputs</code>. Note though that <code>puts</code> automatically appends a newline!</p>

<pre><code>fprintf(stderr, "\nError: fgets() read faliure!\n");
</code></pre>

<p>becomes</p>

<pre><code>fputs("\nError: fgets() read failure!", stderr);
</code></pre>

<h1>Final Output</h1>

<p>You have your final output format hardcoded in a <code>printf</code></p>

<pre><code>printf( "The %s is a %s and is day number %d of the year %d, which is %sa leap year\n",...
</code></pre>

<p>Say you want to go nuts and introduce internationalization. Or just want the user to be able to switch to a different format. Or... just realized you'd prefer "is the 3rd day of the year" instead of "day number 3 of the year". Instead of looking for line 115 (yes I looked that up) you could extract that format and make it global as well. </p>

<h1>Conclusion</h1>

<p>All of this was just pointing at minor blemishes and uneven parts. As a whole, your code is very nice. Your style is consistent, your names make sense... it handles even <code>calloc</code> errors!</p>
    </div>