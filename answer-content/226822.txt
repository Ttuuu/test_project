<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Exit early</h1>

<p>Instead of stuffing everything in one return statements, return as early as possible.</p>

<pre><code>if (!projects.Any()) return Enumerable.Empty&lt;string&gt;();
</code></pre>

<p>can be the first statement of your method. It saves recreating the hashset objects and it makes the flow of your method with its recursion more clear. I think sacrificing a bit of "conciseness" for readability is worth it. </p>

<h1><code>ToArray</code></h1>

<p>Are unnecessary and cause additional loops over your sets.</p>

<h1><code>Except</code> and <code>HashSet</code></h1>

<p><code>Enumerable.Except</code> is already implemented using sets. The second argument is added to a set and the first is streamed through it. Creating the <code>HashSet</code> manually is a wasted effort. See <a href="https://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,899" rel="noreferrer">the reference source.</a></p>

<p>So <code>dependents</code> can just be:</p>

<pre><code>var dependents = references.Select(d =&gt; d.Dependent);
</code></pre>

<h1><code>Contains</code> and <code>HashSet</code></h1>

<p><code>Contains</code> on the other hand benefits from the <code>HashSet</code> overload, since the <code>Enumerable.Contains</code> implementation just loops over the sequence. So <code>build</code> should be a <code>HashSet</code> to cope with larger inputs. While we're at it, we're using <code>Linq</code>, so <code>ToHashSet</code>().</p>

<pre><code>static IEnumerable&lt;string&gt; Make(
    IEnumerable&lt;string&gt; projects,
    IEnumerable&lt;(string Dependency, string Dependent)&gt; references)
{
    if (!projects.Any())
    {
        return Enumerable.Empty&lt;string&gt;();
    }
    var dependents = references.Select(d =&gt; d.Dependent);
    var build = projects.Except(dependents).ToHashSet();
    if (!build.Any())
    {
        throw new Exception("Circled references detected.");
    }
    else
    {
        return build.Concat(Make(
              projects.Except(build),
              references.Where(r =&gt; !build.Contains(r.Dependency))));
    }
}
</code></pre>
    </div>