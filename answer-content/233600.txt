<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can propose more functional approach. I don't have arguments to say that it's better, it's just how I prefer to write code for generating two-dimensional arrays filled with some initial values.</p>

<pre class="lang-js prettyprint-override"><code>function createRow(rowLength: number) {
    return Array(rowLength).fill(null).map(() =&gt; ({
        isChecked: true,
        src: ''
    }))
}

function updateTileEditor(length: number, height: number) {
    this.tiles = Array(height).fill(null).map(() =&gt; ({
        row: createRow(length)
    }));
}
</code></pre>

<p>Explanation: </p>

<ul>
<li><code>Array(height)</code> creates an empty array of fixed size <code>height</code> - we want to create <code>height</code> rows.</li>
<li><code>.fill(null)</code> is used to fill the array with any values, so you can map these values to new ones. Any other value can be used instead of <code>null</code>. Mapping empty array would return us new empty array.</li>
<li><code>.map(() =&gt; createRow(rowLength))</code> creates new array in which each value is a new row. <code>() =&gt; createRow(rowLength)</code> gets called for each value in the array, so you can be sure that you will have new row for each value.</li>
</ul>

<p>I also renamed <code>x</code> to <code>length</code> and <code>y</code> to <code>height</code> - these names are more descriptive, which I think can help new readers with figuring out the purpose of these variables.</p>

<p>I will write it here, because I don't have enough reputation to comment:
you could also use arrays for rows instead of objects that have one property called "row".
If you have only one value then maybe you don't need to wrap it in an object? - I guess I would need more details about the problem to say that.</p>
    </div>