<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Given that you seem to be experimenting, it's hard to say if the <em>pattern</em> you've employed is correct since there really isn't context. But this is largely a valid use of channels. There is one problem though: you have a race condition. More on that in a bit.</p>

<p>Using <code>sync.WaitGroup</code> is the correct approach here. Ideally, you should thread this through <em>all</em> goroutines that you spawn. In this case, because of the data dependency through <code>ch</code> (namely that there are exactly <code>n</code> <code>process</code>es and <code>n</code> <code>consume</code>rs and each sends/receives one <code>int</code>), we know that if all of the <code>consume</code>rs finish (and call the deferred <code>wg.Done()</code>) there can't be any <code>process</code>es running. But often, for larger projects such a dependency may not be as obvious, and may change if you alter other parts of your codebase. So, in any nontrivial application where all channel usages aren't limited to a small area of the code, you probably want to thread the <code>sync.WaitGroup</code> through all goroutines spawned.</p>

<p>A note on blocking: you made a vague statement about channel blocking. To clarify, <code>make(chan int, 5)</code> produces a buffered channel which only blocks if more than 5 <code>int</code>s have been sent but not received. <code>make(chan int)</code> produces a channel that blocks until a consumer receives the value. In your example, both of these will work.</p>

<p><strong>The race condition:</strong></p>

<p>Doing <code>wg.Add(1)</code> <strong>inside</strong> the goroutine is racy. Why? Because once you do <code>go consume(ch, &amp;wg)</code> you can't say for sure that the next thing that will happen is the <code>wg.Add(1)</code>. In fact, you can't even be sure that that will run at all (we could reach the end of <code>main()</code>). In a degenerate case, if you reached the end of <code>main()</code> and <code>wg.Wait()</code> was called before a <code>wg.Add(1)</code> from a goroutine, the counter in the <code>Wait()</code> wouldn't account for this goroutine. You need to do the <code>wg.Add(1)</code> <em>before</em> you spawn the goroutine:</p>

<pre><code>wg.Add(1)
go consume(ch, &amp;wg)
</code></pre>

<p>Since you know there will be <code>n</code> goroutines spawned, you could also do <code>wg.Add(n)</code> <em>before</em> the loop, but if that loop can exit prematurely, it is more wise (and clear) to do the <code>wg.Add(1)</code> before each <code>go consume()</code>.</p>

<p>You should also probably <code>defer wg.Wait()</code> right after <code>var wg sync.WaitGroup</code> in <code>main()</code>. The point of <code>defer</code> is to keep resource allocation and cleanup close so you don't forget it!</p>

<p>Also, you should get in the habit of using directional channels. They give you some safety that you don't accidentally receive from producers or send from consumers. They also quickly communicate to readers of your code what each function does at a high level.</p>

<pre><code>func consume(ch &lt;-chan int, wg *sync.WaitGroup) {
    // ...
}

func process(i int, ch chan&lt;- int) {
    // ...
}
</code></pre>
    </div>