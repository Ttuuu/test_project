<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>(Quick note: please do not use <code>list</code> as a variable name, as it's also the name of a type. I'm going to use <code>list_</code> instead)</p>

<p>Depending on the interpretation, it could be that they want you to iterate over the list just once.</p>

<p>The statement "v in list" potentially iterates over the full list, which means it's yet another pass.</p>

<p>If you know nothing about the list, except that they are numbers, one approach would be to store the values seen so far in a set, which has a more efficient "in".</p>

<pre><code>def is_sum_of_2nums_in_list_k(list_, k):
    seen = set()
    for i in list_:
        if k - i in seen:
            return True
        seen.add(i)
    return False
</code></pre>

<p>This works the same as your initial solution, but for each new number, it only checks if the sum of that number and an <em>earlier</em> number add up <code>k</code>.</p>

<p>As a downside: storage needs to be allocated for the set <code>seen</code>, so this does not work with constant memory.</p>

<p>If on the other hand, we have also been told that the list was ordered, we can go for a different approach</p>

<pre><code>def is_sum_of_2nums_in_list_k(list_, k):
    # Assumption: `list_` is ordered.
    left, right = 0, len(list_) - 1
    while left &lt; right:
        total = list_[left] + list_[right]

        if total == k:
            return True

        if total &lt; k:
            left += 1
        if total &gt; k:
            right -= 1
    return  False
</code></pre>

<p>This is a bit more complicated, but requires constant extra storage.</p>
    </div>