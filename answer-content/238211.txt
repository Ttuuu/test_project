<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, good first question!
The first obvious improvement is to factor out the code that generates the primes</p>

<pre><code>def prime_sieve(n):
    grid = [None for _ in range(n+1)]
    i = 2
    while i &lt; n+1:
        if grid[i] is None:
            grid[i] = True
            for p in range(i*i, n+1, i):
                grid[p] = False
        else:
            i += 1
    return (index for index, b in enumerate(grid) if b)
</code></pre>

<p>Note that <code>for p in range(i*i, n+1, i):</code> starts later than the <code>for p in range(2*i, n+1, i):</code> which you used. This is safe because anything less than the current prime squared will have already been crossed out. This difference alone makes the code about 2x faster for <code>n = 4000000</code>.</p>

<p>By separating the sieve, it makes things like profiling much easier, and you can see that most of the time this method takes is still in the sieve. Using some tricks from <a href="https://codereview.stackexchange.com/questions/194756/find-primes-using-sieve-of-eratosthenes-with-python">Find primes using Sieve of Eratosthenes with Python</a>, we can focus our efforts on speeding this part up.</p>

<pre><code>def prime_sieve(n):
    is_prime = [False] * 2 + [True] * (n - 1) 
    for i in range(int(n**0.5 + 1.5)): # stop at ``sqrt(limit)``
        if is_prime[i]:
            is_prime[i*i::i] = [False] * ((n - i*i)//i + 1)
    return (i for i, prime in enumerate(is_prime) if prime)
</code></pre>

<p>This prime sieve works pretty similarly, but is shorter, and about 4x faster. If that isn't enough, numpy and <a href="https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n/3035188#3035188">https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n/3035188#3035188</a> can come to the rescue with this beauty which is another 12x faster.</p>

<pre><code>import numpy
def prime_sieve(n):
    """ Input n&gt;=6, Returns a array of primes, 2 &lt;= p &lt; n """
    sieve = numpy.ones(n//3 + (n%6==2), dtype=numpy.bool)
    for i in range(1,int(n**0.5)//3+1):
        if sieve[i]:
            k=3*i+1|1
            sieve[       k*k//3     ::2*k] = False
            sieve[k*(k-2*(i&amp;1)+4)//3::2*k] = False
    return numpy.r_[2,3,((3*numpy.nonzero(sieve)[0][1:]+1)|1)]
</code></pre>

<p>At this point, further speedup would need to come from fancy number theory, but I'll leave that for someone else.</p>
    </div>