<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>It's about accessing <code>(&amp;ch)[1]</code>. I think it should be legal, but I am not sure.</p>
</blockquote>

<p>Yes, it is legal as long as you have null terminated string, i.e. the <code>size</code>-th character of the string is the null character. The reason is that <code>std::string::end()</code> returns an iterator that is one short of the element that holds the terminating null character when the string object does have a terminating null character. Hence, <code>(&amp;ch)[1]</code> will not access anything beyond the terminating null character. You can verify that by printing the value of <code>&amp;ch</code> as a debugging guide.</p>

<p>Here's a updated version of your posted code that prints additional debugging info.</p>

<pre><code>#include &lt;string&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;cctype&gt;

std::string remove_excessive_ws(std::string const &amp;str)
{
   std::string result{ str };

   std::for_each(std::begin(result), std::end(result),
                 [](std::string::value_type const &amp;ch)
                 {
                    std::cout &lt;&lt; "pointer value: " &lt;&lt; reinterpret_cast&lt;void const*&gt;(&amp;ch) &lt;&lt; std::endl;
                 });

   std::cout &lt;&lt; "==========================\n";

   auto end{ std::remove_if(std::begin(result), std::end(result),
                            [](std::string::value_type const &amp;ch)
                            {
                               std::cout &lt;&lt; "pointer value: " &lt;&lt; reinterpret_cast&lt;void const*&gt;(&amp;ch) &lt;&lt; std::endl;
                               return std::isspace(static_cast&lt;unsigned&gt;(ch)) &amp;&amp;
                                      (std::isspace(static_cast&lt;unsigned&gt;((&amp;ch)[1])) || (&amp;ch)[1] == '\0');
                            })
   };

   result.erase(end, std::end(result));
   return result;
}

int main()
{
   char const *foo{ "Hello   World!   "};
   std::string res = remove_excessive_ws(foo);
   std::cout &lt;&lt; "\n\"" &lt;&lt; res &lt;&lt; "\"\n";
}
</code></pre>

<p>Here's its output.</p>

<pre class="lang-none prettyprint-override"><code>pointer value: 0x600012be8
pointer value: 0x600012be9
pointer value: 0x600012bea
pointer value: 0x600012beb
pointer value: 0x600012bec
pointer value: 0x600012bed
pointer value: 0x600012bee
pointer value: 0x600012bef
pointer value: 0x600012bf0
pointer value: 0x600012bf1
pointer value: 0x600012bf2
pointer value: 0x600012bf3
pointer value: 0x600012bf4
pointer value: 0x600012bf5
pointer value: 0x600012bf6
pointer value: 0x600012bf7
pointer value: 0x600012bf8
==========================
pointer value: 0x600012be8
pointer value: 0x600012be9
pointer value: 0x600012bea
pointer value: 0x600012beb
pointer value: 0x600012bec
pointer value: 0x600012bed
pointer value: 0x600012bee
pointer value: 0x600012bef
pointer value: 0x600012bf0
pointer value: 0x600012bf1
pointer value: 0x600012bf2
pointer value: 0x600012bf3
pointer value: 0x600012bf4
pointer value: 0x600012bf5
pointer value: 0x600012bf6
pointer value: 0x600012bf7
pointer value: 0x600012bf8

"Hello World!"
</code></pre>

<hr>

<h3>Response to OP's comment</h3>

<p><code>std::string::end()</code> returns <code>std::string::iterator()</code>, which is a <em>LegacyRandomAccessIterator</em>. Please see the  <a href="https://en.cppreference.com/w/cpp/string/basic_string#Member_types" rel="nofollow noreferrer"><strong>Member types</strong> of <code>std::string</code></a>.</p>

<p><a href="https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator" rel="nofollow noreferrer"><em>LegacyRandomAccessIterator</em></a> satisfies the requirements of <em>LegacyBidirectionalIterator</em>.</p>

<p><a href="https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator" rel="nofollow noreferrer"><em>LegacyBidirectionalIterator</em></a> satisfies the requirments of <em>LegacyForwardIterator</em>.</p>

<p><a href="https://en.cppreference.com/w/cpp/named_req/ForwardIterator" rel="nofollow noreferrer"><em>ForwardIterator</em></a> satisfies the requirements of <em>LegacyInputIterator</em>.</p>

<p>When a <a href="https://en.cppreference.com/w/cpp/named_req/InputIterator" rel="nofollow noreferrer"><em>LegacyInputIterator</em></a> is dereferenced, it evaluates to a <code>reference</code>. Now, you have to go back to <a href="https://en.cppreference.com/w/cpp/string/basic_string#Member_types" rel="nofollow noreferrer"><code>std::string</code></a> to see what that means. As you can expect, it is a reference and not a copy.</p>

<p>You can also use a non-<code>const</code> reference to be doubly sure that you get a reference and not a copy.</p>

<pre><code>auto end{ std::remove_if(std::begin(result), std::end(result),
                         [](std::string::value_type &amp;ch)
                         {
                            std::cout &lt;&lt; "pointer value: " &lt;&lt; reinterpret_cast&lt;void*&gt;(&amp;ch) &lt;&lt; std::endl;
                            return std::isspace(static_cast&lt;unsigned&gt;(ch)) &amp;&amp;
                                   (std::isspace(static_cast&lt;unsigned&gt;((&amp;ch)[1])) || (&amp;ch)[1] == '\0');
                         })
</code></pre>
    </div>