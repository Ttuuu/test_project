<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Code structure</strong></p>

<p>This problem has three sub-parts, first Check if binary string is valid, second parse integral part and third parse fractional part. So a possible logical structure of code should be</p>

<pre><code>float ConvertToDecimal(const std::string &amp; inputBinaryString)
{
    int dotIndex;
    if (!FValidBinaryString(inputBinaryString, dotIndex))
        throw std::exception("Error: ConvertToDecimal Invalid binary string");

    int integralPart = ParseIntegralPart(inputBinaryString, dotIndex);
    float fractionalPart = ParseFractionalPart(inputBinaryString, dotIndex);

    return integralPart + fractionPart;
}
</code></pre>

<p>Based on this logical breaking, three functions should be implemented</p>

<pre><code>bool FValidBinaryString(const std::string&amp; input, int&amp; dotIndex) //Out param dotIndex
int ParseIntegralPart(const std::string&amp; input, int dotIndex)
float ParseFractionalPart(const std::string&amp; input, int dotIndex)
</code></pre>

<p>Your current code also does similar steps but in monolithic way.</p>

<p><strong>C++ specific comments</strong></p>

<ol>
<li>Avoid "using std namespace". One of the obvious reason is avoiding cases where same name is coming from two different namespaces and creates error and confusion. Common utility functions like min, max are defined in many namespaces. Using full name makes code more readable. If name is getting too long, use aliases.</li>
<li>Variable and function names are very very important. Be consistent in naming ans use words which convey meaning. One of the very basic rule to start can be "Functions should start with verbs and variables as noun"</li>
<li>Function which parses binary string can not modify input string. So it makes sense to pass by const reference. Passing by pointer is not good idea here. Two reasons, Callee function needs to ensure it is not de-referencing an null pointer, so a null check will be needed, second callee can inadvertently modify input string.</li>
<li>No need to use pow function in inside loop. You need to just keep doubling (or halving) the place value. So multiplication (or division) by 2 should serve the purpose.</li>
<li>Use ASCII value of '1', '0', '.' in comparison.</li>
</ol>
    </div>