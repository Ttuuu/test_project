<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The other two answers have done a good job.<br>
I will present a slightly alternative solution.</p>

<p>One of the slowest things about strings is duplicating them. So where possible it is nice to re-use the same space (i.e. do it inplace). You can then use wrapper functions to do copying when you need to:</p>

<pre><code>// Lets start with a generic way of reversing words in any container.
template&lt;typename I&gt;
void reverse_words(I begin, I end)
{
    // Credit to Toby Speight
    // Stolen basically verbatim.
    auto is_space = [](unsigned char c) { return std::isspace(c); };

    auto word_start = begin;
    while ((word_start = std::find_if_not(word_start, end, is_space)) != end) {
        auto word_end = std::find_if(word_start, end, is_space);
        std::reverse(word_start, word_end);
        word_start = word_end;
    }
}

// Reverse in place for any container.
template&lt;typename C&gt;
void reverse_words_in_container(C&amp; container)
{
    reverse_words(std::begin(container), std::end(container));
}

// Reverse a container into another container (usually a string).
template&lt;typename C, typename S = std::string&gt;
S reverse_words_in_container(C const&amp; container)
{
    S result(std::begin(container), std::end(container))
    reverse_words_in_container(result);
    return result;
}
</code></pre>

<p>Then just for fun. As it is an interesting code interview question. Reverse the words in a string:</p>

<pre><code>std::string reverseWordsInAString(std::string const&amp; value)
{
    // Notice we reverse the whole string here.
    result(std::rbegin(container), std::rend(container))

    // So now the whole string is reversed.
    // We now go through and reverse each word so it is
    // the correct way around.
    reverse_words_in_container(result);

    return result;
}
</code></pre>
    </div>