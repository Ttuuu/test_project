<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The whole <code>if</code>..<code>else</code>..<code>if</code>..<code>else</code> inside the first loop is senseless because each branch does exactly the same.  </p>

<hr>

<p>Using <code>Split('|')</code> and combining the resulting array with one space <code>" "</code> is the same like replacing <code>|</code> by a space.  </p>

<hr>

<p>The <code>Regex regx = new Regex(sentenceSeparator);</code> is superflous because you don't use <code>regex</code> at all.  </p>

<hr>

<p>The loop  </p>

<pre><code>for (int i = 1; i &lt; matches.Count; ++i)
{
    phrase = phrase
        .Replace(matches[i].Value,
        Environment.NewLine + matches[i].Value);
}  
</code></pre>

<p>is superflous because you aren't using <code>phrase</code> afterwards.  </p>

<hr>

<p>As it seems (untested) you can use <code>Zip()</code> with a <code>MatchCollection</code> if you use .NET Core 3.0.100 but to make your code runnable without .NET Core you should change  </p>

<pre><code>Dictionary&lt;Match, string&gt; dic = matches.Zip(sentences, (x, y)
             =&gt; new { Key = x, Value = y }).ToDictionary(x =&gt; x.Key, y =&gt; y.Value);  
</code></pre>

<p>to  </p>

<pre><code>Dictionary&lt;Match, string&gt; dic = matches.Cast&lt;Match&gt;().Zip(sentences, (x, y)
             =&gt; new { Key = x, Value = y }).ToDictionary(x =&gt; x.Key, y =&gt; y.Value);
</code></pre>

<hr>

<p>It comes for sure from copying the code (which seems to be posted using <code>Shift + Enter</code> for <code>phrase</code>) from this question to the IDE....if you inspect the result of <code>dict</code> you will see that from the second item on the <code>Value</code> is prepended by a <code>\n</code>. This can be prevented by using <code>TrimStart('\n')</code> on <code>y</code> at <code>new { Key = x, Value = y }</code>.  </p>

<hr>

<p>Implementing the mentioned points will lead to  </p>

<pre><code>   static void Main(string[] args)
    {
        string phrase = @"MHD001|LOCCOD|GRCACS|20191117|133601|CB|trx_grcacs_tsk_20191117133601498|TSK001|GLS|GRCACS|59144|59144|2|TU|93000161357|TRACE|INF|DE 800|please send us the completely address information-thanks|68481|20191117|133555|TSA001|X|TSI001|3655|please send us the completely address information-thanks|66510|TSI001|5637|80337|61335|TSI001|5841|DE|61313|MTR001|5|";

        string[] sentences = phrase.Replace('|',' ').Split('\r');
        string sentencePattern = @"\b[A-Z]{3}\d{3}\b";

        MatchCollection matches = Regex.
            Matches(phrase, sentencePattern,
            RegexOptions.Compiled |
            RegexOptions.CultureInvariant);

        Dictionary&lt;Match, string&gt; dic = matches.Cast&lt;Match&gt;().Zip(sentences, (x, y)
             =&gt; new { Key = x, Value = y.TrimStart('\n') }).ToDictionary(x =&gt; x.Key, y =&gt; y.Value);

        foreach (KeyValuePair&lt;Match, string&gt; kvp in dic)
        {
            Console.WriteLine("Key = {0}" + Environment.NewLine + "Value = {1}", kvp.Key, kvp.Value);
        }
    }
</code></pre>
    </div>