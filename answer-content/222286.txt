<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>You don't need to manually call <code>f.close()</code>, that's what the <code>with</code> is for.</li>
<li>It looks like <code>line = line.replace(line, "".join(dummy))</code> can just be <code>line = "".join(dummy)</code>.</li>
<li><p>It's clearer to define <code>dummy</code> in the if statement:</p>

<ul>
<li>This means that it's in the correct scope, meaning we don't have to look out for it being used elsewhere.</li>
<li>It also means that you can remove <code>dummy.clear()</code>.</li>
</ul></li>
<li>Personally I would merge your two <code>if</code> statements together, to reduce the arrow anti-pattern.</li>
<li>It looks like <code>dummy</code> and your <code>for</code> loop can be replaced with <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="noreferrer"><code>str.maketrans</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="noreferrer"><code>str.translate</code></a>.</li>
</ul>

<p><sub>untested</sub></p>

<pre><code>file_name = "test.v"
test = ".test"
tezt = ".tezt"
trans_table = str.maketrans({'(': '(/*', ')': '*/)'})

with open(file_name, "r+") as f:
    lines = f.readlines()
    f.seek(0)
    f.truncate()
    for line in lines:
        if ((test in line or tezt in line)
            and line[line.index('(') + 1] != '/'
        ):
            line = line.translate(trans_table)
        f.write(line)
</code></pre>
    </div>