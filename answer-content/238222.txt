<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>There are only two versions of the <code>main</code> function:</p>

<pre><code>/* 1 */
int main(int argc, char *argv[]) { ... }

/* 2 */
int main(void) { ... }
</code></pre>

<p>Note the <code>void</code> keyword in the second version. In C, if the function has no parameters it should be declared as</p>

<pre><code> &lt;type&gt; f(void)
</code></pre>

<p>Please, take a look at <a href="https://stackoverflow.com/a/29326312/8086115">this</a> SO answer for details.</p></li>
<li><p>Do not write one-line code:</p>

<blockquote>
<pre><code>for(int i = 0; i &lt; counter; i++) if(strcmp(store_arr[i],arr_to_print)==0) return 1;
</code></pre>
</blockquote>

<p>I'd rewrite it this way:</p>

<pre><code>for (int i = 0; i &lt; count; i++)
    if (strcmp(store_arr[i], arr_to_print) == 0)
        return 1;
</code></pre></li>
<li><p>Do not use <code>int</code> as type for array indexing. It is not guaranteed  that <code>int</code> can hold any possible index value of an array object. The only type that can hold any index of an array object is <code>size_t</code>. See <a href="https://stackoverflow.com/a/2550799/8086115">this</a> SO answer for details.</p></li>
<li><p>I'd replace</p>

<pre><code>printf("\n");
</code></pre>

<p>with</p>

<pre><code>putchar('\n');
</code></pre></li>
<li><p>Do not cast the result of <code>malloc</code> call. Really, you have to do it in C++, but not in C. See <a href="https://stackoverflow.com/questions/605845/do-i-cast-the-result-of-malloc">this</a> SO question for details.</p></li>
<li><p>Do not repeat yourself. Consider this line:</p>

<blockquote>
<pre><code>int* n_arr = malloc(length * sizeof(int));
</code></pre>
</blockquote>

<p>You declare <code>n_arr</code> as a pointer to <code>int</code>. It would be better to rewrite this line in this way:</p>

<pre><code>int *n_arr = malloc(length * sizeof *n_arr);
</code></pre>

<p>In this case you don't have to change the expression of the <code>sizeof</code> operator if you change <code>n_arr</code> type. It is very common C idiom.</p></li>
<li><p>Do not computer factorial using recursion. It is <em>really slow</em>. Usually, you can just create the factorial table and hardcode it:</p>

<pre><code>static const unsigned long long factorial_table[] = {
    1,
    2,
    6,
    24,
    120,
    720,
    ...
};
</code></pre></li>
<li><p>In this line:</p>

<blockquote>
<pre><code>char* src_arr = "ABCDE";
</code></pre>
</blockquote>

<p>you create a pointer to a string literal. It would be better to create just a <em>static array</em>:</p>

<pre><code>static src_arr[] = "ABCDE";
</code></pre></li>
<li><p>And you can make it <code>const</code> since it never changes:</p>

<pre><code>static const src_arr[] = "ABCDE";
</code></pre></li>
</ol>
    </div>