<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have a helper function to reduce the tedious and error-prone <code>_from_string()</code> functions, and to slightly improve their performance.  We transform the enum and its <code>to_string()</code> to give us a nice map:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;map&gt;
template&lt;typename T, typename R&gt;
std::map&lt;R,T&gt; create_reverse_map(R(*forward_func)(T), T first, T last)
{
    using int_t = std::underlying_type_t&lt;T&gt;;
    std::map&lt;R,T&gt; m;
    auto insert = [forward_func,&amp;m](int i) {
        auto t = T(i);
        auto r = forward_func(t);
        auto p = m.insert({r, t});
        if (!p.second) {
            std::cerr &lt;&lt; "Duplicate ignored:" &lt;&lt; int_t(p.first-&gt;second) &lt;&lt; "&lt;=" &lt;&lt; r &lt;&lt; "=&gt;" &lt;&lt; i &lt;&lt; '\n';
        }
    };

    for (int i = int_t(first);  i &lt;= int_t(last);  ++i) {
            insert(i);
    }
    return m;
}
</code></pre>

<p>With this, we reduce the conversions from string to simply:</p>

<pre><code>Method method_from_string(const std::string&amp; method)
{
    std::string (*f)(Method) = to_string;
    static auto const m = create_reverse_map(f, Method::GET, Method::PATCH);
    auto it = m.find(method);
    return it == m.end() ? Method::GET : it-&gt;second;
}

Version version_from_string(const std::string&amp; version)
{
    std::string (*f)(Version) = to_string;
    static auto const m = create_reverse_map(f, Version::HTTP_1_0, Version::HTTP_2_0);
    auto it = m.find(version);
    return it == m.end() ? Version::HTTP_1_0 : it-&gt;second;
}
</code></pre>

<p>The variable <code>f</code> is only needed because the name <code>to_string</code> is overloaded - if we give them distinct names (e.g. <code>to_string&lt;T&gt;</code>), then we can use those directly in the call to <code>create_reverse_map</code>.</p>

<p>It's probably possible to make a template version of <code>from_string</code> if we're willing to provide traits type for the enums, containing <code>first</code>, <code>last</code> and <code>to_string</code> members.</p>

<p>Unfortunately, it's no longer <code>noexcept</code>, because the static initializer inserts into the map.  If that's important, move <code>m</code> to a (better named) variable at global scope.</p>
    </div>