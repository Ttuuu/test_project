<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The trick is to search for <code>j = i / v</code> instead of <code>j = i</code>:</p>

<p>that means to search for <code>i and i * v and i * v * v</code>:</p>

<pre><code>static bool ProductAndFactor(int i, int v)
{
  if ($"{i}".Length != $"{i * v}".Length ||
      $"{i}".Length != $"{i * v * v}".Length)
    return false;

  Dictionary&lt;char, int&gt; oChars = GetValueChars(i);
  Dictionary&lt;char, int&gt; dChars = GetValueChars(i * v);
  Dictionary&lt;char, int&gt; mChars = GetValueChars(i * v * v);

  foreach (char c in oChars.Keys)
  {
    if (!dChars.ContainsKey(c)) return false;
    else if (dChars[c] != oChars[c]) return false;
    else if (!mChars.ContainsKey(c)) return false;
    else if (mChars[c] != oChars[c]) return false;
  }

  return true;
}
</code></pre>

<p>or in other words you search for the smallest value to find rather than the middle value.</p>

<p>Notice that I've moved the length tests above the Dictionary stuff, because there is no need for that if the lengths differs.</p>

<hr>

<pre><code>    int variant = 3;
    for (int i = 1; i &lt; int.MaxValue; i++)
    {
      if (ProductAndFactor(i, variant))
      {
        Console.WriteLine($"{i} =&gt; {i * variant} =&gt; {i * variant * variant}");
        break;
      }
    }
</code></pre>

<hr>

<p>Another version could be:</p>

<pre><code>static bool ProductAndFactor(int i, int v)
{
  int iv = i * v;
  int ivv = i * v * v;

  int[] ai = new int[10];
  int[] aiv = new int[10];
  int[] aivv = new int[10];

  while (i &gt; 0)
  {
    ai[i % 10]++;
    aiv[iv % 10]++;
    aivv[ivv % 10]++;

    i /= 10;
    iv /= 10;
    ivv /= 10;
  }

  for (int j = 0; j &lt; 10; j++)
  {
    if (ai[j] != aiv[j] || ai[j] != aivv[j])
      return false;
  }

  return iv == 0 &amp;&amp; ivv == 0;
}
</code></pre>
    </div>