<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are a number of things that may help you improve your code.</p>

<h2>Provide complete code to reviewers</h2>

<p>This is not so much a change to the code as a change in how you present it to other people.  Without the full context of the code and an example of how to use it, it takes more effort for other people to understand your code.  This affects not only code reviews, but also maintenance of the code in the future, by you or by others.   In this case, for example, there are no <code>#include</code> directives anywhere.</p>

<h2>Use the appropriate <code>#include</code>s</h2>

<p>In order to compile and link, the <code>main</code> code requires the following two lines:</p>

<pre><code>#include "Rectangle.h"
#incldue &lt;iostream&gt;
</code></pre>

<p>It was not difficult to infer, but see the point above.</p>

<h2>Don't write getters and setters for every class</h2>

<p>C++ isn't Java and writing getter and setter functions for every C++ class is not good style. Instead, move setter functionality into constructors and think very carefully about whether a getter is needed at all. In this code, getters for <code>Shape</code> are ever used, which emphasizes why they probably shouldn't be written in the first place. See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rh-get" rel="nofollow noreferrer">C.131</a> for more details.</p>

<h2>Rethink the class design</h2>

<p>A class is useful because it allows us to encapsulate data and functions and assure that any necessary constrains (called <em>invariants</em> in computer science) are always enforced.  For example, we might specify a shape for which the area must always be at least 7.  However this shape is not that, so there's not much point in making the <code>width</code> and <code>height</code> as <code>protected</code> or <code>private</code> here.  It makes even less sense in this particular case because the setters and getters mentioned above mean that any other piece of code can arbitrarily modify those values anyway.</p>

<h2>Don't use <code>std::endl</code> if you don't really need it</h2>

<p>The difference betweeen <code>std::endl</code> and <code>'\n'</code> is that <code>'\n'</code> just emits a newline character, while <code>std::endl</code> actually flushes the stream.  This can be time-consuming in a program with a lot of I/O and is rarely actually needed.  It's best to <em>only</em> use <code>std::endl</code> when you have some good reason to flush the stream and it's not very often needed for simple programs such as this one.  Avoiding the habit of using <code>std::endl</code> when <code>'\n'</code> will do will pay dividends in the future as you write more complex programs with more I/O and where performance needs to be maximized. See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rio-endl" rel="nofollow noreferrer">Sl.io.50</a> for more details.</p>

<h2>Think carefully about signed vs. unsigned integers</h2>

<p>What would it mean if a rectangle had a negative number for its width or height?  If you don't have a good answer for that question, it might be better to have those data members be <code>unsigned</code> instead of <code>int</code>.</p>

<h2>Separate input, output and calculation</h2>

<p>To answer your main question, to the degree practical it's usually good practice to separate input, output and calculation for programs like this.  By putting them in separate functions, it isolates the particular I/O for your platform (which is likely to be unique to that platform or operating system) from the logic of the objects (which does not depend on the underlying OS).   So having both the input and display of the rectangle in <code>main</code> rather than incorporated into the <code>Rectangle</code> object is probably generally the better choice.  However, see the next point.</p>

<h2>Decompose your program into functions</h2>

<p>All of the logic here is in <code>main</code> except for the relatively trivial calculation of area.  I'd suggest instead writing functions so that your <code>main</code> could look like this:</p>

<pre><code>int main() {
    int width = get_prompted_int("Insert the width of the rectangle: ");
    int height = get_prompted_int("Insert the height of the rectangle: ");
    Rectangle rect1(width, height);
    std::cout &lt;&lt; "The area of the rectangle is: " 
              &lt;&lt; rect1.getArea() 
              &lt;&lt; "\nDrawing:\n";
    draw(std::cout, rect1);
}
</code></pre>
    </div>