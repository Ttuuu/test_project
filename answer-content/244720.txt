<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Function naming</h2>
<p>As @OnurArÄ± suggested, your naming needs work. In particular, this:</p>
<pre><code>def fun():  
</code></pre>
<p>is probably worse than having no function at all, so it's good that you attempted to split it up.</p>
<p>Some nuance to the other answer: yes, <code>mutation_adder</code> should be <code>add_mutation</code> (imperative-tense verb) as a function. Where you <em>would</em> see <code>MutationAdder</code> (noun) is if it's a class name.</p>
<h2>List formation</h2>
<pre><code>mutation_list1=['133R']
mutation_list2=['133A']
if mutation_list1==() or mutation_list2==():
    for amino_acids in sparta_formater():
        sparta_file_list2.append(amino_acids)
</code></pre>
<p>doesn't make a huge amount of sense.  Neither of those conditions will ever be true, because you just populated the lists manually. Even if the lists "might" be empty, you should be comparing them to empty lists <code>[]</code> instead of empty tuples <code>()</code>.</p>
<p>Further, you don't need that <code>for</code>. Since <code>sparta_formater</code> returns an iterable, you could simply</p>
<pre><code>sparta_file_list2.extend(sparta_formater())
</code></pre>
<p>Finally, don't call variables <code>list1</code> and <code>list2</code>. The numbers hide the actual intent of the variable, and it's not really even useful to call something a <code>list</code> - it's more informative to add a type hint and pluralize the variable name, i.e.</p>
<pre><code>mutations: List[str] = ['133R']
</code></pre>
<h2>Regexes</h2>
<p>This:</p>
<pre><code>    compiler=re.compile(searcher.group(0))
</code></pre>
<p>is not a compiler. <code>re.compile</code>, the function, is technically the compiler, but what you get out of it is a regular expression object. Don't call <code>compile</code> within a loop - the whole purpose that <code>compile</code> exists is to pay the cost of compilation once up front, outside of the loop, so that using it within the loop is faster.</p>
    </div>