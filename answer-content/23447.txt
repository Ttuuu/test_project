<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can save quite a bit time on your prime generation. What you should keep in mind is that a prime is a number which is no multiple of a prime itself; all other numbers are.</p>

<p>So in your <code>isPrime</code> function you can just go through your primes list and check if each prime is a divisor of the number. If not, then it is a prime itself. Of course you would need to make sure that you fill your primes list enough first.</p>

<p>As the most basic idea, you only need to check until <code>sqrt(n)</code>, so you only generate numbers this far. And you can also just skip every even number directly. You could also make similar assumptions for numbers dividable by 3 etc., but the even/uneven is the simplest one and enough to get fast results for not too big numbers.</p>

<p>So a prime generation algorithm, for possible prime divisors up to <code>n</code>, could look like this:</p>

<pre><code>primes = [2]
for i in range(3, int(math.sqrt(n)), 2):
    isPrime = not any(i % p == 0 for p in primes)
    if isPrime:
        primes.append(i)
</code></pre>

<p>Then to get the prime factors of <code>n</code>, you just need to check those computed primes:</p>

<pre><code>primeFactors = []
m = n
for p in primes:
    while m % p == 0:
        m = m / p
        primeFactors.append(p)
    if m == 0:
        break

print('The prime factorization of `{0}` is: {1}'.format(n, '×'.join(map(str,primeFactors))))
</code></pre>

<p>For the euler problem 3 with <code>n = 317584931803</code>, this would produce the following output:</p>

<blockquote>
  <p>The prime factorization of <code>317584931803</code> is: 67×829×1459×3919</p>
</blockquote>
    </div>