<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This code is <em>really</em> excessively confusing. It seems like basically you're just doing this:</p>
<pre><code>template&lt;class T&gt;
std::string get_runtime_info(const T&amp; t) {
    if constexpr (std::is_pointer_v&lt;T&gt;) {
        if (t == nullptr) {
            using U = decltype(*t);
            return std::string("null pointer to ") + typeid(U).name();
        } else {
            return "pointer to " + get_runtime_info(*t);
        }
    } else {
        return typeid(t).name();
    }
}
</code></pre>
<p>but you've surrounded this logic with so much OOP cruft (eight different data members, of a "class" with no public member functions?!) and template metaprogramming (<code>is_specialization_v</code>) that it's hard to tell what's going on.</p>
<hr>
<p>You've declared your copy constructor <code>noexcept</code>, but it has to copy a bunch of strings and a vector; it is <em>not</em> noexcept. Don't lie to the compiler!</p>
<p>Vice versa, your default constructor is probably noexcept, but since it's explicitly defaulted, I'm pretty sure you don't have to say it's <code>noexcept</code> â€” the compiler will figure that out on its own. <a href="https://godbolt.org/z/F_22ct" rel="nofollow noreferrer">Godbolt agrees.</a></p>
<hr>
<p>If you're going to use member functions, make sure you const-qualify the appropriate ones (e.g. <code>get_message()</code> should be const-qualified).</p>
<hr>
<p>At one point you write <code>std::is_pointer_v&lt;T&gt; &amp;&amp; !is_smart_ptr_v&lt;T&gt;</code>, which is redundant; you should just write <code>std::is_pointer_v&lt;T&gt;</code>. Likewise, <code>is_smart_ptr_v&lt;T&gt; &amp;&amp; !std::is_pointer_v&lt;T&gt;</code> should just be <code>is_smart_ptr_v&lt;T&gt;</code>.</p>
<p>Since you're doing C++20, you <em>could</em> use constrained templates instead of <code>enable_if</code>:</p>
<pre><code>template&lt;class T&gt; requires std::is_pointer_v&lt;T&gt;
void exec(const T&amp; val) {
    T bak = val;
    type_name_runtime(bak);
}

template&lt;class T&gt; requires is_smart_ptr_v&lt;T&gt;
void exec(const T&amp; val) {
    exec(val.get());
}

template&lt;class T&gt;
void exec(const T&amp; val) {
    return;
}
</code></pre>
<p>But it's much better to use a plain old C++17 <code>if constexpr</code>, as in my "simple" rewrite up top:</p>
<pre><code>template&lt;class T&gt;
void exec(const T&amp; val) {
    if constexpr (std::is_pointer_v&lt;T&gt;) {
        T bak = val;
        type_name_runtime(bak);
    } else if constexpr (is_smart_ptr_v&lt;T&gt;) {
        exec(val.get());
    }
}
</code></pre>
<hr>
<p>The line <code>T bak = val;</code> is pointless; C++ copies by default. Since <code>type_name_runtime</code> takes by value (i.e., by copy), therefore there is no observable difference between</p>
<pre><code>        T bak = val;
        type_name_runtime(bak);
</code></pre>
<p>and</p>
<pre><code>        type_name_runtime(val);
</code></pre>
    </div>