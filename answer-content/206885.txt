<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's nothing outstandingly wrong, there are some minor points that can be improved.</p>

<p>The main concern that I have is the amount of logic happening inside the <code>ProductRoutes</code> file. Your invocation of the AWS library and the <code>validate</code> &amp; <code>saveImage</code> functions can be stored inside reusable files that can be referenced anywhere.</p>

<p>I normally would store the invocation of the AWS library inside the index file to ensure the connection starts alongside the Express server start.</p>

<p>It also seems to me that there are some features afforded by modern (ES6) javascript that you aren't consistently using, like your request promise wrapper inside <code>saveImage</code>.</p>

<hr>

<p>Inside the <code>validate</code> function, the final return statement is unreachable as all other cases will be caught in the default statement:</p>

<blockquote>
<pre><code>function validate(value, type) {
  switch (type) {
    &lt;...&gt;
    default:
      return value &amp;&amp; validator.isEmpty(value, { ignore_whitespace: true });
  }
  return value == null || value.length === 0;
}
</code></pre>
</blockquote>

<hr>

<blockquote>
<pre><code>return new Promise(function(resolve, reject) {
  request.get(url).on("response", function(response) {
    if (response.statusCode === 200) {
      params.ContentType = response.headers["content-type"];
      var s3 = new aws.S3({ params })
        .upload({ Body: response })
        .send(function(err, data) {
          resolve(data);
        });
    } else {
      // return false;
      reject(false);
    }
  });
});
</code></pre>
</blockquote>

<p>As I mentioned briefly above, this is a bit unnecessary. Instead of using <code>request</code> you can use <code>request-promise</code> or <code>request-promise-native</code> and to simplify things further, you can use <code>async/await</code>:</p>

<pre><code>const response = await request(url, { resolveWithFullResponse: true });
if (response.statusCode !== 200) {
  return Promise.reject();
}
params.ContentType = response.headers["content-type"];
const data = await new aws.S3({ params })
  .upload({ Body: response })
  .promise();
</code></pre>

<hr>

<p><code>fs</code> is unused in <code>ProductRoutes.js</code>:</p>

<blockquote>
<pre><code>var fs = require("fs");
</code></pre>
</blockquote>

<hr>

<p>The final return statement in <code>validate</code> is unreachable as all other cases will be caught inside the <code>default</code> case of the <code>switch</code>.</p>

<blockquote>
<pre><code>function validate(value, type) {
  switch (type) {
    ...
    default:
      return value &amp;&amp; validator.isEmpty(value, { ignore_whitespace: true });
  }
  return value == null || value.length === 0;
}
</code></pre>
</blockquote>

<hr>

<p>Your use of ES6 features is fairly inconsistent, you should be using things like template strings here:</p>

<blockquote>
<pre><code>let params = {
  Key: key + ext,
</code></pre>
</blockquote>

<pre><code>let params = {
  Ket: `${key}${ext}`
</code></pre>
    </div>