<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I almost never use DAO, so I'll focus on the following...</p>

<hr>

<h2>Style</h2>

<ul>
<li>The block comment should really go above the <code>Function</code> declaration by convention.  Placing it inside the procedure itself just adds a bunch of vertical space between the signature and the code, which is somewhat distracting.  The convention is kind of important if you expect somebody else to be looking at your code, because it is more obvious what the point of the comment block <strong><em>is</em></strong>. Also, you can remove the <code>'This comment line is here to fix the formatting messing up.</code> comment - it serves no real purpose in explaining the code, and AFAICT doesn't effect the formatting at all.</li>
<li>Give your variables meaningful names. This is even <strong><em>more</em></strong> important when you have them jammed up in a declaration block at the top of the procedure. This includes loop counters, especially if meaning vis-a-vis what they are indexing. Something like <code>rowIndex</code> and <code>columnIndex</code> would be much more appropriate here than <code>i</code> and <code>j</code>, and <code>u</code> is just gratuitous - it should be something like <code>parameterCount</code>. Don't make the person reading your code figure out what they're supposed to mean.</li>
<li>Holy side-scrolling, Batman! VBA has line continuations for this very reason. Use them. My display is pretty wide, but I have docked windows that I need to navigate...</li>
<li>Get rid of the superfluous parentheses such as in expressions like <code>And Not (IsNull(argParameters))</code>. If you're putting them there because the operator precedence isn't obvious, you should probably split up and/or simplify the expressions - that's a warning flag that your expression is a little too byzantine. In the cases where they are used in this function, however, they are pretty obvious. Note that they also force a <code>ByVal</code> context, so they aren't completely innocuous.</li>
</ul>

<hr>

<h2>Code Issues</h2>

<ul>
<li><p>Using a return value of <code>Null</code> for "no results" is convention breaking and potentially problematic for queries where <code>Null</code> <em>is the actual result</em> found. The uninitialized value of a <code>Variant</code> is <code>Empty</code>, and that is completely unambiguous to the caller. If you use that convention, you also don't have to initialize the default return value with <code>Qlookup = Null</code>. You can just not set it. Then instead of the <code>IsNull</code> tests that I presume I'd find in the caller, you can use <code>IsEmpty</code>:</p>

<pre><code>Public Sub Foo()
    Debug.Print IsEmpty(Bar)    '&lt;-- True
End Sub

Public Function Bar() As Variant
End Function
</code></pre></li>
<li><p>Similarly, you shouldn't use the default value of <code>Null</code> for your optional <code>argParameters</code> parameter, because <code>Null</code> has a different meaning. It's a <code>Variant</code>, so you should be using <code>IsMissing(argParameters)</code> to determine if it was supplied as an argument. Note that <code>argParameters</code> should be declared <code>ByVal</code> - it is never assigned to, and if it was, it shouldn't be.</p></li>
<li><p>Still on the parameter list, <code>Optional ByVal argIsFilterString As Boolean = False</code> is completely superfluous - non-<code>Variant</code> optional arguments are passed as their default value if they are not supplied. <code>Optional ByVal argIsFilterString As Boolean</code> is an identical signature. The function should look like this - everything else is just noise:</p>

<pre><code>Public Function Qlookup(ByVal argQuery As String, _ 
                        Optional ByRef argParameters As Variant, _
                        Optional ByVal argIsFilterString As Boolean) As Variant
</code></pre></li>
<li><p>Cache repeatedly used values. For example, there is no code path on which  <code>qry.Parameters.Count</code> is not used and several where you repeatedly get its value. Another place would be <code>rs.Fields.Count</code>, which is repeated called when it should be deterministically impossible for it to return a different value.</p></li>
<li>Related to the above, you are repeatedly subtracting one from <code>rs.Fields.Count</code> to get the bounding normalized to base zero. Just do that calculation once, and call it something like <code>recordBound</code>. If you get in the habit of doing that, you'll find that it dramatically decreases the number of off-by-one errors you make.</li>
<li>Dereferencing isn't free - you should be using <code>With</code> blocks if you're repeatedly using the same object reference. The <code>rs</code> object would be a perfect candidate. </li>
<li><p><code>vbObjectError</code> is intended to be added to a specific user-defined error constant, not used by itself like it is here:</p>

<pre><code>Err.Raise vbObjectError, "Qlookup" '...
</code></pre>

<p>Raising <code>vbObjectError</code> <em>without</em> adding a constant is somewhat analogous to "Unknown user error". Don't rely on the description string to convey information about the error, especially if you're building it dynamically - that part is for the user. If you ever need to test for a specific error that you're raising, you'll be kind of screwed - the error number exists for that purpose. Take advantage of it.</p></li>
<li><p>You have a potential bug with <code>If IsArray(argParameters) Then</code>. <code>argParameters</code> is a <code>Variant</code>, so it's possible that you will be passed an uninitialized array. If the <em>intent</em> is that would throw, you nailed it. Since you are checking for other configuration issues explicitly, I'd test for that one too. Note that after the discussion on <a href="https://codereview.stackexchange.com/q/203240/36565">your previous question</a>, I posted an answer over on SO with <a href="https://stackoverflow.com/a/52341240/4088852">an implementation</a> to check if an array is initialized.</p></li>
</ul>

<hr>

<h2>Organization</h2>

<p>This function does two very distinct things. Everything above <code>If rs.RecordCount Then</code> is "arranging" the <code>Recordset</code> for what comes below it. I'd extract that part into its own private function, and then simply call that if the public interface to it results in a correctly configured query. Instead of working with a single procedure that is ~80 lines long, you'll be looking at one that is ~40 lines long and that is a Good Thingâ„¢. This will make it a lot simpler to debug, because you can concentrate on the thing that is failing. It also makes it a lot clearer what each function is doing to the reader.</p>

<p>To be honest, I'd probably implement functionality like this as some sort of <code>QueryRunner</code> class, and pass it an <code>IQuerySetup</code> to configure it. If you write a common <code>IQueryRunner</code> interface, you can split a lot of this up into concrete implementations that would make the code much, much more manageable and allow for some more unit testing (at least of the setup part).</p>
    </div>