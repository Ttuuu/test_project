<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Replacing chained <code>if</code> with dictionary lookup</h2>

<p>This function:</p>

<pre><code>def event_type(line):
    if "begins shift" in line:
        return EventType.STARTS_SHIFT
    if "falls asleep" in line:
        return EventType.FALLS_ASLEEP
    if "wakes up" in line:
        return EventType.WAKES_UP
    raise Exception("Unknown line: " + line)
</code></pre>

<p>isn't bad, but chained <code>if</code> like this smell. It may be better represented as a dictionary, where the key is the string above, the value is the enum value, and you do a simple key lookup based on the last two words of every line. Whereas chained <code>if</code> is worst-case O(n), dictionary lookup is O(1). Then - no <code>if</code>s needed, and you get the exception for free if key lookup fails.</p>

<h2>Use raw strings</h2>

<pre><code>re.search("Guard #(\\d+)", line)
</code></pre>

<p>should be</p>

<pre><code>re.search(r"Guard #(\d+)", line)
</code></pre>

<h2>Settle down with the one-liners</h2>

<p>This:</p>

<pre><code>events = sorted(list(Event(datetime.strptime(line[1:17], "%Y-%m-%d %H:%M"), get_guard(line), event_type(line)) for line in read_file(4)), key=operator.attrgetter("time"))
</code></pre>

<p>is effectively illegible. Break this up into multiple lines - including a temporary variable for the <code>strptime</code>, as well as linebreaks in the list comprehension itself.</p>

<h2>Don't use lists if you can use tuples</h2>

<p>This:</p>

<pre><code>MostSleepy = namedtuple('MostCommon', ['id', 'minute', 'amount'])
</code></pre>

<p>should be</p>

<pre><code>MostSleepy = namedtuple('MostCommon', ('id', 'minute', 'amount'))
</code></pre>

<p>for various reasons - tuples are immutable, so use them for immutable data; and under certain narrow contexts (certainly not this one) they're faster.</p>

<h2>Use a sum instead of a list constructor</h2>

<p>This:</p>

<pre><code>amount = len(list((m for m in current_guard.sleeps if m == most_common_minute)))
</code></pre>

<p>should be</p>

<pre><code>amount = sum(1 for m in current_guard.sleeps if m == most_common_minute)
</code></pre>

<p>(Also, even if you kept using <code>len</code>, you should use a <code>tuple</code> constructor instead of a <code>list</code> constructor.)</p>

<p>Another footnote - don't put inner parens in expressions like <code>list((...generator...))</code>. Constructors can accept generator expressions directly.</p>
    </div>