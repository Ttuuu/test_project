<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Short answer:</strong></p>

<p>You can include <code>setExpanded</code> in the dependency array.</p>

<p><strong>Long answer:</strong></p>

<p>The function passed to <code>useEffect</code> will fire only when at least one of the dependencies changes:</p>

<pre class="lang-js prettyprint-override"><code>useEffect(() =&gt; {
  // runs
  // - on mount
  // - on every render
})

useEffect(() =&gt; {
  // runs
  // - on mount only
}, [])

useEffect(() =&gt; {
  // runs
  // - on mount
  // - on renders where varA and/or varB change
}, [varA, varB])
</code></pre>

<p>You should avoid passing objects as dependencies, because they may trigger unnecessary re-renders. If varA is an object created on every render, it may have the same value but it won't be the same object, so it will be treated as change and fire up the <code>useEffect</code>. See the example below:</p>

<pre class="lang-js prettyprint-override"><code>const varA = { a : 1 }
const varB = { a : 1 }

varA === varB // false
</code></pre>

<p>However, sometimes, certain objects are guaranteed to not produce this behaviour, and this is the case of the <code>setState()</code> function.
According to the <a href="https://reactjs.org/docs/hooks-reference.html#usestate" rel="nofollow noreferrer">React Hooks API docs</a>:</p>

<blockquote>
  <p><strong>Note: React guarantees that <code>setState</code> function identity is stable and wonâ€™t change on re-renders.</strong></p>
</blockquote>

<p>This means that you can include it in the <code>useEffect</code> dependencies with no problem.</p>
    </div>