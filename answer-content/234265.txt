<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Naming</h1>

<p>Finding good names is the hardest part in programming. So always take your time to think carefully of your identifier names.
Single letter and abbreviated names</p>

<h2>Avoid single letter and abbreviated names.</h2>

<p>As mentionned by @tinstaafl you don't gain anything by using one or two character names.
Although this abbreviation makes sense to you (now) anyone reading your code being not familiar with the problem has a hard time finding out what this means.</p>

<p>If you do this to save typing work: remember that you way more often read your code than actually typing something. Also for Java you have good IDE support with code completion so that you most likely type a long identifier only once and later on select it from the IDEs code completion proposals.</p>

<h2>Don't surprise your readers</h2>

<p>A name of a method should clearly state what the method does. 
A bad example in your code is <code>howManyDigits()</code>. 
It counts the digits og the <em>decimal representation</em> which is somewhat surprising in a class that is called <code>Binary</code>.</p>

<p>The name of the class itself is also misleading. 
It claims to be a class being a <em>binary representation</em> of a number but is is a collection of <em>service methods for binary numbers</em>.</p>

<h2>Naming Conventions</h2>

<p>Please read (and follow) the <a href="http://www.oracle.com/technetwork/java/codeconventions-135099.html" rel="nofollow noreferrer">Java Naming Conventions</a>.</p>

<p>Your use of the <em>CamelCase naming scheme</em> is not consequent.
The methods  <code>fromBintoDec()</code> and its companion <code>fromDectoBin()</code> should better be named <code>fromBinToDec()</code> and  <code>fromDecToBin()</code></p>

<p>But the naming conventions do not only apply to the <em>casing</em> of the identifiers. 
It also applies to how names are "constructed".
E.g. <em>method names</em> should start with a <em>verb</em>.
the worst example in your code is <code>howManyDigits()</code>.
It should better be <code>countDigits()</code> and along with the previous point <code>countDecimalDigits()</code>.</p>

<p>Similar is true for <code>fromBintoDec()</code> and its companion <code>fromDectoBin()</code>. If the class <code>Binary</code> was really a <code>Number</code> type this method names might be OK since we have similar named methods in other Number implementations. 
But since this is just a collection of <em>service methods</em> the methods should have more explicit names like <code>convertDecimalToBinary()</code> and <code>convertBinaryToDecimal()</code>.</p>

<h1>static is evil</h1>

<p>Last but not least: 
it is an <em>urban legend</em> that <em>utility classes</em> must have only <code>static</code> methods. In the absesnce of a better name we accidently called such <em>static only</em> classes "utility class" to distinguish them from "normal classes".
In java there is no real benefit for such <em>static only</em> classes except that you save to type the <code>new</code> key word and a pair of braces. 
<em>static access</em> increases <em>coupling</em> for no real reason and effectively prevents <em>polymorphism</em>.</p>
    </div>