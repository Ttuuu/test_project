<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Attention to Detail</strong></p>

<p>What seem like trivial mistakes can be interpreted as a lack of attention to detail.  So whilst your interface has a simple typo <code>claculateUnitForSingleDay</code> vs <code>calculateUnitForSingleDay</code>, it is noticeable.  You don't want this slipping into production code, particularly not on an interface or an API object because you can find yourself stuck with the embarrassing typo for years.</p>

<p>Similarly, leaving things like 'TODO' in your code sets off a red flag to reviewers.</p>

<p><strong>IElectricalComponent</strong></p>

<p>You've created an electrical component interface and from what I can tell a concrete implementation for each of the possible components.  In the bigger picture, this might make sense, however as it stands, this seems like overkill. The component basically does one thing, calculate the total number of units used by a given number of components of that type in a day.  The calculate has three inputs <em>number of that component</em>, <em>how much each is used per day in hours</em>, <em>cost in units per hour</em>.  You've modelled the first two as properties and the last one as a type.  I don't see why it's different, so would have modelled that as part of the electrical component calculation.  If I do this, then I can remove all of your implementations and replace your Factory with:</p>

<pre><code>public static IElectricComponent getInstance(String appliance, 
                                             int countOfAppliance ,
                                             int perDayUsage ){
    int unitsPerHour = IElectricComponent.Unit.valueOf(appliance.toUpperCase()).getValue();

    return () -&gt; countOfAppliance * perDayUsage * unitsPerHour;
}
</code></pre>

<p><strong>PriceSlabs</strong></p>

<p>Looking at your solution to the price slab calculation, again, it seems quite rigid.  Whilst you've used constants for the different slab costs, you've hard coded knowledge about the number of units and created a separate branch of code for each.  This is error prone and indeed, it looks to me like you have a bug in your final condition:</p>

<pre><code>total = 1000*slabs.get("A") + 2000*slabs.get("B") + 3000*slabs.get("D")
            +(units-6000)*slabs.get("C");
</code></pre>

<p>I'm pretty sure that it should be <code>3000*slabs.get("C") + (units-6000)*slabs.get("D")</code>.</p>

<p>I think it would be better to use some kind of table based approach.  This allows you to be more flexible to changes + reduces the number of branches that need to be considered.  So, for example it could be replaced with something like this:</p>

<pre><code>public class PriceSlab {

    static class Slab{
        private final int unitCost;
        private final int slabSize;

        Slab(int slabSize, int unitCost) {
            this.slabSize = slabSize;
            this.unitCost = unitCost;
        }

    }

    static final List&lt;Slab&gt; PRICE_SLABS = asList(new Slab(1000, Slab1),
            new Slab(2000, Slab2),
            new Slab(3000, Slab3),
            new Slab(0, Slab4 )
            );

    public int calculateBill(int units) {
        int total = 0;

        for(Slab currentSlab : PRICE_SLABS) {
            int unitsInSlab = currentSlab.slabSize &gt; units || currentSlab.slabSize == 0 
                ? units : currentSlab.slabSize;

            total += unitsInSlab * currentSlab.unitCost;

            units -= unitsInSlab;
        }

        return total;
    }
}
</code></pre>

<p>You can see how the PRICE_SLABS list could be easily extracted and supplied (from a database/config file) as a parameter to the calculate method, so that it becomes <code>calculateBill(units, priceSlabs)</code>.</p>

<p><strong>Error Checking</strong></p>

<p>In my alternative suggestions, I've ignored error checking.  Adding some in helps to demonstrate that you've considered possible error conditions and how you'd handle them.  So, for example, is it ok to have more than 24 as the total usage per day in hours?  If the user mistypes <code>Fan</code> do you really want the application to silently default to a different calculation?</p>

<pre><code>default :
     return new IElectricComponent() {
         @Override
         public int claculateUnitForSingleDay() {
             // TODO Auto-generated method stub
             return countOfAppliance*perDayUsage;
         }
     };
</code></pre>

<p>Consider the impact this would have on peoples bills if a new expensive component was introduced and the application wasn't updated before the new billing cycle.</p>
    </div>