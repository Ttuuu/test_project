<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've never used numpy or matplotlib, so I can only speak to issues of style.</p>

<p>You're allowing for <em>far</em> too much nesting here. Your code consists of a giant, dense, deeply nested chunk. As a result, the eyes have very few good landmarks to rest on; making your code hard to read.</p>

<p>Put your existing function definitions at the very top level outside of any nesting, and try to break the rest of the code down into more "bite-size" functions. Code is much easier to understand when it's broken down into logical parts that each have a clearly defined purpose. With how you have it now, it's difficult to make sense of any single part without having a good understanding of the whole since it isn't clear what precisely any given piece of code is doing, and where the job of one chunk of code ends and another begins.</p>

<hr>

<p>Your <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">imports should always be at the very top</a> unless you have a good reason to have them lower, like importing is abnormally expensive and only conditionally necessary, or you need to conditionally choose between several imports due to the platform being used or something similar.</p>

<p>The entirety of your code seems to be everything under the <code>if C==('Free').lower():</code> condition though, so every import will always be needed.</p>

<hr>

<p>I think your comments should be at the same level of indentation as the code they're commenting on. PEP8 doesn't seem to say anything on the matter, but I find your comments confusing to read with how you have it now. If they're formatted as they are to prevent lines from getting too long, I'd work on the nesting issue first as I mentioned above. Fixing nesting generally tends to fix a lot of other readability problems with it.</p>

<hr>

<p>I'm not sure if this in an artifact from something that was changed, but this:</p>

<pre><code>if Titration_file_input.lower() not in ['done']:
</code></pre>

<p>Can just be</p>

<pre><code>if Titration_file_input.lower() != 'done':
</code></pre>

<hr>

<p>Your names are all in Upper_Snake_Case. <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">Regular variables names should be in lower_snake_case though.</a></p>

<hr>

<p>Your spacing around binary operators is inconsistent:</p>

<pre><code>if B==('Yes').lower()

. . .

Titration_file_input = ''
Peak_Names=[]
</code></pre>

<p>I always have one space on either side of all binary operators, regardless of context; that's my personal preference. Whatever you choose though, you should be consistent. Inconsistency is another thing that generally tends to harm readability.</p>

<hr>

<p>You can use f-strings to neaten up some parts. For example:</p>

<pre><code>print('File' + ' ' + Data + ' ' + 'not found')
</code></pre>

<p>Can be written as:</p>

<pre><code>print(f'File {Data} not found')  # Note the f', similar to r'
</code></pre>

<p>Which is significantly neater.</p>

<hr>

<pre><code>Titration_Data=J
</code></pre>

<p>I wouldn't do this. The only purpose this has is to give a second name to <code>J</code>. If you find that to be necessary though, I would just not call it <code>J</code> in the first place:</p>

<pre><code>Titration_Data=(M[:, :1]-M)/((M[:, :1]-M)+ M)
</code></pre>
    </div>