<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Consider separating the stack from the stack entries.  Right now, you have to pass a pointer to a pointer to the stack to your push &amp; pop routines.  <a href="https://codereview.stackexchange.com/a/238586/100620">Quuxplusone’s solution</a> requires the caller to do the work of assigning the return value to the stack pointer.  Both of these are harder to use.</p>

<p>Moreover, with Quuxplusone’s solution, you can’t pass an empty stack to another function, and have it fill in entries for the caller.</p>

<p>Separating the stack from the stack entries allows the stack to store additional meta data about the stack.  Eg)</p>

<pre><code>typedef struct StackEntry {
    char v;
    int x, y;
    struct StackEntry *next;
} StackEntry;

typedef struct Stack {
    StackEntry *top;
    int num_entries;
} Stack;
</code></pre>

<p>Now, <code>push</code>, <code>pop</code> &amp; <code>check_empty</code> would all just take a <code>Stack*</code>, which is easier to remember.  Stacks can be passed &amp; shared, even if they are empty, since they wouldn’t just be a null pointer.  And you can determine the depth of a stack in <span class="math-container">\$O(1)\$</span> time.</p>
    </div>