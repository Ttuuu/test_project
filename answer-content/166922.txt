<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Catching exceptions</h1>

<p>It's generally not a good idea to use <code>try</code>-<code>except</code> blocks when you aren't specifying what <code>Exception</code>s you want to catch, as you've done here:</p>

<blockquote>
<pre><code>try:
    urlContent = urllib2.urlopen(url).read()
except:
    return
</code></pre>
</blockquote>

<p>As well as here:</p>

<blockquote>
<pre><code>try:
    imgData = urllib2.urlopen(imgUrl).read()
    fileName = basename(urlsplit(imgUrl)[2])
    output = open(fileName,'wb')
    output.write(imgData)
    output.close()
except:
    pass
</code></pre>
</blockquote>

<p>You should specify exactly which <code>Exception</code>s you are catching. If you don't, then every single <code>Exception</code> raised under the <code>try</code> block will be ignored, including ones caused by errors in <em>your</em> code. Ideally, you should also output to the user what exactly went wrong. Here's an example:</p>

<pre><code>try:
    some_function(argument1, argument2)
except (ExceptionA, ExceptionB) as exception:
    print "X thing failed due to Y. Using Z instead may solve this"
</code></pre>

<h1>Opening files</h1>

<p>In your code you open files using the standard <code>open</code> and <code>close</code> methods provided, like so:</p>

<blockquote>
<pre><code>output = open(fileName,'wb')
output.write(imgData)
output.close()
</code></pre>
</blockquote>

<p>While there's not much that's inherently wrong with doing this, it's almost always better (and safer) to use a <a href="https://docs.python.org/2.7/reference/compound_stmts.html#the-with-statement" rel="noreferrer">context manager</a> to open files. This means that the above code, using a context manager, would become this:</p>

<pre><code>with open(fileName, 'wb') as output:
    output.write(imgData)
</code></pre>

<h1>Nitpicks</h1>

<p>Other than the two things listed above, I really only have two other criticisms of your code, those two criticisms being purely stylistic in nature:</p>

<ol>
<li>function names should be in <code>snake_case</code>, not <code>camelCase</code></li>
<li>variable names should <em>also</em> be in <code>snake_case</code> and not <code>camelCase</code></li>
</ol>

<p>These two naming criticisms are documented in <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a>, the official style guide for Python. I'd recommend taking a look at it.</p>
    </div>