<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre class="lang-py prettyprint-override"><code>def modify(segment):
   return [e+1 for e in segment]
</code></pre>

<p>This function is used only in one place, and is only one line. That often means it's better to just inline it:</p>

<pre class="lang-py prettyprint-override"><code>modifiedA[x:K+x] = modify(A[x:K+x])
# Becomes:
modifiedA[x:K+x] = [e+1 for e in A[x:K+x]]
</code></pre>

<p>Use meaningful variable names. No matter what your challenge says, K, M and A are not meaningful variable names. It also seems like you're not doing anything with that M, so why do we even pass it to the function?</p>

<p>In your <code>dominant()</code> function, you look like you want to use <a href="https://docs.python.org/3.7/library/collections.html#counter-objects" rel="nofollow noreferrer"><code>collections.Counter</code></a>. For practice with a language it can be good to check how to set it up yourself, but sometimes we have a good solution ready-made and available, and much better tested than any individual developer could ever do.</p>

<p>With Counter, you can make it work like this:</p>

<pre class="lang-py prettyprint-override"><code>from collections import Counter

def dominant(string):
    count = Counter(string)
    return [key for key, value in count.items() if value == count.most_common(1)[0][1]]
</code></pre>

<p>Yeah, it's as simple as that. You could split it out over multiple lines, for clarity:</p>

<pre class="lang-py prettyprint-override"><code>from collections import Counter

def dominant(string):
    count = Counter(string)
    dom_list = []
    max_occurred = count.most_common(1)[0][1]
    for key, value in count.items():
        if value &gt;= max_occurred:
            dom_list.append(key)
    return dom_list
</code></pre>
    </div>