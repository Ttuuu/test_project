<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Effects</h3>
<p>This is my main complaint about your code. <code>build_parentheses</code> prints out its results, but it would be cleaner for it to return them as a list, or yield them.</p>
<h3><code>.counter</code></h3>
<p>Using the attribute <code>build_parenthesis.counter</code> like this is technically fine, but it's really strange. I don't feel that ad-hoc attributes are particularly Pythonic, especially for functions. Also, <code>.counter</code> will not be needed if <code>build_parentheses</code> returns a list as suggested.</p>
<h3>Names</h3>
<p>I'd recommend <code>X_count</code> rather than <code>number_X</code>. It's mostly preference, though.</p>
<h3>Public API</h3>
<p>Since the <code>number_open</code> and <code>number_closed</code> parameters are not part of the public API, I'd recommend removing them. Make <code>build_parentheses</code> take only one parameter, <code>number_pairs</code>. It will call, and return the results of, <code>build_parentheses_aux</code>, an auxiliary/helper function, which takes <code>number_pairs</code> as well as several private/internal parameters.</p>
<h3>Chained comparisons</h3>
<p><code>number_open == number_pairs and number_closed == number_pairs</code> may be written as <code>number_open == number_closed == number_pairs</code>. Generally, Python interprets chained comparisons as if they were combined with <code>and</code>. Two comparisons <code>A</code> and <code>B</code> applied to three variables <code>x</code>, <code>y</code>, and <code>z</code> like <code>x A y B z</code> is the same as writing <code>x A y and y B z</code>.</p>
<h3>Everything else looks good</h3>
<p>Style is generally good, though a space to the left of <code>-&gt; str</code> would be nice; <code>and number_open</code> rather than <code>and number_open != 0</code> is Pythonic; <code>if __name__ == "__main__"</code> guard is good; <code>snake_case</code> is good; you have a docstring, ...</p>
<h3>Suggested Code</h3>
<p>Here is your code, with all suggestions implemented:</p>
<pre><code>def build_parentheses(pair_count: int) -&gt; str:
    """The function that builds the parentheses. Output as a string:
        pair_count: number of parentheses pairs user desired
    """
    return build_parentheses_aux(pair_count, 0, 0)

def build_parentheses_aux(pair_count: int,
                      open_count,
                      closed_count)-&gt; str:
    """Auxiliary build_parentheses function.
        pair_count: number of parentheses pairs
        open_count: number of open parens so far
        closed_count: number of closed parens so far
    """
    if open_count == closed_count == pair_count:
        return [""]
    else:
        result = []
        if open_count &lt; pair_count:
            for r in build_parentheses_aux(pair_count, open_count + 1, closed_count):
                result.append("(" + r)
        if closed_count &lt; open_count and open_count:
            for r in build_parentheses_aux(pair_count, open_count, closed_count + 1):
                result.append(")" + r)
        return result

if __name__ == "__main__":
    options = build_parentheses(5)
    print("\n".join(options) + f"\n=========\n{len(options)} solutions")
</code></pre>
<p>If you are familiar with generators, you could also write <code>build_parentheses_aux</code> as a generator, which would look cleaner (but may be less efficient).</p>
    </div>