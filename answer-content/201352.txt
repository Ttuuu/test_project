<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li>You can divide your <code>main</code> into smaller methods.</li>
<li>The whole code shouldn't be wrapped inside a <code>try/catch</code> block. You should minimize the scope of your <code>try</code> block only where expect an <code>Exception</code>.</li>
<li>Calculation of the minimum distance can be done using <code>Stream</code>. </li>
<li>Try to have parentheses <code>{}</code> for <code>if/else</code> statements even when there's only one statement in it.</li>
<li><code>Scanner</code> should be closed as soon as its work is done, instead of closing at the very end. Or use <code>try with resources</code>.</li>
<li><p><code>5</code> can be extracted as a constant.</p>

<pre><code>class Main {
 private static final double MIN_DISTANCE = 5;

 public static void main(String[] args) {
     List&lt;Double&gt; satelliteDistances = getSatelliteDistancesFromFile();

     double minDiff = getMinimumDistanceBetweenSatellites(satelliteDistances);

     displayResults(satelliteDistances, minDiff);
 }

 private static double getMinimumDistanceBetweenSatellites(List&lt;Double&gt; satelliteDistances) {
     return IntStream.range(1, satelliteDistances.size())
             .mapToDouble(i -&gt; satelliteDistances.get(i) - satelliteDistances.get(i - 1))
             .min().getAsDouble();
 }

 private static List&lt;Double&gt; getSatelliteDistancesFromFile() {
     List&lt;Double&gt; satelliteDistances = new ArrayList&lt;&gt;();
     try (Scanner fileScanner = getFileScanner()) {
         while (fileScanner.hasNextLine()) {
             String distanceAsString = getDistanceAsString(fileScanner);
             satelliteDistances.add(Double.parseDouble(distanceAsString));
         }
     }
     Collections.sort(satelliteDistances);
     return satelliteDistances;
 }

 private static String getDistanceAsString(Scanner fileScanner) {
     return fileScanner.nextLine().split(",")[1];
 }

 private static Scanner getFileScanner() {
     Scanner sc = new Scanner(System.in);
     System.out.print("Please enter the name of the input file: ");
     Scanner inFile = null;
     try {
         inFile = new Scanner(new File(sc.nextLine()));
     } catch (FileNotFoundException e) {
         e.printStackTrace();
     }
     sc.close();
     return inFile;
 }

 private static void displayResults(List&lt;Double&gt; satelliteDistances, double minDiff) {
     String safeOrbitResult = minDiff &lt; MIN_DISTANCE ? "The satellites are not in safe orbits." : "The satellites are in safe orbits.";
     System.out.println(safeOrbitResult);

     if (satelliteDistances.size() != 1) {
         System.out.println("The minimum distance between orbits (km): " + minDiff);
     }
 }
}
</code></pre></li>
</ul>
    </div>