<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I noticed you don't use the <code>success</code> function when the AJAX request succeeds, nor does your <code>Favs.php</code> give any feedback. It's there, but it's empty. Normally you first call the AJAX function, and only when it returns successfully you would give the appropriate feedback to the user. This means you could also give the user feedback when the AJAX request fails.</p>

<p>Let me try and add that to your code. I'll start with the middle bit of <code>Favs.php</code>:</p>

<pre><code>switch ($method) {
    case "Like" : 
        $query = 'INSERT INTO favorite (memberID, id) VALUES (:mID, :pID)';
        break;
    case "Unlike" :
        $query = 'DELETE FROM favorite WHERE memberID=:mID and id=:pID';
        break;
}
$feedback = 'Fail'; // start with pessimistic feedback
if (isset($query)) {
    $stmt = $conn-&gt;prepare($query);
    $stmt-&gt;bindParam(':mID', $user_id, PDO::PARAM_INT, 12);
    $stmt-&gt;bindParam(':pID', $director_id, PDO::PARAM_INT, 12);
    if ($stmt-&gt;execute()) $feedback = $method; // feedback becomes method on success
}
echo json_encode(['id'       =&gt; $director_id,
                  'feedback' =&gt; $feedback]);
</code></pre>

<p>I got rid of duplicated code and I give <code>Like</code>, <code>Unlike</code> or <code>Fail</code> as the feedback to the AJAX call. This code now returns a JSON string containing the <code>director_id</code> and the feedback. This makes sense because it tells you which director was changed and how. You can leave the beginning, and the <code>clean_input()</code> function, in place.</p>

<p>Now in your Javascript you need to respond to what the AJAX call returns.</p>

<pre><code>$(document).ready(function () {
    $('.button').click(function (e) {
        e.preventDefault();
        $.getJSON('favs.php', 
                  {user_id: $(this).attr('data-user'), 
                   director_id: $(this).attr('data-post'), 
                   method: $(this).attr('method')}) 
         .done(function(json) {
                   switch (json.feedback) {
                       case 'Like'   :
                           $(this).attr('method', 'Unlike'); 
                           $(this).html('&lt;i class="mi mi_sml text-danger" id="' + json.id + '"&gt;favorite&lt;/i&gt;Remove Favorite').toggleClass('button mybtn'); // Replace the image with the liked button
                           break;
                       case 'Unlike' :
                           $(this).html('&lt;i class="mi mi_sml" id="' + json.id + '"&gt;favorite_border&lt;/i&gt;Add Favorite').toggleClass('mybtn button');
                           $(this).attr('method', 'Like');
                           break;
                       case 'Fail'   : 
                           alert('The Favorite setting could not be changed.');
                           break;
                   }
         })
        .fail(function(jqXHR,textStatus,error) {
           alert("Error Changing Favorite: " + error);
        }); 
    });
});
</code></pre>

<p>I changed your basic AJAX request to a JSON-encoded AJAX request with better fault detection. I moved the changes you make to the button inside the <code>.done()</code> method.</p>

<p>To recap: </p>

<ul>
<li>Call the AJAX PHP script with all the parameters needed. </li>
<li>The AJAX PHP script return a JSON string containing what it has done. </li>
<li>Change the UI according to what was returned.</li>
</ul>

<p>This way your code is more fault tolerant. </p>

<p>There is still a problem though. Suppose a user has opened two browser windows with exactly the same content. First the favorite button in one is used, and then the exact same button is used in the other window. If I am correct your database will now contain two identical rows in the <code>favorite</code> table. You can prevent this by making the <code>favorite.id</code> column unique. The query will then fail and the feedback in the second window should become: "The Favorite setting could not be changed.".</p>

<p>Also note: Because you supply the <code>user_id</code> as a parameter to the AJAX call I can easily change the favorites of other users by changing this id. It is better to store the <code>user_id</code> in a session and use that in the AJAX PHP script.</p>

<p>I hope this helps you. I haven't tested the code, so I don't exclude the possibility of some errors.</p>
    </div>