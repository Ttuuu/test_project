<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Safety</h3>

<blockquote>
  <p>Is this code secure from parameter injection attacks? </p>
</blockquote>

<p>I think it's safe:</p>

<ul>
<li>Is any part of the user input executed (for example in <code>eval</code>, <code>exec</code>, or other)? -&gt; no</li>
<li>Is any part of the user input passed to another command that may execute it? -&gt; no. Although parts of the input are passed to <code>echo</code>, <code>sed</code>, <code>python</code>, they don't execute any part of that.</li>
<li>Is any part of the user input returned back in the response without sanitization -&gt; no</li>
</ul>

<p>A small tip: when you don't need variable interpolation in a here-document, then it's good to enclose the start symbol within <code>"..."</code> or <code>'...'</code>, or to make sure variables don't get expanded accidentally, that is:</p>

<pre><code>cat &lt;&lt; "EOT"
...
EOT
</code></pre>

<p>This can eliminate some potential human error, leaking variable content unintentionally.</p>

<h3>HTTP status code in responses</h3>

<p>Based on a couple of local tests on an Apache web server,
it seems to me the exit code of a CGI script is not used at all to determine the HTTP status code.
A well-behaving web service should use appropriate HTTP status codes.
You could achieve that by using Toby's helper function,
adding a <code>Status:</code> header with appropriate code:
200 for success, 400 for user error, and so on.</p>

<h3>Minor tips</h3>

<p>In addition to what Toby already told you,
there are a couple of redundant <code>;</code> at some line ends.</p>
    </div>