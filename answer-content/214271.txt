<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In terms of comparing the two implementations, I only see two differences.</p>

<p>Your Java code uses a HashSet for dict while your Rust code uses a Vec. Since the desired use of dict is simply lookups, a HashSet is indeed the best data structure to use. This change is very easy to make, mostly since <code>collect</code> is a generic method. You can simply change the type of <code>dict</code> to <code>HashSet&lt;String&gt;</code> and the words will be collected into a hashset. This should result in a very large improvement, assuming your dictionary is sufficiently large.</p>

<p>The other difference is with <code>is_consonsant</code>. I don't see this change being very significant. I think the way you're doing it in the Rust implementation <em>may</em> actually be faster, especially if you use <code>is_ascii_alphabetic</code> instead. My reasoning for this is that a linear search through an array is typically faster than a hashset when the number of elements is very small. An array-based static lookup table would probably be best anyways. Overall though, this optimization is likely insignificant and only if you need this boost, you should benchmark different approaches.</p>

<p>Here's how I might write this program, with some comments for explanation. (Note: I compiled this but didn't actually test it.) If you have any questions about why I do something a certain way, feel free to ask.</p>

<pre><code>use std::collections::HashSet;
use std::env;
use std::fs::File;
use std::io::BufRead;
use std::io::BufReader;

pub fn main() {
    let args: Vec&lt;String&gt; = env::args().collect();
    if args.len() != 3 {
        // eprintln prints to stderr
        eprintln!("Expected 2 command line arguments, but got {}.", args.len() - 1);
        eprintln!("Please provide the path to the dictionary file as the first argument and a sentence as the second argument.");
        return;
    }

    let dict_path = &amp;args[1];
    let phrase = &amp;args[2];

    let dict_file = File::open(dict_path).expect("Failed to open file");
    // You can collect into a hashset
    let dict: HashSet&lt;String&gt; = BufReader::new(dict_file)
        .lines()
        .map(|l| l.unwrap().to_string().to_lowercase())
        .collect();

    let mut num_alter = 0;
    let mut phrase_alter = phrase.to_string();
    for (i, ch) in phrase.chars().enumerate() {
        if is_consonant(ch) {
            phrase_alter.remove(i);
            num_alter += print_if_word(&amp;phrase, &amp;dict);
            phrase_alter.insert(i, ch);
        }
    }

    println!("Number of alternatives: {}", num_alter);
}

// &amp;str is almost always prefered over &amp;String
fn print_if_word(phrase: &amp;str, dict: &amp;HashSet&lt;String&gt;) -&gt; u8 {
    // No need to collect to a vector, just chain iterator methods.
    let all_words_match = phrase
        .split_whitespace()
        .all(|w| dict.contains(&amp;w.to_string().to_lowercase()));
    if all_words_match {
        println!("{}", phrase);
        1
    } else {
        0
    }
}

// prefer taking by value instead of reference whenever the type is Copy and reasonably small
fn is_consonant(ch: char) -&gt; bool {
    // Since your Java code only allowed ascii consonants, I will do the same here.
    if !ch.is_ascii() {
        return false;
    }

    // Fastest solution is most likely a static lookup table like
    // static CONSONANT: [bool; 256] = [false, false, ...];
    // However, the solution below is reasonably fast and is likely
    // dwarfed by other costs in the program.

    let b = (ch as u8).to_ascii_lowercase();

    b.is_ascii_lowercase()
        &amp;&amp; match b {
            b'a' | b'e' | b'i' | b'o' | b'u' =&gt; false,
            _ =&gt; true,
        }
}
</code></pre>
    </div>