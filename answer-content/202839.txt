<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><sub><sup><strong>NOTE</strong>     I'll only be taking a look at your <code>Duration</code> class, not the UI-specific code.</sup></sub></p>

<hr>

<h1>Regex as a constant</h1>

<p>You don't need to re-instantiate a new <code>RegExp</code> instance every time a <code>Duration</code> is instantiated.
Move the regex initialization to the global context, or maybe as a static field of the class.
This <strong>saves memory</strong> as it's not allocated for the same regex over and over whenever you call <code>new Duration</code>.</p>

<p>Also, let's be more descriptive in its naming.
Since it's used for validation, let's name it exactly that.</p>

<pre><code>class Duration {
  static VALIDATION = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;
  constructor(start, end) {
    // ...
  }
  // ...
}
</code></pre>

<p>You also don't need to instantiate it with the <code>RegExp</code> function; you can just place it there as a literal as it's known run-time.</p>

<h1>Helper methods</h1>

<p>...shouldn't be methods at all, but functions instead.
The <code>_seconds</code> and <code>_round</code> do not belong in the <code>Duration</code> class.
They are pure utility functions that don't touch <code>this</code> at all: give them something as input, and something comes out as output.</p>

<p>If you put them in a separate file, they also become more reusable.
Your <code>round</code> function, for example, has nothing to do with <code>Duration</code> and thus you could re-use it in any math-based code -- like a renderer in a 3D engine!</p>

<pre><code>function seconds(time = "00:00") { /* ... */ }
function round(float) { /* ... */ }

class Duration {
  static VALIDATION = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;
  constructor(start, end) { /* ... */ }
  get difference() { /* ... */ }
}
</code></pre>

<p>A good rule of thumb that a method should be a util function is that it doesn't use <code>this</code>.
If you feel that the util function is still semantically tied to the class, you should place it as a <code>static</code> method.</p>

<p>This also make the <code>get difference</code> part simpler:</p>

<pre><code>get difference() {
  const { start, end } = this;
  return round((seconds(end) - seconds(start)) / 60);
}
</code></pre>

<h1>Validation</h1>

<p>Constructor is a good place for validation in this case.
If someone passes in some junk instead of valid timestamps, you'd want to catch that immediately as no operation would make sense if the <code>start</code> and <code>end</code> are not valid timestamps.</p>

<p>However, your handling of validation only hides errors under the rug.
Say that someone, by mistake, tries to create a <code>Duration</code> like this:</p>

<pre><code>new Duration("12:00", "1300")
</code></pre>

<p>Your validation will successfully test that <code>12:00</code> is fine, and assign that to <code>start</code>, but the <code>1300</code> will be silently treated as <code>00:00</code>.
And now my duration is actually <code>(12:00, 00:00)</code>, but I wanted <code>(12:00, 13:00</code>). 
A silent bug.
No error in console, but my results are weird.
Difficult to debug!</p>

<p>That's why you should throw an exception if the validation fails.
Feel free to scream at me, I <em>want</em> to know that I've messed up.</p>

<p>Here's the idea:</p>

<pre><code>constructor(start, end) {
  if (!Duration.VALIDATION.test(start)) {
    throw new Error(`The "start" argument (${start}) is in wrong format.`)
  } else {
    this.start = start
  }
}
</code></pre>

<p>Notice what makes a good error message: it tells me exactly what I've screwed up.
It would be even better if it went on and explained what <em>is</em> a valid argument, but I'll go ahead and assume that it's obvious in this case for brevity.</p>

<p>In order to avoid repeating, you can extract the validation as a method.
The method would act as a no-op function in case everything is OK, but throw if something's wrong.
It's a good candidate for a static method, since it's clearly tightly coupled with the <code>Duration</code> class.</p>

<pre><code>static throwIfError(arg, argName) {
  if (!Duration.VALIDATION.test(arg)) {
    throw new Error(`The "${argName}" argument (${arg}) is in wrong format.`);
  }
  return arg;
}

constructor(start, end) {
  this.start = Duration.throwIfError(start, 'start');
  this.end = Duration.throwIfError(end, 'end');
}
</code></pre>

<p>The second argument is just for a prettier message.
Now, when I try my example, <code>new Date("12:00", "1300")</code>, I get an error message saying this:</p>

<blockquote>
  <p>Error: The "end" argument (1300) is in wrong format.</p>
</blockquote>

<h1>Complete code</h1>

<p>My full refactored version of the original code is below, along with an example of usage.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="true">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function seconds(time = "00:00") {
  const split = time.split(':');
  return Number(split[0]) * 60 + Number(split[1]);
}

// See: https://stackoverflow.com/questions/11832914/round-to-at-most-2-decimal-places-only-if-necessary
function round(float) {
  return Math.round((float + 0.0001) * 100) / 100;
}

class Duration {
  static VALIDATION = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;

  static throwIfError(arg, argName) {
    if (!Duration.VALIDATION.test(arg)) {
      throw new Error(`The "${argName}" argument (${arg}) is in wrong format.`);
    }
    return arg;
  }

  constructor(start, end) {
    this.start = Duration.throwIfError(start, 'start');
    this.end = Duration.throwIfError(end, 'end');
  }

  get difference() {
    const { start, end } = this;
    return round((seconds(end) - seconds(start)) / 60);
  }

}

console.log("From 12:00 to 13:00 =&gt; ");
console.log(new Duration("12:00", "13:00").difference);
console.log("From 12:00 to 1300 (!) =&gt; ");
console.log(new Duration("12:00", "1300").difference);</code></pre>
</div>
</div>

    </div>