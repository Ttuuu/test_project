<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overview</h2>
<p>Your class has a limitation that required <code>T</code> to have default constructor.</p>
<p>Your class is not really suitable to hold anything but the most basic of types (like int/float) as removing elements does not guarantee that destructor of the removed element is called at that point. So your list can hold onto resources that will never be used.</p>
<p>The copy constructor does not provide the strong exception guarantee, nor do you provide the standard swap operations nor the move semantics I would expect to see with a container class.</p>
<p>In terms of adding elements I would also expect to see the ability to build objects of type <code>T</code> in place rather than forcing a copy of the object into the container.</p>
<p>Overall a good first try but a few mistakes need to be cleaned up before this is ready.</p>
<p>Please check out the reference implementation I wrote at then end of this answer:
<a href="https://codereview.stackexchange.com/a/126007/507">https://codereview.stackexchange.com/a/126007/507</a></p>
<h2>Looking at compiler warnings:</h2>
<pre><code>bash-5.0$ g++ -std=c++17 -Wall -Wextra -Werror -pedantic dl.cpp
dl.cpp:289:22: error: comparison of integers of different signs: 'int' and 'size_t' (aka 'unsigned long') [-Werror,-Wsign-compare]
dl.cpp:308:22: error: comparison of integers of different signs: 'int' and 'size_t' (aka 'unsigned long') [-Werror,-Wsign-compare]
dl.cpp:13:48: error: field 'left' will be initialized after field 'right' [-Werror,-Wreorder]
dl.cpp:12:80: error: field 'value' will be initialized after field 'right' [-Werror,-Wreorder]
dl.cpp:142:28: error: comparison of integers of different signs: 'int' and 'size_t' (aka 'unsigned long') [-Werror,-Wsign-compare]

5 errors generated.
</code></pre>
<p>Nothing major. I would fix them so that more serious warnings are made visible and you can compile your code at the highest warning level and make sure the code compiles with no warnings.</p>
<p>Though in this case <code>error: field 'left' will be initialized after field 'right'</code> is not an issue it can be a serious problem with code. If you are reading the constructor and seeing a specific order of initialization of members that the class may depend on and that is not what is going to happen in reality then you can end up in some serious problems.</p>
<h2>CodeReview</h2>
<p>Curious why you need these headers. Lets find out.</p>
<pre><code>#include &lt;ctime&gt;
#include &lt;random&gt;
</code></pre>
<hr>
<p>Some vertical spacing to make it easier to read please.</p>
<pre><code>#include &lt;random&gt;
template &lt;typename T&gt;
class QEList
</code></pre>
<hr>
<p>I would add all your code into a namespace for your code.<br>
I have the website ThorsAnvil.com (So I put everything in ThorsAnvil namespace). But something like <code>namespace Qela {}</code> would work just as well.</p>
<hr>
<p>Interesting constructors:</p>
<pre><code>         Node(Node* left_a,const T&amp; value_a, Node* right_a) : left(left_a), value(value_a), right(right_a) {}
</code></pre>
<p>The first constructor has an oddly defined initializer list that implies the <code>value</code> is initialized before <code>right</code>. But the members are initialized in order of declaration. So be careful of using another order as you may confuse people.</p>
<p>Also the compiler would allow this initialization using a simple list initialization without you having to specify it (assuming there were no constructors).</p>
<p>The second constructor:</p>
<pre><code>         Node(Node* left_a,Node* right_a) : left(left_a) , right(right_a) {}
</code></pre>
<p>Is odd in that you don't initialize the value. I don't see a situation where you are going to add a node without a value.</p>
<p>There is also the issue that this means the type <code>T</code> must be default constructible. Otherwise this code will fail to compile. This is not a valid assumption for the general case.</p>
<h3>Answer to Question: Where is the <code>T</code> default constructor called.</h3>
<p>You call the default constructor of <code>T</code> when you create a <code>Node</code> object with explicitly initializing the <code>value</code> member.</p>
<pre><code>  // This constructor you have written:
  Node(Node* left_a,Node* right_a)
     : left(left_a)
     , right(right_a)
  {}

  // This is the same as writting:
  Node(Node* left_a,Node* right_a)
     : left{left_a}
     , right{right_a}
     , value{}          // Even though you do not initialize value
                        // the compiler must initialize this value.
  {}
</code></pre>
<p>Now you call this constructor in the <code>QEList</code> constructor when the <code>end_ptr</code> value is initialized.</p>
<pre><code>  // You add the is declaration to `QEList`
  Node *end_ptr = new Node(nullptr,nullptr);
  // This means on construction of the object you will call this.

  // So this declaration:
  QEList() = default;

  // Is equivalent to:
  QEList()
      : m_size{0}
      , end_ptr{new Node(nullptr,nullptr)} // This will call the above
                                           // Node constructor that in
                                           // turn calls the default T
                                           // constructor. 
      , head{end_ptr}
  {}
</code></pre>
<p>You can test this all out by trying to add this:</p>
<pre><code>  class X
  {
       public:
           X(int){}       // Because we define a constructor
                          // the compiler will not generate a default
                          // constructor for this class.
                          // And we have not defined one either.
  };


  int main()
  {
       QEList&lt;X&gt;  list;
  }
</code></pre>
<p>The above code will fail to compile.</p>
<p>I would simply re-write this as:</p>
<pre><code>struct Node
{
     Node* right;  // Note: putting the '*' next to the name is a C thing
     Node* left;   //       in C++ the '*' goes next to the type (usually).
     T     value;
};
</code></pre>
<hr>
<p>This is now considered old:</p>
<pre><code>        typename iterator::pointer ptr;
</code></pre>
<p>The more modern incarnation is:</p>
<pre><code>        using ptr = iterator::pointer;
</code></pre>
<hr>
<p>OK. From this implementation detail that you always have a one past the end node.</p>
<pre><code>friend bool operator==(const iterator&amp; i1, const iterator&amp; i2){ return i1.ptr == i2.ptr; }
</code></pre>
<p>Otherwise you could not compare against the <code>end</code> iterator. Which is why you have the node constructor with no value.</p>
<p>That's fine. But your one past the end node still contains an object of type <code>T</code> that will need default construction.</p>
<hr>
<p>You don't need to create (basically) the same class again. A template here with appropriate parameters should work:</p>
<pre><code>    class const_iterator : public std::iterator&lt;std::bidirectional_iterator_tag,const Node,int,const Node *,const T&gt;
    {
         ... STUFF
    };
</code></pre>
<p>Why not write it like this:</p>
<pre><code>    template&lt;typename T, typename N&gt;
    class Iterator: public std::iterator&lt;std::bidirectional_iterator_tag, N, int, N*, T&gt;
    {
       .... STUFF
    }
    using iterator       = Iterator&lt;T, Node&gt;;
    using const_iterator = Iterator&lt;const T, const Node&gt;;
</code></pre>
<hr>
<p>That's a queasy recursive definition:</p>
<pre><code>    template&lt;typename... Types&gt;
    QEList(const T &amp;value,Types&amp;&amp;... values) :  QEList(values...)
    {
        push_front(value);
    }
</code></pre>
<p>I suspect you wanted this to support a list of <code>T</code> to initialize the list with.</p>
<p>But it also allows a couple of things I suspect you don't want:</p>
<pre><code>   QEList&lt;int&gt;     list1;
   QEList&lt;int&gt;     list2(5, list1);
   QELIST&lt;int&gt;     list3(5, vec.begin(), vec.end());
   QELIST&lt;int&gt;     list4(5, std::move(list2));
</code></pre>
<p>I would re-write to use <code>std::initalizaer_list</code></p>
<pre><code>    QEList(std::initializer_list&lt;T&gt; const&amp; list)
    {
        for(value: list) {
           push_back(value);
        }
    }

    ....
    // now you can do:
    QEList  list{1,2,3,4,5,6};
</code></pre>
<hr>
<p>You are writing the copy constructor in terms of the assignment operator.</p>
<pre><code>    QEList(const QEList &amp;QEL) { *this = QEL; }
</code></pre>
<p>Normally it is the other way around. You write the assignment operator in terms of the copy constructor (See Copy and Swap Idiom).</p>
<p>Looking the assignment operator (which I found all the way at the bottom and private). Normally this would be public otherwise just make it a named function.</p>
<pre><code>    void operator=(const QEList &amp;QEL)
    {
        this-&gt;clear();
        auto iter = QEL.cbegin();
        for(;iter != QEL.cend();iter++)
        {
            this-&gt;push_back(*iter);
        }
    }
</code></pre>
<p>This method does not provide the strong exception guarantee that I would expect from a copy constructor. So I would normally write these two methods like this:</p>
<pre><code>   QEList(const QEList&amp; copy)
   {
       for(auto const&amp; value: copy) {
            push_back(value);
       }
   }
   QEList&amp; operator=(QEList const&amp; copy)
   {
       QEList temp(copy);
       swap(temp);
       return *this;
   }
   void swap(QEList&amp; other) noexcept
   {
       using std::swap;
       swap(head,    other.head);
       swap(end_ptr, other.end_ptr);
       swap(m_size,  other.m_size);
   }
   friend void swap(QEList&amp; lhs, QEList&amp; rhs)
   {
       lhs.swap(rhs);
   }
</code></pre>
<hr>
<p>In the destructor you use <code>this-&gt;</code></p>
<pre><code>    ~QEList()
    {
        this-&gt;clear();
        delete end_ptr;
    }
</code></pre>
<p>This is a code smell. The only reason to use <code>this-&gt;x</code> over simply <code>x</code> is that you have an issue with shadowing the member <code>x</code> with a local variable. The compiler can not detect incorrect access to the local variable and thus can not warn you about it. This means this type of error is hard to spot and detect. It is better to never have shadowed variables (and get your compiler to warn you about variable shadowing). That way your code is easy to read and you always know what variable you are referring to as they have distinct names.</p>
<hr>
<p>Sure you are deleting the last element in the list correctly.</p>
<pre><code>    void pop_back()//deletes the last node
    {
        Node* temp = end_ptr;
        end_ptr = end_ptr-&gt;left;
        end_ptr-&gt;right = nullptr;
        delete temp;
        m_size--;
    }
</code></pre>
<p>But you are not deleting the object it contains. What happens if that object contains a DB cursor. You are now holding open a resource that will never be used.</p>
<p>When I delete the last element from a list I expect the associated object to also be destroyed so that all its resources are cleanup.</p>
<hr>
<p>Same issue as <code>pop_back()</code>.</p>
<pre><code>    void pop_front()//deletes the first node
</code></pre>
<hr>
<pre><code>    void push_back(const T &amp;value_a)//adds the value to the end of the list
    {
        end_ptr = new Node(end_ptr,nullptr);
        end_ptr-&gt;left-&gt;value = value_a;
        if(m_size &gt; 0) end_ptr-&gt;left-&gt;left-&gt;right = end_ptr-&gt;left;
        end_ptr-&gt;left-&gt;right = end_ptr;
        m_size++;
    }
</code></pre>
<p>I think this can be simplified:</p>
<pre><code>    void push_back(const T &amp;value_a)
    {
        Node* node = new Node(end_ptr-&gt;left, endptr, value_a);
        if(node-&gt;left) {
            node-&gt;left-&gt;right = node;
        }
        else {
            head = node;
        }
        node-&gt;right-&gt;left = node;
        ++m_size;
    }
</code></pre>
<hr>
<pre><code>    void clear()
    {
        ...
        // If this is not already true then you fucked up.
        // rather than explicityl throwing away a potential error
        // I would validate that this is true.
        head = end_ptr;
        m_size = 0;
    }
</code></pre>
<hr>
<pre><code>    void erase(const_iterator position)//deletes the node that the iterator points to (the iterator itself becomes hung)
    {

        // Is `end_ptr-&gt;left` always `nullptr`?????
        // I think you mean `position.ptr != end_ptr`
        if(position.ptr != head &amp;&amp; position.ptr != end_ptr-&gt;left)
</code></pre>
<hr>
<p>OK. This is logically correct.</p>
<pre><code>    void erase(const_iterator begin_pos,const const_iterator end_pos)//deletes everything from begin_pos to end_pos (end_pos itself is not deleted)
    {
        while(begin_pos != end_pos)
        {
            // You will see that most erase functions in the
            // standard return the next element after deleting.
            this-&gt;erase(begin_pos++);

            // The problem here is that this code is very brittle.
            // If we moved that `++` to the front it would easily
            // break the code (I think it would be undefined behavior).
            // Since the standard recomendation for C++ is to use
            // prefix ++ operations I can see a maintainer coming
            // along in a few years and potentially changing this
            // to the wrong version.
            //
            // I would change it so either.
            //    A: Write a good comment why you can change the ++
            //    B: Change erase() to return the next value to be
            //       removed.
        }
    }
</code></pre>
<p>But could we not do it more effeciently?</p>
<pre><code>    void erase(const_iterator begin,const const_iterator end)
    {
        if (begin == end) {
            return;
        }
        if (begin.pos == head &amp;&amp; end.pos == end_ptr) {
            clear();
        }
        else
        {
            if (begin.pos == head) {
                head                   = end.pos;
            }
            else {
                begin.pos-&gt;left-&gt;right = end.pos;
            }
            end.pos-&gt;left          = begin.pos-&gt;left;

            Temp* next
            for(loop = begin.pos; loop != end.pos; loop = next) {
                next = loop-&gt;right;
                delete loop;
            }
        }   
    }
</code></pre>
<hr>
<p>That's a good start:</p>
<pre><code>    iterator begin() { return iterator(head); }
    const_iterator cbegin() const { return const_iterator(head); }
    iterator end() { return iterator(end_ptr); }
    const_iterator cend() const { return const_iterator(end_ptr); }
</code></pre>
<p>But you are missing a few definitions:</p>
<pre><code>     const_iterator begin() const    { return const_iterator(head); }
     const_iterator end()   const    { return const_iterator(end_ptr); }
</code></pre>
<p>What about reverse iterator?</p>
<pre><code>     rbegin(), rend(), rbegin() const, rend() const
</code></pre>
<hr>
<p>You can return a value by index.</p>
<pre><code>    T&amp; operator[](unsigned const int &amp;index) const
</code></pre>
<p>But that function should not be marked <code>const</code> unless you return a const reference to <code>T</code> or return <code>T</code> by value.</p>
<p>Alternatively your would normally provide two versions of this method:</p>
<pre><code>    T&amp;       operator[](unsigned const int &amp;index);
    T const&amp; operator[](unsigned const int &amp;index) const;
</code></pre>
<hr>
<p>The qsort/selection sort should be a separate code reviews. There is a lot to fix above first.</p>
    </div>