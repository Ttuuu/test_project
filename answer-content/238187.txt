<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Don't use <code>sum</code> as a variable.  Especially because you want to use it with your approach!</p>

<pre><code>sum = 0
for i in s:
    sum += values[i]
</code></pre>

<p>could become:</p>

<pre><code>number = sum(values[i] for i in s)
</code></pre>

<hr>

<p><code>s[i]</code> is a string.  <code>s[i] + s[i+1]</code> is a string.  There is no need to use <code>str()</code> to convert what is already a string to a string.  But <code>s[i:i+2]</code> is easier still.</p>

<hr>

<p>With 3999 as the maximum, the longest Roman numeral string would be 15 characters  (<code>"MMMDCCCLXXXVIII"</code>).  Your last loop would iterate 14 times, taking two letter substrings. </p>

<p>There are only 6 two letter negative combinations.  You could instead search for those 6 patterns:</p>

<pre><code>number += sum(value for key, value in checks.items() if key in s)
</code></pre>

<p>This is 6 <span class="math-container">\$O(N)\$</span> substring searches, instead of N <span class="math-container">\$O(1)\$</span> lookups.  Time complexity is unchanged, but this latter approach may be faster for many strings.  (It certainly will be slower for 1 character strings!)</p>

<hr>

<p><code>checks</code> and <code>values</code> are constants.  You should not recreate them every time you call the function.  Make them global, initialized once. </p>

<hr>

<p>PEP-8:</p>

<p>Variables and functions should be <code>snake_case</code>, not <code>camelCase</code>, so <code>romanToInt</code> should be <code>roman_to_int</code>.</p>

<p><code>s</code>  is too short to be descriptive.  <code>roman</code> might be better. </p>

<hr>

<p><code>self</code>?  This should be a function, not a method in a class.  If it is in a class, then use <code>@staticmethod</code>, since it doesn't use <code>self</code> (or <code>cls</code>) at all. </p>

<hr>

<p>Result:</p>

<pre><code>SUBTRACTIVE = {"IV": 2, "IX": 2, "XL": 20, "XC": 20, "CD": 200, "CM": 200}
VALUES = {"I": 1, "V": 5, "X":10, "L": 50, "C": 100, "D": 500, "M": 1000}

def roman_to_int(roman: str) -&gt; int:

    number = sum(VALUES[ch] for ch in roman)
    number -= sum(val for key, val in SUBTRACTIVE.items() if key in roman)

    return number
</code></pre>

<p><s>Although I'm not a fan of <code>CHECKS</code>, but a better concise name is escaping me.</s>  Now using <code>SUBTRACTIVE</code> as suggested by JollyJoker.</p>

<hr>

<h1>Speed Tests</h1>

<p>Execution time for parsing all Roman numerals from <code>I</code> to <code>MMMCMXCIX</code>, repeated 100 times, in seconds:</p>

<pre><code>somya_agrawal   1.288
ajneufeld       0.737
jg              1.521
jg2             1.324
maarten_bodewes 2.186
maarten_bodewes 1.653 (decode only)
</code></pre>

<p>It wasn't clear whether J.G. was using local variable or global variables for <code>checks</code> and <code>values</code> in their solution, so I coded it both ways.</p>

<h2>Speed Test Code</h2>

<pre><code>import time

def create_roman(value):
    roman = ""
    for letters, val in (("M", 1000),
                         ("CM", 900), ("D", 500), ("CD", 400), ("C", 100),
                         ("XC", 90), ("L", 50), ("XL", 40), ("X", 10),
                         ("IX", 9), ("V", 5), ("IV", 4), ("I", 1)):
        while value &gt;= val:
            roman += letters
            value -= val
    return roman

ROMAN_NUMERALS = [create_roman(value) for value in range(1, 4000)]

def somya_agrawal(s: str) -&gt; int:
    checks = {"IV":-2,"IX":-2, "XL":-20, "XC":-20, "CD":-200, "CM":-200}
    values = {"I":1, "V":5,"X":10, "L":50,"C":100, "D":500,"M":1000}
    sum = 0

    for i in s:
        sum += values[i]

    for i in range(len(s) - 1):
        combine = str(s[i] + s[i + 1])
        if combine in checks:
            sum += checks[combine]

    return sum

CHECKS = {"IV": 2, "IX": 2, "XL": 20, "XC": 20, "CD": 200, "CM": 200}
VALUES = {"I": 1, "V": 5, "X":10, "L": 50, "C": 100, "D": 500, "M": 1000}

def ajneufeld(roman: str) -&gt; int:
    number = sum(VALUES[ch] for ch in roman)
    number -= sum(val for key, val in CHECKS.items() if key in roman)

    return number

def jg(s: str) -&gt; int:
    checks = {"IV":-2,"IX":-2, "XL":-20, "XC":-20, "CD":-200, "CM":-200}
    values = {"I":1, "V":5,"X":10, "L":50,"C":100, "D":500,"M":1000}

    result = sum(values[i] for i in s)
    result += sum(checks.get(s[i : i + 2], 0) for i in range(len(s) - 1))

    return result

checks = {"IV":-2,"IX":-2, "XL":-20, "XC":-20, "CD":-200, "CM":-200}
values = {"I":1, "V":5,"X":10, "L":50,"C":100, "D":500,"M":1000}

def jg2(s: str) -&gt; int:

    result = sum(values[i] for i in s)
    result += sum(checks.get(s[i : i + 2], 0) for i in range(len(s) - 1))

    return result

def time_test(f):
    start = time.perf_counter()
    for _ in range(100):
        for roman in ROMAN_NUMERALS:
            f(roman)
    end = time.perf_counter()
    print(f"{f.__name__:15} {end-start:5.3f}")

if __name__ == '__main__':
    for f in (somya_agrawal, ajneufeld, jg, jg2):
        time_test(f)
</code></pre>
    </div>