<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After applying the suggestions the function has changed as follows.</p>

<pre class="lang-java prettyprint-override"><code>    static final double ln2;
    static final int twoExpLimit;
    static final double precision;
    static {
        int k = 0;
        int n = Integer.MAX_VALUE;
        while (n &gt; 1) {
            n /= 2;
            k++;
        }
        twoExpLimit = k;
        // WolframAlpha
        ln2 = 0.693147180559945309417232121458176568075500134360255254120;
        precision = 1.0e-16;
    }

    /**
     * No way to optimize that further.
     */
    static double lnApproximationPerfect(double x) {
        int exponent = 1;
        int twoExp = 2;
        while (x &gt; twoExp &amp;&amp; exponent &lt; twoExpLimit) {
            twoExp *= 2;
            exponent++;
        }
        x /= twoExp;

        double a = x - 1;
        double aIteration = a*a;
        double b = 1d;
        double bIteration = 2d;
        double c = x + 1;
        double cIteration = c*c;
        double d = a/c;
        double dIteration = aIteration/cIteration;
        double iteration = d/b;
        double ln = iteration;

        while (iteration &lt; -precision || iteration &gt; precision) {
            b += bIteration;
            d *= dIteration;
            iteration = d/b;
            ln += iteration;
        }
        return 2*ln + exponent*ln2;
    }
</code></pre>

<p>I've added a nicer way to approach the result by using a while-loop. Another thing I've added is the extraction of <span class="math-container">\$2^k\$</span> from <span class="math-container">\$ln(x)\$</span>, thus the approximation is simplified to <span class="math-container">\$ln(\frac{x}{2^k})+ln(2^k)\$</span>. This resolved the problem where the previous versions were getting very slow with growing <span class="math-container">\$x\$</span>.</p>

<p>I've tested it against <code>Math.log</code>.</p>

<pre class="lang-java prettyprint-override"><code>        long startTime;
        double testNumber = 3.14;
        double lnNative, lnCustom;
        long nativeTook, customTook;

        // Run the methods and print something for initialization.
        Math.log(testNumber - 1);
        lnApproximationPerfect(testNumber - 1);
        System.nanoTime();
        System.out.println("Start measurement:");

        {
            startTime = System.nanoTime();
            lnNative = Math.log(testNumber);
            nativeTook = System.nanoTime() - startTime;

            startTime = System.nanoTime();
            lnCustom = lnApproximationPerfect(testNumber);
            customTook = System.nanoTime() - startTime;
        }

        System.out.println("Native: " + nativeTook);
        System.out.println("Custom: " + customTook);
        System.out.println("Native result: " + lnNative);
        System.out.println("Custom result: " + lnCustom);
</code></pre>

<p>It's still slower but not by much. I guess you cannot beat handwritten assembly code. ^^</p>
    </div>