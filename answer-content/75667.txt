<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Pairing combinations like this is a very common thing to do in any language. There's a very 'idiomatic' way to do this type of operation:</p>

<pre><code>for (int i = 0; i &lt; length; i++) {
    for (int j = i + 1; j &lt; length; j++) {
        // do something with pair (i,j)
    }
}
</code></pre>

<p>You will see, and recognize this pattern anywhere.</p>

<p>Because that pattern is so recognizable, I prefer seeing it rather than the slicing and dicing your code does.</p>

<p>Additionally, since the formula for the number of iterations is so readily available, it makes sense to pre-size the output array you use. Pre-sizing the output array will make a significant performance difference.</p>

<p>Further, even though the 'classic' for loop is used here, the performance will be fine. Other systems requiring slices or maps of list subsets will require additional work which, despite being 'idiomatic', will not necessarily be faster:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function pairwise(list) {

    var pairs = new Array((list.length * (list.length - 1)) / 2),
        pos = 0;

    for (var i = 0; i &lt; list.length; i++) {
        for (var j = i + 1; j &lt; list.length; j++) {
            pairs[pos++] = [list[i], list[j]];
        }
    }
    return pairs;
}

var result = pairwise(['a', 'b', 'c', 'd', 'e']);
document.getElementById('output').innerHTML = JSON.stringify(result);  </code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;pre id="output"&gt;&lt;/pre&gt;</code></pre>
</div>
</div>

    </div>