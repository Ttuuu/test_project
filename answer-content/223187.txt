<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You must definitely call <code>handle.Free()</code> when finished using it so <code>GC</code> can do the cleaning.</p>

<hr>

<p>Note that <code>GCHandle.Alloc(objects, GCHandleType.Pinned);</code> only works for structs with pure primitive or to be more precise: blittable types. String fields etc. must be handled differently.</p>

<hr>

<p>A little optimization:</p>

<p>You repeatedly calculate this </p>

<blockquote>
  <p><code>var offset = Marshal.SizeOf&lt;MyObject&gt;() * i;</code></p>
</blockquote>

<p>Instead you can calculate <code>offset</code> once:</p>

<pre><code>var offset = Marshal.Sizeof&lt;MyObject&gt;();
</code></pre>

<p>and in the loop do:</p>

<pre><code>ptr = IntPtr.Add(ptr, offset);
</code></pre>

<hr>

<p>If you are willing/allowed to run in <code>unsafe</code> mode you can do:</p>

<pre><code>unsafe public void RunUnsafe()
{
  var objects = new MyObject[3];

  var handle = GCHandle.Alloc(objects, GCHandleType.Pinned);
  var ptr = GCHandle.ToIntPtr(handle);

  ArrayTest(ptr, objects.Length);
  MyObject* pobj = (MyObject*)ptr;

  for (int i = 0; i &lt; objects.Length; i++, pobj++)
  {
    Console.WriteLine((*pobj).X);
  }

  handle.Free();
}
</code></pre>

<hr>

<p>If you are entitled to modify the signature of <code>ArrayTest</code>, you can changed it to:</p>

<pre><code>    public extern static void ArrayTest([In, Out] MyObject[] objects, int length);
</code></pre>

<p>The <code>[In, Out]</code> attributes determines that the array should be marshaled both ways so that <code>ArrayTest</code> can work on the provided instances in the array <code>[In]</code>, and changes made in <code>ArrayTest</code> are reflected in the objects when the function returns <code>[Out]</code>.</p>

<p>Then your method can be simplified to:</p>

<pre><code>  var objects = new MyObject[3];

  ArrayTest(objects, objects.Length);

  foreach (var obj in objects)
  {
    Console.WriteLine(obj.X);
  }
</code></pre>
    </div>