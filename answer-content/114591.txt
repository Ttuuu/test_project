<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As @BenC mostly put a code dump, I'll explain ways that your code could have improved.</p>

<hr>

<h1><code>reverseIt</code></h1>

<p>Programming this is just <em>wrong</em> in Python.
This is as there are <em>two</em> ways to do this.</p>

<pre><code>&gt;&gt;&gt; list(reversed([1, 2, 3]))
[3, 2, 1]
&gt;&gt;&gt; [1, 2, 3][::-1]
[3, 2, 1]
</code></pre>

<p>As an alternate way to this you could just calculate the <code>range</code> backwards off the bat.</p>

<pre><code>&gt;&gt;&gt; list(range(10, 0, -1))
[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
</code></pre>

<p>In short you could halve your code just by removing this.</p>

<hr>

<p>If you wanted to keep it, then you would want to use the reversed range.
And do pretty much what you are now. To get:</p>

<pre><code>def reverseIt(indexable):
    lst = []
    for index in range(len(indexable) - 1, -1, -1):
        lst.append(indexable[index])
    return lst
</code></pre>

<p>You could then use a list comprehension, if amount of lines dictates how good your code is.</p>

<pre><code>def reverseIt(indexable):
    return [indexable[index] for index in range(len(indexable) - 1, -1, -1))]
</code></pre>

<hr>

<h1><code>allRolls</code></h1>

<ul>
<li><code>nums</code> is pointless if you use a different algorithm. (Which is also more intuitive.)</li>
<li><code>index</code> is never used.</li>
<li><code>retVal</code> can be changed to a comprehension.</li>
<li>Manually counting <code>cIndex</code> is a frowned upon in Python.</li>
</ul>

<p>In short, use a different algorithm.
The pseudo-code for this could be:</p>

<pre><code>fn allRolls(sides):
    list = List()
    for dice1-face in dice-faces:
        for dice2-face in dice-faces:
            add dice1-face + dice2-face to list
    return sorted list
</code></pre>

<p>Or in Python:</p>

<pre><code>fn allRoles(sides):
    ret = []
    for a in range(1, sides + 1):
        for b in range(1, sides + 1):
            ret.append(a + b)
    ret.sort()
    return ret
</code></pre>

<p>If you take it the next step then you would get @BenC's answer.</p>

<hr>

<h1>Misc</h1>

<p>In short, you just used the wrong algorithm.</p>

<p>And in Python you should:</p>

<ul>
<li>Use <code>all_rolls</code> instead of <code>allRoles</code> to follow <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">function and variable naming conventions</a>.</li>
<li>Have a space on both sides of operators, <code>index &gt;= 0</code> or <code>newb = []</code> to increase readability.</li>
</ul>
    </div>