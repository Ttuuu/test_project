<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Program that requests the user's first name and then the user's last name</p>
</blockquote>

<p><strong>Spaces can exist in names</strong></p>

<p>First names: "Betty Jo", "John Paul"</p>

<p>Last names: "Van Gogh" , <a href="https://answers.yahoo.com/question/index?qid=20100303075325AAlaap3" rel="nofollow noreferrer">"Smith Davis"</a></p>

<p><code>scanf("%s", &amp;lastName);</code> fails if the name contains a space.  Both first and last names, independently may contain embedded spaces.</p>

<p>Alternative:</p>

<pre><code>size_t trim(char *s) {
  char *start = s;
  while (isspace((unsigned char) *start)) {
    start++;  
  } 
  size_t len = strlen(start);
  while (len &gt; 0 &amp;&amp; isspace((unsigned char) start[len-1]) {
    len--;
  }
  start[len] = '\0';
  memmove(s, start, len + 1);
  return len;
} 

// return 1 on success
// return EOF on end-of-file/error (and no name read)
// return 0 otherwise (name too short (0), name too long)
size_t getname(const char *prompt, char *name, size_t sz) {
  fputs(prompt, stdout);
  fflush(stdout);
  char buffer[sz*2 + 2];  // allow for lots of extra leading, trailing spaces
  if (fgets(buffer, sizeof buffer, stdin) == NULL) {
    return EOF;
  }
  size_t len = trim(buffer);
  if (len == 0 || len &gt;= sz) {
    return 0;
  }
  memcpy(name, buffer, len + 1); // or strcpy(name, len)
  return 1;
}
</code></pre>

<p><strong>Names may well exceed 19 characters.</strong></p>

<p><a href="https://en.wikipedia.org/wiki/Hubert_Blaine_Wolfeschlegelsteinhausenbergerdorff_Sr." rel="nofollow noreferrer">600+ example</a></p>

<p><a href="https://www.npr.org/sections/thetwo-way/2013/12/31/258673819/hawaiian-woman-gets-ids-that-fit-her-36-character-last-name" rel="nofollow noreferrer">Hawaiian Woman Gets IDs That Fit Her 36-Character Last Name</a></p>

<p>Avoid hard coding such a small value.  Best to set as a defined constant.  The key point is production code get this value from a program specification.  <em>Be prepared</em> to adjust your code nimbly to handle that.</p>

<pre><code>#define NAME_FIRST_N 100
#define NAME_LAST_N 700

char firstName[NAME_FIRST_N];
if (getname("first name: ", firstName, sizeof firstName) != 1) {
  ; //Handle problem.
}

char lastName[NAME_LAST_N];
if (getname("last name: ", lastName, sizeof lastName) != 1) {
  ; //Handle problem.
}
</code></pre>

<p><strong>Alignment</strong></p>

<p>Simply prepend <code>"*"</code> to specify the width of the integer.</p>

<pre><code>//numOfWhitespace = strlen(lastName) - 1;
//printWhitespace(numOfWhitespace);
//printf("%d\n", strlen(lastName));

int len = (int) strlen(lastName));
printf("%*d\n", len, len);
//              ^^^------------- Minimum print width, pad with spaces.
</code></pre>
    </div>