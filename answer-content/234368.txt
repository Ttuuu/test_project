<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I get the sense that you might have a bit of thread-safety-related issues. Your code doesn't look totally comprehensive in that area. I might suggest a few minor tweaks.</p>

<p>The items that stand out to me are:</p>

<h2>HashSet</h2>

<pre><code>HashSet&lt;IDispatchedRequest&gt; _pendingHandlers;

// probably replace this with...
ConcurrentBag&lt;IDispatchedRequest&gt; _pendingHandlers;
</code></pre>

<p>In the case above, potentially running a unit test that sends multiple identical requests would throw an error in the <code>HashSet</code> as it has a unique constraint, and you also might run into a thread-safety issue too.</p>

<p>I also don't see a scenario where the <code>HashSet</code> is used beyond it being a generic collection. So, it looks like no harm to go with the <code>ConcurrentBag</code> option.</p>

<h2>Increment</h2>

<pre><code>_skippedTicks++;    // this doesn't look right to me

//replace it with somthing like this, or use a lock
Interlocked.Increment(ref _skippedTicks);
</code></pre>

<h2>Queue</h2>

<pre><code>Queue&lt;IDispatchedRequest&gt; _requestQueue; // may as well go concurrent here too
</code></pre>

<h2>Minor Comment</h2>

<p>I can't quite put my finger on it, but generally when I see a series of methods working together that look like this:</p>

<pre><code>private void Foo() { ... }
private async Task Bar() { ... }
</code></pre>

<p>I tend to question the design pattern <strong>(i.e. what can we do to make methods return meaningful types and more test-friendly?)</strong>. I haven't quite been able to digest the complexities with your scenario -- so I wish I had something more constructive to add here.</p>
    </div>