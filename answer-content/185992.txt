<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Wow, that's quite a lot of code. I bet there are some repeating patterns in it. Because when I compress it using <code>gzip -9</code>, it shrinks to 11.24% of the original size. For comparison, <a href="https://github.com/rillig/sfntly" rel="nofollow noreferrer"><code>sfntly</code></a> shrinks to 16.49%, which is 50% larger.</p>

<p>Let's hunt for some repetitions.</p>

<p>The string <code>47.37%</code> appears 19 times. 18 of these are in the table of probabilities, which is printed at three different places in the code. Since the text is exactly the same, you could extract this whole code into a method. This is something that your IDE (Eclipse, IntelliJ) can do for you. To do that, mark the code you want to extract and then press <kbd>Ctrl</kbd>+<kbd>1</kbd> in Eclipse or <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>M</kbd> in IntelliJ. You are then asked to give a nice name to this new method. You should choose <code>printProbabilitiesTable</code>, since that is a short and precise description of what the method does.</p>

<p>You can apply this code transformation to many other places, but they are not as simple to transform. You need some manual work for that. One other example is the <code>Thread.sleep</code> that you are calling. Select the whole <code>try { … } finally { … }</code> block and extract that to a method called <code>sleep</code>. It should look like this now:</p>

<pre><code>private static void sleep() {
    try { Thread.sleep(1000); } catch (InterruptedException ex) { Thread.currentThread().interrupt(); }
}
</code></pre>

<p>There is one ugly thing, though. The new <code>sleep</code> method always sleeps for exactly 1000 milliseconds, but in some places in your code you want to sleep longer. Therefore, the sleep method should get a <em>parameter</em>. To see how this is written in Java, place the text cursor on the <code>Thread.sleep</code> method and press F3 in Eclipse or F4 in IntelliJ. This takes you to the definition of this method. You can see the following code:</p>

<pre><code>public static native void sleep(long millis) throws InterruptedException;
</code></pre>

<p>Ok, this doesn't help much because of the <code>native</code>, since you cannot really see what this method is doing. Let's try another one. Place the cursor on the <code>println</code> of <code>System.out.println("")</code> and press F3/F4 again. You should land on the following code:</p>

<pre><code>public void println(String x) {
    synchronized (this) {
        print(x);
        newLine();
    }
}
</code></pre>

<p>This tells you how to define a method that takes some parameter, in this case <code>x</code>, and how to use this parameter. (It's used exactly like an ordinary variable.) When we combine the two above methods, we can reach the following definition for our <code>sleep</code> method:</p>

<pre><code>private static void sleep(long millis) {
    try { Thread.sleep(millis); } catch (InterruptedException ex) { Thread.currentThread().interrupt(); }
}
</code></pre>

<p>Now you can replace all calls to <code>Thread.sleep</code> with calls to your own <code>sleep</code> method. This makes the code nicer to read since you don't need to write the <code>try { … }</code> anymore.</p>

<p>You can continue with the same idea and invent a method for letting the user choose from a predefined set of options. The skeleton of this method looks like this:</p>

<pre><code>private static String choose(String... options) {
    …
}
</code></pre>

<p>This method would be called like this:</p>

<pre><code>String answer = choose("yes", "no");
switch (answer) {
case "yes":
    // Do something here
    break;
case "no":
    // Do something else here
    break;
}
</code></pre>

<p>Or, if the <code>String... options</code> is too difficult still, just try the simple form:</p>

<pre><code>private static boolean yesno(String prompt) {
    …
}
</code></pre>

<p>It would be used like this:</p>

<pre><code>if (yesno("Do you want to put a bet on Red?")) {
    // Code for the Red bet
} else {
    // Code for the Black bet
}
</code></pre>

<blockquote>
  <p>Here's the full implementation of the <code>choose</code> method, if you want to cheat. I recommend you try it on your own, first.</p>
  
  <p><a href="https://codereview.stackexchange.com/a/180451">https://codereview.stackexchange.com/a/180451</a></p>
</blockquote>
    </div>