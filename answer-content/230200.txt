<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good effort to get your code working so far. But your code is highly unusual.</p>

<p>You've got the class <code>Question</code> which has an <code>id</code> and <code>question_txt</code>, but each <code>Question</code> also has a reference to a JSONArray of all the questions. Worse than that, for each <code>Question</code>, when you create a new Question and set its reference to all questions, it will come from the API each time.</p>

<p>You've recognised that the behaviour of getting <code>Question</code>s from the API might belong in the <code>Question</code> class (or related class), instead of forcing <code>main</code> (or whatever consumer) to know the details of the API. But it's surely not the responsibility of a single <code>Question</code> instance to fetch all the <code>Question</code>s.</p>

<p>You want the class <code>Question</code> to hold it's data first (and later, some behaviour), so here's a typical data class. </p>

<pre class="lang-java prettyprint-override"><code>public class Question {

    private int id;
    private String text;

    public Question (int i, String s) {
        this.id = i;
        this.text = s;
    }

    public int getId() {
        return id;
    }

    public String getText() {
        return text; 
    }

}
</code></pre>

<p>You'll see this type of class referred to  as Java Bean or POJO. In this case, because we've used <code>private</code> and only provided <code>get</code> methods, this is a read-only object after its been created.</p>

<p>Then add some behaviour to the <em>class</em> (meaning we're going to use the <code>static</code> keyword) for retrieving the questions:</p>

<pre class="lang-java prettyprint-override"><code>public static List&lt;Question&gt; fetchQuestions () throws JSONException, IOException {

    HttpURLConnection connection = (HttpURLConnection) new URL("url_to_my.php").openConnection();
    connection.setRequestMethod("GET");
    connection.setRequestProperty("Content-length", "0");
    connection.setUseCaches(false);
    connection.setConnectTimeout(0);
    connection.setReadTimeout(0);
    connection.connect();
    int status = connection.getResponseCode();
    if (!(status == 200 || status == 201)) {
        throw new IOException("Bad status code: " + status);
    }

    BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
    StringBuilder sb = new StringBuilder();
    String line;
    while ((line = br.readLine()) != null) {
        sb.append(line + "\n");
    }
    br.close();
    String response = sb.toString();

    List&lt;Question&gt; questions = new ArrayList&lt;Question&gt;();
    for (Object arrayItem: new JSONArray(response)) {
        JSONObject questionAsJSON = (JSONObject) arrayItem; // throws on unexpected response format
        questions.add(new Question(questionAsJSON.getInt("id"), 
                questionAsJSON.getString("Question")));
    }

    return questions;

}
</code></pre>

<p>And then when we want to grab the questions from the API, it's just a case of invoking the static method:</p>

<pre class="lang-java prettyprint-override"><code>List&lt;Question&gt; questionnaire = Question.fetchQuestions();
</code></pre>
    </div>