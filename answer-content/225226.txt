<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Many areas to comment here.</p>

<p>Well done on including <code>Option Explicit</code> and good indenting!</p>

<p>I have identified some key themes:</p>

<ul>
<li>Avoiding repetition</li>
<li>Avoid magic numbers</li>
<li>Meaningful variable names</li>
<li>Avoid switching between Excel and VBA unless really necessary</li>
<li>Properly qualify calls to Excel objects</li>
</ul>

<h2>Avoiding repetition</h2>

<p>While there is not a lot of obvious repetition, avoiding it as much as possible makes maintenance easier. A significant example here is in your <code>Select</code> statement:</p>

<pre><code>            Case "PNT", "VLG", "SAW"
                Call pvtPutOnSheet(oFile.Path, 1, v)
</code></pre>

<p>This has multiple sins:</p>

<ul>
<li>the same call is repeated 12 times</li>
<li>the call uses magic numbers</li>
<li>the call uses a variable which is not clear what it does (<code>v</code>)</li>
</ul>

<p>A way around it is:</p>

<pre><code>Select Case fileNameParts(3)
    Case "PNT", "VLG", "SAW"
        relevantSheet = 1
' [. . . ]
End Case
PutOnSheet oFile.Path, relevantSheet, fileNameParts '&lt;-- proper VBA syntax for calling a routine
</code></pre>

<h2>Avoid magic numbers</h2>

<p>'Magic Numbers' make life harder when returning to code, or if someone else looks at your code. Why do you have '1'? what does '13' mean? What if your filename syntax changes, and you need <code>v(4)</code> instead of <code>v(3)</code>?</p>

<p>In one of my code projects, I have set a module aside (imaginatively called 'MagicNumbers') in which I declare all magic numbers as <code>Public Const</code>. While they may not need to be public (your file path <code>Const</code> is an example here), putting them in once place makes management easier - and makes retiring them easier when you modify your code.</p>

<p>I also use a convention, all Constants are in UPPERCASE, and have meaningful names so the code is self-commenting.</p>

<pre><code>Public Const FINALFILEPATH As String = "\\JACKSONVILLE-DC\Common\SOP's for JV\SOPs Final"
</code></pre>

<p>(and an example of use)</p>

<pre><code>Set oFolder = oFSO.GetFolder(FINALFILEPATH)
</code></pre>

<h2>Meaningful variable names</h2>

<p>You will come back in 3 months and have to work out what <code>v</code>, <code>i</code>, <code>iSheet</code>, <code>r</code>, <code>cel</code>, <code>sPath</code>, <code>SOPID</code> really represent. In this day and age, storage is cheap so using meaningful names makes your life a lot easier.</p>

<ul>
<li><code>v</code> is an array of <code>fileNameParts</code></li>
<li><code>i</code> has been used both as an <code>iterator</code> and a <code>relevantWorkSheet</code></li>
<li><code>iSheet</code> is not a bedcovering sold by Apple, but is also not used in
the code</li>
<li><code>r</code> is the <code>lastCell</code>, but what you are really interesting in is
<code>nextEmptyCell</code></li>
<li><code>sPath</code> is <code>filePath</code></li>
</ul>

<p>And your functions and routines should also be well named. <code>pvtPutOnSheet</code> is really <code>PutOnSheet</code> - no need for a funky Hungarian notation.</p>

<h2>Avoid switching</h2>

<p>Do as much as possible in the VBA environment. Use arrays instead of dealing directly with Excel range values.</p>

<pre><code>For Each ws In ThisWorkbook.Worksheets
    ws.Cells.ClearContents
    ws.Cells.Interior.Color = xlNone
    ws.Range("A1").Value = "SOP ID"
    ws.Range("B1").Value = "DEPT"
    ws.Range("C1").Value = "SOP TITLE"
    ws.Range("D1").Value = "LANG"
    ws.Range("E1").Value = "JAN"
    ws.Range("F1").Value = "FEB"
    ws.Range("G1").Value = "MAR"
    ws.Range("H1").Value = "APR"
    ws.Range("I1").Value = "MAY"
    ws.Range("J1").Value = "JUN"
    ws.Range("K1").Value = "JUL"
    ws.Range("L1").Value = "AUG"
    ws.Range("M1").Value = "SEP"
    ws.Range("N1").Value = "OCT"
    ws.Range("O1").Value = "NOV"
    ws.Range("P1").Value = "DEC"
    ws.Range("A1:P1").Font.Color = vbBlack
    ws.Range("A1:P1").Font.Bold = True
    ws.Range("A1:P1").Font.Underline = False
Next ws
</code></pre>

<p>Can become:</p>

<pre><code>Dim headings as Variant
headings = Array("SOP ID", "Dept", "SOP Title", "...") '&lt;--- etc, you get the idea
For Each ws In ThisWorkbook.Worksheets
    ws.Cells.ClearContents
    ws.Cells.Interior.Color = xlNone
    With ws.Range("A1:P1") ' Magic number Const HEADINGRANGE as String = "A1:P1"
        .Value = headings '&lt;-- touch Excel once here instead of 16 times.
        .Font.Color = vbBlack
        .Font.Bold = True
        .Font.Underline = False
    End With
Next ws
</code></pre>

<h2>Properly qualify calls</h2>

<p>You have a mixture of well qualified calls (ensuring correct behaviour) and unqualified calls (random behaviour depending on active and selected sheets).</p>

<p>The following is an easy omission to make:</p>

<pre><code>    With Worksheets(i)
        'Set cell background color to Red for a range of cells
        With Range("E1:P" &amp; .Cells(.Rows.Count, 1).End(xlUp).Row)
</code></pre>

<p>I think you meant <code>.Range</code>, but that now works on the active sheet, and not <code>Worksheets(i)</code></p>

<h2>Miscellaneous</h2>

<p>Functions should return something, and better coding practice is to strongly type this, rather than leaving an implied variant.</p>

<pre><code>Function RemoveLeadingZeroes(ByVal str) as String
</code></pre>

<p>Early bind instead of late bind - it is more efficient (except when working across different Windows versions or different Office versions). It also allows for intellisense which makes coding and debugging a lot easier!</p>

<pre><code>' Add reference to Scripting so you can natively access the FileSystemObject
Dim oFSO As FileSystemObject
Dim oFolder As Folder
Dim oFiles As Files
Dim oFile As File

Set oFSO = New FileSystemObject
Set oFolder = oFSO.GetFolder(FolderPath)
Set oFiles = oFolder.Files
</code></pre>

<p>Put each line of code on a separate line - this makes it easier to find, read and debug. If your code is reaching the VBA IDE maximum, then it is time to review the code and how it is broken up. As an example:</p>

<pre><code>Dim oFSO As Object: Set oFSO = CreateObject("Scripting.FileSystemObject")
</code></pre>

<p>should be</p>

<pre><code>Dim oFSO As Object
Set oFSO = CreateObject("Scripting.FileSystemObject")
</code></pre>

<p>or, in line with previous comment:</p>

<pre><code>Dim oFSO As FileSystemObject
Set oFSO = New FileSystemObject
</code></pre>
    </div>