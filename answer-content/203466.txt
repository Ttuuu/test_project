<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To calculate the complexity of any algorithm, you have to check how many basic operations that algorithm performs. In your case, your basic operation is <code>suma += A[k][p];</code>. That operation will take up the majority of your runtime.</p>

<p>So, how many times is that line of code executed? To calculate that, we count the loops:</p>

<ol>
<li><code>for(int i = 0;i &lt;= M - m;i++)</code> executes \$M-m\$ times</li>
<li><code>for(int j = 0;j &lt;= N - n;j++)</code> executes \$N-n\$ times for each iteration in (1)</li>
<li><code>for(int k = i;k &lt; i + m;k++)</code> executes \$m\$ times for each iteration in (2)</li>
<li><code>for(int p = j; p &lt; j + n;p++)</code> executes \$n\$ times for each iteration in (3)</li>
</ol>

<p>To get the result, just multiply them together:</p>

<p>\[O((M-m)(N-n)mn) = O(MNmn + m^2n^2-Mmn^2 - Nm^2n)\]</p>

<p>From your sketch, it looks like \$m, n\$ are relatively small compared to \$M, N\$. If this is the case, or if \$m&lt;N\$ and \$n&lt;M\$,you can simplify the above formula:</p>

<p>\[\approx O(MNmn)\]</p>
    </div>