<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I got a <em>pass</em> verdict with the following code.</p>

<p>Some comments:</p>

<ul>
<li>Moved from <code>int</code>s to <code>string::const_iterator</code>s. Inefficiency was here.</li>
<li>Didn't move to <code>isspace</code>. I'm sure it is a better option if efficiency is not <em>that</em> important, but failed in efficiency terms.</li>
<li>I've simplified the recursion decision block.</li>
</ul>

<p>The code:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;sstream&gt;

using std::string;
using std::cin;
using std::cout;

typedef string::const_iterator it;


/**
 * Returns the evaluation of a completely parenthesed expression.
 * 
 * Preconditions:
 *     * i and j point to characters of expr.
 *     * expr is a completely parenthesed expression.
 * 
 * Postcondition: returns the evaluation of expr[i..j].
 */
int evaluate(const string&amp; expr, it i, it j)
{
    // Skip leading blanks
    while (*i == ' ') {
        ++i;
    }
    while (*j == ' ') {
        --j;
    }

    // Base case
    if (i == j) {
        return *i - '0';
    }

    // Recursive case
    // Skip first and last parentheses
    ++i;
    --j;
    int open_parentheses = 0;
    it end_i = i;
    // Loop invariant:
    //     * expr[i..end_i) is part of the first subexpression of expr[i..j]
    //     * open_parentheses is the balance of opened and closed parentheses of expr[i..end_i)
    while (open_parentheses &gt; 0 || (*end_i != '+' &amp;&amp; *end_i != '-' &amp;&amp; *end_i != '*')) {
        if (*end_i == '(') {
            ++open_parentheses;
        }
        else if (*end_i == ')') {
            --open_parentheses;
        }
        ++end_i;
    }
    // Loop ending: *end_i is the 'main' operation of expr[i..j]

    char operation = *end_i;

    it begin_j = end_i;
    ++begin_j;
    --end_i;
    int first = evaluate(expr, i, end_i);
    if (operation == '*') {
        if (first == 0) {
            return 0;
        } else {
            int second = evaluate(expr, begin_j, j);
            return first * second;   
        }
    } else {
        int second = evaluate(expr, begin_j, j);
        if (operation == '+') {
            return first + second;
        } else {
            return first - second;
        }
    }
}


int main()
{
    string expr;
    getline(cin, expr);
    it i, j;
    i = expr.begin();
    j = expr.end();
    --j;
    cout &lt;&lt; evaluate(expr, i, j) &lt;&lt; "\n";
}
</code></pre>
    </div>