<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good work! While there is certainly room for improvement, it is good that you stuck it out and discovered a solution on your own.</p>

<ol>
<li><pre><code>def monthcheck(month):
    if month &gt; 0 and month &lt;= 12: ## If month is between 1 and 12, return True.
        return True
    else:
        return False
</code></pre>

<p>Can be more succinctly written as</p>

<pre><code>def monthcheck(month):
    return 0 &lt; month &lt;= 12
</code></pre></li>
<li><p>While writing comments for practically every line of code can help you learn, and is a good way to keep track of where you are when working through pseudocode, don't just write what the code already told you.</p></li>
<li><p>PEP 8 - the style guide for Python - <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="noreferrer">recommends</a> using <code>snake_case</code> for naming functions, so <code>monthcheck</code> would become <code>month_check</code>.</p></li>
<li><p>What happens if I input "test" when asked for a date? The program crashes. It's a good idea to validate that any input from the user is in the format you expect.</p></li>
<li><p>The program asks for input in the format <code>mm/dd/yyyy</code> but will accept <code>m/d/y</code>, which probably isn't desired. </p></li>
<li><p><a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="noreferrer">Don't compare explicitly to <code>True</code> / <code>False</code></a></p>

<pre><code>if monthvalidity == True and dayvalidity == True and yearvalidity == True:
</code></pre>

<p>Can be more easily read if it is written as</p>

<pre><code>if monthvalidity and dayvalidity and yearvalidity
</code></pre></li>
<li><p><code>daycheck</code> has several locations in which it could be improved. You could use a dictionary (as heather does), but if you haven't learned about those yet, you can still improve the algorithm. </p>

<ul>
<li>Python's <code>in</code> operator can also check if a value is in a list, so instead of looping over <code>monthlist1</code> and <code>monthlist2</code>, you can just check <code>if month in monthlist1</code>. </li>
<li>Since <code>monthlist1</code> doesn't really describe what is in the variable, and I am having difficulty coming up with a better name, I would just inline the list with <code>if month in [1, 3, 5, 7, 8, 10, 12]</code> and add a clarifying comment.</li>
</ul></li>
<li><p>Don't be afraid to use natural sounding variable names. I believe <code>monthcheck</code> is better named <code>is_month_valid</code>.</p></li>
<li><p>What about negative numbers? <code>1/1/-111</code> is apparently a valid date. This might be desired, but probably deserves a comment.</p></li>
<li><p>Converting numbers to strings to determine the size is generally not a good idea, and can get you into trouble in more complex cases with floats / doubles. I would prefer the check <code>1 &lt;= year &lt; 10000</code>.</p></li>
<li><p>There is no need to have <code>str()</code> around an input function, <code>input</code> returns a string already.</p></li>
</ol>

<hr>

<p>Python, as a "batteries included" language, has a feature that can do this for us! In production code, this is what you should use.</p>

<pre><code>from datetime import datetime

def main():
    user_input = input('Enter the date in mm/dd/yyyy format: ')

    try:
        datetime.strptime(user_input, '%m/%d/%Y')
        print('The date {} is valid.'.format(user_input))
    except ValueError:
        print('The date {} is invalid'.format(user_input))


if __name__ == '__main__':
    main()
</code></pre>

<p>This was rather long, but don't worry! It is completely normal to get a lot of feedback when you are starting out. The more you code, the more natural it becomes.</p>
    </div>