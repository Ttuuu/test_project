<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The functional approach is almost certainly faster despite having worse big-O — <span class="math-container">\$O(j \cdot s)\$</span> functional vs <span class="math-container">\$O(j + s)\$</span> imperative — because linear searches of small arrays are <a href="https://stackoverflow.com/a/48031382/2570502">very fast</a>. </p>

<p>You don't need to destructure <code>j</code> and adding a boolean to a number coerces the boolean to 0 or 1.  </p>

<p><code>sum</code> is a better name than <code>num</code> and <code>c</code> is a good name for a character iterator.</p>

<pre><code>const findNumberOfJewels = (j,s) =&gt; [...s].reduce( (sum, c) =&gt; sum + j.includes(c),  0 );
</code></pre>
    </div>