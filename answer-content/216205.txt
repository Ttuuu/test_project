<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some of this is nit-pickery, some is more fundamental:</p>

<p><strong>Import Order</strong></p>

<p><a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="noreferrer">PEP-8</a> suggests an ordering to imports. No reason not to use it:</p>

<blockquote>
  <p>Imports should be grouped in the following order:</p>

<pre><code>Standard library imports.
Related third party imports.
Local application/library specific imports.
</code></pre>
  
  <p>You should put a blank line between each group of imports.</p>
</blockquote>

<p><strong>Code Organization: Constants</strong></p>

<p>You have a bunch of "constants" defined. They're all-caps, which is good. They're declared together and at the top of the file, which is good. But they really shouldn't be global constants.</p>

<p>For example, you have a <code>Ball</code> class. Yet there are global constants named <code>BALL_COLOR</code> and <code>BALL_OUTLINE_COLOR</code> and <code>BALL_RADIUS</code>. Why is that? If they're related to your class, make them class constants.</p>

<pre><code>class Ball:
    BODY_COLOR = (255, 255, 255)
    OUTLINE_COLOR = (255, 0, 0)
    RADIUS = 10
</code></pre>

<p><strong>Code Organization: Types</strong></p>

<p>In the same vein, you make a lot of use of tuples. But you just create them in-line and rely on convention to access them. Why not go ahead and use a <a href="https://docs.python.org/3/library/collections.html?highlight=collections%20namedtuple#collections.namedtuple" rel="noreferrer"><code>collections.namedtuple</code></a> or even two?</p>

<pre><code>import collections

Size = collections.namedtuple('Size', 'width height')
Position = collections.namedtuple('Position', 'x y')

WINDOW_SIZE = Size(width=1500, height=800)
START_POS = Position(x=0.5 * WINDOW_SIZE.width, y=0.99 * WINDOW_SIZE.height)
</code></pre>

<p><strong>Code Organization: Functions</strong></p>

<p>You have a lot of stuff at module scope. Sooner or later you'll want to either write a unit test, or run the debugger, or load your code into the command-line Python REPL. All of this is made easier if you move the module-scope statements into a <code>main</code> function, or some other-named function.</p>

<pre><code>def main():
    pg.init()
    pg.display.set_caption('Golf')
    ... etc ...
</code></pre>

<p>You have a set of font/color variables that you create at module scope. There aren't currently enough drawing functions to create a <code>Window</code> class or anything, but you might consider putting them into a <code>Config</code> class. (And using <code>snake_case</code> names.)</p>

<p>Also, you have a lot of <code>pygame</code> boilerplate mixed in with your game logic. I'd suggest separating the boilerplate into separate functions, something like:</p>

<pre><code>while still_playing:
    handle_events()
    update()
    render()  # You call this "draw_window()" which is fine.
</code></pre>

<p>Most of your logic, of course, will be in <code>update()</code>. In fact, since it mostly has to do with updating the position of the <code>Ball</code> object, it should mostly be in a call to <code>ball.update_position(delay)</code> (or some such name).</p>

<p>You make use of a pair of temporaries <code>x</code> and <code>y</code>, but it seems like you could replace those with an old-position attribute on the <code>Ball</code>, or a second Ball object, or something.</p>
    </div>