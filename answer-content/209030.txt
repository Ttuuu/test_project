<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First let's go over some code-style issues :)</p>

<p><strong>1. Usings</strong></p>

<p>You have a lot of using that you don't need. Only include the namespaces you need. If you feel fancy you can even sort them alphabetically or by "system/lib/custom" or length</p>

<pre><code>using System.IO;
using System.Drawing;
using System.Diagnostics;
using System.Drawing.Imaging;
using System.Collections.Generic;
using System.Runtime.InteropServices;

using Accord.Video.FFMPEG;
</code></pre>

<p><strong>2. Consistency</strong></p>

<p>Most of the time, you can "define" your own style. The only important thing is to be consistent when applying it. Little things like this really matter!</p>

<p>You choose to not directly access namespaces and use <code>usings</code>. But in line 115, you choose to access the <code>System.Drawings</code> namespace manually. So I would change it from</p>

<p>From <code>Bitmap imageFrame = System.Drawing.Image.FromFile(imageLocation) as Bitmap;</code></p>

<p>To <code>Bitmap imageFrame = Image.FromFile(imageLocation) as Bitmap;</code></p>

<p>Another thing you seem to be on the fence about is if you like to use the "this." prefix when accessing members. The .NET default is not using the "this." prefix when not needing it, so I would follow that standard.</p>

<p>From <code>this.bounds = b;</code></p>

<p>To <code>bounds = b;</code></p>

<p>Also, I would always give classes an access modifier, it at least makes you think about if you should expose it.</p>

<p>The following snippet is <a href="https://stackoverflow.com/questions/329355/cannot-delete-directory-with-directory-deletepath-true">copy/pasted</a> from SO.</p>

<pre><code>private static void DeletePath(string target_dir)
{
    string[] files = Directory.GetFiles(target_dir);
    string[] dirs = Directory.GetDirectories(target_dir);

    //Delete each screenshot:
    foreach (string file in files)
    {
        File.SetAttributes(file, FileAttributes.Normal);
        File.Delete(file);
    }

    //Delete the path:
    foreach (string dir in dirs)
    {
        DeletePath(dir);
    }

    Directory.Delete(target_dir, false);
}
</code></pre>

<p>While copy/pasting is not a problem. Not updating the code-style when updating is. Everywhere in your code
you used <code>lowerCamelCase</code> for parameters this answer uses <code>snake_case</code>.</p>

<p>To var or not to var? Be consistent in your var or explicit type usage.</p>

<p><strong>3. Naming</strong></p>

<ul>
<li>Avoid single-letter variable names.</li>
<li>Avoid abbreviations.</li>
</ul>

<p><code>tempPath</code> is the path screenshots are stored, Rename it to <code>screenshotPath</code></p>

<p><code>outputPath</code> is the path for the videos, Rename it to <code>videoPath</code></p>

<p>The constructor parameter <code>outPath</code> is the path to the <code>videofile</code>.</p>

<p><strong>4. Structure</strong></p>

<p>If you access native methods, It is common to put them in a special class named "NativeMethods"</p>

<p>So I would change</p>

<pre><code>[DllImport("winmm.dll", EntryPoint = "mciSendStringA", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
private static extern int record(string lpstrCommand, string lpstrReturnString, int uReturnLength, int hwndCallback);
</code></pre>

<p>To</p>

<pre><code>public static class NativeMethods
{
    [DllImport("winmm.dll", EntryPoint = "mciSendStringA", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int record(string lpstrCommand, string lpstrReturnString, int uReturnLength, int hwndCallback);
}
</code></pre>

<p>This has advantages and disadvantages. If you don't like that the method is public now, then you should probably build a proper abstraction around it.</p>

<p>Member ordering, is another thing that could be considered. I mean first public then private methods.</p>

<p><strong>5. Language Features</strong></p>

<p>Use an object initializer</p>

<p>From:</p>

<pre><code>ProcessStartInfo startInfo = new ProcessStartInfo();
startInfo.CreateNoWindow = false;
startInfo.FileName = "cmd.exe";
startInfo.WorkingDirectory = outputPath;
startInfo.Arguments = args;
</code></pre>

<p>To:</p>

<pre><code>ProcessStartInfo startInfo = new ProcessStartInfo
{
    CreateNoWindow = false,
    FileName = "cmd.exe",
    WorkingDirectory = outputPath,
    Arguments = args
};
</code></pre>

<p>You may want to use getters to avoid the mess that are the paths in this program.</p>

<p><strong>6. Misc</strong></p>

<p>You dont need the verbatim string here:</p>

<pre><code>startInfo.WorkingDirectory = @"" + outputPath;
</code></pre>

<p>Use <code>string.Emptry</code> instead of <code>""</code></p>

<pre><code>startInfo.WorkingDirectory = string.Emptry + outputPath;
</code></pre>

<p>Remove useless string concat</p>

<pre><code>startInfo.WorkingDirectory = outputPath;
</code></pre>

<p>Your "RecordVideo" function does not really record a video, but rather captures a frame of the final video.</p>

<p>Inline variables that are only used once!
Remove redundant extra whitespace/newlines!</p>

<p>Make local constants class accessible or inline them ("width", "height", "framerate")!
In this case, they are not really "Magic-numbers" since you use them in a method, which have parameter names.</p>

<hr>

<p>Now, let us go over some functionality issues.</p>

<p>I won't change the Architecture of the code. But as a side note, your current design does way too much...</p>

<p>It handles files, recording, processes of the video and much more, split things up and consider SRP - One class, one thing to do. :)</p>

<p><strong>A. File Managment</strong></p>

<p>I have a lot of issues with this piece of code.</p>

<pre><code>//Create temporary folder for screenshots:
if (Directory.Exists("D://"))
{
    string pathName = "D://tempScreenCaps";
    Directory.CreateDirectory(pathName);
    tempPath = pathName;
}
else
{
    string pathName = "C://Documents//tempScreenCaps";
    Directory.CreateDirectory(pathName);
    tempPath = pathName;
}
</code></pre>

<p>First of all. You want a temporary place to store files? Sounds like a common requirement for programs... If windows only had some solution for this...</p>

<p>The <code>temp</code> directory to the rescue!</p>

<blockquote>
  <p>If you want to use the files later, you can either copy the files from temp or ask the user for a directory or use <code>Environment.GetFolderPath(Environment.SpecialFolder.CommonVideos);</code> But do not just assume folders exist. For example, the Documents folder on windows does not have to be on "C://"</p>
</blockquote>

<p>You can get a path to a file to write to, in the temp directory with:</p>

<p><code>Path.GetTempFileName();</code></p>

<p>Or alternatively, if you want to stick with the "folder" approach, you can get the path to the temp directory via</p>

<p><code>Path.GetTempPath();</code></p>

<p>This way, you will be guaranteed to get a valid path and don't have to mess with the user not having a "D" drive for example.</p>

<p>This is how I would update it, I would make my life easier and just have everything in one folder:</p>

<pre><code>public ScreenRecorder(Rectangle screenCaptureBounds)
{
    //Create temporary folder for screenshots:
    var tempDirectory = Path.GetTempPath() + "/myappname";
    Directory.CreateDirectory(tempDirectory);

    videoPath = tempDirectory + "/video";
    screenshotPath = tempDirectory + "/screenshots";

    Directory.CreateDirectory(videoPath);
    Directory.CreateDirectory(screenshotPath);

    bounds = screenCaptureBounds;
}
</code></pre>

<p>As a side note, It is kinda "meh" that this code is in the constructor.</p>

<p><strong>B. Using usings</strong></p>

<p>"Usings" can be stacked like this:</p>

<pre><code>using (Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height))
using (Graphics g = Graphics.FromImage(bitmap))
{
    //Add screen to bitmap:
    g.CopyFromScreen(new Point(bounds.Left, bounds.Top), Point.Empty, bounds.Size);

    //Save screenshot:
    string name = tempPath + "//screenshot-" + fileCount + ".jpeg";
    bitmap.Save(name, ImageFormat.Jpeg);
    inputImageSequence.Add(name);
    fileCount++;
}
</code></pre>

<p>You don't need the <code>bitmap.Dispose()</code> call, the using block will automatically manage the <code>IDisposable</code> for you. The same goes for <code>vFWriter.Close()</code></p>

<p><strong>C. Avoid writing to files</strong></p>

<p>It is slow. Instead store thing in memory.</p>

<blockquote>
  <p>This could be a Problem if you plan on storing lots of images though.</p>
</blockquote>

<p><strong>D. Use Functions and extract things</strong></p>

<p>Take for example your <code>Stop</code> Method. It does way too much.
As a good rule of thumb, everywhere where you added a comment you could make the following
code block its own function.</p>

<p><strong>E. Prepare for the unexpected</strong></p>

<p>When the user of your program exits/your program crashes before your code invokes <code>Stop()</code> all files will stay.
You could add a de-constructor or implement the <code>IDisposable</code> pattern.</p>

<p>The moment you call stop, you delete the "screenshots" folder, meaning you can't capture any more screenshots.
Either you should check if the folder exists in the "CaptureFrame" Method or throw an exception.</p>

<p><strong>F. Improving video quality</strong></p>

<p>If you do not want to switch your whole approach to the capturing the frames and video, your best bet would
be switching from <code>jpeg</code> to <code>png</code> for your screenshots. PNG is bigger but a lossless format.</p>

<p><strong>G. Bugs</strong></p>

<p>Audio is not correctly added to the video. (I don't know if I introduced this thought... :( )</p>

<p>If the frames are not captured at 15fps your video will look wired, since it is not considering the time frame
between the capture of the frames.</p>

<p><strong>UPDATED CODE</strong></p>

<pre><code>using System.IO;
using System.Drawing;
using System.Diagnostics;
using System.Drawing.Imaging;
using System.Collections.Generic;
using System.Runtime.InteropServices;

using Accord.Video.FFMPEG;

namespace WorkTracker
{
    public static class NativeMethods
    {
        [DllImport("winmm.dll", EntryPoint = "mciSendStringA", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
    #pragma warning disable IDE1006 // Naming Styles
        public static extern int record(string lpstrCommand, string lpstrReturnString, int uReturnLength, int hwndCallback);
    #pragma warning restore IDE1006 // Naming Styles
    }

    public static class DirectoryUtil
    {
        public static void DeletePathRecursive(string targetDirectory)
        {
            string[] files = Directory.GetFiles(targetDirectory);
            string[] dirs = Directory.GetDirectories(targetDirectory);

            //Delete each screenshot:
            foreach (string file in files)
            {
                File.SetAttributes(file, FileAttributes.Normal);
                File.Delete(file);
            }

            //Delete the path:
            foreach (string dir in dirs)
            {
                DeletePathRecursive(dir);
            }

            Directory.Delete(targetDirectory, false);
        }
    }

    public class ScreenRecorder
    {
        private readonly Rectangle bounds;

        private string TempBasePath =&gt; Path.Combine(Path.GetTempPath(), "myappname");

        private string VideoFolderPath =&gt; Path.Combine(TempBasePath, "video");
        private string FramesFolderPath =&gt; Path.Combine(TempBasePath, "frames");

        private readonly string audioFileName = "mic.wav";
        private readonly string videoFileName = "video.mp4";
        private readonly string outputVideoName = "outPutFile.mp4";

        private string VideoFilePath =&gt; Path.Combine(VideoFolderPath, videoFileName);
        private string AudioFilePath =&gt; Path.Combine(VideoFolderPath, audioFileName);

        private int fileCount = 1;
        private readonly List&lt;string&gt; VideoFrames = new List&lt;string&gt;();

        public ScreenRecorder(Rectangle screenCaptureBounds)
        {
            Directory.CreateDirectory(TempBasePath);
            Directory.CreateDirectory(VideoFolderPath);
            Directory.CreateDirectory(FramesFolderPath);

            bounds = screenCaptureBounds;
        }

        public void CaptureFrame()
        {
            using (var bitmap = new Bitmap(bounds.Width, bounds.Height))
            using (var graphics = Graphics.FromImage(bitmap))
            {
                //Add screen to bitmap:
                graphics.CopyFromScreen(new Point(bounds.Left, bounds.Top), Point.Empty, bounds.Size);

                //Save screenshot:
                SaveFrame(bitmap);
            }
        }


        public void CaptureAudio()
        {
            NativeMethods.record("open new Type waveaudio Alias recsound", "", 0, 0);
            NativeMethods.record("record recsound", "", 0, 0);
        }

        public void Stop()
        {
            NativeMethods.record("save recsound " + AudioFilePath, "", 0, 0);
            NativeMethods.record("close recsound", "", 0, 0);

            ProduceVideoOfFrames();
            AddAudioToVideo();

            DirectoryUtil.DeletePathRecursive(FramesFolderPath);
        }

        private void SaveFrame(Image bitmap)
        {
            string filePath = FramesFolderPath + "\\" + fileCount + ".png";
            bitmap.Save(filePath, ImageFormat.Png);
            VideoFrames.Add(filePath);
            fileCount++;
        }

        private void AddAudioToVideo()
        {
            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                CreateNoWindow = false,
                FileName = "cmd.exe",
                WorkingDirectory = VideoFolderPath,
                Arguments = $"/c ffmpeg -i \"{videoFileName}\" -i \"{audioFileName}\" -shortest {outputVideoName}"
            };

            using (var process = Process.Start(startInfo))
            {
                process.WaitForExit();
            }
        }

        private void ProduceVideoOfFrames()
        {
            using (var vFWriter = new VideoFileWriter())
            {
                vFWriter.Open(VideoFilePath, bounds.Width, bounds.Height, 15, VideoCodec.MPEG4);

                foreach (var frame in VideoFrames)
                {
                    Bitmap imageFrame = Image.FromFile(frame) as Bitmap;
                    vFWriter.WriteVideoFrame(imageFrame);
                    imageFrame.Dispose();
                }
            }
        }
    }
}
</code></pre>

<p>I could have done more, but sadly I am running out of time :( Maybe I will add more tomorrow... Assuming I didnt kill myself until then :)</p>
    </div>