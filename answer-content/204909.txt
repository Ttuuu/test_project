<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://codereview.stackexchange.com/a/204899/29485">@vnp</a> good answer covered well most of the problems.</p>

<p><strong>Weak buffer management</strong></p>

<p>A common issue with <code>itoa()</code> like functions is the character buffer management. I recommend to convert to a known sufficient sized buffer and then copy as able.</p>

<p>OP's <code>itoaBase10(0, 1)</code> resulted in a non-terminated character array with <strong>no</strong> error <strong>indication</strong>.  It also overwrote array bounds - UB.</p>

<p><strong>Name is inconsistent with type.</strong></p>

<p>Suggest</p>

<pre><code>int32toaBase10(int32_t num
// or 
itoaBase10(int num
</code></pre>

<p><strong>Suggested alternative</strong></p>

<pre><code>#include  &lt;limits.h&gt;
#include  &lt;stdint.h&gt;
#include  &lt;stdio.h&gt;
#include  &lt;string.h&gt;
// Worst case size needed: sign + about bit_width*log10(2) + 1 + \0
#define INTEGER_STR_SIZE(type) (sizeof(type)*CHAR_BIT/3 + 3)

char *int32toaBase10(int32_t num, char *string, size_t SizeOfString) {
  uint32_t u32;
  if (num &lt; 0) {
    u32 = -(uint32_t) num;  // Convert before negating to avoid UB
  } else {
    u32 = (uint32_t) num;
  }

  char buf[INTEGER_STR_SIZE(int32_t)];
  char *s = &amp;buf[sizeof buf - 1]; // start at the end of the buffer.
  *s = '\0';

  do {  // Use a do loop to handle `num == 0` --&gt; "0" and not ""
    *(--s) = (char) (u32 % 10 + '0');
    u32 /= 10;
  } while (u32 &gt; 0);

  if (num &lt; 0) {
    *(--s) = '-';
  }

  size_t size_used = (size_t) (&amp;buf[sizeof buf] - s);
  if (size_used &gt; SizeOfString) {
    // TBD Customize how to handle lack of space.
    fflush(stdout);
    fprintf(stderr, "Insufficient memory %u &lt; %u\n",
        (unsigned) SizeOfString, (unsigned) size_used);
    return NULL;
  }

  return memcpy(string, s, size_used);
}
</code></pre>

<p>Test code</p>

<pre><code>void int32toaBase10_test(int32_t num, size_t SizeOfString) {
  char buf[100];
  memset(buf, '*', sizeof buf);
  char *s = int32toaBase10(num, buf + 1, SizeOfString);
  printf("num:%ld size:%u, &lt;%s&gt;\n", (long) num, (unsigned) SizeOfString,
      s ? s : "NULL");
}

int main() {
  int32toaBase10_test(0, 12);
  int32toaBase10_test(1, 12);
  int32toaBase10_test(42, 12);
  int32toaBase10_test(INT_MAX, 12);
  int32toaBase10_test(INT_MIN, 12);
  int32toaBase10_test(INT_MIN, 11);
}
</code></pre>

<p>Output</p>

<pre><code>num:0 size:12, &lt;0&gt;
num:1 size:12, &lt;1&gt;
num:42 size:12, &lt;42&gt;
num:2147483647 size:12, &lt;2147483647&gt;
num:-2147483648 size:12, &lt;-2147483648&gt;
Insufficient memory 11 &lt; 12
num:-2147483648 size:11, &lt;NULL&gt;
</code></pre>

<hr>

<p><code>INTEGER_STR_SIZE(type)</code> details</p>

<p>Space needed to convert an integer (signed or unsigned) to decimal characters:</p>

<p>Given the size of the integer is <code>N</code> bits <code>sizeof(type)*CHAR_BIT</code>.<br>
The number of binary value bits is <code>N</code> or less.<br>
The number of sign bits is <code>1</code> or less.  </p>

<p><code>N</code> binary bits convert to ceiling(N*log10(2)) digits which is â‰¤ <code>N/3 + 1</code>.  </p>

<pre><code>//                            sign  v---- digits ---------------v  \0
#define INTEGER_STR_SIZE(type) (1 + (sizeof(type)*CHAR_BIT/3 + 1) + 1)
</code></pre>

<p>For those who want to use the <em>minimum</em> space, code could use a tighter approximation of log10(2) and adjust per signed/unsigned.</p>

<pre><code>#define SINTEGER_STR_SIZE(type) (1 + ((sizeof(type)*CHAR_BIT-1)*28/93 + 1) + 1)

#define UINTEGER_STR_SIZE(type) (0 + ((sizeof(type)*CHAR_BIT-0)*28/93 + 1) + 1)
</code></pre>

<p>The buffer size needed may be smaller yet if the type has rare padding bits.</p>
    </div>