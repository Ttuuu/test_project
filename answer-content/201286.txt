<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Security</h2>

<h2>Weak comparison</h2>

<p>Unless there is a good reason, you never want to use <code>==</code>, but <code>===</code>. </p>

<p>With your code, passwords that aren't the same would be interpreted as being <a href="https://news.ycombinator.com/item?id=9484757" rel="nofollow noreferrer">equal</a> (eg <code>md5('240610708') == md5('QNKCDZO')</code> would be true).</p>

<h2>MD5</h2>

<p>md5 hasn't been secure for over a decade. There is really no good reason not to use secure hashing such as bcrypt, which PHP provides with <code>password_hash</code>.</p>

<h2>Timing attacks</h2>

<p>Remote timing attacks are <a href="https://security.stackexchange.com/questions/183796/are-there-any-successful-cases-of-timing-attacks-over-the-internet">mostly</a> still theoretical, but why take the chance? You really want to use a function that compares the passwords in constant time (<code>password_verify</code> will do that).</p>

<h2>Username enumeration</h2>

<p>By giving out the information if a username exists or not, you give an attacker the option of bruteforcing usernames first, and only then bruteforcing passwords. This somewhat simplifies bruteforce attacks.</p>

<p>Instead, you want to give a generic error message (eg "The username/password combination is incorrect").</p>

<h2>Other</h2>

<h2>Formatting</h2>

<p>Your formatting could be improved to increase readability. You can just use any IDE to do this automatically for you. Some issues:</p>

<ul>
<li>not every statement needs its own paragraph! Instead, group statements into logical blocks.</li>
<li>be consistent with spacing.</li>
<li>be consistent with indentation and bracket placement.</li>
</ul>

<h2>Approach</h2>

<p>The approach doesn't seem great. It's not just the loss of performance, but also the lack of readability.</p>

<p>Analyzing your code for security issues is much more complex than it would be if it were using the normal approach. </p>

<p>But even if for some reason you want to stick with the "read everything from the db and loop over it" approach (which I really would recommend against), you can improve it and simplify your loops a bit.</p>

<p>Something like this might work:</p>

<pre><code>while($row = mysqli_fetch_array($loginsquery)) {
    if ($row['Konta_login'] === $login &amp;&amp; MD5($password) === $row['Konta_haslo']) {
        // authenticate
    } else {
        // reject
    }
}
</code></pre>

<p>Or if you insist on storing the data in an array first:</p>

<pre><code>while($row = mysqli_fetch_array($loginsquery)) {
    $credentials[$row['Konta_login']] = $row['Konta_haslo'];
}

if (isset($credentials[$login]) &amp;&amp; MD5($password) === $credentials[$login]) {
    //authenticate
} else {
    // reject
}
</code></pre>

<p>But again, I would strongly suggest the usual approach of querying for the data you want using <code>WHERE</code> (using prepared statements of course) and then simply compare that, instead of getting all data.</p>
    </div>