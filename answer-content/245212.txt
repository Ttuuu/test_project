<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1><code>using namespace std;</code></h1>
<p>Stop doing this.  It is a easy, but sloppy, way to code; a change to the standard library that introduces a new identifier can break your code.</p>
<p>Being explicit, and writing <code>std::vector</code> instead of <code>vector</code> everywhere would be painful.  But there is a middle ground:</p>
<pre><code>#include &lt;vector&gt;
using std::vector;
</code></pre>
<p>Now you can lazily use <code>vector</code>, without fear that something you are not using from the standard library will suddenly become defined, colliding with your identifiers, and causing carnage.</p>
<h1>White space</h1>
<p>Either put white space around all binary operators, like <code>v[i + 1]</code>, or never put the white space around the binary operators, like <code>v[i*2]</code>.  But be consistent.</p>
<h1><code>cout &lt;&lt; endl;</code></h1>
<p>Don't use this; it slows your code down.  The <code>endl</code> manipulator does two things: it adds <code>\n</code> to the stream <strong>AND</strong> it flushes the stream.  If you don't need to flush the stream (and you rarely do), simply write</p>
<pre><code>cout &lt;&lt; '\n';
</code></pre>
<h1>Avoid repeated calls to functions that return the same result</h1>
<pre><code>for(int i = 1; i &lt; v.size(); i++)
</code></pre>
<p>What is the value of <code>v.size()</code>?  Will it ever change?  Can the compiler tell it won't, and optimize it out?  Could you store the value in a local variable to avoid the repeated function calls?</p>
<p>Or ... you could use the variable that already exists: <code>n</code>.</p>
<pre><code>for(int i = 1; i &lt;= n; i++)
</code></pre>
<h1>Don't Repeat Yourself (DRY)</h1>
<pre><code>        if((v[i + 1] == 0) || (v[i + 1] &gt; v[i] + 1))
        {
            v[i + 1] = v[i] + 1;
        }
        if((2*i &lt;= n) &amp;&amp; (v[2*i] == 0 || v[2*i] &gt; v[i] + 1))
        {
            v[2*i] = v[i] + 1;
        }
        if((3*i &lt;= n) &amp;&amp; (v[3*i] == 0 || v[3*i] &gt; v[i] + 1))
        {
            v[3*i] = v[i] + 1;
        }
</code></pre>
<p>These statements look very similar.</p>
<pre><code>        if((target &lt;= n) &amp;&amp; (v[target] == 0 || v[target] &gt; v[i] + 1))
        {
            v[target] = v[i] + 1;
        }
</code></pre>
<p>You could pull them out into a function:</p>
<pre><code>inline void explore_step(vector&lt;int&gt; &amp;v, int n, int i, int target) {
    if ((target &lt;= n) &amp;&amp; (v[target] == 0 || v[target] &gt; v[i] + 1)) {
        v[target] = v[i] + 1;
    }
}
</code></pre>
<p>And then write:</p>
<pre><code>        explore_step(v, n, i, i+1);
        explore_step(v, n, i, i*2);
        explore_step(v, n, i, i*3);
</code></pre>
<h1>Optimization</h1>
<p>You approach takes <span class="math-container">\$O(n)\$</span> time, because you explore each value from <code>1</code> to <code>n</code>.</p>
<p>You do this, because you don't know which values are going to be useful in reaching the target value, and test things like <code>v[2*i] &gt; v[i] + 1</code> because you don't know which values could be reached via a faster path.</p>
<p>A slightly better approach:</p>
<ul>
<li>seed <code>1</code> into a list of values to explore</li>
<li>for each value in the list of values to explore:
<ul>
<li>for each of the 3 target values <code>i+1</code>, <code>i*2</code>, &amp; <code>i*3</code> if <code>&lt;= n</code>:
<ul>
<li>if <code>v[target] == 0</code>, then
<ul>
<li>store <code>v[target] = i</code></li>
<li>add <code>target</code> to the list of values to explore</li>
<li>if <code>target == n</code>, stop</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Consider <code>n = 10</code>.</p>
<pre><code>explore = [1], value = 1, targets = [2, -, 3]
explore = [1, 2, 3], value = 2, targets = [-, 4, 6]
explore = [1, 2, 3, 4, 6], value = 3, targets = [-, -, 9]
explore = [1, 2, 3, 4, 6, 9], value = 4, targets = [5, 8, -]
explore = [1, 2, 3, 4, 6, 9, 5, 8], value = 6, targets = [7, -, -]
explore = [1, 2, 3, 4, 6, 9, 5, 8, 7], value = 9, targets = [10, -, -]
</code></pre>
<p>You could use a <code>queue</code> for <code>explore</code>, but a <code>vector</code> of length <code>n</code>, and just walking forward through the items works fine.</p>
<p>Notice that all values reachable after 1 step <code>[2, 3]</code> are processed before values reachable after 2 steps [4, 6, 9], and would be processed before those values reachable after 3 steps [5, 8, 7], and so on.</p>
<p>More over, we've built up a trail of breadcrumbs for the fastest path.</p>
<pre><code>v[10] = 9
v[9] = 3
v[3] = 1
</code></pre>
<p>So no searching is required to find the correct path.</p>
<p>Implementation left to student.</p>
<hr>
<p>Can we do better?  What if we started with <code>n</code>, and explored <code>n-1</code>, <code>n/2</code>, and <code>n/3</code>?  An odd value can't lead to an <code>n/2</code> point, and a non-multiple-of-3 can't lead to a <code>n/3</code> point, so you may be pruning more values out of the search, so might be slightly faster.</p>
<pre><code>[28] -&gt; [27, 14]
     -&gt; [26, 9, 13, 7]
     -&gt; [25, 13, 8, 3, 12, 6]
     -&gt; [24, 12, 4, 2, 1!, ....]
</code></pre>
    </div>