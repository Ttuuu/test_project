<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your code.</p>

<h2>Fix the bug</h2>

<p>The program loops infinitely (actually, as @CrisLuengo correctly points out in a comment, it's not actually infinite.  However, it loops \$2^{54}\$ times for each 1024 bytes in the input file on a 64-bit machine, so it will certainly <em>feel</em> infinite for any human being waiting for the copy to complete!) if the output file already exists or can't be created.  That's a bug that should be fixed.  Generally, when a call can fail (as with <code>open</code>) it is important to test the result for failure before acting on the result.</p>

<h2>Use <code>std::fstream</code> for portability</h2>

<p>This could be a completely portable program using only standard C++ libraries.  To do that, you'd omit <code>&lt;fcntl.h&gt;</code> and <code>&lt;unistd.h&gt;</code> and just use <code>fstream</code>.  I'm guessing you may have chosen to use the low-level functions for speed, but it's important to measure rather than assume.  The results may surprise you!</p>

<h2>Delete file before writing for speed</h2>

<p>On several Linux platforms, overwriting an existing program is slower than creating one.  For that reason, one way to make sure that the program is as fast as possible is to call <code>std::remove</code> before doing the copy.</p>

<h2>Return valid error codes</h2>

<p>A value of <code>0</code> as an error indicates no error on Linux and many other platforms.  If you execute <code>cp</code> with no arguments, it returns with a value of <code>1</code>.  If your program is intended to be an exact replacement, I'd recommend returning <code>1</code> instead of <code>0</code> if there are missing arguments.</p>

<h2>Check for arguments using <code>argc</code></h2>

<p>We can determine if there are the correct number of arguments by examining <code>argc</code>.  The way you're doing it has a problem:</p>

<pre><code>if ( argv[1] == nullptr || argv[2] == nullptr ){
</code></pre>

<p>The problem is that if there are zero arguments, <code>argv[1]</code> and <code>argv[2]</code> might not be pointing to anything, so dereferencing them is <em>undefined behavior</em> and therefore not good programming practice.  In particular, you should be aware that <a href="https://stackoverflow.com/questions/49817316/can-argc-be-zero-on-a-posix-system"><code>argc</code> might be zero</a> which would make testing <code>argv[1]</code> <em>undefined behavior</em>.</p>

<h2>Don't use <code>std::string</code> if what you need is a <code>char *</code></h2>

<p>In this case, both of the command line arguments are turned into <code>std::string</code>s but then used exclusively with <code>c_str()</code> to turn them back int <code>char *</code>.  Better would be to simply use <code>char *</code> without conversions to and from <code>std::string</code>.</p>

<h2>Prefer <code>std::array</code> to <code>std::vector</code></h2>

<p>If the bounds of your <code>std::vector</code> are known at compile-time (as in this case), then it's generally better to use <code>std::array</code> rather than <code>std::vector</code>.  The <code>std::vector</code> has provisions for resizing that this program doesn't use and doesn't need.  In fact, for this program, there's actually not much difference between a plain C-style array and a <code>std::array</code>.</p>

<h2>Name your constant</h2>

<p>The buffer size is 1024 bytes, which is probably a bit on the small size.  I think it would be a slight improvement to increase the size and also to name that constant.</p>

<h2>Think about non-file files</h2>

<p>Under Linux, we have not just files but also devices and named pipes.  Think about whether your program does what you intend if the input is a named pipe.  What happens if we try to copy to <code>/dev/null</code> ?</p>

<h2>An alternative version</h2>

<p>Using most of those suggestions, here's an alternative:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;cstdio&gt;

int main(int argc, char *argv[]) {
    if (argc != 3) {
        std::cout &lt;&lt; "Usage: moderncp srcfile destfile\n";
        return 1;
    }
    std::ifstream in{argv[1]};
    std::remove(argv[2]);
    std::ofstream out{argv[2]};
    if (!out) {
        std::cerr &lt;&lt; "Could not create output file " &lt;&lt; argv[2] &lt;&lt; '\n';
        return 1;
    }
    static constexpr std::size_t buffsize{1024};
    char buffer[buffsize];
    while (in.read(buffer, buffsize)) {
        out.write(buffer, buffsize);
    }
    out.write(buffer, in.gcount());
}
</code></pre>

<p>Note that because we're using <code>fstream</code>s for input and output, we don't have to explicitly close the files because the destructor will do so automatically as well as flushing the output buffer.</p>

<h2>Results</h2>

<p>On my 64-bit Linux machine, copying a 5.3GiB file took 1:29 with the original program, 1:25 with this rewritten version and 1:21 with <code>cp</code>.  Changing the rewritten version to use an 8K buffer allowed it to complete in 0:59, so that's clearly an improvement.</p>
    </div>