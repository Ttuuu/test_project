<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The other review hit the most important parts, but there are a few more things to consider.</p>

<h2>Consider using the standard C interface</h2>

<p>If the code is instead written like this:</p>

<pre><code>; IN: rdi points to NUL-terminated string
; OUT: rax contains string length
strlen:
    xor rax, rax
    dec rax
.top:
    inc rax
    cmp byte [rdi + rax], 0
    jne .top
    ret
</code></pre>

<p>This would have the advantage of being callable from C.</p>

<h2>Use named constants</h2>

<p>Instead of having "magic numbers" littering the code, it's better to define named constants.  For example the number <code>1</code> is used in two different ways; once for the <code>WRITE</code> syscall, and once for the <code>stdout</code> file handle.  I'd recommend defining and using one named constant for each.</p>

<h2>Consider more general usage</h2>

<p>As you mention in a comment, the only difference between <code>puts</code> and <code>fputs</code> is the file handle.  In this case, one could get both <code>puts</code> and <code>fputs</code> very cheaply like this:</p>

<pre><code>puts:
  mov rdi, 1 ; fd for stdout
fputs:
  call strlen
  mov rax, 1 ; WRITE syscall
  syscall
  ret
</code></pre>

<p>Note that this uses your existing calling convention rather than the C calling convention.</p>

<h2>Consider using macros</h2>

<p>You may find it useful to define some macros for common things like this:</p>

<pre><code>%macro SYSTEM 1
    mov rax, %1
    syscall
%endmacro

    WRITE: equ 1

    SYSTEM WRITE
</code></pre>
    </div>