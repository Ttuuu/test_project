<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">

<ul>
<li><p>Have you considered the possibility of <code>ScoreList&lt;T&gt;</code> implementing <code>List&lt;T&gt;</code> directly? This can be easily achieved by extending <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/AbstractList.html" rel="nofollow noreferrer"><code>AbstractList</code></a>. However, you would have to be careful not to violate the contract of <code>List</code> when implementing your desired functionality: For example, your <code>add(T)</code> method adds an element in a way different from any of the <code>add</code> methods declared in <code>List</code> (if it adds the element at all), so you cannot override/implement <code>add(T)</code> from <code>List</code> and do what you do in your own <code>add(T)</code> method. Instead, I would suggest that you follow the instructions in the documentation of <code>AbstractList</code> for implementing an unmodifiable <code>List</code>, and then add a separate method for inserting a score as you did in your original code. You could also consider allowing the removal of scores from the <code>List</code> by implementing <code>remove(int)</code>, as described in the documentation of <code>AbstractList</code>.</p>
<p>This would also eliminate the need for the method <code>getScores()</code>. Nevertheless, here's a suggestion related to this method: I think that <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Collections.html#unmodifiableList(java.util.List)" rel="nofollow noreferrer"><code>Collections.unmodifiableList(List)</code></a> would be more useful here than <code>new ArrayList(List)</code>, because the former returns a read-only "view" of the original <code>List</code> rather than a completely new, independent <code>List</code>, meaning that changes to the original <code>List</code> will be reflected in the <code>List</code> returned by <code>Collections.unmodifiableList(List)</code>, so the caller only needs to call the method <code>getScores()</code> once in the lifetime of the <code>ScoreList</code> in order to always have a read-only reference to the scores.</p>
</li>
<li><p>Your insertion mechanism is more complicated than it needs to be, because at every insertion, it sorts a <code>List</code> that is already sorted except for the last inserted element. Instead, you could find out the prospective position of the element to be added in advance with one of the two <code>binarySearch</code> methods in <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Collections.html" rel="nofollow noreferrer"><code>Collections</code></a>, and then insert the new element at this position without sorting the <code>List</code> again.</p>
</li>
</ul>
    </div>