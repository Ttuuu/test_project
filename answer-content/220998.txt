<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One obvious thing to do is to take advantage of some math. If you want to calculate 2¹⁶, you don't need to calculate it with 2*2*2*2*2*2*2*2*2*2*2*2*2*2*2*2. You could instead calculate it as (2⁸)²=(2⁴)²=((2²)²)². With your approach, you will calculate the value of 2⁸ twice.</p>

<p>Here is a simplified version that shows the idea. You might want to change it to a non-recursive version for performance.</p>

<pre><code>def pow(x, n):
    if(n==1):
        return x
    p = pow(x, n//2)
    p = p*p
    if(n%2 == 1):
        p = p*x
    return p
</code></pre>

<p>And here is code that passes the test and is quicker than 92.14%</p>

<pre><code>class Solution:
    def myPow(self, x: float, n: int) -&gt; float:
        if(n==1):
            return x
        if(x==0 and n&lt;=0):
            return
        if(n==0):
            return 1
        if(n&lt;0):
            return 1/self.myPow(x,-n)
        p = self.myPow(x, n//2)
        ret = p*p
        if(n%2 == 1):
            return ret*x
        return ret
</code></pre>

<p>The time complexity here is <span class="math-container">\$O(log (n))\$</span></p>
    </div>