<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<p>Function <code>hasAceInHand</code> could be boiled down to a one-liner using <code>array.find</code>. It returns the first element of the array that passes the condition <code>x =&gt; x.face === "A"</code> provided.</p>

<pre><code>const hasAceInHand = (cardsOnHand) =&gt; {
  return cardsOnHand.find(x =&gt; x.face === "A") != null;
}
</code></pre>

<p>Function <code>countHandValue</code> iterates the items, and calls the other function which iterates the items nested in the outer iteration <code>if (sum &gt; 21 &amp;&amp; hasAceInHand(cardsOnHand)) { ..</code>. You could just keep track of aces to avoid iterating the items more than once.</p>

<h3>Alternative for <code>countHandValue</code></h3>

<p>In black-jack, at most 1 ace could have value 11, all other aces in the hand must have value 1, else 21 would get exceeded (<code>11 + 11 &gt; 21</code>). I would change the default value of an ace to 1.</p>

<pre><code>switch (face) {
    case "A":
        this.faceValue = 1;
        break;
</code></pre>

<p>As a first step, <code>Array.reduce</code> could be used to calculate the sum of card values.</p>

<pre><code>const countHandValue = (cardsOnHand) =&gt; {
  return cardsOnHand.reduce((sum, current) =&gt; {
    sum += current.faceValue;
    return sum;
  }, 0);
}
</code></pre>

<p>Then we can implement a relaxation allowing at most 1 ace to get value 11.</p>

<pre><code>const countHandValue = (cardsOnHand) =&gt; {
  let ace;
  let value = cardsOnHand.reduce((sum, current) =&gt; {
    ace |= current.faceValue === 1;
    sum += current.faceValue;
    return sum;
  }, 0);
  if (ace &amp;&amp; value + 10 &lt;= 21) {
    value += 10;
  }
  return value;
}
</code></pre>

<p>And we also no longer need to call <code>hasAceInHand</code> as we're tracking the ace inline. </p>
    </div>