<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The standard library algorithms use, by default, the <code>&lt;</code> operator to compare values, instead of <code>std::less&lt;T&gt;</code>, which can be specialized for different types with different meanings, with pointers being a case in point. Interestingly, <code>std::less&lt;&gt;</code> (which is equivalent to <code>std::less&lt;void&gt;</code>) is specially defined to provide transparent comparison semantics with the <code>&lt;</code> operator. Therefore, this:</p>

<pre><code>template&lt;typename I, typename O&gt;
O multi_merge(std::vector&lt;range&lt;I&gt;&gt; inputs, O output) {
    return multi_merge(inputs, output, std::less&lt;typename std::iterator_traits&lt;I&gt;::value_type&gt;{});
}
</code></pre>

<p>Should be changed to</p>

<pre><code>template&lt;typename I, typename O&gt;
O multi_merge(std::vector&lt;range&lt;I&gt;&gt; inputs, O output) {
    return multi_merge(inputs, output, std::less&lt;&gt;{});
}
</code></pre>

<p>To keep consistent with the standard library conventions. </p>
    </div>