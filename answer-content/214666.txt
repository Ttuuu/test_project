<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I could take this as a not-so-subtle reminder that I need to finish my Excel Tetris implementation...  :-P</p>

<p>I am a little curious why you seem to have abandoned the OOP approach since your last game - this code is completely procedural (the presence of classes doesn't mean that it's object oriented).</p>

<p>A discussion of the architecture would basically entail a top-down re-write, so I'll leave that for other reviewers.</p>

<hr>

<h2>Indentation</h2>

<p>This is, well, ...weird. I initially thought it was simply a markdown problem in the question itself, but as I went through the code further, it seems more and more intentional. Why are your procedures creeping to the right? I originally thought that it had something to do with the scope, (<code>Public</code> members indented one level, <code>Private</code> two), but that doesn't jive with this:</p>

<blockquote>
<pre><code>Private this As TimerAttributes

    Private Sub Class_Initialize()
        PerformanceFrequencyLet
    End Sub

        Private Sub PerformanceFrequencyLet()
            Dim TempFrequency As LongInteger
            QueryPerformanceFrequency TempFrequency
            this.PerformanceFrequency = ParseLongInteger(TempFrequency)
        End Sub

    Public Sub TimerSet()
        Dim TempCounterIntital As LongInteger
        QueryPerformanceCounter TempCounterIntital
        this.CounterInitial = ParseLongInteger(TempCounterIntital)
    End Sub
</code></pre>
</blockquote>

<p>This is incredibly distracting, and is completely "non-standard" (I've never seen this done in <strong><em>any</em></strong> language). The last thing you want when somebody else is looking at your code is to distract them with the formatting. It's also generally meaningless in that I can just look at the access modifier (assuming it has something to do with scope). My brain is telling me that I'm in a procedure when I'm not, and it was disorienting to the point that I had to run an indenter on this before I continued the review.</p>

<hr>

<h2>API Functions</h2>

<p>Your declarations of <code>QueryPerformanceCounter</code> and <code>QueryPerformanceFrequency</code> are incorrect. From the documentation of <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms644904(v=vs.85).aspx" rel="nofollow noreferrer"><code>QueryPerformanceCounter</code></a>, it is defined as:</p>

<pre><code>BOOL WINAPI QueryPerformanceCounter(
  _Out_ LARGE_INTEGER *lpPerformanceCount
);
</code></pre>

<p>Furthermore, the documentation states "On systems that run Windows XP or later, the function will always succeed and will thus never return zero", so unless you are intending to support pre-XP versions of Windows (which would likely require a pre-compile directive to get rid of the <code>PtrSafe</code> keyword anyway), this can simply be declared as a <code>Sub</code>. The same applies to <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms644905(v=vs.85).aspx" rel="nofollow noreferrer"><code>QueryPerformanceFrequency</code></a>:</p>

<pre><code>BOOL WINAPI QueryPerformanceFrequency(
  _Out_ LARGE_INTEGER *lpFrequency
);
</code></pre>

<p>You are also never checking the return value <em>anyway</em>, so if you're using them as <code>Sub</code>'s (discarding the otherwise deterministic return value), declare them as a <code>Sub</code>'s:</p>

<pre><code>Private Declare PtrSafe Sub QueryPerformanceCounter Lib "kernel32" (ByRef lpPerformanceCount As LongInteger)
Private Declare PtrSafe Sub QueryPerformanceFrequency Lib "kernel32" (ByRef lpFrequency As LongInteger)
</code></pre>

<p>Note that I've also explicitly declared the parameters <code>ByRef</code>. I'd get in the habit of doing this for out parameters of API declarations because it makes the usage clear without consulting the documentation.</p>

<hr>

<p>Your <code>LongInteger</code> struct is also misleadingly named, in that a "long int" has a different meaning when you're thinking in API terms. It means "<em>at least</em> 32 bits". This is why the <a href="https://docs.microsoft.com/en-us/windows/desktop/api/winnt/ns-winnt-_large_integer" rel="nofollow noreferrer"><code>LARGE_INTEGER</code></a> struct exists (it's technically a union). I'd use the API naming and simply call it a <code>LargeInteger</code> to avoid confusion. I'll propose what I'd consider a better option below.</p>

<hr>

<p>The <code>ParseLongInteger</code> function performs so much work to handle the unsigned low DWORD that makes me wonder if it's really worth using at all for the additional resolution that it provides. The maximum resolution you <em>require</em> is quarter-second accuracy. On top of that, you're performing a fairly dirty cast when you coerce the value into a <code>Double</code> in order to handle the return value on a 32-bit machine (it's a simple <code>LongLong</code> in 64-bit Office). If you intend to support both platforms, I'd suggest going simple and using <a href="https://docs.microsoft.com/en-us/windows/desktop/api/sysinfoapi/nf-sysinfoapi-gettickcount" rel="nofollow noreferrer"><code>GetTickCount</code></a> and <a href="https://docs.microsoft.com/en-us/windows/desktop/api/sysinfoapi/nf-sysinfoapi-gettickcount64" rel="nofollow noreferrer"><code>GetTickCount64</code></a> (conditionally compiled) instead. Or, you could use a game loop similar to what I suggested on <a href="https://codereview.stackexchange.com/a/203218/36565">your Space Invader Style Game question</a>.</p>

<hr>

<h2>Procedure Signatures</h2>

<p>You have functions with no return values, such as this one:</p>

<pre><code>Private Function CounterNowLet()
    Dim TempTimeNow As LongInteger
    QueryPerformanceCounter TempTimeNow
    this.CounterNow = ParseLongInteger(TempTimeNow)
End Function
</code></pre>

<p>This always returns <code>Empty</code>, and the "return value" is never checked.  You're using it like it's a <code>Sub</code>, so declare it as a <code>Sub</code>. As it stands now, it appears to be a bug even though it isn't.</p>

<hr>

<p><code>Sub RunGame()</code> is missing an access modifier. You have them explicitly defined elsewhere, and this is implicitly public.  Make it explicit.</p>

<hr>

<p>You're requiring passing module level variables around as arguments all over the place in the worksheet, i.e.</p>

<pre><code>Private Function SnakePartOverlapItself(ByVal row As Long, ByVal column As Long) As Boolean
</code></pre>

<p>...which is <strong><em>always</em></strong> called with the arguments <code>currentRow</code> and <code>currentColumn</code> - both of which are module level. They can be omitted entirely.</p>

<hr>

<h2>Scope</h2>

<p><code>Direction</code> is not used outside of the worksheet it's declared in (more on that below). It also has no meaning outside of the context of the game and uses a very common word for an identifier - it's not hard to imagine a bunch of other ways it could potentially be used in other projects. Make it <code>Private</code> so it can't create namespace conflicts in no-owned code. In general, you should be declaring things with the smallest possible scope.</p>

<hr>

<p>There is absolutely no reason for these members of the worksheet to be <code>Public</code>:</p>

<pre><code>Public ws As Worksheet
Public snakeParts As Collection
Public currentRow As Long
Public currentColumn As Long
Public directionSnake As Direction
</code></pre>

<p>If they need to be used like class members, make them <code>Private</code> - as it stands now they break encapsulation. </p>

<hr>

<h2>Miscellaneous</h2>

<p>This is a run-time error waiting to happen:</p>

<blockquote>
<pre><code>Set ws = ActiveWorkbook.Sheets("Game")
</code></pre>
</blockquote>

<p>What if the active workbook doesn't contain a worksheet named "Game"? What if it contains a chart named "Game"? I'd either get rid of this entirely and use the code name of the sheet explicitly <em>or</em> (more likely for this purpose) just create a new worksheet for the game to run on with the understanding that the user will just delete it afterward.</p>

<p>This code likely doesn't belong in a worksheet at all - it looks like it wants to be in its own class with a single public <code>RunGame(target As Worksheet)</code> method. I suspect that it's currently in a worksheet because of the <code>Worksheet_SelectionChange</code> handler, but there's nothing that says a user class can't hold a <code>Worksheet</code> member <code>WithEvents</code>.</p>

<hr>

<p>This is a meaningless assignment:</p>

<blockquote>
<pre><code>Dim gameOver As Boolean
gameOver = False
</code></pre>
</blockquote>

<p>The default value of a <code>Boolean</code> is <code>False</code>.</p>

<hr>

<p><code>Range.Select</code> should <strong><em>never</em></strong> be used in a loop that calls <code>DoEvents</code> without checking the <code>ActiveWorkbook</code>.  If the intention is that it should re-focus the game worksheet if the user selects something else (like sets focus to a different worksheet or workbook), you should handle that with an event handler. If another workbook becomes active, this is pretty much an instant error 1004.</p>

<hr>

<p>The <code>Call</code> keyword is ancient history (and only exists for backward compatibility), and you're using it inconsistently.  There is no reason to use it at all, so I'd recommend getting rid of it.</p>

<hr>

<p><code>snakepart</code> might <em>call itself</em> a class, but it's really just a glorified <code>Type</code> used to hold two dimensional coordinates. I'd consider re-architecting this to just store the entire game state in a two dimensional array.</p>

<hr>

<p>The calls to <code>MsgBox "GameOver"</code> belong in the <code>RunGame()</code> method instead of sprinkled all over the tests for game ending conditions.  Just put a single call after your loop exits - there's no other way to exit the loop, so that seems like the more logical place for it.</p>

<hr>

<p>Related to the above, your flow control within the loop is kind of contorted. Your exit condition is <code>Do While gameOver = False</code>, and you have multiple checks for that condition here:</p>

<blockquote>
<pre><code>        If SnakePartOverlapItself(currentRow, currentColumn) = True Then
            gameOver = True
            Exit Do
        ElseIf SnakePartYellowSquareOverlap = True Then
            gameOver = True
            Exit Do
</code></pre>
</blockquote>

<p>So, you're testing for <code>True</code>, then setting your exit flag to <code>True</code>, then explicitly exiting the loop with <code>Exit Do</code>. </p>

<p>I'm also struggling to see the need for 3 separate game timers - they are always initialized one right after the other, so they should only be milliseconds apart (unless you're stepping through with the debugger). The entire loop could be simplified to something more like this:</p>

<pre><code>Do
    If TimerGame.CheckFiveSecondsPassed Then
        BlueSquareAdd
        YellowSquareAdd
    End If

    If TimerGame.CheckQuarterSecondPassed Then
        CurrentCellUpdate
        ws.Cells(currentRow, currentColumn).Select

        Dim part As Long
        For part = 1 To IIf(SnakePartBlueSquareOverlap, 3, 1)
            SnakePartAdd
        Next

        SnakePartRemove
        ws.Cells(currentRow, currentColumn).Select
        TimerGame.TimerSet
    End If

    DoEvents
Loop Until SnakePartOverlapItself Or SnakePartYellowSquareOverlap Or OutOfBounds

MsgBox "Game Over"
</code></pre>
    </div>