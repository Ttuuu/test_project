<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>Yes this starts to look a bit like godzilla, no dealbreaker though.</p>
</li>
<li><p>Divide this bulk in several parts. Here some tips to get started:</p>
</li>
</ol>
<hr>
<ol>
<li><p>Start moving all your variable declarations to a separate file which you will source. This is going to be your <em>config file</em>.</p>
<p>We are talking about the first 80  lines of your <code>_cpupower()</code> function here. That is almost 30% of your total amount of lines (!)</p>
</li>
<li><p>Move big items you have in your outer <code>case</code> construct, to separate functions. Especially the nested case and the big <code>if</code>/<code>elif</code> parts.
So you get <code>case</code> and <code>esac</code> at least on the same page. This will make debugging a lot easier.</p>
</li>
<li><p>Big static sequences of commands feel best at home in a function.</p>
<p>What they do can easily be described in a few words. So these words can be the name of the function. This way the blocks are easy to manouver inside the code.</p>
</li>
<li><p>If you grow a lot of (small and clear) functions, put them in a separate file which you can source, and sort them in categories alphabetically. This way you can find them quickly. Consider this file as a "library" so you have a sort of a guideline how to handle it. It also makes it very easy to add or remove extra functionality without hacking away in the <em>one-big-file</em></p>
</li>
</ol>
<p>If you do these things you will see that it will not only look much smaller and easier to handle but also that you can enable and disable entire parts on the fly with a single <code>#</code>. Also is this the best starting position if you want to slim down the code effectively. By having a better overview you will spot optimization possibilities sooner and with more ease</p>
<hr>
<h2>tl:dr</h2>
<ol>
<li>every <code>case</code> - <code>esac</code> in its own function (possibly a separate file)</li>
<li>every big <code>if</code>/<code>elif</code> sequence in its own function (possibly a separate file)</li>
<li>every simple sequence or stanza of commands in its own function</li>
<li>all 80 declarations together in a config file</li>
<li>all functions together in a library file</li>
</ol>
<p>Above tips creates a construction/framework that makes slimming down the code selectively a much easier task. It also makes you more efficient in optimizing a thing or two.</p>
<p>Well, these were the answers to your questions. If these answers brought you some more questions, don't hesitate to ask.</p>
    </div>