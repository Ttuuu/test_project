<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Okay, there are a couple of WTFs with the code.  I'll leave out the
already commented-on stuff.</p>

<ul>
<li><p>What/why is there <code>global HTML</code> and <code>HTML=max</code> in there?  That doesn't
<em>do</em> anything except give it a new name.  In which case the <code>global</code>
is still not needed.  IMO just don't do that.  Same goes for all the
renamed imports, i.e. <code>update</code> a.k.a. <code>sleep</code>, <code>maths</code> a.k.a. <code>math</code>.
The point is that the reader with higher probability <em>knows</em> what
<code>math</code>, <code>sleep</code> and <code>max</code> are.  It is way easier to just keep the
names instead of having to look up trivial name changes.</p></li>
<li><p>What is <code>True*8**2-4</code>?  I now know it's <code>60</code>.  How about
writing <code>60</code> instead and not keep the reader guessing what a boolean
times an integer is.</p></li>
<li><p><code>kill_code</code> is overkill.  Either of those functions will exit the
process.  So just replace <code>kill_code</code> with <code>sys.exit</code>.
<a href="https://stackoverflow.com/questions/19747371/python-exit-commands-why-so-many-and-when-should-each-be-used">Stack Overflow agrees with me</a>.</p></li>
<li><p>The return value for <code>check_for_error</code> is never used, you can just
drop that in favour of <code>pass</code>.  Then again, it's cleaner to check for
the existence of the key instead of catching the <code>KeyError</code> instead.
In general it's also not good practice to kill the process if a
minor condition fails, e.g. raising an exception (which in turn could
be handled, or otherwise quit the process) is more future-proof.  I'd
expect at least something like the following instead (modulo the
exception thing):</p>

<pre><code>def check_for_error(response_JSON):
    if 'error_message' in response_JSON:
        sys.exit(response_JSON['error_message'])
</code></pre></li>
<li><p>The <code>'authtoken.txt'</code> opened in <code>get_auth</code> is never closed.  Use
<code>with</code> as well, otherwise you're leaking file descriptors and that's
never good.</p></li>
<li><code>get_auth</code> is called recursively, but the recursive call has no
<code>return</code>, so if this fails on the first try it will return <code>None</code>
regardless.</li>
</ul>

<p>Minor things:</p>

<ul>
<li><code>input = input</code> doesn't do anything.</li>
<li>String formatting is easier with interpolation or <code>.format</code>.</li>
<li>THere's both unicode and regular string literals used.  If possible
use just of both forms.</li>
<li><p><code>get_ids_from_items</code> can be simplified:</p>

<pre><code>def get_ids_from_items(items):
    return [item['question_id'] for item in items]
</code></pre>

<p>That also avoids creating all those single element lists.  Since that
appears a number of times then other option there is to use <code>.append</code>
instead (for the same reason).</p></li>
<li>In <code>change_tag</code> setting <code>tag_id</code> to zero doesn't do anything.</li>
<li><code>quota_remaining</code> in <code>get_tags_from_ids</code> is unused.</li>
<li>The iteration in <code>print_tags</code> can be made a little bit nicer with
<code>enumerate</code> instead.</li>
<li>Move everything on the top level into a <code>if __name__ == '__main__':</code>
block, or even a <code>main</code> function.  It also wouldn't hurt to use
<code>argparse</code> for command-line arguments.</li>
<li>The sequence <code>response.json()</code>, <code>backoff()</code>, <code>check_for_error</code> is used
three times - I'd create a new function for it.</li>
</ul>

<p>In general it would be good to have more code reuse and reduce clutter
with all the mixing of UI messages and actual work.  More functions for
formatting stuff would also reduce the number of lines dedicated to
string manipulation.</p>

<p>Also some comments in the important places would be nice, i.e. why
the sudden low-level file descriptor manipulation with <code>os.dup</code> and
friends is necessary.</p>
    </div>