<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is an improvement on the <a href="https://codereview.stackexchange.com/a/230474/98493">answer</a> by <a href="https://codereview.stackexchange.com/users/58360/coderodde">@coderodde</a>. Just like they said, you can do this in <span class="math-container">\$\mathcal{O}(n)\$</span> time by counting how often each digit appears and then using a fixed output format. However, I would use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="noreferrer"><code>collections.Counter</code></a> from the standard library and string multiplication to achieve this goal:</p>

<pre><code>from collections import Counter

def largest_number(string: str) -&gt; str:
    counters = Counter(map(int, string))
    return "".join(str(d) * counters[d] for d in range(9, -1, -1))
</code></pre>

<p>Compared to sorting, as presented in the <a href="https://codereview.stackexchange.com/a/230473/98493">answer</a> by <a href="https://codereview.stackexchange.com/users/209601/bullseye">@bullseye</a>, and the original answer, this compares OK. It has a slight overhead for small strings due to the <code>Counter</code> object, but in the end it is faster than hardcoding character values and on the same level as sorting, but not better.</p>

<p><a href="https://i.stack.imgur.com/pTao6.png" rel="noreferrer"><img src="https://i.stack.imgur.com/pTao6.png" alt="enter image description here"></a></p>

<p>However, all three are vastly better than your <span class="math-container">\$\mathcal{O}(n^2)\$</span> algorithm (note the vastly different x limits):</p>

<p><a href="https://i.stack.imgur.com/wyJwu.png" rel="noreferrer"><img src="https://i.stack.imgur.com/wyJwu.png" alt="enter image description here"></a></p>

<p>As soon as you have three or more testcases, it might make sense to not repeat the testing code. Just put the input and expected output into a data structure (a list of tuples would do here), and iterate over it:</p>

<pre><code>if __name__ == '__main__':
    test_cases = [("12345", "54321"), ("4689123", "9864321"), ("9", "9"), ("", "")]
    for string, expected in test_cases:
        output = largest_number(string)
        if output != expected:
            raise AssertionError(f"{string!r} gave back {output!r}"
                                 f" instead of {expected!r}")
</code></pre>

<p>For more complicated programs you might want to look at a testing framework like <a href="https://docs.python.org/3/library/unittest.html" rel="noreferrer"><code>unittest</code></a>.</p>
    </div>