<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Improving the code</h3>

<p>Your code computes
<span class="math-container">$$
 a_0 2^{n-1} + a_1 2^{n-2} + \ldots a_{n-2} 2 + a_{n-1} \, ,
$$</span>
that is the polynomial
<span class="math-container">$$
 P(x) = a_0 x^{n-1} + a_1 x^{n-2} + \ldots a_{n-2} x + a_{n-1} \,
$$</span>
evaluated at <span class="math-container">\$ x=2 \$</span>. A well-known, efficient method to evaluate polynomials is <a href="https://en.wikipedia.org/wiki/Horner%27s_method" rel="noreferrer">Horner's method</a>:
<span class="math-container">$$
 P(x) = (\ldots ((a_0 x + a_1) x + a_2) x + \ldots ) x + a_0 \, .
$$</span></p>

<p>Applied to your task that gives</p>

<pre><code>func genInt(fromBitArray array: [Int]) -&gt; Int {
    var n = 0
    for i in 0...array.count - 1 {
        n = 2 * n + array[i]
    }
    return n
}
</code></pre>

<p>Instead of the bit shift (by a variable amount) we have now multiplications by the fixed factor <span class="math-container">\$ 2 \$</span>. But this can be simplified further. Inside the loop we need now only the array element at the current index, but not the index itself. Therefore we can enumerate the array instead:</p>

<pre><code>func genInt(fromBitArray array: [Int]) -&gt; Int {
    var n = 0
    for digit in array {
        n = 2 * n + digit
    }
    return n
}
</code></pre>

<p>And for this kind of combining array (or more general: sequence) elements there is a dedicated method in the Swift standard library, <a href="https://developer.apple.com/documentation/swift/sequence/2907677-reduce" rel="noreferrer"><code>reduce()</code></a>:</p>

<pre><code>func genInt(fromBitArray array: [Int]) -&gt; Int {
    return array.reduce(0) { (accum, digit) in
        return 2 * accum + digit
    }
}
</code></pre>

<h3>Naming</h3>

<p>The “official” Swift naming conventions are describe in the <a href="https://swift.org/documentation/api-design-guidelines/" rel="noreferrer">API Design Guidelines</a>, e.g.</p>

<ul>
<li>Name variables, parameters, and associated types according to their roles, rather than their type constraints.</li>
<li>Begin names of factory methods with “make”, e.g. <code>x.makeIterator()</code>.</li>
<li>Avoid abbreviations.</li>
</ul>

<p>With these rules in mind I would suggest something like</p>

<pre><code>func makeInteger(fromBits array: [Int]) -&gt; Int
</code></pre>

<p>Or if one sees this as a way to <em>construct</em> an integer then a custom initializer would be appropriate</p>

<pre><code>extension Int {
    init(bits array: [Int]) {
        self = array.reduce(0) { (accum, digit) in
            return 2 * accum + digit
        }
    }
}

// Example:
let value = Int(bits: [1, 1, 0])
</code></pre>

<h3>Miscellaneous</h3>

<p>It is expected that the array contains only the values zero and one. With an <em>assertion</em> this can be verified during the test phase, without performance impact on the released code:</p>

<pre><code>extension Int {
    init(bits array: [Int]) {
        self = array.reduce(0) { (accum, digit) in
            assert(digit == 0 || digit == 1, "invalid binary digit")
            return 2 * accum + digit
        }
    }
}
</code></pre>

<p>If you want to create other integer types from a bit array in the same manner then you can defined the initializer on the <code>BinaryInteger</code> protocol instead:</p>

<pre><code>extension BinaryInteger {
    init(bits array: [Int]) {
        self = array.reduce(0) { (accum, digit) in
            assert(digit == 0 || digit == 1, "invalid binary digit")
            return 2 * accum + Self(digit)
        }
    }
}

// Example:
let value = Int16(bits: [1, 1, 0])
</code></pre>
    </div>