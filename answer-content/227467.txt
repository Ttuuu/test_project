<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is in addition to @TobySpeight review.</p>

<p><strong>Standard Symbolic Constants</strong><br>
Since <code>stdlib.h</code> is included, you have access to <a href="https://en.cppreference.com/w/cpp/utility/program/EXIT_status" rel="nofollow noreferrer"><code>EXIT_SUCCESS</code> and <code>EXIT_FAILURE</code></a> which are standard macros implemented on all systems. These work in C++ as well as C. These are more <a href="https://stackoverflow.com/questions/8867871/should-i-return-exit-success-or-0-from-main">portable than <code>return 0</code> or <code>return 1</code></a>. Most modern C compilers will append <code>return 0;</code> so it really isn't necessary in this particular case. You may have noticed the use of <code>EXIT_FAILURE</code> in @TobySpeight answer.</p>

<p><strong>Sizeof in malloc and realloc</strong><br>
A safer practice is to use what the variable points to rather than a specific type. This will allow you to change the type of the array without changing each <code>malloc</code> or <code>calloc</code>.</p>

<pre><code>wsbuffer = malloc(buffer_size * sizeof(*wsbuffer));
</code></pre>

<p>As @TobySpeight mentioned the return value of every memory allocation should be tested for <code>NULL</code>.</p>

<p><strong>Boolean Values</strong><br>
Somewhere in the book you should find:</p>

<pre><code>#define TRUE 1
#define FALSE 0
</code></pre>

<p>This might make the code more readable. The C standard has progressed; since the second version of the book was written there is an additional header file that can be used for Booleans, <a href="//stackoverflow.com/q/6118846"><code>&lt;stdbool.h&gt;</code></a>.</p>

<p><strong>Programming Style</strong><br>
Generally it is better to wrap operators in expressions in spaces to make the code more readable.</p>

<pre><code>    for (i = 0; i &lt; nws; ++i)

    if (c == ' ' || c == '\t')
</code></pre>

<p>For code maintenance reasons, a safer practice when using control constructs (loops, <code>if</code>, <code>else</code>) is to always enclose even a single statement within a block (<code>{</code>..<code>}</code>):</p>

<pre><code>        for (i = 0; i &lt; nws; ++i) {
            putchar(wsbuffer[i]);
        }
</code></pre>

<p>That reduces bugs introduced during code maintenance where a second line needs to be added within the control block.</p>

<p><strong>Variable Declarations</strong><br>
When the book was written, all variables had to be declared at the top of the function. This isn't true anymore.</p>

<p>In C, as in C++, variables can be declared as they are needed. For instance a loop control variable such as <code>i</code> can be declared just before the loop.</p>
    </div>