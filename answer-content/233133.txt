<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My main suggestion for this code is for the <code>helper</code> function. It's not a good idea to only compare a few selected strings from the set of all interesting strings. It's far more efficient to just have a list of strings that are already ordered, and then ensure that this ordering is represented by the <code>&lt;=&gt;</code> operator under test.</p>

<p>To do this, each element should be compared to each element, including itself. The code I usually use to do this is:</p>

<pre class="lang-cpp prettyprint-override"><code>#include &lt;cassert&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;

int sign(int i)
{
    return i &lt; 0 ? -1 : i &gt; 0 ? +1 : 0;
}

template&lt;typename T&gt;
int spaceship(T a, T b)
{
    return a &lt; b ? -123 : a &gt; b ? +123 : 0;
}

std::string op(int cmp)
{
    return cmp &lt; 0 ? "&lt;" : cmp &gt; 0 ? "&gt;" : "==";
}

template&lt;typename T&gt;
void test_spaceship(const std::vector&lt;T&gt; &amp;elements)
{
    bool error = false;

    for (std::size_t i = 0; i &lt; elements.size(); ++i) {
        for (std::size_t j = 0; j &lt; elements.size(); ++j) {
            int expected = spaceship(i, j);
            int actual = spaceship(elements[i], elements[j]);
            if (sign(expected) != sign(actual)) {
                std::cerr &lt;&lt; __func__ &lt;&lt; ":\n";
                std::cerr &lt;&lt; "  expected " &lt;&lt; elements[i] &lt;&lt; " "
                          &lt;&lt; op(expected) &lt;&lt; " " &lt;&lt; elements[j] &lt;&lt; "\n";
                std::cerr &lt;&lt; "  but got  " &lt;&lt; elements[i] &lt;&lt; " "
                          &lt;&lt; op(actual) &lt;&lt; " " &lt;&lt; elements[j] &lt;&lt; "\n";
                error = true;
            }
        }
    }
    std::flush(std::cerr);
    assert(!error);
}

int main()
{
    std::vector&lt;std::string&gt; elements{
            "",
            "first",
            "second",
            "zfourth", // intentionally in the wrong order
            "third",
            "zzfifth"
    };

    test_spaceship(elements);
    std::cout &lt;&lt; "ok\n";
    std::string s;
    std::getline(std::cin, s);
}
</code></pre>

<p>Of course you would have to adjust the code a bit to test your <code>Strong_String</code> instead of my <code>std::string</code>, but the general idea should get clear.</p>

<p>If you have some strings that are considered equal by your operator <code>&lt;=&gt;</code>, you would have to adjust the above code to have a <code>std::vector&lt;std::vector&lt;T&gt;&gt;</code>, but that should be equally easy.</p>

<hr>

<p>My other favorite topic is the <a href="https://stackoverflow.com/questions/7131026/is-it-safe-to-call-the-functions-from-cctype-with-char-arguments">cctype header</a> since you must never feed a plain character to functions like <code>isalnum</code> or <code>toupper</code>. Furthermore by doing this, you limit your program to 8-bit character sets, unless <code>CHAR_BIT</code> is greater than 8 on your machine, and chances are small for that.</p>

<p>You should rather treat your strings as Unicode strings, and that brings a whole new topic of decisions, such as sorting strings from different scripts and languages. But that's still better than being caught in the 1990s with their limited <a href="https://en.wikipedia.org/wiki/Code_page" rel="nofollow noreferrer">code pages</a>.</p>
    </div>