<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One weakness of this approach is the sequential nature - by trying ports consecutively, we have to wait for a <code>connect()</code> to fail before beginning the next one.  This can take a while, particularly for hosts with "blackhole" firewall rules (that drop incoming packets rather than replying with a connection-refused status).</p>

<p>To open TCP connections asynchronously, you'll want to read the <a href="https://docs.python.org/3/library/asyncio-eventloop.html#creating-connections" rel="nofollow noreferrer"><em>Creating connections</em></a> section of the <code>asyncio</code> documentation.  Don't expect to be able to begin the opening of all ports at once, because most OSes have a limit on the number of open socket descriptors - start with a hundred or so, then throttle so that you then only open a new one when you get a result back and close a candidate.</p>

<p>Also, suitably defensive hosts will firewall you out when they observe a sequential port scan.  Consider shuffling the port number range, or at least XOR with a random (per run) salt, to give a less predictable sequence of ports to try.</p>
    </div>