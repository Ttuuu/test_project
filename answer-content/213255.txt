<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Some points regarding readability.</h1>

<p>Source code noise reduces overall readability. Noise is anything that is redundant or does not aid in the understanding of the code.</p>

<p>There are many way to introduce noise.</p>

<h2>Not addressing the reader</h2>

<p>One assumes that the reader of your code is proficient in the language and does not need to be told what various tokens do. You have two comments that assume the coder knows nothing.</p>

<ul>
<li><code>// exit case</code> adds nothing to the code or the readability, thus it is noise and actually detracts from readability.</li>
<li><code>// recursive case</code> Really, and I thought it was flying a kite... :P</li>
</ul>

<p>If you are writing code as a teaching example then you assume the reader has limited knowledge and in that case the obvious is stated in properly structured english (or whatever language)</p>

<ul>
<li><p><code>// exit case</code> would be <code>// When found exit the function returning the returnResult array.</code>  </p>

<p>Note that if you add a comment it should be above the line it refers to with a blank line above it. Or it should be at the end of the line not going past the right margin (80 or I prefer 120 characters)</p>

<p>Thus the example above would be</p></li>
</ul>

<p>.</p>

<pre><code>    ...
    return sum === K;
});

// When found exit the function returning the returnResult array.
if (found) {
    return returnResult;
}
</code></pre>

<p>Or</p>

<pre><code>    ...
    return sum === K;
});  
if (found) {  // When found exit the function returning the returnResult array.
    return returnResult;
}
</code></pre>

<h2>Misleading the reader</h2>

<p>This is the worst type of noise.</p>

<p>Comments are not subject to compilation, verification, or any type of vetting process. The author quickly becomes blind to comments and will overlook them when making changes. 
The result is that comments can be in direct opposition of the code they are commenting. This will confuse the reader as to the intent of the code. They are left to guess, is the code in error or the comment.</p>

<ul>
<li><code>// main</code> is a pullover from other languages and is general the entry point of the entire app, there is only one main, and it is only ever called once. It does not apply to JS and should not be used as a comment.</li>
<li><code>// init</code> initialize is not accurate, you are defining variable not reenstating them. Some constants can not be initialized as they can not change eg <code>K</code>. Others can be initialized eg initialize the array <code>arr.length = 0; arr.push(...[1,2,3,4,5]);</code></li>
</ul>

<h2>Naming noise</h2>

<p>We humans read words not by scanning each character in turn, but rather by recognising the shape, and using cues (such as the start and end characters). </p>

<p>Good names are short and to the point. They rely strongly on the context in which they are created to give them meaning. The more frequently a variable is used the shorter it is the better, as you reduce the overall bulk of the code.</p>

<ul>
<li><code>returnResult</code>  does the verb <code>return</code> add to the understanding of the name and what the variable represents. Not at all and thus can be considered naming noise. <code>result</code> is clear. 
We also use abbreviations in code, though you must use the common form, do not make up abbreviations. The common abbreviation for <code>result</code> is <code>res</code></li>
<li><p><code>getContiguousElementsSum</code> is incorrect. When you <code>get...</code> something you know it exists and where it is. The function does not <code>get</code> a result, it searches for a result and if it exists returns it. Thus replace the <code>get</code> with <code>find</code></p>

<p><code>...Elements...</code> In JS and most languages the content of an array is referred to as array items, not array elements. In JS this is particularly important as in many contextes <code>elements</code> refer to DOM objects and thus using the term elements is misleading.</p>

<p><code>...Sum</code> No you get items that sum to. <code>getBlahBlahSum</code> inferes a numeric result which the function does not do.</p>

<p>The function name could be <code>findContiguousItemsSummingTo</code> It infers how the function works (a search), what the search criteria is (summing to), and what it returns (an array of items).</p>

<p>The name is rather long and there are no convenient abbreviations but the <code>find</code> in this case can be dropped, <code>items</code> to <code>arr</code>, and <code>to</code> to <code>2</code> <code>contiguousArrSumming2</code></p></li>
</ul>

<h2>Verbosity</h2>

<p>There are many ways to stone a crow, and in most languages that remains true. The best way is the shortest way, less code is more readable by simple virtue of reducing time to read, and making it easier to scan large sections of code.</p>

<p>Readability is in part the ability to write a large code base. A good coder can create apps that have hundreds  of thousands of lines of code. Saving 10% is substantial, saving 50% is a order of magnitude easier to comprehend.</p>

<p>You have 6 lines for something that could be one line.</p>

<pre><code>// exit case
if (found) {
    return returnResult;
}
// recursive case
return getContiguousElementsSum(arr.slice(1), K);
</code></pre>

<p>You have 3 lines that could be one. </p>

<pre><code>if (arr.length === 0 || K &lt; 0) {
    return null;
}
</code></pre>

<p>They become</p>

<pre><code>if (arr.length === 0 || K &lt; 0) { return }

return found ? res : contiguousArrSumming2((arr.shift(), arr), val);
</code></pre>

<h3>Note on null</h3>

<p>Javascript functions do not return <code>null</code> Null is a placeholder, it means I have something that I reserve a reference for (Note The <strike>idiots</strike> people that wrote the DOM API miss used <code>null</code>). When something is not defined it is <code>undefined</code> To help reduce code size in JS <code>undefined</code> is the default return type and need not be defined. <code>return null</code> is both semantically incorrect and too verbose.</p>

<h2>Reducing source code bulk</h2>

<p>You can reduce code size using commas to separate lines. We use them in english to keep the size of a text document small and compact, you should do the same in code.</p>

<pre><code>const contiguousArrSumming2 = (arr, val) =&gt; {
    var sum = 0;
    const res = [];
    const scan = num =&gt; (sum += num, res.push(num), sum === bal);
    if (arr.length === 0 ) { return res }
    return arr.some(scan) ? res : contiguousArrSumming2(arr.slice(1), val);
};
console.log(contiguousArrSumming2([1, 2, 3, 4, 5], 9));
</code></pre>

<p>Personally I would further reduce to </p>

<pre><code>function contiguousArrSumming2(arr, val, res = []) {
    var sum = 0;
    const scan = num =&gt; (sum += num, res.push(num), sum === bal);
    return !arr.length || arr.some(scan) ? res : contiguousArrSumming2((arr.shift(), arr), val);
}
</code></pre>

<p>A competent coder will have no trouble reading the above code and should instantly spot the very important difference from your original.</p>

<h2>Be professional.</h2>

<p>Remember those that read your code are professionals. When you present your code and it looks like its a tutorial piece all you do is put distrust in your code as poor/simple language use and pointless comments make you look like a beginner, the result is they will rather rewrite than update or fix, making your efforts pointless.</p>
    </div>