<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm just going to review rotn_a, but these comments apply to all of the functions.</p>

<hr>

<pre><code>std::string rotn_a(std::string text);
...
std::string rotn_a(std::string text) { ...
</code></pre>

<p>There's nothing wrong with separating the definition and declaration, but I don't think it gets you anything in this example.</p>

<hr>

<pre><code>std::string rotn_a(std::string text) {
</code></pre>

<p>In this case, you don't actually need a copy.  You just need a new string of the same size.  It may be worthwhile to make a <code>const&amp;</code> version and a <code>&amp;&amp;</code> version.</p>

<hr>

<pre><code>for (auto i = begin(text); i != end(text); ++i) {
    // Modified from https://codereview.stackexchange.com/a/14610/177972
    std::transform(
        i, end(text), i,
</code></pre>

<p>Imagine you have a string <code>"qwertyuiop"</code> ... here's what your program will do:</p>

<pre><code>q w e r t y u i o p
&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;v
  v---------------+
  &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;v
    v-------------+
    &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;v
      v-----------+
      &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;v
        v---------+
        &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;v
...
</code></pre>

<p>You go over the entire string many many times.  <code>O(n^2)</code> times.  It's very easy to make this function go over the string once.</p>

<hr>

<pre><code>std::transform(i, end(text), i, ...
</code></pre>

<p>Minor nit: It's good to get in the habit of using <code>std::</code> everywhere, but if you choose not to, then you should be consistent. </p>

<hr>

<pre><code>if (not std::isalpha(c))
</code></pre>

<p>Minor nit 2: I think if you explained this function to a human, you would say "do blah blah blah to the letters."  You probably wouldn't say "first ignore the non-letters.  Then with the remaining letters, do blah blah blah."</p>

<p>So an (IMO) improved version would be:</p>

<pre><code>if (std::isalpha(c)) {
    ...
}
</code></pre>

<hr>

<pre><code> char const pivot = std::isupper(c) ? 'A' : 'a';
</code></pre>

<p>I think what you wrote is good.  If you want to go crazy, you could maybe optimize it to something like <code>char pivot = 01000001 | (C &amp; 00100000)</code>.  I don't know for sure that the bitwise version is faster, but I suspect it would be since <code>isupper</code> is a function call that (IIRC) needs to check the current locale which basically means it won't be inlined.</p>

<p>Also I think <code>pivot</code> is not a great name.  Maybe "base letter" or something like that.  Pivot makes me thing you are going to do comparisons and expect to have some things less than pivot and some things greater than pivot.</p>

<p>Since many of your functions do something like this, perhaps you could factor it out and make it a helper function.</p>
    </div>