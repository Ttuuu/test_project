<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My guideline on memory orders is "Just say no"; I guarantee that if you're using them, you're using them wrong. :)  So I won't attempt to find the exact bug, I'll just assume they all say <code>seq_cst</code>. The only thing I'll say about your memory orders is, when you write</p>

<pre><code>    seq_.store(seq0 + 1, std::memory_order_relaxed);
    std::atomic_thread_fence(std::memory_order_release);
</code></pre>

<p>can you explain how that's different from</p>

<pre><code>    seq_.store(seq0 + 1, std::memory_order_release);
</code></pre>

<p>?</p>

<hr>

<pre><code>Seqlock(T value = T())
</code></pre>

<p>This constructor should be <code>explicit</code>; otherwise you're accidentally permitting</p>

<pre><code>Seqlock&lt;int&gt; s = 42;
</code></pre>

<p>and in fact because of C++17 CTAD you're also permitting</p>

<pre><code>Seqlock s = 42;
</code></pre>

<p>Rule of thumb: make all constructors <code>explicit</code> except for those you want the compiler to be able to call implicitly (i.e., copy and move constructors).</p>

<hr>

<p>In <code>T load() const</code>, you load <code>seq1</code> at the bottom of the loop, and then go around again and immediately load <code>seq0</code> from the same location. You could just have set <code>seq0 = seq1</code>; i.e.</p>

<pre><code>T load() const {
    int seq1 = seq_.load(std::memory_order_relaxed);
    while (true) {
        int seq0 = seq1;
        if (seq0 &amp; 1) {
            // cpu_relax();
        } else {
            std::atomic_thread_fence(std::memory_order_acquire);
            T ret = val_;
            std::atomic_thread_fence(std::memory_order_acquire);
            seq1 = seq_.load(std::memory_order_relaxed);
            if (seq0 == seq1) {
                return ret;
            }
        }
    }
}
</code></pre>
    </div>