<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Good job on the easily understandable code.</p>

<h1>Good</h1>

<ul>
<li>Good functions, with clear names!</li>
<li>Modular approach</li>
<li>Unittests</li>
<li>Docstrings</li>
</ul>

<h1>Improvements</h1>

<ul>
<li><p>Regex with lots of backtracking can produce some major performance loss</p>

<p>Consider that this <code>re.search(r'.*[A-Z]+.*', string)</code> </p>

<p>is equal to <code>re.search(r'[A-Z]+', string)</code> </p>

<p>or even
<code>re.search(r'[A-Z]', string)</code> as Toby correctly suggested. </p>

<p>Since we only care if one character is in the given string.</p></li>
<li><p>Return directly</p>

<p>Instead of doing</p>

<pre><code>if exdpression:
    return True
return False
</code></pre>

<p>Return directly with <code>return expression</code></p></li>
<li><p>Your <code>compile</code> has no performance gain, because with every new string it will compile again. Instead you could compile only onc,e and store it as a constant.</p></li>
<li><p>Use the <code>all</code> keyword to check if all expressions evaluates to truthy.</p></li>
<li><p>Instead of <code>assertEqual(expression, function)</code></p>

<p>Do the more direct <code>assertFalse</code> or <code>assertTrue</code></p></li>
</ul>

<h1>Revised code</h1>

<pre><code>import re
import unittest

PASSWORD_CHECKS = [
    re.compile(r'[A-Z]'),
    re.compile(r'.{8,}'),
    re.compile(r'[a-z]'),
    re.compile(r'[0-9]'),
]

def strong_password(password):
    """
    Validate if passed password is considered "strong",
    Password is considered strong if:
      - is eight characters or longer
      - contains uppercase and lowercase characters
      - has one digit or more
    """
    return all(check.search(password) for check in PASSWORD_CHECKS)

class TestIsStrongPassword(unittest.TestCase):
    """Test of strong password detection function."""
    def test_strong_password(self):
        """
        Test strong password function. Passed strings have to pass 
        all tests in valid_length, uppper, lower and digit functions.
        """

        # Test from single functions should all fail 
        # (not met all criteria)
        self.assertFalse(strong_password('abcd'))
        self.assertFalse(strong_password('abcdefg'))
        self.assertFalse(strong_password('abcdefgh'))
        self.assertFalse(strong_password('abcdefghi'))

        self.assertFalse(strong_password('abcd'))
        self.assertFalse(strong_password('aBcd'))
        self.assertFalse(strong_password('aBCd'))
        self.assertFalse(strong_password('Abcd'))
        self.assertFalse(strong_password('abcD'))
        self.assertFalse(strong_password('ABCD'))

        self.assertFalse(strong_password('abcd'))
        self.assertFalse(strong_password('a1cd'))
        self.assertFalse(strong_password('a12d'))
        self.assertFalse(strong_password('1bcd'))
        self.assertFalse(strong_password('abc1'))
        self.assertFalse(strong_password('1234'))

        # Combinations which met more than one cirteria
        self.assertFalse(strong_password('12345678'))
        self.assertFalse(strong_password('Abcdefgh'))
        self.assertFalse(strong_password('A12345678'))
        self.assertFalse(strong_password('Abcdfg1'))
        self.assertTrue(strong_password('A12345678b'))
        self.assertTrue(strong_password('Abcdefg1'))
        self.assertTrue(strong_password('123456aB'))
        self.assertTrue(strong_password('aB345678'))

if __name__ == '__main__':
    unittest.main()
</code></pre>

<p><em>Notes</em></p>

<p>What is a strong password? <a href="https://xkcd.com/936/" rel="nofollow noreferrer">Obligatory xkcd</a></p>
    </div>