<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Bug: Use of <code>sprintf</code> in <code>construct_full_path</code> does not check length</h3>

<p>It's possible for <code>strlen(logpath) + strlen(filename) + strlen(append) + strlen(".log")</code> to be longer than <code>MAX_PATH_LENGTH</code>; in this case, your call to <code>sprintf</code> will smash memory beyond the end of <code>fullpath</code>. You should at least use <code>snprintf</code> to avoid out-of-bounds accesses; preferably, you would ensure that the sizes all add up, by either:</p>

<ul>
<li>Allocating enough memory statically (currently, <code>logpath</code> could be large enough to take up the whole of <code>fullpath</code>), or</li>
<li>Allocating memory dynamically to ensure the buffer will be large enough.</li>
</ul>

<h3>Bug: Check <code>if(logpath)</code> in <code>get_path</code> is always true</h3>

<p><code>logpath</code> is a statically-allocated array. It will never be a null pointer, so this condition will always be true (high compiler warning levels should catch this).</p>

<h3>Usability issue: <code>SEPARATOR</code></h3>

<p>There are lots of platforms which are not windows or linux; exploding on those platforms because you can't work out what the path separator should be seems excessive.</p>

<p>I would suggest wrapping that whole <code>#ifdef ... #elif ... #else</code> block in something like <code>#ifndef SEPARATOR</code>; that way, you can define the <code>SEPARATOR</code> macro using a compiler flag, and you don't have to care that you can't auto-detect this. If you were going to do that, I'd also suggest renaming <code>SEPARATOR</code> to <code>PATH_SEPARATOR</code>, as it has a kind of global scope (it's also a clearer name).</p>

<h3>Portability issue: <code>#include &lt;sys\timeb.h&gt;</code> only works on windows</h3>

<p>Strictly, I think that backslashes appearing in <code>#include</code> paths is undefined behaviour in some C standards. It certainly doesn't work right on Linux. On most platforms, <code>#include &lt;sys/timeb.h&gt;</code> should work if the file exists.</p>

<p>If you were feeling really fussy about portability, you might also want to make it possible to get reasonable behaviour on systems which:</p>

<ul>
<li>Don't have <code>sys/timeb.h</code></li>
<li>Don't have access to wall-clock time</li>
</ul>

<h3>Convention violation: logging to <code>stdout</code></h3>

<p>Your 'default' log destination is <code>stdout</code>. For a well-behaved program, a more natural logging destination would be <code>stderr</code>.</p>

<h3>Nonsense: checking assertion conditions after an assertion</h3>

<p>The fragment:</p>

<pre><code>assert(fp != NULL);
if (fp == NULL) {
</code></pre>

<p>is bizarre. While it's true that the assertion could be compiled out with <code>NDEBUG</code> (meaning the condition is reachable), one generally works quite hard to ensure that turning off assertions does not change the behaviour of the system. Either fall back to default, or raise an error; don't do different things depending on whether or not the program is being debugged.</p>

<h3>Questionable: file extensions are ignored</h3>

<p>AFAICT, the extension parameter is just dropped on the floor; the file extension is always <code>.log</code>.</p>

<h3>Suggestion: use dynamic allocation</h3>

<p>You have lots of ugly fixed-size buffers for path components etc. While these are mostly probably large enough to not run into issues, there are a lot of awkward edge cases if you get near the edges of those buffers, and awkward interactions of sizes. Unless you have some hard performance/memory requirement, it would be much easier just to <code>malloc</code> a chunk of memory the size you need (which you can work out easily from the various strings you're given).</p>

<h3>Feature suggestion: accept a user-provided filehandle</h3>

<p>A client of this library might want to take advantage of the logging functions, timestamping, and log level management, while managing log location themselves. It would be very straightforward to have the option of specifying a filehandle rather than a collection of path components.</p>

<h3>Feature suggestion: consider wrapping your logging functions in macros to get location</h3>

<p>For debugging purposes, I generally find that it's very helpful to log the filename and line number of the call to a logging function (depending a little on the context you're using the logger in). If you wrap <code>loge</code> and <code>logd</code> in macros, you can get these out automatically using <code>__FILE__</code> and <code>__LINE__</code>.</p>

<p>For example, if you had <code>loge</code> as:</p>

<pre><code>void loge(const char *line, int line, const char *format, ...);
</code></pre>

<p>then you could write a macro <code>LOGE</code> as:</p>

<pre><code>#define LOGE(...) loge(__FILE__, __LINE__, __VA_ARGS__)
</code></pre>

<p>the macros <code>__FILE__</code> and <code>__LINE__</code> get expanded to the filename of the containing C file, and the line in that file at which the macro appears; then you can pass them through to the <code>loge</code> function, which could then log something like:</p>

<pre><code>20:41:28.864 logtest.c:32: log session 3 finished
</code></pre>

<p>this could be useful in some situations, although you might want an option to turn it off, or to adjust the order (lots of tools can be configured to reference <code>&lt;filename&gt;:&lt;line&gt;</code> pairs in various formats back to the source line, as a way of handling e.g. compiler messages).</p>

<h3>Naming consideration: <code>loge</code> and <code>logd</code> are very similar.</h3>

<p>The visual difference between <code>loge</code> and <code>logd</code> is tiny. Using more different names (e.g., <code>log_error</code>, <code>log_debug</code>), or passing the log_level as a parameter to a single <code>log</code> function:</p>

<pre><code>void log(log_level level, const char *format, ...)
</code></pre>

<p>would in my opinion be easier to read (you might choose to make the log level names a little shorter, e.g., <code>LOG_ERR</code>, <code>LOG_ALL</code>, in that case).</p>

<h3>Naming consideration: prefer systematic naming</h3>

<p>This is probably quite subjective, but: in the case of a module such as this one, my inclination would be to prefix all of the names with <code>log_</code>, like so:</p>

<pre><code>log_init
log_set_level
log_get_level
log_flush
log_close
</code></pre>

<p>I find this makes it easier to cope with C's lack of 'real' namespacing.</p>

<h3>Dependency-management suggestion: include your own header first</h3>

<p>Opinions vary on this, but if you start your implementation file (e.g., <code>log.c</code>) by including your header file (i.e., line 1: <code>#include &lt;log.h&gt;</code>) then you can tell immediately if your header file has an accidental dependency on some type or macro introduced by another header file you're including. I prefer to make my header files self-sufficient; including them first anywhere guarantees this.</p>

<h3>Subjective layout suggestion: implement top-level interface first</h3>

<p>This is overwhelmingly subjective, but I would at least consider the overall layout of your implementation file. Personally, for a module like this one, I would prefer to forward-declare the <code>static</code> functions, then define them at the end. This way, the file reads top-down. In other contexts, that might be less clear, and it is more typing, so it's a judgement call.</p>
    </div>