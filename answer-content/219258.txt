<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some quick initial comments - will edit as I move. For your cct.hs file you probably want to put different prompt lines into a list and map a print over that list for example:</p>

<pre class="lang-hs prettyprint-override"><code>import Control.Monad

mainMenuText = ["Line 1",
    "Line 2",
    "Line 3",
    ...]

main = mapM_ putStrLn mainMenuText
</code></pre>

<p>Or use QuasiQuuotes</p>

<pre class="lang-hs prettyprint-override"><code>{-# LANGUAGE QuasiQuotes #-}
import Data.String.QQ

main = putStrLn [s|
Line 1
Line 2
Line 3|]
</code></pre>

<p>Or use multiline strings:</p>

<pre class="lang-hs prettyprint-override"><code>main = putStrLn "Line 1 \n \
                \ Line 2 \n \
                \ Line 3"
</code></pre>

<p>You may also want to an enum for each case statement menu so if need be you can pass around the value and it makes sense everywhere. In your case <code>"1"</code> being encryption is lost fairly early. I suggest adding a data type for the command:</p>

<pre class="lang-hs prettyprint-override"><code>data Command = ENCRYPTION | DECRYPTION | ...
</code></pre>

<p>So that you have one function to do both encryption and decryption: </p>

<pre class="lang-hs prettyprint-override"><code>type Message = String
type Shift = Int

caesarCipher :: Command -&gt; Message -&gt; Shift -&gt; String 
</code></pre>

<p>Or something of that nature. It'll make the interface cleaner.</p>

<p>Also be consistent in your use of camelCase.</p>

<p>This is a lot of code but lemme get to the parts which I think are worth addressing.</p>

<p>The <code>commonElems</code> function seems grossly inefficient. Checking that each item appears in every list by doing a length check then removing duplicates seems confusing. I think the simpler algorithm would be to take the unions of the running intersections.</p>

<pre class="lang-hs prettyprint-override"><code>import Data.List

commonElems xs = foldr intersect intialElement xs
  where initialElement = if (null xs) then [] else (head xs) 
</code></pre>

<p><code>matchIndices</code> would look better with explicit recursion.</p>

<pre class="lang-hs prettyprint-override"><code>matchIndices needle haystack = go needle haystack 0
  where go _ [] _        = []
        go n (x:xs)@h i  = if n `isPrefixOf` h then i : (go n xs (i + 1)) else (go n xs (i + 1))
</code></pre>
    </div>