<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>a big topic in C code is error handling</p>
</blockquote>

<p>Yes.  The best C code can do is to strive for <strong>uniformity</strong> as there are a number of good approaches.</p>

<hr>

<blockquote>
  <p>which errors should I catch (?)</p>
</blockquote>

<p>Some of the most important errors to catch are the ones outside code control - this is usually all I/O functions.</p>

<p>Missing check:</p>

<pre><code>// fgets(buf, bufsize, stdin);
if (fgets(buf, bufsize, stdin) == NULL) {
  Handle_EndOfFile_or_Error();
}
</code></pre>

<p>Naked <code>fwrite()</code>:</p>

<pre><code>// fwrite(enc, sizeof(char), enc_len, fd);
if (fwrite(enc, sizeof(char), enc_len, fd) &lt; enc_len) {
  // Report error
}
</code></pre>

<hr>

<blockquote>
  <p>which errors ... could I safely ignore?</p>
</blockquote>

<p>Code well does extensive checking.</p>

<p>The following <code>assert()</code> only applies if the addition rolls over to 0 - a pedantic concern.</p>

<pre><code>size_t required = strlen(home) + strlen(DEFAULT_PW_STORE) + 2;
// Questionable assert.
assert(required &gt; 0);
</code></pre>

<p>If code is pedantic, could detect overflow with wider math.</p>

<pre><code>#include &lt;stdint.h&gt;
....
//              v----------v form a `uintmax_t` and add using that math
uintmax_t sum = UINTMAX_C(2) + strlen(home) + strlen(DEFAULT_PW_STORE);
assert(sum &lt;= SIZE_MAX); 
size_t required = (size_t) sum;
</code></pre>

<hr>

<blockquote>
  <p>how I can improve it.</p>
</blockquote>

<p><strong>Advanced: password scrubbing</strong></p>

<p>Although not key to OP review request, secure code that uses <em>passwords</em> will 1) scrub buffers when done 2) insure atomic access 3) use functions that do 1 &amp; 2.</p>

<p>Example scrubbing:</p>

<pre><code>void scrub(void *p, size_t sz) {
  volatile unsigned char *m = p;
  while (sz-- &gt; 0) m[sz] = 0;
}

char *filename = get_passfile(pstore, argv[2]);
// Code is done with `pstore, argv[2]`, so zero it.
scrub(pstore, strlen(pstore));
scrub(argv[2], strlen(argv[2]));
</code></pre>

<p>Scrubbing is especially important when an error occurs someplace as that is often a hack approach to cause a core dump, etc.</p>

<p>Interestingly, code can write to <code>argv[2]</code>.   </p>

<p>This is a deep issue only cursorily covered here.</p>

<p><strong>Avoid UB</strong></p>

<p><code>fflush(stdin);</code> is <em>undefined behavior</em> (UB).  Avoid this compiler specific feature.</p>
    </div>