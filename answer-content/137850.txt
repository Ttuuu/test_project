<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <ul>
  <li>I think my whole solution is \$O(N)\$ because both my methods are O(N). Is that right?</li>
  </ul>
</blockquote>

<p><a href="https://stackoverflow.com/questions/11032015/how-to-find-time-complexity-of-an-algorithm">Correct</a>. Both of your methods are \$O(N)\$: they are linear in terms of the number of elements in the input array. More specifically, both <code>generateSums</code> and <code>getEquilibrium</code> loop over the array once.</p>

<blockquote>
  <ul>
  <li>I believe I used some space to generate the sums and it Is still \$O(N)\$. Is it right?</li>
  </ul>
</blockquote>

<p>Also correct. The intermediate array containing the sum contains as many elements as there was in the input array; doubling the input array in size would double the size of the intermediate array. This makes in linear in terms of space complexity.</p>

<hr>

<p>The method <code>generateSums</code> doesn't have a good name. Its purpose is to calculate the cumulative sum of the input array, going from the right to the left. Consider naming it <code>cumulativeSums</code> instead. The rest of the algorithm is correct. You won't be able to make this faster than \$O(N)\$, in terms of time complexity.</p>

<p>A small comment: instead of using a <code>break</code> explicitly inside the <code>for</code> loop, consider <a href="https://softwareengineering.stackexchange.com/questions/58237/are-break-and-continue-bad-programming-practices"><code>return</code>ing directly</a> the found index. You currenly have:</p>

<pre><code>int res = -1;
for (int i = 0; i &lt; A.length; i++) {
    if (lowSum == sums[i+1]) {
        res = i;
        break;
    }
    lowSum += A[i];
}
return res;
</code></pre>

<p>but it would be shorter to have:</p>

<pre><code>for (int i = 0; i &lt; A.length; i++) {
    if (lowSum == sums[i+1]) {
        return i;
    }
    lowSum += A[i];
}
return -1;
</code></pre>

<p>It avoids the use of a temporary local variable holding the result, and makes it clearer that -1 is the default value returned.</p>

<p>In terms of space complexity however, you can do better: this is possible in \$O(1)\$. Instead of generating an array containing the cumulative sums of the array, just calculate the total sum, let's call it right sum. Then, you keep a running sum of the array by traversing it from left to right, decreasing this right sum as you go: if the running sum is equal to the right sum, you found an equilibrium.</p>

<pre><code>public int getEquilibrium(int[] array) {
    long totalSum = sum(array);
    long lowSum = 0L;
    for (int i = 0; i &lt; array.length; i++) {
        totalSum -= array[i];
        if (lowSum == totalSum) {
            return i;
        }
        lowSum += array[i];
    }
    return -1;
}

public long sum(int[] array) {
    return Arrays.stream(array).asLongStream().sum();
}
</code></pre>
    </div>