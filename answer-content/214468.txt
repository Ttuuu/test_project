<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is nice work. Very useful educational tool. Keep up the good work.</p>
<p><strong>Now for some nitpicking:</strong></p>
<blockquote>
<pre><code>def isprime(n):
</code></pre>
</blockquote>
<ul>
<li>This function has too much things going on in it. Can you break it to smaller functions by refactor extract function?</li>
</ul>
<blockquote>
<pre><code>def isprime(n):
    if not n &amp; 1:  #check if first bit is 1

    #Fermat

    #MilRab, x**2 = 1 mod P - ERH

    def trial_composite(a):

    for i in range(100):  #Number of Rabin Witness
</code></pre>
</blockquote>
<ul>
<li>Every-time you have the urge to add comments like this it means there is something wrong. Extract functions.</li>
<li>Also if possible <code>trial_composite</code> should also go outside. But I can see this might not be possible.</li>
</ul>
<blockquote>
<pre><code>def modInverse(a, m):
    m0 = m
</code></pre>
</blockquote>
<ul>
<li>This function is really hard to understand. Please avoid using single letter variables. Rename them to something meaningful.</li>
<li>You are using <code>a</code> all over the place. I have no idea what it even means. Try to have meaningful parameters and variables.</li>
<li>Please add spaces before and after <code>#</code> comments.</li>
</ul>
<blockquote>
<pre><code>BLOCK_SIZE = 128 #Block is 128 no matter what,this is multiple of 16
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * chr(BLOCK_SIZE - len(s) % BLOCK_SIZE)
unpad = lambda s: s[:-ord(s[len(s) - 1:])]

#RSA
#Unique and Arbitrary Pub E, a prime.
e = 66047 # because I can
#e = 65537
</code></pre>
</blockquote>
<ul>
<li>Please define constants at the top so it's easier to read.</li>
<li>Why are you naming the <code>lambda</code> functions? Use a <code>def</code> if you want a name.</li>
<li>What is <code>e</code> here? name it properly so you don't need to comment.</li>
</ul>
<blockquote>
<pre><code>modInverse
</code></pre>
</blockquote>
<ul>
<li>Please use <code>snake_case</code> to name functions. Why: Industry standard. <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a>. You can use <a href="https://github.com/hhatto/autopep8" rel="nofollow noreferrer">autopep8</a> or <a href="https://github.com/ambv/black" rel="nofollow noreferrer">black</a> to format your code.</li>
</ul>
<blockquote>
<pre><code>if choice == 'B' or choice == 'b':
   lineoutholder = []
   pubkeyname = input('Enter PUBLIC key to encrypt with(recepient): ')
   privkey = input('Enter your private KEY you wish to sign with(yours): ')
   pwkey = get_private_key(getpass.getpass(prompt='Password for your private key: ', stream=None))
   try:
       with open(pubkeyname, 'r') as f1:
           pubkey = f1.read()
   except:
       print('bad keyname')
       exit()
   uhaeskey = ''.join([random.choice(string.ascii_letters + string.digits) for n in range(32)])
   n = int(bytes.decode(base64.decodestring(bytes(pubkey.encode()))), 16)
   workfile = input('Enter the file to ENCRYPT: ')
   outfile = input('Enter filename to WRITE out: ')
   sha256_hash = hashlib.sha256()
   try:
       with open(workfile, 'rb') as f2:
           wholefile = f2.read()
       with open(workfile, 'rb') as f2:#open again to clear memory
           for byte_block in iter(lambda: f2.read(4096),b""):
               sha256_hash.update(byte_block)
       HASH = sha256_hash.hexdigest()
       with open(privkey) as f3:
           priv = f3.readlines()
   except Exception as x:
       print(x)
       exit()
   d = int(bytes.decode(decryptaes(priv[1], pwkey)))
   HASH = [ord(i) for i in HASH]
   numhash = ''
   for i in HASH:
       numhash +=str(i)
   signature = pow(int(numhash), d, int(priv[0]))
   aeskey = get_private_key(uhaeskey)
   plaintext = base64.encodestring(wholefile)
   cyphertext = bytes.decode(encryptaes(plaintext.decode('ascii'), aeskey))
   shippedpw = encryptit(e, n, uhaeskey.encode())
   concat = str(str(signature)+'CUTcutCUTcutCUT'+shippedpw+'CUTcutCUTcutCUT'+cyphertext)
   with open(outfile, 'w') as f3:
       f3.write(concat)
   os.system('gzip -9 {0};mv {0}.gz {0}'.format(outfile))
   print('Wrote to {} ...'.format(outfile))

if choice == 'C' or choice == 'c':
   dspubkeyname = input('Enter the PUBLIC key to verify the signature with(sender): ')
   try:
       with open(dspubkeyname, 'r') as f1:
           pubkey = f1.read()
   except:
       print('bad keyname')
       exit()
   nsig = int(bytes.decode(base64.decodestring(bytes(pubkey.encode()))), 16)
   privkey = input('YOUR private KEY filename to decrypt the data: ')
   pwkey = get_private_key(getpass.getpass(prompt='Password for your private keyfile: ', stream=None))
   workfile = input('Enter the file to DECRYPT: ')
   outfile = input('Enter the filename to WRITE out: ')
   print('DECRYPTING')
   os.system('mv {0} {0}.gz;gzip -d {0}.gz'.format(workfile))
   sha256_hash = hashlib.sha256()
   try:
       with open(workfile) as f1:
           lineholder = f1.read().split('CUTcutCUTcutCUT')
       signature, codedkey, cyphertext =lineholder[0], lineholder[1], lineholder[2]
   except:
       print('Bad file name or path')
       exit()
   try:
       with open(privkey) as f2:
           priv = f2.readlines()
   except:
       print('Bad private key location')
   n = priv[0]
   d = int(bytes.decode(decryptaes(priv[1], pwkey)))
   sigdec = pow(int(signature), e, nsig)#Sig Verification step1 
   aeskey = decryptit(d, n, codedkey)
   aeskey = get_private_key(aeskey)
   decstr = bytes.decode(decryptaes(cyphertext, aeskey))
   cleartext = base64.decodestring(bytes(decstr, 'ascii'))
   with open(outfile, 'wb') as f1:
       f1.write(cleartext)
   with open(outfile, 'rb') as f2:
       for byte_block in iter(lambda: f2.read(4096),b""):
           sha256_hash.update(byte_block)
       HASH = sha256_hash.hexdigest()
   HASH = [ord(i) for i in HASH]
   numhash = ''
   for i in HASH:
       numhash +=str(i)
   if int(numhash) == int(sigdec):
       print('Signature Verified')
   else:
       print('FAILURE, bad hash...')
   print('Wrote out to {} '.format(outfile))
</code></pre>
</blockquote>
<ul>
<li>Please don't jam your code together. You are not writing code in an A4 sheet.</li>
<li>Please add meaningful and logical separation.</li>
<li>This could also use some extract function refactoring.</li>
</ul>
<blockquote>
<pre><code>os.system('mv {0} {0}.gz;gzip -d {0}.gz'.format(workfile))
</code></pre>
</blockquote>
<ul>
<li>Python already have <a href="https://docs.python.org/2/library/shutil.html" rel="nofollow noreferrer">shutil</a> and <a href="https://docs.python.org/3.7/library/gzip.html" rel="nofollow noreferrer">gzip</a> modules. They can move, copy files, folders and gzip stuff for you. It would be little more code, but your code can be easily made cross platform this way.</li>
</ul>
    </div>