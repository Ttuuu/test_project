<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overall</h2>
<p>It's fine as far as it goes.</p>
<p>I don't see anything wrong with the implementation.</p>
<p>Note: Since you use none checked version of <code>operator[]</code> you should have the ability to validate that your inputs are correct. So your array needs the ability to return the dimensions of the array in both the x and y dimensions so the code can validate the inputs when required.</p>
<h2>Next Step</h2>
<p>Currently this is not a container.</p>
<p>There are a few more requirements to make this a standards compliant container. If you want to go this direction.</p>
<p>see: <a href="https://en.cppreference.com/w/cpp/named_req/Container" rel="nofollow noreferrer">https://en.cppreference.com/w/cpp/named_req/Container</a></p>
<h2>Some improvements:</h2>
<p>User defined Types (and by extension template types) should always have an initial capitol letter. This is for humans so we can easily distiguish types from objects:</p>
<pre><code>template&lt;typename type&gt;
</code></pre>
<p>I don't like this as now type looks like an object to me when I read it in the code.</p>
<p>Put the destructor next to the constructors.<br>
When code reviewing I want to make sure that your destructor releases the resources correctly as I read. Not scroll back when I find the destructor at the bottom. Also they logically group together.</p>
<p>Why is none copy?<br>
I don't see the logic in that.</p>
<p>Add a swap method (noexcept) and swap free standing function. That comes in handy when interacting with the standard library functions.</p>
<p>It would be nice to simply loop over an array:</p>
<pre><code>Array2D&lt;int&gt;   data = get2DArray();

for(auto const&amp; val: data) {
    std::cout &lt;&lt; val &lt;&lt; " ";
}
</code></pre>
<p>The ability to extract rows to loop over would also be nice (this is an alternative to the above).</p>
<pre><code>for(auto const&amp; row: data) {
    for(auto const&amp; val: row) {
        std::cout &lt;&lt; val &lt;&lt; " "; 
    }
    std::cout &lt;&lt; "\n";
}
</code></pre>
<p>You have the none checked <code>operator[]</code> implemented fine. But sometimes it is nice to have checked versions so add the method <code>at()</code> that does the same thing but validates its input first.</p>
<p>This is very C like <code>type const *object</code> The <code>*</code> placed next to the object is a standard C convention but in C++ the convention is the opposite and (by tradition) you put the <code>*</code> next to the type rather than the objet (as it is part of the type information).</p>
    </div>