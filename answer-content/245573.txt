<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Others have already mentioned great simplifications like returning early, using <code>Math.min()</code> and <code>Math.max()</code>. The code already uses <code>const</code> for the function <code>sumAll</code> and that is great. <code>const</code> can also be used for any variable that should not be re-assigned - e.g. <code>total</code>. While the variable can still be mutated (e.g. with <code>Array.push()</code>) it prevents accidental re-assignment.</p>
<p>The last <code>for</code> loop could be optimized by saving <code>total.length</code> in a variable in the initialization step, and has an excess an excess semi-colon after the closing brace:</p>
<blockquote>
<pre><code>for (let i = 0; i &lt; total.length; i++) {
    sum += total[i];
};
//^ no need for semi-colon here, 
//  though it doesn't hurt
</code></pre>
</blockquote>
<p>The <code>length</code> property can be stored in a temporary variable to reduce property lookups on each iteration, making it run faster in some browsers:</p>
<pre><code>for (let i = 0, limit = total.length; i &lt; limit; i++) {
</code></pre>
<p>Better yet, since the order of iteration doesn't matter, start <code>i</code> at <code>total.length</code> and decrease it to 0:</p>
<pre><code>for (let i = total.length; i--; ) {
</code></pre>
<p>notice that the third condition is intentionally blank because the loop condition contains the operation to decrement <code>i</code> and there is no need to have a post-loop condition.</p>
<p>One could also use a functional approach (e.g. with <code>const sum = total.reduce((a, b) =&gt; a + b )</code> but that would likely be slower because of the iterator functions.</p>
    </div>