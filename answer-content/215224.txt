<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>The <code>fill</code> method is never used.</p></li>
<li><p>State should not be <code>public static</code>. By passing the relevant data to the relevant methods, you can make a lot more sense of your code, and allow more reusability of methods.</p></li>
<li><p>None of your methods save <code>main</code> need be <code>public</code>.</p></li>
<li><p>Choosing a data structure is not a matter of coding style! If you are going to use a 1D array to represent a grid, a rather unintuitive choice, it better help you write elegant code. There are a few places were we can use this 1D structure to our advantage: looping over <code>n</code> instead of <code>x, y</code> in <code>genSodoku</code> and <code>genResult</code> for instance.</p></li>
<li><p><code>genSoduku</code> is implemented very inefficiently. Instead of looping to find the next empty value, just pass it to the recursive call.</p></li>
<li><p>In the same method, you need to use a random permutation instead of a random generator. <code>Random.nextInt</code> samples "with replacement"; thus some numbers might not be considered. I used <code>Collections.shuffle</code> to do same "without replacement" instead.</p></li>
<li><p><code>genSeed</code> is ill-documented. Explain why you are selecting numbers likes this.</p></li>
<li><p>In <code>genResult</code> multiply <code>cells[n]</code> and <code>seed[n]</code> to get the same result.</p></li>
<li><p>Consolidate printing into a single <code>printBoard</code> method that take a 9-by-9 table.</p></li>
</ol>

<pre><code>import java.util.Random;
import java.util.stream.IntStream;
import java.util.stream.Collectors;
import java.util.Collections;
import java.util.List;

public class Main4 {

    public static void main(String[] args) {
        int[] seed = genSeed();
        int[] cells = genSudoku();
        int[] finalPuzzle = genResult(seed, cells);

        printBoard(seed);
        printBoard(cells);
        printBoard(finalPuzzle);
    }

    private static int[] genSudoku() {
        int[] cells = new int[81];
        genHelper(cells, 0);
        return cells;
    }

    private static List&lt;Integer&gt; getPermutation() {
        List&lt;Integer&gt; choices = IntStream.rangeClosed(1,9)
            .boxed().collect(Collectors.toList());
        Collections.shuffle(choices);
        return choices;
    }

    private static boolean genHelper(int[] cells, int n) {
        if (n == 81) {
            return true;
        }

        List&lt;Integer&gt; choices = getPermutation();
        for (int k : choices) {
            if(isSafe(cells, n, k)) {
                cells[n] = k;
                if(genHelper(cells, n + 1)){
                    return true;
                }
            }
        }

        cells[n] = 0;
        return false;
    }

    private static boolean isSafe(int[] cells, int n, int k) {
        int y = n / 9, x = n % 9;

        for (int i = 0; i &lt; 9; i++) {
            if(cells[9 * y + i] == k || cells[9 * i + x] == k) {
                return false;
            }
        }

        for (int a = 0 ; a &lt; 3; a++) {
            for (int b = 0 ; b &lt; 3; b++) {
                if (cells[9 * (y - y % 3) + (x - x % 3) + (9 * a + b)] == k) {
                    return false;
                }
            }
        }
        return true;
    }

    private static int[] genSeed() {
        int[] seed = new int[81];
        Random r = new Random();

        for(int i = 0; i &lt; 9; i++) {
            int n = r.nextInt(81);
            if(seed[n] == 1 || seed[80 - n] == 1 ) {
                i--;
            } else {
                seed[n] = 1;
                seed[80 - n] = 1;
            }
        }
        return seed;
    }

    private static int[] genResult(int[] seed, int[] cells) {
        int[] finalPuzzle = new int[81];
        for(int n = 0; n &lt; 81; n++) {
            finalPuzzle[n] = seed[n] * cells[n];
        }
        return finalPuzzle;
    }

    private static void printBoard(int[] board) {
        for(int y = 0; y &lt; 9; y++) { 
            for (int x = 0; x &lt; 9; x++) {
                System.out.print(board[9 * y + x] + " ");
                if(x % 3 == 2 &amp;&amp; x &lt; 8) {
                    System.out.print("| ");
                }
            }
            System.out.println();
            if(y % 3 == 2 &amp;&amp; y &lt; 8) {
                System.out.println("---------------------");
            }
        }
        System.out.println();
    }
}
</code></pre>
    </div>