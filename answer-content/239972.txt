<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your current approach of using a nested loop to check every Person's distance from every other Person is <code>O(n ^ 2)</code>, which is pretty expensive as the number of people increase. One alternative is to iterate over all infected people and add all coordinates within the infection radius to a Set, <code>O(n)</code>. Then iterate over non-infected people and see if their coordinate is in that set, also <code>O(n)</code></p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const maxWidth = 1200;
const maxHeight = 1000;
const radius = 5;
const numberOfPeople = 250;
const velocity = 5;
const personArray = [];

const ctx = document.getElementById("myCanvas").getContext("2d");

function getRandomCord(min, max) {
  return Math.floor(Math.random() * (max - min) + min);
}

function getRandomStartDirection() {
  // -1, 0, or 1
  return Math.floor(Math.random() * 3) - 1;
}

function Person(initXDir, initYDir) {
  this.infected = Math.random() &lt; 0.5;
  this.xCoord = getRandomCord(0, maxWidth);
  this.yCoord = getRandomCord(0, maxHeight);
  this.xDir = initXDir;
  this.yDir = initYDir;

  const detectBorderCollision = function() {
    if ((this.xCoord &lt; 0 + radius) || (this.xCoord &gt; maxWidth - radius)) {
      this.xDir = this.xDir * (-1);
    }
    if ((this.yCoord &lt; 0 + radius) || (this.yCoord &gt; maxHeight - radius)) {
      this.yDir = this.yDir * (-1);
    }
  };

  this.move = function() {
    this.xCoord += this.xDir * velocity;
    this.yCoord += this.yDir * velocity;
    detectBorderCollision.call(this);
  };
}



function ctxDraw(x, y, isInfected) {
  ctx.fillStyle = (isInfected ? "red" : "blue");
  ctx.beginPath();
  ctx.arc(x, y, radius, 0, 2 * Math.PI);
  ctx.fill();
}

function clearCanvas() {
  ctx.clearRect(0, 0, maxWidth, maxHeight);
}

function makePeople() {
  for (let i = 0; i &lt; numberOfPeople; i++) {
    const newPerson = new Person(getRandomStartDirection(), getRandomStartDirection());
    if (i === 0) newPerson.infected = true;
    personArray.push(newPerson);
  }
}

let turn = 0;
function peopleMove() {
  clearCanvas();
  turn++;
  if (turn % 60 === 0) {
    spreadInfection();
  }
  for (const person of personArray) {
    person.move();
    ctxDraw(person.xCoord, person.yCoord, person.infected);
  }
  setTimeout(peopleMove, 30);
}

const infectionRange = 50;
const infectionRangeArr = [];
for (let i = -infectionRange; i &lt;= infectionRange; i += 4) {
  for (let j = -infectionRange; j &lt;= infectionRange; j += 4) {
    if (Math.sqrt(i ** 2 + j ** 2) &lt;= 50) {
      infectionRangeArr.push([i, j]);
    }
  }
}
const surroundingCoordinates = (personX, personY) =&gt; {
  return infectionRangeArr.map(([rangeX, rangeY]) =&gt; [personX + rangeX, personY + rangeY]);
};
function spreadInfection() {
  const infectCoordinates = new Set();
  for (const person of personArray) {
    if (person.infected) {
      for (const [x, y] of surroundingCoordinates(person.xCoord, person.yCoord)) {
        infectCoordinates.add(x + ',' + y);
      }
    }
  }
  for (const person of personArray) {
    if (!person.infected &amp;&amp; infectCoordinates.has(person.xCoord + ',' + person.yCoord)) {
      person.infected = true;
    }
  }
}

makePeople();
peopleMove();</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;canvas id="myCanvas" width="1200" height="1000" style="border:1px solid #d3d3d3;"&gt;
Your browser does not support the HTML5 canvas tag.&lt;/canvas&gt;</code></pre>
</div>
</div>


<p>This makes larger numbers of people <em>runnable</em> due to the exponential speed-up, but it's still somewhat sluggish due to the sheer numbers of pixels to fill every time <code>spreadInfection</code> runs.</p>

<p>A better approach is to push each infected person into an array of <em>segments</em> of the graph. For example, given an infection radius of 50, a width of 150, and a height of 100, there would be six 50x50 segments of the graph into which each infected person would be categorized into. Then, inside <code>spreadInfection</code>, each <em>healthy</em> person would identify the segment they fall in, as well as every adjacent segment, and check if any of the infected in those segments are less than <code>infectionRadius</code> away from the healthy person.</p>

<p>On a large graph like in your real code, this means that instead of checking against <em>every</em> infected person, you'd only have to check against the infected people in 9 of the 480 segments on the graph. The smaller the infection radius and the larger the graph, the more improvement this approach provides. On my machine, this model runs with 1000 people without issues.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="false" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const maxWidth = 1200;
const maxHeight = 1000;
const radius = 5;
const numberOfPeople = 1000;
const velocity = 5;
const personArray = [];
const infectionRadius = 50;

const ctx = document.getElementById("myCanvas").getContext("2d");

function getRandomCord(min, max) {
  return Math.floor(Math.random() * (max - min) + min);
}

function getRandomStartDirection() {
  // -1, 0, or 1
  return Math.floor(Math.random() * 3) - 1;
}

const segmentColumns = Array.from(
  { length: Math.ceil(maxWidth / infectionRadius) + 1 },
  () =&gt; Array.from(
    { length: Math.ceil(maxHeight / infectionRadius) + 1 },
    () =&gt; []
  )
);

class Person {
  constructor(initXDir, initYDir) {
    this.infected = Math.random() &lt; 0.05;
    this.xCoord = getRandomCord(0, maxWidth);
    this.yCoord = getRandomCord(0, maxHeight);
    this.xDir = initXDir;
    this.yDir = initYDir;
  }
  detectBorderCollision () {
    if ((this.xCoord &lt; 0 + radius) || (this.xCoord &gt; maxWidth - radius)) {
      this.xDir = -this.xDir;
    }
    if ((this.yCoord &lt; 0 + radius) || (this.yCoord &gt; maxHeight - radius)) {
      this.yDir = -this.yDir;
    }
    this.xCoord = Math.min(maxWidth, Math.max(this.xCoord, 0));
    this.yCoord = Math.min(maxHeight, Math.max(this.yCoord, 0));
  }
  move() {
    this.xCoord += this.xDir * velocity;
    this.yCoord += this.yDir * velocity;
    this.detectBorderCollision();
  }
}

function ctxDraw(x, y, isInfected) {
  ctx.fillStyle = isInfected ? "red" : "blue";
  ctx.beginPath();
  ctx.arc(x, y, radius, 0, 2 * Math.PI);
  ctx.fill();
}

function clearCanvas() {
  ctx.clearRect(0, 0, maxWidth, maxHeight);
}

function makePeople() {
  for (let i = 0; i &lt; numberOfPeople; i++) {
    const newPerson = new Person(getRandomStartDirection(), getRandomStartDirection());
    if (i === 0) newPerson.infected = true;
    personArray.push(newPerson);
  }
}

let turn = 0;
function peopleMove() {
  clearCanvas();
  turn++;
  if (turn % 60 === 0) {
    spreadInfection();
  }
  
  for (const person of personArray) {
    person.move();
    ctxDraw(person.xCoord, person.yCoord, person.infected);
  }
  setTimeout(peopleMove, 30);
}

function spreadInfection() {
  for (const column of segmentColumns) {
    for (const square of column) {
      square.length = 0;
    }
  }
  for (const person of personArray) {
    if (person.infected) {
      const xSegment = Math.floor(person.xCoord / infectionRadius);
      const ySegment = Math.floor(person.yCoord / infectionRadius);
      segmentColumns[xSegment][ySegment].push(person);
    }
  }
  for (const person of personArray) {
    if (person.infected) continue;
    const centerXSegment = Math.floor(person.xCoord / infectionRadius);
    const centerYSegment = Math.floor(person.yCoord / infectionRadius);
    let nearbyInfected = [];
    for (let i = 0; i &lt; 3; i++) {
      const column = segmentColumns[centerXSegment + i];
      if (!column) continue;
      for (let j = 0; j &lt; 3; j++) {
        const square = column[centerYSegment + j];
        if (square) {
          nearbyInfected = nearbyInfected.concat(square);
        }
      }
    }
    for (const infected of nearbyInfected) {
      const dist = Math.sqrt(
        (infected.xCoord - person.xCoord) ** 2 +
        (infected.yCoord - person.yCoord) ** 2
      );
      if (dist &lt;= 50) {
        person.infected = true;
      }
    }
  }
}

makePeople();
peopleMove();</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;canvas id="myCanvas" width="1200" height="1000" style="border:1px solid #d3d3d3;"&gt;
Your browser does not support the HTML5 canvas tag.&lt;/canvas&gt;</code></pre>
</div>
</div>


<p>The important parts of the above code:</p>

<p>Set up the segments, an array of arrays (columns), where the items of the inner arrays are squares (50x50 parts of the graph):</p>

<pre><code>const segmentColumns = Array.from(
  { length: Math.ceil(maxWidth / infectionRadius) + 1 },
  () =&gt; Array.from(
    { length: Math.ceil(maxHeight / infectionRadius) + 1 },
    () =&gt; []
  )
);
</code></pre>

<p>Then, for <code>spreadInfection</code>:</p>

<pre><code>function spreadInfection() {
  // Reset all segment squares to empty
  for (const column of segmentColumns) {
    for (const square of column) {
      square.length = 0;
    }
  }
  // Add each infected person to the appropriate segment square
  for (const person of personArray) {
    if (person.infected) {
      const xSegment = Math.floor(person.xCoord / infectionRadius);
      const ySegment = Math.floor(person.yCoord / infectionRadius);
      segmentColumns[xSegment][ySegment].push(person);
    }
  }
  for (const person of personArray) {
    if (person.infected) continue;
    // Calculate center segment coordinate:
    const centerXSegment = Math.floor(person.xCoord / infectionRadius);
    const centerYSegment = Math.floor(person.yCoord / infectionRadius);
    let nearbyInfected = [];
    // Iterate through all adjacent segment squares,
    // pushing infected people to nearbyInfected:
    for (let i = 0; i &lt; 3; i++) {
      const column = segmentColumns[centerXSegment + i];
      if (!column) continue;
      for (let j = 0; j &lt; 3; j++) {
        const square = column[centerYSegment + j];
        if (square) {
          nearbyInfected = nearbyInfected.concat(square);
        }
      }
    }
    // Check if any of the nearby infected are within 50:
    for (const infected of nearbyInfected) {
      const dist = Math.sqrt(
        (infected.xCoord - person.xCoord) ** 2 +
        (infected.yCoord - person.yCoord) ** 2
      );
      if (dist &lt;= 50) {
        person.infected = true;
      }
    }
  }
}
</code></pre>

<p>Some other notes:</p>

<ul>
<li><a href="https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75" rel="nofollow noreferrer">Always use const to declare variables</a> whenever possible. Only use <code>let</code> when <code>const</code> is not a good option - this improves readability.</li>
<li>You might want to ensure that at least one person is infected, else the RNG will occasionally spawn a graph without any infected. Consider unconditionally infecting the first <code>Person</code> instantiated.</li>
<li>Proper spelling improves readability and prevents bugs - consider changing <code>detectBoarderCollision</code> to <code>detectBorderCollision</code></li>
<li>Rather than a <code>startAsInfected</code> function that runs on every move, only run it <em>once</em>, when a Person is instantiated. No need for a persistent <code>infectionHasBeenSet</code> property either. All you need is <code>this.infected = Math.random() &lt; 0.05;</code> as the top line of the constructor, nothing else.</li>
<li>When properties are available directly on the instance already, having accessor functions to return the instance properties can add a lot of syntax noise without really providing a benefit. If you're creating a library or something for external consumption and <em>need</em> to keep data private, sure, you can use them, but if it's just for a personal script, it doesn't help and adds extra complication.</li>
<li>Rather than calling <code>spreadInfection</code> every 2000ms and <code>peopleMove</code> every 30ms, it might be more elegant to instead call <code>spreadInfection</code> every <code>2000 / 30</code> calls of <code>peopleMove</code> - keep track of how many times <code>peopleMove</code> has been called so far and use modulo to see if it needs to call <code>spreadInfection</code>.</li>
</ul>

<blockquote>
  <p>Is this an elegant solution to call a function at a given interval?</p>
</blockquote>

<p>Sure, there's nothing wrong with a recursive <code>setTimeout</code>, it's a fine method to use.</p>

<blockquote>
  <p>I noticed in Chrome developer console, execution stacks keeps growing with each call on foo.</p>
</blockquote>

<p>There's no chance of a stack overflow, since the function runs asynchronously, so there's nothing to worry about there.</p>

<hr>

<p>There are some smaller optimizations that could be made to the code (such as using <code>requestAnimationFrame</code> to only calculate when needed, or separating the people into infected / healthy arrays to reduce branching, or adding extra empty arrays to the segments to reduce branching), but they're not essential given the improvements already done. Performance is already pretty decent.</p>
    </div>