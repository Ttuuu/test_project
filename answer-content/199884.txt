<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>RegExp</h1>
<p>When selecting text items it is always best to use regular expressions. They take a little time to master but there are plenty of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" rel="nofollow noreferrer">online resources</a>, <a href="https://regex101.com/" rel="nofollow noreferrer">editors</a>, and <a href="http://regexstorm.net/tester" rel="nofollow noreferrer">testers</a> that help.</p>
<p>RegExps are available in many computer languages, but as with all standards there are many differences so be sure to use the correct language (ECMAScript / JavaScript) version.</p>
<h3>Words beginning with *</h3>
<p>For your select (AKA filter) you want to match any string that contains a word starting with <code>"ma"</code> or whatever. The regular expression would be <code>/\bma/i</code></p>
<ul>
<li>the <code>/</code> starts a expression.</li>
<li>the <code>\b</code> means word boundary</li>
<li>the <code>ma</code> the two characters to match</li>
<li>the <code>/</code> closes the expression</li>
<li>the <code>i</code> is a search flag meaning case insensitive</li>
</ul>
<p>You will need to build the expression as needed so use the constructor to create the expression</p>
<pre><code>// Note that the "\\" escape backslash creates a single "\"
const exp = new RegExp("\\b" + searchString, "i");
</code></pre>
<p>Putting it into a function, you use <code>exp.test(str)</code> which returns <code>true</code> or <code>false</code> depending on the <code>str</code>. Note that you can not just use <code>exp.test</code> as a callback for <code>filter</code>, <code>names.filter(exp.test)</code> will throw an error. You need to either bind the function to the expression or supply the context</p>
<p>Thus the more elegant solution is</p>
<pre><code>function filterNamesStartingWith(startStr, names) {
    const exp = new RegExp("\\b" + startStr, "i");
    return names.filter(name =&gt; exp.test(name));
}

// or maybe you prefer
function filterNamesStartingWith(startStr, names) {
    const exp = new RegExp("\\b" + startStr, "i");
    return names.filter(exp.test, exp);  
}
</code></pre>
    </div>