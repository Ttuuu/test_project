<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I noticed a few things that can be improved:</p>

<ul>
<li>Not all enumerators support <code>Reset</code>. Generator methods don't, for example, so calling <code>ZipNew</code> on the result of a <code>ZipNew</code> call will fail with a <code>NotSupportedException</code>. Obtaining a new enumerator should work, at the cost of having to replace the convenient <code>using</code> statements with <code>try/finally</code> constructions. <strong><em>Edit</em></strong>: As Eric pointed out, <code>Reset</code> should not be used at all. It's been abandoned.</li>
<li>There's no need to call <code>Reset</code> <em>(or rather, to get a new enumerator)</em> when a collection is empty. I'd probably add a special case for that.</li>
<li>Passing <code>null</code> causes either an unspecific <code>NullReferenceException</code> or an <code>ArgumentNullException</code> with parameter name <code>source</code> to be thrown. Throwing <code>ArgumentNullException</code>s with accurate parameter names would be more helpful. <strong><em>Edit:</em></strong> As JAD pointed out, this is trickier than it looks. You'll have to split the method into an eager non-yielding method and a lazy yielding method. A local function should be useful here.</li>
<li><code>i1</code> and <code>i2</code> can be declared inside the while loop.</li>
</ul>

<hr>

<p><strong>Addendum:</strong></p>

<p>As Henrik's answer shows, a helper class can be useful for properly repeating enumerators without having to give up on <code>using</code>. I would take a slightly different approach by creating a repeatable enumerator class:</p>

<pre><code>class RepeatableEnumerator&lt;T&gt; : IDisposable
{
    private IEnumerable&lt;T&gt; _enumerable;
    private IEnumerator&lt;T&gt; _enumerator;


    public bool IsRepeating { get; private set; }
    public T Current =&gt; _enumerator.Current;


    public RepeatableEnumerator(IEnumerable&lt;T&gt; enumerable)
    {
        _enumerable = enumerable;
        _enumerator = enumerable.GetEnumerator();
    }

    public void Dispose()
    {
        _enumerator.Dispose();
        _enumerator = null;
    }

    public bool MoveNext() =&gt; _enumerator.MoveNext();

    public bool Repeat()
    {
        IsRepeating = true;
        _enumerator.Dispose();
        _enumerator = _enumerable.GetEnumerator();
        return _enumerator.MoveNext();
    }
}
</code></pre>

<p>Which can then be used for both enumerables (and possibly in other extension methods as well):</p>

<pre><code>public static IEnumerable&lt;TResult&gt; ZipLongest&lt;TFirst, TSecond, TResult&gt;(
    this IEnumerable&lt;TFirst&gt; first,
    IEnumerable&lt;TSecond&gt; second,
    Func&lt;TFirst, TSecond, TResult&gt; resultSelector)
{
    // Eager parameter validation:
    if (first == null) throw new ArgumentNullException(nameof(first));
    if (second == null) throw new ArgumentNullException(nameof(second));
    if (resultSelector == null) throw new ArgumentNullException(nameof(resultSelector));

    // Local function for lazy zipping:
    IEnumerable&lt;TResult&gt; ZipLongestImpl()
    {
        using (var enum1 = new RepeatableEnumerator&lt;TFirst&gt;(first))
        using (var enum2 = new RepeatableEnumerator&lt;TSecond&gt;(second))
        {
            // Up-front check for empty collections:
            if (!enum1.MoveNext() || !enum2.MoveNext())
                yield break;

            while (true)
            {
                yield return resultSelector(enum1.Current, enum2.Current);

                var is1Empty = !enum1.MoveNext();
                var is2Empty = !enum2.MoveNext();
                if (is1Empty)
                {
                    if (enum2.IsRepeating || is2Empty || !enum1.Repeat())
                        yield break;
                }
                else if (is2Empty)
                {
                    if (enum1.IsRepeating || !enum2.Repeat())
                        yield break;
                }
            }
        }
    }
    return ZipLongestImpl();
}
</code></pre>

<p>At this point it would be a good idea to add some documentation...</p>
    </div>