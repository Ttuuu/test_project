<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Revised version per answer:</p>

<pre><code>import decimal
from math import floor
from decimal import Decimal as D
from collections import namedtuple

def continued_fraction(x, k):
    cf = []
    q = floor(x)
    cf.append(q)
    x = x - q
    i = 0

    while x != 0 and i &lt; k:
        q = floor(1 / x)
        if q &gt; k:
            break
        cf.append(q)
        x = 1 / x - q
        i += 1

    return cf

def best_rational_approximation(clist, app):
    hn0, kn0 = 0, 1
    hn1, kn1 = 1, 0
    ran, rad = 0, 0
    conlist, finallist = [], []
    fraction = namedtuple("fraction", "ratio, numer, denom")
    for n in clist:
        for i in range(1, n + 1):
            ran = hn0 + (i * hn1)
            rad = kn0 + (i * kn1)
            try:
                if D.copy_abs(app-D(ran/rad)) &lt; D.copy_abs(app-D(hn1/kn1)):
                    conlist.append(fraction(f'{ran}/{rad}', ran, rad))
            except:
                pass
        hn2 = (n * hn1) + hn0
        kn2 = (n * kn1) + kn0
        conlist.append(fraction(f'{hn2}/{kn2}', hn2, kn2))
        hn0, kn0 = hn1, kn1
        hn1, kn1 = hn2, kn2
    #Change x.ratio to x.denom or x.numer for numerators or denominators   
    finallist = [ x.ratio for x in sorted(conlist, key=lambda i: i.denom) ]
    return list(dict.fromkeys(finallist))


if __name__ == "__main__":
    value = D(input('Input value to approximate: '))
    prec = len(str(value))*2
    decimal.getcontext().prec = prec
    vc = continued_fraction(value, prec)
    print(best_rational_approximation(vc, value))
~                                                    
</code></pre>
    </div>