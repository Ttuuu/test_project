<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>So I tried this for a couple of hours (even before posting here) and the following approach proved useful:</p>

<p>Work your way from the imperative approach back to the functional approach (rather than rewriting from scratch):</p>

<pre><code>def filterUnique[A](inSeq: Seq[A]): Seq[A] = {

  def go(it: Iterator[A], s: Set[A]): Stream[A] = {
    if (it.hasNext) {
      val cur: A = it.next
      if (s.contains(cur)) {
        go(it, s)
      } else {
        Stream.cons(cur, go(it, s + cur))
      }
    } else {
      Stream.empty
    }
  }

  go(inSeq.iterator, Set.empty).toSeq
}
</code></pre>

<p>Relevant commit is: <a href="https://github.com/fmv1992/fmv1992_scala_utilities/commit/4a6e844e474fb7360465e2b7977345a566e34123" rel="nofollow noreferrer">4a6e844</a>.</p>
    </div>