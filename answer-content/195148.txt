<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>naming</h1>

<p><code>s</code>, <code>c</code>, <code>d</code> and <code>e</code> are not clear variable names. Naming your variables well goes a long way to documenting your code</p>

<h1>next char</h1>

<p>The cleanest way to iterate over the next char is using zip and list indexing: <code>for char, next_char in zip(s, s[1:]):</code></p>

<pre><code>subsequent_chars = [s[0]]
longest_series = [s[0]]
for char, next_char in zip(s, s[1:]):
    if next_char &gt;= char:
        subsequent_chars.append(next_char)
    else:
        substring = ''.join(subsequent_chars)
        if len(substring) &gt; len(longest_series[0]):
            longest_series = [substring]
        elif len(substring) == len(longest_series[0]):
            longest_series.append(substring)
        subsequent_chars = [next_char]
longest_length = len(longest_series[0])
num_substrings = len(longest_series)
print(f'there are {num_substrings} with maximum length {longest_length}: {longest_series}')
</code></pre>

<p>the part of <code>elif len(substring) == len(longest_series[0]): longest_series.append(substring)</code> is only needed if you want to know all the substrings of that length</p>

<h1>alternative versions</h1>

<p>Inspired by @gozwei's answer, I came up with 2 different solutions. One only uses standard library, the other uses numpy. It does about the same as @gozwei's solution, but I think it is slightly clearer</p>

<p>For the first we will use <code>itertools.accumulate</code> to group the string in subsequent  series of ascending characters. To do this, we need a helper generator, that yield False each time the string is not ascending.</p>

<p>We can use the <code>pairwise</code> itertools recipe, or zip and string indexing</p>

<pre><code>def ascending_chars(s):
    yield False
    yield from (
        char &gt;= next_char
        for char, next_char in pairwise(s)
        # for char, next_char in zip(s, s[1:])
    )

from itertool import tee, accumulate
def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)
</code></pre>

<p>The first <code>yield False</code> is to account for the first character in the string</p>

<pre><code>import bisect
def find_subsequent_chars(original_string):
    rising = ascending_chars2(original_string)
    rising = accumulate(rising)
    rising = list(rising)
#     idx = max(groupby(rising), key=lambda x: iterlen(x[1]))[0]
    group = Counter(rising).most_common(1)[0][0]
    idx_min, idx_max = bisect.bisect_left(rising, group), bisect.bisect(rising, group)
    return original_string[idx_min, idx_max]
</code></pre>

<p>This algorithm does less than my original one. It just returns the first longest substring, unlike the other, which returns them all</p>

<h2>numpy</h2>

<pre><code>def find_longest_substring_np(s):
    # s == 'azcbobobegghakl'
    arr = np.array(list(map(ord, s)), dtype='int16')
    diff = np.diff(arr) &lt;= 0
    # diff == [False  True  True False  True False  True False False  True False True False False]
    group = np.append(np.zeros(1, dtype='int16'), diff.cumsum())
    # group == [0 0 1 2 2 3 3 4 4 4 5 5 6 6 6] 
    bins =  np.bincount(group)
    # bins == [2 1 2 2 3 2 3]
    max_count = np.max(bins)
    # max_count == 3
    groups = np.where(bins == max_count)[0]
    # groups = [4 6]
    for group_id in groups:
        indices = np.where(group == group_id)[0]
        # indices == [7 8 9] # group 4
        # indices == [12 13 14] # group 6
        idx_min = indices[0] # 7
        idx_max = indices[-1]+1 # 10
        yield s[idx_min: idx_max]
</code></pre>

<p>This one does more or less the same in numpy. 
The <code>np.append</code> is needed to take the first char in account. 
<code>np.where</code> returns a tuple, where the first element are the indices where the condition is True. <code>bisect</code> can also be used here to find <code>idx_min</code> and <code>idx_max</code>, and performance is about equal for the longer string.</p>

<p>This algorithm is about twice as fast as @gozwei's answer on my PC, and about 3 times as fast as the native implementation</p>
    </div>