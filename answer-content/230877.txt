<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Releasing memory</h2>

<p>If you assign <code>None</code> to your variables, their contents is lost and the memory will (eventually) be reclaimed.</p>

<pre><code>tablou = input("Enter values delimited by space: ")

b = tablou.split()
tablou = None

t = [] # initial  list with int() contents

for l in b:
    r = int(l)
    t.append(r)
b = None
l = None
r = None
</code></pre>

<h2>Forgetting the variables</h2>

<p>The variables <code>tablou</code>, <code>l</code>, <code>b</code>, and <code>r</code> will still exist; they will just contain the value <code>None</code>.  If you accidentally use the variable <code>tablou</code> again, you won't get a <code>NameError: name 'tablou' is not defined</code>, although you may get an error stating the operation cannot be performed on the value <code>None</code>.</p>

<p>Better would be to delete the variables when they are no longer needed:</p>

<pre><code>del tablou
del l, b, r
</code></pre>

<p>After deleting the variables, it is an error to refer to them again, without first storing a value under that name.</p>

<h2>List Comprehension</h2>

<p>Repeatedly appending values to a list is an expensive operation.  It is usually faster to create the list using "list comprehension".</p>

<p>First, note that instead of this ...</p>

<pre><code>t = []

for l in b:
    r = int(l)
    t.append(r)
</code></pre>

<p>... you could write this, eliminating the <code>r</code> variable:</p>

<pre><code>t = []

for l in b:
    t.append(int(l))
</code></pre>

<p>Then, you can replace the list creation, loop, append with the following:</p>

<pre><code>t = [ int(l) for l in b ]
</code></pre>

<p>This does the same thing as the former code, but without the repeated <code>append</code> call.  As a bonus, the list comprehension variable, <code>l</code> does not escape into the local scope; there is no need to <code>del l</code>.</p>

<h2>Mapping</h2>

<p>Applying the same operation to every element of a list is called a "mapping", and Python comes with a built in function <code>map()</code> to do just that.</p>

<p>In your specific case, you are calling <code>int( )</code> on every item in the list <code>b</code>, so instead of:</p>

<pre><code>t = [ int(l) for l in b ]
</code></pre>

<p>you could write:</p>

<pre><code>t = list(map(int, b))
</code></pre>

<p><strong>Advance topic</strong>: The <code>map()</code> function actually returns an iterator, rather than a list.  In many cases, you can avoid the call to <code>list()</code>, which iterates over all the items the iterator can produce and builds a list of out them, and simply use the returned iterator directly.</p>

<h2>One-liner</h2>

<p>You can reduce your code to one line, removing all temporary variables, using nested calls:</p>

<pre><code>t = list(map(int, input("Enter values delimited by space: ").split()))
</code></pre>

<p>I don't recommend it, however.  It does not result in easy-to-understand code.  It is better to separate "user input" from "processing".</p>

<h2>Variable Names</h2>

<p><code>t</code>, <code>r</code>, <code>l</code> and <code>b</code> are horrible variable names.  Name the variables with longer, descriptive names.</p>
    </div>