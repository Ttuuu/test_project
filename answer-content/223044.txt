<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>      int _headerCol = 0;
</code></pre>
</blockquote>

<p>In C# the convention is to only use the underscore prefix <code>_variableName</code> on fields on objects, while local variables in methods are just named <code>variableName</code>. The idea of the underscore is to distinguish local variables from members, so having them on all variables makes them redundant.  Many don't use the underscore at all.</p>

<p>In general, you should be more careful about names:</p>

<blockquote>
  <p><code>Dnp3.DNP3_RTUs</code></p>
</blockquote>

<p>This doesn't tell me much, and I doubt it will tell you anything when you have to revise you code in 3 years. And besides that, your naming style with a lot of <code>UPPERCASE</code> names and alternating use of abbreviated and very long names makes your code hard to read, and the overall impression is chaos and complexity - more than it actually is.</p>

<p>Use descriptive and self explaining names for your objects, methods, properties and variables, and in C# the convention is to use <code>PascalCase</code> for object names (<code>MyClass</code>) and methods and properties, and <code>camelCase</code> for fields and local variables.</p>

<hr>

<p>Is seems that all the methods, properties and fields on your classes are static. That may be a design descision, but be aware that you can't use these classes in parallel. I would consider to define these classes non static  so I'll have to instantiate them, when used. In my world static members are only for "libraries" of often used objects (like <code>System.Drawing.Colors</code>), class specific instance-invariant properties,  minor helper functions and extensions - and factory methods for convenience. But others have other opinions about that.</p>

<hr>

<blockquote>
<pre><code>public static int TotalLines
{
  get
  {
    return _totalLines;
  }
  set
  {
    if (value == 1)
    {
      StreamReader _lineReader = new StreamReader(path: SddtRtu.Folder, encoding: Encoding.Default);//Inicializador da leitura de dados
      while (_lineReader.ReadLine() != null) { SddtRtu._totalLines++; }
    }
  }
}
</code></pre>
</blockquote>

<p>IMO the getters and setters of properties should be without heavy computation. Depending on the size of the file you try to read here, the above can result in unexpected slow behavior - seen from the client. I would let the client do the work instead or set the property elsewhere when initializing the object. </p>

<p>Further: What if someone calls <code>TotalLines {get;}</code> before <code>TotalLines { set; } = 1</code> is called? You'll have to rethink this approach.</p>

<hr>

<blockquote>
<pre><code>// It reads the rest of the file
public static bool Read
{
  set
  {
    if (value == true)
    {
      SddtRtu._protDNP = new int[_totalLines];
      SddtRtu._protICCP = new int[_totalLines];
      SddtRtu._protMODBUS = new int[_totalLines];
</code></pre>
</blockquote>

<p>As above you do a lot in the setter of a property. This should not be a property a all but a method. And properties without a getter is very rare. I don't think I've ever created on, and I don't see it justified here either.</p>

<hr>

<blockquote>
<pre><code>      StreamReader _headerReader = new StreamReader(path: SddtRtu.Folder, encoding: Encoding.Default);
      // It reads the first line and identify the name of each header
      var _header = _headerReader.ReadLine().Split(',');
      foreach (string _content in _header)
      {
        switch (_header[_headerCol])
</code></pre>
</blockquote>

<p>Here you split the header string into <code>_headers</code> and define an index variable <code>_headerCol</code> and then you use a <code>foreach</code> loop on the <code>_header</code> with <code>_content</code> representing each string in <code>_header</code>. You're here mixing two <code>for</code>-styles.</p>

<p>Either you should do:</p>

<pre><code>foreach (string content in _header)
{
   switch (content)
   ...
</code></pre>

<p>or</p>

<pre><code>for (int headerCol = 0; headerCol &lt; _header.Length; headerCol++)
{
   switch (_header[headerCol])
   ...
</code></pre>

<p>and again: <code>_header</code> is the name of an array of headers, so call i <code>headers</code>.</p>

<hr>

<blockquote>
  <p><code>StreamReader _reader = new StreamReader(path: SddtRtu.Folder, encoding: Encoding.Default);</code></p>
</blockquote>

<p>In general you should clean up objects that implement <code>IDisposable</code> in order to release their resources - especially unmanaged resources, so wrap them in <code>using</code> statements:</p>

<pre><code>using (StreamReader _reader = new StreamReader(path: SddtRtu.Folder, encoding: Encoding.Default))
{
  ...
}
</code></pre>

<hr>

<blockquote>
<pre><code> StreamReader _reader = new StreamReader(path: SddtRtu.Folder, encoding: Encoding.Default);
  _reader.ReadLine();// Reads the header (first line) before reading the data

  _dnpLine = 0;
  _iccpLine = 0;
  _104Line = 0;
  _modLine = 0;
  _lineNum = 1;

  while (!_reader.EndOfStream)
  {
    var line = _reader.ReadLine();
</code></pre>
</blockquote>

<p>Instead of using <code>reader.EndOfStream</code> it is more concise to do:</p>

<pre><code>string line;

while ((line = reader.ReadLine()) != null)
{
  ...
}
</code></pre>

<hr>

<blockquote>
<pre><code>  line = line + 5; //The row starts on 5 because of the headers above
</code></pre>
</blockquote>

<p>You repeatedly use <code>5</code> as a magic number. That calls for a named constant field instead of using the literal in place:</p>

<pre><code>private const int rowStart = 5;


line = line + rowStart;
</code></pre>

<hr>

<blockquote>
<pre><code>public static string IDOBJ_ALIAS(int line, string data)
{
  line = line + 5;
  _worksheet1.Cells[line, _idobj_aliasCol].Value = data;
  _worksheet1.Cells[line, _idobj_aliasCol].Style.Font.Size = 11;
  _worksheet1.Cells[line, _idobj_aliasCol].Style.Font.Name = "Calibri";
  return _worksheet1.Cells[line, _idobj_aliasCol].Value.ToString();
}
</code></pre>
</blockquote>

<p>You have a lot of almost identical methods like the above. You should make one method, that takes the variables as input:</p>

<pre><code>private static string SetCells(int line, int column, string data)
{
    line = line + rowStart;
    _worksheet1.Cells[line, column].Value = data;
    _worksheet1.Cells[line, column].Style.Font.Size = 11;
    _worksheet1.Cells[line, column].Style.Font.Name = "Calibri";
    return _worksheet1.Cells[line, column].Value.ToString();
}
</code></pre>

<p>and then call that from your public api. </p>

<p>And here you also use the same font size and name a lot of times, so create a field or a property for them. It is much more readable and maintainable. </p>

<hr>

<p>So all in all your code appears more complex than it really is. You can clean it up and make it more readable and maintainable only by paying a little more attention to naming and avoiding repetitive code (DRY principle). </p>

<p>That said, being able to test your code would probably reveal a lot more to be changed, but this is as far as I can go for now?</p>

<hr>

<p>When it comes to performance, I'm unable to give any advise from the provided code. But using OfficeOpenXml is normally a better choice than COM - performancewise. </p>
    </div>