<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Great question, some possible pointers;</p>

<ul>
<li>Use the Chrome Dev Tool Performance, it will show you where the code slows down:
<a href="https://i.stack.imgur.com/RudZm.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/RudZm.png" alt="enter image description here"></a></li>
<li><p>Avoid floating-point coordinates and use integers instead with canvas calls, so</p>

<pre><code> context.moveTo(~~particle1.x, ~~particle1.y)
 context.lineTo(~~particle2.x, ~~particle2.y)
</code></pre></li>
<li><p>A double bitwise NOT <code>~~</code> is the same as calling, <code>Math.floor()</code> but faster.</p>

<p>It made <code>linkParticles</code> 30% faster for me</p></li>
<li><p>Because this does not require a transparent background, you could instantiate the context like this</p>

<p><code>var ctx = canvas.getContext('2d', { alpha: false })</code> </p>

<p>and then replace <code>clearRect</code> with <code>fillRect</code> so that you get your blue background</p></li>
<li>Finally, you want to consider batching up your lines, because ultimately the program draws very large spiderweb like images.</li>
<li>I was reading up on <a href="https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/OffscreenCanvas" rel="nofollow noreferrer">OffscreenCanvas</a>, but I don't think it will speed this up much</li>
<li>Finally, it seems that the basic Canvas methods are slowing this down, you may want to investigate rewriting this with <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context" rel="nofollow noreferrer">WebGL</a></li>
</ul>

<p>You can find some good reading <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas" rel="nofollow noreferrer">here</a>.</p>
    </div>