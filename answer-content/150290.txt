<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Slicing lists can be slow, as it performs a copy of the slice in memory, as such, you could write <code>prod</code> like:</p>

<pre><code>def product(iterable, start, stop=None, step=None):
    if stop is None:
        stop = start
        start = 0
    elements = itertools.islice(iterable, start, stop, step)
    return functools.reduce(operator.mul, elements, 1)
</code></pre>

<p>You should also define an <a href="https://stackoverflow.com/a/6890255/5069029"><code>rindex</code></a> function that find an element starting from the end of a sequence:</p>

<pre><code>def rindex(sequence, value):
    reverse_enumerate = zip(range(len(sequence) - 1, -1, -1), reversed(sequence))
    return next(i for i, v in reverse_enumerate if v == value)
</code></pre>

<p>Using these, you can write your main function:</p>

<pre><code>def product_between_min_and_max(sequence):
    min_element = min(sequence)
    max_element = max(sequence)

    l_min = sequence.index(min_element)
    l_max = sequence.index(max_element)
    r_max = rindex(sequence, max_element)
    r_min = rindex(sequence, min_element)

    if r_max - l_min &gt; r_min - l_max or (r_max - l_min == r_min - l_max
            and product(sequence, l_min, r_max + 1) &gt;= product(sequence, l_max, r_min + 1)):
        sl = (l_min, r_max)
    else:
        sl = (l_max, r_min)
    return product(sequence, sl[0], sl[1] + 1)
</code></pre>

<p>You can also simplify ranges by adding 1 at both <code>r_max</code> and <code>r_min</code> since it won't change the result of the tests:</p>

<pre><code>def product_between_min_and_max(sequence):
    min_element = min(sequence)
    max_element = max(sequence)

    l_min = sequence.index(min_element)
    l_max = sequence.index(max_element)
    # Add one to simplify writing the slices
    # Doesn't change (in)equality testings to have +1 on both sides
    r_max = rindex(sequence, max_element) + 1
    r_min = rindex(sequence, min_element) + 1

    if r_max - l_min &gt; r_min - l_max or (r_max - l_min == r_min - l_max
            and product(sequence, l_min, r_max) &gt;= product(sequence, l_max, r_min)):
        sl = l_min, r_max
    else:
        sl = l_max, r_min
    return product(sequence, *sl)
</code></pre>
    </div>