<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>No need to create dataframes beforehand</h2>
<p>The following code is not needed:</p>
<pre><code>#create dataframes for population tables
caucasian_freq = pd.DataFrame()
swh_freq = pd.DataFrame()
seh_freq = pd.DataFrame()
agg_aa_freq = pd.DataFrame()
aa_freq = pd.DataFrame()
bah_freq = pd.DataFrame()
jam_freq = pd.DataFrame()
trin_freq = pd.DataFrame()
cham_freq = pd.DataFrame()
fili_freq = pd.DataFrame()
apa_freq = pd.DataFrame()
nav_freq = pd.DataFrame()
</code></pre>
<p>You do not have to create the dataframes at this point, they will be created in the moment
you load the Excel files, that is here:</p>
<pre><code>caucasian_freq = pd.read_excel(expanded_frequencies, "Caucasian", header=1, usecols= data_columns)
</code></pre>
<h2>Use <code>range</code></h2>
<p>Generally, instead of defining a long list like this manually</p>
<pre><code>data_columns = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]
</code></pre>
<p>you can use the <code>range</code> function and then convert to a list</p>
<pre><code>data_columns = list(range(26))
</code></pre>
<p>Depending on the application the conversion to list is not necessary.</p>
<p>Also check out the documentation of pandas' <code>read_excel</code> function. The <code>use_cols</code> parameter can take ranges, too, meaning you do not have to pass every single column index but just the start and end column.</p>
<h2>More efficient loading of the Excel sheets</h2>
<p>You can load all the sheets at once by passing <code>None</code> to the <code>sheet_name</code> parameter:</p>
<pre><code>all_sheets = pd.read_excel(expanded_frequencies, sheet_name=None, header=1, usecols= data_columns) 
</code></pre>
<p>This outputs an ordered dictionary (search for OrderedDict).</p>
<p>You can then access the individual sheets like this, for example:</p>
<pre><code>all_sheets['Caucasian']
</code></pre>
<h2>Use for loops</h2>
<p>You should use for loops to avoid repetitions. Now that you have all the dataframes in one  container variable (<code>all_sheets</code>) this has become a lot easier. For example the following block of code</p>
<pre><code>caucasian_freq = caucasian_freq.truncate(after=caucasian_freq.loc[caucasian_freq['Allele'] == 'Allele'].index[0]-1)
swh_freq = swh_freq.truncate(after=swh_freq.loc[swh_freq['Allele'] == 'Allele'].index[0]-1)
seh_freq = seh_freq.truncate(after=seh_freq.loc[seh_freq['Allele'] == 'Allele'].index[0]-1)
agg_aa_freq = agg_aa_freq.truncate(after=agg_aa_freq.loc[agg_aa_freq['Allele'] == 'Allele'].index[0]-1)
aa_freq = aa_freq.truncate(after=aa_freq.loc[aa_freq['Allele'] == 'Allele'].index[0]-1)
bah_freq = bah_freq.truncate(after=bah_freq.loc[bah_freq['Allele'] == 'Allele'].index[0]-1)
jam_freq = jam_freq.truncate(after=jam_freq.loc[jam_freq['Allele'] == 'Allele'].index[0]-1)
trin_freq = trin_freq.truncate(after=trin_freq.loc[trin_freq['Allele'] == 'Allele'].index[0]-1)
cham_freq = cham_freq.truncate(after=cham_freq.loc[cham_freq['Allele'] == 'Allele'].index[0]-1)
fili_freq = fili_freq.truncate(after=fili_freq.loc[fili_freq['Allele'] == 'Allele'].index[0]-1)
apa_freq = apa_freq.truncate(after=apa_freq.loc[apa_freq['Allele'] == 'Allele'].index[0]-1)
nav_freq = nav_freq.truncate(after=nav_freq.loc[nav_freq['Allele'] == 'Allele'].index[0]-1)
</code></pre>
<p>can be replaced by a for loop like this:</p>
<pre><code>for population in all_sheets:
    current_sheet = all_sheets[population]
    truncation_index = current_sheet.loc[current_sheet['Allele'] == 'Allele'].index[0]-1
    all_sheets[population] = current_sheet.truncate(after=truncation_index)
</code></pre>
<p>This improves both readability and maintainability. The same should be done for the <code>fillna</code> operation in your code, I would put it in the same for loop.
Also, I introduced an intermediate variable <code>truncation_index</code> to make things more readable.</p>
<p><strong>Edit:</strong> Please note that the name <code>all_sheets</code>, that I used here, is not optimal when we are writing actual programs (instead of just examples). In my opinion, telling names like <code>allele_frequencies</code> would be preferable</p>
<p>I hope this helps.</p>
    </div>