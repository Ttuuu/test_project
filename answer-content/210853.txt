<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think these are nice solutions if you are into design patterns. But it does seem to make the problem more difficult than it needs to be.</p>

<p>What is an item? A collection of characteristics. Designing a class for every possible characteristic is weird. My thinking is why? Moreover, why would you want to perform a type check for every characteristic of an item? This may be fine in some games, but suppose you were designing an arpg, <a href="https://i.imgur.com/LANJF94.jpg" rel="nofollow noreferrer">See Here</a>. This would become flat out inefficient.</p>

<p>Another approach could be to define specific items. </p>

<pre><code>public class Item
{
    public readonly string Name;
    public readonly string Description;
    public readonly string ID;
    public readonly string Type;
    public readonly float Value;
    public readonly float Weight;
    public readonly bool IsStackable;

    private Item() { }

    public Item(string name, string description, string id, string type, float value, float weight, bool isStackable)
    {
        Name = name;
        Description = description;
        ID = id;
        Type = type;
        Value = value;
        Weight = weight;
        IsStackable = isStackable;
    }
}
</code></pre>

<p>This way you could have an item, such as a cup, which may not serve any purpose other than random loot/props that have value for the player to sell. You could then define item type such as equipment. Is stackable is something you will have to determine, considering that not all items are stackable, but you may want the previously mentioned cup to be stackable.</p>

<pre><code>public class Equiptable : Item
{
    public readonly SlotType Slot;
    private List&lt;Modifier&gt; _Modifiers;
    public IList&lt;Modifier&gt; Modifiers { get { return _Modifiers.AsReadOnly(); } }

    public Equiptable(string name, string description, string id, string type, float value, float weight, bool isStackable, SlotType slot, List&lt;Modifier&gt; modifiers) 
        : base(name, description, id, type, value, weight, isStackable)
    {
        Slot = slot;
        _Modifiers = modifiers;
    }

    public void AddModifier(Modifier modifier)
    {
        _Modifiers.Add(modifier);
    }

    public void RemoveModifier(Modifier modifier)
    {
        _Modifiers.Remove(modifier);
    }
}
</code></pre>

<p>Here we define an equitable item. An equitable item is going to provide some benefit to the player - when equipped. An equitable is a collection of modifiers that provide some sort of modifier to the player when equipped.</p>

<p>So what is a modifier? Well it is just a name, value, and calculation. The calculation determines how the modifier will be applied. Such as a flat rate or percentage. They are just flags, and can be represented as an enum. Note, there may be more than one percent calculation, as mathematically percentages display unique properties when added together or applied individually.</p>

<pre><code>/// &lt;summary&gt;
/// Represents a Modifier
/// &lt;/summary&gt;
public class Modifier
{
    #region readonly members
    /// &lt;summary&gt;
    /// This modifier's name
    /// &lt;/summary&gt;
    public readonly string Name;
    /// &lt;summary&gt;
    /// This modifier's description
    /// &lt;/summary&gt;
    public readonly string Description;
    /// &lt;summary&gt;
    /// This modifier's id
    /// &lt;/summary&gt;
    public readonly string ID;
    /// &lt;summary&gt;
    /// This modifier's type
    /// &lt;/summary&gt;
    public readonly string Type;
    /// &lt;summary&gt;
    /// This modifiers magnitudue
    /// &lt;/summary&gt;
    public readonly float Magnitude;
    /// &lt;summary&gt;
    /// This modifier's calculations type
    /// &lt;/summary&gt;
    public readonly CalculationFlag Calculation;
    #endregion readonly members

    #region constructors
    /// &lt;summary&gt;
    /// prevent public access to unititialized modifier
    /// &lt;/summary&gt;
    private Modifier() { }

    /// &lt;summary&gt;
    /// Constructs a new modifier
    /// &lt;/summary&gt;
    /// &lt;param name="name"&gt;This modifier's name&lt;/param&gt;
    /// &lt;param name="descrpition"&gt;This modifier's description&lt;/param&gt;
    /// &lt;param name="id"&gt;This modifier's id&lt;/param&gt;
    /// &lt;param name="type"&gt;This modifier's type&lt;/param&gt;
    /// &lt;param name="mangnitude"&gt;This modifier's magnitude&lt;/param&gt;
    /// &lt;param name="calculation"&gt;This modifier's calculation type&lt;/param&gt;
    public Modifier(string name, string descrpition, string id, string type, float mangnitude, CalculationFlag calculation)
    {
        //
        //  Initialize member variables
        //
        Name = name;
        Description = descrpition;
        ID = id;
        Type = type;
        Magnitude = mangnitude;
        Calculation = calculation;
    }

    #endregion constructors
}
</code></pre>

<p>Forgive the comments, this is copied from active code. However, it may provide intuition as to what is going on. In addition to the values I had mentioned, the modifier is just a memory location with values. So, what do these modifiers actually do? How do they work? The type, as I have it will define the attribute/stat that it effects. It is a string to so I may define all my modifiers in a file loaded into the program. Many benefits to this, but the one I am interested in is the data driven programming aspect. I will not need to recompile to modify a modifier. Moreover, a nice thing about this is that I can define a normal item as a minimum and maximum damage modifier. The modifiers will apply to the character, when equipped, like any other. We can then have an attribute class to represent stats for a character.</p>

<p>Then we have the attribute</p>

<pre><code>    /// &lt;summary&gt;
/// Represents an Attribute
/// &lt;/summary&gt;
public class Attrbute
{
    #region public variables
    /// &lt;summary&gt;
    /// An action to take place when the base value is changed
    /// &lt;/summary&gt;
    public Action OnBaseValueChange;
    /// &lt;summary&gt;
    /// An action to take place when the current value is changed
    /// &lt;/summary&gt;
    public Action OnCurrentValueChange;

    /// &lt;summary&gt;
    /// This attribute's name
    /// &lt;/summary&gt;
    public readonly string Name;
    /// &lt;summary&gt;
    /// This attribute's description
    /// &lt;/summary&gt;
    public readonly string Description;
    /// &lt;summary&gt;
    /// This attribute's id
    /// &lt;/summary&gt;
    public readonly string ID;
    #endregion public variables

    #region private variables
    /// &lt;summary&gt;
    /// The base value of this attribute
    /// &lt;/summary&gt;
    private float _BaseValue;
    /// &lt;summary&gt;
    /// The current value of this attribute
    /// &lt;/summary&gt;                
    private float _CurrentValue;  
    /// &lt;summary&gt;                 
    /// The modified state of this attribute
    /// &lt;/summary&gt;
    private bool _IsModified;

    /// &lt;summary&gt;
    /// A collection of modifiers applied to this attribute
    /// &lt;/summary&gt;
    private List&lt;Modifier&gt; _Modifiers;
    #endregion private variables

    #region public properties
    /// &lt;summary&gt;
    /// A read-only collection of modifiers applied to this attribute
    /// &lt;/summary&gt;
    public IList&lt;Modifier&gt; Modifiers { get { return _Modifiers.AsReadOnly(); } }

    /// &lt;summary&gt;
    /// The base value of this attribute
    /// &lt;/summary&gt;
    public float BaseValue
    {
        get
        {
            //return the base value
            return _BaseValue;
        }
        set
        {
            //update the base value
            _BaseValue = value;
            //Update modified state
            _IsModified = true;

            if (OnBaseValueChange != null)
                OnBaseValueChange();
        }
    }

    /// &lt;summary&gt;
    /// Returns the current value of this modifier
    /// &lt;/summary&gt;
    public float CurrentValue
    {
        get
        {
            //update the current value if this attribute has been modified
            if (_IsModified)
            {
                //get new current value
                _CurrentValue = CalculateCurrentValue();
                //update modified state to false
                _IsModified = false;

                if (OnCurrentValueChange != null)
                    OnCurrentValueChange();
            }
            //return the current value
            return _CurrentValue;
        }
    }

    #endregion public properties


    #region constructors
    /// &lt;summary&gt;
    /// Prevents public access to instantiate an unitialized attribute
    /// &lt;/summary&gt;
    private Attrbute() { }

    /// &lt;summary&gt;
    /// Constructs an instance of an attribute with an empty collection of modifiers
    /// &lt;/summary&gt;
    /// &lt;param name="name"&gt;The name of the attribute&lt;/param&gt;
    /// &lt;param name="description"&gt;The description of the attribute&lt;/param&gt;
    /// &lt;param name="id"&gt;The id of the attribute&lt;/param&gt;
    /// &lt;param name="baseValue"&gt;The base value of the attribute&lt;/param&gt;
    public Attrbute(string name, string description, string id, float baseValue)
    :this(name, description, id, baseValue, new List&lt;Modifier&gt;()) { }   //TODO(stephen): Performance -&gt; A new list with an initialze size?

    /// &lt;summary&gt;
    /// Constructs an attribute with a given collection of modifiers
    /// &lt;/summary&gt;
    /// &lt;param name="name"&gt;The name of the attribute&lt;/param&gt;
    /// &lt;param name="description"&gt;The description of the attribute&lt;/param&gt;
    /// &lt;param name="id"&gt;The id of the attribute&lt;/param&gt;
    /// &lt;param name="baseValue"&gt;The base value of the attribute&lt;/param&gt;
    /// &lt;param name="modifiers"&gt;The collection of modifiers for the attribute&lt;/param&gt;
    public Attrbute(string name, string description, string id, float baseValue, List&lt;Modifier&gt; modifiers)
    {
        //
        //Initialize member variables
        //
        Name = name;
        Description = description;
        ID = id;
        BaseValue = baseValue;
        _Modifiers = modifiers;
    }

    #endregion constructors


    #region public methods
    /// &lt;summary&gt;
    /// Adds a modifier to this attribute
    /// &lt;/summary&gt;
    /// &lt;param name="modifier"&gt;The attribute to remove&lt;/param&gt;
    public void AddModifier(Modifier modifier)
    {
        //Add modifier to collection
        _Modifiers.Add(modifier);
        //update modified state
        _IsModified = true;
    }

    /// &lt;summary&gt;
    /// Removes a modifier from this attribute
    /// &lt;/summary&gt;
    /// &lt;param name="modifier"&gt;The modifier to remove&lt;/param&gt;
    public void RemoveModifier(Modifier modifier)
    {
        //Remove modifier to collection
        _Modifiers.Remove(modifier);
        //update modified state
        _IsModified = true;
    }
    #endregion public memthods

    #region private properties
    /// &lt;summary&gt;
    /// Calculates the current value from all applied modifiers
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    private float CalculateCurrentValue()
    {
        //initiliaze local variables
        float flatRateValues = BaseValue;
        float percentRateValue = 1.0f;

        //iterate through all modifiers applied to this attribute
        foreach (Modifier modifier in Modifiers)
        {
            //add magnitude to flat rate values
            if (modifier.Calculation == CalculationFlag.Flat)
                flatRateValues += modifier.Magnitude;
            //add magnitude to percent rate values
            else if (modifier.Calculation == CalculationFlag.Percent)
                percentRateValue += modifier.Magnitude;
            //calculation type not found, throw exception
            else
                throw new NotSupportedException("Attribute-&gt;CalculateCurrentValue() - CalcuationType -&gt; "
                    + modifier.Calculation + " Not Found!");
        }

        //return the calculated value
        return flatRateValues * percentRateValue;
    }
    #endregion private variables
}
</code></pre>

<p>The attribute is relatively strait forward. We manage a collection of modifiers that apply to the attribute. The actions provide means of doing things when the attribute is modified, such as updating ui or some other attribute, such as max health.</p>

<p>Now all we need is a character that can equip equitables.</p>

<pre><code>public class Character
{
    private List&lt;Attrbute&gt; _Attributes;
    private Dictionary&lt;SlotType, Equiptable&gt; _Equiptment;

    public IList&lt;Attrbute&gt; Attributes { get { return _Attributes.AsReadOnly(); } }

    public Character(List&lt;Attrbute&gt; attributes)
    {
        _Attributes = attributes;
        _Equiptment = new Dictionary&lt;SlotType, Equiptable&gt;();

        foreach (SlotType slot in System.Enum.GetValues(typeof(SlotType)))
        {
            _Equiptment.Add(slot, null);
        }
    }

    public Attrbute FindAttribute(string name)
    {
        return _Attributes.Find(attribute =&gt; attribute.Name == name);
    }

    public void Equipt(Equiptable equiptable)
    {
        Equiptable currentEquipt = _Equiptment[equiptable.Slot];

        _Equiptment[equiptable.Slot] = equiptable;

        foreach (Modifier modifier in equiptable.Modifiers)
        {
            Attrbute attribute = FindAttribute(modifier.Type);

            if (attribute != null)
                attribute.AddModifier(modifier);
        }

        //add currentEquipt to inventory?
    }

    public void UnEquipt(SlotType slot)
    {
        Equiptable removed = _Equiptment[slot];
        _Equiptment[slot] = null;

        foreach (Modifier modifier in removed.Modifiers)
        {
            Attrbute attribute = FindAttribute(modifier.Type);

            if (attribute != null)
                attribute.RemoveModifier(modifier);
        }
        //add removed to inventory?
    }
}
</code></pre>

<p>Equitable slots is an enum that you can define however you like, but int this example:</p>

<pre><code>public enum SlotType
{
    None = 0x0000,
    Primary = 0x0001,
    Secondary = 0x0002,
    TwoHanded = 0x0004,
    Ranged = 0x0008,
}
</code></pre>

<p>All of this is just a suggestion. Each game will handle things differently. For instance, you may not have props as items, such as a cup. Moreover, the desing patterns mentioned in this post may serve you well. It all comes down to how you want to manage your items. If you wanted crafting of some kind with raw resources, then you can define a class for that.</p>
    </div>