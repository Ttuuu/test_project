<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Naming</h2>

<p>The following qoute from <a href="https://msdn.microsoft.com/en-us/library/ms229002(v=vs.110).aspx" rel="nofollow">Naming Guidelines on MSDN</a> is one of my favorites:</p>

<blockquote>
  <p>The goal of this chapter is to provide a consistent set of naming
  conventions that results in names that make immediate sense to
  developers.</p>
</blockquote>

<p>There are a couple of alternative names that I can suggest:</p>

<ul>
<li><p>The name <code>DumbAsyncMutex</code> is confusing because</p>

<ol>
<li>The type it represents is not a mutex at all</li>
<li>An asynchronous mutex does not make sense</li>
<li>It can be changed to <code>TaskExecutionSynchronizer</code></li>
<li>I think the latter describes the funtion of the type way better because the type simply "synchronizes execution of tasks"</li>
</ol></li>
<li><p>The method name <code>WithMutexAsync</code> is not a good name and can be changed to <code>QueueTask</code> because that is what this method actually does, queueing tasks for synchronized execution.</p></li>
<li><p>The name <code>busy</code> makes sense but</p>

<ol>
<li>It sounds too broad to represent a flag used for synchronization</li>
<li>It's name can be changed to <code>numberOfTasksInProgress</code>.</li>
<li>Yes, this will change the meaning of the variable from being a flag to being an integer counting ongoing parallel executions</li>
<li>But we limit it's values to 1 or 0 anyway so it should be fine. (The number of parallel executions is either 1 or 0)</li>
</ol></li>
<li><p>The parameter name <code>t</code></p>

<ol>
<li>Is <code>t</code></li>
<li>It can at least be changed to <code>task</code>.</li>
<li>You can use your creativity to name it better, unfortunately mine refused to co-operate for a name like <code>t</code></li>
</ol></li>
</ul>

<h2>Functionality</h2>

<ul>
<li>It is very likely that the tasks registered to execute (by <code>await
WithMutexAsync()</code> call) will not be executed in the same order. This
may or may not cause an issue, I don't know the full flow.</li>
<li>That is, if a call to this method is made while a previous call is
waiting at Task.Delay() and the mutex at that moment is released
(busy = 0) during that delay, the latest passed <code>Task</code> will be
executed instantly while the previously passed <code>Task</code> will wait for
this one's execution as well. This actually introduces a FIGKWIOF
type of queue. (First In God Knows Which Is Out First).</li>
<li>Another important point is, you cannot pass the instance of this
struct around to ensure synchronized execution of REST service calls
because it is a value type (<code>struct</code>) and the value of the field
<code>busy</code> will be copied and <code>Task</code>s passed into that new instance will
lost the synchronization context with the <code>Task</code>s executed by the
original instance. You can overcome this by changing the type to a <code>class</code>.</li>
<li>Apart from that, the use of <code>Interlocked.CompareExchange</code> for this
purpose feels like kind of abuse. Why don't you instead use
<code>Monitor.TryEnter</code> without a timeout?</li>
<li>Also, the <code>while</code> loop in the <code>finally</code> block seems completely
unnecessary (is it a result of a copy/paste?). You can achieve the
same behaviour by an <code>if</code> statement.</li>
</ul>
    </div>