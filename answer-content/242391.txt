<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I won't necessarily point out flaws, but also suggestions. Of course you don't have to adhere to any of them, just things to help improve your code. I'm not that familiar with Kotlin, so I am likely to miss some stuff in the Kotlin parts.</p>

<h3>WeightFilter</h3>

<p>Although it seems like a basic usage of an <code>enum</code>, there is a way to improve the design.
<code>Enum</code>s in Java are actually a type of class, and so they can have methods. Instead of using a <code>switch</code> to filter by type, we can implement the logic inside:</p>

<pre><code>public enum WeightFilter {
    ShowOnlyHaveComment {
        @Override
        List&lt;WeightUI&gt; filter(List&lt;WeightUI&gt; data) {
            return data.stream().filter(weight -&gt; weight.getComment().trim().isEmpty()).collect(Collectors.toList());
        }
    },
    ShowOnlyHaventComment {
        //implementation
    }
    // other constants
    ;

    abstract List&lt;WeightUI&gt; filter(List&lt;WeightUI&gt; data);
}

public List&lt;WeightUI&gt; filter(List&lt;WeightUI&gt; weights, WeightFilter weightFilter) {
    return weightFilter.filter(weights);
}
</code></pre>

<p>There are actual several implementation options, like:</p>

<pre><code>public enum WeightFilter {
    ShowOnlyHaveComment {
        @Override
        Predicate&lt;WeightUI&gt; newFilter() {
            return weight -&gt; weight.getComment().trim().isEmpty();
        }
    },
    ShowOnlyHaventComment {
        //implementation
    }
    // other constants
    ;

    abstract Predicate&lt;WeightUI&gt; newFilter();
}
</code></pre>

<p>Why is this design good? The main advantage is that you can modify the enum without having to worry about the <code>switch</code>. It's not uncommon that programmers forget to update all <code>switch</code> over enum which they modified.</p>

<h3>WeightChange</h3>

<p>We don't really see all the usages of <code>WeightChange</code>, so maybe the can be other comments.</p>

<p><code>getByChange</code> is an example for a common factory method for <code>Enum</code> by a property. However, the implementation has a small problem.</p>

<p>If the value is not found among the constants, it returns a default value. This is likely pretty bad, since the argument is wrong, but the method acts as if everything is fine. So you might miss bugs that are related to that. Instead, a <code>EnumConstantNotPresentException</code> or <code>IllegalArgumentException</code> should be thrown, indicating the "user" of this method has provided an invalid argument.</p>

<h3>WeightFilterUseCaseTest</h3>

<p>This is more of a personal approach, so feel free to ignore it.</p>

<p>Tests should generally be completely disconnected from each other, so that they won't have any affect on each other. The sharing of <code>weights</code> and <code>weightFilterUseCase</code> across the instance can lead to an effect among each other, depending on the runner of the tests (which could be changed). I would recommend creating all of those inside each test method as a local variable. It might make the tests longer, but it ensures they are sandboxed. You can use a method to create <code>weights</code> instead of creating each time manually, or switch to JUnit5 and use something like <code>MethodSource</code>.</p>

<p>You might want to become more familiar with assertions from <a href="https://www.baeldung.com/junit-assertions" rel="nofollow noreferrer">JUnit</a> and matchers from <a href="https://dzone.com/articles/using-hamcrest-and-junit" rel="nofollow noreferrer">Hamcrest</a>. They both provide more information on test failures, and allow more complex assertions to be done easily.</p>

<h3>WeightUI</h3>

<p>Not really sure how this is used, since you haven't posted the code for it, however one clear things is that the inheritance of <code>Weight</code> is wrong. Inheritance is used to define type relations, not avoid data duplication, and <code>WeightUI</code> doesn't seem to be a type of <code>Weight</code>.. since <code>Weight</code> is just a container for data about <code>Weight</code>. If anything <code>WeightUI</code> should contain an instance of <code>Weight</code> and use it. </p>

<h3>Weight</h3>

<p>Again not sure how everything is used here, not the full code. </p>

<p><code>date</code> can be an actual date object, like <code>Date</code>, instead of <code>long</code>. This can make it easier to use with some things. Really depends on how you use <code>date</code>. Can easily be converted to epoch time for parceling if needed.</p>

<p>Inside <code>equals</code>, after some basic checks, you immediately convert the object to <code>Weight</code>, without testing if it really is an instance of <code>Weight</code>. Could lead to an exception.</p>
    </div>