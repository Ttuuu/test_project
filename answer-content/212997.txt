<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>My only concern with the following class is the line hierarchy.trimToSize() in determineHierarchy</p>
</blockquote>

<p>You could replace the <code>ArrayList</code> through a <code>LinkedList</code>. While the <code>ArrayList</code> reserves space, the <code>LinkedList</code> stores only what it owns. Additionally I would change the <code>for-loop</code> to a (in this case) more readable <code>while-loop</code>. </p>

<pre class="lang-java prettyprint-override"><code>private static List&lt;Class&lt;?&gt;&gt; determineHierarchy(Class&lt;?&gt; clazz) {
  List&lt;Class&lt;?&gt;&gt; hierarchy = new LinkedList&lt;&gt;();

  Class&lt;?&gt; currentClass = clazz;
  while (currentClass != null) {
    hierarchy.add(currentClass);
    currentClass = currentClass.getSuperclass();
  }

  return hierarchy;
}
</code></pre>

<blockquote>
  <p>However, putting it in the constructor clutters the code more than my current solution</p>
</blockquote>

<p>For that I would create a public <em>static factory method</em>. This method contains all the validation logic while the <em>constructor</em> can be private and dump.</p>

<pre class="lang-java prettyprint-override"><code>private ClassHierarchy(List&lt;Class&lt;?&gt;&gt; clazz) {
  hierarchy = clazz;
}

public static ClassHierarchy of(Class&lt;?&gt; clazz) {
  Objects.requireNonNull(clazz, "clazz must not be null");

  if (isProperClass(clazz))
    return new ClassHierarchy(determineHierarchy(clazz));

  throw new IllegalArgumentException("clazz must refer to a class type");
}
</code></pre>

<blockquote>
  <p>Any recommendations or should I just live with it?</p>
</blockquote>

<p>As already mentioned a method for the validation would be a nice to have.<br>
Maybe it could like:</p>

<pre class="lang-java prettyprint-override"><code>private static boolean isProperClass(Class&lt;?&gt; clazz) {
  return Stream.of(clazz)
               .filter(Class::isEnum)
               .filter(Class::isAnnotation)
               .filter(Class::isInterface)
               .noneMatch(Class::isPrimitive);
}
</code></pre>
    </div>