<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To understand your program better, I cleaned up up your code.</p>

<p><code>diff.go</code>:</p>

<pre><code>package main

import (
    "fmt"
    "io/ioutil"
    "os"
)

func main() {
    files := os.Args[1:]
    if len(files) &lt; 2 {
        fmt.Fprintln(os.Stderr, "expecting at least 2 files")
        return
    }

    bufs := make([][]byte, len(files))
    for i, file := range files {
        var err error
        bufs[i], err = ioutil.ReadFile(file)
        if err != nil {
            fmt.Fprintln(os.Stderr, "error reading file %s: %v", file, err)
            return
        }
    }

    minLen := len(bufs[0])
    for _, b := range bufs[1:] {
        if len(b) &lt; minLen {
            minLen = len(b)
        }
    }

    for i := 0; i &lt; minLen; i++ { 
        v := bufs[0][i]           
        for j := 1; j &lt; len(files); j++ { 
            if v != bufs[j][i] {
                fmt.Printf("first difference at offset %[1]d = %#[1]x\n", i)
                return
            }
        }
    }

    fmt.Println("no differences found")
}
</code></pre>

<hr>

<p>Code should be readable. Drop references to <code>os.Args</code>; It's <code>files</code>.</p>

<p>For example, unreadable code and messages:</p>

<pre><code>if len(os.Args) &lt; 3 {
    fmt.Println("expecting at least 2 arguments")
    return
}
</code></pre>

<p>and so on.</p>

<p>Readable code and messages:</p>

<pre><code>files := os.Args[1:]
if len(files) &lt; 2 {
    fmt.Fprintln(os.Stderr, "expecting at least 2 files")
    return
}
</code></pre>

<p>and so on. </p>

<p>Also, error messages go to <code>stderr</code>.</p>

<p>In Go, lengths are pre-calculated. Delete </p>

<pre><code>nfi := len(os.Args) - 1
</code></pre>

<p><code>nfi</code> is simply the efficient and meaningful <code>len(files)</code>.</p>

<p>Why is it so complicated to read file data?</p>

<pre><code>    fi, err := os.Open(fn)
    if err != nil {
        fmt.Printf("error opening file %s: %v", fn, err)
        return
    }
    defer fi.Close()

    bufs[i], err = ioutil.ReadAll(fi)
    if err != nil {
        fmt.Printf("error reading from file %s: %v", fn, err)
    }
</code></pre>

<p>Note: <code>defer fi.Close()</code> doesn't work the way you want it to. The <code>defer</code>s don't run until <code>main</code> returns.</p>

<p>Simplify, just <code>ReadFile</code>,</p>

<pre><code>    var err error
    bufs[i], err = ioutil.ReadFile(file)
    if err != nil {
        fmt.Fprintln(os.Stderr, "error reading file %s: %v", file, err)
        return
    }
</code></pre>

<p>You wrote</p>

<pre><code>    if l &lt; min {
        min = l
    }
</code></pre>

<p>It's more readable to line them up</p>

<pre><code>    if min &gt; l {
        min = l
    }
</code></pre>

<p>I found the variable name <code>min</code> a little terse. I used <code>minLen</code>. And, again, <code>l := len(b)</code> is redundant. <code>len(b)</code> is pre-calculated.</p>

<pre><code>// get a minimum len of all the buffers
min := len(bufs[0])
for _, b := range bufs[1:] {
    l := len(b)
    if l &lt; min {
        min = l
    }
}
</code></pre>

<p>became</p>

<pre><code>minLen := len(bufs[0])
for _, b := range bufs[1:] {
    if minLen &gt; len(b) {
        minLen = len(b)
    }
}
</code></pre>

<p>You write:</p>

<pre><code>fmt.Printf("first difference at offset %d = 0x%x\n", i, i)
</code></pre>

<p>Why <code>0x%x</code>?</p>

<p>Why  <code>i, i</code>?</p>

<p>Using the <code>fmt</code> package documentation:</p>

<pre><code>fmt.Printf("first difference at offset %[1]d = %#[1]x\n", i)
</code></pre>
    </div>