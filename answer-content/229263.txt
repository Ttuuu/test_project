<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Scope</h2>

<p>If all you need is to calculate some values from a set of data tables, it would suffice to use LINQ. However, if you prefer to provide an API with common functionality concerning orders and order details, you should really create your own domain classes and map the data tables to your domain classes. For the sake of this question, I would opt for using LINQ directly on the data tables.</p>

<h2>Review</h2>

<p>You are iterating your 3 data tables <code>kassaOrders</code>, <code>orderDetails</code> and <code>menuDetails</code> over and over again with each order detail having a link to a kassa order and each menu detail having a link to a kassa order. We can easily optimize performance and reduce code redundancy by caching these tables in lookup collections.</p>

<h3>Lookup Tables</h3>

<p>Start by caching the kassa orders in a dictionary by order id (called serial in the orders). This way, fast lookup is possible to join the details.</p>

<blockquote>
<pre><code>Data.kassaOrders.AsEnumerable()
    .Where(x =&gt; x.Field&lt;bool&gt;("btwticket") &amp;&amp; 
          !x.Field&lt;bool&gt;("terugname") &amp;&amp; !x.Field&lt;bool&gt;("teruggenomen"))
</code></pre>
</blockquote>

<pre><code> var orders = Data.kassaOrders
    .AsEnumerable()
    .Where(x =&gt; 
         x.Field&lt;bool&gt;("btwticket") &amp;&amp; 
        !x.Field&lt;bool&gt;("terugname") &amp;&amp; 
        !x.Field&lt;bool&gt;("teruggenomen"))
    .ToDictionary(order =&gt; order.Field&lt;int&gt;("serial"));
</code></pre>

<p>We can then use lookup tables - which are dictionaries that store a sequence of values instead of a value - to cache the order and menu details by order id. This code shows how to do it for eating in, equivalent LINQ could be written for take out.</p>

<blockquote>
<pre><code>Data.orderDetails.AsEnumerable()
   .Where(d =&gt; d.Field&lt;int&gt;("orderid") == x.Field&lt;int&gt;("serial") 
       &amp;&amp; !d.Field&lt;bool&gt;("takeout"))
</code></pre>
</blockquote>

<pre><code> var orderDetailsEatIn = Data.orderDetails
    .Where(order =&gt; !order.Field&lt;bool&gt;("takeout"))
    .ToLookup(detail =&gt; detail.Field&lt;int&gt;("orderid"));
</code></pre>

<p>and</p>

<blockquote>
<pre><code>Data.MenuDetails.AsEnumerable()
   .Where(d =&gt; d.Field&lt;int&gt;("orderid") == x.Field&lt;int&gt;("orderid"))
</code></pre>
</blockquote>

<pre><code>var menuDetailsEatIn = Data.MenuDetails
   .Where(order =&gt; !order.Field&lt;bool&gt;("takeout"))
   .ToLookup(detail =&gt; detail.Field&lt;int&gt;("orderid"));
</code></pre>

<h3>Calculate Amount</h3>

<p>You're calculating the amount using a peculiar <code>GroupBy</code>. There is no reasong to group by the take out variable, because you filter on a specific value right before <code>!d.Field&lt;bool&gt;("takeout")</code>. The call to <code>Distinct</code> also doesn't make sense since details are already grouped by key and keys are distinct anyway.</p>

<blockquote>
<pre><code>GroupBy(x =&gt; new { 
    takeout = x.Field&lt;bool&gt;("takeout"), 
    orderid = x.Field&lt;int&gt; ("orderid") }).Distinct().Count();
</code></pre>
</blockquote>

<p>Using our lookup tables, we can easily calculate the amount as below. To stay within your spec, we count the number of orders that have at least one order detail available. Note that an empty collection is returned <code>orderDetailsEatIn[key]</code> is the key is not present in an <code>ILookup</code>.</p>

<pre><code> var EatinAmount = orders
    .Select(order =&gt; orderDetailsEatIn[order.Key])
    .Count(details =&gt; details.Any());
</code></pre>

<h3>Calculating Total</h3>

<p>Your spec is a bit strange to me. I would expect <code>Order 1--&gt;* OrderDetail 1--&gt;* MenuDetail</code>. Instead the cardinality is <code>Order 1--&gt;* OrderDetail, Order 1--&gt;* MenuDetail</code> with the price for each menu detail multiplied by the number of order details to calculate the subtotal by menu detail.</p>

<p>We could calculate the subtotal for the order details as follows:</p>

<pre><code>var subtotalOrderDetailEatIn = orders
    .SelectMany(order =&gt; orderDetailsEatIn[order.Key])
    .Select(detail =&gt; detail.Field&lt;decimal&gt;("price"))
    .DefaultIfEmpty(0).Sum();
</code></pre>

<p>and the subtotal for menu details:</p>

<pre><code>var subtotalMenuDetailEatIn = orders
    .SelectMany(order =&gt; orderDetailsEatIn[order.Key]
        .SelectMany(detail =&gt; menuDetailsEatIn[order.Key]))
    .Select(detail =&gt; detail.Field&lt;decimal&gt;("prijs"))
    .DefaultIfEmpty(0).Sum();
</code></pre>

<p>yielding a grant total of:</p>

<pre><code>var TotalEatin = subtotalOrderDetailEatIn + subtotalMenuDetailEatIn;
</code></pre>

<p>Note that this is just one possible way to use LINQ to calculate these values from data tables. Other ways could include:</p>

<ul>
<li>Create intermediate classes, value tuples or domain classes to store strongly typed properties to facilitate querying readability.</li>
<li>A more advanced LINQ approach using <code>GroupJoin</code> to build complex classes given several flattened collections and join selectors.</li>
</ul>

<p>It's really up to you to see how comfortable you are exploring the realms of LINQ.</p>
    </div>