<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Meter</h1>

<p>I think this class totally useless since you only wrap an <code>int</code> (for nothing ?)
Don't you think it's a bit redundant to write <code>Meter meter = new Meter(5)</code> instead of <code>int meter = 5</code> ?</p>

<p>I would remove it.</p>

<h1>CarType</h1>

<p>As Tunaki said, I won't couple the distance into the <code>CarType</code>, this has nothing to do with a <code>CarType</code>.</p>

<p>Don't you have the feeling when you compare <code>Mini</code>, <code>Light</code> and <code>Compact</code> that there's a lot of redundancy ? From my point of view, it's screaming for an enum since the only difference between all of that is the value of <code>baseCharge</code>. </p>

<p>I would refactor all of that into the following:</p>

<pre><code>public enum Car {
    MINI(100), LIGHT(200), COMPACT(300);

    private final int baseCharge;

    Car(int baseCharge) {
        this.baseCharge = baseCharge;
    }

    public int getBaseCharge() {
        return baseCharge;
    }
}
</code></pre>

<h1>Bill</h1>

<p>What does a <code>Bill</code> need in order to compute a price ? A base charge and a distance. These two values must be provided in the bill constructor. The bill doesn't have to know about the <code>Car</code>. Then, the implementation becomes (note that I have made this class immutable):</p>

<pre><code>public final class Bill {
    private final int baseCharge;
    private final int meter;

    public Bill(int baseCharge, int meter) {
        this.baseCharge = baseCharge;
        this.meter = meter;
    }

    public int calculate() {
        return baseCharge + calculatePriceBasedOn(meter);
    }

    private int calculatePriceBasedOn(int distance) {
        if (distance &gt; 100) {
            return distance * 10;
        } else if (distance &lt;= 100 &amp;&amp; distance &gt; 15) {
            return (distance - 15) * 20 + 100;
        } else if (distance &gt; 5) {
            return (distance - 5) * 10;
        }
        return 0;
    }
}
</code></pre>

<h1>TaxiMeterApp</h1>

<p>This class also doesn't need to depend on <code>Car</code>, the only useful information is the amount of the base charge.</p>

<p>One now takes <code>meter</code> as a parameter since the distance is obviously not known when starting the taxi meter (the base charge is, however). I also removed the <em>App</em> from the class name because I think it has no value and only bring visual noise.</p>

<pre><code>public final class TaxiMeter {
    private final int baseCharge;

    public TaxiMeter(int baseCharge) {
        this.baseCharge = baseCharge;
    }

    public int showPrice(int meter) {
        Bill bill = new Bill(baseCharge, meter);
        return bill.calculate();
    }
}
</code></pre>

<h1>TaxiMeterAppSpec</h1>

<p>I find your tests hard to understand for 2 reasons:</p>

<ul>
<li>Different naming conventions in method names</li>
<li>A mixin between <em>given</em>, <em>then</em> and <em>when</em></li>
</ul>

<p>This is the kind of test I would write (I picked a convention for the names, you can choose another since it stays coherent). Given the previous refactors, the test implementations are more expressive now:</p>

<pre><code>public class TaxiMeterSpec {
    @Test
    public void itShouldCost100WhenAMiniDrives5() {
        TaxiMeter taxiMeter = new TaxiMeter(Car.MINI.getBaseCharge());

        int price = taxiMeter.showPrice(5);

        assertEquals(100, price);
    }

    @Test
    public void itShouldCost200WhenALightDrives5() {
        TaxiMeter taxiMeter = new TaxiMeter(Car.LIGHT.getBaseCharge());

        int price = taxiMeter.showPrice(5);

        assertEquals(200, price);
    }

    //and so on...
}
</code></pre>
    </div>