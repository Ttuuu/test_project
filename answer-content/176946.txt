<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code looks pretty decent. Good job making some methods that are atomic, as well as comprehensive tests for the code. </p>

<p>I don't see very many improvements I would make, though I do see a couple places where native PHP functions could be used instead of manually iterating over arrays. </p>

<p>These changes (in the first couple blocks) shaved a few milliseconds off the total time - e.g. from ~194ms to 169ms.</p>

<h3>filtering friends in <code>dueByUsers()</code></h3>

<p>The filtering of array elements at key <code>friends</code> in <code>dueByUsers()</code> could be simplified using <a href="http://php.net/array_diff" rel="nofollow noreferrer"><code>array_diff()</code></a>.</p>

<p>I.E. this block:</p>

<blockquote>
<pre><code>$users = array_filter($item['friends'], function ($friend) use ($item) {
    return $friend != $item['paid_by'];
});
</code></pre>
</blockquote>

<p>Could be simplified like the following:</p>

<pre><code>$users = array_diff($item['friends'], [$item['paid_by']]);
</code></pre>

<h3>fetchValuesByKey()</h3>

<p>The method <code>fetchValuesByKey()</code> can be simplified to basically a call to <a href="http://php.net/array_column" rel="nofollow noreferrer"><code>array_column()</code></a>:</p>

<pre><code>protected function fetchValuesByKey($key)
{
    return array_column($this-&gt;data, $key);
}
</code></pre>

<p>Or perhaps it would be simpler to eliminate that method and replace its usage with calls to <a href="http://php.net/array_column" rel="nofollow noreferrer"><code>array_column()</code></a>.</p>

<h3>Array_push()</h3>

<p>On the <a href="http://php.net/array_push" rel="nofollow noreferrer">PHP documentation for <code>array_push()</code></a>, there is a paragraph in the description:</p>

<blockquote>
  <p>Note: If you use <code>array_push()</code> to add one element to the array it's better to use <code>$array[] =</code> because in that way there is no overhead of calling a function.</p>
</blockquote>

<p>So you might want to consider doing that in the <code>settlement()</code> method.</p>

<h3>Functional approaches</h3>

<p>Functional approaches, like using <a href="http://php.net/array_map" rel="nofollow noreferrer"><code>array_map()</code></a>, <a href="http://php.net/array_reduce" rel="nofollow noreferrer"><code>array_reduce()</code></a>, etc. could be employed, although in some places it would require extra work (e.g. employing the <a href="http://php.net/manual/en/functions.anonymous.php#example-164" rel="nofollow noreferrer"><code>use</code></a> keyword to reference variables outside closures)) and may be slower because a function is being called.</p>

<p>For example, method <code>settlement()</code> could be re-written as:</p>

<pre><code>public function settlement()
{

    $users = $this-&gt;users();
    $dueUsers = $this-&gt;dueByUsers();
    return array_reduce($users, function($settlements, $creditor) use($dueUsers) {
        $settlements[$creditor] = array_reduce(array_keys($dueUsers), function($creditorSettlements, $debtor) use ($creditor, $dueUsers) {
            $due = $dueUsers[$debtor];
            if ($creditor !== $debtor &amp;&amp; $dueUsers[$creditor] &lt;= $due) {
                $creditorSettlements[] = [
                    'from' =&gt; $debtor,
                    'amount' =&gt; $due - $dueUsers[$creditor]
                ];
            }
            return $creditorSettlements;
        }, []);
        return $settlements;
    }, []);
</code></pre>
    </div>