<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>How fast <code>Math.DivRem</code> is depends on which implementation you're using. Some quick testing shows that .NET Core's approach (which uses subtraction and multiplication instead of a modulo operation) is roughly 30% faster on my system than the .NET Framework implementation (which just uses a modulo and division, like your code does).</p>

<hr>

<p>The overflow check only needs to be performed when processing the last digit (and only when there are 10 digits, but checking digit count isn't free). Moving that out of the loop yields a small performance improvement (about 10% in my tests, depending on input).</p>

<p>It's also slightly faster to compare <code>result</code> against 214748364 (<code>int.MaxValue / 10</code>) and <code>currentDigit</code> against 7 (the last digit of <code>int.MaxValue</code>), instead of subtracting the last digit and dividing by 10.</p>

<hr>

<p>Here's what I ended up with:</p>

<pre><code>public static int Reverse(int x)
{
    var result = 0;
    var isNegative = x &lt; 0;
    if (isNegative)
        x = -x;
    // NOTE: If n == int.MinValue, it'll wrap around to itself,
    //       but it will also skip all of the below code, so the result conveniently remains 0.

    while (x &gt; 9)
    {
        var previousX = x;
        x /= 10;
        var digit = previousX - (x * 10);
        result = (result * 10) + digit;
    }

    if (x &gt; 0)
    {
        // Check for overflow (only necessary for 10-digit input,
        // but checking digit count also takes work so we'll just always check the last digit):
        if (result &gt; 214748364 || (result == 214748364 &amp;&amp; x &gt; 7)) // int.MaxValue / 10
            return 0;

        result = result * 10 + x;
    }

    return isNegative ? -result : result;
}
</code></pre>

<p>Final note: if you're using tests, why not test edge-cases such as 0, negative numbers and outliers such as <code>int.MinValue</code> and <code>int.MaxValue</code>? Giving test methods meaningful names also helps.</p>
    </div>