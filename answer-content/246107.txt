<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Be aware that mixing <code>await</code> statements with <code>.then()</code>/<code>.catch()</code> statements can be a <a href="https://en.wikipedia.org/wiki/Code_smell" rel="nofollow noreferrer">Code Smell</a>, indicating an incomplete understanding of how Promises and async/await work.  That said, there are times/places for mixing these constructs but you need to be careful when doing so.  It's generally better to prefer one or the other (with <code>async</code>/<code>await</code> usually being the better/simpler choice).</p>
<p>With that in mind, and understanding that we don't have a simple way of testing this, I believe what you're after is something like this (See <code>NOTE:</code> comments inline for detail)...</p>
<p>(NOTE: The top-level <code>await</code>s in the code below will throw unless this is running in an environment that supports top-level awaits, or you wrap everything in an <code>async function</code> of some sort.)</p>
<pre><code>// waitFor() is not used in OP's example, so commenting this out.
// Addressing the rate-limiting issue is better left for a separate question
//
// const waitFor = (ms) =&gt; new Promise(r =&gt; setTimeout(r, ms));

//get access token for cloudways authorization
const res = await axios.post('https://api.cloudways.com/api/v1/oauth/access_token?email=' + process.env.CLOUDWAYS_EMAIL + '&amp;api_key=' + process.env.CLOUDWAYS_API);
const accessToken = res.data.access_token;

//get all servers from strapi
const res2 = await strapi.query('server').find({});

// For each cloudways server ...
for (const sub of res2) {
  // NOTE: Cloudways request rate limiting logic goes here?

  //call cloudways for server
  try {
    const res3 = await axios.get('https://api.cloudways.com/api/v1/server/monitor/summary?server_id=' + sub.ServerID + '&amp;type=db',
      {headers: {Authorization: 'Bearer ' + accessToken}}
    );
  } catch (err) {
    console.log(err, res3.response.data);
    continue;
  }

  // Process cloudways' results
  // 
  // NOTE: Use Promise.all() to wait for all promises below to resolve
  await Promise.all(
    // Using map() here creates an array of Promises (that are all running in
    // parallel)
    res3.data.content.map(async app =&gt; {
      if (!app.datapoint) return;
      //update subscription disk usage in strapi
      //
      // NOTE: There should probably be a try-catch block here since OP's code
      // suggests it should be part of the .catch() block.  However OP does not
      // await the asyncForEach() calls.  As a result, any errors that occur
      // will be unhandled.  Omitting the try-catch here reproduces that
      // (unintended, I expect?) behavior.
      await strapi.query('subscription').update({ ApplicationSlug: app.name }, { DiskUsage: Math.ceil(app.datapoint[0]) });
    })
  );
}
</code></pre>
    </div>