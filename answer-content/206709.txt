<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Comparison</strong></p>

<p>I don't think this approach offers any benefits compared to Morris traversal, a stack-based or a recursive approach:</p>

<ul>
<li>Both this and Morris are modifying the given tree, which I consider to be a negative thing. You're not rearranging nodes like Morris does, but those counter fields still prevent simultaneous traversals. A recursive or stack-based approach does not have that limitation.</li>
<li>Adding an additional field to your Node class is 'intrusive', and it increases memory use even when you never traverse a tree.</li>
<li>Unlike the other approaches, yours requires nodes to have a reference to their parent.</li>
<li>In all the tests I've done (using trees of 100 - 100K nodes) this was consistently slower than Morris, which itself was slower than a recursive or stack-based approach.</li>
<li>In terms of how easy the code is to understand, I'd say it's similar to Morris, but both are more complicated than a recursive and stack-based approach.</li>
</ul>

<p>I don't know why you don't like the idea of using recursion. It's actually a very natural approach when working with tree-like structures. It's easy to implement, fast, and doesn't modify the tree or require structural changes.</p>

<pre><code>public void Traverse(Node node, Action&lt;Node&gt; visit)
{
    visit(node);
    if (node.Left != null)
        Traverse(node.Left, visit);
    if (node.Right != null)
        Traverse(node.Right, visit);
}
</code></pre>

<p>With recursion there's always a risk of stack overflow, but that should only be a concern when working with highly imbalanced trees.</p>

<hr>

<p><strong>Improved approach</strong></p>

<p>Your approach can be modified so it no longer needs those counter fields. You've got the following states:</p>

<ul>
<li><code>node.Counter == 0</code>: Move to the left child.</li>
<li><code>node.Counter == 1</code>: Move to the right child.</li>
<li><code>node.Counter == 2</code>: Move back to the parent.</li>
</ul>

<p>But you can also distinguish between these states if you only keep track of the previously visited node:</p>

<ul>
<li><code>previous == current.Parent</code>: Move to the left child.</li>
<li><code>previous == current.Left</code>: Move to the right child.</li>
<li><code>previous == current.Right</code>: Move back to the parent.</li>
</ul>

<p>In terms of performance it's somewhere in-between recursive and Morris. It can also be generalized for nodes with a variable number of children. Still, it remains a relatively complicated approach.</p>

<hr>

<p><strong>Other notes</strong></p>

<ul>
<li>The root node should be passed to <code>Traverse</code> as an argument, not via a 'global' variable.</li>
<li><code>Get</code> is a very undescriptive name. <code>GetNextNode</code> sounds better, except that it sometimes returns the same node (in a different state), so that name is slightly misleading. Maybe <code>ContinueTraversal</code>?</li>
<li><code>Get</code> is only useful within the context of <code>Traverse</code>, so it can be made a local function.</li>
<li>Those counter values indicate specific states, so I'd use an enum instead of 'magic numbers'. Alternately, you could rename it to something like <code>visitedChildNodeCount</code>.</li>
<li>Hardcoding <code>System.Console.WriteLine(node)</code> isn't very flexible. Consider passing in the action to be performed as an <code>Action&lt;Node&gt;</code> argument.</li>
<li>Instead of writing <code>if (condition) { ... } else { return null; }</code>, I'd invert that to <code>if (!condition) return null; ...</code> to reduce nesting.</li>
</ul>
    </div>