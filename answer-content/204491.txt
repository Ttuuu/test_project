<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Asking for forgiveness would be the best policy for dealing with errors that may be beyond your control, such as when opening a file for reading.  Checking beforehand is useless, because too many things could go wrong: the file might not exist, you might not have the right permissions, the disk could fail altogether, etc.  Furthermore, even if you did check beforehand, circumstances could change during the brief period between your check and the real operation.  Therefore, the only reasonable approach would be to just do it, and deal with any errors that come up.</p>

<p>When working with a list of words, however, the outcome is entirely deterministic.  Since it is entirely possible to <strong>write your code such that it never triggers an error</strong>, that's what you should aim for.  (Well, maybe the program is multithreaded, and some other thread is manipulating the <code>ArrayList</code> behind your back, but that would be your program's fault, and such errors are also preventable with proper engineering.)</p>

<p>Therefore, your first approach is better.  However, the <code>list.size() != 0</code> check is a superfluous check, and <code>list.size() &gt;&gt; 0</code> is a pointless shift.</p>

<p>Personally, I find the indexing confusing, because the list is being modified as you traverse it, and the termination condition <code>(list.size() &gt;&gt; 1) - isOdd</code> is a moving target.  Consider working backwards, so that each pair you consider is always in "virgin" territory.</p>

<pre><code>public static void removeShorterStrings(ArrayList&lt;String&gt; list) {
    for (int i = (list.size() &amp; ~1) - 2; i &gt;= 0; i -= 2) {
        String first = list.get(i);
        String second = list.get(i + 1);
        if (first.length() &lt;= second.length()) {
            list.remove(i);
        } else {
            list.remove(i + 1);
        }
    }
}
</code></pre>
    </div>