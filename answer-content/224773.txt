<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>new Scanner(System.in).nextLine()
</code></pre>

<p>This is wasteful. Creating a new scanner object every time that you read a line is very bad for performance. Not to mention that you never close it.</p>

<p>Why does your <code>Calculator</code> get commands and read STDIN? Your calculator class should do one thing: calculate. It is after all, a calculator.</p>

<p>Maybe make a <code>UserInputHandler</code> class if you want to take the input handling out of the main class.</p>

<pre><code>public class UserInputHandler implements AutoCloseable {

    private Scanner scanner;
    private Boolean isRunning = false;

    class Commands {
        public static final String SUM = "sum";
        public static final String DIFFERENCE = "difference";
        public static final String PRODUCT = "product";
        public static final String END = "end";
    }

    public UserInputHandler() {
        this(new Scanner(System.in));
    }

    public UserInputHandler(Scanner scanner) {
        this.scanner = scanner;
    }

    public boolean isRunning() { return isRunning; }

    public void startBlocking() {
        isRunning = true;
        startHandlingInput();
    }

    public void stop() {
        isRunning = false;
    }

    private void startHandlingInput() {
        while (isRunning) {
            System.out.print("Command: ");
            if (scanner.hasNext()) handleCommand(scanner.nextLine());
        }
    }

    private void handleCommand(String input) {
        switch(input) {
            case Commands.SUM:
                System.out.printf("Result: %s\n",
                        Calculator.sum(readOperands(2)));
                break;
            case Commands.DIFFERENCE:
                System.out.printf("Result: %s\n",
                        Calculator.subtract(readOperands(2)));
                break;
            case Commands.PRODUCT:
                System.out.printf("Result: %s\n",
                        Calculator.product(readOperands(2)));
                break;
            case Commands.END:
                stop();
                break;
            default:
                System.out.println("Unknown command!");
        }
    }

    private int[] readOperands(int noOfOperands) {
        int[] array = new int[noOfOperands];
        for (int i = 0; i &lt; noOfOperands; i++) {
            System.out.printf("value %d: ", i+1);
            String nextLine = scanner.nextLine();

            try {
                int nextInt = Integer.parseInt(nextLine);
                array[i] = nextInt;
            } catch (NumberFormatException e) {
                System.out.println("Invalid number, please enter again.");
                i--;
            }
        }
        return array;
    }

    @Override
    public void close() throws IOException {
        scanner.close();
    }

}
</code></pre>

<p>Don't use <code>Enum#valueOf</code> using exceptions in control flow is a terrible idea.</p>

<p>Your <code>Calculator</code> can be simple. Also, why use streams for some things and not others? </p>

<pre><code>public class Calculator {
    private static int statistics = 0;

    public static int subtract(int... a) {
        statistics++;
        return a[0] - IntStream.of(a)
                .skip(1)
                .sum();
    }

    public static int sum(int... a) {
        statistics++;
        return IntStream.of(a).sum();
    }

    public static int product(int... a) {
        statistics++;
        return IntStream.of(a)
                .reduce((x, y) -&gt; x * y)
                .orElseThrow(RuntimeException::new);
    }
}
</code></pre>

<p>Now just run your app:</p>

<pre><code>public class Main {
    public static void main(String[] args) {
        try (UserInputHandler handler = new UserInputHandler()) {
            handler.startBlocking();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>

<p>Simple!</p>
    </div>