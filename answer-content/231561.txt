<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You asked about structure and readability, so this answer will mostly be about that, and I will not include much code, only concepts.</p>

<p>First off, your console app is really more "C" than "C++" - it is <em>procedural</em>, rather than <em>object-oriented</em>, so you're not really using the <strong>++</strong> here. There's nothing really wrong with that, unless you want to learn object-oriented programming. Generally when someone says "I'm learning C++" we will want to see them doing object-oriented stuff, otherwise they would say they are learning C.</p>

<p>Tic-tac-toe lends itself very nicely to beginning object-oriented concepts, and there are many design patterns which could be used to implement a Tic-tac-toe game! It is a very good choice of game for learning these ideas.</p>

<p>Example design pattern - MVC (model-view-controller) - <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller</a></p>

<p>Most computer programs need to create a logical "model" of some "thing" in the real world, in this case it is a game board for Tic-tac-toe. In your app, you are using an array of numbers for this. In a C++ app, we would use a <strong>class</strong> that represents a game board, and is responsible for things like storing the current board state, determining if a player's attempted move is legal, determining if the game has been won, the size of the board(!) and other things like that. These "things" can be divided into "data" and "actions" - which will become your member variables and methods, respectively. This class would become your MODEL in the MVC pattern.</p>

<p>In order to display things on the screen, you would need a class that handles that sort of thing, which would become your VIEW in the MVC pattern. This class would handle the specifics of whatever output device you are using, and you could even have multiple views that display the same MODEL, so you could draw different graphics on a phone, than you would on a web browser, or you could even create a physical game board if you were using Arduino for example. All of those different views could use the exact same MODEL class described above. The view could also create various user interface elements that work for the output it is creating - for example, the phone view could respond to screen touches, while the Arduino view would respond to button presses.</p>

<p>In order to "glue" your model and view together, that is where the CONTROLLER comes in. The controller is responsible for taking data from the model and passing it to the view, or taking data from the view/user and passing it to the model. In this way, your view doesn't need to contain any game logic, and your model doesn't need any display or user interface logic, making BOTH objects way more useful.</p>

<p>There is already an example of this on the site: <a href="https://codereview.stackexchange.com/questions/71756/tic-tac-toe-in-mvc">Tic Tac Toe in MVC</a></p>

<p>It is in Java, but it is very similar to C++, so it should be readable to you.</p>

<p>The MVC pattern is a natural result of applying the "Single Responsibility Principle" which can be applied at many levels from the application down to the individual blocks of code. Every class should have a single responsibility (such as "manage the game board data"), but so also should every function within each class. So, you wouldn't have a class that handled the model and the view, and you wouldn't have a function that, for example, enters the players move AND checks if they won. You would have two separate functions. This makes your code both more readable and more useful. (For example, because in the first 2 moves, the controller doesn't need to check for a winner, and for larger boards, this number becomes even larger, providing a possible performance improvement at the beginning of the game.)</p>

<p><a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/Single_responsibility_principle</a></p>

<p>I hope that is helpful. I know I'm suggesting completely re-working the whole thing, but if you want to create well structured and readable <strong>C++</strong>, we need to be doing objects.</p>
    </div>