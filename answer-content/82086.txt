<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Assuming that the array isn't something you <em>have</em> to use, the natural solution to this kind of problem is to use a <a href="http://docs.oracle.com/javase/7/docs/api/java/util/Stack.html" rel="nofollow"><code>Stack</code></a>.  A stack is a data structure that is Last-In, First-Out. </p>

<p>The idea is that you read the file, one item(number, in your case) at a time, and 'push' each item on to the stack.  Once you've read all of the items, you 'pop' them off the stack to display them.</p>

<p>Here's an example of how to do it with a stack:</p>

<pre><code>Stack&lt;Integer&gt; numbers = new Stack&lt;Integer&gt;();
File file = new File("numbers.txt");
Scanner scanner = new Scanner(file);

while(scanner.hasNextInt())
{
    Integer next = scanner.nextInt();
    numbers.push(next);
}

while(!numbers.empty())
{
    Integer top = numbers.pop();
    System.out.print(reverse + " ");
}
</code></pre>

<p>A few notes:</p>

<ul>
<li><p>The reason the stack is declared as <code>Stack&lt;Integer&gt;</code> instead of <code>Stack&lt;int&gt;</code> is because int is a primitive type, which means it doesn't inherit from <code>Object</code>.  <code>Integer</code> does inherit from <code>Object</code>, so we use that instead.  There's a bit of a rabbit hole there but I won't delve deeper.  Other primitive types in Java(boolean, double, float, etc) have an analogous Object type(Boolean, Double, Float, etc).</p></li>
<li><p><code>Pop</code> is kind of tricky.  It's doing two things: it is returning the object on top of the stack, <em>and</em> it is removing that object from the stack.  Since it removes an element from the stack, <code>while(!numbers.empty())</code> will eventually be false and our loop will have run its course.</p></li>
</ul>

<p>The downside to this approach is that you no longer have your numbers after the fact, since the <code>pop</code> functionality throws your numbers away.  There are still ways to get around this, but that's something you have to keep in mind.</p>
    </div>