<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The same effect can be achieved with a Queue and a DiscardPolicy.</p>

<pre><code>    int poolSize=1;
    int maxPoolSize=1;
    int queueSize=1;
    long aliveTive=1000;  
    ArrayBlockingQueue&lt;Runnable&gt; queue = 
            new ArrayBlockingQueue&lt;Runnable&gt;(queueSize);
    ThreadPoolExecutor executor = 
            new ThreadPoolExecutor(poolSize, maxPoolSize, aliveTive,
                    TimeUnit.MILLISECONDS,queue,new ThreadPoolExecutor.DiscardPolicy());
</code></pre>

<p>Essentially, only one task can remain waiting in the queue. A second waiting task cannot be added - the new one will be discarded. (Dropping the old one and accepting the new one is also possible with the DiscardOldestPolicy.)</p>

<p>Example from here: <a href="https://stackoverflow.com/questions/30299784/using-threadpoolexecutor-and-discardpolicy">https://stackoverflow.com/questions/30299784/using-threadpoolexecutor-and-discardpolicy</a></p>

<p>More details about RejectedExecutionHandler and different built-in policies:
<a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadPoolExecutor.html" rel="nofollow noreferrer">https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadPoolExecutor.html</a></p>
    </div>