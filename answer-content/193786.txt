<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My first impression was: wow, great test cases. This is something I often miss when looking at beginner's code. Your tests cover each line of code, except for one in the <code>CalculatorFactory</code>:</p>

<pre><code>return null;
</code></pre>

<p>I had expected that the test case <code>"999 &amp; 99.2"</code> would test this line, but I was wrong. This looked strange to me, and indeed you have some code duplication:</p>

<pre><code>// OperatorValidator
List&lt;String&gt; operatorList = Arrays.asList("+","-","/","*");

// CalculatorFactory
switch (operator) {
    case "+": return addition;
    case "-": return substraction;
    case "*": return multiplication;
    case "/": return division;
}
</code></pre>

<p>Because of this duplication, you have to adjust two places whenever you add a new operator to the calculator. This can be done better. The <code>OperatorValidator</code> could simply check <code>CalculatorFactory.getCalculator(operator) == null</code>. Then you can delete the <code>operatorList</code>.</p>

<p>After this change, your code has 100% test coverage, which is impressing. And not only this, the tests also cover many interesting cases from the application domain, which is even more important.</p>

<h1>Package names</h1>

<p>You have chosen <code>com.calculator</code> and <code>com.validator</code> as package names. You should not use these names unless you own the DNS domains <code>calculator.com</code> and <code>validator.com</code>. Choosing good package names becomes important when you write software that others want to reuse. It's just too easy that someone else has also chosen the name <code>com.calculator</code>, therefore you should pick a more unique package name, maybe based on your name, or the name of your school, company or university.</p>

<h1>Class names</h1>

<p>I don't like the name <code>Calculator</code> that you gave your interface. A calculator can usually perform several different operations, like addition, subtraction, division. Your interface has only a single method. It therefore should be called <code>Operation</code>. And if you want to be very precise, it is a <code>BinaryOperation</code> since it takes two arguments. Contrast this with <code>SquareRoot</code>, which would be a <code>UnaryOperation</code>.</p>

<p><code>Substraction</code> should be <code>Subtraction</code> (<a href="https://en.wiktionary.org/wiki/substract" rel="nofollow noreferrer">substract is obsolete</a>).</p>

<h1>Variable names</h1>

<ul>
<li><code>dataToBeValidate</code> should be <code>dataToBeValidated</code>, with a <code>d</code> at the end</li>
<li><code>userInput1</code> and <code>userInput2</code> don't necessarily come from the user</li>
</ul>

<h1>Input validation</h1>

<p>You did a great job here. I tried to trick your calculator of performing a division by zero when I entered <code>123 / 0e0</code>, but your validation in <code>ZeroValueValidator</code> caught this attempt.</p>

<p>The regular expression <code>\d+.?\d+</code> in the <code>NumberValidator</code> is wrong, though. It accepts <code>123x456</code> because the <code>.</code> <a href="https://docs.oracle.com/javase/9/docs/api/java/util/regex/Pattern.html" rel="nofollow noreferrer">stands for an arbitrary character</a>. You have two choices here:</p>

<pre><code>Pattern.matches("\\d+\\.?\\d+", data)
Pattern.matches("\\d+[.]?\\d+", data)
</code></pre>

<h1>CalculatorFactory</h1>

<p>In real life, when you go to a factory and ask for something, you always get a new thing. This is not the case for your <code>CalculatorFactory</code>. Therefore it should rather be called <code>OperatorRegistry</code>.</p>

<h1>Source code layout</h1>

<p>In a few places, your code layout is inconsistent. The indentation is sometimes 3 spaces, most often 4 and sometimes 5. With a good IDE, you should not need to do the indentation yourself, just let the IDE do that.</p>

<ul>
<li>Eclipse: <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>F</kbd></li>
<li>IntelliJ: <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>L</kbd></li>
<li>Visual Studio Code: <kbd>Shift</kbd>+<kbd>Alt</kbd>+<kbd>F</kbd></li>
</ul>

<h1>Extensibility</h1>

<p>You separated the code in nice, small chunks. Adding a new binary operation like "x to the power of y" or "gcd(x, y)" should be very easy now.</p>

<p>A more tricky step is to add support for unary operations:</p>

<ul>
<li>negate</li>
<li>square root</li>
<li>square</li>
<li>reciprocal</li>
<li>natural logarithm</li>
<li>base-10 logarithm</li>
<li>factorial</li>
</ul>

<p>This will require much more work for the first operator. But since you modeled the binary operators so well, it should be easy once you have the first operator working.</p>

<h1>Automated testing</h1>

<p>Currently when you run the tests you have to inspect the output manually to see whether the results are what you expect. You should rewrite the testing code so that all the good cases don't produce any output. That's much easier to check manually.</p>

<p>The next step in this direction is to write unit tests, for example with JUnit.</p>

<h1>Summary</h1>

<p>You wrote a very good piece of code. It can still be improved in some places, but it works well, handles the corner cases and has good test data. I could criticize some more things, but I think it's enough for now. After you have improved your code, you are welcome to post a follow-up question here on this site.</p>
    </div>