<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Depending upon the size of your arrays, rather than looping for comparisons I would suggest adding them to a list and sorting to find duplicates.
Use the first element of a tuple to enumerate the array if it makes debugging easier.</p>

<pre><code>    [1, 4, 6, 78, 8, 9, 124, 44],
    [44, 6, 9],
    [124, 44, 16, 9]
</code></pre>

<p>becomes</p>

<pre><code>    [1, 4, 6, 78, 8, 9, 124, 44 ,44, 6, 9, 124, 44, 16, 9]
</code></pre>

<p>becomes </p>

<pre><code>    [1, 4, 6, 6, 8, 9, 9, 9, 16, 44 ,44, 44, 78, 124, 124]
</code></pre>

<p>and use a control-break routine to pick the elements having a frequency count of 3 (or whatever). </p>

<p>For larger populations you would do this by tree traversal.</p>
    </div>