<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've tried my best and updated my code according to your valuable feedback, please have a look. 
What i am failing to do is to check whether there is a whitespace after numbers so the input
1 2 3 4whitespaces is not correct.</p>

<pre><code>    #include &lt;algorithm&gt;
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;stdexcept&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
int constexpr MaxWeight = 6500, MinVertexes = 2, MaxVertexes = 1000000;

struct ObjectCollection 
{
    int amountOfObjects = 0;
    std::vector&lt;int&gt; weights;
    std::vector&lt;int&gt; startingOrder;
    std::vector&lt;int&gt; endingOrder;
    int minWeight = MaxWeight;
};

std::vector&lt;int&gt; readOrder(std::istringstream&amp; iss, int const amountOfObjects) 
{
    std::vector&lt;int&gt; v;
    v.reserve(amountOfObjects);
    int i = 1;
    while(!iss.eof() &amp;&amp; i &lt;= amountOfObjects)
    {
        int number;
        iss &gt;&gt; number;
        if (number - 1 &gt; amountOfObjects) throw std::logic_error("Too high index in order");
        v.push_back(number-1);
        i++;
    }
    if (v.size() != amountOfObjects) throw std::logic_error("Too few values in line");
    return v;
}

void readWeightsAndSetMinWeight(std::istringstream&amp; iss, ObjectCollection&amp; objects)
{
    objects.weights.reserve(objects.amountOfObjects);
    int i = 1;
    while (!iss.eof() &amp;&amp; i &lt;= objects.amountOfObjects)
    {
        int number;
        iss &gt;&gt; number;
        if (number&gt; MaxWeight) throw std::logic_error("Too high weight");
        objects.weights.push_back(number);
        objects.minWeight = std::min(objects.minWeight, number);
        i++;
    }
    if (objects.weights.size() != objects.amountOfObjects) throw std::logic_error("Too few values in line");
}

//todo version for weight

ObjectCollection readFromFile(std::string const&amp; filename)
{
    ObjectCollection objects;
    std::ifstream file(filename);

    if (!file.is_open()) throw std::exception("Unable to open file");

    for (int i = 0; i &lt; 4; i++)
    {
        std::string line;
        std::getline(file, line);
        if (line.empty()) throw std::logic_error("Invalid input");
        std::istringstream iss(line);

        if (i == 0)
        {
            iss &gt;&gt; objects.amountOfObjects;
            if (objects.amountOfObjects&lt;MinVertexes || objects.amountOfObjects&gt;MaxVertexes) throw std::exception("Invalid amount of vertexes");
        }
        else if (i == 1)
        {
            objects.weights.reserve(objects.amountOfObjects);
            for (int j = 0; j &lt; objects.amountOfObjects; j++)
            {
                //int number;
                //iss &gt;&gt; number;
                //objects.weights.push_back(number);
                //objects.minWeight = std::min(objects.minWeight, objects.weights[j]);
                readWeightsAndSetMinWeight(iss, objects);
            }
        }
        else if (i == 2)
        {
            objects.startingOrder = readOrder(iss,objects.amountOfObjects);
        }
        else if (i == 3)
        {
            objects.endingOrder = readOrder(iss, objects.amountOfObjects);
        }
    }
    return objects;
}

long long calculateLowestCostOfWork(ObjectCollection const&amp; objects)
{
    int n = objects.amountOfObjects;
    std::vector&lt;int&gt; permutation(n);

    //constructing permutation
    for (int i = 0; i &lt; n; i++) 
    {
        permutation[objects.endingOrder[i]] = objects.startingOrder[i];
    }

    long long result = 0;
    std::vector&lt;bool&gt; visitedVertexes(n);

    for (int i = 0; i &lt; n; i++)
    {
        int numberOfElementsInCycle = 0;
        int minWeightInCycle = MaxWeight;
        long long sumOfWeightsInCycle = 0;
        if (!visitedVertexes[i])
        {
            int vertexToVisit = i;
            //decomposition for simple cycles and calculating parameters for each cycle
            while (!visitedVertexes[vertexToVisit])
            {
                visitedVertexes[vertexToVisit] = true;
                numberOfElementsInCycle++;
                vertexToVisit = permutation[vertexToVisit];
                sumOfWeightsInCycle += objects.weights[vertexToVisit];
                minWeightInCycle = std::min(minWeightInCycle, objects.weights[vertexToVisit]);
            }
            //calculating lowest cost for each cycle
            long long swappingWithMinWeightInCycle = sumOfWeightsInCycle + (static_cast&lt;long long&gt;(numberOfElementsInCycle) - 2) * static_cast&lt;long long&gt;(minWeightInCycle);
            long long swappingWithMinWeight =  sumOfWeightsInCycle + minWeightInCycle + (static_cast&lt;long long&gt;(numberOfElementsInCycle) + 1) * static_cast&lt;long long&gt;(objects.minWeight);
            result += std::min(swappingWithMinWeightInCycle, swappingWithMinWeight);
        }
    }
    return result;
}

int main(int argc, char* argv[])
{
    if (argc &lt; 2)
    {
        std::cerr &lt;&lt; "Error: missing filename\n";
        return 1;
    }

    ObjectCollection elephants;
    try
    {
        elephants = readFromFile(argv[1]);
        std::cout &lt;&lt; calculateLowestCostOfWork(elephants);
    }
    catch (std::exception const&amp; ex) 
    {
        std::cerr &lt;&lt; "Error: " &lt;&lt; ex.what() &lt;&lt; "\n";
        return 1;
    }
    catch (...)
    {
        std::cerr &lt;&lt; "Error unknown \n";
        return 1;
    }
    return 0;
}
</code></pre>
    </div>