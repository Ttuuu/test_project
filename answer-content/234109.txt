<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Your project is setup wrong</h1>

<h2>Pytest</h2>

<p>The simplest solution to most import problems is to just <a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/" rel="noreferrer">make your project a setuptools package</a>. And <em>install</em> your package.</p>

<p>Whether or not your project is a library or application to fix pytest is really, really simple. You make your project a setuptools package (Which you should already have done if you're making a library). This is by configuring the <code>setup.py</code> file that explains to pip, setuptools, etc how to install your project.</p>

<p>From here you <em>install</em> your package and things <em>just work</em>.</p>

<pre><code>$ pip install .
$ pytest
</code></pre>

<h2>Applications</h2>

<p>Now you might be saying that's cool and all it works for pytest. But now it's broken when I run my program, using <code>python</code>. There are two solutions to that.</p>

<ul>
<li><p>Execute your application as a module. Add a <code>__main__.py</code> to the top level directory which will be your application's entry point. Make sure you move your <code>if __name__ == '__main__'</code> code here. And then just use:</p>

<pre><code>$ python -m my_project
</code></pre></li>
<li><p>Setup <a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/#entry-points" rel="noreferrer">an entry point for the setuptools package</a>.</p>

<p>Once you get the above working, then all you need to do is ensure your main guard is only calling a function <code>main</code>. If this is the case, then you can say <code>main</code> is your entry point in your setup.py.</p>

<pre><code>entry_points={
    'console_scripts': [
        'my_project=my_project.__main__:main',
    ],
},
</code></pre>

<p>Usage is then just:</p>

<pre><code>$ my_project
</code></pre>

<p>This is how the cool kids publish applications to PyPI.</p></li>
</ul>

<h1>But what about my code? Where's my code review?</h1>

<p>Oh yeah, your code is an unneeded hack job. Seriously just make a setuptools package. You get some benefits from it like your project always being on the path, being able to install projects from a private PyPI repository, being able to use tox and nox, having a customizable entry point mapped to a cool name, and not having to use hacks to get your tests to work. I feel I'm biased here, but I really don't see any downsides. Heck I now only use <code>pip</code> to install to Apache.</p>

<p>From here you can just use either of the import strategies you want. I prefer relative imports, but absolute imports might be your jam.</p>

<ol>
<li><p>Absolute imports.</p>

<pre><code>from my_project import subpackage
subpackage.foo()
</code></pre></li>
<li><p>Cool relative imports.</p>

<pre><code>from . import subpackage
subpackage.foo()
</code></pre></li>
</ol>

<h1>MVCE of all of the above</h1>

<p>I remember when I was trying to convert to relative imports I Googled and all that I could find was hack jobs. People saying the names of some PEPs that talk about what I'm on about, but only talk about <code>__name__</code>, <code>__files__</code> and <code>'__main__'</code>. Overall I feel the subjects a <s>shit show</s> mess.</p>

<p>And so if you're like I was and just trying to make some sense of all this nonsense, I have a small MVCE for you. If you copy the files and commands verbatim then you too can have a properly configured Python project.</p>

<p><code>./src/my_project/__init__.py</code></p>

<pre><code>
</code></pre>

<p><code>./src/my_project/__main__.py</code> (Works with <code>from my_project.foo import FOO</code> too.)</p>

<pre><code>from .foo import FOO


def main():
    print(FOO)


if __name__ == '__main__':
    main()
</code></pre>

<p><code>./src/my_project/foo.py</code></p>

<pre><code>FOO = 'Bar'
</code></pre>

<p><code>./tests/test_foo.py</code></p>

<pre><code>import my_project.foo

def test_foo():
    assert my_project.foo.FOO == 'Bar'
</code></pre>

<p><code>./setup.py</code></p>

<pre><code>from setuptools import setup, find_packages

setup(
    name='my_project',
    packages=find_packages('src'),
    package_dir={'': 'src'},
    entry_points={
        'console_scripts': [
            'my_project=my_project.__main__:main',
        ],
    },
)
</code></pre>

<h2>Running it</h2>

<pre><code>$ cd src
$ python -m my_project
Bar
$ cd ..
$ pip install .
$ pytest
===== 1 passed in 0.05s =====
$ my_project
Bar
</code></pre>

<h1>In Addition</h1>

<p>If you configure your project correctly then your problems should magically disappear. If you still have problems then you should double check you have <em>installed</em> your project.</p>

<p>You may want to use the <code>-e</code> flag when you install the project, so that you don't need to <code>pip install .</code> each time you change a file.</p>

<p>Better yet use this as a stepping stone to upgrade to modern Python development and use <a href="https://tox.readthedocs.io/en/latest/" rel="noreferrer">tox</a> or <a href="https://nox.thea.codes/en/stable/" rel="noreferrer">nox</a> to run you tests. Not only do these come with the benefit that they test your setuptools package is correctly configured. They also let you, and your coworkers, not fret over having to install a virtual environment and ensure <code>pip install -e .</code> has ran. Just setup a config file and then you all only need to run <code>tox</code> or <code>nox</code> for things to just work<sup>TM</sup>.</p>
    </div>