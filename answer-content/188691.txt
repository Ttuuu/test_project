<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Handling embedded null bytes</h2>

<p><code>ReadFile(, lpBuffer,,,)</code> may read null characters into <code>lpBuffer</code>. Should this occur, much of code's use of <code>str...()</code> would suffer.  Code instead needs to keep track of data as  a read of "bytes" with a length and not as a <em>string</em>.  I'd recommend forming a structure with members <code>unsigned char data[BUF_SIZE]</code> and <code>DWORD sz</code> or <code>size_t sz</code>.  This affects code significantly.  Effectively replace <code>str...()</code> calls with <code>mem...()</code> ones.</p>

<p>Minor: with using a "byte" buffer rather than a <em>string</em>, the buffer could start with <code>NULL</code>.</p>

<pre><code>// char *accum;
// accum = (char *)calloc(1, sizeof(char));
char *accum = NULL;
</code></pre>

<h2>Pipe creation and usage</h2>

<p>Although there is much good error handling, <code>cmd_rsp()</code> fails to check the return value of <code>ReadFromPipe(chunk, chunk_size, &amp;io);</code>.</p>

<pre><code>// ReadFromPipe(chunk, chunk_size, &amp;io);
if (ReadFromPipe(chunk, chunk_size, &amp;io) == -1) TBD_Code();
</code></pre>

<p>Minor: Using <code>sizeof(char)</code> rather than <code>sizeof *accum</code> obliges a reviewer and maintainer to check the type of <code>accum</code>.  In C, code can be simplified:</p>

<pre><code>// accum = (char *)calloc(1, sizeof(char));
accum = calloc(1, sizeof *accum);
</code></pre>

<p>Minor: Unclear why code is using <code>unsigned</code> for array indexing rather  than the idiomatic <code>size_t</code>.  Later code quietly returns this as an <code>int</code>.  I'd expect more care changing sign-ness.  Else just use <code>int</code>.</p>

<pre><code>// Hmmm
unsigned int total_size = 0;
int size_recv = 0;
</code></pre>

<h2>CreateProcess usage</h2>

<p>Memory Leak: </p>

<pre><code>if(SetupChildIoPipes(&amp;io, &amp;saAttr) &lt; 0) {
  free(Command); // add
  return -1;
}
</code></pre>

<p>Minor: no need for <code>int</code> cast of a value in the <code>size_t</code> range.</p>

<pre><code>// int len = (int)strlen(command);
// Command = calloc(len + sizeof(rqdStr), 1);
Command = calloc(strlen(command) + sizeof(rqdStr), 1);
</code></pre>

<h2>Method for dynamically growing response buffer</h2>

<p>Good and proper function for <code>ReSizeBuffer(  ,size == 0);</code></p>

<p>Bug: when <code>realloc()</code> fails, <code>ReSizeBuffer()</code> and the calling code both free the same memory.  Re-design idea: Let <code>ReSizeBuffer()</code> free the data and return a simple fail/success flag for the calling code to test.  For the calling code to test <code>NULL</code>-ness is a problem as <code>ReSizeBuffer(  ,size == 0)</code> returning <code>NULL</code> is O.K.</p>

<p>Unclear test: <code>if(!(*str)) return NULL;</code>.  I would not expect disallowing resizing a buffer that originally pointed to <code>NULL</code>.  </p>

<pre><code>if(!(*str)) return NULL; // why?
if(!str) return NULL;    // Was this wanted?`
</code></pre>

<p>Cast not needed for a C compile.   Is code also meant for C++?</p>

<pre><code>// tmp = (char *)realloc((char *)(*str), size);
tmp = realloc(*str, size);
</code></pre>

<p>For me, I would use the form below and let it handle all edge cases of zeros, overflow, allocation success, free-ing, updates.  Be prepared for <em>large</em> buffer needs.</p>

<pre><code>// return 0 on success
int ReSizeBuffer(void **buf, size_t *current_size, int increment);
// or 
int ReSizeBuffer(void **buf, size_t *current_size, size_t new_size);
</code></pre>

<h2>Tidbits</h2>

<p>Consider avoiding <code>!</code> when things work.  This is a small style issue - I find a <code>!</code> or <code>!=</code> more aligns with failure than success.</p>

<pre><code>// if (!cmd_no_rsp("dir /s", &amp;buf, BUF_SIZE)) {
//    printf("success.\n");
if (cmd_no_rsp("dir /s", &amp;buf, BUF_SIZE) == 0) {
    printf("success.\n");
</code></pre>

<p>With a change for handling piped data as a <em>string</em>, change variables names away from <code>str...</code></p>
    </div>