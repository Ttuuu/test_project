<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Comments in mostly top-down order.</p>

<hr>

<pre><code>class node // Creates node class
</code></pre>

<p>Classes in Java should begin with an uppercase letter.  Ie) <code>class Node</code>.</p>

<p>As it stands, this class can only be used inside <code>DoublyLinkedList</code>, so it should be declared <code>private</code>.  Ie) <code>private class Node</code>.</p>

<p>As a non-static inner class, it implicitly contains a pointer to the <code>DoublyLinkedList</code> object.  You never use this, nor with your current implementation do you need to use it.  It is just taking up extra space.  You can get rid of it by declaring the class <code>static</code>.  Ie) <code>private static class Node</code>.</p>

<hr>

<pre><code>public node()
{
    num = 0;
    next = null;
    prev = null;
}
</code></pre>

<p>This constructor is never used, so probably should be deleted.</p>

<p>If you did want to keep it, you should use constructor chaining, so you don't have to repeat initializations.  Such as:</p>

<pre><code>public node()
{
    this(0);   // Calls node::node(double) constructor
}
</code></pre>

<hr>

<pre><code>public double findAvg()
{
    double mean = 0, total = 0;
    ...

    return(mean = total/i);
}
</code></pre>

<ol>
<li>The parenthesis are not needed.</li>
<li>Possible division by zero, if called on an empty list.</li>
<li>Assignment to <code>mean</code> is unnecessary.  You can remove the assignment and the <code>mean</code> variable.</li>
</ol>

<hr>

<pre><code>public void delete(double x) // Deletes a single node
{ 
    node p = new node(x);
</code></pre>

<p>There is no need to create a <code>node</code> here.  You are looking for a node which contains the value <code>x</code>.  Wrapping <code>x</code> in a <code>node</code> and then needing to refer to <code>p.num</code> in tests added complexity for no gain.</p>

<pre><code>    node temp = head;
    node pre, nex;
</code></pre>

<p><code>pre</code> and <code>nex</code> are unused an should be deleted.</p>

<pre><code>    if (head.num == p.num) // If head node needs to be removed
</code></pre>

<p><code>NullPointerException</code> if the list is empty.</p>

<pre><code>    {
        head = head.next;
</code></pre>

<p>What of <code>.prev</code> of the new <code>head</code>?  It still points to the removed node.  But if there was only one node in the list, <code>head</code> is now <code>null</code>, and <code>tail</code> is still pointing to the removed node.</p>

<pre><code>        return;
    }

    while (temp != null) // If a node in between is to be deleted
</code></pre>

<p>Actually, this will loop for all the nodes, not just the ones "in between".  You will be testing the <code>head</code> node a second time.  And it will test the last <code>tail</code> node as well.</p>

<pre><code>    {
        if (p.num == temp.num)
        {
            System.out.println("Node found! Deleting " + x + "...");
            temp.prev.next = temp.next;
            temp.next.prev = temp.prev;
</code></pre>

<p>Fortunately, if the <code>head</code> node matched, the test at the start of the function would process the removal and return.  Otherwise, <code>temp.prev.next =</code> would raise a <code>NullPointerException</code>.</p>

<p>Unfortunately, if the last node happens to match, <code>temp.next.prev =</code> will raise a <code>NullPointerException</code>.</p>

<pre><code>            return;
        }
        else temp = temp.next;
    }
</code></pre>

<p>If we get to this point, the number wasn't in the list, so the next code is pointless.</p>

<pre><code>    if (tail.num == p.num) // If tail is to be deleted
    {
        tail = tail.prev;
</code></pre>

<p>But if we did get here, <code>tail.prev.next</code> would still point to the original <code>tail</code> node!</p>

<pre><code>        return;
    }
</code></pre>

<p>You might consider raising a <code>NoSuchElementException</code> if you never found the value to remove.</p>

<pre><code>}
</code></pre>

<hr>

<p>Many similar comments for <code>deleteMore()</code>.</p>

<p>After deleting 1 or more <code>head</code> nodes, you never set the new <code>head.prev</code> to <code>null</code>, or <code>tail</code> to <code>null</code> if you actually ended up deleting all the nodes.</p>

<pre><code>if (temp.num == tail.num) // If tail node needs to be removed
</code></pre>

<p>This does not test for reaching the end of the list.  If the list has nodes in the middle which happen to match the value at the end, and that value is above the removal threshold, when you get to that middle node, your processing will skip to the tail node.</p>

<p>To test for the last node, you want</p>

<pre><code>if (temp == tail) // If tail node needs to be removed
</code></pre>

<p>or</p>

<pre><code>if (temp.next == null) // If tail node needs to be removed
</code></pre>

<hr>

<p>You should add more test cases, to cover the bug found above.  Once you can show the code breaks, you can fix the code, and demonstrate it works because the test cases now pass.</p>
    </div>