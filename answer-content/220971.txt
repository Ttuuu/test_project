<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Sorry I was busier earlier. Here is a more complete review. Just a few things off the top of my head.</p>

<ul>
<li><p>Try and be consistent with your class naming. Instead of  <code>.js_container-reloader</code> and <code>js_reload-container</code> use a common prefix, i.e. <code>.js_reloader-trigger</code> (or even just <code>.js_reloader</code>) and <code>.js_reloader-container</code></p></li>
<li><p>You can use a single call to the <code>on</code> function like: </p>

<p>$(document).on("submit", ".js_container-reloader", ...</p></li>
<li><p><code>var element = $(element),</code> is syntactically incorrect since <code>element</code> is already defined as a parameter. One options is just use <code>element = $(element);</code>  another pattern I often see is using a <code>$</code> prefix on variables to indicate jQuery objects, i.e. <code>var $element = $(element),</code></p></li>
<li><p><code>requestUrl = element.attr('action');</code> would be better as<code>requestUrl = element.prop('action');</code> the latter will retrieve the default method for the form if no attribute is set.</p></li>
<li><p>I personally think the use of <code>wrap and</code>unwrap` is an odd way to handle adding an element. I would remove the wrap and container code and just have something like the following on success:</p>

<pre><code>success: function(result){
   ....
   element.after(result);
   element.remove();
</code></pre></li>
<li><p>I would add a <code>.js_reloader-loading</code> class to the element before starting the ajax query so that you can style it differently (fade it, add a spinner, etc). </p></li>
<li><p>Lastly you probably want to implement some kind of logic to prevent multiple attempts at loading the form.</p></li>
</ul>
    </div>