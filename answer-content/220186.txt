<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Advice 1: <code>l_moves</code></strong></p>

<ol>
<li>The name <code>l_moves</code> is ain't good at all. Consider <code>numberOfMoves</code>.</li>
<li>Since it is only read, make it a constant. Even better, it is customary in Java to name the constants with <strong><em>capital</em></strong> case. For this particular case, I suggest you rename <code>l_moves</code></li>
</ol>

<p><code>private static final int NUMBER_OF_MOVES = 4;</code></p>

<p><strong>Advice 2: class SlidingPuzzle</strong></p>

<p>I suggest you rename it to, say, <code>SlidingPuzzleSolver</code>.</p>

<p><strong>Advice 3: class Node</strong></p>

<p>I suggest you take it out of <code>SlidingPuzzle</code> and make a dedicated .java file for it.</p>

<p><strong>Advice 4: Do not store search state in the actual puzzle nodes</strong></p>

<pre><code>Node previous;
int f, h, g;
</code></pre>

<p><strong>Advice 5: implement <code>hashCode</code></strong></p>

<p>Implementing <code>hashCode</code> of <code>SlidingPuzzle.Node</code> makes it possible for storing the puzzle nodes in a, say, <code>HashSet</code> or <code>HashMap</code> as a key.</p>

<p><strong>Advice 6: on <code>printBoard</code></strong></p>

<p>Why not override <code>toString</code> for <code>Node</code>?</p>

<p><strong>Advice 7: on <code>reconstructPath</code></strong></p>

<p>I suggest you construct the shortest path and <strong><em>return</em></strong> it to the caller instead of printing to console output. I had this in mind:</p>

<pre><code>private List&lt;Node&gt; reconstructPath(Node current) {
    Deque&lt;Node&gt; deque = new ArrayDeque&lt;&gt;();
    int l = 0;

    while (current.previous != null) {
        current = current.previous;
        deque.addFirst(current); // Amortized O(1) for the ArrayDeque
        l++;
    }

    for (Node node : deque) {
        printBoard(node.puzzle);
    }

    //System.out.println("Solution length: " + l);
    return new ArrayList&lt;&gt;(deque);
}
</code></pre>

<p><strong>Advice 8: <code>ArrayList</code> as the closed list</strong></p>

<p>No, no, no and no. <code>contains</code> for a any JDK <code>List</code> runs in linear time. <code>HashSet</code> could do the same in <span class="math-container">\$\Theta(1)\$</span>. For that to happen, go back to <strong>Advice 5</strong>.</p>
    </div>