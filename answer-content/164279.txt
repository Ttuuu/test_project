<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Comments</h1>

<p>A core rule of comments is that they <strong>add</strong> to code, by explaining <em>why</em> you're doing something the way you are. A bad way to use comments is by just repeating what the code does. For example:</p>

<pre><code>my_file = "C:/Users/%USERNAME%/Desktop/TTS/bob.mp3" #Sets a variable for the file path.
</code></pre>

<p>The comment is useless. A better choice in this case, would be:</p>

<pre><code>file_path = "C:/Users/%USERNAME%/Desktop/TTS/bob.mp3" 
</code></pre>

<p>Without a comment. Another example:</p>

<pre><code>os.path.isfile(my_file): #Checks to see whether there is a file present and, if so, removes it.
</code></pre>

<p>the names <code>isfile()</code> and <code>remove()</code> are pretty good indications of what the functions do, so a comment is definitely not needed in that case.</p>

<h1>If-else</h1>

<pre><code>else:
    None
</code></pre>

<p>Isn't good practice. Much better would be to use</p>

<pre><code>else:
    pass
</code></pre>

<p>Or even better, leave the <code>else</code> statement out.</p>

<h1>Bad variable names</h1>

<p>Names like <code>repeat()</code> are not good for functions, they don't explain what happens. A name like <code>text_to_speech()</code> would be more descriptive.</p>

<h1>Improved code</h1>

<p>Here's my version of your code:</p>

<pre><code>import webbrowser
import os
import time
import getpass

from gtts import gTTS
from mutagen.mp3 import MP3

FILE_PATH = "C:/Users/%USERNAME%/Desktop/TTS/bob.mp3" 

username = getpass.getuser()

def text_to_speech():
    while True:
        if os.path.isfile(my_file):
            os.remove(my_file)

        tts = gTTS(text = input("Hello there " + username + """. This program is
        used to output the user's input as speech.
        Please input something for the program to say: """)) 

        tts.save('bob.mp3') 
        webbrowser.open(my_file)

        audio = MP3(my_file)
        audio_length = audio.info.length

        time.sleep((audio_length) + 0.25) # Wait until the mp3 file has finished
        os.system('TASKKILL /F /IM wmplayer.exe') 
        time.sleep(0.5) 

        while True:
            answer = input("Do you want to repeat? (Y/N): ")
            if answer == "y" or answer == "Y":
                repeat() 
            elif answer == "n" or answer == "N":
                if os.path.isfile(my_file): 
                    os.remove(my_file)
                exit()
            else:
                print("Sorry, I didn't understand that. Please try again with Y or N.")

text_to_speech() 
</code></pre>

<p><strong>Some changes I made:</strong></p>

<ul>
<li><p>Removed unnecessary comments</p></li>
<li><p>Removed <code>sys</code> import, replaced <code>sys.exit()</code> with <code>exit()</code></p></li>
<li><p>Added whitespace to make code easier on the eyes</p></li>
<li><p><code>repeat()</code> is now called <code>text_to_speech()</code></p></li>
</ul>
    </div>