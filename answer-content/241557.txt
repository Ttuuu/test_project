<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've done a great job demoing a variety of patterns and tools. I'll add two more things you could benefit from learning early:</p>

<ul>
<li><a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">Type</a> <a href="https://stackoverflow.com/a/32558710/10135377">hints</a>. Function headers are almost always clearer with type hints, and you need them if you want to use a tool like <a href="https://github.com/python/mypy" rel="nofollow noreferrer">MyPy</a>.</li>
<li><a href="https://stackoverflow.com/a/22493194/10135377">The main method pattern</a>.</li>
<li>(Usually I'd also advocate for recursion when someone's demo project is a REPL game like this, but in your case I don't think it would improve this code.)</li>
</ul>

<p>Other stuff:</p>

<ul>
<li>Usually it's better to avoid exceptions when you have other options. While you could do what you're doing here by other means, you've done a few things that make me like your <code>check</code> function: It's concise, it bundles away a discrete bit of functionality, and you're catching a narrowly defined exception class.</li>
<li>Unfortunately, it's a little clunky to have a function that just tells you if <code>int(x)</code> threw an exception, just so you can call <code>int(x)</code> on the next line. You have many other options; I'd be fine with <code>def check (user_input: str) -&gt; Optional[int]:...</code>, but then you <em>must</em> use <code>if x is [not] None:...</code> later. </li>
<li>Depending exactly what the function in question does, either <code>validate</code> or <code>sanitize</code> would probably be better than <code>check</code>.</li>
<li>I lied: another new thing to learn: <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools</a>. In particular, a <code>while</code> loop that increments something is always begging to get replaced with a <code>for</code> loop. In this case, since we want to keep going "as long as it takes", we need a lazy infinite iteratable: <code>itertools.count(0)</code>.

<ul>
<li>In order to make that work, we'll need to separate out the "that input was invalid, try again" logic into a separate loop (or recursive function). </li>
<li>And then if you teach yourself <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generators</a> you could write <code>for (try_number, user_input) in zip(itertools.count(0), yielded_user_input()):...</code>. Fun times!</li>
</ul></li>
</ul>
    </div>