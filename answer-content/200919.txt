<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I also highly recommend <a href="https://codereview.stackexchange.com/a/200915/140921">Eric Stein's answer    below</a> for some    more tips on clean Java style.</p>

<h1>Vowels ad infinitum...</h1>

<pre><code>str.length() &lt;= 3 &amp;&amp; (str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i' || str.charAt(i) == 'o' || str.charAt(i) == 'u')
</code></pre>

<p>could be simpler and clearer:</p>

<pre><code>public static final String VOWELS = "aeiou";

// ...

str.length() &lt;= 3 &amp;&amp; VOWELS.indexOf(str.charAt(i)) != -1
</code></pre>

<p>Then you have a repeated check for vowels again in the <code>else if</code> clause of the conditional that originally check for vowels. To avoid repeated checks, just wrap the entire block in an <code>if (VOWELS.indexOf(str.charAt(i)) != -1)</code></p>

<p>This is generalizeable: <strong>any time</strong> there are two parts of the same conditional that do the same check, it's probably better to wrap the entire thing in that one check.</p>

<p>And every other time you encounter <code>(str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i' || str.charAt(i) == 'o' || str.charAt(i) == 'u')</code>, it should be replaced by <code>VOWELS.indexOf(str.charAt(i)) != -1</code> But make sure it's exactly identical. (Note that there are more efficient ways to do this, but it gets complicated quickly, and my familiarity with Java is limited.)</p>

<h1>Loopy code smells</h1>

<pre><code>// ...

i = 1;
while (str.charAt(i) != 'a' || str.charAt(i) != 'e' || str.charAt(i) != 'i' || str.charAt(i) != 'o' || str.charAt(i) != 'u') {
    i++;

    //...
</code></pre>

<p>Seeing this gives me pause: having an iteration variable in a while loop is bad style. There's a reason the <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html" rel="nofollow noreferrer"><code>for loop</code></a> exists!</p>

<p>There's another, even more glaring problem though. This loop condition will never fail on its own.</p>

<p>One can figure that out simply from the first two conditions (<code>str.charAt(i) != 'a' || str.charAt(i) != 'e'</code>): even if the character is an <code>'a'</code>, it cannot also be an <code>'e'</code>; if it's not an <code>'a'</code>, then it's true on the first condition. Replacing it with <code>while (true)</code> would do the same thing.</p>

<h1>Unreachable statement</h1>

<p>Examine this:</p>

<pre><code>if (firstVow != secondVow) {
    //...
    break;
} else if (firstVow == secondVow) {
    //...
    break;
}
scan.close();
</code></pre>

<p>One may note that because <code>firstVow</code> either equals or does not equal <code>SecondVow</code> at any given point, this last statement will never be reached and the scanner will never be closed. Bummer. (It actually will later, and this statement can be safely ignored and deleted.) This is a good reason to separate the scanning from the translating method; it makes it easier to change both (e.g. add validation, etc.), and it prevent resource leaks.</p>

<h1>More transparent code</h1>

<p>Hopefully more transparent code can help you identify the source of the bugs.</p>

<pre><code>package pigLatin;

import java.util.Scanner;

public class PigLatin
{
    public static final String VOWELS = "aeiou";

    public static String translate(String str)
    {
        String pigLatinPrefix = "";
        char firstVowel;
        if (VOWELS.indexOf(str.charAt(0)) != -1) {
            if (str.length() &gt; 3) {
                firstVowel = str.charAt(0);
                for (int i = 1; i &lt; str.length(); ++i) {
                    if (VOWELS.indexOf(str.charAt(i)) != -1) {
                        char secondVowel = str.charAt(i);
                        //issues arise if the first vowel is equal to the second one
                        if (firstVowel != secondVowel) {
                            pigLatinPrefix = str.substring(str.indexOf(secondVowel), str.length()) + str.substring(str.indexOf(firstVowel), str.indexOf(secondVowel));
                            break;
                        } else {
                            pigLatinPrefix = str.substring(2) + firstVowel +  str.charAt(1);
                            break;
                        }
                    }
                }
            }
        }
        //checks for words that begin with consonants
        else {
            for (int i = 1; i &lt; str.length(); ++i) {
                if (VOWELS.indexOf(str.charAt(i)) != -1) {
                    firstVowel = str.charAt(i);
                    pigLatinPrefix = str.substring(str.indexOf(firstVowel), str.length()) + str.substring(0, str.indexOf(firstVowel));
                    break;
                }
            }
        }

        if (pigLatinPrefix.equals("")) {
            pigLatinPrefix = str;
        }
        return pigLatinPrefix + "ay";
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String str = scan.next();
        scan.close();
        System.out.println(translate(str));
    }
}
</code></pre>

<hr>

<h1>Stylistic concerns</h1>

<p>To begin with, please do not indent your code only 1 space! <a href="http://www.cs.umd.edu/~ben/papers/Miara1983Program.pdf" rel="nofollow noreferrer">Studies have shown</a> that code is most comprehensible when indented 2-4 spaces. My personal preference, along with many other programmers, is 4 spaces.<sup>1</sup></p>

<p>A consistent bracketing style wouldn't hurt either.</p>

<hr>

<p><sup>1: Naturally, the first thing I did when examining your code was apply the regex <code>\r\n( +)</code> -&gt; <code>\r\n\1\1\1\1</code></sup></p>
    </div>