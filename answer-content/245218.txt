<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Python slow, C fast</h1>
<p>By having the loops in Python you're basically cutting one of your legs off. It should come as no surprise that the one legged human will lose to the two legged human.</p>
<p>The question we should be asking is how can we slice <code>pox1</code> to get what we want.</p>
<ol>
<li><p>We should split the for loop into two comprehensions so we can see how we'd do it in numpy.</p>
<pre class="lang-py prettyprint-override"><code>a = [pox1[i]       for i in range(num, len(pox1))]
b = [pox1[i - num] for i in range(num, len(pox1))]
z = (a - b) ** 2
</code></pre>
</li>
<li><p><code>a</code> is very simple we just slice with the values of the range. But <code>b</code> is a bit harder, we can just move the <code>- num</code> into the range and we'll be able to do the same.</p>
<pre class="lang-py prettyprint-override"><code>a = [pox1[i] for i in range(num, len(pox1))]
b = [pox1[i] for i in range(0, len(pox1) - num)]
z = (a - b) ** 2
</code></pre>
</li>
<li><p>Convert it to slices</p>
<pre class="lang-py prettyprint-override"><code>a = pox1[num : len(pox1)]
b = pox1[0 : len(pox1) - num]
z = (a - b) ** 2
</code></pre>
</li>
<li><p>Use some slice sugar</p>
<pre class="lang-py prettyprint-override"><code>a = pox1[num :]
b = pox1[: len(pox1) - num]
z = (a - b) ** 2
</code></pre>
</li>
<li><p>Put back in your code</p>
<pre class="lang-py prettyprint-override"><code>for num in range(len(time) - 1):
    y[num] = np.mean((pox1[num :] - pox1[: len(pox1) - num]) ** 2)
</code></pre>
</li>
</ol>
<p>I changed the size to 4000 and this cut it from 5.04s to 0.07s. To get 40000 changes with the updated code takes 3.30s.</p>
<pre class="lang-py prettyprint-override"><code>import numpy as np
import time as t

SIZE = 4000
pox1 = np.random.randint(1000, size=SIZE)
time = np.arange(SIZE)

y=np.zeros(len(pox1))
w=np.zeros(len(pox1))

start = t.time()

for num in range(len(time)-1):
    y[num] = np.mean((pox1[num :] - pox1[:len(pox1) - num]) ** 2)

endtime = t.time() - start
print(y, endtime)
</code></pre>
    </div>