<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>strtou...()</code> allows a leading '-'</h2>

<p>It looks like OP wants to fail negative values and does catch many potential ones.  <code>if (*s == '-' )</code> is insufficient detection for inputs like <code>"  -123"</code>.  <code>strtou...()</code> curiously allows a <code>'-'</code> sign, simply negating the unsigned value, so that is no help.  Instead, code could  first find the first non-white-space.</p>

<pre><code>if ( s == NULL) goto error_no_value;
if (*s == '\0') goto error_no_value;
while (isspace((unsigned char) *s)) s++;
if (*s == '-' ) goto error_negative;
</code></pre>

<p>OP may want to allow input like <code>"-0"</code>, yet leave that to another day.  Assume that is invalid.</p>

<h2><code>isspace(char))</code> pitfall</h2>

<p><code>isspace(int x)</code> is well defined for all values in the <code>unsigned char</code> range and <code>EOF</code>.  As <code>char</code> may have an offending  negative value, consider the below instead which also allows for multiple trailing white space.</p>

<pre><code>// c = *e;
// if (c &amp;&amp; !isspace(c)) goto error_bogus;
while (isspace((unsigned char) *e)) e++;
if (*e) goto error_bogus;
</code></pre>

<h2>better way??</h2>

<p>If we <em>know</em> the target type is some unsigned type, simply compare to <code>(mode_t) -1</code>.  It is well defined and always the maximum value.</p>

<pre><code>#define UMAX ((mode_t) -1)

if (u &gt; UMAX) goto error_too_big;
</code></pre>

<p>Values that are too big should consider setting <code>errno</code> for the calling code's use and setting to the max value.</p>

<pre><code>if (u &gt; UMAX) {
  m = max;
  errno = ERANGE;
  goto error_too_big;
}
</code></pre>

<hr>

<p>If the type may be some <em>signed</em> type, highly portable code is not truly possible.  With <code>sizeof (mystery_type) == sizeof(int32_t)</code>, we can conclude that <code>MYSTERY_TYPE_MAX &lt;= 0x7FFFFFFF</code>, yet we cannot absolutely conclude <code>MYSTERY_TYPE_MAX == 0x7FFFFFFF</code>, even if it is highly probable.  These are implementation defined issues and portable code uses defines to drive that.  With nominally portable code, using compares, as in OP's code, is OK with various signed types.  Be mindful that <code>intN_t</code> types are semi-optional - although quite common.</p>

<pre><code>// Use fixed width types
if (sizeof m == sizeof(int32_t)) max = INT32_MAX;
...

// or use standard types
if (sizeof m == sizeofint)) max = INT_MAX;
...
</code></pre>
    </div>