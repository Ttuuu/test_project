<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Is this pythonic ?</h2>

<p>The answer to this question is often found by doing <code>import this</code>:</p>

<blockquote>
  <p>Beautiful is better than ugly.<br>
  Explicit is better than implicit.<br>
  Simple is better than complex.<br>
  Complex is better than complicated.<br>
  Flat is better than nested.<br>
  Sparse is better than dense.<br>
  Readability counts.<br>
  Special cases aren't special enough to break the rules.<br>
  Although practicality beats purity.<br>
  Errors should never pass silently.<br>
  Unless explicitly silenced.<br>
  In the face of ambiguity, refuse the temptation to guess.<br>
  There should be one-- and preferably only one --obvious way to do it.<br>
  Although that way may not be obvious at first unless you're Dutch.<br>
  Now is better than never.<br>
  Although never is often better than <em>right</em> now.<br>
  If the implementation is hard to explain, it's a bad idea.<br>
  If the implementation is easy to explain, it may be a good idea.<br>
  Namespaces are one honking great idea -- let's do more of those!</p>
</blockquote>

<hr>

<p>Why is this line not pythonic ? Because it is not readable enough.</p>

<blockquote>
  <p>Readability counts. </p>
</blockquote>

<pre><code>string = "\n".join([string, inp]) if string and inp else "".join([string, inp])
</code></pre>

<hr>

<p>Why is this line not pythonic ? Because it contains more than one instruction by line</p>

<blockquote>
  <p>Sparse is better than dense. </p>
</blockquote>

<pre><code>string = ('\n' if string and inp else '').join([string, inp])
</code></pre>

<hr>

<p>Why is this line not pythonic ? Still not the prettiest way of writing that.</p>

<blockquote>
  <p>Beautiful is better than ugly. </p>
</blockquote>

<pre><code>delimiter = '\n' if string and inp else ''
string = delimiter.join([string, inp])
</code></pre>

<p>I will say later in this post why this is still ugly and how to improve this code.</p>

<hr>

<h2>Is a recursive function pythonic ?</h2>

<p>No, yes, it's complicated. First, the ðŸ”¥<strong>call stack hell</strong>ðŸ”¥. Every time you call a function, python has to "store" the addresses of the caller into a call stack, the depth of the call stack is 1000, which is not much. So...</p>

<ol>
<li><code>while</code> and <code>for</code> are often better than recursive in terms of readability (not always true)</li>
<li><code>while</code> and <code>for</code> are often better than recursive in terms of performance (not always true)</li>
<li>Everything that can be done in a loop can be done recursively (with python not always true)</li>
<li>Everything that can be done recursively can be done with a while or for loop. (always true)</li>
<li>The stack is the limit. 1000 calls comes quick, for example there are more than 1000 words in this post, it wouldn't be a good idea to use recursion to parse it, it would raise a <code>RecursionError: maximum recursion depth exceeded</code>.</li>
</ol>

<hr>

<h2>Is my implementation of a recursive function good ?</h2>

<p>No, because you pass the accumulator as an argument (classic beginner mistake). You think in terms of loops, even when using recursion. Let's take a look at a simple function.</p>

<pre><code>def sum(l):                  #  No hidden mystery accumulator
    if len(l)==1:            #  The first line is usually the stop condition
        return l[0]          #  Return the last element
    return l[0] + sum(l[1:]) #  Return the first + the sum of the rest

sum(range(42))  # 861
</code></pre>

<p>Let's take a closer look at how it calculates this:</p>

<pre><code>def sum(l):
    if len(l)==1:
        return l[0]
    return f"({l[0]}+{sum(l[1:])})"

sum(range(10))  # '(0+(1+(2+(3+(4+(5+(6+(7+(8+9)))))))))'
</code></pre>

<p>Impressive !</p>

<hr>

<p>Now look at your function:</p>

<pre><code>def capitalize_line(string=""):     # Hidden mystery accumulator
    inp = input("enter: ").upper()  # Move this outside of your function
    # This line is already debunked
    string = "\n".join([string, inp]) if string and inp else "".join([string, inp])
    if not inp:
        print(string)    # Move this outside of your function
        return string    # You don't use this but you should
    return capitalize_line(string=string) # not using return as intended 
                         # (carrying processed data down the call stack)
</code></pre>

<blockquote>
  <p>Explicit is better than implicit. </p>
</blockquote>

<p>Using <code>stdin</code> and <code>stdout</code> inside a function whose purpose is to <code>capitalize</code> letters is not a good thing. It makes the code impossible to divide because everything is linked. The <code>capitalize</code> function should capitalize and return a string and nothing else.</p>

<h2>How should I write it ?</h2>

<p>You think I will give you the solution like that... I'm sorry Dave, I'm afraid I can't do that !</p>

<p>Just kidding, but promise me you will try before looking at it:</p>

<blockquote class="spoiler">
  <p></p><pre><code>def capitalize(l):
    if not l:
        return ''
    return l[0].upper() + '\n' + capitalize(l[1:])
</code></pre>
<pre><code>def capitalize(l): # alternative way
    if len(l)==1:
        return l[0]
    return l[0].upper() + '\n' + capitalize(l[1:])
</code></pre>
<pre><code>def main(): # Python 3.8 only
    inputs = []
    while s:=input('enter: '): inputs.append(s)
    print(capitalize(inputs))
</code></pre>
<pre><code>def main():
    inputs = []
    while True:
        s = input('enter: ')
        if not s:
            break
        inputs.append(s)
    print(capitalize(inputs))
</code></pre>
<pre><code>if __name__ == '__main__':
    main()   # In case someone imports your module to use your functions</code></pre>
 But You want to do like the pros don't you ? Use generators
<pre><code>def capitalize(iterable):
    try:
        s = next(iterable)
    except StopIteration:
        return ''
    return s.upper() + '\n' + capitalize(iterable)
</code></pre>
<pre><code>def inputs():
    while True:
        s = input('enter: ')
        if not s:
            break
        yield s
</code></pre>
Even better (or worse), a recursive generator:
<pre><code>def inputs():
     s = input('enter: ')
     if not s: return
     yield s
     yield from inputs()
</code></pre>
<pre><code>def main():
    print(capitalize(inputs()))
</code></pre>
</blockquote>

<p>Wow, you're still there, it means you had the time to read my entire post, and since you've time on your hands, I recommend you <a href="https://www.youtube.com/socratica" rel="nofollow noreferrer">Socratica</a>, more specifically <a href="https://www.youtube.com/watch?v=Qk0zUZW-U_M&amp;list=PLi01XoE8jYohWFPpC17Z-wWhPOSuh8Er-&amp;index=18" rel="nofollow noreferrer">the video about recursion</a>.</p>

<p>And remember, recursion isn't often the best solution.</p>
    </div>