<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Consider an iterative path compression design for <code>root</code>. The recursive version uses more memory for stack frames. Typical iterative versions follow the path one at a time. The path can be followed two at a time since the end loops back to itself. The <code>root</code> function could be refactored to be something along the lines of:</p>

<pre><code>int root(int a, vector&lt;int&gt; &amp;parent) {
    while (parent[a] != a)
      a = parent[a] = parent[parent[a]];
    return a;
}
</code></pre>

<p>Plus, consider adding a second vector to keep track of the sizes of each group. This will allow for more intelligent selecting of representatives during <code>link</code>. Something along the lines of the following:</p>

<pre><code>void link(int i, int j, vector&lt;int&gt; &amp;parent, vector&lt;int&gt; &amp;sizes) {
  i = root(i, parent);
  j = root(j, parent);
  if (i == j) return;
  if (sizes[i] &lt; sizes[j]) {
    parent[i] = parent[j];
    sizes[j] += sizes[i];
  } else {
    parent[j] = parent[i];
    sizes[i] += sizes[j];
  }
}
</code></pre>

<p>See <a href="https://www.geeksforgeeks.org/union-find-algorithm-union-rank-find-optimized-path-compression/" rel="nofollow noreferrer">this post</a> for more information.</p>

<p>Consider allocating the vector using the constructor, <code>resize</code>, or <code>reserve</code>. Then initial values can be set using <code>iota</code> (<a href="https://en.cppreference.com/w/cpp/algorithm/iota" rel="nofollow noreferrer">ref</a>).  For example,</p>

<pre><code>vector&lt;int&gt; parent(n);
iota(begin(parent), end(parent), 0);
</code></pre>

<p>Consider using <code>printf</code> and <code>scanf</code> over <code>cin</code> and <code>cout</code>. Also, if you are going to use <code>cin</code> and <code>cout</code>, consider including <code>ios_base::sync_with_stdio(false);</code> and <code>cin.tie(NULL);</code>. See <a href="https://stackoverflow.com/questions/31162367/significance-of-ios-basesync-with-stdiofalse-cin-tienull">this question</a> for more information.</p>
    </div>