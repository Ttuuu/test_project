<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Dependency inversion principle violation</strong></p>
<p><code>CategoriesController</code> depend on <code>Category[operation]Services</code> (concrete implementations) rather depending on abstractions.</p>
<p>How to prevent this rule violation? <em>Write unit tests</em>.</p>
<p><strong>Side note:</strong> <code>BaseController</code> depend on concrete configuration value. But that value is used only in data access. So data access classes should depend on value, not controller itself.</p>
<p><strong>Pattern names should match implementations.</strong></p>
<p>What I mean is, that <code>Category[operation]Service</code>-s are not services at all. They are commands. So maybe you mean <code>CategoryEditCommand</code>, <code>CategoryDeleteCommand</code> and so on.</p>
<p>I will give you a more concrete example:</p>
<pre><code>public interface ICategoryFactory {
    CategoryModel GetCategory();
}
</code></pre>
<p>Everyone expect that <code>Factory</code> should have <code>Create</code> method, not <code>Get</code>, <code>Set</code> or something else.</p>
<p>What we expect for service is like:</p>
<pre><code>public interface ICategoryService
{
   CategoryModel GetCategory(int id);
   void AddCategory(CategoryModel model);
   void EditCategory(int id, CategoryModel model);
   void DeleteCategory(int id);
}
</code></pre>
<p>Using <code>Command</code> pattern here is overhead. <code>Command</code> pattern is commonly used for hiding how the command is executed and to provide comprehensive way of adding extensions.</p>
<p><strong>Suggestions</strong></p>
<p>So for your scenario I suggest:</p>
<ol>
<li><p>Refactor your <em>services</em> to one <code>ICategoryService</code> that I have suggested above.</p>
</li>
<li><p>Make <code>CategoriesController</code> depend on <code>ICategoryService</code>.</p>
</li>
<li><p>Remove configuration value dependecy from <code>BaseController</code> and add it to implementation of <code>ICategoryService</code></p>
<p>Don't forget to register <code>ICategoryService</code> in your <code>IoC</code> container.</p>
</li>
</ol>
<p><strong>Update 1:</strong> About Validators. For separating concepts I would suggest following hierarchy:</p>
<p><strong>ICategoryStore</strong> - nothing business related, just db operations.</p>
<pre><code>public interface ICategoryStore
{
   CategoryModel GetCategory(int id);
   void AddCategory(CategoryModel model);
   void EditCategory(int id, CategoryModel model);
   void DeleteCategory(int id);
}
</code></pre>
<p>Based on how complex you can decide how higher should be your validation abstraction, I can suggest following:</p>
<p><strong>IValidator</strong> - Encapsulates validation logic for entity.</p>
<pre><code>public interface ICategoryValidator 
{
   void ValidateAdd(ModelState state);
   void ValidateEdit(ModelState state);
   void ValidateDelete(ModelState state);
}
</code></pre>
<p>And finally <code>ICategoryService</code> which implementation should depend on <code>ICategoryStore</code> and <code>ICategoryValidator</code>.</p>
<p>With this approach you can abstract higher, by introducing <code>IStore&lt;T&gt;</code> and <code>IValidator&lt;T&gt;</code>.</p>
    </div>