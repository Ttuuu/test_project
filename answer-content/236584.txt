<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Member Access</h1>

<p>In the real world, people often care about being able to look at the real and imaginary parts of a complex number individually. As such, you will want to provide an interface to them. While contrary to some of the advice you revived in your last review, I'd advise giving these members variables <code>public</code> access. These components are not an implementation detail of your class. Being able to freely read and mutate the components of a complex number is simply part of the expected interface.</p>

<h1>Coupling with <code>main</code> and <code>std::cout</code></h1>

<p>In your current implementation, <code>ComplexNumber</code> includes a public function <code>printNumber</code> to display the complex number as an expression of <code>a</code> and <code>b</code>. However, <code>a</code> and <code>b</code> have no meaning within the class itself, and only exist in your <code>main</code> function. Likewise,  <code>printNumber</code> always prints the complex number to  <code>std::cout</code>. Out in the wild, developers may want to write a complex number to other places, such as  <code>std::cerr</code> or a file.</p>

<p>Right now, this functionality isn't as useful as it could be for an outside user. What would be more helpful is the ability to print a complex number itself to <em>any</em> output stream.</p>

<p>The most robust way to accomplish this would be by <a href="https://www.learncpp.com/cpp-tutorial/93-overloading-the-io-operators/" rel="noreferrer">overloading the I/O operators</a>. A possible implemetation might look like</p>

<pre><code>class ComplexNumber {
    // ... snip
    friend std::ostream&amp; operator&lt;&lt;(std::ostream &amp;out, ComplexNumber c);
};

std::ostream&amp; operator&lt;&lt;(std::ostream &amp;out, ComplexNumber c) {
    out &lt;&lt; c.real &lt;&lt; " + " &lt;&lt; c.imaginary &lt;&lt; 'i';
    return out;
}
</code></pre>

<p>Using this implementation, you can print <code>ComplexNumber</code> instances directly to <code>std::cout</code> via</p>

<pre><code>ComplexNumber c(2, 3);    
std::cout &lt;&lt; c;  // prints 2 + 3i
</code></pre>
    </div>