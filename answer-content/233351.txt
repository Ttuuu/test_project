<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Constants - glabal vs. class scope</h1>

<p>Definig global constants should be considered a bad practice. You should move them to the classes above which you are defining them now.</p>

<p>You should also consider defining those constants private unless you need them elsewhere too (in which case they probably belong elsewhere themselves and the class in question should accept them as constructor arguments)</p>

<pre><code>class Session
{
    private const ADMIN_VALUE_KEY = "admin"
}
</code></pre>

<h1>Multipurpose methods</h1>

<p>Methods like this one:</p>

<pre><code>public function run($sql, $args = NULL)
{
        if (!$args)
        {
            return $this-&gt;query($sql);
        }
        $stmt = $this-&gt;prepare($sql);
        $stmt-&gt;execute($args);
        return $stmt;
}
</code></pre>

<p>should also be considered a bad practice. Not talking about the fact that <code>run</code> is pretty bad name for this, IMHO anyway. What I mean is the method takes one argument and does something, or it takes two arguments and does something else. PHP does not have the feature of method overloading. And so you should define two separate methods for this (like PDO does). Well I know from certain angle you could say it is the same thing. And if you were forced to use two arguments because you are implementing an interface, then I would not object (except maybe the interface deserved some inspection).</p>

<h1>Extending PDO</h1>

<p>Extending PDO is not a very good idea as well.
You are doing it for 2 reasons:</p>

<ol>
<li><p>you wanted to simplify query with/without args but that is IMO useless. You always know if you want to pass arguments or not and so you can choose the right method to use.</p></li>
<li><p>you wanted to allow default constructor with all your credentials passed, but that is not IoC, it is not SRP, it is not flexible, it introduces extra dependency...</p></li>
</ol>

<p>The simplest design pattern of all comes to rescue, the factory!</p>

<pre><code>function createMyPDO(): \PDO
{
  return new \PDO(/* hardcode it, load it from config file, get it from class variables, load it from database (just kidding:)), ... */);
}
</code></pre>

<h1>Type Hints</h1>

<p>You should be as specific about the types of arguments as possible. Omitting them is, well yea, it is a minor performance gain, but it is a major readability drop.</p>

<p>As seen on the <code>Security</code> class, you definitely have access to the scalar typehints feature. So why not use it?</p>

<p>Also if you expect array why accepting null? Like in the already mentioned <code>run</code> method.</p>

<h1>Single Exit Point</h1>

<pre><code>public static function location($dir = LOCATION_DEFAULT_DIR)
{
    header("Location: " . $dir);
    exit();
}
</code></pre>

<p>Avoid calling <code>exit</code> on multiple places, there should only be one exit in your application/page. And by exit I mean a call to <code>exit</code> or the natural end of program.
Well, we all use (or used to use) var_dump (and alike) with <code>exit</code>/<code>die</code> for development purpose (take a look at xdebug and forget var_dump btw) but in production code, only one exit point should exist, because there may be task(s) that need to be done before exit. And even if there is none now, adding it in future is like nothing if you have only one exit point.</p>

<h1>Code Style</h1>

<p>This is definitely a matter of preference, but it looks weird to me to have classes starting with capital letter, then methods with snake case. So I would just recommend to stick with the most common way in PHP world, and that is:</p>

<pre><code>PascalCaseClass::withCamelCaseMethods()
</code></pre>

<h1>Base</h1>

<p>The <code>Base</code> class looks like you didn't know what to do with those functions. They are what was left after some refactor and class splitting. But just because they are only two doesn't mean they belong together.</p>

<pre><code>Base::location();
</code></pre>

<p>doesn't mean anything to me.</p>

<pre><code>Response::redirect()
</code></pre>

<p>on the other hand tells me something about what it does.</p>

<p>Also you dont have to wrap every two lines in a function.</p>

<p>The below is absoutely ok to do and I would actually understand what it does</p>

<pre><code>if (!Form::checkRequiredFields($required, $_POST)) {
    return Response::redirect($error);
}
</code></pre>

<p>unlike I would from</p>

<pre><code>Base::check_input($required, $error);
</code></pre>
    </div>