<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Bug</h2>

<p>As Carsten points out, you need to allocate <span class="math-container">\$(\text{length}\cdot 2)+1\$</span> bytes, rather than <span class="math-container">\$(\text{length}\cdot2)\$</span> to account for the null terminator <code>sprintf()</code> adds.</p>

<h2>Formatting</h2>

<p>Most C formatting guides do not include spaces around the arguments to function calls, nor the expressions within an if-statement. For an example of a C style most C programmers would find acceptable, see OpenBSD's <a href="https://man.openbsd.org/style" rel="noreferrer"><code>style(9)</code></a> manual.</p>

<p>I choose to associate <code>*</code> with the variable name, rather than floating between the type and name. This disambiguates the following example:</p>

<pre><code>int *a, b;
</code></pre>

<p>Here, <code>a</code> is a pointer to an integer, but <code>b</code> is only an integer. By moving the asterisk next to the name, it makes this clearer.</p>

<pre><code>int length = strlen ( str );
char * newStr = malloc (length * 2 );
if ( !newStr) shutDown ( "can't allocate memory" ) ;
</code></pre>

<p>Becomes:</p>

<pre><code>int const len = strlen(str);
char *const new_str = malloc(1 + len * 2);

if (new_str == NULL) {
    shutDown("can't allocate memory");
}
</code></pre>

<h2>Error checking</h2>

<p>Rather than calling <code>shutDown()</code> and <code>exit()</code>ing the program, you should instead return an error value which can be checked by the caller of <code>str_to_hex()</code>. Because you return a pointer, you can return <code>NULL</code> to indicate an error occurred and the caller should check <code>errno</code>.</p>

<p>Likewise, on some systems your program can incorrectly exit when <code>length == 0</code>. If we look at the manual page for <a href="https://linux.die.net/man/3/malloc" rel="noreferrer"><code>malloc(3)</code></a>:</p>

<blockquote>
  <h3>Return Value</h3>
  
  <p>The malloc() and calloc() functions return a pointer to the allocated memory that is suitably aligned for any kind of variable. On error, these functions return NULL. <strong>NULL may also be returned by a successful call to malloc() with a size of zero</strong>, or by a successful call to calloc() with nmemb or size equal to zero.</p>
</blockquote>

<p>So by returning <code>NULL</code> we account for the case where <code>malloc(3)</code> returns NULL on <em>success</em>.</p>

<pre><code>if (new_str == NULL) {
    shutDown("can't alloc memory");
}
</code></pre>

<p>Becomes:</p>

<pre><code>if (new_str == NULL) {
    return NULL;
}
</code></pre>

<p>If you choose, you can also check if <code>str</code> is NULL before calling <code>strlen()</code>. This is up to you, and it's not uncommon in C to ignore this case and leave it as user error.</p>

<h2>Looping</h2>

<p>Use the <code>size_t</code> type in your loop rather than <code>int</code>. <code>size_t</code> is guaranteed be wide enough to hold any array index, while <code>int</code> is not.</p>

<p>Using <code>i</code> rather than <code>x</code> is more common for looping variables.</p>

<p>The <code>y</code> variable isn't needed. You can simply use <code>str[i]</code> in its place.</p>

<p>In terms of performance there's likely a faster option than using <code>sprintf()</code>. You should look into <a href="https://linux.die.net/man/3/strtol" rel="noreferrer"><code>strtol(3)</code></a>.</p>

<h2>Conclusion</h2>

<p>Here is the code I ended up with:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

char *
str_to_hex(char const *const str)
{
    size_t const len = strlen(str);

    char *const new_str = malloc(1 + len * 2);

    if (new_str == NULL) {
        return NULL;
    }

    for (size_t i = 0; i &lt; len; ++i) {
        sprintf(new_str + i * 2, "%02X", str[i]);
    }

    return new_str;
}

int
main(void)
{
    char *str = "abz";
    char *hex = str_to_hex(str);

    if (hex == NULL &amp;&amp; strlen(str) != 0) {
        /* error ... */
    }

    printf("%s\n",hex);

    free(hex);
}
</code></pre>

<p>Hope this helps!</p>
    </div>