<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>Regex.Matches</code> returns a <a href="https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.matchcollection%28v=vs.110%29.aspx" rel="noreferrer"><code>MatchCollection</code></a> which contains <a href="https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.match%28v=vs.110%29.aspx" rel="noreferrer"><code>Matches</code></a> which captures the index and length of each match. So as such you won't have to fire up the regex engine again because you can do something like this:</p>

<pre><code>string toSearchInside; // The actual string I'm going to be replacing within
List&lt;string&gt; searchStrings; // The list of words to look for via regex

string pattern = @"([:@?]{0})";
string replacement;

foreach (string toMatch in searchStrings)
{
    var regex = new Regex(
                            string.Format(pattern, toMatch), 
                            RegexOptions.IgnoreCase
                            );
    var matches = regex.Matches(toSearchInside);

    if (matches.Count == 0)
        continue;

    replacement = CreateReplacement(toMatch);

    // in case the replacement is of a different length we replace from
    // from back to front to keep the match indices correct
    foreach (var match in matches.Cast&lt;Match&gt;().Reverse())
    {
        toSearchInside = toSearchInside.Replace(match.Index, match.Length, replacement);
    }
}
</code></pre>

<p>Unfortunately the .NET framework doesn't come with a positional <code>Replace</code> so we have to create one which I did as an extension method:</p>

<pre><code>public static string Replace(this string s, int index, int length, string replacement)
{
    var builder = new StringBuilder();
    builder.Append(s.Substring(0,index));
    builder.Append(replacement);
    builder.Append(s.Substring(index + length));
    return builder.ToString();
}
</code></pre>

<p>If you do this often and the match patterns don't change you could consider two things:</p>

<ul>
<li>Pre-compile the regular expressions</li>
<li>Pre-create the replacements</li>
</ul>
    </div>