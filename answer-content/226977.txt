<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Next time you're in such a scenario, ask them to clarify what "academic" means. For me it means a solution that concentrates on the essence of data structure, not an implementation of a specific API. But we probably never know so let's not concentrate on that. Instead, let's look at the red flags...</p>

<p>(I have ignored the comments as I do not understand the language.)</p>

<p><strong>Transient</strong></p>

<p>The first red flag that jumps at me is the transient keywords. Your collection does not implement Serializable so the keyword does not mean anything. It's a sign to thereader that you don't understand what transient means.</p>

<p><strong>Non-private fields</strong></p>

<p>The fields in CustomeDoubleLinkedList are not private so they are visible to all classes defined in the same package, allowing for other parties to break the internal state of the collection.</p>

<p><strong>Redundant code</strong></p>

<p>The isEmpty() method relies on three different fields to figure out if it is empty. You should be confident enough in your code and tests to rely on just the length counter. If you use a static code analyzer it rises a flag every time you use "collection.size() == 0" and recommends to use "isEmpty()". Your isEmpty should work likewise.</p>

<p><strong>Inconsistent naming</strong></p>

<p>The add() and addAtBeginning() are a bit inconsistent. The latter explicitly states it adds to the beginning while the former has to rely on documentation. I would have been looking for addLast() and addFirst() or add() and addAt(0).</p>

<p>The addAll() doesn't convey in it's name that it requires an index parameter like addAt() does.</p>

<p>The removeIndex() is inconsitent with addAt(). Should be removeAt().</p>

<p><strong>Range checking</strong></p>

<p>The addAt method does not check if index is beyond the size of the collection. A method that returns a valid value with invalid input is surprising behaviour which welcomes programming errors from the caller. An IllegalArgumentException should be thrown here.</p>

<p><strong>Inconsistent parameters</strong></p>

<p>The addAt and addAll have the index parameter at different part of the method signature. It should be first or last in both.</p>

<p><strong>Generics or not?</strong></p>

<p>The addAll does not use the generic type declared in the class signature.</p>

<p><strong>Unnecessary code</strong></p>

<p>The clear-method should just set the first and last to null and size to zero and let the garbage collector deal with the rest.</p>

<p><strong>No null checking</strong></p>

<p>The getFirst and getLast throw NullPointerExceptions if the list is empty.</p>

<p><strong>Code duplication</strong></p>

<p>You have copy-pasted the linking of nodes to their successors and predecessors to several places. Those should have been refactored to private methods like "insertAfter(existingNode, newNode)" and "insertBefore(existingNode, newNode)" or made that operation a function of the Node.</p>

<p>There may be more, but I have to go now.</p>

<p>Edit:</p>

<p><strong>Academic shmacademic</strong></p>

<p>I want to contemplate this a bit. A linked list is a recursive data structure consisting of a head node and a tail (which is a linked list). Prolog programmers know this by heart. Your solution is pragmatic and concentrates on the collection API.</p>

<p>It may have been that they wanted you to concentrate more on the recursive nature of the Node-class. Something like this (you need to imagine the double linking :) ):</p>

<pre><code>public class LinkedList&lt;T&gt; {
    private T head = null;
    private LinkedList&lt;T&gt; tail = null;

    public void add(T element) {
        if (head == null) {
            head = element;
            tail = new LinkedList&lt;&gt;();
        } else {
            tail.add(element);
        }
    }

    public boolean contains(T element) {
        if (head == null) {
            return false;
        } else if (head.equals(element)) {
            return true;
        } else {
            return tail.contains(element);
        }
    }

    ...
}
</code></pre>

<p>Anyway... What you can get out of this is knowing that asking clarifying questions in a job interview is a good thing.</p>
    </div>