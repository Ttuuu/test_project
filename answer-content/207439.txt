<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think you’ve misunderstood the purpose of <code>"""docstrings"""</code>.  If someone using your code types <code>help(LinkedList)</code>, they will get the contents of the class’s docstring and the public member docstrings, formatted together into one long output string describing (ideally) how to use the class and its member functions.  The internal details of how the class works should not be included. </p>

<p>Moreover, the class docstring should not repeat the information given in a member function.  For example, you don’t need to document <code>LinkedList.append</code> in the <code>LinkedList</code> docstring, because <code>help(LinkedList)</code> automatically also output the help for <code>help(LinkedList.append)</code>.</p>

<hr>

<p>Yes, your <code>__iter__</code> implementation is <span class="math-container">\$O(n^2)\$</span>.  Instead of returning an iterator Object, you’ve returned the original list, and made the original list implement the iterator protocol.  This means you cannot have two iterators going at the same time.  Also, you cannot iterate halfway through the list, stop and then start a new iteration from the beginning.</p>

<p>You should either create a new <code>class LinkedList._Iter</code> object (which implements the iterator protocol) and return that from <code>__iter__</code> or, use the same technique you used in <code>_get_values()</code> and return a generator that yields successive values from the list.  In either case, these returned objects/generators would be independent; you could have multiple iterations running separately, and/or abandoned halfway through iteration without messing up future iterations.</p>

<hr>

<p>Edge case:</p>

<ul>
<li>start with empty list: head = tail = empty-node</li>
<li>append one item: head = tail = node-with-value</li>
<li>delete element 0: head = <code>None</code>; tail = node-with-value</li>
<li>every subsequent operation (other than <code>len()</code>) will now raise an exception due to referencing an attribute of <code>self.head</code>, which is now <code>None</code>.</li>
</ul>
    </div>