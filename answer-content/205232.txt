<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Is that a skip list?</h2>

<p>Frankly, I don't see how it can be described as a <a href="https://en.wikipedia.org/wiki/Skip_list" rel="nofollow noreferrer">skip list</a>. Skip lists are meant to replace balanced trees, since they offer a similar service (fast insertion in a sorted container -so fast look-up also) with the added value of greater simplicity; they work by having different tracks -some faster, some more complete- to go through the elements they contain.</p>

<h2>Then what is it exactly?</h2>

<p>I believe that what you did was to build a kind of generic interface over containers, and then use that interface to provide what you thought was easier access to standard algorithms. But please correct me if I'm wrong. If not -if I'm right- what you did amounts to a crime in the eye of the STL police. Decoupling containers and algorithms is one of the greatest features of the STL, and going back on that -even if it involves some clever genericity- would buy you a direct ticket to the Java prison.</p>

<h2>What you could have done instead</h2>

<p>I understand that typing <code>algorithm(std::begin(container), std::end(container);</code> seems backwards when so many other languages have <code>algorithm(container)</code> or even <code>container.algorithm</code>. And I would very much agree that saving keystrokes is worth investing in the long term. Then simply take all those static private functions, and make them free and public, and put them into their own namespace.</p>

<pre><code>namespace adapt {
    template &lt;typename Container, typename Compare = std::less&lt;&gt;&gt;
    void sort(Container&amp; container, Compare cmp) {
        std::sort(std::begin(container), std::end(container), cmp);
    }
    // ... and so on
}
</code></pre>

<p>Then if those toilsome keystrokes really bother you, it's only a matter of introducing the adapted function at the beginning of your file:</p>

<pre><code>using adapt::lower_bound;
// ...
lower_bound(my_vec, my_val);
</code></pre>

<p>Or, if you want to be very clever, and aren't afraid of evil hacks and macros, you can write a generic adaptor for algorithms. It could be a lot cleaner if there were a standard way to turn generic functions into generic lambdas (because the latter can be deduced whereas the former can't), but it isn't that ugly either:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;vector&gt;

#define AS_LAMBDA(fn) [](auto&amp;&amp;... args) { return fn(std::forward&lt;decltype(args)&gt;(args)...); }

#define CONTAINER_APPLY(algorithm, container, ...) \
container_apply_impl(AS_LAMBDA(algorithm), container, __VA_ARGS__)

template &lt;typename Algorithm, typename Container, typename... Args&gt; 
auto container_apply_impl(Algorithm algorithm, Container&amp; container, Args&amp;&amp;... args) { 
    return algorithm(std::begin(container), std::end(container), std::forward&lt;Args&gt;(args)...); 
}

int main() {
    std::vector&lt;int&gt; vec{1, 2, 3, 4, 8, 7, 2, 8, 6, 4, 2, 3 };
    CONTAINER_APPLY(std::for_each, vec, [](auto i) { std::cout &lt;&lt; i &lt;&lt; ", "; });
}
</code></pre>
    </div>