<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Recently I came to the realization that I been holding myself back by doing this and moving beyond my insecurities. I have taken more leaps by writing common C++ programs to build my knowledge of the language and architecture.</p>
</blockquote>

<p>Learning by doing is a good approach IMO. 
Hopefully you can improve your game and submit it again for review!</p>

<hr>

<h2>main</h2>

<p>Is <code>Player.h</code> needed in main?  </p>

<p>Turn <code>2</code> into a named constant:  </p>

<pre><code>int constexpr players{2};
BlackJack game{players}; 
</code></pre>

<p>This makes it much clearer what is being passed to your game.  </p>

<p>While some people really don't like this, you can omit <code>return 0</code> from <code>main</code> if you don't depend on it. The compiler will generate it for you.</p>

<hr>

<h2>cardinfo</h2>

<p>Personally I don't mind <code>#pragma once</code>, just remember it's <a href="https://en.wikipedia.org/wiki/Pragma_once" rel="nofollow noreferrer">not standard</a>.  </p>

<p>[Subjective] Don't indent after <code>namespace</code>.  </p>

<p>[Subjective] Don't write more than one statement per line in your enums.  </p>

<p>If you want to use an unordered container with a custom key you need to provide <em>hash</em> and <em>compare</em> functions. Have a look at <a href="https://stackoverflow.com/questions/17016175/c-unordered-map-using-a-custom-class-type-as-the-key">this SO question</a> and this <a href="https://en.cppreference.com/w/cpp/container/unordered_map/unordered_map" rel="nofollow noreferrer">link from cppreference</a>.</p>

<hr>

<h2>player</h2>

<p>Class interfaces should go from least restricted to most restricted (i.e. <code>public</code>, <code>protected</code>, <code>private</code>). Reason being that when someone reads your interface he is most likely interested in the public functions that can be worked with.</p>

<p>[Subjective] Don't omit braces as that can lead to bugs down the line.
E.g.:</p>

<pre><code>// bad
if (foo) 
    // code here

// good
if (foo)
{
    // code here
}
</code></pre>

<p><a href="https://softwareengineering.stackexchange.com/questions/59880/avoid-postfix-increment-operator">Prefer prefix (++foo) over postfix (foo++) operator</a>.</p>

<p><a href="https://stackoverflow.com/questions/213907/c-stdendl-vs-n">Prefer using <code>\n</code> over <code>std::endl</code></a></p>

<p>I'm not familiar with blackjack but if you ask <em>"hit or stick"</em> should the answer options really be <em>"yes/no"</em> not maybe <em>"hit/stick"</em>?</p>

<hr>

<h2>blackjack</h2>

<p>Reuse your RNG. Have a look at <a href="https://codereview.stackexchange.com/questions/213842/rock-paper-scissors-engine">this question</a> to see how it could be done.</p>

<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es23-prefer-the--initializer-syntax" rel="nofollow noreferrer">You can and should use brace initialization when possible.</a></p>
    </div>