<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>SharePoint lists can be queried for list items.</p>

<p>With that in mind, the following line can be improved:</p>

<pre><code>$mylistitems = $subWeb.Lists["MyList"].Items | sort Title
</code></pre>

<p>That line asks SharePoint for <em>all</em> of the list items, and then your PowerShell host sorts the items by Title only after they're returned.</p>

<p>To get the items <em>already</em> sorted by Title, we use the SPQuery object and specify a valid CAML query.</p>

<pre><code>$query = new-object Microsoft.SharePoint.SPQuery
$query.Query = '&lt;OrderBy&gt;&lt;FieldRef Name="Title"/&gt;&lt;/OrderBy&gt;'
$mylistitems = $subWeb.Lists["MyList"].getItems($query)
</code></pre>

<p>But hey, not only can we sort it, we can filter it... </p>

<p>That means you shouldn't have to loop through every item to check whether a certain field has a certain value. Just tell SharePoint to only give you items where the desired field explicitly equals the desired value!</p>

<pre><code>$csv | ForEach-Object {
        $oldTopic = $_.Topic
        $newTopic = $_.NewTopic
        $query = new-object Microsoft.SharePoint.SPQuery
        $query.Query = '&lt;Where&gt;&lt;Eq&gt;&lt;FieldRef Name="Topics"/&gt;&lt;Value Type="Text"&gt;'+$oldTopic+'&lt;/Value&gt;&lt;/Eq&gt;&lt;/Where&gt;'
        $mylistitems = $subWeb.Lists["MyList"].getItems($query)
        $myListItems | ForEach-Object { 
            $_["Topics"] = $newTopic # update the field
            $_.Update() # commit the update
        }
}
</code></pre>

<p>Note that to improve performance on the SharePoint side, you can go into the list settings and adjust the "indexed columns." Setting the Topics column to be indexed will improve the performance of queries that sort or filter by that column.</p>
    </div>