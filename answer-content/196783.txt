<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>/**
 * Returns intersecting part of two rectangles
 * @param  {object}  r1 4 coordinates in form of {x1, y1, x2, y2} object
 * @param  {object}  r2 4 coordinates in form of {x1, y1, x2, y2} object
 * @return {boolean}    False if there's no intersecting part
 * @return {object}     4 coordinates in form of {x1, y1, x2, y2} object
 */
const getIntersectingRectangle = (r1, r2) =&gt; {  
  [r1, r2] = [r1, r2].map(r =&gt; {
    return {x: [r.x1, r.x2].sort(), y: [r.y1, r.y2].sort()};
  });

  const noIntersect = r2.x[0] &gt; r1.x[1] || r2.x[1] &lt; r1.x[0] ||
                      r2.y[0] &gt; r1.y[1] || r2.y[1] &lt; r1.y[0];

  return noIntersect ? false : {
    x1: Math.max(r1.x[0], r2.x[0]), // _[0] is the lesser,
    y1: Math.max(r1.y[0], r2.y[0]), // _[1] is the greater
    x2: Math.min(r1.x[1], r2.x[1]),
    y2: Math.min(r1.y[1], r2.y[1])
  };
};

/*  ↓  DEMO  ↓  */

const rectangle1 = { x1: 2, y1: 2, x2: 4, y2: 4 };
const rectangle2 = { x1: 3, y1: 3, x2: 6, y2: 2 };

console.log(getIntersectingRectangle(rectangle1, rectangle2));
// { x1: 3, y1: 2, x2: 4, y2: 3 }</code></pre>
</div>
</div>


<p>First, both rectangles get transformed into object with keys <code>x</code> and <code>y</code> and sorted arrays of two of corresponding them coordinates as values. </p>

<pre><code>r1 = {
  x: [2, 4], // x1, x2
  y: [2, 4]  // y1, y2
}
r2 = {
  x: [3, 6], // x1, x2
  y: [2, 3]  // Y2, Y1 !
}
</code></pre>

<p>That's because for this job it is important to know which of <code>x</code>s and <code>y</code>s is lesser and which is greater. Rather than <code>Math.max()</code> and <code>Math.min()</code> a single <code>.sort()</code> can be used.</p>

<p>Alternative would be to declare that <code>(x1, y1)</code> is assumed to always be top-left corner, but as I see in <code>rectangle2</code> in your question, that is apparently not always the case.</p>

<p>Now, <code>noIntersect</code> is negated</p>

<pre><code>!(a.left &gt; b.right || b.left &gt; a.right || a.top &gt; b.bottom || b.top &gt; a.bottom);
</code></pre>

<p>which tests if in both axes sides from one end of one figure exceed opposite-direction end side of the other figure, e.g. if left side of figure <code>a</code> is more to the right than the right side of figure <code>b</code>.</p>

<p>At the end we return false if there is no intersection of our rectangles, or an object with coordinates if there is. Intersecting part will always span from:</p>

<p>the greater of the 2 lesser <code>x</code>s of both rectangles</p>

<p>to</p>

<p>the lesser of the 2 greater <code>x</code>s of both rectangles.</p>
    </div>