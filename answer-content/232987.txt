<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>A bug?</h3>

<p>Here</p>

<pre><code>value = math.ceil(calculate_number(A) / 2)
</code></pre>

<p>you use the <code>ceil</code> function, apparently to truncate the result dividing a negative number towards zero, so that, for example, <code>-23</code> becomes <code>-11</code>. But for positive odd numbers this gives an unexpected result:</p>

<pre><code>print(solution([1, 1, 1])) # 1 - 2 + 4 = 3
</code></pre>

<p>returns <code>[0, 1, 1] = -2 + 4 = 2</code> where I would expect <code>[1] = 1</code>. If that line is replaced by</p>

<pre><code>value = int(calculate_number(A) / 2)
</code></pre>

<p>then both positive and negative values are rounded towards zero. As a side-effect, the </p>

<pre><code>import math
</code></pre>

<p>is not needed anymore.</p>

<h3>Some small simplifications</h3>

<p>The test</p>

<pre><code>if number == 0:
    return binary
</code></pre>

<p>in <code>convert_number_to_binary()</code> is not needed: If the passed number is zero then the <code>while</code> loop will not execute.</p>

<p>The exponentiation in the conversion from binary to number can be avoided if the digits are processed in reverse order:</p>

<pre><code>def calculate_number(A):
    total = 0
    for digit in reversed(A):
        total = (-2) * total + digit
    return total
</code></pre>

<p>And that can be compactly expressed as a <a href="https://docs.python.org/3.8/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>reduce</code></a>Â operation:</p>

<pre><code>import functools

def calculate_number(binary):
    return functools.reduce(lambda total, digit: -2 * total + digit, reversed(binary))
</code></pre>
    </div>