<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with the comments by <a href="https://codereview.stackexchange.com/users/97338/micha%c5%82-per%c5%82akowski">Michał Perłakowski</a>. The <a href="https://developer.mozilla.org/en/docs/Web/API/Fetch_API" rel="nofollow noreferrer">Fetch API</a> is nice, though it was pointed out in <a href="https://codereview.stackexchange.com/questions/178156/comment-list-using-reactjs/178158#comment338287_178158">a comment</a> that it doesn't support aborting requests (except <a href="https://stackoverflow.com/a/46785332/1575353">possibly in firefox</a>). Other tools like <a href="https://github.com/visionmedia/superagent" rel="nofollow noreferrer">SuperAgent</a> do allow aborting requests. </p>

<blockquote>
  <ol>
  <li>Is there a modern way to collect form inputs? E.g. json enctype?</li>
  </ol>
</blockquote>

<p>You might want to consider using <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData" rel="nofollow noreferrer">FormData</a> to serialize the form.</p>

<pre><code>var data = new FormData(feedbackform);
</code></pre>

<p>Otherwise, if you still want to iterate over the elements, you might also consider using functional programming approaches for collecting the inputs. In the example below, the <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection" rel="nofollow noreferrer">HTMLFormControlsCollection</a> <em>elements</em> is iterated over using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" rel="nofollow noreferrer"><code>Array.prototype.forEach()</code></a> (it also uses the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator" rel="nofollow noreferrer">spread syntax</a> to expand the nodes into an array - <code>[...feedbackform.elements]</code>), though that is a feature of <a href="/questions/tagged/ecmascript-2015" class="post-tag" title="show questions tagged 'ecmascript-2015'" rel="tag">ecmascript-2015</a> so you could use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from" rel="nofollow noreferrer"><code>Array.from(feedbackform.elements)</code></a> instead). That way, you don't have to index into the array to get the value from the element, increment the index of the iterator (i.e. <code>i++</code>), etc..</p>

<p>To learn more about functional programming, try <a href="http://reactivex.io/learnrx/" rel="nofollow noreferrer">these exercises</a>.   </p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>document.addEventListener('DOMContentLoaded', function() {
  document.getElementById('feedback').addEventListener('click', function() {
    feedback(document.getElementById('feedbackform'));
  });
});

function feedback(feedbackform) {
  var data = {};
  [...feedbackform.elements].forEach(function(element) {  
    data[element.name] = element.value;
  });
  console.log('data: ', data);
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;form name="feedbackform" id="feedbackform"&gt;
  &lt;input type="text" name="fname" /&gt;
  &lt;input type="email" name="emailAddr" /&gt;
  &lt;input type="number" name="numParts" /&gt;
  &lt;select name="animal" required&gt;
&lt;option&gt;- select animal&lt;/option&gt;
&lt;option value="meerkat"&gt;meerkat&lt;/option&gt;
&lt;option value="monkey"&gt;monkey&lt;/option&gt;
&lt;/select&gt;
&lt;/form&gt;
&lt;button id="feedback"&gt;send feedback&lt;/button&gt;</code></pre>
</div>
</div>


<p>While this might not reduce the code very much, you might find the <a href="https://developer.mozilla.org/en-US/Add-ons/Techniques/Promises#XMLHttpRequest" rel="nofollow noreferrer">MDN article on using Promises with XMLHttpRequest</a> interesting. Then in theory, you could have the <em>success</em> callback in the function for <code>.done()</code> and the error handling in the callback function for <code>.catch()</code>. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" rel="nofollow noreferrer">Promises</a> are a good way to handle asynchronous operations.</p>

<blockquote>
  <ol start="2">
  <li>Is disabling the submit button a good idea to prevent multiple form submissions?</li>
  </ol>
</blockquote>

<p>Yes. However, as Michał mentioned, you might want to disable the form - perhaps disabling both would be a good idea. </p>

<blockquote>
  <ol start="3">
  <li>If the form fails to send, what's a good recourse (to prevent data loss of the filled form) I can give the user? Perhaps munge it into a mailto: command?</li>
  </ol>
</blockquote>

<p>I don't see much in initial searches online for best practices of handling AJAX errors/failures. Many web-applications display an error message to the user that an error occurred. As you mentioned, a fall-back email might be the best solution for your application.</p>
    </div>