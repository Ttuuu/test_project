<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not a guru of matplotlib but I'll show how I would approach the problem. Maybe you could get something useful out of it. Also, I'm gonna review all the code, not only the plotting part. </p>

<p><strong><code>get_data</code>:</strong></p>

<blockquote>
<pre><code>def get_data(x, order, scale):
    '''Generates data for this example.'''

    y = scale * (x**order)

    return y
</code></pre>
</blockquote>

<ul>
<li>For docstrings use <a href="https://www.python.org/dev/peps/pep-0008/#string-quotes" rel="nofollow noreferrer">triple double quotes</a>: <code>"""Your docstring"""</code>.  </li>
<li>There is no need to put so many <a href="https://www.python.org/dev/peps/pep-0008/#blank-lines" rel="nofollow noreferrer">blank lines</a> inside such a small function.  </li>
<li>Exponentiation has a <a href="https://docs.python.org/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">higher precedence</a> than multiplication, that means you can remove parentheses: <code>scale * x ** order</code>.  </li>
<li>Variable <code>y</code> is redundant, just write: <code>return scale * x ** order</code>.  </li>
<li>You can use <a href="https://docs.python.org/library/typing.html" rel="nofollow noreferrer">type hints</a> to help readers understand what types of data your function operates with. Also some IDEs are capable of analyzing them and will highlight places where there are inconsistencies between what is supplied to a function and what that function expected to get.</li>
</ul>

<p>That gives us:</p>

<pre><code>def get_data(x: np.ndarray,
             order: float,
             scale: float) -&gt; np.ndarray:
    """Generates data for this example."""
    return scale * x ** order
</code></pre>

<hr>

<p><strong>Generating example data:</strong></p>

<blockquote>
<pre><code># generate the example data

orders = [2, 2.2, 2.3]
scales = [1, 2]

scale_grid, order_grid = np.meshgrid(scales, orders)

parameters = list(zip(order_grid.ravel(), scale_grid.ravel()))

my_x = np.arange(0, 10.1, 0.1)
my_ys = []

for ps in parameters:

    my_ys.append(get_data(my_x, *ps))
</code></pre>
</blockquote>

<ul>
<li>Obtaining <code>parameters</code> by using <code>np.meshgrid</code>, <code>np.ravel</code> and <code>zip</code> doesn't look good. <code>np.meshgrid</code> will generate 2D arrays which is unnecessary. You can use <a href="https://docs.python.org/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> to get a Cartesian product of input parameters: <code>list(itertools.product(orders, scales))</code>.</li>
<li><p>Docs for <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html" rel="nofollow noreferrer"><code>np.arange</code></a> warn: </p>

<blockquote>
  <p>When using a non-integer step, such as 0.1, the results will often not
  be consistent. It is better to use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html#numpy.linspace" rel="nofollow noreferrer"><code>numpy.linspace</code></a> for these cases.</p>
</blockquote>

<p>So, instead you should have <code>my_x = np.linspace(0, 10, 101)</code>.</p></li>
<li>There is no need to have blank line after the for-loop first line.</li>
<li>We don't need to keep all the data in the <code>my_ys</code>. We can calculate it on the fly (see below).  </li>
</ul>

<p>That gives us:</p>

<pre><code>import itertools
from typing import Iterable, Iterator, Tuple


def get_my_ys(x: np.ndarray,
              parameters: Iterable[Tuple[float, float]]
              ) -&gt; Iterator[np.ndarray]:
    """Yields data for different parameters"""
    for order, scale in parameters:
        yield get_data(x, order=order, scale=scale)

...

orders = [2, 2.2, 2.3]
scales = [1, 2]
parameters = list(itertools.product(orders, scales))

my_x = np.linspace(0, 10, 101)
my_ys = get_my_ys(my_x, parameters)
</code></pre>

<p>Probably, you would want to extend it later for a variable number of parameters.</p>

<hr>

<p><strong>Generating the graph:</strong>  </p>

<ul>
<li>First of all, why is <code>my_colors</code> a dict (<code>my_colors = {0:'r', 1:'b', 2:'g'}</code>)? When seeing a dict which keys are 0, 1, 2, ... it makes me think that it probably should be a list instead.  </li>
<li><p>In <code>fig, ax_rows = plt.subplots(3, ncols=2)</code> it looks inconsistent that you specify keyword <code>ncols</code> but not <code>nrows</code>. <code>3</code> and <code>2</code> are, in fact, lengths of parameters <code>orders</code> and <code>scales</code>, you should tie them together. And, according to <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplots.html" rel="nofollow noreferrer">docs</a> you could also specify <code>sharex</code> and <code>sharey</code> as <code>True</code>/<code>'all'</code>. So, you wouldn't have to write:  </p>

<blockquote>
<pre><code>for i, ax_row in enumerate(ax_rows):
    ...
    for ax in ax_row:
        ax.set_ylim(0, 500)
        ax.set_xlim(0, 10)
</code></pre>
</blockquote>

<p>for each subplot.</p></li>
<li><blockquote>
<pre><code># plot the graphs
ax_row[0].plot(my_x, my_ys[i*2], lw=2, color=my_colors[i])
ax_row[1].plot(my_x, my_ys[i*2+1], lw=2, color=my_colors[i])
</code></pre>
</blockquote>

<p>Several issues here. First of all, if you change the number of parameters in <code>scale</code> and <code>order</code>, this won't work as intended. Next, there is a code duplication on these two lines. And this indexing of <code>my_ys</code> just doesn't feel right. Ideally, this should look like:</p>

<pre><code>for ax, y, color in zip(fig.axes, my_ys, colors):
    ax.plot(x, y, lw=linewidth, color=color)
</code></pre>

<p>Note the <a href="https://matplotlib.org/api/_as_gen/matplotlib.figure.Figure.html#matplotlib.figure.Figure.axes" rel="nofollow noreferrer"><code>fig.axes</code></a>. This will give you a list of all axes in the figure.</p></li>
<li><p>Again, this <code>plt.setp(ax_row[1].get_yticklabels(), visible=False)</code> will remove labels only in the second column. But what if you have more parameters and therefore more columns? Actually, we don't need these lines if you are going to use <code>sharex</code> and <code>sharey</code> when creating the figure. It will take care of them automatically.</p></li>
<li><p>Instead of checking the indices of the subplots to add labels for x-axis, I suggest simply iterate over the last row of <code>ax_rows</code> returned from <code>plt.subplots</code>:</p>

<pre><code>for ax in ax_rows[-1]:
    ax.set_xlabel(xlabel)
</code></pre>

<p>Though, we should be careful with the returned type of <code>ax_rows</code>, because, as <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplots.html" rel="nofollow noreferrer">docs</a> say, it</p>

<blockquote>
  <p>can be either a single Axes object or an array of Axes objects</p>
</blockquote>

<p>In order to get all the time an array, we should specify <code>squeeze=False</code> in the <code>plt.subplots</code> call.</p></li>
<li><blockquote>
<pre><code>ax_row[0].text(0.03, 0.95,'Scale: {0:.2f}\nOrder: 
              {1:.2f}'.format(parameters[i*2][1],
              parameters[i*2][0]), 
              transform=ax_row[0].transAxes, 
              verticalalignment='top')
ax_row[1].text(0.03, 0.95,'Scale: {0:.2f}\nOrder: 
              {1:.2f}'.format(parameters[i*2+1][1], 
              parameters[i*2+1][0]), 
              transform=ax_row[1].transAxes, 
              verticalalignment='top')
</code></pre>
</blockquote>

<p>Same problems here: code duplication, clumsy indexing, and it won't work if you add more input parameters in <code>orders</code> or <code>scales</code>. Here is how I suggest to generate labels:</p>

<pre><code>label_template = 'Scale: {1:.2f}\nOrder: {0:.2f}'
labels = itertools.starmap(label_template.format, parameters)
</code></pre>

<p>Here I use <a href="https://docs.python.org/library/itertools.html#itertools.starmap" rel="nofollow noreferrer"><code>itertools.starmap</code></a> to supply tuples of parameters to the <code>str.format</code> method of the <code>label_template</code>.  </p>

<p>In the end, plotting would look like something like this: </p>

<pre><code>for ax, y, label, color in zip(fig.axes, my_ys, labels, colors):
    ax.plot(x, y, lw=linewidth, color=color)
    ax.text(s=label,
            transform=ax.transAxes,
            **text_properties)
</code></pre>

<p>where <code>text_properties</code> is a dict that would keep all the properties like positions, alignment, etc.</p></li>
</ul>

<hr>

<p><strong>Revised code:</strong>  </p>

<pre><code>import itertools
from functools import partial
from typing import (Any,
                    Dict,
                    Iterable,
                    Iterator,
                    List,
                    Tuple)

import matplotlib.pyplot as plt
import numpy as np

TEXT_PROPERTIES = dict(x=0.03,
                       y=0.95,
                       verticalalignment='top')


def main():
    my_colors = ['r', 'b', 'g']
    orders = [2, 2.2, 2.3]
    scales = [1, 2]

    parameters = list(itertools.product(orders, scales))

    my_x = np.linspace(0, 10, 101)
    my_ys = get_my_ys(my_x, parameters)

    label_template = 'Scale: {1:.2f}\nOrder: {0:.2f}'
    labels = itertools.starmap(label_template.format, parameters)
    colors = replicate_items(my_colors, times=len(scales))

    plot(x=my_x,
         ys=my_ys,
         nrows=len(orders),
         ncols=len(scales),
         labels=labels,
         colors=colors,
         xlim=[0, 10],
         ylim=[0, 500],
         xlabel='x (unit)',
         ylabel='y (unit)')
    plt.show()


def get_my_ys(x: np.ndarray,
              parameters: Iterable[Tuple[float, float]]
              ) -&gt; Iterator[np.ndarray]:
    """Yields data for different parameters"""
    for order, scale in parameters:
        yield get_data(x, order=order, scale=scale)


def get_data(x: np.ndarray,
             order: float,
             scale: float) -&gt; np.ndarray:
    """Generates data for this example."""
    return scale * x ** order


def replicate_items(seq: Iterable[Any],
                    times: int) -&gt; Iterable[Any]:
    """replicate_items('ABC', 2) --&gt; A A B B C C"""
    repeat = partial(itertools.repeat, times=times)
    repetitions = map(repeat, seq)
    yield from itertools.chain.from_iterable(repetitions)


def plot(x: np.ndarray,
         ys: Iterable[np.ndarray],
         nrows: int,
         ncols: int,
         labels: Iterable[str],
         colors: Iterable[str],
         xlim: List[float],
         ylim: List[float],
         xlabel: str,
         ylabel: str,
         text_properties: Dict[str, Any] = None,
         linewidth: float = 2,
         fig_size: Tuple[float, float] = (5, 5)) -&gt; plt.Figure:
    """TODO: add docstring"""
    if text_properties is None:
        text_properties = TEXT_PROPERTIES
    fig, ax_rows = plt.subplots(nrows=nrows,
                                ncols=ncols,
                                sharex='all',
                                sharey='all',
                                squeeze=False)
    fig.set_size_inches(fig_size)
    plt.xlim(xlim)
    plt.ylim(ylim)

    for ax, y, label, color in zip(fig.axes, ys, labels, colors):
        ax.plot(x, y, lw=linewidth, color=color)
        ax.text(s=label,
                transform=ax.transAxes,
                **text_properties)
    for ax in ax_rows[:, 0]:
        ax.set_ylabel(ylabel)
    for ax in ax_rows[-1]:
        ax.set_xlabel(xlabel)

    return fig


if __name__ == '__main__':
    main()
</code></pre>

<p>I'm sure that there are other things that could be improved. But this should get you going. </p>
    </div>