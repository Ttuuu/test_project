<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The design would be cleaner with per-thread engines and free functions instead of <code>static</code> engines based on <code>&lt;Engine, Seeder&gt;</code>:</p>

<pre><code>namespace ae::random {
    using engine_type = std::mt19937_64;

    inline engine_type&amp; engine()
    {
        thread_local eng{/* seed */};
        return eng;
    }

    // ...
}
</code></pre>

<p>Consider giving uniform integer distributions and uniform real distributions different names, since they are essentially different: (expressed in concepts for brevity)</p>

<pre><code>template &lt;typename T&gt;
concept int_type = /* T is [unsigned](short|int|long|long long) */;
template &lt;typename T&gt;
concept real_type = /* T is float, double, long double */;

template &lt;int_type T&gt;
T rand_int(T min, T max)
{
    std::uniform_int_distribution dist{min, max};
    return dist(engine());
}
template &lt;real_type T&gt;
T rand_real(T min, T max)
{
    std::uniform_real_distribution dist{min, max};
    return dist(engine());
}
</code></pre>

<p>Consider constraining <code>choice</code>: (expressed in ranges for brevity)</p>

<pre><code>template &lt;std::random_足access_足iterator I, std::sized_sentinel_for&lt;I&gt; S&gt;
iter_reference_t&lt;I&gt; choice(I first, S last);
template &lt;std::random_足access_足range Rng&gt;
range_reference_t&lt;Rng&gt; choice(Rng&amp;&amp; rng);
</code></pre>

<p>Similar for other functions.</p>

<p>The <code>choices</code> function can be made more flexible by providing a function for writing numbers to an <code>(out, count)</code> pair, or a range whose size is automatically deduced, and making <code>choices</code> a wrapper around it.</p>

<p>Also avoid <code>std::endl</code> when <code>\n</code> suffices.  <code>std::endl</code> flushes the buffer, while <code>\n</code> does not.  Unnecessary flushing can cause performance degradation.  See <a href="https://stackoverflow.com/q/213907/9716597"><code>std::endl</code> vs <code>\n</code></a>.</p>
    </div>