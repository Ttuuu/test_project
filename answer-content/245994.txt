<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've several issues with state mutation, which is a major anti-pattern in react, poor variable declarations, and other sub-optimal coding style.</p>
<h3><code>constructor</code></h3>
<ol>
<li>The constructor is missing props (and passing them to <code>super</code>). It doesn't appear that currently any props are passed to <code>Todos</code>, but should this ever change it could cause issue later on down the road. Better to just assume <em>some</em> props can be passed.</li>
</ol>
<p>updates</p>
<pre><code>constructor(props) {
  super(props);
  this.state={
    todos: [],
  };
  ...
}
</code></pre>
<h3><code>addToDo</code></h3>
<pre><code>addTodo(){
  //press go -&gt; take input value
  let theValue = document.getElementById('input').value;

  //push array w value and id
  this.setState(s =&gt; s.todos.push({id:s.todos.length, value: theValue, completed:false}));

  return 1;
}
</code></pre>
<ol>
<li><code>theValue</code> never changes so it should be declared const.</li>
<li>Pushing into an array mutates the existing array <em><strong>and</strong></em> returns
the new length, so not only did this mutate existing state, it updated it to no longer be an array. Use a correct functional state update that shallowly copies previous state.</li>
<li><code>addToDo</code> is used as an <code>onClick</code> handler, so the return is meaningless.</li>
<li><code>document.getElementById</code> is generally also considered an anti-pattern. Using a ref is the more "react way" of getting the value</li>
</ol>
<p><em><strong>User Experience (UX):</strong> After finishing a code review I ran your code snippet and noticed the input doesn't clear after being added. Just a suggestion here, but maybe clear out the input field upon adding a todo item.</em></p>
<p>updates</p>
<pre><code>constructor() {
  super();
  ...

  this.inputRef = React.createRef(); // &lt;-- create input ref
  ...
}

addTodo(){
  // press go -&gt; take input value
  const { value } = this.inputRef.current;

  // shallow copy existing state and append new value
  this.setState(({ todos }) =&gt; ({
    todos: [...todos, { id: todos.length, value, completed: false }],
  }));

  // Suggestion to clear input
  this.inputRef.current.value = '';
}

...
&lt;input
  ref={this.inputRef} // &lt;-- attach inputRef to input
  id='input'
  className="todos__input"
  placeholder="type here"
  type="text"
/&gt;
...
</code></pre>
<h3><code>toggleCompleted</code></h3>
<pre><code>toggleCompleted(e){
  //toggle completed value in the state object
  let parentId = e.target.parentElement.id
  let completed = this.state.todos[parentId].completed
  if (completed){ 
    this.setState(s =&gt; s.todos[parentId].completed=false)
  } else {
    this.setState(s =&gt; s.todos[parentId].completed=true)
  }
}
</code></pre>
<ol>
<li>Variables <code>parentId</code> and <code>completed</code> don't change, so should also be declared const.</li>
<li>Similar issue with state mutation. You still need to shallowly copy the existing state and update the element by index/id.</li>
<li>The two logic branches of <code>if (completed)</code> are nearly identical, a more DRY approach would be to do the branching at the value, i.e. using a ternary, or even better, just simply toggle the boolean value, like the function's name suggests.</li>
<li>Get the id of the target element of the event object (<em>more on this later</em>)</li>
</ol>
<p>updates</p>
<pre><code>toggleCompleted(e){
  // toggle completed value in the state object
  const { id } = e.target;

  this.setState(({ todos }) =&gt; ({
    todos: todos.map(todo =&gt; todo.id === Number(id) ? { // &lt;-- id is string
      ...todo,
      completed: !todo.completed,
    } : todo),
  }));
}
</code></pre>
<h3><code>render</code></h3>
<ol>
<li>So long as <code>this.state.todos</code> is an array, the map function can correctly handle an empty array, no need really to test that it isn't equal to an empty array (<code>[]</code>), but if there is concern it is more common to conditionally render with a check on the length, i.e. <code>this.state.todos.length &amp;&amp; this.state.todos.map(...</code>.</li>
</ol>
<p>updates</p>
<pre><code>render() {
  return (
    &lt;div className="todos__area"&gt;
      &lt;div className="todos__events"&gt;
        &lt;input ref={this.inputRef} id='input' className="todos__input" placeholder="type here" type="text" /&gt;
        &lt;button onClick={this.addTodo} className="todos__button"&gt;Go&lt;/button&gt;
      &lt;/div&gt;
      &lt;ul className="todos__list"&gt;
        {this.state.todos.map(todo =&gt; (
          &lt;TodoItem
            key={todo.id}
            toggler={this.toggleCompleted}
            thisItem={todo}
          /&gt;
        ))}
      &lt;/ul&gt; 
    &lt;/div&gt;
  )
}
</code></pre>
<h3><code>TodoItem</code></h3>
<ol>
<li>The input checkbox should probably use the <code>onChange</code> handler versus an <code>onClick</code>, it's semantically more correct.</li>
<li>Attach the <code>id</code> to the input instead of the parent node.</li>
<li>Set the <code>checked</code> value of the input to the item completed status.</li>
<li>Wrap the input and span in a label so it can be clicked on to toggle the completed state.</li>
</ol>
<p>updates</p>
<pre><code>function TodoItem({ thisItem, toggler }){
  return (
    &lt;li&gt;
      &lt;label&gt;
        &lt;input
          id={thisItem.id}
          checked={thisItem.completed}
          className="checkbox"
          onChange={toggler}
          type='checkbox'
        /&gt;
        &lt;span
          style={{
            textDecoration: thisItem.completed ? "line-through" : "none"
          }}
        &gt;
          {thisItem.value}
        &lt;/span&gt;
      &lt;/label&gt;
    &lt;/li&gt;
  ) 
}
</code></pre>
<h1>Running Demo</h1>
<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="true">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function H1() {
  let hello = "Hi,";
  let h1 = &lt;h1&gt; {hello} &lt;/h1&gt;;
  return h1;
}

class Todos extends React.Component {
  constructor() {
    super();
    this.state = {
      todos: []
    };
    this.inputRef = React.createRef(); // &lt;-- create input ref
    //todos will be an array of objects
    this.addTodo = this.addTodo.bind(this);
    this.toggleCompleted = this.toggleCompleted.bind(this);
  }

  addTodo() {
    // press go -&gt; take input value
    const { value } = this.inputRef.current;

    // shallow copy existing state and append new value
    this.setState(({ todos }) =&gt; ({
      todos: [
        ...todos,
        {
          id: todos.length,
          value,
          completed: false
        }
      ]
    }));

    // Suggestion to clear input
    this.inputRef.current.value = "";
  }

  toggleCompleted(e) {
    // toggle completed value in the state object
    const { id } = e.target;

    this.setState(({ todos }) =&gt; ({
      todos: todos.map(todo =&gt;
        todo.id === Number(id)
          ? {
              ...todo,
              completed: !todo.completed
            }
          : todo
      )
    }));
  }

  render() {
    return (
      &lt;div className="todos__area"&gt;
        &lt;div className="todos__events"&gt;
          &lt;input
            ref={this.inputRef}
            id="input"
            className="todos__input"
            placeholder="type here"
            type="text"
          /&gt;
          &lt;button onClick={this.addTodo} className="todos__button"&gt;
            {" "}
            Go{" "}
          &lt;/button&gt;{" "}
        &lt;/div&gt;{" "}
        &lt;ul className="todos__list"&gt;
          {" "}
          {this.state.todos.map(todo =&gt; (
            &lt;TodoItem
              key={todo.id}
              toggler={this.toggleCompleted}
              thisItem={todo}
            /&gt;
          ))}{" "}
        &lt;/ul&gt;{" "}
      &lt;/div&gt;
    );
  }
}

function TodoItem({ thisItem, toggler }) {
  return (
    &lt;li&gt;
      &lt;label&gt;
        &lt;input
          id={thisItem.id}
          checked={thisItem.completed}
          className="checkbox"
          onChange={toggler}
          type="checkbox"
        /&gt;
        &lt;span
          style={{
            textDecoration: thisItem.completed ? "line-through" : "none"
          }}
        &gt;
          {thisItem.value}{" "}
        &lt;/span&gt;{" "}
      &lt;/label&gt;{" "}
    &lt;/li&gt;
  );
}

function Footer() {
  return (
    &lt;footer&gt;
      &lt;ul className="footer__ul pointer"&gt;
        &lt;li&gt; Github &lt;/li&gt; &lt;li&gt; Reddit &lt;/li&gt; &lt;li&gt; FCC &lt;/li&gt;{" "}
      &lt;/ul&gt;{" "}
    &lt;/footer&gt;
  );
}

function App() {
  //render components
  return (
    &lt;main&gt;
      &lt;H1 /&gt;
      &lt;Todos /&gt;
      &lt;Footer /&gt;
    &lt;/main&gt;
  );
}

ReactDOM.render( &lt; App / &gt; , document.getElementById('root'))</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

:root {
  --blue: #2c3251;
}

ul {
  list-style-type: none;
}

ul&gt;li {
  display: block;
  padding: 0.5rem;
}

.pointer&gt;li:hover {
  cursor: pointer;
}

body {
  font-family: "Ubuntu", sans-serif;
  text-align: left;
  background-color: white;
  background-image: radial-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.6)), url("./table.png");
  background-repeat: repeat;
  padding: 2rem 2rem 0.1rem;
}

main {
  display: grid;
  min-height: auto;
  height: 100vh;
  width: 100%;
}

h1 {
  font-size: 1.8rem;
  color: var(--blue);
  box-shadow: inset 0px 2px 5px var(--blue);
  align-self: start;
  padding: 1.5rem;
  border-radius: 15px 15px 0 0;
  margin-bottom: 0.5rem;
}

.todos__area {
  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.7), 1px 1px 5px rgba(0, 0, 0, 0.3);
  display: flex;
  flex-direction: column;
  max-height: 300px;
}

.todos__events {
  display: flex;
  flex-direction: row;
  flex: 0 1 40px;
}

.todos__events .todos__input {
  border: none;
  padding: 0.5rem;
  border-radius: 2px 0 0 2px;
  flex: 2 1 150px;
}

.todos__events .todos__button {
  border: none;
  padding: 10px;
  flex: 1 1 60px;
  color: white;
  font-weight: bold;
  cursor: pointer;
  max-width: 100px;
  position: relative;
  background-color: rgba(0, 0, 0, 0);
}

.todos__events .todos__button:after {
  z-index: -1;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: #2d7b57;
  opacity: 0.5;
  transition: opacity 0.3s ease-out;
  content: "";
}

.todos__events .todos__button:hover:after {
  opacity: 0.7;
}


/* Inline #1 | http://localhost:3000/ */

.todos__list {
  font-family: "Dancing Script", "cursive";
  font-size: 1.2rem;
  padding: 2rem;
  background-color: rgba(227, 227, 134, 0.58);
  flex: 1 1 200px;
  overflow: auto;
}

.todos__list input[type=checkbox] {
  margin-right: 0.6rem;
}

footer {
  background-color: rgba(0, 0, 0, 0.1);
  align-self: end;
  margin-top: 0.5rem;
}

.footer__ul {
  display: flex;
  justify-content: center;
  color: var(--blue);
  font-weight: bold;
}

.footer__ul&gt;li {
  padding: 1rem;
  box-shadow: 1px 0px 1px var(--blue);
  transition: transform 0.1s ease-out;
}

.footer__ul&gt;li:hover {
  transform: scaleX(1.05);
}

@media screen and (min-width: 700px) {
  body {
    max-width: 700px;
    margin: auto;
  }
}


/*# sourceMappingURL=index.css.map */</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/16.8.3/umd/react.production.min.js"&gt;&lt;/script&gt;
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.8.3/umd/react-dom.production.min.js"&gt;&lt;/script&gt;
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;link href="https://fonts.googleapis.com/css2?family=Dancing+Script&amp;family=Ubuntu&amp;display=swap" rel="stylesheet"&gt;

&lt;head&gt;
  &lt;meta charset="utf-8" /&gt;
  &lt;title&gt;React App: todoist&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div id="root"&gt;&lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>
</div>
</div>

    </div>