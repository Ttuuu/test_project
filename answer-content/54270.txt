<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>To simplify your normalization code...</p>

<p>First, calculate the intervals for each pair on the unnormalized data. For example, the length of the interval between <code>[0, 360]</code> is calculated via <code>360 - 0</code>.</p>

<p>Second, calculate the normalized start position by using modulus. In C, calculate <code>n mod M</code> with <code>((n % M) + M) % M</code>. (See discussion at <a href="https://stackoverflow.com/questions/1907565/c-python-different-behaviour-of-the-modulo-operation">SO</a>). This could be a function.</p>

<p>Now, you have your data represented as <code>(start1, interval1)</code> and <code>(start2, interval2)</code>. I think that's a better representation for what you want to do.</p>

<p>If you disagree, calculate <code>endN</code> via <code>startN + intervalN</code> to get <code>(start1, end1)</code> and <code>(start2, end2)</code>.</p>

<p>Edit: Added info from comments.</p>
    </div>