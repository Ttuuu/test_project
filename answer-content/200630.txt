<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Because this is an attempt to answer an interview question, let's assume a hypothetical interviewer then asked you,</p>
<blockquote>
<p>what would happen if I called your function using the following code:</p>
<pre><code>...
char mylongstr[] = "This is my long string with lots of character.";
inPlaceReverseString(mylongstr, 7); // should reverse "This is"
cout &lt;&lt; '"' &lt;&lt; mylongstr &lt;&lt; '"';
cout &lt;&lt; " has " &lt;&lt; strlen(mylongstr) &lt;&lt; " characters\n";
...
</code></pre>
</blockquote>
<p>It would print,</p>
<pre><code>"i sihT" has 6 characters
</code></pre>
<p>That doesn't seem to make sense. Not only that, your function potentially clobbered the rest of my string, by writing <code>\0</code> over the <code>s</code> in the word <code>is</code>.</p>
<p><strong>Don't break expectations/convention with strings</strong></p>
<p><a href="https://codereview.stackexchange.com/users/124907/koblas">@koblas</a> mentioned to use the standard library function <code>strlen()</code>.</p>
<p><code>strlen()</code> returns the number of characters, <strong>not including the terminating <code>\0</code> character</strong>, in the string passed to it. C and C++ string handling functions that take a <em>count</em> parameter generally expect that <em>count</em> refers to the number of characters to work on.</p>
<p>But the <code>size</code> parameter to <code>inPlaceReverseString()</code> breaks that expectation. I think you're overthinking the C-style string's terminating <code>\0</code> character.</p>
<p><strong>For interview questions (as well as coding in general), start with the simplest thing that can work and meets the specifications</strong></p>
<p>Note that the interview question you quoted said, "write code to reverse a C-Style String", not "write code to reverse a specified number of characters in a C-Style String". For an interview-type question like this, rather than pass the length of the string as a parameter, just discover the length of the string within your function:</p>
<pre><code>void inPlaceReverseString(char str[])
{  
    for (int i = 0, int j = strlen(str) - 1; i &lt; j; ++i, --j) {
        std::swap(str[i], str[j]);
    }
}
</code></pre>
<p>Note also that I slightly changed the loop-terminating logic, by checking <code>i &lt; j</code>. This makes the logic a bit easier to read, making it obvious that when the indexes <code>i</code> and <code>j</code> pass each other, there's no more replacement to be done.</p>
<hr>
<p>Now, if you still want to have a length parameter (or are asked to extend the simple answer I wrote above), a couple suggestions:</p>
<ol>
<li><p>Use a parameter name such as <code>num</code>, <code>len</code>, or even <code>n</code>, as opposed to <code>size</code>. This is <em>really</em> pedantic on my part, but <code>size</code> tends to suggest memory sizes, as opposed to length of strings or number of characters.</p>
</li>
<li><p>Use <code>size_t</code> as the type of the length parameter. This is an unsigned type, and conforms with the rest of C-style string functions that have a length/number parameter.</p>
</li>
<li><p>Don't write a terminating <code>\0</code> after the in place reversal.</p>
</li>
<li><p>Even if a length is specified, you should still check for a terminating <code>\0</code> character within the string.</p>
</li>
</ol>
<p>So, a possible implementation of the answer would look something like:</p>
<pre><code>void inPlaceReverseString(char str[], size_t num)
{
    int len = strlen(str);
    if (len &lt; num) {
        // length of 'str' is less than 'num'. How to handle? ...
    }
    for (int i = 0, int j = strlen(str) - 1; i &lt; j; ++i, --j) {
        std::swap(str[i], str[j]);
    }
}
</code></pre>
<p>Now, the original hypothetical question asked by the hypothetical interviewer at the start of this answer would work:</p>
<pre><code>...
char mylongstr[] = "This is my long string with lots of character.";
inPlaceReverseString(mylongstr, 7); // should reverse "This is"
cout &lt;&lt; '"' &lt;&lt; mylongstr &lt;&lt; '"';
cout &lt;&lt; " has " &lt;&lt; strlen(mylongstr) &lt;&lt; " characters\n";
...
</code></pre>
<p>would print:</p>
<pre><code>"si sihT my long string with lots of character." has 47 characters
</code></pre>
    </div>