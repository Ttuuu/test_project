<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Poor memory usage</h2>
<p>Javascript has managed memory. That means it does all the hard work of allocating and releasing memory, which is great (managing memory manually is a real pain).</p>
<p>But this useful feature comes with a down sides...</p>
<ul>
<li>Managed memory environments are inherently slow,</li>
<li>Managed memory environments encourage very poor memory usage patterns</li>
</ul>
<h2>Looking at your memory and CPU usage.</h2>
<p>In your code you create a total of 9 arrays, keeping only 3 of them. (using the data example you provided)</p>
<p>Each time you add an item to a group you create a new array, that must be iterated over when you copy the existing group. <code>groupedItems[type] = [...(groupedItems[type] || []), item]</code></p>
<p>There are only 6 type values yet you iterate over them 12 times. Once each with <code>item.types.map(type =&gt; type.value);</code> and then again with <code>for (const type of getTypes(item))</code></p>
<p>For the 6 items you add to the 3 groups your code needed 16 iterations.</p>
<h2>Less overhead</h2>
<p>The example avoids copying the item.types array for each item and assigns a new array to new groups. If a group has been defined the item added is pushed rather than copy the whole array.</p>
<p>The resulting code only needs 6 iterations executing in half the time and using several times less memory</p>
<pre><code>function groupTypes(items) {
    const groups = {};
    for (const item of items) {
        for (const {value: type} of item.types) {
            groups[type] ? groups[type].push(item) : groups[type] = [item];
        }
    }
    return groups;
}
</code></pre>
<p>Or slightly quicker by avoiding the copy of the <code>type.value</code> string to to the variable <code>type</code></p>
<pre><code>function groupTypes(items) {
    const grps = {};
    for (const item of items) {
        for (const type of item.types) {
            grps[type.value] ? grps[type.value].push(item) : grps[type.value] = [item];
        }
    }
    return grps ;
}
</code></pre>
    </div>