<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Because you use the returned value of <code>IndexOf()</code> only to check if it is <code>&gt; -1</code> a more readable way would be to use <code>Contains()</code> instead of <code>IndexOf()</code>.   </p>

<p>Internally <code>Contains()</code> does mostly the same than your comparison of the returned value. In the reference source of <a href="https://referencesource.microsoft.com/mscorlib/R/428c5c9954dea844.html" rel="nofollow noreferrer"><code>Contains()</code></a> you will find  </p>

<pre><code>[Pure]
public bool Contains( string value ) {
    return ( IndexOf(value, StringComparison.Ordinal) &gt;=0 );
}  
</code></pre>

<p>while the counterpart of <a href="https://referencesource.microsoft.com/mscorlib/R/428c5c9954dea844.html" rel="nofollow noreferrer"><code>IndexOf()</code></a> will look like so  </p>

<pre><code>[Pure]
public int IndexOf(String value) {
    return IndexOf(value, StringComparison.CurrentCulture);
}  
</code></pre>

<p>The difference between these two methods by the meaning of the internally called <code>IndexOf()</code> method is the passed <a href="https://docs.microsoft.com/en-us/dotnet/api/system.stringcomparison?view=netframework-4.8" rel="nofollow noreferrer"><code>StringComparison</code></a> parameter.  </p>

<p>By reading the documentation you will read in the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.stringcomparison?view=netframework-4.8#remarks" rel="nofollow noreferrer">remarks</a> section  </p>

<blockquote>
  <p>When you call a string comparison method such as String.Compare,
  String.Equals, or String.IndexOf, you should always call an overload
  that includes a parameter of type StringComparison so that you can
  specify the type of comparison that the method performs. For more
  information, see Best Practices for Using Strings.  </p>
</blockquote>

<p>Let us check what that means by using the german word <code>daß</code> and compare the results from <code>StringComparison.CurrentCulture</code>, <code>StringComparison.InvariantCulture</code> and <code>StringComparison.Ordinal</code>  </p>

<pre><code>Console.WriteLine("daß".IndexOf("daß", StringComparison.Ordinal));
Console.WriteLine("daß".IndexOf("dass", StringComparison.Ordinal));
Console.WriteLine("daß".IndexOf("dass", StringComparison.CurrentCulture));
Console.WriteLine("daß".IndexOf("dass", StringComparison.InvariantCulture));
</code></pre>

<p>this will yield the results  </p>

<blockquote>
  <p>0<br>
  -1<br>
  0<br>
  0  </p>
</blockquote>

<p>As you see you need to know what you want to get returned by calling <code>IndexOf()</code>. If you need to know if the <strong>exact string</strong> is contained inside another string you shouldn't use the default <code>IndexOf()</code> method. </p>
    </div>