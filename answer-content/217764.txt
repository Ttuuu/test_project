<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Reading your code is difficult because you have put all the features into a single class, the <code>Protocol</code>. It's better to split this class into several, each with its own responsibility.</p>

<p>Programming sockets using the C/POSIX API is something really ugly. You should hide away all these details in a class called <code>Socket</code> (and maybe a second class called <code>ServerSocket</code>). Then you can write:</p>

<pre><code>Socket conn(host, port);
conn.psend("hello", 5);
if (!conn)
    std::cerr &lt;&lt; "sending failed: " &lt;&lt; conn.last_error() &lt;&lt; "\n";
</code></pre>

<p>This is much nicer than dealing with raw sockets and <code>struct inaddr</code>.</p>

<p>On top of this <code>Socket</code> class you should build the <code>LowLevelProtocol</code> that knows how to encode an <code>int32_t</code> and in which order to send it over the wire:</p>

<pre><code>LowLevelProtocol llproto(conn);
llproto.write_int32(12345678);
llproto.write_uint32(12345678);
</code></pre>

<p>Using this low-level protocol, you can finally build your encoding of arrays. At this point, you don't have to think about big endian or little endian anymore, you just tell the low-level protocol to <em>send this, send that</em>.</p>

<p>The benefit of this separation is that at each of these abstraction levels, there are only a few topics of interest. It easy to test these levels individually by connecting them to mocked-away objects that you only create during the test. For example, the <code>LowLevelProtocol</code> can not only write to a socket, it can also write to a <code>std::ostringstream</code>, and this one can be tested very easily.</p>

<p>Another benefit is that the high-level protocol now contains the rules of how an array is encoded, and nothing else. This makes it easy to understand this small part of the program.</p>
    </div>