<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Out of your defaults, only the minimal height have some relevance. The others can be deduced from it or are fixed computations that can be baked into the logic of a function.</p>

<p>I will also strongly suggest to use <a href="https://docs.python.org/3/library/argparse.html" rel="noreferrer"><code>argparse</code></a> for command-line arguments manipulation instead of manually trying to perform the conversion and range-checking. It is a bit overkill for a single argument here, but as soon as you will add more it will become way more readable and maintainable.</p>

<hr>

<p>Your various branch construction logic is scattered all over the place and would benefit for a <a href="https://stackoverflow.com/questions/1756096/understanding-generators-in-python">generator</a> that construct each branch incrementally. The caller would then only take out the amount of branch needed and potentially cut out the last one in half before adding the trunk.</p>

<p>Going further, centering the tree inside the greeting card can be delegated to a string formatting function such as <a href="https://docs.python.org/3/library/stdtypes.html#str.center" rel="noreferrer"><code>str.center</code></a> or using the <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="noreferrer">alignment specification of the string templating mini-language</a>.</p>

<hr>

<p>Lastly do not put code at the top-level of your module, it makes it harder to test or reuse it. Use an <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do"><code>if __name__ == '__main__'</code></a> guard instead.</p>

<p>Proposed improvements:</p>

<pre><code>""" Seasons Greeting mail - ascii Christmas Tree """

import argparse
import shutil


MINIMAL_HEIGHT = 10


def command_line_parser():
    term_width, term_height = shutil.get_terminal_size()
    range_repr = f'[{MINIMAL_HEIGHT}-{term_height}]'

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
            '--height', '--tree-height', metavar=range_repr, type=int,
            choices=range(MINIMAL_HEIGHT, term_height+1), default=MINIMAL_HEIGHT,
            help=f'Height of the resulting tree including the trunk.')

    return parser


def branches():
    yield ')'
    branch_left = '(__'
    branch_right = '___)'
    while True:
        yield branch_left
        branch_left += '__'
        yield ' ' + branch_right  # Pad with space to get proper centering
        branch_right = '__' + branch_right


def tree(height):
    branches_iterator = branches()
    branch = next(branches_iterator)
    for _ in range(height - 3):  # Remove last (half) branch and trunk
        yield branch
        branch = next(branches_iterator)

    # Cut the branch in half
    width = len(branch)
    half_width = width // 2

    if branch.startswith('('):
        yield branch[:half_width] + ' ' * (width - half_width)
        yield ')'
        yield '(.'
    else:
        yield ' ' * (width - half_width) + branch[half_width + 1:]
        yield '('
        yield '.)'


def card(card_size):
    border = '_' * card_size
    yield f' {border} '
    yield enclose_in_borders('', card_size)
    for line in tree(card_size - 3):  # Remove header and footer lines
        yield enclose_in_borders(line, card_size)
    yield enclose_in_borders(border, card_size)


def enclose_in_borders(line, width):
    return f'|{line:^{width}}|'


if __name__ == '__main__':
    args = command_line_parser().parse_args()
    print('\n'.join(card(args.height)))
</code></pre>
    </div>