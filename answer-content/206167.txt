<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have an actual error in your code:</p>

<pre><code>$ python test.py 
Traceback (most recent call last):
  File "test.py", line 2, in &lt;module&gt;
    ('Order Pizza', order_pizza),
NameError: name 'order_pizza' is not defined
</code></pre>

<p>You need to define <code>menu_entries</code> <em>after</em> creating the things it refers to.</p>

<p>Some notes:</p>

<ol>
<li>All Python code could benefit from being run through at least one <strong>linter</strong> such as flake8 or pycodestyle. Nothing springs out at me except possibly the indentation of <code>menu_entries</code>, but it's worth a check.</li>
<li>Generally, names don't need to repeat anything which is understood from context. So <code>def menu(menu_title, menu_entries):</code> could be easier written as <code>def menu(title, entries):</code></li>
<li>You always add one to <code>mpoint</code> - a cleaner solution would be to <code>mpoint = 1</code> and continue from there. If <code>mpoint</code> was used for indexing into an array that would be different, but it's really only for presentation.</li>
<li>When reading the code top to bottom I should be able to understand what a name means the first time I encounter it. <code>mpoint</code> should be renamed to what it is (maybe <code>menu_index</code>?).</li>
<li>For consistency (and to write more idiomatic code) the strings in <em>all</em> your <code>print</code> statements should be <code>format</code>ted.</li>
<li>This is a prime example for code which could be made object oriented - obvious classes include <code>Menu</code>, <code>MenuEntry</code> and <code>Order</code>.</li>
<li>Setting <code>task = None</code> and then checking if it's <code>None</code> to check whether you should <code>continue</code> is redundant - you can just <code>continue</code> immediately.</li>
<li><code>size</code> is unused in <code>order_pizza</code>, so it should be removed.</li>
</ol>
    </div>