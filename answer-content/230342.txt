<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Looks like a pretty good start. Your Deck and Card classes are basically fine, aside from perhaps a few docstrings. I should be telling you to really add them, and it's definitely better practice, but on the other hand they're clear and readable enough that you can do without them.</p>

<p>Only minor details is those you could keep rename <code>shuffle</code> to <code>_shuffle</code> and call it everytime in <code>__init__</code> and <code>restart</code>, but that's just different code, not neccesarily better. It's advantage would be that you can't forget to call it. </p>

<h2>Hand</h2>

<h3>Hand.check_aces()</h3>

<p>Why is there a <code>check_aces()</code> method? You use it only once. In fact, I daresay you could make the check a simple one-liner with a <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="noreferrer">generator expression</a>:</p>

<pre class="lang-py prettyprint-override"><code>    def check_aces(self):
        return sum(card.figure == "A" for card in self.cards) 
</code></pre>

<p>This checks all the cards in <code>self.cards</code>, and returns a boolean <code>True</code> for each ace. Since the boolean True has an integer value of 1, you can sum them to count the aces.</p>

<p>You could easily inline it like that one-liner, but we'll leave it as a function for now, for the sake of clarity.</p>

<p>Do please note that I return the value instead of just calculating and storing it. Bear with me for a moment, you'll see why.</p>

<h3>Hand.check_value()</h3>

<p>Your docstring is wrong, you do return a value. And that's generally a good thing. However, given that you never use it, it might be all-right in this case. For the chase of perfection, however, you could make this a cached calculation instead, which is slightly easier to use then what you do now, but without calculating it more than required. This would look something like this:</p>

<pre class="lang-py prettyprint-override"><code>    def __init__(self):
        self._value = 0  # Note the rename
        self.cards = []

    @property
    def value(self):
        if not self._value:  # Same as "is zero"
            aces = check_aces()  
            # This is the only place we actually use the number of aces. That makes it better to 
            # just return it instead of using two lines - one to calculate and one to retrieve.
            value = sum(card.value for card in self.cards)
            # Generator expression in a sum again. Most simple loops can be replaced this way.
            if aces &gt; 1:
                value -= (aces - 1) * 10
            self._value = value
        return self._value
</code></pre>

<p>If you aren't familiar with <code>@property</code>, here are <a href="https://docs.python.org/3/howto/descriptor.html" rel="noreferrer">the docs</a></p>

<p>This will first check if the saved value is zero. If so, it will calculate the value, then return it. And this is all done the moment someone else types <code>hand.value()</code>. But if it is not zero, then it recalculates it.</p>

<p>Do note that I removed the <code>isBroken</code> variable. You never used it.</p>

<p>Normally in cache tracking you'd have a different variable as a flag to see if you need to refresh your cache, instead of a magic value that we use here. Or they use timestamps. However, this is small enough in scope that I think a magic variable isn't harmful. Do note, however, that you need to signal this recalculation every time the hand value changes, therefore:</p>

<pre class="lang-py prettyprint-override"><code>def add_card(self, card):
    self.cards.append(card)
    self._value = 0

def restart(self):
    self.cards = []
    self._value = 0
</code></pre>

<h3>Hand.dealer_ai()</h3>

<pre class="lang-py prettyprint-override"><code>    def dealer_ai(self,d):
        while self.value &lt; 17:
            self.add_card(d.draw())
        print(f'Dealer cards: {self.cards} ')
</code></pre>

<p>Due to the check_value refactoring we did by shoving it into a property, note that we can just remove 2 different calls to that function here, making it that much easier to read. However, this function really does two things - it acts on it's state, which is very appropriate to the function name, and it prints it. That's a lot less appropriate. You should also return this value, or just leave it and reach into the class and retrieve Hand.cards from outside when you want to use this.</p>

<h2>Bank</h2>

<h3>Back.check_money()</h3>

<p>Same as the check_value, really. Make it a property, like this:</p>

<pre class="lang-py prettyprint-override"><code>    @property
    def play(self):
        return self.money &lt; self.min_bet
</code></pre>

<p>I'd cache here to, but comparing two integers is so check that no caching will ever be an advantage. Do note that the "&lt;" comparison operator, along with all other operators you generally use in an <code>if (expression):</code> block, already return boolean values. Therefore you can return it directly. The only exceptions are the <code>or</code> and <code>and</code> operators, which will return the last evaluated value instead. (which has it's own uses I won't go into now.)</p>

<h3>Bank.bet()</h3>

<p>This really should be a method that takes an integer. It should not check input values. And it should certainly not recurse on invalid values. The print()s here also should really be handled by retrieval from outside. </p>

<p>You also forgot to check for your value being bigger than <code>min_bet</code>.</p>

<pre class="lang-py prettyprint-override"><code>    def bet(self, value):
        """ Bets money. Assumes there are valid bets possible. """
        if self.min_bet &lt;= value &lt;= self.money:
            self.pool = 2*bet
            self.money -= bet
            return True  # Tell the caller the Bank is ok with this bet.
        return False  # Tell the caller the bet is rejected.
</code></pre>

<p>If you want input validation, you can write a function for that:</p>

<pre class="lang-py prettyprint-override"><code>def get_integer(request_message):
    while True:
        try:
            return int(input(request_message))
        except ValueError:
            continue
</code></pre>

<p>And then use it like this:</p>

<pre class="lang-py prettyprint-override"><code>value = 0
while bank.play:  # Checks if there are valid bets
    value = get_integer("Tell me your bet (should be lower or equal then your money)")
    if bank.bet(value):
        break
    else:
        print(f"Sorry, {value} is not a valid bet. It has to be between {bank.min_bet} and {bank.money}.")
</code></pre>

<h3>Bank.player_[win/lose]</h3>

<p>Again, move the prints out. Looks good for the rest.</p>

<h3>main</h3>

<p>You can drop the entire <code>while True:</code> loop. You never <code>continue</code>, only break, and with that last if-statement, you always break the first iteration.</p>

<p>If you follow the <code>@property</code> recommendations above, you can of course drop all check_value() statements in the loop, so I won't explicitly point them out. Instead I'll silently drop them.</p>

<pre class="lang-py prettyprint-override"><code>            choice = input('\n\nWhats your choice? - "h" for hit / "s" for stand')
            while choice.lower() == 'h':
                player_hand.add_card(deck.draw())
                print(f'\n\nYour cards: {player_hand.cards} with {player_hand.value} value')
                if player_hand.value &gt;= 21:
                    break
                choice = input('\n\nWhats your choice? - "h" for hit / "s" for stand')
</code></pre>

<p>You're duplicating the <code>input()</code> function call here. Better do:</p>

<pre class="lang-py prettyprint-override"><code>            while 'h' == input('\n\nWhats your choice? - "h" for hit / "s" for stand').lower().strip():
                player_hand.add_card(deck.draw())
                print(f'\n\nYour cards: {player_hand.cards} with {player_hand.value} value')
                if player_hand.value &gt;= 21:
                    break
</code></pre>

<p>Which is shorter and more readable. Readability is also the reason I switched the "h" and the input call - you can see what happens even if you don't read the entire line.</p>

<h3>Victory Check</h3>

<p>I would just call the functions directly, instead of grabbing a manual variable.</p>

<pre class="lang-py prettyprint-override"><code>            if player_hand.value == 21:
                bank.player_win()
            elif player_hand.value &gt; 21:
                bank.player_lose()
</code></pre>

<p>And of course the same with the others. Note that the removal of the <code>while True:</code> loop also allows us to skip all those break statements, at the low cost of changing all <code>if</code>s that aren't the first to <code>elif</code>s instead. Alternatively, you can structure it like so:</p>

<pre class="lang-py prettyprint-override"><code>            dealer_hand.dealer_ai(deck)
            if player_hand.value == 21 or dealer_hand &gt; 21 or player_hand.value &gt; dealer_hand.value:
                bank.player_win()
            else:
                bank.player_lose()
</code></pre>

<p>(Note: It took me a while to write, and there are 2 new answers since I started... I haven't checked them, though.)</p>
    </div>