<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your program.</p>
<h2>Separate interface from implementation</h2>
<p>It makes the code somewhat longer for a code review, but it's often very useful to separate the interface from the implementation.  In C++, this is usually done by putting the interface into separate <code>.h</code> files and the corresponding implementation into <code>.cpp</code> files.  It helps users (or reviewers) of the code see and understand the interface and hides implementation details.  The other important reason is that you might have multiple source files including the <code>.h</code> file but only one instance of the corresponding <code>.cpp</code> file.  In other words, split your existing <code>.h</code> file into a <code>.h</code> file and a <code>.cpp</code> file.  The templated class, by contrast, can stay in a <code>.h</code> file.</p>
<h2>Make sure you have all required <code>#include</code>s</h2>
<p>The code uses <code>std::pair</code> but doesn't <code>#include &lt;utility&gt;</code>.  Also, carefully consider which <code>#include</code>s are part of the interface (and belong in the <code>.h</code> file) and which are part of the implementation per the above advice.</p>
<h2>Reconsider the interface</h2>
<p>It doesn't seem very useful to me to have the <code>PathMatcher</code> return an <code>int</code>.  What would be more useful, I think, would be for it to return a <code>Parameters</code> object.  That would also probably eliminate the need for <code>Parameters::clear()</code>.</p>
<h2>Use standard libraries more effectively</h2>
<p>The <code>Parameters</code> object currently iterates through its parameters to find a match.  I would suggest that instead of this existing line:</p>
<pre><code>std::vector&lt;std::pair&lt;string_t, string_t&gt;&gt; parameters_;
</code></pre>
<p>a more appropriate data structure would be this:</p>
<pre><code>std::unordered_map&lt;std::string, std::string&gt; parameters_;
</code></pre>
<p>That would make <code>find</code> very simple:</p>
<pre><code>std::string Parameters::find(std::string key, std::string notfound) const {
    auto result = parameters_.find(key);
    return result == parameters_.end() ? notfound : result-&gt;second;
}
</code></pre>
<p>Here again, the interface is strange.  I don't see much use in passing back a passed string if the key is not found.  I'd expect to have an exception thrown instead.  That renders the function even simpler:</p>
<pre><code>std::string Parameters::find(std::string key) const {
    return parameters_.at(key);
}
</code></pre>
<h2>Use <code>&lt;regex&gt;</code> to greatly simplify the code</h2>
<p>This code could be much simpler, even without altering the interface, by using <code>std::regex</code>.  Here's what the include file would look like:</p>
<h3>parameter.h</h3>
<pre><code>#ifndef PARAMETER_H
#define PARAMETER_H
#include &lt;regex&gt;
#include &lt;string&gt;
#include &lt;unordered_map&gt;
#include &lt;utility&gt;
#include &lt;vector&gt;


class Parameters {
public:
    std::string find(std::string name, std::string notfound = "") const;
    void clear();
    template &lt;class T&gt;
    friend class PathMatcher;
private:
    std::unordered_map&lt;std::string, std::string&gt; m;
};

struct Pattern {
    Pattern(std::string path);
    std::regex re;
    std::vector&lt;std::string&gt; names;
};

template &lt;class T&gt;
class PathMatcher {
public:
    PathMatcher(T init) : nomatch{init} {}
    void add_path(std::string pattern, T value) {
        patterns.emplace_back(pattern, value);
    }
    T match(std::string input, Parameters&amp; p) {
        T answer{nomatch};
        for (const auto&amp; patpair : patterns) {
            std::smatch m;
            if (std::regex_match(input, m, patpair.first.re)) {
                answer = patpair.second;
                for (unsigned i{1}; i &lt; m.size(); ++i) {
                    p.m[patpair.first.names[i-1]] = m[i].str();
                }
            }
        }
        return answer;
    }
private:
    T nomatch;
    std::vector&lt;std::pair&lt;Pattern, T&gt;&gt; patterns;
};

#endif // PARAMETER_H
</code></pre>
<p>This is the implementation file:</p>
<h3>parameter.cpp</h3>
<pre><code>#include "parameter.h"

std::string Parameters::find(std::string name, std::string notfound) const {
    auto result = m.find(name);
    return result == m.end() ? notfound : result-&gt;second;
}

void Parameters::clear() {
    m.clear();
}

Pattern::Pattern(std::string path) {
    static const std::regex vble{R"(\{[^\}]*\})"};
    auto start = std::sregex_iterator{path.begin(), path.end(), vble}; 
    auto finish = std::sregex_iterator{};
    for (auto it{start}; it != finish; ++it) {
        auto str = it-&gt;str();
        str.erase(0, 1);  // remove {
        str.pop_back(); // remove }
        names.push_back(str);
    }
    re = std::regex_replace(path, vble, "(.*)");
}
</code></pre>
<p>When I tested it, it's exactly as fast as the original version (both ran in 5ms on my machine).</p>
    </div>