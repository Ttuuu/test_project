<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This seems reasonable. The most important part is that you do not mutate the react state in-place. By doing <code>let currentUser = [...users];</code> you copy the state and instead mutate the copy, then assign it as the updated state.</p>

<p>An alternative would be to use <code>.map</code> and <code>.filter</code> to make your changes. I see this pattern more often than the state copy approach.</p>

<p>Example:</p>

<pre><code>ws.on("feed", response =&gt; {
  const { new_val: next, type } = response; // Use destructuring and inline renaming.

  setUsers(users =&gt; {
    switch (type) {
      case "add":
        return [...users, next];

      case "change":
        return users.map(u =&gt; {
          // Only change the user specified in the message
          if (u.id === next.id) return {...u, name: next.name } 
          return u;
          // or return users.map(u =&gt; u.id !== next.id ? u : ({...u, name: next.name})) if you prefer one-liners
        })

      case "remove":
        return users.filter(u =&gt; u.id !== next.id);

      default:
        return users;
    }
  });
});
</code></pre>
    </div>