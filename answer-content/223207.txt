<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>As dfhwze and Roland already pointed out, a hash alone is not sufficient to determine whether two things are equal, so you still need to do a string comparison afterwards if the hashes match. Otherwise you will get wrong results from time to time. Not to mention the effect of hash randomization between different application runs...</p>

<p>The idea behind Rabin-Karp's use of hashes is to replace costly string comparisons with cheap hash comparisons. But in your case, the cost of creating a substring and calculating its hash (which involves some calculations for every character) is often greater than doing a direct string comparison (which can bail out at the first difference).</p>

<p>As the Wikipedia article that you linked to says, you'll want to use a rolling hash, a hashing algorithm that allows you to calculate the hash of the next substring with just a few operations, regardless of how long that substring is.</p>

<hr>

<p>Also, as far as I can tell, storing <code>string.Length</code> in a local variable doesn't offer any performance improvements. It does make the code slightly less readable though, in my opinion.</p>
    </div>