<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Code style</h2>
<p>Your code style is certainly acceptable - everyone is entitled to their own coding habits.
To further improve readability, and readability is key, I would change the following:</p>
<ul>
<li>put all labels in the same separate column. You didn't do this for <em>is_even</em>, <em>fmt</em>, <em>target</em>, <em>list</em>, and <em>len</em>.</li>
<li>don't just have 1 space character between the instruction/directive and its operand(s). Start all operands in their own column.</li>
<li>beware of redundant comments like 'mov r12, list  ; load list into register'</li>
<li>don't add redundant tags like <code>dword</code> in <code>mov r14d, dword [r12]</code>. The register name <code>r14d</code> already states this is a dword.</li>
<li>avoid using ambiguous terminology. I found it odd to read about <em>sectors</em> and <em>widths</em>. In case of binary searching, many people will prefer to talk about <em>array partitions</em> and <em>number of elements</em>.</li>
</ul>
<h2>The code has multiple issues</h2>
<p>You seem to be confident that a match will always be found. No provision is made for a failure!</p>
<p>The comment on <code>mov rdx, r12  ; rdx is pointer to the target</code> is wrong. What you've got is a pointer to the matching array element.</p>
<p>The array <em>list</em> holds dword-sized elements. In <code>mov r13, len &gt;&gt; 3</code>, you only need to shift twice to get the <em>number of elements</em>.</p>
<p>In the top part of the program you first add an imaginary element to the array, then you make <code>r12</code> point to behind it, and later your code also happily reads from these non-existing elements. Analyzing beyond this point becomes futile.</p>
<p>I think having recognized an attempt to write a <em>uniform binary search</em>. Although I didn't use that particular approach, you might find it interesting to read <a href="https://codereview.stackexchange.com/questions/105165/variations-on-binary-searching-an-ordered-list">a post of mine that shows 2 ways to binary search an array</a>. I know it was written for 16-bit, but that should not stop you from stealing from it...</p>
    </div>