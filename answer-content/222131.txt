<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Please use <a href="https://en.wikipedia.org/wiki/Key_derivation_function" rel="nofollow noreferrer">best practices</a> in general when dealing with password hashing.</p>

<ul>
<li>If you have to verify the database for your generated <em>salt</em> to be unique, <strong>you're using a bad <em>salt generator</em></strong>. Make sure to focus on using a <a href="https://codereview.stackexchange.com/questions/93614/salt-generation-in-c">good generator</a> instead.</li>
<li>Your hash function also seems weak. Consider using <a href="https://en.wikipedia.org/wiki/Key_stretching" rel="nofollow noreferrer">key stretching</a>.</li>
</ul>

<hr>

<p>This should not be required:</p>

<blockquote>
<pre><code>while(isFound){
   isFound=false;
   String randomSalt=createRandomString(); //creates salt/random string
   ResultSet rs = stmt.executeQuery("SELECT * FROM mvUser where salt="+randomString);
   //check if salt is unique
   while (rs.next()) {
     isFound=true;
   }
}
</code></pre>
</blockquote>

<p>And for hash, I would expect something like below, where <code>hash</code> is an established hash library (PBKDF2, bcrypt, scrypt, ..).</p>

<pre><code>var hashedPW = hash(iterations, randomSalt, pw);
</code></pre>
    </div>