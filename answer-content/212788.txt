<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>TL;DR  Reworked code : (I used a snippet so I could hide it)</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>class MobileNavigation extends React.Component {
    state = {
        currentOpenChildId: null
    };

    handleCurrentlyOpen = currentOpenChildId =&gt; {
        this.setState({ currentOpenChildId });
    };

    render() {
        const { classes, data: { navigation }, styles } = this.props;

        return (
            &lt;List disablePadding className={classnames([styles, classes.root])}&gt;
                {navigation.map(item =&gt; (
                    &lt;MobileNavigationMenuItem
                        key={item.id}
                        node={item}
                        passToParent={this.handleCurrentlyOpen}
                        currentlyOpen={this.state.currentOpenChildId}&gt;
                        {item.children}
                    &lt;/MobileNavigationMenuItem&gt;
                ))}
            &lt;/List&gt;
        );
    }
}

class MobileNavigationMenuItem extends React.Component {
    state = {
        open: false,
        id: this.props.node.id,
        currentOpenChildId: null
    };

    handleClick = () =&gt; {
        const { currentlyOpen, node, passToParent }
        if (currentlyOpen == node.id) {
            this.setState(state =&gt; ({ open: !state.open }));
        } else {
            this.setState({ open: true }, passToParent(node.id));
        }
    };

    handleCurrentlyOpen = currentOpenChildId =&gt; {
        this.setState({ currentOpenChildId });
    };

    getNestedBackgroundColor = depth =&gt; (
        {
            1: 'rgba(255, 255, 255, 0.1)',
            2: 'rgba(255, 255, 255, 0.15)'
        }[depth] || 'rgba(255, 255, 255, 0.05)'
    )

    getNestedPadding = depth =&gt; (
        {
            1: 15,
            2: 30
        }[depth] || 0
    )

    render() {
        const { classes, currentlyOpen, node, children } = this.props;
        const { currentOpenChildId, open } = this.state
        
        return (
            &lt;React.Fragment&gt;
                &lt;ListItem
                    onClick={this.handleClick}
                    className={classes.item}
                    style={this.getNestedBackgroundColor(node.depth)}&gt;
                    &lt;div className={classes.wrapper}&gt;
                        &lt;a
                            href=""
                            style={this.getNestedPadding(node.depth)}
                            className={classnames([classes.link, !childnodes.length &amp;&amp; classes.goFullWidth])}&gt;
                            {node.title}
                        &lt;/a&gt;
                        {children &amp;&amp; currentlyOpen == node.id &amp;&amp; open ? 
                            &lt;ArrowDropUp /&gt;
                            : 
                            &lt;ArrowDropDown /&gt;
                        }
                    &lt;/div&gt;
                &lt;/ListItem&gt;
                {children &amp;&amp; (
                    &lt;Collapse
                        in={currentlyOpen == node.id &amp;&amp; open}
                        timeout="auto"
                        unmountOnExit&gt;
                        &lt;List disablePadding&gt;
                            {children.map(childnode =&gt; (
                                    &lt;MobileNavigationMenuItem
                                        key={childnode.id}
                                        node={childnode}
                                        classes={classes}
                                        passToParent={this.handleCurrentlyOpen}
                                        currentlyOpen={currentOpenChildId}&gt;
                                        {childnode.children}
                                    &lt;/MobileNavigationMenuItem&gt;
                            ))}
                        &lt;/List&gt;
                    &lt;/Collapse&gt;
                )}
            &lt;/React.Fragment&gt;
        );
    }
}</code></pre>
</div>
</div>


<hr>

<h2>Reducing your <code>getXXX</code> functions</h2>

<p>3 of your functions share the same layout :</p>

<pre><code>getNestedBackgroundColor(depth) {
    const styles = {
        backgroundColor: 'rgba(255, 255, 255, 0.05)'
    };
    if (depth === 1) {
        styles.backgroundColor = 'rgba(255, 255, 255, 0.1)';
    }
    if (depth === 2) {
        styles.backgroundColor = 'rgba(255, 255, 255, 0.15)';
    }
    return styles;
}
</code></pre>

<p>Using JSON objects, you could map each result to the desired <code>depth</code> number :</p>

<pre><code>{
    1: 'rgba(255, 255, 255, 0.1)',
    2: 'rgba(255, 255, 255, 0.15)'
}
</code></pre>

<p>Now, just add brackets to extract the correct output, and return the default one if nothing was found using the <code>||</code> operator :</p>

<pre><code>{
    1: 'rgba(255, 255, 255, 0.1)',
    2: 'rgba(255, 255, 255, 0.15)'
}[depth] || 'rgba(255, 255, 255, 0.05)'
</code></pre>

<p>The <code>getNestedPadding</code> function :</p>

<pre><code>getNestedPadding = depth =&gt; (
    {
        1: 15,
        2: 30
    }[depth] || 0
)
</code></pre>

<p>Short syntax : <code>getNestedPadding = depth =&gt; ({ 1: 15, 2: 30 }[depth] || 0)</code></p>

<h2>Deconstructing</h2>

<p>I added a lot of <code>state</code> and <code>props</code> deconstruction throughout your code :</p>

<pre><code>const { classes, currentlyOpen, node, children } = this.props;
const { currentOpenChildId, open } = this.state
</code></pre>

<p>This allows you to stop repeating <code>this.state.XXX</code> later on and make your code more readable.</p>

<h2>Conditional rendering</h2>

<p>You are already using the <code>&amp;&amp;</code> operator with some parameters but are not using it with the <code>map</code> function, your mapped arrays can also be conditionally rendered in your JSX :</p>

<pre><code>return (
    &lt;List disablePadding className={classnames([styles, classes.root])}&gt;
        {navigation.map(item =&gt; ( //Short arrow function syntax
            &lt;MobileNavigationMenuItem
                key={item.id}
                node={item}
                passToParent={this.handleCurrentlyOpen}
                currentlyOpen={this.state.currentOpenChildId}&gt;
                {item.children}
            &lt;/MobileNavigationMenuItem&gt;
        ))}
    &lt;/List&gt;
);
</code></pre>

<p>Also, putting single JSX component in a condition does not require using parenthesis :</p>

<pre><code>{children &amp;&amp; currentlyOpen == node.id &amp;&amp; open ? 
    &lt;ArrowDropUp /&gt;
    : 
    &lt;ArrowDropDown /&gt;
}
</code></pre>

<p>And the variable <code>children</code> can be used instead of <code>childnodes.length &gt; 0</code> now that your children are conditionally rendered :</p>

<pre><code>&lt;List disablePadding&gt;
    {children.map(childnode =&gt; (
            &lt;MobileNavigationMenuItem
                key={childnode.id}
                node={childnode}
                classes={classes}
                passToParent={this.handleCurrentlyOpen}
                currentlyOpen={currentOpenChildId}&gt;
                {childnode.children}
            &lt;/MobileNavigationMenuItem&gt;
    ))}
&lt;/List&gt;
</code></pre>
    </div>