<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Today I was able to simplify my approach by introducing a default method into the <code>NodeService</code> interface and leverage Springs dependency injection for lists. The interface looks as follows:</p>

<pre class="lang-java prettyprint-override"><code>public interface NodeService&lt;T extends Node&gt; {
  @SuppressWarnings("rawtypes")
  default String getNodeType() {
    return ((Class)
            ((ParameterizedType) getClass().getGenericInterfaces()[0]).getActualTypeArguments()[0])
        .getSimpleName();
  }

  /* ... */
}
</code></pre>

<p>The respective class using this method to find the respective service ended up like this:</p>

<pre class="lang-java prettyprint-override"><code>@RequiredArgsConstructor
public class Query implements GraphQLQueryResolver {
  private final List&lt;NodeService&lt;?&gt;&gt; nodeServices;

  public Node node(final String id) {
    try {
      val nodeId = NodeId.fromString(id);
      return nodeServices.stream()
          .filter(service -&gt; service.getNodeType().equals(nodeId.getType()))
          ./* ... */;
    } catch (final IllegalArgumentException e) {
      /* ... */
    }
  }

  /* ... */
}
</code></pre>

<p>Of course I haven't mapped the services to a map as initially wanted, but this would be trivial with the newly introduced method.</p>
    </div>