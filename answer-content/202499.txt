<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Code runs into <em>undefined behavior</em> (UB)</strong></p>

<p>Code fails to test the return value of <code>fgets()</code>.  Without knowing the return value is not <code>NULL</code>, <code>strlen(buf)</code> can get called on 1) uninitialized memory or 2) memory in an undefined state or 3) <code>buf[]</code> from the previous <code>fgets()</code> call.</p>

<pre><code>// UB possible
fgets(buf, bufsize, stream);
*rtr = realloc(*rtr, strlen(buf)+strlen(*rtr));

// Better
if (fgets(buf, bufsize, stream)) {
  ... strlen(buf) ...
</code></pre>

<p><strong>Infinite loop</strong></p>

<p>Should user input end with a non-<code>'\n'</code>  (think piped input), <code>do</code> loop does not stop before UB kicks in.</p>

<p><strong>Exploitable code</strong></p>

<p><code>dynamic_fgets(&amp;buf, stdin);</code> allows an external user make the program use excessive  resources.  There is no  upper bound.  Defensive coding does not allow memory consumption to go unchecked from potential hostile users or pathological file input.</p>

<p>IMO, <code>dynamic_fgets()</code> , deserves an upper bound parameter.  Once exceeded, the routine should not allocative more memory and instead return an error indication.</p>

<p><strong>Code is fooled with <code>'\0'</code></strong></p>

<p>How robust do you want your code?</p>

<p>In hostile cases, <code>fgets()</code> may read a <em>null character</em> and <code>fgets()</code> treats it no different than any other non <code>'\n'</code> character.  A following <code>strlen(buf)</code> can stop on the usual null character <em>appended</em> by <code>fgets()</code>, yet it will first stop on a <em>read</em> null character.  <code>strlen(buf)</code> could be <code>0</code> due to such input.</p>

<p>Further this code is then readily exploitable due to <code>buf[strlen(buf)-1]</code> by entering a <em>null character</em> as the first input character.  The code is the same as <code>buf[SIZE_MAX]</code> an access outside the allocation and thus UB.  At a minimum, do not code <code>buf[strlen(buf)-1]</code> when <code>buf[0] == 0</code> is possible.</p>

<p><strong><code>size_t</code> vs. <code>int</code></strong></p>

<p>Minor: <code>size_t</code> is the right width for array sizing.  It is the type return by <code>strlen()</code> and accepted by <code>*alloc()</code>.  <code>int</code> can be insufficient for long strings.</p>
    </div>