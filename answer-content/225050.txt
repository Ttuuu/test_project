<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Use Dataflow</h3>

<p>You could use the <code>ActionBlock</code> from the <a href="https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/dataflow-task-parallel-library" rel="nofollow noreferrer"><code>System.Threading.Tasks.Dataflow</code></a> package to let it handle the throttling of <code>InitalizeSenderAsync</code> method that you currently handle yourself:</p>

<pre><code>var workerBlock = new ActionBlock&lt;DataRow&gt;
(
   async row =&gt;
   {
       // body...
   },
   new ExecutionDataflowBlockOptions
   {
       MaxDegreeOfParallelism = 100 // &lt;-- throttle
   }
);

foreach (DataRow row in data.Rows)
{
    workerBlock.Post(row); // &lt;-- feed the ActionBlock
}
workerBlock.Complete();
workerBlock.Completion.Wait(); // &lt;-- wait for all row to be processed
</code></pre>

<h3>Use <code>StringBuilder</code> or <code>Join</code></h3>

<blockquote>
<pre><code>foreach (string q in updateList)
  updatequery += $"{q};\n";
</code></pre>
</blockquote>

<p>Building large strings in this way might harm the performance. If you care for efficiency then <code>StringBuilder.AppendLine</code> or <code>string.Join($"{Environment.NewLine};", updateList")</code> are your best friends.</p>

<h3>Questionable data acquisition</h3>

<blockquote>
<pre><code>catch (InvalidOperationException IOE)
</code></pre>
</blockquote>

<p>You should try to avoid this kind of <em>no data</em> handling (<em>No Locate Ordered Items for order</em>). I think you have made this to a <em>reusable</em> pattern because you do this for every single use-case. The methods returning data should return either <code>null</code> or empty collections (like <code>IList&lt;T&gt;</code> (this is the preferred convention). Throwing exceptions is always costly and so many of these <code>try/catch</code> blocks make your ode very difficult to read. </p>
    </div>