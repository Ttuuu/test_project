<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Overall</h2>
<p>You look like a Java programmer that is coming over to C++.</p>
<p>This:</p>
<pre><code>{
    StudentDatabase* database = new StudentDatabase();
    ... STUFF
    delete database;
}
</code></pre>
<p>Is very bad practice.</p>
<ol>
<li>There is no need to dynamically allocate this object (it can easily be an automatic variable thus creation and destruction is done automatically).</li>
<li>You don't guarantee that the <code>delete</code> is called.</li>
</ol>
<p>You only need to dynamically allocate an object if the object lives past beyond the code that created it (here you don't). Even when this is needed you should be using smart pointers (probably <code>std::unique_ptr</code>) to correctly manage the lifespan of the dynamically created object.</p>
<p>Much easier to do:</p>
<pre><code>{
    StudentDatabase database{};
    ... STUFF
}
</code></pre>
<hr>
<p>You have not learned the rule of three. This is one of the most important concepts in C++. Until you have learned this rule you can not safely use pointers in the language.</p>
<h2>Code Review</h2>
<p>This is fine for very small programs.</p>
<pre><code>#ifndef STUDENT_H
#define STUDENT_H
</code></pre>
<p>But you should make it a habit to make these longer and more unique. Personally I always use namespaces (that I know is unique to me) and add this to the include guard. A lot of IDE allow you to generate these guards with GUID.</p>
<hr>
<p>When passing object to functions it is usually a good idea to pass them by reference to avoid a copy. To prevent accidental modification of the parameter you should pass by const reference.</p>
<pre><code>    Student(std::string name);

    // Here I would change to:

    Student(std::string const&amp; name);
</code></pre>
<hr>
<p>The same applies to returning values (though there is more nuance to this, but as a beginner a good rule of thumb is return by const reference). Returning by reference (const if you don't want it to be changed). This will prevent the object being copied on returned. You then let the user of the function decide if they want a copy or to simply use the reference.</p>
<pre><code>    const std::string getName() const;

    // Here I would change to:

    std::string const&amp;  getName() const;
</code></pre>
<hr>
<p>Prefer to use the initializer list in the constructor rather than code in the constructor.</p>
<pre><code>Student::Student(std::string name) {
    this-&gt;name = name;
}
</code></pre>
<p>All member variables of a class are constructed before the code block of the constructor is executed. Thus in your case above you are constructing the object <code>name</code> then you are calling the <code>operator=</code> for the object <code>name</code> thus affectively initializing the variable twice. It works but this can potentially be inefficient if the constructor did a lot of work. Thus prefer to use the initializer list to prevent inefficiencies.</p>
<pre><code>Student::Student(std::string const&amp; name)
    : name(name)
{}
</code></pre>
<hr>
<p>Also allow for the potential to use <strong>move semantics</strong>. This allows your object to take the content of the its parameters and avoid an extra copy.</p>
<pre><code>Student::Student(std::string&amp;&amp; name) // Note the double &amp;&amp;
    : name(std::move(name))          // Move the name to this-&gt;name
{}
</code></pre>
<hr>
<p>Prefer not to use <code>this-&gt;</code>.</p>
<p>This is actually an important one (in my opinion).  This actually causes more bugs than you think. The only reason to use <code>this-&gt;name</code> rather than <code>name</code> directly is because you have <strong>shadowed</strong> variables and you need to disambiguate the two usages.</p>
<p>The problem here is that when you make a mistake (and you will) the compiler can not detect the error.</p>
<p>So the better approach is to use better variable names so that you know from context the correct usage. Then you can turn on your compiler warnings and get the compiler to warn you when you do have shadowing so that you never have shadowed variables and thus do not need to disambiguate two similar named variables with <code>this-&gt;</code>.</p>
<hr>
<p>I dislike this:</p>
<pre><code>#include &lt;string&gt;
#include "student.h"
#include &lt;vector&gt;
</code></pre>
<p>Technically nothing wrong. But I order my includes in a specific order. Most specific to least specific.</p>
<pre><code>#include "ThisClass.h"
#include "OtherClassesInThisLibrary.h"
---
#include "Other Local Libraries I Use .h"
#include &lt;Other Gloval Libraries I Use .h&gt;
---
#include &lt;C++ header Files&gt;
#include &lt;C header Files&gt;
</code></pre>
<p>Now the reason I do it this way is to make sure I don't hide errors around missing #include statements in my local files.</p>
<hr>
<p>No reason to keep a vector of pointers.</p>
<pre><code>    std::vector&lt;Student*&gt; student_list;
</code></pre>
<p>As you are not using polymorphism there is no need to store pointers. Simply store the object.</p>
<pre><code>    std::vector&lt;Student&gt; student_list;
</code></pre>
<p>Ahh. I hear you say that it does not matter that much as I have fixed the destructor to correctly release the student objects. And yes you have. But you have forgotten to implement the rule of three. Which will make this code brittle and likely to cause errors.</p>
<p>Rule of 3: If your object contains an "owned" pointer then the compiler version of the constructors and assignment operators do not work correctly and thus you need to explicitly define these methods.</p>
<p>In your case you have a vector full of owned pointers (I know you own then because you try and delete them in the destructor).</p>
<p>How does this break your code I hear you ask:</p>
<pre><code>{
    StudentDatabase    db1(

    db1.add_student(new Student("John"));

    StudentDatabase    db2(db1);
}
// Problem here.
// The "John" Student is deleted twice as both databases has a copy
// of the student.
</code></pre>
<p>But I will never copy the database (I hear you say). That's fine. Implement the rule of three by deleting the copy constructor and copy assignment operator and then nobody will ever have an accidental issue with your class.</p>
<p>Or:</p>
<p>Simply have a vector of Student (rather than vector of Student pointer). Alternatively If you want to share the object. Then we are back to using smart pointers.</p>
<hr>
<p>This looks very weird.</p>
<pre><code>    StudentDatabase::student_list.push_back(stud_obj);
</code></pre>
<p>This looks like you are accessing a class member (rather than a local object member). Looking back at your class definition it's a member of the local object.</p>
<pre><code>    student_list.push_back(stud_obj);
</code></pre>
<hr>
<p>Sure this is fine.</p>
<pre><code>    for (iter = student_list.begin(); iter != student_list.end(); iter++) {
        delete* iter;
    }
</code></pre>
<p>But. If you look at other storage types (containers/arrays) they all destroy their objects in reverse order. So it may be holding to that standard and deleting them from the back rather than the front.</p>
<p>OR. You don't care about the order. Then we have a better for loop to achieve this:</p>
<pre><code>    for (auto&amp; obj: student_list) {
        delete obj;
    }
</code></pre>
    </div>