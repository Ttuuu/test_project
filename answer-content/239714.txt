<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You've got inefficiency here:</p>

<pre><code>    // Sum of a subarray, based on B(x, i, L) -- i is one-indexing
    public static double sum(double[] x, int i, int L) {
        return IntStream.range(i, i + L)
                        .parallel()
                        .mapToDouble(idx -&gt; x[idx - 1])
                        .sum();
    }
</code></pre>

<p>I don't know how big <code>L</code> is, but you are doing <code>idx - 1</code> that many times, distributed over all of the threads.  You can easily move this out of the loop ...</p>

<pre><code>        return IntStream.range(i - 1, i + L - 1)
                        .parallel()
                        .mapToDouble(idx -&gt; x[idx])
                        .sum();
</code></pre>

<p>... so the subtraction is done exactly twice.</p>

<hr>

<p>Parallel stream in a parallel stream:</p>

<pre><code>public static double mbbMu(double[] x, int L) {     
    return IntStream.range(0, x.length - L + 1)
                    .parallel()
                    .mapToDouble(idx -&gt; mean(x, idx + 1, L))
                    .average()
                    .orElse(0);
}
</code></pre>

<p>The <code>mean(...)</code> function is trying to do things in a parallel stream.  And this function is trying to do things in a parallel stream.  So you've got parallel overhead, plus resource contention.  With 8 cores, your outer stream will create 8 threads, which will each try to create 8 threads, for 8*8 threads on 8 cores!</p>

<p>Eeek!</p>

<p>Use parallel streams on the outermost streams, and leave all inner streams as serial.</p>

<hr>

<p>Try losing the indexing altogether, and stream the values directly with:</p>

<pre><code>    public static double sum(double[] x, int i, int L) {
        return Arrays.stream(x).skip(i-1).limit(L).sum();
    }
</code></pre>

<hr>

<p>Avoid unnecessary work.</p>

<pre><code>    // Compute MBB variance
    public static double mbbVariance(double[] x, int L, double alpha) {
        return IntStream.range(0, x.length - L + 1)
                        .parallel()
                        .mapToDouble(idx -&gt; (Math.pow(L, alpha) * Math.pow(mean(x, idx + 1, L) - mbbMu(x, L), 2)))
                        .average()
                        .orElse(0);
    }
</code></pre>

<p>How many times does this calculate <code>Math.pow(L, alpha)</code>?  How many times is the value different?  Maybe you want to move it out of the loop.</p>
    </div>