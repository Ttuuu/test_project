<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Comments</h2>

<p>Comments should be meaningful. Yours are not. Writing comments that just repeat the code are actual harmful rather than helpful. Over time the comments and code will diverge (as bugs are found and fixed). Then a maintainer that is reading code and comments will find a discrepancy, does he fix a comment or the code? They can probably find out using the source control but its a huge waste of time.</p>

<p>Comments should be reserved to explain <strong>WHY</strong> something is done. Use self documenting code (good variable/function/type names) to document <strong>HOW</strong>.</p>

<p>Comments could also be used to explain algorithms where the code is complex or to put a link to where the algorithm is explained (if you know the link will last).</p>

Example

<pre><code>/**
    *  @brief  Inserts a node after the node.
    *  @param  nextNode  Pointer to the node to be inserted.
    *  @return  void.
    *
    *  Inserts the nextNode after the node and chains nextNode to the
    *  old next of the node.
    *
    */
template &lt;class T&gt;
void Node&lt;T&gt;::insertNext(Node&lt;T&gt;* nextNode) {
    nextNode-&gt;nextPtr = nextPtr;
    nextPtr = nextNode;
}
</code></pre>

<p>Did that comment tell me anything I could not understand by simply reading the name of the function <code>insertNext()</code>  and the two lines of code!</p>

<h2>Design</h2>

<p>You have implemented a singly linked list. Sure but this is actually harder to do than implement a doubly linked list. As a result I am sure I will find a bug. The tiny amount of extra design will simplify your code tremendously.</p>

<p>You have implemented the list using <code>null</code> to mark the terminator. If you look up a technique called <code>Sentinel List</code> you will find a technique that removes the need for <code>null</code>. By removing the need for <code>null</code> your code will be highly simplified as you don't need to special case inserting into an empty list or and the head/tail of a list it is all simply an insertion into the list.</p>

<p>You maintain state about the internal "current" position. Could not see any errors but it seemed all a bit doggey and makes the code complex. I would dump this functionality and just ask the user to pass a position for insertion/deleting/getting.</p>

<h2>High Level Code</h2>

<p>Making it as a top level type you have exposed an implementation detail of the class. This is bad design as it locks you into using that implementation.</p>

<p>Also because you have made it a top level type you have overcomplicated it (presumably to prevent abuse). But a class that should have been 6 lines top takes a 100 lines of vertical space. That's an unnecessary cognitive load to put on the maintainer.</p>

<h2>Idioms</h2>

<p>Your linked list holds pointers. But I don't see you obeying the rule of 3/5. You should look it up and read it.</p>

<p>But without reading the code I bet the following does strange things.</p>

<pre><code>MyList&lt;int&gt;     listA;
listA.insertHead(1);

MyList&lt;int&gt;     listB;
listB = listA;                 // Uses the compiler generated copy assignment
                               // If you don't define one the compiler does.
                               // When you'r class has pointers make sure
                               // you define the methods the compiler may
                               // generate automatic implantations off.
listB.insertHead(2);
</code></pre>

<p>How many items are in <code>listA</code>?</p>

<p><a href="https://stackoverflow.com/questions/4172722/what-is-the-rule-of-three">What is The Rule of Three?</a><br>
<a href="https://stackoverflow.com/questions/4782757/rule-of-three-becomes-rule-of-five-with-c11">Rule-of-Three becomes Rule-of-Five with C++11?
</a></p>

<h2>More Reading</h2>

<p>Have a look at this review.<br>
<a href="https://codereview.stackexchange.com/a/126007/507">https://codereview.stackexchange.com/a/126007/507</a></p>

<h2>Code Review</h2>

<pre><code>template &lt;class T&gt;
class Node {
  public:
    Node(const T&amp; item);
    Node(const T&amp; item, Node&lt;T&gt;* nextNode);
    Node&lt;T&gt;* next(void) const;
    void insertNext(Node&lt;T&gt;* nextNode);
    Node&lt;T&gt;* removeNext(void);
    T getData(void) const;
    void changeData(T&amp; item);
  private:
    T data;
    Node&lt;T&gt;* nextPtr;
};
</code></pre>

<p>MY class would simply have been:</p>

<pre><code>template&lt;typename T&gt;
template List
{
    struct Node          // Here Node is a private member of the class.
    {                    // As long as you don't expose a Node through
        T      data;     // the list interface its implementation is private.
        Node*  next;     // Thus adding member access functions is superfluous.
        Node*  prev;     // as only you can use the node.
    }
    ...
}
</code></pre>

<hr>

<p>In constructors prefer to use initializer lists rather code blocks to initialize the data. This is because if you don't specifically specify initializer list items then the compiler is going to generate them for you.</p>

<pre><code>Node&lt;T&gt;::Node(const T&amp; item) {
    data = item;
    nextPtr = nullptr;
}
</code></pre>

<p>The above code is equivalent to:</p>

<pre><code>Node&lt;T&gt;::Node(const T&amp; item)
    : data()                  // default initialization of the type T
{                             // So you will call the constructor of T here.
                              // Not a big deal for integers but what if T
                              // has an expensive type?

    data = item;              // Here you are calling the assignment operator.
                              // So now you have called the constructor
                              // followed by a copy assignment.
    nextPtr = nullptr;
}
</code></pre>

<p>You should have written like this:</p>

<pre><code>Node&lt;T&gt;::Node(const T&amp; item)
    : data(item)
    , nextPtr(nullptr)
{}
</code></pre>

<hr>

<p>I don't see a move constructor?</p>

<pre><code>Node&lt;T&gt;::Node(T&amp;&amp; item)        // Notice the double &amp;&amp;
    : data(std::move(item))
    , nextPtr(nullptr)
{}
</code></pre>

<p>Here if T is expensive to construct we can move the object into the node. Move semantics has been a standard part of the language since C++11 (8 years).</p>

<p>Sometimes it is also nice to have a construct in place constructor. It may be cheap to pass the parameters to construct a T rather than passing around a T. To do this you need to use var arg templates so a bit more complicated syntactically.</p>

<pre><code>template&lt;typename... Args&gt;               // Variable number of arguments.
Node&lt;T&gt;::Node(Args&amp;&amp; args...)
    : data(std::forward&lt;Args&gt;(args)...)  // Arguments forwarded to constructor
    , nextPtr(nullptr)
{}
</code></pre>

<hr>

<p>Return value (of containers) by reference.</p>

<pre><code>T Node&lt;T&gt;::getData(void) const {
    return data;
}
</code></pre>

<p>Here you are returning y value this means you are creating a copy of the body to return. If T is expensive to copy this is probably not what you want to do.</p>

<pre><code>T const&amp; Node&lt;T&gt;::getData(void) const {
  ^^^^^^
    return data;
}
</code></pre>

<hr>

<p>Pass parameters by const reference (rather than reference).</p>

<pre><code>void Node&lt;T&gt;::changeData(T&amp; item) {
    data = item;
}
</code></pre>

<p>Unless you explicitly want to modify item then you should pass it be const reference. Also without the const you can not pass temporary object to this function.</p>

<pre><code>struct X {
   X(int x) /* constructor */ {}
};

Node&lt;T&gt;    node(5); // This is allowed as the constructor takes by const ref.
node.changeData(6); // Not allowed as we need to construct a temporary X here.
                    // You can not pass a reference to a temporary object.
                    // A const reference is OK.
</code></pre>

<p>Again you may want to add a move version of this interface.</p>

<hr>

<p>Don't print error messages from inside structures.<br>
Throw an exception and allow the business logic externally decide if it wants to print an error message.</p>

<pre><code>void LinkedList&lt;T&gt;::removeAt(void) {
    if(empty()) {
        std::cerr &lt;&lt; "The LinkedList empty. Can't remove current node." &lt;&lt; '\n';
        // Throw an exception if you want the message.
        // or simply ignore if it is not an error to remove from an empty list.
    } 
</code></pre>

<hr>

<p>This seems a bit redundant.</p>

<pre><code>void LinkedList&lt;T&gt;::freeNode(Node&lt;T&gt;* node) {
    delete node;
}
</code></pre>

<p>Why call <code>freeNode(node)l</code> when you could just call <code>delete node;</code>?</p>

<hr>

<p>Two line initialization should be avoided:</p>

<pre><code>   Node&lt;T&gt;* tempPtr = nullptr;
    tempPtr = new Node&lt;T&gt;(item);
</code></pre>

<p>Prefer to simply create and initialize:</p>

<pre><code>   Node&lt;T&gt;* tempPtr = new Node&lt;T&gt;(item);
</code></pre>

<hr>

<p>The action <code>new</code> never returns <code>nullptr</code>. If it fails to allocate then it will throw an exception.</p>

<pre><code>    if(tempPtr == nullptr) {
        std::cerr &lt;&lt; "Memory allocation for new node is failed" &lt;&lt; '\n';
        return nullptr;
    } else {
        return tempPtr;
    }
</code></pre>

<p>Which is lucky for you. You return a null pointer but all your code assumes that this function never returns a <code>nullptr</code> and uses it as if the value was always good.</p>

<p>This is really shitty design and you lucked out in that the new would never give you a bad value.</p>

<hr>

<p>Sure:
Note: printing should not change the class so mark it const.</p>

<pre><code>void LinkedList&lt;T&gt;::print(std::ostream&amp; os) const {
                                      //    ^^^^^
    ...
}
</code></pre>

<p>But why not also make it work like a normal C++ streaming object.</p>

<pre><code>friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; str, LinkedList const&amp; data) {
    data.print(str);
    return str;
}
</code></pre>
    </div>