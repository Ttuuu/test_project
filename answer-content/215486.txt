<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This looks nice! Two issues I see here,</p>

<ol>
<li><p>When compiling your template with <code>clang</code>, it refuses the <code>if constexpr</code> dispatch for every recursive instantiation with <code>sizeof...(rems) &gt; 1</code>, e.g.</p>

<blockquote>
  <p>error: constexpr if condition evaluates to 2, which cannot be narrowed to type <code>bool</code> [-Wc++11-narrowing]</p>
</blockquote>

<p><code>gcc</code> seems to accept this, but the fix is quite simple, just be more explicit about it:</p>

<pre><code>if constexpr (sizeof...(rems) &gt; 0)
</code></pre></li>
<li><p>Never underestimate the standard library. You are doing more work than necessary, have a look at overload #4 in the <a href="https://en.cppreference.com/w/cpp/algorithm/min" rel="noreferrer"><code>std::min</code></a> signature. You can expand the parameter pack into a <code>std::initializer_list</code> and pass this to <code>std::min</code>, which simplifies your template and avoids its recursive instantiation. Additionally wrapping the arguments into a <code>std::reference_wrapper</code> ships around unnecessary copies.</p>

<pre><code>#include &lt;functional&gt;

template &lt;typename Less, typename... Ts&gt;
constexpr decltype(auto) min(Less less, const Ts&amp;... rems) {
    return std::min({std::cref(rems)...}, less).get();
}
</code></pre>

<p>The return type of the <code>std::min</code> invocation is a <code>std::reference_wrapper</code>, to get around this, its <code>get()</code> member function is called.</p>

<p>Of course, you will pay for the construction of <code>sizeof...(rems)</code> <code>std::reference_wrapper</code> instances and for the <code>std::initializer_list</code>.</p></li>
</ol>
    </div>