<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Billy Mays here for the <a href="https://pypi.org/project/regex/" rel="noreferrer"><code>regex</code></a> library!</p>

<p>It's API-compatible with the standard Python <a href="https://docs.python.org/3/library/re.html?highlight=re#module-re" rel="noreferrer"><code>re</code></a> module. It's powered by open source, and it's safe for colored fabrics and carpets!</p>

<p>The <code>regex</code> library offers things like <code>\p{Punctuation}</code>, which is actually a shorthand form of <code>p{Punctuation=Yes}</code> which is really a shortening of <code>p{General_category=Punctuation}</code>.</p>

<p>If you can make a Unicode query, <code>regex</code> supports it. Identifiers, Categories, Blocks, Diacritical Marks - it even does Coptic!</p>

<p>It cleans! It brightens! It eliminates odors! All at the same time!</p>

<pre><code>test_data = "This, this a sentence. with lotsa' puncts!?@ hahaha looo world"
print(f"Test data: '{test_data}'")

import regex

PUNCT_RE = regex.compile(r'(\p{Punctuation})')    

print(PUNCT_RE.split(test_data))
</code></pre>

<p>The output looks like:</p>

<pre><code>Test data: 'This, this a sentence. with lotsa' puncts!?@ hahaha looo world'
['This', ',', ' this a sentence', '.', ' with lotsa', "'", ' puncts', '!', '', '?', '', '@', ' hahaha looo world']
</code></pre>

<p><code>regex</code> converts your code from a whopping 21 lines to a 1-line method call-- a 2000% reduction! But you gotta call now!  </p>

<p>Here's how to order:</p>

<pre><code>pip install regex
</code></pre>
    </div>