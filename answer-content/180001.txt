<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I agree with Pimgd's answer. The code itself looks fine and there really isn't any good reason why they wouldn't at least take you in for an actual interview.</p>

<p>The only feeling I get from your solution is that it may be over-designed for their tastes.</p>

<p>What if they were expecting the user and item to just be simple <code>String</code>s and the "bid" just a float?
The interface could then look something like:</p>

<pre><code>public interface Auction {

    public void placeBid(float bid, String user, String item) throws InvalidBidException;

    public float getCurrentWinningBidForItem(String item);

    public List&lt;float&gt; getAllBidsForItem(String item);

    public List&lt;String&gt; getAllItemsWithBidFromUser(String user);

}
</code></pre>

<p>For the implementation you could go in a few directions. My initial thought would be to create a POJO class <code>Bid</code> like this:</p>

<pre><code>class Bid {
    private final String name;
    private final String item;
    private final float price;

    public Bid(String name, String item, float price) {
        this.name = name;
        this.item = item;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public String getItem() {
        return item;
    }

    public float getPrice() {
        return price;
    }
}
</code></pre>

<p>As for the actual implementation of the Auction we could then use a <code>List&lt;Bid&gt;</code> to store all the given bids and use a stream to filter out the result. For example:</p>

<pre><code>private final List&lt;Bid&gt; placedBids = new CopyOnWriteArrayList&lt;&gt;();

public float getCurrentWinningBid(String item){
    return placedBids.stream()
            .filter(bid-&gt;item.equals(bid.getName()))
            .map(bid -&gt; bid.getPrice())
            .max(Float::compare)
            .orElse(0f);
}
</code></pre>

<p>Which results in a lot less code to look at in the submissions they got. If they got a submission like this and were content about that candidate they might have gotten lazy and refused all others (without being able to give a proper reason why as you noticed).</p>

<hr>

<p>Don't let this failed job attempt discourage you though. Like Pimgd already mentioned the things that you can still improve upon are easy to teach you once you get started in a company so those shouldn't really be a reason not to give you a proper interview. Just search for a company that appreciates your thorough approach more.</p>
    </div>