<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>One way to improve is to use a database of lookup values to avoid repeated function calls. For example if your function calls <code>ackermann(1,1)</code> many times, retrieving from a database will prevent your program from naïvely opening unnecessary stack frames.</p>

<p>(Note: I don’t know <strong>C++</strong> so my answer is in JavaScript.)</p>

<pre class="lang-js prettyprint-override"><code>/** Database: a two-dimensional array of numbers */
const db = []

/** Set a value to an entry in the database. */
db.set = function (m, n, value) {
    // keep the row or add one if missing
    this[m] = this[m] || []
    // set the cell
    this[m][n] = value
}

/** Retrieve a value from the database. */
db.get = function (m, n) {
    // if row is an array and cell is a number, return that; else throw error
    if (this[m] instanceof Array &amp;&amp; typeof this[m][n] === 'number') {
        return this[m][n]
    }
    throw new ReferenceError('No entry found.')
}

/** The Ackermann Function */
function ack(m, n) {
    // parameter validation:
    // if negative numbers, NaN, or infinite numbers are given, throw error
    if (m &lt; 0 || n &lt; 0 || Number.isNaN(m + n) || !Number.isFinite(m + n)) {
        throw new RangeError('Only natural numbers allowed.')
    }
    /** The returned result (the answer) */
    let returned;
    try {
        // try to get a database entry, if it exists
        returned = db.get(m, n)
    } catch (err) {
        // else, do Ackermann’s algorithm
        if (m === 0) {
            returned = n + 1
        } else if (n === 0) {
            returned = ack(m - 1, 1)
        } else {
            returned = ack(m - 1, ack(m, n - 1))
        }
        // make a new database entry for the result
        db.set(m, n, returned)
    }
    return returned
}
</code></pre>
    </div>