<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few general coding style suggestions:</p>

<ul>
<li><p>Rather than assigning <code>M</code> and <code>N</code> on separate lines, you can use tuple unpacking:</p>

<pre><code>N, M = tempArray
</code></pre></li>
<li><p>I'd use different variable names for the first input line, and all subsequent lines. For example:</p>

<pre><code>init_line = [int(n) for n in input().split()]  # split() defaults to whitespace
size_of_list, number_of_operations = init_line

for i in range(number_of_operations):
    this_line = [int(n) for n in input().split()]
    # Do some stuff
</code></pre>

<p>I’ve also changed the other variable names: <code>M</code> and <code>N</code> have been replaced by more descriptive names, and the Python convention is to use <code>snake_case</code>, not <code>dromedaryCase</code>.</p>

<p>Or even better, you could just drop those variables entirely:</p>

<pre><code>size_of_list, number_of_operations = [int(n) for n in input().split()]

for i in range(number_of_operations):
    a, b, k = [int(n) for n in input().split(" ")]
</code></pre>

<p>Note the tuple unpacking for <code>a</code>, <code>b</code> and <code>k</code>: this makes it easier to follow the logic if we have these named variables. </p></li>
<li><p>In the look over <code>M</code>/<code>number_of_operations</code>, since the value of <code>i</code> is unused, a common convention is to use an underscore instead:</p>

<pre><code>for _ in range(number_of_operations):
</code></pre></li>
</ul>

<p>The time complexity is actually \$O(MN)\$, because there’s an outer loop of length <code>M</code>, and inner loop of length <code>N</code>, and a single addition for every step.</p>

<p>I can’t see a good way to improve the time complexity. Some people have suggested other data structures in the comments, but I don’t know enough CS to suggest one myself.</p>
    </div>