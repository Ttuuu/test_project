<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>first of all and main - implementation simply incorrect. 
let some thread call <code>lock_shared()</code> and suspended before <code>m_readers++;</code> line. than another thread also call <code>lock_shared()</code> and than <code>lock_upgrade()</code> - <code>m_mutex.readers_count()</code> will be 0 after <code>disable_read();</code>. as result this thread "got" exclusive access. at once with first thread which already have shared access</p>

<p>your test code nothing prove and useless as result. real test code must create several threads which many thousands times try acquire shared and exclusive lock, change shared to exclusive and visa versa. and on every iteration - check state of lock. you not do this.</p>

<p>about idea of such implementation - really add <code>WaitForSingleObject</code> (so unconditional enter kernel) and busy <code>Sleep()</code> loop - have has a disastrous effect on performance. try do such things simply no sense.</p>

<p>we can note that windows have api for acquire <em>SRW</em> lock in exclusive and shared mode. and exist api for convert exclusive to shared - <code>RtlConvertSRWLockExclusiveToShared</code>. but no api for convert shared to exclusive.
really all what need and exist sense in this case </p>

<pre><code>ReleaseSRWLockShared(SRWLock);
AcquireSRWLockExclusive(SRWLock); 
</code></pre>

<p>really - convert exclusive to shared - always possible without wait and unlock lock. if exist shared waiters (before exclusive) - api simply unblock it. but in case we want convert shared to exclusive - in general this is impossible without wait - if exist several shared owners. reasonable option in this case simply release lock and wait for exclusive as usual.</p>

<p>also about <code>volatile</code> on <code>std::atomic</code> - this is not need. the <code>std::atomic</code> already <code>volatile</code> by design</p>
    </div>