<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You are using Python classes in a weird way.</p>

<ul>
<li><p>First, if you want to create a new <code>Contact</code> instance, just call <code>Contact(name, surname, number, email)</code>. No need for <code>Contact.add</code>, which does exactly the same thing.</p></li>
<li><p>Next, all of your static methods. They have (almost) nothing to do with the object <code>Contact</code>, they all operate on a list of contacts, the address book. This means you can either make them functions/inline code that operates on that list, or make an <code>AddressBook</code> class that handles it. In this case I would probably go for the first option.</p>

<pre><code>if Contact.isempty(address_book):
    continue
</code></pre>

<p>becomes</p>

<pre><code>if not address_book:
    print('NO CONTACT SAVED\n')
    continue
</code></pre>

<p>This uses the fact that empty lists are falsy.
And <code>Contact.saved</code> becomes</p>

<pre><code>print('CONTACTS SAVED: ', end='')
for j, contact in enumerate(address_book):
    print(j, contact.name, end=' || ')
</code></pre>

<p>Where iterating over an iterable is preferred rather than iterating over the indices.</p>

<p>You could (and probably should) put this into a function:</p>

<pre><code>def print_address_book(address_book):
    print('CONTACTS SAVED: ', end='')
    for j, contact in enumerate(address_book):
        print(j, contact.name, end=' || ')
</code></pre></li>
<li><p>All of your <code>Contact.edit_*</code> methods are not needed. In Python you usually want to avoid making getters and setters and instead use bare  attributes unless you really have to. And you already have them being normal attributes, so you can directly modify them. But before we do that, it might make sense to allow dictionary like access to those entries, so you can use <code>contact["name"]</code> instead of <code>contact.name</code>:</p>

<pre><code>class Contact:
    ...

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)
</code></pre>

<p>This makes updating a contact a bit easier:</p>

<pre><code>name_index = int(input('\nModify which name? '))
while name_index not in range(len(address_book)):
    name_index = int(input('\nModify which name? '))

print('\nModify which entry?')
entry = input('NAME, SURNAME, NUMBER, EMAIL\n&gt;&gt;&gt;').lower()
while entry not in {"name", "surname", "number", "email"}:
    entry = input('NAME, SURNAME, NUMBER, EMAIL\n&gt;&gt;&gt;').lower()

address_book[name_index][entry] = input('New entry: ')
print('Modification saved\n')
</code></pre>

<p>I also added some code to ensure that the user inputs a sensible choice of input.</p></li>
<li><p>Choosing <code>0</code> to mean print all contacts in <code>Contact.summary</code> (which should also not be a static method but a stand alone function or method of <code>AddressBook</code>) is not a good idea. It means you cannot print the first contact (remember, Python starts counting at zero). Using <code>-1</code> (as is sometimes done in C/C++) as a sign of printing all entries would also be a bad idea, because then you could not print the last contact (without calling <code>len</code>).</p>

<p>Instead, just use <code>None</code>:</p>

<pre><code>try:
    index = int(input('\nContact position: '))
except ValueError:
    index = None

print_summary(address_book, index)

def print_summary(address_book, index=None):
    if index is None:
        for contact in address_book:
            print(contact)
    else:
        print(address_book[index])
    print()
</code></pre>

<p>As you can see I got rid of your explicit printing, instead make it part of the <code>Contact</code> class that when being printed it looks nice. For this you can use the magic method <code>__str__</code>, which should return a string representation of the instance:</p>

<pre><code>class Contact:
    ...

    def __str__(self):
        return " / ".join([self.name, self.surname, self.number, self.email])
</code></pre></li>
<li><p>This (as well as <code>__getitem__</code> and <code>__setitem__</code>) is a magic (or dunder) method. Have a look here for what other special methods you can define to give your custom classes built-in behaviour: <a href="https://rszalski.github.io/magicmethods/" rel="nofollow noreferrer">https://rszalski.github.io/magicmethods/</a></p></li>
</ul>
    </div>