<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You definitely don't want to extend a type in order to alias it.</p>
<p>This introduces complexity, is not idiomatic, and most importantly doesn't create an alias.</p>
<p>I believe what you're looking for is the type alias syntax</p>
<pre><code>using System;
using System.Collections.Generic;

using SmallDictionary = Dictionary&lt;string, JToken&gt;;
using NestedDictionary = Dictionary&lt;string, SmallDictionaly&gt;;
</code></pre>
<p>As their name implies, type aliases do not create any new types, they simply introducing a scoped alias that refers to the aliased type.</p>
<p>The only real drawback to type aliases is that they cannot be generic.</p>
<p>Moving on the the logic itself,</p>
<p>There's no need to write a loop over the dictionary entries to copy them into it new dictionary.</p>
<p><code>Dictionary&lt;TKey, TValue&gt;</code> provides a constructor which takes an <code>IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;</code> allowing us to specify its initial contents.</p>
<pre><code>return new Dictionary&lt;string, Dictionary&lt;string, JToken&gt;&gt;(configurationEntry);
</code></pre>
<p>or</p>
<pre><code>return new NestedDictionary(configurationEntry);
</code></pre>
<p>Thanks to the type alias</p>
    </div>