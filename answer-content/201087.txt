<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This version is improved, but there are still more things you can do to make it still better.</p>

<h2>Remove paths from local includes</h2>

<p>It's generally better not to put the path explicitly in a local <code>#include</code> like this:</p>

<pre><code>#include "File/FileReaderHelper.h"
</code></pre>

<p>Better is to omit that like this:</p>

<pre><code>#include "FileReaderHelper.h"
</code></pre>

<p>and then point the compiler to the appropriate path.  This makes your source code cleaner, more portable and easier to maintain.</p>

<h2>Don't include redundant qualifications</h2>

<p>In the same way that one shouldn't include the class name within class member function declarations, this line:</p>

<pre><code>std::vector&lt;unsigned char&gt; file_parse_helpers::loadBinaryFile(std::string filepath)
</code></pre>

<p>because it already appears within the namespace declaration, should not have the namespace qualification and should instead be written like this:    </p>

<pre><code>std::vector&lt;unsigned char&gt; loadBinaryFile(std::string filepath)
</code></pre>

<h2>Let the user specify an output stream</h2>

<p>The <code>printAssembly</code> function of the current <code>Disassembler</code> class is useful, but somewhat limited for two reasons.  The first reason is that it is hardcoded to only print to <code>std::cout</code>.  It would be more flexible to have a <code>std::ostream&amp;</code> paramater an argument.  The second reason is mentioned in the next suggestion.</p>

<h2>Rethink the interface</h2>

<p>The <code>Disassembler::printAssembly</code> function requires a <code>std::vector&lt;unsigned char&gt;&amp;</code> argument.  I'd suggest that instead of specifically having such a structure, it might be useful to be rewrite it as a templated function to have it use any pair of iterators so that one could pass, say, <code>code.begin(), code.end()</code>.  The same change would be beneficial to <code>DisasembleOneCode</code> (which still has a spelling error, by the way).  Also, I'd suggest storing an <code>Opcode &amp;</code> rather than just the opcode byte and bytecount within <code>AssemblyLine</code>.  This would make it much more useful because it would contain everything it needs to generate its own assembly output.  Also, instead of three separate constructors, just provide one with default parameters:</p>

<pre><code>AssemblyLine(const OpCode&amp; opCode, const uint8_t param1=0, const uint8_t param2=0);
</code></pre>

<p>Finally, I'd suggest that <code>generateAssembler()</code> might delegate to a member function of <code>Opcode</code> rather than needing to extract the <code>templateString</code> from the latter.</p>

<h2>Avoid storing data</h2>

<p>The current code reads the entire binary file into memory, but if all we're doing is disassembling, that's not really needed.  Instead, one could make a single forward pass through the code and disassemble it on the fly.  Here's what my implementation looks like:</p>

<pre><code>#include "Disassembler.h"
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;iterator&gt;

int main(int argc, char *argv[]) {
    if (argc != 3) {
        std::cerr &lt;&lt; "Usage: d8080 opcodefile binfile\n";
        return 1;
    };
    Disassembler d{argv[1]};
    std::ifstream bin{argv[2]};
    using iter = std::istream_iterator&lt;unsigned char&gt;;
    auto end{iter{}};
    for (auto curr{iter{bin}}; bin; ) {
        std::cout &lt;&lt; d.disassembleOne(curr, end) &lt;&lt; '\n';
    }
}
</code></pre>

<p>The <code>disassembleOne</code> function looks like this:</p>

<pre><code>std::string Disassembler::disassembleOne(iter&amp; begin, iter&amp; end) const {
    if (begin == end)
        return "";
    auto op{opCodes.at(*begin++)};
    unsigned char param[2]{0,0};
    int i{0};
    switch (op.byteCount) {
        case 3:
            if (begin != end) 
                param[i++] = *begin++;
            // deliberately fall through
        case 2:
            if (begin != end) 
                param[i++] = *begin++;
            break;
        default:
            break;
    }
    return op.asmString(param[0], param[1]);
}
</code></pre>

<p>Here's the slightly revised <code>OpCode.cpp</code>:</p>

<pre><code>#include "OpCode.h"
#include &lt;stdexcept&gt;

std::string OpCode::asmString(unsigned char param1, unsigned char param2) const {
    static constexpr int maxStringLength{ 32 };

    if (resultTemplate.length() &gt; maxStringLength)
    {
        throw std::invalid_argument("This template string is too long: " + resultTemplate);
    }

    char temp[maxStringLength];
    switch (byteCount) {
    case 1:
        return resultTemplate;
    case 2:
        std::snprintf(temp, maxStringLength, resultTemplate.c_str(), param1);
        break;
    case 3:
        std::snprintf(temp, maxStringLength, resultTemplate.c_str(), param2, param1);
        break;
    }
    return temp;
}
</code></pre>

<p>Note that in this revised version, only two classes, <code>Disassembler</code> and <code>OpCode</code> are used.</p>

<h2>Think of future expansion</h2>

<p>Some things that might be useful for future features might be to keep track of the program counter, perhaps also optionally printing it and the disassembled byte values as part of the listing.  It's also probably useful to think about how this might be used for other small 8-bit processors, such as the Z80 and 6502.  I believe that all that would be required would be a different input opcode file.</p>

<h2>Checking string lengths</h2>

<p>As to your question about how to check string lengths, the simplest would be to simply check when reading the opcode file.  No further checks are then necessary, since the opcode map does not change after construction.</p>
    </div>