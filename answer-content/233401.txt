<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>f = lambda mass: mass // 3 - 2
</code></pre>
</blockquote>

<p>I would question the spec and consider making this <code>max(0, mass // 3 - 2)</code>.</p>

<hr>

<blockquote>
<pre><code>def partial_sum(mass):
    return 0 if f(mass) &lt;= 0 else f(mass) + partial_sum(f(mass))
</code></pre>
</blockquote>

<p>DRY: calculate <code>f(mass)</code> once and store it in a local variable.</p>

<p><code>partial_sum</code> isn't the most descriptive name.</p>

<hr>

<blockquote>
<pre><code>def part_one():
    with open(r"../Inputs/day_1.txt") as file:
        return sum(f(int(i)) for i in file.readlines())

def part_two():
    with open(r"../Inputs/day_1.txt") as file:
        return sum(partial_sum(int(mass)) for mass in file.readlines())
</code></pre>
</blockquote>

<p>Again, DRY. This isn't as clear cut, but I think it's worth pulling out a function which takes a module mass and returns a total fuel mass, and then <code>part_one</code> calls it with <code>f</code> and <code>part_two</code> calls it with <code>partial_sum</code>.</p>

<p>Well done for using <code>with</code> for the file I/O.</p>
    </div>