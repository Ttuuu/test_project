<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some minor changes can be applied to your <code>unpair</code> function, you have the following code in the body of 'unpair':</p>

<blockquote>
<pre><code>final BigInteger i = integer.multiply(BigInteger.valueOf(8)).add(BigInteger.ONE).sqrt()
            .subtract(BigInteger.ONE)
            .divide(BigInteger.TWO);
return new BigInteger[]{
       i.add(BigInteger.valueOf(3)).multiply(i).divide(BigInteger.TWO).subtract(integer),
       integer.subtract(i.add(BigInteger.ONE).multiply(i).divide(BigInteger.TWO))
};
</code></pre>
</blockquote>

<p>You can store <code>BigInteger.valueOf(8)</code> and <code>BigInteger.valueOf(3)</code> into two constants to reuse in your calls:</p>

<pre><code>private static final BigInteger EIGHT = BigInteger.valueOf(8);
private static final BigInteger THREE = BigInteger.valueOf(3);
</code></pre>

<p>Similar approach for this code present in your function:</p>

<blockquote>
<pre><code>if (n == nearestPowerOfTwo) {
    System.arraycopy(unpair(splitIntegers[0], n / 2), 0, result, 0, n / 2);
    System.arraycopy(unpair(splitIntegers[1], n / 2), 0, result, n / 2, n / 2);
} else {
    System.arraycopy(unpair(splitIntegers[0], n - (n - nearestPowerOfTwo)), 0, result, 0, (n - (n - nearestPowerOfTwo)));
    System.arraycopy(unpair(splitIntegers[1], n - nearestPowerOfTwo), 0, result, (n - (n - nearestPowerOfTwo)), n - nearestPowerOfTwo);
}
</code></pre>
</blockquote>

<p>You can create variables storing repeated operations:</p>

<pre><code>if (n == nearestPowerOfTwo) {
    final int halfN = n / 2;
    System.arraycopy(unpair(splitIntegers[0], halfN), 0, result, 0, halfN);
    System.arraycopy(unpair(splitIntegers[1], halfN), 0, result, halfN, halfN);
} else {
    System.arraycopy(unpair(splitIntegers[0], nearestPowerOfTwo), 0, result, 0, nearestPowerOfTwo);
    final int nMinusNearestPowerOfTwo = n - nearestPowerOfTwo;
    System.arraycopy(unpair(splitIntegers[1], nMinusNearestPowerOfTwo), 0, result, nearestPowerOfTwo, nMinusNearestPowerOfTwo);
}
</code></pre>

<p>Probably there is a slight improvement of performance due to the changes, but the core math still remains the same. Below the code of the <code>unpair</code> function modified:</p>

<pre><code>private static final BigInteger EIGHT = BigInteger.valueOf(8);
private static final BigInteger THREE = BigInteger.valueOf(3);

// This method recursively unpairs an integer into [n] separate integers
public static BigInteger[] unpair(final BigInteger integer, final int n) {
    if (n &lt; 1)
        throw new IllegalArgumentException("Argument list length cannot be less than one!");
    if (n == 1)
        return new BigInteger[]{integer};
    if (n == 2) {
        final BigInteger i = integer.multiply(EIGHT).add(BigInteger.ONE).sqrt()
                .subtract(BigInteger.ONE)
                .divide(BigInteger.TWO);
        return new BigInteger[]{
                i.add(THREE).multiply(i).divide(BigInteger.TWO).subtract(integer),
                integer.subtract(i.add(BigInteger.ONE).multiply(i).divide(BigInteger.TWO))
            };
        }

    final BigInteger[] result = new BigInteger[n];
    final BigInteger[] splitIntegers = unpair(integer, 2);

    final int nearestPowerOfTwo = nearestPowerOfTwo(n);

    if (n == nearestPowerOfTwo) {
        final int halfN = n / 2;
        System.arraycopy(unpair(splitIntegers[0], halfN), 0, result, 0, halfN);
        System.arraycopy(unpair(splitIntegers[1], halfN), 0, result, halfN, halfN);
    } else {
        System.arraycopy(unpair(splitIntegers[0], nearestPowerOfTwo), 0, result, 0, nearestPowerOfTwo);
        final int nMinusNearestPowerOfTwo = n - nearestPowerOfTwo;
        System.arraycopy(unpair(splitIntegers[1], nMinusNearestPowerOfTwo), 0, result, nearestPowerOfTwo, nMinusNearestPowerOfTwo);
    }

    return result;
}
</code></pre>
    </div>