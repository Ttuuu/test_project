<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Here's one:</h2>

<pre><code>number_regex = re.compile(
    r'^[-+]?(?:(?:(?:[1-9](?:_?\d)*|0+(_?0)*)|(?:0[bB](?:_?[01])+)'
    r'|(?:0[oO](?:_?[0-7])+)|(?:0[xX](?:_?[0-9a-fA-F])+))'
    r'|(?:(?:(?:\d(?:_?\d)*)?(?:\.(?:\d(?:_?\d)*))|(?:\d(?:_?\d)*)\.)'
    r'|(?:(?:(?:\d(?:_?\d)*)|(?:(?:\d(?:_?\d)*)?(?:\.(?:\d(?:_?\d)*))'
    r'|(?:\d(?:_?\d)*)\.))(?:[eE][-+]?(?:\d(?:_?\d)*)))))$',
    re.UNICODE)
</code></pre>

<h2>But seriously, Python numbers are complicated</h2>

<p>If you really a regex that will match <strong>ALL</strong> valid forms of Python numbers, it will be a complex regex.  Integers include decimal, binary, octal, and hexadecimal forms.  Floating point numbers can be in exponent form.  As of version 3.6 all kinds of numbers can have '_' in them, but it can't be first or last. And integers &gt; 0 can't start with '0' unless it's 0b 0o or 0x</p>

<p>From the Python documentation, here is the BNF for <code>integer</code>:</p>

<pre><code>integer      ::=  decinteger | bininteger | octinteger | hexinteger
decinteger   ::=  nonzerodigit (["_"] digit)* | "0"+ (["_"] "0")*
bininteger   ::=  "0" ("b" | "B") (["_"] bindigit)+
octinteger   ::=  "0" ("o" | "O") (["_"] octdigit)+
hexinteger   ::=  "0" ("x" | "X") (["_"] hexdigit)+
nonzerodigit ::=  "1"..."9"
digit        ::=  "0"..."9"
bindigit     ::=  "0" | "1"
octdigit     ::=  "0"..."7"
hexdigit     ::=  digit | "a"..."f" | "A"..."F"
</code></pre>

<p>and here is the BNF for <code>floatnumber</code>:</p>

<pre><code>floatnumber   ::=  pointfloat | exponentfloat
pointfloat    ::=  [digitpart] fraction | digitpart "."
exponentfloat ::=  (digitpart | pointfloat) exponent
digitpart     ::=  digit (["_"] digit)*
fraction      ::=  "." digitpart
exponent      ::=  ("e" | "E") ["+" | "-"] digitpart
</code></pre>

<p>Note that the '+' or '-' isn't technically part of the number; it is a unary operator.  But it is easy enough to include an optional sign in the regex.</p>

<p>To create the regex, simply translate the BNF into the corresponding regex patterns.  Using non-grouping parenthesis (?: ) and f-strings helps a lot (rf"..." is a raw format string).</p>

<p>Integer:</p>

<pre><code>decint = r"(?:[1-9](?:_?\d)*|0+(_?0)*)"
binint = r"(?:0[bB](?:_?[01])+)"
octint = r"(?:0[oO](?:_?[0-7])+)"
hexint = r"(?:0[xX](?:_?[0-9a-fA-F])+)"
integer = rf"(?:{decint}|{binint}|{octint}|{hexint})"
</code></pre>

<p>floatnumber:</p>

<pre><code>digitpart = r"(?:\d(?:_?\d)*)"
exponent = rf"(?:[eE][-+]?{digitpart})"
fraction = rf"(?:\.{digitpart})"
pointfloat = rf"(?:{digitpart}?{fraction}|{digitpart}\.)"
exponentfloat = rf"(?:(?:{digitpart}|{pointfloat}){exponent})"
floatnumber = rf"(?:{pointfloat}|{exponentfloat})"
</code></pre>

<p>and put it all together, with an optional sign, to get:</p>

<pre><code>number = re.compile(rf"^[-+]?(?:{integer}|{floatnumber})$")
</code></pre>

<p>Which is how I got the regex at the top of this answer.  This has not been thoroughly tested, just spot checked:</p>

<pre><code>tests = """
    0
    1
    123
    100_000
    1_2_3
    1000000
    1.0
    1.
    .2
    0.2
    3.4
    1_234.567_89
    0o123
    0b1111_0000
    0X12_34_ab_cd
    1e-10
    1E001
    .2e-2
"""
tests = tests.split()

for s in tests:
    m = number.match(s)
    print(f"'{s}' =&gt; {m[0] if m else 'NOT a number'}")
</code></pre>
    </div>