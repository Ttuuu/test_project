<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Best practice is to get away from manipulating date strings yourself. And use <code>Date</code> types in your model. </p>

<p>So, when you parse the JSON, use <code>DateFormatter</code> to convert the non-user-friendly date strings to <code>Date</code> objects. And when presenting the dates in the UI, use another <code>DateFormatter</code> to present the date in a nice, user-friendly format. I’d also suggest using <code>JSONDecoder</code> for decoding the JSON into your model, so you don’t have to sprinkle your code with cryptic, error-prone, dictionary keys.</p>

<p>So, first, I would suggest specifying a date formatter when you decode. Because most of the dates are in the form <code>yyyy.MM.dd</code>, I’d use that. So, for example:</p>

<pre><code>do {
    let decoder = JSONDecoder()
    let formatter = DateFormatter()
    formatter.locale = Locale(identifier: "en_US_POSIX")
    formatter.dateFormat = "yyyy.MM.dd"
    decoder.dateDecodingStrategy = .formatted(formatter)
    let result = try decoder.decode([Vehicle].self, from: data)
    print(result)
} catch {
    print(error)
}
</code></pre>

<p>The trick, though, is that one field, <code>completedDate</code> in <code>MOTTest</code>, uses a different string format, namely, <code>yyyy.MM.dd HH:mm:ss</code>, so I’d have <code>JSONDecoder</code> just parse that as a string, but then have a computed property to translate that one date/time string into a <code>Date</code>:</p>

<pre><code>struct Vehicle: Decodable {
    let registration: String
    let make: String
    let model: String
    let firstUsedDate: String
    let fuelType: String
    let primaryColour: String
    let vehicleId: String
    let registrationDate: Date
    let manufactureDate: Date
    let engineSize: String
    let motTests: [MOTTest]
}

struct MOTTest: Decodable {
    private static let formatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.locale = Locale(identifier: "en_US_POSIX")
        formatter.dateFormat = "yyyy.MM.dd HH:mm:ss"
        return formatter
    }()

    let completedDateString: String
    var completedDate: Date? { MOTTest.formatter.date(from: completedDateString) }
    let testResult: String
    let expiryDate: Date?
    let odometerValue: String
    let odometerUnit: String
    let odometerResultType: String
    let motTestNumber: String
    let rfrAndComments: [ReasonForRejection]

    private enum CodingKeys: String, CodingKey {
        case completedDateString = "completedDate"
        case testResult, expiryDate, odometerValue, odometerUnit, odometerResultType, motTestNumber, rfrAndComments
    }
}

struct ReasonForRejection: Decodable {
    let text: String
    let type: String
    let dangerous: Bool
}
</code></pre>

<p>That way, <code>JSONDecoder</code> not only does the decoding for us to our model structure (avoiding that unstructured collection returned by <code>JSONSerialization</code>), but it also converts all of those <code>yyyy.MM.dd</code> strings to <code>Date</code> instances for us. And for <code>completedDate</code>, our computed property takes care of that for us.</p>

<hr>

<p>By the way, I used the following <a href="https://dvsa.github.io/mot-history-api-documentation/" rel="nofollow noreferrer">sample JSON</a>:</p>

<pre><code>[
    {
        "registration": "ZZ99ABC",
        "make": "FORD",
        "model": "FOCUS",
        "firstUsedDate": "2010.11.13",
        "fuelType": "Petrol",
        "primaryColour": "Yellow",
        "vehicleId": "4Tq319nVKLz+25IRaUo79w==",
        "registrationDate": "2010.11.13",
        "manufactureDate": "2010.11.13",
        "engineSize": "1800",
        "motTests":[
            {
                "completedDate": "2013.11.03 09:33:08",
                "testResult": "PASSED",
                "expiryDate": "2014.11.02",
                "odometerValue": "47125",
                "odometerUnit": "mi",
                "odometerResultType": "READ",
                "motTestNumber": "914655760009",
                "rfrAndComments": []
            },
            {
                "completedDate": "2013.11.01 11:28:34",
                "testResult": "FAILED",
                "odometerValue": "47118",
                "odometerUnit": "mi",
                "odometerResultType": "READ",
                "motTestNumber": "841470560098",
                "rfrAndComments":[
                    {
                        "text": "Front brake disc excessively pitted (3.5.1h)",
                        "type": "FAIL",
                        "dangerous": true
                    },
                    {
                        "text": "Nearside Rear wheel bearing has slight play (2.6.2)",
                        "type": "ADVISORY",
                        "dangerous": false
                    }
                ]
            },
            {
                "completedDate": "2018.05.20 11:28:34",
                "testResult": "FAILED",
                "odometerValue": "57318",
                "odometerUnit": "mi",
                "odometerResultType": "READ",
                "motTestNumber": "741489560458",
                "rfrAndComments":[
                    {
                        "text": "Nearside Parking brake efficiency below requirements (1.4.2 (a) (i))",
                        "type": "MAJOR",
                        "dangerous": false
                    },
                    {
                        "text": "Front brake disc excessively pitted (3.5.1h)",
                        "type": "DANGEROUS",
                        "dangerous": false
                    },
                    {
                        "text": "tyres wearing unevenly",
                        "type": "USER ENTERED",
                        "dangerous": true
                    }
                ]
            }
        ]
    },
    {
        "registration": "YY09DEF",
        "make": "BMW",
        "model": "Z4",
        "firstUsedDate": "2009.01.25",
        "fuelType": "Petrol",
        "primaryColour": "Green",
        "vehicleId": "3Fv916dPLGx=43PRaKa45e++",
        "registrationDate": "2009.01.25",
        "manufactureDate": "2009.01.25",
        "engineSize": "1800",
        "motTests":[
            {
                "completedDate": "2012.01.10 10:27:56",
                "testResult": "PASSED",
                "expiryDate": "2013.01.09",
                "odometerValue": "12345",
                "odometerUnit": "mi",
                "odometerResultType": "READ",
                "motTestNumber": "345655760009",
                "rfrAndComments": []
            }
        ]
    }
]
</code></pre>

<hr>

<p>Needless to say, if you want to decode manually, like you did in your question, just have two parsing date formatters, one for the <code>yyyy.MM.dd</code> format and another for the <code>yyyy.MM.dd HH:mm:ss</code> format. </p>

<hr>

<p>Finally, you might ask “how do I show these <code>Date</code> objects in my UI?” </p>

<p>You define UI date formatters:</p>

<pre><code>let dateOnlyFormatter: DateFormatter = {
    let formatter = DateFormatter()
    formatter.dateStyle = .medium
    return formatter
}()

let dateTimeFormatter: DateFormatter = {
    let formatter = DateFormatter()
    formatter.dateStyle = .medium
    formatter.timeStyle = .medium
    return formatter
}()
</code></pre>

<p>Then you can do things like:</p>

<pre><code>if let date = result.first?.motTests.first?.expiryDate {
    let string = dateOnlyFormatter.string(from: date)
    print("Expiry date:", string)
}
</code></pre>

<blockquote>
  <p>Expiry date: 2 Nov 2014</p>
</blockquote>

<p>And</p>

<pre><code>if let date = result.first?.motTests.first?.completedDate {
    let string = dateTimeFormatter.string(from: date)
    print("Completed date:", string)
}
</code></pre>

<blockquote>
  <p>Completed date: 3 Nov 2013 at 9:33:08</p>
</blockquote>

<p>Clearly, use whatever <code>dateStyle</code> and <code>timeStyle</code> you want. But the idea is that we’ll show these strings in a nice, localized format as dictated by the user’s device settings.</p>
    </div>