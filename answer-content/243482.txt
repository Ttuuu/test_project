<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Names</h1>

<p>I've renamed:</p>

<ul>
<li><code>hmn_*</code> -&gt; <code>human_*</code></li>
<li><code>cpt_*</code> -&gt; <code>computer_*</code></li>
<li><code>g1</code> -&gt; <code>max_score</code></li>
<li><code>human_1</code> -&gt; <code>human_name</code></li>
<li><code>game_score</code> -&gt; <code>print_scores</code></li>
<li><code>game_running</code> -&gt; <code>check_scores</code></li>
<li><code>rps</code> -&gt; <code>start</code></li>
<li><code>rps_running</code> -&gt; <code>running</code></li>
<li><code>rdm</code> -&gt; <code>random</code> </li>
<li><code>GameOptions</code> -&gt; <code>GAME_OPTIONS</code> (we usually use pascal case for a <code>class</code> in Python, and capitalization for variable constants)</li>
</ul>

<p>Reason for all this renaming was to make it clear to an outside reader what all the variables mean without having to look past their declaration. If you ever revisit this code, you don't want to have to dive deep into it every time.</p>

<p>As for renaming the functions, we are now able to tell what they do without diving into their bodies. For example, <code>print_scores</code> clearly tells us that it prints the status of the scores.</p>

<h1><code>check_scores</code></h1>

<p>Currently you have three different outer <code>if</code>s corresponding to <code>max_score</code> equaling 3, 5 or 7. In each of these <code>if</code>s, you check if <code>human_score</code> or <code>computer_score</code> are greater than half of the total possible score. This entire function can be simplified by making this comparison work for any value of <code>max_score</code>:</p>

<pre><code>def check_scores():
    global running, max_score

    if human_score &gt; max_score / 2:
        running = False
        print(f"{human_1} Wins!")

    elif computer_score &gt; max_score / 2:
        running = False
        print("Computer Wins!")
</code></pre>

<p>Since <code>check_scores</code> can only be possibly called if <code>running == True</code>, we don't need to reassign it to <code>True</code> in the <code>else</code>, so we can get rid of that.</p>

<h1><code>start</code></h1>

<p>You can make the <code>input</code> call for <code>human_temp</code> a function such that the prompt isn't specified twice in the code:</p>

<pre><code>def get_human_temp():
    return input("""Please select from the following:
                        1 - Rock
                        2 - Paper
                        3 - Scissors
        \n""")
</code></pre>

<p>This changes the <code>human_temp</code> <code>while</code> loop to:</p>

<pre><code>human_temp = get_human_temp()

while human_temp not in ["1", "2", "3"]:
    print("That was not a acceptable input!")
    human_temp = get_human_temp()
</code></pre>

<p>Ah, this is a do-while loop! If you're on Python 3.8, you can use the <a href="https://www.python.org/dev/peps/pep-0572/" rel="nofollow noreferrer">walrus operator</a>:</p>

<pre><code>while (human_temp := get_human_temp()) not in ["1", "2", "3"]:
    print("That was not a acceptable input!")
</code></pre>

<p>For your entire chain of <code>elif</code>s checking whether the human won, a more concise way to do is it to check if <code>human_final - 1 == computer</code>. This works for any <code>human_final</code> except 0. To make it work for 0, we would need to check <code>human_final + 2 == computer</code>. We can combine these two checks concisely as follows:</p>

<pre><code>if human_final == computer:
    print('Tie Game!')

elif computer in (human_final - 1, human_final + 2):
    print('You Win')
    human_score += 1

else:
    print('You Lose')
    computer_score += 1
</code></pre>

<p>I believe that <code>elif human_final == 0 and computer == 3</code> was a subtle bug in your original code, <code>computer</code> should have been checked against 2.</p>

<p>You can think of the <code>elif</code> as checking whether <code>human_final</code> is one ahead of <code>computer</code> in <code>GAME_OPTIONS</code>, while accounting for wrapping around <code>GAME_OPTIONS</code>.</p>

<h1>Global State</h1>

<p>There's a lot of global state in your program (show by all the <code>global</code> calls). We can use a <code>class</code> to store the state for each specific game. This state includes <code>max_score</code> (describes when a particular game ends), <code>human_name</code> (describes who is playing the game) and <code>human_score</code> / <code>computer_score</code> / <code>running</code> (describes current state of the game). Let's call this <code>class</code> <code>Game</code>, with an initialization method like this:</p>

<pre><code>def __init__(self, max_score, human_name):
    self.max_score = max_score
    self.human_name = human_name

    self.human_score = 0
    self.computer_score = 0
    self.running = False
</code></pre>

<p>We would then put all of your methods using global state in <code>Game</code>, with <code>self</code> prepended to all the variables we have here in our <code>__init__</code> method.</p>

<p>As for the code that is run before we even start the game (the code responsible for fetching <code>human_name</code> and <code>max_score</code>), we can put this in an <code>if __name__ == "__main__"</code> block. This makes it so we can use <code>Game</code> <a href="https://stackoverflow.com/questions/419163/what-does-if-name-main-do">from another module</a> without having all the <code>input</code>-specific code running. </p>

<p>Here's the final code, with some very slight consistency changes (such as standardizing the type of quotation mark you use, and getting rid of unnecessary <code>f</code>s at the beginning of unformatted strings):</p>

<pre><code># Rock Paper Scissors

import random


def get_human_temp():
    return input("""Please select from the following:
                        1 - Rock
                        2 - Paper
                        3 - Scissors
        \n""")


GAME_OPTIONS = ["Rock", "Paper", "Scissors"]


class Game:
    def __init__(self, max_score, human_name):
        self.max_score = max_score
        self.human_name = human_name

        self.human_score = 0
        self.computer_score = 0
        self.running = False

    def print_scores(self):
        print(f"\n The current score is {self.human_score} for you and {self.computer_score} for the computer \n")

    def check_scores(self):
        if self.human_score &gt; self.max_score / 2:
            self.running = False
            print(f"{self.human_name} Wins!")

        elif self.computer_score &gt; self.max_score / 2:
            self.running = False
            print("Computer Wins!")

    def start(self):
        self.running = True

        while self.running:
            while (human_temp := get_human_temp()) not in ["1", "2", "3"]:
                print("That was not a acceptable input!")

            human_final = int(human_temp) - 1
            print(f"You Chose: {GAME_OPTIONS[human_final]}")

            computer = random.randint(0, 2)
            print(f"Computer Chose: {GAME_OPTIONS[computer]}\n")

            if human_final == computer:
                print("Tie Game!")

            elif computer in (human_final - 1, human_final + 2):
                print("You Win")
                self.human_score += 1

            else:
                print("You Lose")
                self.computer_score += 1

            self.print_scores()
            self.check_scores()


if __name__ == "__main__":
    print("Welcome to Rock/Paper/Scissors!!! \n")

    max_score = input("Would you like to play a best of 3, 5 or 7: ")

    while max_score not in ["3", "5", "7"]:
        max_score = input("Incorrect Response, please select 3, 5, or 7: ")

    max_score = int(max_score)
    human_name = input("Please enter your name: ")

    game = Game(max_score, human_name)
    game.start()
</code></pre>
    </div>