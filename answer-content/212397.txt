<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, thumbs up on including a documentation block at the beginning.</p>

<p>When trying to run the segment, I get</p>

<pre><code>Traceback (most recent call last):
  File "conjecture.py", line 28, in &lt;module&gt;
    print(conjecture(text))
  File "conjecture.py", line 19, in conjecture
    traj = {int(j.split(" ")[0]): int(j.split(" ")[1]) for j in text.split("\n")}    #Processes the text file into a dict mapping numbers to their trajectory length.
  File "conjecture.py", line 19, in &lt;dictcomp&gt;
    traj = {int(j.split(" ")[0]): int(j.split(" ")[1]) for j in text.split("\n")}    #Processes the text file into a dict mapping numbers to their trajectory length.
IndexError: list index out of range
</code></pre>

<p>Turns out that when I saved the output of the link, there were empty trailing lines. After fixing that, I could get it to run.</p>

<p>Furthermore, I see several issues with this implementation:</p>

<ol>
<li>The <code>conjecture</code> function is doing a lot of the work, with several lines that are quite filled with operations, meaning it's hard to find out what it's doing.</li>
<li>A dictionary can contain a value multiple times, and in fact does. For instance, both 5 and 32 have a length of 5 (5 -&gt; 16 -&gt; ...) and (32 -&gt; 16 -&gt; ...). For longer lengths, there will be more ways in which it can be obtained.</li>
<li>Floating point arithmetic in a fully integral problem seems like an issue.</li>
<li>The file is opened, and then not immediately closed. For this it's not really an issue, but in general one should use a contextmanager to clean up used resources as quickly as possible.</li>
<li>The semantics of the output isn't really clear to me, but I'll probably figure out a bit during picking it apart.</li>
<li>It doesn't use a <code>__main__</code> block, which would be beneficial for re-usable code.</li>
<li>The <code>conjecture</code> function returns a string, instead of a dictionary.</li>
</ol>

<p>So let's start with your implementation:</p>

<pre><code>'''
*    I had a conjecture that maximal trajectory lengths for the collatz conjecture were yielded by numbers of the form (2**n)-1. This program attempts to test it.
*    "conjecture()" finds the number with the highest trajectory lengths in a given range. The ranges are of the form [2**n, 2**(n+1)).
'''

import math, pprint

f = open("CollatzConjecture.txt")
text =  f.read()

def key(value, dct):
    for key in dct.keys():
        if dct[key] == value:
            return key
    return None


def conjecture(text):
    traj = {int(j.split(" ")[0]): int(j.split(" ")[1]) for j in text.split("\n")}    #Processes the text file into a dict mapping numbers to their trajectory length.
    result = {}
    bound = math.floor(math.log(len(traj),2))
    traj2 = {num: traj[num] for num in list(traj.keys())[:2**bound+1]}    #Slices the dictionary to receive the section of interest.
    for st in (2**x for x in range(1, bound+1)):        #Generator for powers of 2.
        slce = list(traj2.items())[int((math.log(st,2)-1)**2):st]    #Slices "traj2" into powers of 2.
        result[st] = key(max([n[1] for n in slce]), traj2)
    return pprint.pformat(result)

print(conjecture(text))
</code></pre>

<h1>Use a <code>if __name__ == '__main__'</code> segment.</h1>

<p>One of the best places to start with such a script (especially if you want to make it reusable!) is to place the "main" code (file-mangling) inside a <code>main</code> block:</p>

<pre><code>... function definitions ...

if __name__ == '__main__':
    f = open("CollatzConjecture.txt")
    text = f.read()
    print(conjecture(text))
</code></pre>

<h1>Move parsing the trajectories out of <code>conjecture</code>.</h1>

<p>Your conjecture has nothing to do with the piece of text, but about the length of the trajectories. We shouldn't care how these lengths are generated, calculated or parsed inside the <code>conjecture</code> function. But the current implementation does.</p>

<p>By moving out the <code>text</code> to <code>traj</code> transformation, we make <code>conjecture</code> more general.</p>

<pre><code>...

def conjecture(traj):
    result = {}
    bound = math.floor(math.log(len(traj),2))
    ...

if __name__ == '__main__':
    f = open("CollatzConjecture.txt")
    text = f.read()
    traj = {int(j.split(" ")[0]): int(j.split(" ")[1]) for j in text.split("\n")}    #Processes the text file into a dict mapping numbers to their trajectory length.
    print(conjecture(traj))
</code></pre>

<p>And we can then split the parsing into a separate function, where we use a context manager.</p>

<pre><code>...

def parse_lengths(filename):
    with open(filename) as fp:
        #Processes the text file into a dict mapping numbers to their trajectory length.
        return {int(j.split(" ")[0]): int(j.split(" ")[1]) for j in fp}

...

if __name__ == '__main__':
    traj = parse_lengths("CollatzConjecture.txt")
    print(conjecture(traj))
</code></pre>

<p>And similarly, move the pformat out of conjecture:</p>

<pre><code>def conjecture(text):
    result = {}
    ...
    return result

if __name__ == '__main__':
    traj = parse_lengths("CollatzConjecture.txt")
    pprint.pprint(conjecture(traj))
</code></pre>

<h1>Simplify <code>conjecture</code>.</h1>

<p>Now that we're left with a <code>conjecture</code> method that does only things related to the conjecture, we can look at it a bit more:</p>

<pre><code>def conjecture(traj):
    result = {}
    bound = math.floor(math.log(len(traj),2))
    traj2 = {num: traj[num] for num in list(traj.keys())[:2**bound+1]}    #Slices the dictionary to receive the section of interest.
    for st in (2**x for x in range(1, bound+1)):        #Generator for powers of 2.
        slce = list(traj2.items())[int((math.log(st,2)-1)**2):st]    #Slices "traj2" into powers of 2.
        result[st] = key(max([n[1] for n in slce]), traj2)
    return result
</code></pre>

<p>Starting with this expression: <code>int((math.log(st,2)-1)**2)</code>, what does it even do?! First it takes the 2-logarithm, substracts 1, and then squares it. At first I suspected that you wanted the previous power of two (and tested it). But, what actually happens is that 64 (2<sup>6</sup>) becomes 25 (5<sup>2</sup>), and also 2048 (2<sup>11</sup>) becomes 100 (10<sup>2</sup>). My basic guess is that this is incorrect, and you mean 64 =&gt; 32, 128 =&gt; 64, and so forth. Assuming that's what you want, you can just divide by two.</p>

<pre><code>def conjecture(traj):
    result = {}
    bound = math.floor(math.log(len(traj),2))
    traj2 = {num: traj[num] for num in list(traj.keys())[:2**bound+1]}    #Slices the dictionary to receive the section of interest.
    for st in (2**x for x in range(1, bound+1)):        #Generator for powers of 2.
        slce = list(traj2.items())[st // 2:st]    #Slices "traj2" into powers of 2.
        result[st] = key(max([n[1] for n in slce]), traj2)
    return result
</code></pre>

<p>Surprisingly, though, this does not alter the output.</p>

<p>Next up is the fact that I see slices being taken of dictionaries (after casting to a list). In older Python versions (before 3.6) that might cause surprising results, as dictionaries are not necessarily ordered by value, though in this case it does turn out to be that way it seems. It's better to explicitly filter out the values that you want.</p>

<h1>Final:</h1>

<p>In the end, I found myself settling on this.</p>

<pre><code>'''
*    I had a conjecture that maximal trajectory lengths for the collatz conjecture were yielded by numbers of the form (2**n)-1. This program attempts to test it.
*    "conjecture()" finds the number with the highest trajectory lengths in a given range. The ranges are of the form [2**n, 2**(n+1)).
'''

import pprint

def key(value, dct):
    for key in dct.keys():
        if dct[key] == value:
            return key
    return None


def parse_lengths(filename):
    with open(filename) as fp:
        #Processes the text file into a dict mapping numbers to their trajectory length.
        return {int(j.split(" ")[0]): int(j.split(" ")[1]) for j in fp}


def conjecture(traj):
    result = {}
    traj_size = len(traj)
    lower, higher = 1, 2
    while True:
        if higher &gt; traj_size:
            # We don't have all the data for this range available.
            break

        max_in_slice = max(length for num, length in traj.items() if lower &lt;= num &lt;= higher)

        result[higher] = key(max_in_slice, traj)

        # Prepare data for next iteration.
        lower, higher = lower * 2, higher * 2

    return result

if __name__ == '__main__':
    traj = parse_lengths('CollatzConjecture.txt')
    pprint.pprint(conjecture(traj))
</code></pre>

<p>I'm also not quite happy with this yet, as the "key" function is still bothering me as well (we could iterate over <code>.items()</code> instead of <code>.keys()</code> to simplify).</p>

<p>I hope this at least helps a bit.</p>
    </div>