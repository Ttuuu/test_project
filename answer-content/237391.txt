<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The code fails to build for me, but that could be platform and compiler compatibility. I attempted to build this on Windows 10 using CLion and Visual Studio 2019. Here are the errors and warnings I received:</p>

<blockquote>
  <p>main.cpp(9): error C2672: 'irqus::typeek': no matching overloaded function found<br>
  main.cpp(9): error C2893: Failed to specialize function template 'unknown-type irqus::typeek(irqus::typestring)'<br>
  typestring.hpp(110): note: see declaration of 'irqus::typeek'<br>
  main.cpp(9): note: With the following template arguments:<br>
  main.cpp(9): note: 'C={75, 101, 121, 101, 100, 69, 118, 101, 110, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}'<br>
  main.cpp(9): error C3203: 'KeyPair': unspecialized class template can't be used as a template argument for template parameter 'ObservableTypes', expected a real type</p>
</blockquote>

<p>Note: line 9 in main.cpp is where the macro <code>MV_KEY(x)</code> is being used and the expansion of that macro is failing.</p>

<h2>Maintainability</h2>

<p>The most major issues in this code maintainability and expand-ability. When software engineer/developer designs a solution for a product they need to keep in mind that the product may be around for a long time and bug fixes and feature requests will be very common, especially in the early stages. The code must be easy to read, write, debug and expand. The code should be modular so that parts that are working as expected will not need to be changed when other portions of the code need to be updated or corrected.</p>

<p>The structure of this program where all the classes and multiple namespaces are declared in a single header file is a problem. The file <code>messenger.hpp</code> should be broken up into multiple files, each class within <code>messenger.hpp</code> should have it's own header file. As an aide in building the project, each class should also have it's own <code>.cpp</code> file as well. Separating the declarations from the executable code reduces build time and eases shipping bug fixes to the users.</p>

<p>It is possible that <code>messenger.hpp</code> can be a single file that includes all the other messenger header file to ease implementation.</p>

<h2>Using Macros in C++</h2>

<p>Macros in C++ are generally frowned upon, a major reason is because macro's can't be debugged and there is no type checking in macros, There are a few good uses of macros, primarily as <a href="https://en.wikipedia.org/wiki/Include_guard" rel="nofollow noreferrer">Include Guards</a> that prevent an included file from being included a multiple times (can cause compilation errors). There is also a discussion of this on <a href="https://stackoverflow.com/questions/8020113/c-include-guards">stackoverflow</a>. You may want to read <a href="https://stackoverflow.com/questions/14041453/why-are-preprocessor-macros-evil-and-what-are-the-alternatives">why macros are considered evil as well</a>.</p>

<p>One alternative to macros are templates. In the C programming language templates are not available and macros are used for generic functions.</p>

<p>Including a whole library which is macros (<code>typestring.hpp</code>) is somewhat questionable in C++.</p>

<h2>Object Oriented Programming</h2>

<p>It's not really clear why there is a <code>struct</code> rather than a <code>class</code> that instantiates the <code>MyMultiObserver</code> objects.</p>

<h2>Include Files</h2>

<p>The file <code>main.cpp</code> should directly include <code>&lt;iostream&gt;</code>, and it should be removed from <code>messenger.hpp</code> since IO is only performed in main.cpp.</p>

<h2>Complexity</h2>

<p>In addition to the complexity caused by declaring multiple classes in <code>messenger.hpp</code> the function <code>main()</code> is too complex (does too much) and could be broken up into 3 function.</p>
    </div>