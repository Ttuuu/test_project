<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Perhaps you could wrap bare <code>Socket</code>s in an auxiliary datatype that enabled buffering. Something like:</p>

<pre><code>data BufferedSocket = BufferedSocket [ByteString] Socket
</code></pre>

<p>Then you could define your own <code>recv</code> function like</p>

<pre><code>recv :: BufferedSocket -&gt; Int -&gt; IO (BufferedSocket,ByteString)
</code></pre>

<p>which looked at the buffer before actually trying to read data from the socket. Note that this version of <code>recv</code> returns a modified copy of the <code>BufferedSocket</code>, because now we carry some state that isn't captured in the mutable <code>Socket</code> reference.</p>

<p>(Perhaps this extra buffer state should be put in a separate mutable reference, an <a href="http://hackage.haskell.org/package/base-4.12.0.0/docs/Data-IORef.html#t:IORef" rel="nofollow noreferrer"><code>IORef</code></a> for example. We are already in mutable-land after all.)</p>

<p>We also need a function</p>

<pre><code>putBack :: ByteString -&gt; BufferedSocket -&gt; BufferedSocket
</code></pre>

<p>for prepending the data.</p>

<hr>

<p>Another option could consist in using a streaming library like <a href="http://hackage.haskell.org/package/streaming" rel="nofollow noreferrer">streaming</a> or <a href="http://hackage.haskell.org/package/streaming-bytestring" rel="nofollow noreferrer">streaming-bytestring</a> and build a <a href="http://hackage.haskell.org/package/streaming-0.2.3.0/docs/Streaming.html#t:Stream" rel="nofollow noreferrer"><code>Stream</code></a> of <code>ByteString</code>s out of the <code>Socket</code>. Prepending would consist simply in concatenating a pure <code>Stream</code> that yields the <code>ByteString</code> to the effectful stream that reads from the socket, using <code>&gt;&gt;</code> or <code>*&gt;</code>.</p>

<pre><code>let socketStream' = S.yield someByteStringValue *&gt; socketStream
</code></pre>

<p>Note that the old <code>socketStream</code> value should <em>not</em> be reused!</p>

<p>This might have the disadvantage that you lose some control about how many bytes to "physically" read at each step, because typical <code>Stream</code>s don't take "feedback" from downstream about the number of bytes to receive next.</p>
    </div>