<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Restructuring and optimization</h3>

<p>The initial approach introduces inefficient file processing as <code>get_content</code> function reads <strong>all</strong> lines from the input file into a list at once and holds that list in memory throughout the entire processing. The traversal of the lines that were read is then redundantly repeated in <code>run_code</code> function.<br>The more efficient way is to convert <code>get_content</code> into a <em>generator</em> function and consume one line from file at a time on demand.</p>

<p>The optimized <strong><code>get_content</code></strong> function:</p>

<pre><code>def get_content(file: str) -&gt; List[str]:
    """
    Yields lines from the passed file path
    :param file -&gt; str: File to read content
    :return List[str]: Content in file
    """
    with open(file, "r") as file:
        for line in file:
            yield line.rstrip()
</code></pre>

<hr>

<p><code>run_code</code> function is renamed to <strong><code>parse_code</code></strong></p>

<hr>

<p><em>Inefficiency of validating and traversing <code>commands</code></em></p>

<p>In <code>parse_code</code> (formerly <code>run_code</code>) function the <strong><code>commands</code></strong> sequence is potentially being traversed <strong>twice</strong>:
once on <code>correct_syntax(commands)</code> call and then - on getting numbers <code>chr(get_number(fish)) for fish in commands</code>.<br>Moreover, consequent validations in this case may lead to redundant calculations.<br>Consider the following situation: <code>commands</code> contains 10 items, all of them passed <code>correct_syntax</code> check but then, the 9th item fails on <code>get_number</code> check. That causes 10 redundant operations/checks.</p>

<p>To optimize validations we notice that <code>is_fish</code> and <code>get_number</code> are conceptually dependent on the same context - <em>"<strong>fish</strong>"</em> and are intended to validate the same <em>"fish"</em> object.<br>Thus, those 2 validations are reasonably combined/consolidated into one validation function <strong><code>is_fish</code></strong>:</p>

<pre><code>def is_fish(fish: str) -&gt; bool:
    """
    Validates "fish" item
    Fish: Starts with &gt;&lt; ends with &gt; and has number inside
    A fish like so &gt;&lt;98g&gt; will fail the check

    """
    return fish.startswith("&gt;&lt;") and fish.endswith("&gt;") and fish[2:-1].isdigit()
</code></pre>

<p><code>get_number</code> function is now removed. <br>The <code>correct_syntax</code> function is renamed to <strong><code>get_fish_numbers</code></strong> and its responsibility now is <em>"Collect fish numbers from <strong>valid</strong> fishes"</em>:</p>

<pre><code>def get_fish_numbers(pond: List[str]) -&gt; bool:
    """
    Collects fish numbers with checking the syntax of the passed list of commands on the following criteria:

    Is a fish &gt;&lt;..&gt;

    Correct Example:
    &gt;&lt;98&gt; &gt;&lt;108&gt; &gt;&lt;56&gt;

    Incorrect Example:
    &gt;&lt;98&gt; &gt;&gt;&lt;&lt;76&gt;&gt; &gt;&lt;[108&gt;

    """
    fish_numbers = []
    for fish in pond:
        if not is_fish(fish):
            sys.exit(f"Incorrect Syntax: {fish}")
        fish_numbers.append(int(fish[2:-1]))

    return fish_numbers
</code></pre>

<hr>

<p>And finally the optimized <strong><code>parse_code</code></strong> function:</p>

<pre><code>def parse_code(code: List[str]):
    """
    Parse and output the passed Fishy Code
    """
    for line in code:
        # Clean up code and separate commands#
        commands = line.split(" ")

        # Check if line has multiple statements in it
        fish_numbers = get_fish_numbers(commands)
        if len(fish_numbers) &gt; 1:
            output = "".join(chr(num) for num in fish_numbers)
            print(output)
        else:
            print(chr(fish_numbers[0]))
</code></pre>
    </div>