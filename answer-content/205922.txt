<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Separation of concerns</h3>

<p>The problem has two distinct, independent components:</p>

<ul>
<li>Compute run length</li>
<li>Decide if two values are equal</li>
</ul>

<p>I agree that using <code>reduce</code> makes sense here to compute the run length.
If you separate this computation from the equality decision,
the logic of the reducer can become a lot simpler:</p>

<pre><code>  const reducer = (acc, val) =&gt; {
    if (acc.length &gt; 0 &amp;&amp; equals(acc[acc.length - 1][1], val)) {
      acc[acc.length - 1][0]++;
      return acc;
    }
    acc.push([1, val]);
    return acc;
  };
  return arr.reduce(reducer, []);
</code></pre>

<p>That is:</p>

<ul>
<li><p>When the accumulator is not empty, and the last element has matching value,
then increment the count of the last element, and return the accumulator.</p></li>
<li><p>Append <code>[1, val]</code> to the accumulator.</p></li>
<li><p>The accumulator starts empty.</p></li>
</ul>

<p>The equality condition is to be implemented.
You can even require the implementation to be passed in as parameter.</p>

<p>As @radarbob suggests,
it's good to get the run-length computation working without worrying about mixed value types.
The implementation of the <code>equals</code> function here is not interesting at all for run-length computation.
You can start with a simple <code>const equals = (a, b) =&gt; a === b</code>.
Having mixed values in the input doesn't affect at all the run-length computation logic.</p>

<p>The converse is also true: it should be possible to implement the equality logic independently from run-length.
This reduces your mental burden and helps you think clearly,
focusing on one problem at a time.
I came up with this:</p>

<pre><code>  const equals = (a, b) =&gt; {
    if (a === b) {
      return true;
    }
    if (typeof(a) !== typeof(b)) {
      return false;
    }
    if (Array.isArray(a)) {
      return arrayEquals([a, b]);
    }
    return false;
  };
</code></pre>

<p>This implementation handles some easy basic cases,
and delegates some non-trivial ones,
such as comparing arrays.
Your <code>arrayEquals</code> will work nicely for the purpose.
Looking at this implementation,
it's also quite clear what kind of values are supported:
primitive and arrays only.
(As far as we can trust the externalized <code>arrayEquals</code> implementation...)</p>
    </div>