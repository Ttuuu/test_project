<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The <code>ApplySortCore()</code> method could be made more dry  </p>

<pre><code>protected virtual void ApplySortCore(PropertyDescriptor property, ListSortDirection direction)
{
    this.SortProperty = property;
    this.SortDirection = direction;

    IEnumerable&lt;T&gt; items = null;
    if (direction == ListSortDirection.Ascending)
    {
        items = this.OrderBy(item =&gt; property.GetValue(item));
    }
    else
    {
        items = this.OrderByDescending(item =&gt; property.GetValue(item));
    }

    ResetItems(items.ToList ());

    IsSorted = true;
    OnListChanged(new ListChangedEventArgs(ListChangedType.Reset, property));
}  
</code></pre>

<hr>

<p>You should always try to code against interfaces instead of a concrete implementation.  </p>

<p>In the <code>ResetItems()</code> method you should either use an <code>IList&lt;TItem&gt;</code> or better an <code>IEnumerable&lt;TItem&gt;</code> for the input parameter.  </p>

<hr>

<p>The call to this <code>IndexOf()</code> method seems a little bit strange. You already have the items sorted why don't you just add the items one by one ?  </p>

<p>Because the methods are inherited from <code>Collection&lt;T&gt;</code> we can use the <code>Add()</code> method which simplifies the <code>ResetItems()</code> method to  </p>

<pre><code>private void ResetItems(IEnumerbale&lt;TItem&gt; items)
{
    base.ClearItems();

    foreach (var item in items)
    {
        base.Add(item);
    }
}
</code></pre>
    </div>