<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I would appreciate all criticism relevant to code, style, flow, camelCase vs underscore, and so forth. </p>
</blockquote>

<p>First, (contrary to Loki Astari's answer) I think your style is correct (i.e. please do not capitalize the first letter of your classes - keep them matching the <code>std::</code> style).</p>

<p>Regarding the APIs of your code:</p>

<ul>
<li><p>Your code doesn't enforce const correctness</p></li>
<li><p>For argument types, consider the following convention:</p>

<ul>
<li><p>Observed parameter (no modification of the value in the function)</p>

<pre><code>void function(const argument&amp; a);
</code></pre></li>
<li><p>I/O parameter (function modifies the parameter, not owner):</p>

<pre><code>void function(argument&amp; a); // a is modified in the function (I/O parameter)
</code></pre></li>
<li><p>Owned parameter:</p>

<pre><code>void function(argument a); // function "owns" a (gets it's own exclusive copy)
</code></pre></li>
</ul></li>
</ul>

<p>Following this, <code>push()</code> and <code>top()</code> should be written like this:</p>

<pre><code>template&lt;typename T&gt;
void stack&lt;T&gt;::push(T data) // pass by value here
{
    root = new node{ std::move(data), root }; // and move the value here
    ++elements;
}

template&lt;typename T&gt;
const T&amp;                // return a const T&amp;
stack&lt;T&gt;::top() const   // and function is const               
{
    if (!root)
        throw std::runtime_error("stack&lt;T&gt;::top: empty stack");
    return root-&gt;data;
}
</code></pre>

<p>Taking a parameter by value in push has these advantages:</p>

<ul>
<li>specifies ownership in the interface</li>
<li>enables you to use all constructors of type <code>T</code> here</li>
<li><p>is exception safe (if the instance of the arg cannot be created, code will fail before entering the function body).</p></li>
<li><p>The size API:</p>

<pre><code>int size();
</code></pre>

<p>Should be:</p>

<pre><code>std::size_t size() const;
</code></pre></li>
</ul>

<p>The print API has more problems:</p>

<ul>
<li><p>It clears the list (either rename to "destructive_print", or ensure the iteration is not destructive). If you implement it in a non-destructive way, mark it <code>const</code>.</p></li>
<li><p>It introduces a dependency on <code>std::cout</code> that has nothing to do with the functionality of objects. Ideally, it shouldn't be a member. If you still want to have it as a member, pass the output stream instance as a parameter.</p></li>
</ul>

<p>The constructor of the node class should construct a fully valid instance in one step. To decide on it's parameters, you should look at how you use it:</p>

<p>Usage example (your old code):</p>

<pre><code>root_node = new node;
root_node-&gt;node_data = data;
root_node-&gt;next = nullptr;
</code></pre>

<p>Optimal example (new client code):</p>

<pre><code>root_node = new node{ std::move(data), root_node }; // use std::move on the data
</code></pre>

<p>implies the node should be implemented like this:</p>

<pre><code>template &lt;class T&gt;
class stack {
    // ...
    struct node { // struct, because it is internal and only
                  // access will be in stack
                  // (i.e. we can guarantee correct use in client code)

         T *node_data;
         node* next;
    };
}
</code></pre>

<p>The size should also be of <code>std::size_t</code> type.</p>

<p>Your stack doesn't have a destructor. The destructor should call delete on each node, in an iteration).</p>

<p>Your print element skips the last element in the list, as you begin indexing from 1 instead of 0, to less than number of elements. This means you iterate [elements - 1] times.</p>

<p>The <code>pop()</code> implementation can be written with no special case for one element:</p>

<pre><code>template &lt;class T&gt;
void stack&lt;T&gt;::pop() {
    if(empty())
        throw std::runtime_error{"stack&lt;T&gt;::pop(): empty stack"};

    node* new_root = root_node-&gt;next;
    delete root_node;
    root_node = new_root;
    --elements;
}
</code></pre>

<p>Regarding the implementation of your class:</p>

<p>Do not print error messages, throw exceptions (this allows client code to decide what to do in case of an error, instead of forcing client code to get messages printed into it's application's output stream).</p>
    </div>