<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could try something like this:</p>
<pre><code>export class LoopStep {
    public onStart(): Promise&lt;void&gt; { // entry point
        return this.onLoop();
    }

    private onLoop(): Promise&lt;void&gt; {
        return this.loopAndResolve();
    }

    private loopAndResolve(): Promise&lt;void&gt; { // start loop
        if (this.isLooping) { // exit condition when turned to false
            this.player.setTime(this.start);
            this.player.play();
            setTimeout(() =&gt; this.loopAndResolve(), this.duration * 1000);
        } else {
            return Promise.resolve();
        }
    }
}

// Anywhere else
loopsStep.onStart().then(() =&gt; console.log('exiting loop successfully')); // OK
</code></pre>
<p>One of the best things of Typescript is the type safety. It's easier to keep track of the promises you're passing from one function to another if you declare them in the return type.</p>
<p>In your case, where you just want a cleaner way to resolve a <code>Promise</code>, you can use <code>Promise.resolve();</code>. It's pretty straightforward to use and very useful. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve" rel="nofollow noreferrer">DOCS</a></p>
<p>(Don't forget the parenthesis when calling <code>onStart</code>!)</p>
    </div>