<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Async/Await</h1>
<p>In a couple of places, you use <code>Task.Result</code> instead of <code>await Task</code>.
<a href="https://stackoverflow.com/a/47290354/7412948">This answer</a> explains more verbosely why this is considered bad practice, but the simple explanation is that <code>Task.Result</code> waits synchronously while <code>await Task</code> waits asynchronously.</p>
<h1>HttpClient</h1>
<p>You are correct that how the HttpClient is used can be improved. Since you are in dotnet core you have the ability to use DI and let the framework do the managing of the lifetime of your HttpClients.
There are a couple of ways to design this, and it depends on how the <code>ApiHttpClient</code> class is used and what its lifespan is.
If the class is short-lived (created for a controller to handle a request) then it can take an <code>HttpClient</code> as the only parameter in the constructor. This requires a bit of setup in the startup.cs methods for the instance to have the correct token and base url.
If the class is longer-lived then it can take an <code>IHttpClientFactory</code> and ask for an instance of <code>HttpClient</code> as it needs it.</p>
<h1>General</h1>
<h3>ApiHttpClient</h3>
<p>The <code>ApiHttpClient</code> class looks to be a helper class at first glance, but the class properties seem to be leaking information outside that indicates not everything is encapsulated as it should.</p>
<ol>
<li>The constructor takes in and then sets the <code>BaseApiUrl</code>, but that <code>BaseApiUrl</code> has a public getter/setter. My assumption is that this should not change over the lifespan of the class instance thus should not be settable and probably does not need to be gettable either. Both cases are fixed if the constructor takes an <code>HttpClient</code>/<code>IHttpClientFactory</code> instead.</li>
<li><code>FullApiUrl</code> is set in <code>ValidateUrl</code> and is publicly gettable/settable. This probably shouldn't be a property at all and should be local to the methods in which it is needed.</li>
<li><code>Token</code> - Same as <code>BaseApiUrl</code>, probably shouldn't be publicly accessible, and with HttpClient refactor won't belong to the class at all.</li>
<li>Code reuse could occur in many of the ApiClientAsync* methods. Consider having <code>ApiClientAsyncString</code> call <code>ApiClientAsyncStringNonJson</code> and then convert the result to Json.</li>
</ol>
<h3>ApiContentResponse/ApiValueContentResponse</h3>
<ol>
<li>The constructor calls an async method and does not await the result. Async Constructors do not exist, hence why the code probably exists in the state it is. Since the task is not awaited, there is no guarantee that once the constructor call is completed that any of the properties are actually set. The task could be waiting on <code>ReadAsStringAsync</code> indefinitely for all we know.
<ul>
<li>The best away that I can think is to provide the result of <code>ReadAsStringAsync</code> directly in the constructor, and possibly not provide the <code>HttpResponseMessage</code> if it is not needed.</li>
<li>A second option (if it exists) is to use a synchronous <code>ReadAsString</code> instead, but I would recommend this less than the first option.</li>
</ul>
</li>
</ol>
<h1>Code Confidence</h1>
<p>This might be a bit off-topic of the code posted specifically, but because it was mentioned in the original post I want to talk to it.</p>
<p>You mention that you are nearing release to production and you are getting nervous. A way to know that code is working is by testing it. There are many layers to this and all should be used to some extent.</p>
<ol>
<li><strong>Unit Testing</strong> can be used to know a specific piece of code that handles valid input/output, edge cases, and error cases correctly.</li>
<li><strong>Integration Testing</strong> can be used to verify one piece of (hopefully unit tested) code is using another piece of (hopefully unit tested) code correctly.</li>
<li><strong>Manual Testing</strong> is the final catch-all to get your eyes and hands on the product. Do some exploratory testing, make sure the GUIs look right.</li>
</ol>
<p>There the amount of these tests should form a pyramid in an ideal situation. The base and most by volume being unit tests followed next by integration tests and finally (and least of all) manual tests.</p>
<p>Finally, have a production go-live checklist. Automate as much of it as you can, but always have a smoke-test in place to verify certain critical pieces of the product are working when deployed.</p>
    </div>