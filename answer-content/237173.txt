<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Upon registration, don't send the real user password to the server, use Argon2 hash of the real password instead. In my understanding, it should be pretty hard for a server to infer the real password based on Argon2 hash and without salt.</p>
</blockquote>

<p>It makes it harder, by a constant factor. If the password is weak, it can still be found. Password based authentication should not be preferred, and if it is used, it should be surrounded by as many extra measures you can think of (with a maximum amount of tries and password strength indication to the user, for instance).</p>

<blockquote>
  <p>Use sha(email + password) to create deterministic salt. It allows users to log in from other devices and still pass password validation. In my understanding, deterministic salt doesn't make the resulting "API password" weaker.</p>
</blockquote>

<p>Well, kind of. If a adversary can guess then they can still precompute tables for a specific user, who may use different passwords on the same site for instance. This is detectable if you don't use a random salt.</p>

<blockquote>
  <p>Use API password to sign up. Server would only know the derived password and not the original one (entered and known by the user).</p>
</blockquote>

<p>So you don't use a username to authenticate? Or is that simply missing from your scheme? And you use a static value to sign up, send over an unencrypted line, that anybody may intercept? That cannot be right?</p>

<p>Are you going to search through all password hashes to get to the right one?</p>

<blockquote>
  <p>Create another Argon2 hash and use it as a key to AES-encrypt the JSON payload (AES-256/CBC/Pkcs).</p>
</blockquote>

<p>CBC with PKCS#7 padding is absolutely terrible as it allows for padding oracle attacks. 128 tries per byte, and that is if other plaintext oracle attacks cannot be made even more efficiently.</p>

<p>Creating another Argon2 hash means double the work for you, and still single the work to an attacker. Instead, you can split the key into two using a KBKDF function such as HKDF (or a poor mans KDF such as using HMAC with the secret as key and an info string as message to distinguish two or more keys).</p>

<blockquote>
  <p>Attach IV and random salt to encrypted payload. All of that is necessary to decrypt the payload later.</p>
</blockquote>

<p>Ah, so now you are using a random salt? If that's true, you don't need a random IV, because the key would be unique.</p>

<hr>

<p>All in all, your scheme is far from complete and far from bullet proof. Showing CBC in here shows the limited understanding of creating secure protocols. You're much better off using an existing one, e.g. TLS also has options for pre-shared keys. Those you can use if both sides can create a password hash.</p>

<p>If you would log in using that email address then you can send a random salt stored with the hash, and have the user perform HMAC over a random challenge using the result of passsword derivation Argon2 with the hash as key. That would be much more secure as a standalone authentication method.</p>

<hr>

<p>The code is already shortly referred to by Sam, so I won't go into it. It seems relatively clear, but I think you are due to rewrite it anyway.</p>
    </div>