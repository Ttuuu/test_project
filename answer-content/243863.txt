<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your program.</p>
<h2>Don't use <code>#pragma once</code></h2>
<p>The use of <code>#pragma once</code> is a common extension, but it's not in the standard and thus represents at least a potential portability problem.  It's also completely unnecessary in a <code>.cpp</code> file.  See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#sf8-use-include-guards-for-all-h-files" rel="nofollow noreferrer">SF.8</a></p>
<h2>Use the required <code>#include</code>s</h2>
<p>The code uses <code>std::condition_variable</code> which means that it should <code>#include &lt;condition_variable&gt;</code>.  It was not difficult to infer, but it helps reviewers if the code is complete.</p>
<h2>Use consistent formatting</h2>
<p>The code as posted has inconsistent spacing for the <code>#include</code> files. Most people find the version with a space to be more easily readable.  Pick a style and apply it consistently.</p>
<h2>Don't hardcode file names</h2>
<p>Generally, it's not a good idea to hardcode a file name in software, and generally especially bad if it's an absolute file name (as contrasted with one with a relative path).  Instead, it would be better to allow the user of the program to specify the name, as with a command line parameter.</p>
<h2>Don't use std::endl unless you really need to flush the stream</h2>
<p>The difference between <code>std::endl</code> and <code>'\n'</code> is that <code>std::endl</code> actually flushes the stream. This can be a costly operation in terms of processing time, so it's best to get in the habit of only using it when flushing the stream is actually required. It's not for this code.</p>
<h2>Separate interface from implementation</h2>
<p>It makes the code somewhat longer for a code review, but it's often very useful to separate the interface from the implementation.  In C++, this is usually done by putting the interface into separate <code>.h</code> files and the corresponding implementation into <code>.cpp</code> files.  It helps users (or reviewers) of the code see and understand the interface and hides implementation details.  The other important reason is that you might have multiple source files including the <code>.h</code> file but only one instance of the corresponding <code>.cpp</code> file.  In other words, split your existing <code>.h</code> file into a <code>.h</code> file and a <code>.cpp</code> file.</p>
<h2>Fix spelling errors</h2>
<p>The code has <code>AddToUpQueu()</code> instead of <code>AddToUpQueue()</code> and  <code>"Placing reuest for goin UP to floor: "</code> instead of <code>"Placing request for going UP to floor: "</code>.  These kinds of typos don't bother the compiler at all, but they will bother human readers of the code and human users of the code and make it a little more difficult to understand and maintain.</p>
<h2>Gracefully exit the program</h2>
<p>Right now, the program has no way to end.  That's not a good design.  Instead, consider some special values such as "9999 quit" that would signal to both threads that it's time to end.</p>
<h2>Remember to lock all shared resources</h2>
<p>There are calls to print on <code>std::cout</code> from both threads without any locks.  This means that output could be interleaved.  Instead, I'd recommend either using the C++20 <code>std::osyncstream</code> or create your own as in <a href="https://codereview.stackexchange.com/questions/243640/multithreaded-console-based-monster-battle-with-earliest-deadline-first-schedule">Multithreaded console-based monster battle with earliest-deadline-first scheduler</a></p>
<h2>Don't abuse pointers</h2>
<p>There is an abundance of <code>std::shared_ptr</code> and <code>std::unique_ptr</code> which is dubious.  For example, there is no reason that the <code>elevator_user</code> in <code>main</code> shouldn't simply be this:</p>
<pre><code>ElevatorUser elevator_user{elevator_proc};
std::thread t1(&amp;ElevatorUser::ReadInputData, std::ref(elevator_user), path);
</code></pre>
<p>Similarly, within <code>class ElevatorProcessor</code> the member variables don't need to be <code>std::unique_ptr</code>.  They should just be simple variables.</p>
<h2>Rethink the class design</h2>
<p>Having all data members of the <code>ElevatorProcessor</code> class as public should be a red flag that causes you to re-examine the class design.  In real life an <code>ElevatorUser</code> has no view into the state of an elevator processor except indicators to show what floors the elevators are on.  The user makes a request and it's up to the processor, not the user, to figure out how to act on that request.  Also, why is there a separate <code>ElevatorStatus</code> class when this information could simply be put into the <code>ElevatorProcessor</code> class?  Also, it seems to me that <code>ElevatorProcessor</code> could and should be named <code>Elevator</code> instead, unless you are planning to have multiple elevators being controlled by a single <code>ElevatorProcessor</code>.</p>
<p>Also, the way the code is currently written, the user is synchronized to the elevator and requests are made no more often than once every 5 seconds.  That's an inaccurate use of threads.  What should happen instead is that the <code>ElevatorProcessor</code> class should not sleep at all so that it can instantly respond to a button press, but keep track of where the elevator is at any instant of time.</p>
    </div>