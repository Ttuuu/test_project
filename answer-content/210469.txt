<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Adding to @Zeta's excellent answer.</p>

<hr>

<h1>Whitespace</h1>

<p>Your whitespace policy is pretty inconsistent. Sometimes you call functions like this:</p>

<pre><code>SDL_SetRenderDrawColor( *gRenderer, g_bg.r,g_bg.g,g_bg.b,g_bg.a );
</code></pre>

<p>with spaces just inside the <code>()</code>, while other times you call them like this:</p>

<pre><code>TTF_SizeText(font, text, &amp;message_rect.w, &amp;message_rect.h);
</code></pre>

<p>with no spaces inside. Similarly, you sometimes put spaces after commas, as above, and other times you don't, like here:</p>

<pre><code>display_text(gRenderer,"2048",TITLE_FONT_SIZE);
gameLoop(matrix,gRenderer);
</code></pre>

<p>On some lines you mix the two styles, like here:</p>

<pre><code>struct COLOR g_COLORS[]={
    {230, 227, 232,255},
    {255, 127, 89,255},
    // etc.
};
</code></pre>

<p>Sometimes you put spaces around arithmetic operators, but you usually don't.</p>

<pre><code>int squareSize=(SCREEN_WIDTH - 2*SCREEN_PAD)/SIZE-SCREEN_PAD;
</code></pre>

<p>You also sometimes associate pointers with the type, and other times with the variable:</p>

<pre><code>bool initSDL(SDL_Window **gWindow,SDL_Renderer** gRenderer)
</code></pre>

<p>Lastly, in your header you sometimes have two blank lines separating docstring-forward-declaration pairs, and sometimes you have just one.</p>

<p>I would encourage you to use <a href="https://clang.llvm.org/docs/ClangFormat.html" rel="nofollow noreferrer"><code>clang-format</code></a> to keep your style consistent.</p>

<h1>Correctness</h1>

<p>Code like this <em>always</em> has bugs, even if they're just theoretical portability bugs. It's best to get out of the habit of writing it, even if it's working on your computer.</p>

<pre><code>char score[15]; //15 chars is enough for score.
sprintf(score, "%d", calculate_score(matrix));
char scoreText[30]="Score:";
strncat(scoreText,score,15);
</code></pre>

<p>In particular, the C standard <em>allows</em> <code>int</code> to occupy more than 4 bytes. Instead, you should either ask <code>snprintf</code> for the length at runtime and allocate yourself or use <a href="http://man7.org/linux/man-pages/man3/asprintf.3.html" rel="nofollow noreferrer"><code>asprintf</code></a> (which is a GNU extension). To ask <code>snprintf</code> for the required buffer size, give it a null pointer and zero length, like so:</p>

<pre><code>int score = calculate_score(matrix);
int score_bufsize = snprintf(NULL, 0, "Score: %d", score);
char* score_str = malloc(score_bufsize * sizeof(*score));
if (!score_str) {
    perror("malloc");
    exit(EXIT_FAILURE);
}

snprintf(score_str, score_bufsize, "Score: %d", score);

// ...

draw_text_white(gRenderer,font,score_str,fillRect);
free(score_str);
</code></pre>

<p>This pattern is made easier if you're willing to use GNU extensions, as in:</p>

<pre><code>#define _GNU_SOURCE
#include &lt;stdio.h&gt;

// ...

int score = calculate_score(matrix);

char* score_str;
if (asprintf(&amp;score_str, "Score: %d", score) &lt; 0) {
    perror("asprintf");
    exit(EXIT_FAILURE);
}

// ...

draw_text_white(gRenderer,font,score_str,fillRect);
free(score_str);
</code></pre>

<p>Of course, you could always just use <code>snprintf</code> with a fixed size buffer and just truncate when things get too large.</p>
    </div>