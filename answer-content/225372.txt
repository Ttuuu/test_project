<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Abstraction</strong> Your class represents a user, user registration, authentication, and data access all at the same time. This is not ideal because with so many responsibilities, it is difficult to reason about and to maintain if your requirements change. To correct this, first break your class into:</p>

<ul>
<li><code>User</code></li>
<li><code>Registration</code></li>
<li><code>Authentication</code></li>
<li><code>UserDb</code></li>
</ul>

<p>Once you have done this, begin the allocation of responsibilities. You do this by thinking about the questions and requests that your application must respond to; for example, <em>'can a user log in with this username and password?'</em>, <em>'register a new user with these details'</em>, <em>'what is the name of the current user?'</em>, <em>'is the current user logged in?'</em>, etc.</p>

<p>Let's tackle a couple of these examples--</p>

<p><em>'Can a user log in with this username and password?'</em> This can be answered by classes <code>User</code> and <code>Authentication</code>. In addition, <code>Authentication</code> needs the collaboration of <code>UserDb</code> to get user data from the database. So, you need methods <code>Authentication::validate($username, $password)</code>, <code>UserDb::findUserByUsername($username)</code>, and <code>User::hasPassword($password)</code>. Finally, the answer to the question is obtained with the following sequence of operations:</p>

<pre class="lang-php prettyprint-override"><code>$pdo = new PDO(...);
$userdb = new UserDb($pdo);
$authentication = new Authentication($userdb);
$authenticated = $authentication-&gt;validate("user1", "password1");
</code></pre>

<p>Let's look at how your <code>UserDb</code> and <code>Authentication</code> classes might look--</p>

<pre class="lang-php prettyprint-override"><code>class UserDb {

    private $pdo;

    public function __construct($pdo) {
        $this-&gt;pdo = $pdo;
    }

    public function findUserByUser($username) {
        $data = ...;
        return new User($data["username"], $data["password"], ...);
    }
}

class Authentication {

    private $userdb;

    public function __construct($userdb) {
        $this-&gt;userdb = $userdb;
    }

    public function validate($username, $password) {
        $user = $this-&gt;userdb-&gt;findUserByUsername($username);
        return $user != null &amp;&amp; $user-&gt;hasPassword($password);
    }    
</code></pre>

<p>To address the second request, <em>'register a new user with these details'</em>, you need classes <code>Registration</code> and <code>User</code> to own the responsibilities, for example:</p>

<pre class="lang-php prettyprint-override"><code>class Registration {

    private $userdb;

    public function __construct($userdb) {
        $this-&gt;userdb = $userdb;
    }

    public function register($username, $password) {
        $user = new User($username, $password);
        $this-&gt;userdb-&gt;saveUser($user);
    }
}

class User {

    private $username, $password;

    public function __construct($username, $password) {
        // validate $username and $password
        $this-&gt;username = $username;
        $this-&gt;password = $password;
    }
}
</code></pre>

<p>And, they can be used like this, with the existing <code>$userdb</code> object.</p>

<pre class="lang-php prettyprint-override"><code>$registration = new Registration($userdb);
$registration-&gt;register("user1", "password1");
</code></pre>

<p>And so on--</p>

<p>The idea is that each class is responsible for satisfying a set of requirements and must collaborate with other classes (with their own unique requirements) to meet them if necessary.</p>

<p><strong>Dependency injection</strong> I won't comment on this, as it is already covered by @suspectus. But, I will point out that it is applied in the example above. You can see that the same <code>UserDb</code> object can be injected in both <code>Authentication</code> and <code>Registration</code>, so it is reasonable that you want <code>$userdb</code> to be a singleton.</p>
    </div>