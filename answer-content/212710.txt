<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Returning an iterator is fairly easy with <code>impl</code>. Here's how you can do it. Note that you need to use <code>move</code> with the closure so that it takes ownership of <code>i</code>. Since <code>u32</code> can be copied, this just copies it instead of taking a reference, which lets you avoid dealing with lifetimes on the return type.</p>

<pre><code>fn get_multiples(i: u32, max: u32) -&gt; impl Iterator&lt;Item = u32&gt; {
    let max_multiplier = max / i;
    (2..=max_multiplier).map(move |n| i * n)
}
</code></pre>

<p>As another note, I have a recommendation for improving performance on your sieve. Currently, every time you call <code>remove_item</code>, you have to search all the way through the vector, remove the item, then shift all items after it forward by one. This is awful for performance. Instead, you could have a <code>Vec&lt;bool&gt;</code> and simply flip the value based on index rather than remove it. Then when you're done sieving, you can go through this vector along with indices and create a <code>Vec&lt;u32&gt;</code> to return.</p>
    </div>