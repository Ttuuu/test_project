<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some small structure feedback:</p>
<h1>1. The template keyword should be above the function definition</h1>
<p>Templated functions is usually written like you have written your constructor with the template keyword ontop of the function definition. Like this:</p>
<pre><code>template&lt;class T&gt; 
T ArrayList&lt;T&gt;::get(int index)
{
      //Implementation here
}
</code></pre>
<p>It is easier to understand at a glance this way.</p>
<h1>2. Don't use <code>using namespace std;</code></h1>
<p>It's bad practice, and the earlier you stop using it the easier it is.</p>
<p>If you don't know what it does, it removes the need to write <code>std::</code> before functions in the standard namespace. Example: <code>cout &lt;&lt;</code> instead of <code>std::cout &lt;&lt;</code>.</p>
<p>It might seem handy in the beginning but it will possibly cause problems in the future so it's better to just get used to it.</p>
<h1>3. Templated classes should be implemented in the header</h1>
<p>.cpp files should not be used when dealing with templates. See <a href="https://isocpp.org/wiki/faq/templates#templates-defn-vs-decl" rel="nofollow noreferrer">this</a> for more information.</p>
<p>If you want to separate the definition from the implementation you can use a <strong>.inl</strong> file. Like this:</p>
<p>ArrayList.h:</p>
<pre><code>#pragma once

template &lt;class T&gt; 
class ArrayList 
{
public:
     ArrayList();

     // Rest of your functions here.
};

//Notice this:
#include "ArrayList.inl"
</code></pre>
<p>ArrayList.inl:</p>
<pre><code>//Notice: No #include here

template&lt;class T&gt;
ArrayList&lt;T&gt;::ArrayList()
{
      //Implementation here
}
</code></pre>
    </div>