<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>The design is sound.</strong></p>

<p>Despite what naysayers may express, there are a few overwhelming advantages that your solution based on venerable <code>printf</code> and C-variadics arguments has over <code>ostream</code> and C++ variadics:</p>

<ul>
<li>performance: <code>ostream</code> has terrible formatting performance by design,</li>
<li>footprint: any variadic template solution must be carefully designed to avoid the bloat resulting of instantiating one variant for each and every combination of arguments; reaching zero-cost is only possible if the function can be fully inlined without increasing the call-site footprint (possibly by delegating to a non-template core).</li>
</ul>

<p>Your design sidesteps those two pitfalls, which is great.</p>

<p>Furthermore, your use of the <code>format</code> attribute ensures a compile-time check of the format vs the arguments. Unlike the contenders presented, it will diagnose at compile-time that the number of arguments matches (on top of their types), avoiding the necessity for runtime errors.</p>

<hr>

<p><strong>Nitpick</strong></p>

<p>I <em>really</em> encourage you to place braces systematically around if-blocks. There's little reason not to, and it'll prevent the occasional slip-up.</p>

<hr>

<p><strong>Weaknesses</strong></p>

<p>There are two weakness to the design:</p>

<ul>
<li>no variant allowing the user to specify the buffer,</li>
<li>a very limited set of accepted types.</li>
</ul>

<p>The first is an issue for composition and reuse.</p>

<ul>
<li><em>Composition</em>: if I wish to create a larger string by calling in a sub-function, it will create several intermediate buffers which may negate the performance advantage the solution has in terms of raw-formatting,</li>
<li><em>Reuse</em>: the user may already have a sufficiently large buffer available.</li>
</ul>

<p>Unfortunately, the C++ standard library does not allow one to pass an existing buffer to a string (<em>sigh</em>) and is generally pretty lacking in raw buffers (<em>sigh</em>), so you'll have to roll your own.</p>

<p>I would do so in two steps: an abstract base class <code>Write</code> which exposes a way to write bytes in <em>slices</em> and a ready-made implementation based on <code>std::unique_ptr&lt;char, free&gt;</code> + size + capacity (not <code>vector</code>, because it zeroes the memory when resizing...).</p>

<p>The second is an issue for extension, and performance. In order to format their own types, users are encouraged to "pre-format" their own types into strings, which will result in needless temporary allocations.</p>

<p>There is unfortunately no simple way to solve this issue, it's a fundamental limitation of <code>printf</code>-based solution. It will be up to the users of the solution to decide whether the cost of temporary allocations is worth bearing, or not, on a per-call-site basis.</p>
    </div>