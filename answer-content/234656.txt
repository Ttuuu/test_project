<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Nice use of <code>"""docstrings"""</code>.</p>

<hr>

<p>This code is useless:</p>

<pre><code>else:
    "Value out of bounds"
</code></pre>

<p>If the else clause is reached, the string statement is executed, with no effect.  Just like executing a docstring statement has no effect.</p>

<p>You want:</p>

<pre><code>else:
    raise ValueError("Value of out bounds")
</code></pre>

<hr>

<p>The function <code>convert_to_word()</code> returns strange values like <code>"sevenhundredandtwentyfive"</code>, which is only useful for counting letters, and nothing else.  A more flexible return might be <code>["seven", "hundred", "and", "twenty", "five"]</code>, allowing the caller to count words, or letters ... or ... join the words with spaces.</p>

<hr>

<p>Several recursive calls are unnecessary.</p>

<p><code>convert_to_word(x//100)</code> could simply be <code>num_word_map[x // 100]</code>, and <code>convert_to_word(x % 10)</code> could be <code>num_word_map[x % 10]</code>.</p>

<hr>

<p>Comparison of a floating point value and an integer for equality is dangerous <code>x / 1000 == 1</code>.  Simply use <code>x == 1000</code>.</p>

<hr>

<p>For this problem, instead of storing the words in <code>num_word_map</code>, you could simply store the lengths of the words.  </p>

<hr>

<p>Your <code>"""docstring"""</code> usage is good.  You describe what the function does, what the parameters are, and what the return value is.  Someone wishing to use your functions would only need to type <code>help(convert_to_word)</code> and they should have all the information required to use the function.</p>

<p>There is no formal "right way" to format the docstrings, but there are some tools which expect things a certain way.</p>

<p>For instance</p>

<pre><code>"""
... omitted ...

NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains
23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing
out numbers is in compliance with British usage.
Answer = 21124
"""
</code></pre>

<p>This docstring contains 2 examples with answers, and one answer to a large question.  You can embed examples in a <code>"""docstring"""</code>, and it can become a built-in test for your module.</p>

<pre><code>"""
... omitted ...

Answer = 21124

NOTE: Do not count spaces or hyphens.  The use of "and" when writing
out numbers is in compliance with British usage.  For example:

&gt;&gt;&gt; len(convert_to_word(342))     # three hundred and forty-two
23

&gt;&gt;&gt; len(convert_to_word(115))     # one hundred and fifteen
20
"""
</code></pre>

<p>Starting at the <code>&gt;&gt;&gt;</code>, the text look like lines straight out of what you might see if you typed commands in a Python REPL.  The lines beginning with <code>&gt;&gt;&gt;</code> are the commands, and the lines below that are the command output.  The <code>doctest</code> module can read the docstrings in a module, find lines formatted this way, execute the commands, and verify the output matches the expected output.  You might run this as:</p>

<pre><code>python3 -m doctest numbers-letters.py
</code></pre>

<p>The output of the above command should be nothing, because the tests would pass.  Let's add one more test in the doc string:</p>

<pre><code>"""
... omitted ...

&gt;&gt;&gt; len(convert_to_word(342))     # three hundred and forty-two
23

&gt;&gt;&gt; len(convert_to_word(115))     # one hundred and fifteen
20

&gt;&gt;&gt; convert_to_word(115)
'one hundred and fifteen'
"""
</code></pre>

<p>Now running the doctest will produce output due to the failing test:</p>

<pre><code>python3.8 -m doctest number-letters.py 
**********************************************************************
File "/Users/aneufeld/Documents/Stack Overflow/number-letters.py", line 23, in number-letters
Failed example:
    convert_to_word(115)
Expected:
    'one hundred and fifteen'
Got:
    'onehundredandfifteen'
**********************************************************************
1 items had failures:
   1 of   3 in number-letters
***Test Failed*** 1 failures.
</code></pre>

<p>The output doesn't match because the test output contains spaces, which the function doesn't actually produce.</p>

<p>Other tools exist which read the docstrings, such as the <a href="http://www.sphinx-doc.org/en/master/" rel="nofollow noreferrer">Sphinx</a> documentation generator.  It has formatting requirements; read the docs for details.</p>
    </div>