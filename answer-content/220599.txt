<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.</p>

<h2>Use the required <code>#include</code>s</h2>

<p>The code uses <code>std::string</code> which means that it should <code>#include &lt;string&gt;</code>.  It was not difficult to infer, but it helps reviewers if the code is complete.</p>

<h2>Have you run a spell check on comments?</h2>

<p>If you run a spell check on your comments, you'll find a number of things such as "diagnols" and "diaganol" instead of "diagonals" and "diagonal."  Since your code is nicely commented, it's worth the extra step to eliminate spelling errors.</p>

<h2>Be wary of recursive calls</h2>

<p>The <code>ask_input</code> routine has a subtle flaw.  In particular, because it is recursive, it may be possible for a malicious user to crash the program by exhausting the stack.  All that would be required would be to continue to input improperly formatted data.  For this reason, as well as to make the code more understandable, I'd suggest instead to make <code>retry</code> a local variable and use that, as in a <code>while</code> loop, to re-ask if needed.</p>

<h2>Fix the bug</h2>

<p>The <code>ask_input</code> has a not-so-subtle flaw as well.  It checks the letter, but not the number, so a user could input <code>C9</code> or <code>A0</code> and the program would attempt to use that!  </p>

<h2>Don't use <code>std::endl</code> if you don't really need it</h2>

<p>The difference betweeen <code>std::endl</code> and <code>'\n'</code> is that <code>'\n'</code> just emits a newline character, while <code>std::endl</code> actually flushes the stream.  This can be time-consuming in a program with a lot of I/O and is rarely actually needed.  It's best to <em>only</em> use <code>std::endl</code> when you have some good reason to flush the stream and it's not very often needed for simple programs such as this one.  Avoiding the habit of using <code>std::endl</code> when <code>'\n'</code> will do will pay dividends in the future as you write more complex programs with more I/O and where performance needs to be maximized.</p>

<h2>Be judicious with the use of <code>inline</code></h2>

<p>If a function is small and time critical, it makes sense to declare it <code>inline</code>.  However, the <code>check_win</code> function is not really time critical, so I would say that there's no reason to make it <code>inline</code>.</p>

<h2>Consider using a stream inserter</h2>

<p>The existing <code>print_board</code> function is written exactly as one would write as one would write a stream inserter.  The only thing that would change would be the declaration:</p>

<pre><code>std::ostream &amp;operator&lt;&lt;(std::ostream&amp; os, const Board&amp; board) { /* ... */ }
</code></pre>

<h2>Simplify your constructor</h2>

<p>The <code>Board</code> constructor is currently defined like this:</p>

<pre><code>Board()
{
    for(auto begin = board.begin(),end = board.end();begin != end; ++begin)
        *begin = BoardValue::none;
}
</code></pre>

<p>There are at least three ways to simplify it.  One would be to use a "range-for" syntax:</p>

<pre><code>Board()
{
    for(auto&amp; space : board) {
        space = BoardValue::none;
    }
}
</code></pre>

<p>Another would be use <a href="https://en.cppreference.com/w/cpp/container/array/fill" rel="noreferrer"><code>fill</code></a>:</p>

<pre><code>Board() {
    board.fill(BoardValue::none);
}
</code></pre>

<p>A third way would allow you omit the constructor entirely.  Do that by using <a href="https://en.cppreference.com/w/cpp/language/aggregate_initialization" rel="noreferrer">aggregate initialization</a> in the declaration of <code>board</code>:</p>

<pre><code>std::array&lt;char, 9&gt; board{
    ' ',' ',' ',
    ' ',' ',' ',
    ' ',' ',' ',
};
</code></pre>

<h2>Think carefully about the class design</h2>

<p>The structure of the code is not bad, but some things to think about are what things should be the responsibility of the <code>Board</code> class and which are not.  For example, I think it might make more sense for <code>Board</code> to keep track of the number of turns.</p>

<h2>Simplify the code</h2>

<p>This line is not easy to read or understand:</p>

<pre><code>turn = turn == BoardValue::o  ? BoardValue::x : BoardValue::o;
</code></pre>

<p>I would suggest instead having <code>turn</code> be a <code>bool</code> that represents <code>O</code>.  Then flipping back and forth would simply be <code>turn = !turn;</code>.  </p>
    </div>