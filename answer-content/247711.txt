<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let me clarify something fist</p>
<blockquote>
<p>It gives the caller the ability to use the preferred implementation class.</p>
</blockquote>
<p>Even if we return interface from method, that doesn't mean that that caller can choose implementation.'</p>
<blockquote>
<p>So if the caller of op wanted to use a LinkedList they could through simple casting.</p>
</blockquote>
<p>If you mean something like <code>(LinkedList&lt;Integer&gt;) op(nums)</code>, then this wont work and will throw <code>java.lang.ClassCastException: java.util.ArrayList cannot be cast to java.util.LinkedList</code>.</p>
<p>When method returns interface, in general, you shouldn't assume specific implementation, and thus should avoid such castings. Having interface here, for example, will give more freedom to the author of this method for future changes: imagine someone will write <code>SuperPerfectList</code> which works better than any other list and author decides to use it. In this case even if method changes, we won't need to refactor every place in our code where we call this method, because signature of this method hasn't changed.</p>
<p>If we talk about the situation where we want another implementation of this interface, then, in case of list, we can do <code>new LinkedList(result)</code> and get what we want.</p>
    </div>