<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>What jumps out at me is:</p>

<pre><code>private static String reverse (String s)
{
    if (s.length() &gt; 0)
        return s.charAt(s.length()-1) + reverse(s.substring(0, s.length()-1));
    else
        return "";
}
</code></pre>

<p>This has two problems:</p>

<ol>
<li>it's recursive - Java doesn't handle tail optimisation and recursion is <em>slow</em></li>
<li>It makes a rather large number of copies - <code>String.substring</code> <em>copies</em> the underlying <code>String</code></li>
<li>it's very long</li>
</ol>

<p>I would suggest:</p>

<pre><code>private static String reverse (final String s) {
    return new StringBuilder(s).reverse().toString();
}
</code></pre>

<p>I would also suggest that you <strong>always</strong> use brackets for your <code>if...else</code> statements. It's generally accepted common practice and with good reason - the few lines that you save by not doing so lead to some very insidious bugs.</p>

<p>On an algorithmic note: why reverse the <code>String</code> at all? Use one loop and read the <code>String</code> both forwards and backwards simultaneously.</p>

<p>For further improvement, walk through a comparison manually:</p>

<pre><code>s = abcdef    
rs = fedcba
</code></pre>

<p>Leads to 5 distinct tests:</p>

<ol>
<li><code>|b - a| == |e - f|</code></li>
<li><code>|c - b| == |d - e|</code></li>
<li><code>|d - c| == |c - d|</code></li>
<li><code>|e - d| == |b - c|</code></li>
<li><code>|f - e| == |a - b|</code></li>
</ol>

<p>What do you notice about the pairs 1. &lt;-&gt; 5. and 2. &lt;-&gt; 4.? There is a simpler solution to this problem than brute force...</p>
    </div>