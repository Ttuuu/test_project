<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Computing moves seems like something that will happen a lot in a chess game :-).</p>
<p>That being said, why don't you write a function that will generate a list of all the possible moves for a piece from a given position and store them in a loadable format?</p>
<p>I just recently saw someone else ask a chess question mentioning something called <code>bitboard</code>, so I know there's at least two standards for board positions. You can either use UCI notation ("a2") or bitboard notation (0x100).</p>
<p>However you choose to represent them, simply perform the computations to generate all possible moves for a given piece in a given position, possibly including some special moves as either a separate move lookup or as a separate piece lookup (for example, "king-n" for no castle yet and "king-y" for castled already).</p>
<p>Then you can just look up "raw" moves from a dictionary:</p>
<pre><code>possible_moves = raw_moves['bishop'][position]
</code></pre>
<p>Subsequently, you would have to look for blocking pieces and filter them out. Depending on your storage implementation, this again seems like something you could precompute.</p>
<p>A lot of this suggestion is "trading space for time". That is, I'm suggesting you create a LOT of stored data that you could use in order to avoid doing computations at run-time. It would slow down the loading of your program, but should speed up the turn-by-turn execution.</p>
<p>If you choose to use UCI format for positions, you will want to look at Python's <code>set</code> and <a href="https://docs.python.org/3/library/stdtypes.html#frozenset" rel="nofollow noreferrer"><code>frozenset</code></a> built-in types.</p>
<p>If you choose to go with bitboard, you can use bitwise operations on integer values, which Python supports directly.</p>
    </div>