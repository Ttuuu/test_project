<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm going to answer your direct questions first.</p>

<blockquote>
  <p>Are there any potential memory management issues?</p>
</blockquote>

<p>No. You don't do any manual memory management (using <code>new</code> and <code>delete</code>) so there are no issues.</p>

<blockquote>
  <p>Any additional methods that would be useful (also, from educational
  point of view) to implement?</p>
</blockquote>

<p><a href="https://en.cppreference.com/w/cpp/container/stack" rel="nofollow noreferrer">Here is the reference page for <code>std::stack</code></a>. This is the standard library documentation. You may not be able to do them all right now but those are all possible functions and members you could implement for a stack. (I recommend only trying a little bit at a time.</p>

<p>I'd like to point out that your code is very clean and easy to read. I also appreciate good use of const correctness.</p>

<hr>

<h2>Use unique include guards</h2>

<pre><code>#ifndef STACK_H
#define STACK_H
</code></pre>

<p>This is a very basic name. It would be easy for others to use a very similar name. Make your includes unique. Add a namespace name, a project name, a library name and possibly a GUID or all of the above to eliminate the risk of clashes.</p>

<hr>

<h2>Use the right headers</h2>

<pre><code>#include &lt;iostream&gt;
#include &lt;memory&gt;
#include &lt;vector&gt;
#include &lt;stdexcept&gt;
</code></pre>

<p>You don't use <code>&lt;memory&gt;</code> or <code>&lt;iostream&gt;</code> in your class. You don't use <code>&lt;stdexcept&gt;</code> until the cpp file. declare the header there.</p>

<p>You are missing <code>&lt;limits&gt;</code> for <code>:std::numeric_limits&lt;&gt;</code></p>

<hr>

<h2>List <code>public</code> members first</h2>

<p>Anyone using your stack is only going to be able to use the public member functions. It is common practice therefor to list these first. </p>

<hr>

<h2>Avoid the use of <code>this-&gt;</code></h2>

<p>It is almost always wrong to have <code>this-&gt;</code> in your code in C++. For example this:</p>

<pre><code>if (this-&gt;empty())
</code></pre>

<p>can simply be written:</p>

<pre><code>if (empty()) 
</code></pre>

<p>The exception to this rule is with variable shadowing (which you don't have) which is also typically solved with a name change.</p>

<hr>

<h2>Always ask: What does this feature serve?</h2>

<p>So you implemented a <code>min()</code> and <code>max()</code>. You did it with an O(1) lookup by having every single element keep track of the current min and max value of the entire stack. This is a problem on two levels:</p>

<ul>
<li>Your nodes should not contain information on other nodes. That breaks encapsulation. This is the job of the Container.</li>
<li>And its also useless information. There is one accessible node. What value do you gain by knowing what the min and max values beneath that one are? how can you even act on that even if you knew?</li>
</ul>

<p>If you have your heart content on keeping the <code>min()</code> <code>max()</code> then at least store the value in the container. In addition to being good practice it will also take significantly less memory.</p>

<hr>

<p>Lastly When you are ready you should look into Template Metaprogramming. A Container / Data Structure like this needs to be usable with any type, including user defined types, in order to be truly useful/robust. </p>

<hr>

<p><strong>Edit: to answer point brought up in comments</strong></p>

<p>The problem as I see it is the fact that you need to store state, which a stack is great for. If I needed to maintain current, min, and max values like you are, I would put them all into a struct like so:</p>

<pre><code>struct State
{
     int current_value;
     int min_value;
     int max_value;
}
</code></pre>

<p>Then I would use a stack that supports user-defined types. <code>std::stack&lt;State&gt; state_machine</code>. </p>

<p>Furthermore by maintaining <code>min()</code> and <code>max()</code>, in the node or in the container, if you do decide to extend your container to support user-defined types you will force your users to overload the comparison operators for their type even if there is no logical way to do so and it isn't otherwise needed.</p>
    </div>