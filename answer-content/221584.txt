<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In <code>XorTreeNode</code> you're not using the field <code>Val</code></p>

<hr>

<blockquote>
<pre><code>public void Insert(int[] nums)
public int GetMax(int[] nums)
</code></pre>
</blockquote>

<p>Having two methods that must take the same data to operate on is hazardous and should be avoided. Either provide the data to the constructor or you should only have one public method with the data set as argument:</p>

<pre><code>public int FindMaxXor(int[] nums) { Insert(nums); return GetMax(nums) }
</code></pre>

<hr>

<p>You can invert a bit in the following way:</p>

<pre><code>bit ^ 1
</code></pre>

<p>It can be used to simplify this:</p>

<blockquote>
<pre><code>                int bit = (num &gt;&gt; i) &amp; 1;
                if (cur.children[bit == 1 ? 0 : 1] != null)
                {
                    xorValue += (1 &lt;&lt; i);
                    cur = cur.children[bit == 1 ? 0 : 1];
                }
                else
                {
                    cur = cur.children[bit];
                }
</code></pre>
</blockquote>

<p>to</p>

<pre><code>        int bit = ((num &gt;&gt; i) &amp; 1) ^ 1;
        if (cur.children[bit] != null)
        {
          xorValue += (1 &lt;&lt; i);
          cur = cur.children[bit];
        }
        else
        {
          cur = cur.children[bit ^ 1];
        }
</code></pre>

<hr>

<p>You can insert numbers and search for max in the same operation, because every new number only need to compare with already existing numbers.</p>

<p>So you can change <code>GetMax(...)</code> to:</p>

<pre><code>private int GetMax(int num)
{
  XorTreeNode cur = _root;
  int xorValue = 0;
  for (int i = _numBits; cur != null &amp;&amp; i &gt;= 0; i--)
  {
    int bit = ((num &gt;&gt; i) &amp; 1) ^ 1;
    if (cur.children[bit] != null)
    {
      xorValue += (1 &lt;&lt; i);
      cur = cur.children[bit];
    }
    else
    {
      cur = cur.children[bit ^ 1];
    }
  }

  return xorValue;
}
</code></pre>

<p>and <code>Insert(...)</code> to:</p>

<pre><code>public int FindMaxXor(int[] nums)
{
  int result = int.MinValue;

  foreach (var num in nums)
  {
    result = Math.Max(result, GetMax(num));

    XorTreeNode cur = _root;
    for (int i = _numBits; i &gt;= 0; i--)
    {
      int bit = (num &gt;&gt; i) &amp; 1;
      if (cur.children[bit] == null)
      {
        cur.children[bit] = new XorTreeNode();
      }
      cur = cur.children[bit];
    }
  }

  return result;
}
</code></pre>

<p>where <code>_numBits</code> is defined as a class const field:</p>

<pre><code>private const int _numBits = 31;
</code></pre>

<hr>

<p>If you know that the <code>nums</code> array contains only small values there might be a significant performance improvement in finding the leftmost significant bit:</p>

<pre><code>  int max = nums.Max();
  while (max &gt; 0)
  {
    _numBits++;
    max &gt;&gt;= 1;
  }
</code></pre>

<p>in the start of the <code>Insert(...)</code> method. <code>_numBits</code> should then not be const and initialized to zero obviously. 
If the numbers span over the entire <code>int+</code> domain this may slow the entire process.</p>
    </div>