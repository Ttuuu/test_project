<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have some advices for you.</p>

<ul>
<li>Add the <code>static</code> keyword to the <code>DEFAULT_CACHE_SIZE</code> variable (<a href="https://en.wikipedia.org/wiki/Naming_convention_(programming)#Java" rel="nofollow noreferrer">all cap snake case</a> = constant).</li>
</ul>

<h3>Use the size of the map instead of using the <code>capacity</code> variable</h3>

<p>You can use <code>java.util.HashMap#size</code>. In my opinion, it will be less error-prone to do so (If you forget to update it, ect).</p>

<h3>Avoid using <code>C-style</code> array declaration</h3>

<p>In the main method, you declared a <code>C-style</code> array declaration with the <code>args</code> variable.</p>

<p><strong>before</strong></p>

<pre class="lang-java prettyprint-override"><code>String args[]
</code></pre>

<p><strong>after</strong></p>

<pre class="lang-java prettyprint-override"><code>String[] args
</code></pre>

<p>In my opinion, this style is less used and can cause confusion.</p>

<h2>Potential issues</h2>

<h3>Never expose directly Arrays / Collections / Maps to external classes</h3>

<p>In this case, the <code>lruHashMap</code> map is exposed to any other instances, I highly suggest that you put the <code>private</code> keyword to hide the instance. If you donâ€™t do so, any other classes can edit the map directly and your class will lose control over its own data.</p>

<h3>Always compare objects of the same type</h3>

<p>In the method <code>LRUCache#addData</code>, when you are checking if the <code>lruHashMap</code> contains the value, you are comparing <code>java.lang.Integer</code> with <code>Node</code>. You probably wanted to use the <code>java.util.HashMap#containsKey</code> instead.</p>

<pre class="lang-java prettyprint-override"><code>//[...]
if (lruHashMap.containsValue(value)) { // Bug, will always return false
//[...]
</code></pre>

<h3>By setting the object null, when coming from a collection, it does not delete it from the collection.</h3>

<p>In this case, in the <code>LRUCache#addData</code> method, you set the object null to delete it ? This will only affect the current reference of the variable <code>deleteNode</code>; not the object in the map.</p>

<pre class="lang-java prettyprint-override"><code>// Item already at the linkedList and map
// Delete node first

Node deleteNode = lruHashMap.get(value);
deleteNode.next.prev = deleteNode.prev;
deleteNode.prev.next = deleteNode.next;
deleteNode = null; // Set the `deleteNode` to null
</code></pre>

<h2>Refactored code</h2>

<pre class="lang-java prettyprint-override"><code>   public class LRUCache {
      private HashMap&lt;Integer, Node&gt; lruHashMap = new HashMap&lt;&gt;();

      private static final int DEFAULT_CACHE_SIZE = 5;
      private Node head;
      private Node tail;

      class Node {
         int value;
         Node prev, next;

         public Node(int value, Node prev, Node next) {
            this.value = value;
            this.prev = prev;
            this.next = next;
         }

         public Node(int value) {
            this.value = value;
            this.prev = null;
            this.next = null;
         }
      }

      public void addData(int value) {
         if (head == null) {
            head = new Node(value);
            tail = head;
            lruHashMap.put(value, head);
            return;
         }

         if (lruHashMap.containsKey(value)) {
            // Item already at the linkedList and map
            // Delete node first

            Node deleteNode = lruHashMap.get(value);
            deleteNode.next.prev = deleteNode.prev;
            deleteNode.prev.next = deleteNode.next;
            // lruHashMap.remove(value); uncomment if you want to remote the item from the map
         }

         Node newNode = new Node(value, null, head);
         // Add item to head
         head.prev = newNode;
         head = head.prev;

         lruHashMap.put(value, newNode);

         checkSize();
      }

      private void checkSize() {
         if (lruHashMap.size() &gt; DEFAULT_CACHE_SIZE) {
            // remove last element
            removeLast();
         }
      }


      private void removeLast() {
         int value = tail.value;

         tail = tail.prev;
         tail.next = null;

         lruHashMap.remove(value);
      }

      private void getDataOfLRUCache() {

         for (Map.Entry&lt;Integer, Node&gt; entry : lruHashMap.entrySet()) {
            System.out.print(entry.getKey() + " - ");
            System.out.println(entry.getValue());
         }
      }


      public boolean isEmpty() {
         return lruHashMap.isEmpty();
      }

      public static void main(String[] args) {
         LRUCache lruCache = new LRUCache();

         lruCache.addData(5);
         lruCache.addData(6);
         lruCache.addData(7);
         lruCache.addData(8);
         lruCache.addData(9);

         //   lruCache.getDataOfLRUCache();

         lruCache.addData(11);
         lruCache.addData(12);
         lruCache.getDataOfLRUCache();
      }
   }
<span class="math-container">```</span>
</code></pre>
    </div>