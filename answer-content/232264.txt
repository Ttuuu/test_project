<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<p>Code style is not "mission critical" for a beginner, but can become more important when working on larger projects. Python has an "official" <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a>, which is widely followed in the larger Python community. It codifies a lot of recommendations on variable naming, whitespace, and the like.</p>

<p>As an example, the official recommendation for variable and function names is to use <code>lower_case_with_underscores</code> instead of <code>camelCase</code>.</p>

<h1>Documentation</h1>

<p>The style guide also has a few rules about <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">how function documentation should be written</a> in order to be usable by Python's built-in <code>help(...)</code>. The convention is to have the docstring after the <code>def</code>-line, <code>"""quoted in triple quotes"""</code>.</p>

<pre><code>def enemyBoardLoader():
    """Loads the enemy board"""
    global num
    file = open("board" + str(num) + ".txt")
    return file.read()
</code></pre>

<h1>Random number generation</h1>

<p>You only really need to call <a href="https://docs.python.org/3/library/random.html" rel="nofollow noreferrer"><code>random.seed(...)</code></a> if you actually want to get reproducible pseudo-random numbers. Then you would pass a fixed seed value. If you only want some pseudo-random numbers, you don't need to call it, because the random number generator is seeded by default.</p>

<p>Also, there seems to be a small bug in your code. Since what really want are numbers between 1 and 5 (the boards in your repo are numbered 1 to 5), you will have to use <code>random.randrange(1, 6)</code> or even better <a href="https://docs.python.org/3/library/random.html#random.randint" rel="nofollow noreferrer"><code>random.randint(1, 5)</code></a>, since otherwise board 5 will never be selected.</p>

<h1>Global variables</h1>

<p>You are using global variables in a lot of places, which makes it harder to see which functions modify what part of the game state, and as a consequence of that also harder to test functions individually without resetting the global state in the mean time.</p>

<p>Fortunately, quite some instances of global variable usage in your code can be replaced by using (additional) function arguments. E.g. instead of </p>

<blockquote>
<pre><code>def enemyBoardLoader():
    global num
    file = open("board" + str(num) + ".txt")
    return file.read()
</code></pre>
</blockquote>

<p>simply do</p>

<pre><code>def enemyBoardLoader(num):
    file = open("board" + str(num) + ".txt")
    return file.read()
</code></pre>

<p>As you can see we where able to get rid of that pesky <code>global</code> keyword. Sidenote: strictly speaking <code>global</code> is not even necessary to read from variables from a surrounding scope, but only when trying to modify them. For instance, this can be witnessed in <code>boardInfoLoader()</code>, where you are using <code>num</code> without explicitly declaring it <code>global</code>. But as I said, it's best to avoid it whenever possible.</p>

<h1>The truth</h1>

<p>Python has a <code>bool</code> datatype with <code>True</code> and <code>False</code> as possible values, but that should be old news for you since you already use it in some places. Prefer to use <code>True</code> instead of <code>1</code> and <code>False</code> instead of <code>0</code> in <code>sunk</code> and similar situations. Then instead of <code>sunk[0] == 0</code>, you'd write <code>sunk[0] == False</code> or even more "pythonic" <code>not sunk[0]</code> (see how this starts to sound like plain English?).</p>

<h1>Closing files</h1>

<p>Whenever you <code>open(...)</code> a file, don't forget to <code>.close()</code> it properly. Otherwise this could get you into trouble in the long run. Since forgetting is so easy, Python has the so called <code>with</code>-statement which automagically ensures that the file gets closed no matter what happens (i.e. not even an <code>Exception</code> or <code>return</code> can stop it from doing so). To get back to the previous example, now rewritten using a <code>with</code>:</p>

<pre><code>def enemyBoardLoader(num):
    with open("board" + str(num) + ".txt") as file:
        return file.read()
</code></pre>

<h1>Reading the boards from disk</h1>

<p>Reading and writing data from and to disk (aka (de)serializing) can be a tedious task as you maybe witnessed first-hand when writing <code>boardInfoInterp()</code> and associates. Fortunately, Python can greatly simplify your life here. Maybe you have heard of the so called <a href="https://en.wikipedia.org/wiki/JSON" rel="nofollow noreferrer">JSON format</a>, very often found in web applications. Python has a module called <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer"><code>json</code></a> which allows you to (de)serialize your data from/into a standardized format. As an example, say you have a list of lists (e.g. like your board), <code>my_data = [list(range(4)) for _ in range(3)]</code>. Enter <code>json</code>. <code>json.load/dump</code> allows you two load or write data from and to files with relative ease:</p>

<pre><code>with open("mydata.json", "w") as output_file:
    json.dump(mydata, output_file)
</code></pre>

<p><code>mydata.json</code> now has the following content:</p>

<pre class="lang-none prettyprint-override"><code>[[0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3]]
</code></pre>

<p>Simply calling</p>

<pre><code>with open("mydata.json", "r") as file_:
    mydata = json.load(file_)
</code></pre>

<p>brings your data back to Python.</p>

<p>Using <code>json</code> might be overkill for simple things like lists of lists, but it can save you a lot of headache once it gets a little more involved.</p>

<hr>

<p>That's it for now. Maybe I have time to look at your code later again. Till then: Happy coding!</p>
    </div>