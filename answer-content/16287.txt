<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>class ApiClient:
</code></pre>

<p>If using Python 2.x, consider inheriting from <code>object</code>. It makes a couple of advanced features work.</p>

<pre><code>    BASE_URL = "https://api.helpscout.net/v1/"
    apiKey = ""
</code></pre>

<p>Class constants, like this <code>apiKey</code>, should be in <code>ALL_CAPS</code>.</p>

<pre><code>def setFields(self, url, fields):
</code></pre>

<p>The Python style guide recommends <code>lowercase_with_underscores</code> for method names. The name is also misleading: it suggests that you are setting a <code>fields</code> property on the object.</p>

<pre><code>    final_str = url + "?fields="
    if (fields != None and len(fields) &gt; 0 ):
</code></pre>

<p>You don't need those parens. It's best to check against <code>None</code> using <code>is not None</code>. As @Ichau suggested, you can actually just check <code>if fields:</code></p>

<pre><code>        sep = ""
        for i in fields:
</code></pre>

<p>Use <code>for key, value in fields.items()</code> to avoid having to relookup each key</p>

<pre><code>            final_str += sep + fields[i]
            sep = ","
</code></pre>

<p>Adding strings together is not a good idea because it's not very efficient. Better to put all the pieces in a list and join it. The name <code>sep</code> is also confusing because I'd think it stands for seperator, but that's not how you are using it.</p>

<pre><code>    return final_str

def getMailbox(self, mailbox_id, fields=None):
</code></pre>

<p>There is very little point to prefixes like <code>get</code>. More pythonic would be to call this method <code>mailbox</code>.</p>

<pre><code>    url = "mailboxes/" + str(mailbox_id) + ".json"
    if fields != None:      
</code></pre>

<p>Firstly, <code>setFields</code> already handles <code>None</code> correctly. There's no point in checking for it here. Secondly, you do these two lines in pretty much every method. It'd be better to pass the fields parameter to getItem/getPage/etc and handle it consistently in all cases.</p>

<pre><code>        url = self.setFields(url, fields)
    return self.getItem(url, "Mailbox", 200)


def getDecoded(val):
    return base64.b64decode(val)
</code></pre>

<p>You seem to be missing a <code>self</code> parameter.</p>

<pre><code>def checkStatusCode(self, code, expected):
        if code == expected:
            return
</code></pre>

<p>I don't like the happy case bailing out like this. I'd use <code>pass</code>/<code>else</code> rather then a <code>return</code> here.</p>

<pre><code>    """ @todo gotta be a better way to do this """
    if (code == 400):
        raise Exception("The request was not formatted correctly")
    elif(code == 401):
        raise Exception("Invalid Api Key")
    elif(code == 402):
        raise Exception("API Key Suspended")
    elif (code == 403):
        raise Exception("Access Denied")
    elif (code == 404):
        raise Exception("Resource Not Found")
    elif (code == 405):
        raise Exception("Invalid method Type")
    elif(code == 429):
        raise Exception("Throttle Limit Reached. Too Many requests")
    elif(code == 500):
        raise Exception("Application Error or server error")
    elif(code == 503):
        raise Exception("Service Temporarily Unavailable")
</code></pre>

<p>Rather then all that, have a global dict mapping numbers to strings and use that. Also, why <code>Exception</code> and not <code>ApiException</code>?</p>

<pre><code>    else:
        raise Exception("API Key Suspended")

class Parser:
</code></pre>

<p>This doesn't really fit the definition of a parser.</p>

<pre><code>    @staticmethod
    def parse(json, clazz):
</code></pre>

<p>Why make it a staticmethod rather than just a global function?</p>

<pre><code>        c = getattr(globals()["models"], clazz)()
</code></pre>

<p>You can just refer to <code>models</code> here, no need to mess with globals. Furthermore instead of passing strings around, you can just the class directly and skip this lookup altogether.</p>

<pre><code>        for i in json:
            setattr(c, i, json[i])
</code></pre>

<p>I don't like doing this. The problem is that you don't know what is in that JSON and so any attributes whatsoever can be set. I'd maintain a list of the attributes I expect and check those against the ones present.</p>

<pre><code>        return c 
</code></pre>
    </div>