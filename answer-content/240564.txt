<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Some possible improvements:</p>

<p>Inputs are self-closing, as are <code>&lt;br&gt;</code>s. No need for <code>/&gt;</code>. (even in the snippet, you can see how the syntax highlighting is off due to this)</p>

<p>When you want to vertically separate elements from each other, <em>usually</em> it's more elegant to put containers (like <code>&lt;div&gt;</code>s, block-level elements) around the elements than to use <code>&lt;br&gt;</code>. You <em>can</em> use <code>&lt;br&gt;</code>s, but I wouldn't recommend it in most cases.</p>

<p>Tables should usually be used only for <em>tabular</em> data. It's not forbidden, but if you're not trying to display tabular data, I don't think it's exactly semantically appropriate, even if it makes writing the styles easier.</p>

<p>You're mixing <code>let</code> and <code>var</code>, and you're never using <code>const</code>. If you're writing modern Javascript, you should never be using <code>var</code> (it has too many gotchas, like function scope instead of block scope, and automatically creating properties on the global object), and <em>preferably</em>, you should almost always use <code>const</code>, not <code>let</code>. Variables declared with <code>let</code> may be reassigned, so when you use them, you're sending a <em>warning</em> to readers of the code that you may reassign the variable name in the future. If you use <code>const</code> instead, a variable name will not be reassignable, resulting in less cognitive overhead required.</p>

<p>You have</p>

<pre><code>for (i = 0; i &lt; colorStringArray.length; i++) {
  // reference colorStringArray[i] here
</code></pre>

<p>You have this same pattern in a few other places in the code. There are two issues with all of these:</p>

<ul>
<li>You're implicitly creating a global <code>i</code> variable because you didn't declare it first. This is not only inelegant, but it'll throw an error in strict mode. (Consider enabling strict mode, it'll help you catch bugs earlier)</li>
<li>You're having to manually manage the indicies while iterating over the array. This is a bit verbose, has no abstraction benefits, and can occasionally result in off-by-one errors (it's more common than you think). Consider using <code>for..of</code> instead:</li>
</ul>

<pre><code>for (const color of colorStringArray) {
  // reference color here
}
</code></pre>

<p>You have</p>

<pre><code>let colorBox = document.createElement("td");
colorBox.value = colorStringArray[i];
</code></pre>

<p>but <code>&lt;td&gt;</code>s should not have <code>.value</code>s - only input-like elements should have <code>.value</code>s. You can just remove that line.</p>

<p>With</p>

<pre><code>colorBox.onclick = function() {
  window.currentColor = colorBox.style.backgroundColor;
};
</code></pre>

<p>It's not an issue here, but I think it's a good idea to get into the habit of using <code>addEventListener</code> instead of <code>on</code> properties. The problem with <code>on</code> properties is that when there are scripts doing separate things, if they want to listen for the same event on an element and they both use <code>on</code> syntax, only the latest listener will actually run:</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>button.onclick = () =&gt; console.log('click 1');
button.onclick = () =&gt; console.log('click 2');</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;button id="button"&gt;click&lt;/button&gt;</code></pre>
</div>
</div>


<p>It's an easy source of bugs. Consider getting into the habit of using <code>addEventListener</code> instead, which can attach <em>any number</em> of listeners.</p>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>button.addEventListener('click', () =&gt; console.log('click 1'));
button.addEventListener('click', () =&gt; console.log('click 2'));</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;button id="button"&gt;click&lt;/button&gt;</code></pre>
</div>
</div>


<p>You should also never use inline handlers, like with:</p>

<pre><code>column.setAttribute("onclick", "tableClickHandler(this)");
</code></pre>

<p>Inline handlers have too many problems. Not only will <code>setAttribute</code> remove any previous attribute handler, inline handlers also <a href="https://stackoverflow.com/a/59539045">have a demented scope chain</a>, require global pollution, and have quote escaping issues. Use <code>addEventListener</code> instead.</p>

<p>You have</p>

<pre><code>colorRow.appendChild(colorBox);
colorTable.appendChild(colorBox);
</code></pre>

<p>You're appending the <code>colorBox</code> <code>&lt;td&gt;</code> to the row, then removing it from the row and attaching it to the table instead, and the row never gets used again. You probably wanted to create just a <em>single</em> row which all the <code>&lt;td&gt;</code>s get appended to.</p>

<p>If you wish to dynamically create elements concisely, a possible shortcut is to use <code>appendChild</code>'s return value, which is the element that was appended. For example, your <code>createColorTable</code> can be turned into:</p>

<pre><code>function createColorTable(colorStringArray) {
  const colorTable = document.getElementById("colorTable");
  const colorRow = colorTable.appendChild(document.createElement("tr"));
  for (const color of colorStringArray) {
    const colorBox = colorRow.appendChild(document.createElement("td"));
    colorBox.style.backgroundColor = color;
    colorBox.addEventListener('click', () =&gt; {
      currentColor = color;
    });
  }
}
</code></pre>

<p>This is somewhat opinion-based, but you might consider using classes instead of IDs - any element with an ID automatically creates a global variable with the same name, which can result in strange bugs occasionally.</p>

<p>You might consider making an indicator of which color the user has currently selected, like Paint does, so they know what color's going to be painted without them having to remember it themselves.</p>

<p>You may consider using the conditional operator, it's perfectly suited for cases like your <code>tableClickHandler</code> function when you'd like to create an expression conditionally, then use it:</p>

<pre><code>function tableClickHandler(box) {
  box.style.backgroundColor = box.style.backgroundColor === "white"
    ? window.currentColor
    : 'white';
}
</code></pre>

<p>(remember to <a href="https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons">use strict equality</a> with <code>===</code>, good to avoid <code>==</code> loose equality)</p>
    </div>