<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>KISS</strong></p>

<p><strong>K</strong>eep <strong>I</strong>t <strong>S</strong>hort <strong>S</strong>imple. Your code seems to be overly complicated compared to what you want to achieve. The invocation of a class isn't really necessary, for your use case a simple static utility method would be enough.</p>

<p><strong>Memory usage and runtime</strong></p>

<p>You are allocating an array just to compare three numbers:</p>

<pre><code>int[] trippleArray =
{
    ARRAY[position - 1], ARRAY[position], ARRAY[position + 1]
};
</code></pre>

<p>This could easily be done inplace:</p>

<pre><code>if (ARRAY[position - 1] &lt; ARRAY[position] &amp;&amp; ARRAY[position] &gt; ARRAY[position + 1])
{
    peaks.add(ARRAY[position]);
}
</code></pre>

<p>In consequence <code>filterZeros()</code> is not necessary anymore and you get rid of a linear runtime method. By the way returning non-existing results with a special value, in your case returning <code>0</code> when there is no peak and removing these special values afterwards is a huge runtime issue, as you get linear runtime just for iterating over the entire input again. Instead you could return a <code>boolean</code> if a result exists or make use of <code>null</code>.</p>

<p><strong>Variable naming</strong></p>

<p><code>CONSTANT_CASE</code> is reserved to constants, i.e. static final fields. This is not the case for <code>ARRAY</code>, <code>LEN</code> and <code>IGNORE_LAST_POSITION</code>. By the way a constant for the first index in an array isn't really necessary as everyone knows the first index is <code>0</code> and the second is <code>1</code>. Furthermore <code>IGNORE_FIRST_POSITION</code> and <code>IGNORE_LAST_POSITION</code> sound like <code>boolean</code> variables, consider a better name.</p>

<p><strong>Improved version</strong></p>

<pre><code>public static List&lt;Integer&gt; findPeaks(int[] input) {
    List&lt;Integer&gt; peaks = new LinkedList&lt;&gt;();
    for (int i = 1; i &lt; input.length - 1; i++) {
        if (input[i - 1] &lt; input[i] &amp;&amp; input[i] &gt; input[i + 1]) {
            peaks.add(input[i]);
        }
    }
    return peaks;
}
</code></pre>
    </div>