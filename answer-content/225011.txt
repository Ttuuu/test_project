<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Review</h3>

<ul>
<li>You should obfuscate the equality check  <code>return combinedHash.Equals(serverHash);</code> using a <code>SlowEquals</code> implementation.</li>
</ul>

<p><a href="https://www.khalidabuhakmeh.com/best-way-to-secure-a-user-s-password-in-c" rel="nofollow noreferrer">Khalid Abuhakmeh</a>'s post explains the vulnerability.</p>

<blockquote>
<pre><code>    /// &lt;summary&gt;
    /// Compares two byte arrays in length-constant time. This comparison
    /// method is used so that password hashes cannot be extracted from
    /// on-line systems using a timing attack and then attacked off-line.
    /// &lt;/summary&gt;
    /// &lt;param name="a"&gt;The first byte array.&lt;/param&gt;
    /// &lt;param name="b"&gt;The second byte array.&lt;/param&gt;
    /// &lt;returns&gt;True if both byte arrays are equal. False otherwise.&lt;/returns&gt;
    private static bool SlowEquals(byte[] a, byte[] b)
    {
        uint diff = (uint)a.Length ^ (uint)b.Length;
        for (int i = 0; i &lt; a.Length &amp;&amp; i &lt; b.Length; i++)
            diff |= (uint)(a[i] ^ b[i]);
        return diff == 0;
    }
</code></pre>
</blockquote>
    </div>