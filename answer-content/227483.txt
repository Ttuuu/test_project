<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Arithmetic</h2>

<p>Project Euler questions are meant to educate you about both mathematics and programming.  It would be a good idea to understand what these <a href="https://en.wikipedia.org/wiki/Polygonal_number" rel="noreferrer">triangular, pentagonal, and hexagonal numbers</a> actually are, rather than blindly applying the given formulas.</p>

<p>One performance improvement would be to find a way to generate successive elements of each sequence without plugging <span class="math-container">\$n\$</span> into the formulas, which involve division.  (Division tends to be slow.  Floating-point division, using the <code>/</code> instead of the <code>//</code> operator, is even slower, and it also causes you to have to cast the result back to an <code>int</code>.)</p>

<p>If you take the formula for pentagonal numbers <span class="math-container">\$P_n\$</span>, you can figure out another formula for the difference between successive elements in the sequence.</p>

<p><span class="math-container">$$
\begin{align}
P_n &amp;= \frac{n(3n-1)}{2} = \frac{3n^2-n}{2} \\
P_{n+1} &amp;= \frac{(n+1)(3(n+1)-1)}{2} = \frac{(n+1)(3n+2)}{2} = \frac{3n^2+5n+2}{2} \\
P_{n+1} - P_n &amp;= \frac{(3n^2+5n+2)-(3n^2-n)}{2} = \frac{6n+2}{2} = 3n + 1
\end{align}
$$</span></p>

<p>If you do the same for triangular, square, and hexagonal numbers, you'll find:</p>

<p><span class="math-container">$$
\begin{align}
T_{n+1} - T_n &amp;= n+1 \\
P_{n+1} - P_n &amp;= 3n+1 \\
H_{n+1} - H_n &amp;= 4n+1
\end{align}
$$</span></p>

<p>Considering that square numbers would be <span class="math-container">\$S_{n+1} - S_n = 2n+1\$</span>, you can see a pattern to produce polygonal numbers in general.</p>

<h2>Algorithm</h2>

<p>Your strategy is to generate a million elements of each sequence and find the elements that exist in common.</p>

<p>First of all, one million is an arbitrary limit.  You might need fewer than a million to find the next element in common (in which case you've wasted execution time), or you might need more than a million (in which case you would have to raise the limit and run your code again).  It would be nice if your algorithm did not have to rely on a guess.</p>

<p>Secondly, the millionth hexagonal number is certainly going to be much larger than the millionth triangular number.  There is no way that the millionth hexagonal number is going to coincide with anything, so that's wasted work.</p>

<p>Thirdly, you store the sequences as lists.  Searching a list (e.g. <code>terms in triangle</code>) involves inspecting every element in that list (a so-called O(n) operation).  Searching a <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="noreferrer"><code>set</code></a> takes only O(1) time.  Therefore, simply changing</p>

<blockquote>
<pre><code>triangle = []
pentagonal = []
hexagonal = []
</code></pre>
</blockquote>

<p>and</p>

<blockquote>
<pre><code>        triangle.append(product.triangle())
        pentagonal.append(product.pentagonal())
        hexagonal.append(product.hexagonal())
</code></pre>
</blockquote>

<p>to</p>

<pre><code>triangle = set()
pentagonal = set()
hexagonal = set()
</code></pre>

<p>and</p>

<pre><code>        triangle.add(product.triangle())
        pentagonal.add(product.pentagonal())
        hexagonal.add(product.hexagonal())
</code></pre>

<p>brings the execution time down from hundreds of seconds down to about 2 seconds.  Better yet, your <code>main()</code> function could be simplified using the set intersection operator <code>&amp;</code>:</p>

<pre><code>def main():
    generate()
    triangle_number = triangle &amp; pentagonal &amp; hexagonal
    print(sorted(triangle_number))
    print(time.time() - startTime, "seconds")
</code></pre>

<h2>Pythonicity</h2>

<p>Be consistent with your naming.  If you write "pentagonal" and "hexagonal", then use "triangular" rather than "triangle".</p>

<p>The <code>Shape</code> class shouldn't exist at all.  It's just a very weird and cryptic way to call three functions that take a numerical parameter.</p>

<p><code>for _, terms in enumerate(hexagonal)</code> is a nonsensical use of <code>enumerate</code>.  If you're going to throw away the index anyway, why not just write <code>for terms in hexagonal</code>?  And why is your iteration variable pluralized (<code>terms</code> rather than <code>term</code>)?</p>

<p>Your code would be much more expressive if you could say "give me the next pentagonal number".  A good way to do that in Python is to define a <a href="https://docs.python.org/3/tutorial/classes.html#generators" rel="noreferrer">generator</a>, so that you can write <code>next(pentagonal_numbers)</code>.</p>

<h2>Suggested solution</h2>

<pre><code>from itertools import count

def polygonal_numbers(sides):
    result = 0
    for n in count():
        yield result
        result += (sides - 2) * n + 1

tt, pp, hh = polygonal_numbers(3), polygonal_numbers(5), polygonal_numbers(6)
t = p = 0 
for h in hh:
    while p &lt; h: p = next(pp)
    while t &lt; h: t = next(tt)
    if t == p == h &gt; 40755:
        print(h)
        break
</code></pre>

<p>If you take into account that <a href="https://en.wikipedia.org/wiki/Polygonal_number#Every_hexagonal_number_is_also_a_triangular_number" rel="noreferrer">every hexagonal number is also a triangular number</a>, you can ignore the triangular numbers altogether:</p>

<pre><code>from itertools import count

def polygonal_numbers(sides):
    result = 0
    for n in count():
        yield result
        result += (sides - 2) * n + 1

pentagonal_numbers = polygonal_numbers(5)
p = 0
for h in polygonal_numbers(6):
    while p &lt; h: p = next(pentagonal_numbers)
    if p == h &gt; 40755:
        print(h)
        break
</code></pre>

<p>My last solution takes about 50 milliseconds to run on my machine.</p>
    </div>