<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>if you are just trying to find the <strong>minimum number of moves</strong> and not necessarily a solution you can use the <a href="http://en.wikipedia.org/wiki/Tower_of_Hanoi#Frame.E2.80.93Stewart_algorithm" rel="nofollow">Frameâ€“Stewart algorithm</a> that you linked to earlier</p>

<p>this builds up a solution to the number of moves to achieve a solution.  </p>

<pre><code>def FrameStewart(ndisks,npegs):
    if ndisks ==0: #zero disks require zero moves
        return 0
    if  ndisks == 1 and npegs &gt; 1: #if there is only 1 disk it will only take one move
        return 1
    if npegs == 3:#3 pegs is well defined optimal solution of 2^n-1
        return 2**ndisks - 1
    if npegs &gt;= 3 and ndisks &gt; 0:
        potential_solutions = (2*FrameStewart(kdisks,npegs) + FrameStewart(ndisks-kdisks,npegs-1) for kdisks in range(1,ndisks))
        return min(potential_solutions) #the best solution
    #all other cases where there is no solution (namely one peg, or 2 pegs and more than 1 disk)
    return float("inf") 

print FrameStewart(16,4) #prints 161
</code></pre>

<p>this tells us that the <strong>optimal</strong> solution for 16 disks and 4 pegs is 161 moves, <em>note that it does not tell us what those moves are</em></p>

<p>if you actually need the moves you will have to heavily modify this solution.</p>

<p>start by solving the towersofhanoi with 3 pegs as that is the traditional layout and has well defined algorithms to solve</p>

<pre><code>def towers3(ndisks,start=1,target=3,peg_set=set([1,2,3])):
   if ndisks == 0 or start == target: #if there are no disks, or no move to make
      return [] #no moves
   my_move = "move(%s,%s)"%(start,target) 
   if ndisks == 1: #trivial case if there is only one disk, just move it
      return [my_move]
   helper_peg = peg_set.difference([start,target]).pop()
   moves_to_my_move = towers3(ndisks-1,start,helper_peg)
   moves_after_my_move = towers3(ndisks-1,helper_peg,target)
   return moves_to_my_move + [my_move] + moves_after_my_move
</code></pre>

<p>you can easily verify that this is returning optimal solutions by knowing that the optimal solution to the towers of hanoi with 3 pegs is <strong>2<sup>ndisks</sup> - 1</strong></p>

<p>all thats left is to change <code>FrameStewart</code> to also return moves</p>

<pre><code>def FrameStewartSolution(ndisks,start=1,end=4,pegs=set([1,2,3,4])):
    if ndisks ==0 or start == end: #zero disks require zero moves
        return []
    if  ndisks == 1 and len(pegs) &gt; 1: #if there is only 1 disk it will only take one move
        return ["move(%s,%s)"%(start,end)]  
    if len(pegs) == 3:#3 pegs is well defined optimal solution of 2^n-1
        return towers3(ndisks,start,end,pegs)
    if len(pegs) &gt;= 3 and ndisks &gt; 0:
        best_solution = float("inf")
        best_score = float("inf")
        for kdisks in range(1,ndisks):
            helper_pegs = list(pegs.difference([start,end]))
            LHSMoves = FrameStewartSolution(kdisks,start,helper_pegs[0],pegs)
            pegs_for_my_moves = pegs.difference([helper_pegs[0]]) # cant use the peg our LHS stack is sitting on
            MyMoves = FrameStewartSolution(ndisks-kdisks,start,end,pegs_for_my_moves) #misleading variable name but meh 
            RHSMoves = FrameStewartSolution(kdisks,helper_pegs[0],end,pegs)#move the intermediat stack to 
            if any(move is None for move in [LHSMoves,MyMoves,RHSMoves]):continue #bad path :(
            move_list = LHSMoves + MyMoves + RHSMoves
            if(len(move_list) &lt; best_score):
                best_solution = move_list
                best_score = len(move_list)
        if best_score &lt; float("inf"):       
            return best_solution
    #all other cases where there is no solution (namely one peg, or 2 pegs and more than 1 disk)
    return None
</code></pre>

<p>note that this is going to be much slower than the version that does not need to find the actual solution (this being codereview maybe some folks have suggestions to make it run faster)
Timings from this experiment</p>

<pre><code>towers3(16)  # 0.09 secs
FrameStewart(16) #0.04 secs
FrameStewartSolution(16) #67.04 secs!!!
</code></pre>

<p>really slow as you can see</p>

<p>you can speed it up alot by memoizing it</p>

<pre><code>import json

def fsMemoizer(f): #just a junky quick memoizer
    cx = {}
    def f2(*args):
        try:
            key= json.dumps(args)
        except:
            key =json.dumps(args[:-1] + (sorted(list(args[-1])),))
        if key not in cx:
            cx[key] = f(*args)
        return cx.get(key)
    return f2
@fsMemoizer
def FrameStewartSolution(ndisks,start=1,end=4,pegs=set([1,2,3,4])):
    ...
</code></pre>

<p>after memoization the time to calculate became much faster (less than a second)</p>
    </div>