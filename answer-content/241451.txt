<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Globals.h</h1>

<ol>
<li>I generally don't mind globals as much; I think there are scenarios where they are useful, but this isn't it. These <code>NODE_WIDTH</code> and <code>NCOLS</code> are part of your <code>Node</code> class, and as such should be tightly coupled with it.</li>
<li>Don't use <code>#define</code> unless you need to. It's the C way of defining globals, it does not maintain type safety of the expression; instead use <code>constexpr size_t</code> or <code>constexpr unsigned int</code>.</li>
<li>Instead of defining them in a separate header, define them as <code>static constexpr</code> members in your class. Better yet, define them as regular data members, so you customize the appearance of each linked list.</li>
</ol>

<h1>Node.h</h1>

<ol>
<li>Prefer using smart pointer to raw pointers; it's fine in this case, since you're deleting them, but it's something to keep in mind for future.</li>
<li>Naming is out of place. You have a method <code>setAllPositions</code> which is pascal case, but you have <code>moveall</code> which all lower caps. Also your data members are all lower case, which makes it harder to read.</li>
<li>Don't use <code>this</code> unless you need to explicitly address the current object.</li>
<li><code>velocity</code> serves no role; the <code>moveall</code> method acts directly upon the positions. You don't need a <code>velocity</code> member since you're not using it.</li>
<li>Naming could a lot better. <code>moveall</code> makes me think that <code>Node</code> contains more than one  positions that need to be updated. A simple <code>move</code> is good enough. Similarly, <code>setPosition</code> works just as well, without confusing the reader.</li>
</ol>

<h1>List.h</h1>

<ol>
<li>Again, naming is bit weird. You have members <code>arr</code>, <code>head</code>, <code>tail</code>, but also have <code>m_nodeStorage</code>, <code>m_randomGenerator</code>, etc. with the <code>m_</code> prefix. Pick a single style. Also there is weird mix of pascal case and snake case. Methods are hard to read because they're all lower.</li>
<li>Why do  you have an <code>std::deque</code>? A list should only contain pointers to head and tail. Storing all the nodes again defeats the purpose of a list.</li>
<li>You don't need <code>inline</code>. The compiler is smarter than anyone who decides to <code>inline</code> their functions and methods.</li>
<li>Why are the random utilities <code>static</code>? A better approach would be have them as instance members, so each list has its own random utilities. You're also seeding the generator with the same value, which defeats the purpose of a random generator.</li>
<li>Why is an <code>uniform_real_distribution</code> called <code>m_gaussian_position</code>? It's just confusing; C++ has a normal distribution if you want to use it.</li>
</ol>

<h1>Engine.h</h1>

<ol>
<li>I don't understand the purpose of this class. All it is doing is inheriting from a <code>List</code>, with a few additional functions. And it seems like some methods can be directly be a part of <code>List</code>, such as <code>calculatedsortedpositions</code>. A better approach would be to have List as a member of the class.</li>
<li><code>G</code> provides me with no information about its purpose. </li>
<li><code>normalisedvector</code> and <code>vectormagnitude</code> have absolutely nothing to with any of those class. A better approach would be have them as standalone functions, wrapped in a namespace.</li>
<li>Naming.</li>
</ol>

<p>Also, use a namespace.</p>
    </div>