<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Duplicated Ids!!! üò≤</h2>

<p>I notice in the comments there is mention of more than 1 element with the same <code>Id</code> <strike>and that <code>getElementById</code> will only return one element, which is correct for the majority of browsers depending on the version</strike>. </p>

<p><strike>Even if <code>getElementById</code> acted the same across browsers</strike> As a developer intentionally using duplicated <code>Id</code> is <strong>VERY BAD!</strong> as it will force the browser into <a href="https://en.wikipedia.org/wiki/Quirks_mode" rel="nofollow noreferrer">Quirks Mode</a> 
 effecting performance, layout and can effect how search engine bots crawl your site. </p>

<p>Though Google does say...</p>

<blockquote>
  <p><em>‚ÄúAlthough we do recommend using valid HTML, it‚Äôs not likely to be a factor in how Google crawls and indexes your site.‚Äù</em></p>
</blockquote>

<p>... from SEJ <a href="https://www.searchenginejournal.com/google-valid-html/258881/" rel="nofollow noreferrer">6 Reasons Why Google Says Valid HTML Matters</a> that links to <a href="https://support.google.com/webmasters/answer/100782" rel="nofollow noreferrer">Google Browser Compatibility</a> support page</p>

<p>This is not a guarantee and not something you should trust your sites SEO on.</p>

<p>The simple and safe rule is. <strong>NEVER duplicate Id's!!!</strong></p>

<h2>Your code</h2>

<p>Ignoring the above and looking at your code without regard to the DOM and that <code>getElementById</code> can return an array you can improve the code (readability and maintainability <sup><strong>[1.]</strong></sup>) as follows</p>

<pre><code>function queryDOM(selector) {
    const VALIDATOR = /[a-z0-9!@#$%^&amp;*)(+=._-]/i, NS = "http://www.w3.org/1999/xhtml";
    const type = selector[0], query = selector.slice(1);
    if (type === ".") { return [...document.getElementsByClassName(query)] }
    if (type === "#") { return [document.getElementById(query)] }
    if (! VALIDATOR.test(selector)) { throw new RangeError('Invalid Selector') }
    return [...document.getElementsByTagNameNS(NS, selector)];
}
</code></pre>

<p>or for the code newbies that need the spacing</p>

<pre><code>function queryDOM(selector) {
    const VALIDATOR = /[a-z0-9!@#$%^&amp;*)(+=._-]/i;
    const NS = "http://www.w3.org/1999/xhtml";
    const type = selector[0];
    const query = selector.slice(1);

    if (type === ".") { 
        return [...document.getElementsByClassName(query)];
    }

    if (type === "#") { 
        return [document.getElementById(query)]; 
    }

    if (! VALIDATOR.test(selector)) { 
        throw new RangeError("Invalid Selector"); 
    }

    return [...document.getElementsByTagNameNS(NS, selector)];
}
</code></pre>

<h3>Reasoning</h3>

<ul>
<li>As a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function" rel="nofollow noreferrer">function declaration</a> rather than a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function" rel="nofollow noreferrer">function expression</a> so that the function is accessible at any time after parsing.</li>
<li>Extract the first character and remaining query in one spot to avoid logic/code duplication.</li>
<li>Remove the redundant <code>else</code> and supporting code to reduce noise.</li>
<li>Use ES6+ spread operator <code>...</code> (AKA <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" rel="nofollow noreferrer">spread syntax</a>) to create arrays from iteratable objects.</li>
<li>Use the simpler bracket access for single character in string rather than the more verbose <code>String.startsWith</code> which is meant for sub strings longer than one character.</li>
<li>Use <code>String.slice</code> rather than <code>String.substring</code></li>
<li>Renamed function to hold to camel-case convention of upperCase acronyms and rearranging to stop clash with JS convention of PascalCase only functions used with the new token (Note your function will work as new DOMSelector())</li>
<li>Renamed argument to not imply its an array (plurals only for arrays or array like objects) </li>
<li>Throw a range error more suited to the error type (Really should not be throwing for this type of issue)</li>
<li>Remove the global flag from the <code>RegExp</code></li>
<li>Removed redundant <code>^</code>, <code>$</code>, <code>+</code> and back slashes inside the <code>[]</code> from <code>RegExp</code></li>
<li>Added case insensitive flag to <code>RegExp</code></li>
<li><p>Declared <code>RegExp</code> as a constant to take out of the statement to make it more readable.</p></li>
<li><p>As you include capitals in the validation of the selector I assume you are unaware that <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName" rel="nofollow noreferrer"><code>getElementsByTagName</code></a> first converts the query string to lowercase. Thus I changed the function to use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagNameNS" rel="nofollow noreferrer"><code>getElementsByTagNameNS</code></a> </p>

<p>The <code>getElementsByTagNameNS</code> which namespace (NS) to use is not known from your code and thus the example assumes "<a href="http://www.w3.org/1999/xhtml" rel="nofollow noreferrer">http://www.w3.org/1999/xhtml</a>". Warning quirks mode will effect the namespace.</p></li>
</ul>

<h3>Additionally</h3>

<p>The function has a failure if the selector argument is not a string. As the function does throw I assume you <strong>only</strong> use it inside a <code>try catch</code> block and you handle the error when it occurs.</p>

<h2>Why the complications!</h2>

<p>As your code relies on some assumptions that are flawed and do not compile with valid HTML I can not approve the above as worthy of anything but as an example of what not to do.</p>

<p>The code should use <code>querySelectorAll</code> and covert its iteratable return to an array. I would also drop the <code>"DOM"</code> in the name (what else could you be querying?) and include a node to focus the query.</p>

<p>Also removing the validation as query string can be used to search attributes that may conflict with the validation.</p>

<pre><code>function query(str, node = document) { return [...node.querySelectorAll(str)] }
</code></pre>

<p>Or if you control code placement and use the <code>"use strict"</code> directive you can use an arrow function expression to assign a named constant to prevent accidental overwriting of the function.</p>

<pre><code>"use strict"; // &lt;&lt; Must be at top of code.
const query = (str, node = document) =&gt; [...node.querySelectorAll(str)];
</code></pre>

<p>This is not at all replacement of jQuery</p>

<h2>BTW</h2>

<p>A reminder. <strong>NEVER duplicate Id's!!!</strong> </p>

<p>See I added 3 exclamation points and made it bold to indicate how important this warning is.</p>

<hr>

<h2>Notes</h2>

<p><sup><strong>[1.]</strong></sup> Readability and maintainability are highly subjective quantities and as such reflex my view only. I have 40Years of experience (35 as a professional) if that counts for anything.</p>
    </div>