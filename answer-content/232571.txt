<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is sure not a builder. The main characteristic of a builder is that it can build some target object.</p>

<p>Your "builder" is just a plain data structure. And you use it a bit like a service locator (antipattern).</p>

<p>The point with builders is they simplify construction of other objects. So you have some class, it has complicated constructor, maybe it accepts some abstractions and you want the builder to help you chose the correct implementations.</p>

<p>Rule of thumb is the target object/class is not aware of existence of the builder class. On other hand builder must be aware of the class of the objects it builds.</p>

<p>Also it is usualy not the target who has empty constructor, but often it is the builder. If the target had empty constructor you probably wouldn't need a builder to simplify the construction.</p>

<p>Also a builder must have some mutating methods. It would be hard to tell builder how to do the construction if he is unable to change anything. The builder must be able to incorporate your demands into his build plan yet before he actually uses that plan to build the target in a way that it meets your demands.</p>

<p>Further, the filling is where your builder can help. Dont pass just any object as filling. Create a <code>FillingInterface</code>, create one implementation of BufferedImage and one for Color. Add corresponding methods to your builder.</p>

<p>So after discussion I have changed the code sample below to show a better representation of what I mean. I also got rid of the abstract classes using decorator.</p>

<pre><code>interface FillingInterface
{
  int getWidth();
  int getHeight();
  void fill(Graphics graphics, Position position);
}

class BufferedImageFilling : FillingInterface
{
  private BufferedImage image;
  BufferedImageFilling(image) {this.image = image;}

  int getWidth() {return image.getWidth();}
  int getHeight() {return image.getHeight();};

  void fill(Graphics gr, Position position) {
    gr.drawImage(this.image, position.getX(), position.getY(), null);
  }
}

class ColorFilling : FillingInterface
{
  private Color color;
  ColorFilling(Color color, int width, int height) {
    this.color = color;
    this.width = width;
    this.height = height;
  }

  int getWidth() {return this.width;}
  int getHeight() {return this.height;};

  void fill(Graphics gr, Position position) {
    gr.setColor(this.color);
    gr.fillRect(position.getX(), position.getY(), this.width, this.height);
  }

}

interface GameObjectInterface
{
  void paint(Graphics gr);
  Coordinate getPosition();
  boolean isHidden();
  int getPictureWidth();
  int getPictureHeight();
}

class GameObject : GameObjectInterface
{
  private FillingInterface filling;
  private Coordinate position;
  private boolean hidden;

  public GameObject(FillingInterface filling, Position position, boolean hidden = false) {
    this.filling = filling;
    this.position = position;
    this.hidden = hidden;
  }

  public Coordinate getPosition() {return this.position;} 
  public boolean isHidden() {return this.hidden;}
  public int getPictureWidth() {return this.filling.getWidth();}
  public int getPictureWidth() {return this.filling.getHeight();}
  public void paint(Graphics gr) {this.filling.fill(gr, this.position);}
}

class GameObjectBuilder
{
  private boolean hidden = false;
  private FillingInterface filling;
  private Coordinate position;

  public GameObjectBuilder() {}

  public void setHidden(boolean hidden) {this.hidden = hidden;}
  public void setFilling(FillingInterface filling) {this.filling = filling;}
  public void setPosition(Coordinate position) {this.position = position;}
  public GameObject build() {return new GameObject(this.filling, this.position, this.hidden);}
}

class GameObjectDecorator : GameObjectInterface
{
  private gameObject;
  public GameObjectDecorator(GameObjectInterface gameObject) {
    this.gameObject = gameObject;
  }

  public boolean isHidden() {return this.gameObject.isHidden();}
  public Coordinate getPosition() {return this.gameObject.getPosition();}
  public int getPictureWidth() {return this.gameObjet.getPictureWidth();}
  public int getPictureHeight() {return this.gameObjet.getPictureHeight();}
  public void paint(Graphics gr) {this.gameObject.paint(gr);}
}

class MaterialGameObject : GameObjectDecorator
{
  private GameObjectInterface gameObject;
  private FillingInterface materialFilling;
  public MaterialGameObject(GameObjectInterface gameObject, FillingInterface materialFilling) {
    this.gameObject = gameObject;
    this.materialFilling = materialFilling;
  }

  public void paint(Graphics gr) {
    parent.paint(gr);
    this.materialFilling.fill(gr, this.getPosition());
  }
}

class MaterialGameObjectBuilder
{
  private GameObjectInterface gameObject;
  private FillingInterface materialFilling;

  public MaterialGameObjectBuilder() {}

  public void setGameObject(GameObjectInterface gameObject) {this.gameObject = gameObject;}
  public void setMaterialFilling(FillingInterface materialFilling) {this.materialFilling = materialFilling;}
  public MaterialGameObject build() {
    return new MaterialGameObject(this.gameObject, this.materialFilling);
  }
}
</code></pre>

<p>Although I think at this point the builders become useless as there are now only 2-3 parameters to constructor. Should be pretty ok to use the constructors directly...</p>
    </div>