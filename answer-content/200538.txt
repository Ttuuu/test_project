<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>People are very eager to present their own solutions, so let me attempt an actual review of your code:</p>

<ul>
<li><p>Your names could be clearer. <code>Strings</code> is not very descriptive, and neither are <code>alphabetS/L</code>. <code>SIZE</code> doesn't tell anyone what kind of size it is or what it relates to.</p></li>
<li><p>Anything not nested under <code>private</code> or <code>public</code> in a <code>class</code> is automatically <code>private</code>. So you might as well move those stray members into the <code>private</code> section to make things clearer.</p></li>
<li><p>If you're using C++11 or higher then you can use <code>constexpr</code>.</p></li>
<li><p>Why are you returning a value from your <code>toLower</code> function after you pass in a mutable reference? Might as well drop the <code>return</code> and use the reference.</p></li>
<li><p>Your <code>toLower</code> function does a lot of work. Assuming you don't want to use the STL for this you can still roll your own function. If you only want to check characters from A-z then you can simply get the lowercase by adding the difference to any number representation smaller than 97 (a). Look at the <a href="https://en.wikipedia.org/wiki/ASCII" rel="noreferrer">ASCII chart</a> for reference.</p></li>
<li><p>You can simply initialize <code>count</code> with <code>int count[SIZE]{};</code>. Alternatively you could use <code>memset</code>.</p></li>
<li><p>Try to avoid performing more than one task in a function. E.g. factor out the <code>toLower</code> functionality of <code>isAllUnique</code>. It could then be <code>const</code> as it has no need to mutate class state.</p></li>
<li><p>For the actual algorithm I prefer <em>Incomputable</em>'s approach over the one suggested by <em>Ben Steffan</em> which can be used without overly relying on the STL.</p></li>
<li><p><a href="https://softwareengineering.stackexchange.com/questions/59880/avoid-postfix-increment-operator">Prefer prefix over postfix for the increment operator</a>.</p></li>
<li><p>Don't compare to <code>true</code>. Instead simply do <code>if (a_bool_var)</code>, or <code>if (!a_bool_var)</code> for the negation.</p></li>
<li><p>This could probably be done with just free functions without needing a class object.</p></li>
</ul>
    </div>