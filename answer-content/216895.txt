<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You're passing fundamental types by const reference.  These are better off just being passed by value.  So you'd get things like</p>

<pre><code>explicit address(uint32_t value);
reference operator[](int index) noexcept(false);
</code></pre>

<p>Your prefix increment and decrement operators should return a reference to the incremented value.</p>

<pre><code>address &amp;operator++() { /* ... */ return *this; }
address &amp;operator--() { /* ... */ return *this; }
</code></pre>

<p>This will allow expressions like <code>addr = ++other_addr;</code>.  (Note that, since you're in the <code>address</code> class, you can just name the class, you don't need to specify scope with <code>::ip::address</code>).</p>

<p>Your postfix increment and decrement operators have a bug, because they return a reference to a local variable.  The return types should be a value.</p>

<pre><code>address operator++(int);
address operator--(int);
</code></pre>

<p>For readability and clarity, expressions mixing shifts and bit masking should use parentheses:</p>

<pre><code>data_[0] = (value &gt;&gt; 24) &amp; 0xFF;
</code></pre>
    </div>