<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I subscribe to everything @TobySpeight said.</p>

<p>I also believe that you could make your code a lot clearer (and your coding style better) by obeying a few important rules:</p>

<h2>When in doubt, choose the simplest algorithm</h2>

<p>Binary representation of numbers between 0 and the size of the powerset are the simplest tool to compute the subsets of the powerset; 0 means the absence, 1 the presence of an element of the initial set:</p>

<pre><code>// {1, 2, 3}
// 000 -&gt; {}
// 001 -&gt; {3}
// 010 -&gt; {2}
// ...
// 111 -&gt; {1,2,3}
</code></pre>

<p>Since the size of the powerset is <code>2^N</code>, where <code>N</code> is the cardinality of the set, and given a function taking the original set and a number to return the subset characterized by this number, a simple array and a simple <code>for</code> loop are enough to achieve our objective:</p>

<pre><code>for (int i = 0; i &lt; pow(2, set.size); ++i)
    powerset[i] = subset(set, i);
</code></pre>

<p>That is quite simpler than linked nodes etc.</p>

<h2>When in doubt, bundle together what goes together well</h2>

<p>Outside of special cases, like the C-string, a pointer without a size won't be of much use to represent a range. So keep the pointer and the size together, rather than having arrays of pointers and arrays of sizes side by side, as in your <code>subsets</code> function:</p>

<pre><code>typedef struct {
  int* items;
  size_t size;
} Set;

typedef struct {
  Set* subsets;
  size_t size;
} Powerset;
</code></pre>

<p>Whether you want to fill them, print them, free them, you'll need to have both informations, because you can't deduce one from the other. </p>

<h2>A working example:</h2>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

typedef struct {
  int* items;
  size_t size;
} Set;

typedef struct {
  Set* subsets;
  size_t size;
} Powerset;

int is_bit_on(int n, int pos) {
  return (n &gt;&gt; pos) &amp; 1;
}

int set_bits(int n) {
  // any set bits counting function will do fine
  // this one is gcc only
  return __builtin_popcount(n);
  // but you could have to write your own;
  // see https://stackoverflow.com/questions/109023/how-to-count-the-number-of-set-bits-in-a-32-bit-integer
}

Set subset(Set set, int step) {
  int* subset = malloc(sizeof(int) * set_bits(step));
  if (subset == NULL) {
    Set failure = { .items = NULL, .size = 0 };
    return failure;
  }
  int elem_n = 0;
  for (; set.size &gt; 0; --set.size) {
    if (is_bit_on(step, set.size - 1))
      subset[elem_n++] = set.items[set.size-1];
  }
  Set ret = { .items = subset, .size = elem_n };
  return ret;
}

Powerset powerset(Set set) {
  size_t powerset_size = pow(2, set.size);
  Powerset powerset = {
    .subsets = malloc(sizeof(Set) * powerset_size),
    .size  = powerset_size
  };
  Powerset failure = { .subsets = NULL, .size = 0 };
  if (powerset.subsets == NULL) return failure;

  for (size_t i = 0; i &lt; powerset_size; ++i) {
    powerset.subsets[i] = subset(set, i);
    if (powerset.subsets[i].items == NULL) {
      for (size_t j = 0; j &lt; i; ++j) {
        free(powerset.subsets[j].items);
      }
      return failure;
    }
  }
  return powerset;
}

void free_powerset(Powerset powerset) {
  for (size_t i = 0; i &lt; powerset.size; ++i) {
    free(powerset.subsets[i].items);
  }
  free(powerset.subsets);
}

void print_array(Set array) {
  for (size_t i = 0; i &lt; array.size; ++i)
    printf("%d, ", array.items[i]);
  printf("\n");
}


int main(void) {
  int items[] = {1, 2, 3}; 
  Set set = { .items = items, .size = 3};
  Powerset test = powerset(set);

  if (test.subsets == NULL) {
    printf("Bad allocation");
    return 1;
  }

  for (size_t i = 0; i &lt; test.size; ++i)
    print_array(test.subsets[i]);

  free_powerset(test);
  return 0;
}
</code></pre>
    </div>