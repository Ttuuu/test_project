<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>By simply using an ordered map, you could arrange your keys in highest-to-lowest order, so that you can simply find the first matching prefix and take the sum from there. This way, you only need to loop over the string once.</p>

<p>The only secret is, that you have to be aware of java base data structures, in this case a LinkedHashMap which guarantees unmodified key order.</p>

<p>Working example:</p>

<pre><code>// BTW: DON'T create a subclass just to init a map.
private static LinkedHashMap&lt;String, Integer&gt; romanSegmentToInt = new LinkedHashMap&lt;&gt;();
static {
    romanSegmentToInt.put("M", 1000);
    romanSegmentToInt.put("CM", 900);
    romanSegmentToInt.put("D", 500);
    romanSegmentToInt.put("CD", 400);
    romanSegmentToInt.put("C", 100);
    romanSegmentToInt.put("XC", 90);
    romanSegmentToInt.put("L", 50);
    romanSegmentToInt.put("XL", 40);
    romanSegmentToInt.put("X", 10);
    romanSegmentToInt.put("IX", 9);
    romanSegmentToInt.put("V", 5);
    romanSegmentToInt.put("IV", 4);
    romanSegmentToInt.put("I", 1);
}

public static int romanToInt(String in) {
    int sum = 0;
    while (!in.isEmpty()) {
        for (Map.Entry&lt;String, Integer&gt; segment : romanSegmentToInt.entrySet()) {
            if (in.startsWith(segment.getKey())) {
                sum += segment.getValue();
                in = in.substring(segment.getKey().length());
                break; // continue with outer loop
            }
        }
        // add error handling, if no prefix was found -&gt; illegal input
    }
    return sum;
}
</code></pre>
    </div>