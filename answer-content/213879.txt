<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><strong>Iterative vs Recursive</strong></h2>

<p>For code efficiency, I personally always prefer the iterative approach. According to LeetCode :</p>

<ul>
<li>You iterative code clocked at 12ms on Leetcode, being 3 times as fast as your recursive approach (36ms).</li>
<li>It uses less memory 18.7MB, vs 19.2MB for the recursive solution. </li>
</ul>

<p>Now let's dig in to see what could be improved :</p>

<h2><strong>Iterative approach</strong></h2>

<ul>
<li><p>On Leetcode, or whenever you're benchmarking your code, printing to the console would slow down the execution time dramatically. The previous execution times are given without <code>print(ans.reduce("", +))</code></p></li>
<li><p>I see that you've used an array of strings to ease the access to characters at a given index. You could do the same thing with <code>String.Index</code> and it would spare you the excess memory allocations :</p>

<pre><code>var ans = "1"
var temp: String, j: Int
for _ in 1..&lt;n {
    //  from the beginning 1 to what we what
    j = 1
    temp = ""
    for i in ans.indices.dropFirst() {
        //  Situation one: the current is equal to the previous ( util the last )
        if ans[ans.index(before: i)] == ans[i] {
            j += 1
        }
        //  Situation two: the current is not equal to the previous ( util the last )
        else {
            temp.append(String(j))
            temp.append(ans[ans.index(before: i)])
            j = 1
        }
    }
    //  Situation three: the last value
    temp.append(String(j))
    temp.append(String(ans.last!))
    ans = temp
}
</code></pre></li>
</ul>

<p>This reduces memory usage slightly to 18.6MB. 
But the execution time was on average 16ms (varied from 12ms to 20ms on Leetcode). This could be due to <code>.count</code> <s>and <em>subscripting</em></s> being O(n) on a String: a <code>String</code> in Swift is not randomAccess, unlike an array. Just to check, I tried it on <a href="https://tio.run/##nZPBbtswDIbvegouJwlr3QXbKVgKDCgK9OzjUBSqzTQMHMqTqKTFkGfPJDndmqRZsPFimPpJfqTEsKaZfNluadk7L3DrIrdWyDEo1XQ2BKhdF4vjp4Jks8gNNEkm37it7Yt@AJ7AHYuBy2uoxRM/7aTZVtaD5QBTGI1He17BZT/ZBVzAouT4LZg5Dw9ADOOq@spv8mW7ukoC75Ygc4RHfCLmXHQM4mA9twJrLN@9oEVCGO95MkDmGu15c2XKlRN1RdxSg6FqvetvyQfR5oDllacmicPcHOOkkDXRe2QBCoA/ou0yXvb3HlfkYgANabBd8aVJC5ijzDTLGN93KPisHzHxpfxk7mE6LYd0/w7S0PHHw5azbc7wy9od8bOT/@4Bu4AnCPMNVLbvkVs9PAS9MOas9ORIzIk5nB/DRv1lIHOPuystLa5sF1H9Yx/vSHILOeGHA@mwLjlAHeN5lOjL41TDwUapDgWC2LS@U7ixgtoMrvT7urzaVG939vOnQZJo/sSoPmGJDoPyIh9WQktMe4k@NV0TN6hLIWO2218" rel="nofollow noreferrer">TIO</a>, and it gave the edge to the <code>String.Index</code> version. Anyway, in the rest of this answer, I'll revert to using an array for clarity.</p>

<ul>
<li><p><strong>3 for the price of one</strong> : This is the direct answer to your question, and all it takes is adjusting the bounds of the inner loops (the forced-unwrapping was calling for this change) :</p>

<pre><code>for _ in 1..&lt;n {
    var temp: [String] = []
    var i = 0
    while i &lt; ans.count {
        let char = ans[i]
        var j = 0
        while i &lt; ans.count &amp;&amp; ans[i] == char {
            j += 1
            i += 1
        }
        temp.append(String(j))
        temp.append(char)
    }
    ans = temp
} 
</code></pre></li>
</ul>

<p>Notice that the outer loop was chosen as a <code>for</code> loop, since it is faster than a <code>while</code> loop in Swift, since the latter checks the condition on each iteration. <a href="https://tio.run/##tY6xCsJAEETr26/YMkEJF7FMOhGs/YBwmA0uJHtyWROC5NvPQ23sbFyYZmYeO@PMne5j5OHmg@LR36V1yl4AWo8PMJMLuGCNFsD0pDiqC7pLxsEpZXly5yv3lDoVltbaJilxmM6YBTc1lmDWD0zSfqG3wKLZsn0FhfJAJ1EKk@vPLBfK3s/yHNbf53Q@YIMsaIui@uuiGJ8" rel="nofollow noreferrer">Try It Online!</a></p>

<ul>
<li><p><code>ans.reduce("", +)</code> can be simply written as <code>ans.joined()</code></p></li>
<li><p>Instead of using arrays of strings that contains one character only, better use arrays of the less expensive type: <code>Character</code>. </p></li>
</ul>

<p>Putting it all together :</p>

<pre><code>class Solution {
    func countAndSay(_ n: Int) -&gt; String {
        var ans: [Character] = ["1"]
        for _ in 1..&lt;n {
            var temp: [Character] = []
            var i = 0
            while i &lt; ans.count {
                let char = ans[i]
                var j = 0
                while i &lt; ans.count &amp;&amp; ans[i] == char {
                    j += 1
                    i += 1
                }
                temp.append(Character(String(j)))
                temp.append(char)
            }
            ans = temp
        }
        return String(ans)
    }
}
</code></pre>

<p>Leetcode : Runtime: 12 ms, Memory Usage: 18.8 MB</p>

<h2><strong>Recursive approach</strong></h2>

<ul>
<li><p>Personally, I find it more idiomatic to use the <code>guard</code> statement instead of an if condition in an (<em>very</em>) early return :</p>

<pre><code>guard 1 &lt; n else {
     return "1"
}
</code></pre></li>
</ul>

<p>Notice that I've used the <code>&lt;</code> since it is the one defined by default, and no protocol witnesses would be generated at runtime for it. This a very slight improvement, and you could <a href="https://tio.run/##hYzBCsIwEETv@xXrLSlqI3i0NxE8@wES7IoLaVLStQ2I3x5jPXgSB@Y0b94w8VW2OXPXhyh4CHffWuHgAUYbMWGDG2PO5lMAR4KD2II2uLdCSsN0Y0eFXDRo8AFYknBVfvCccfLtF4a6@u0wuCvXf4qqBugje1Fp@V7Wwh0dvVAcrTuxv5Ca7VpDzi8" rel="nofollow noreferrer">try it online</a>.</p>

<ul>
<li><p><code>arr</code> is an array of optional Ints, which is unnecessary since we're sure that all characters of <code>str</code> are convertible to <code>Int</code>. So, we'd better use <code>compactMap</code>. That would spare you force unwrapping <code>last</code> and <code>num</code> :</p>

<pre><code>let arr = Array(str).compactMap{Int(String($0))}
</code></pre></li>
</ul>

<p>This change alone brings the execution time from 36ms to 32ms.</p>

<p>Or, force unwrap inside the <code>map</code> closure :</p>

<pre><code>let arr = Array(str).map{Int(String($0))!}
</code></pre>

<p>which brings the runtime to 28ms.</p>

<ul>
<li><p>Using string interpolation is <a href="https://tio.run/##fY49C8IwEIb3@xVHpsSvRnC0mwjOXQUJNmqgTUt6tgHxt8czOOjiTXcPPPe@w@QutEnJtX0XCPfd3deGXOcBRhMwYolrrU9a63wPFJy/MhQCoLHEwLBW4s6QlQqgmMF0c41FjVu2H4A8H2teYpU3GVXmEZf8Hp4wK@CvJo6siF8nx1tff4VDzwLJuHjzFbnWHjzZMJqmcv5sZS6rFKT0Ag" rel="nofollow noreferrer">really slow</a>, better use a String initializer:</p>

<pre><code>result += String(key.0) + String(key.1)
</code></pre></li>
</ul>

<p><strong>Alternative recursive implementation:</strong></p>

<p>Here is an alternative implementation that clocks at 16ms, 18.4MB :</p>

<pre><code>class Solution {
    func countAndSay(_ n: Int) -&gt; String {
        guard 1 &lt; n else {
            return "1"
        }
        let str = countAndSay(n - 1)
        var ans = ""
        var count = 0
        var i = str.startIndex
        while i &lt; str.endIndex {
            count += 1
            let indexfterI = str.index(after: i)
            if (indexfterI &lt; str.endIndex &amp;&amp; str[indexfterI] != str[i]) ||
                indexfterI == str.endIndex {
                ans += String(count) + String(str[i])
                count = 0
            }
            i = indexfterI
        }
        return ans
    }
}
</code></pre>

<h2><strong>Taking advantage of the problem description</strong></h2>

<p>Since <code>n</code> is less than 30, you can generate all the answers from 1, to 30, put them in an array, and return the element corresponding to <code>n</code> :</p>

<pre><code>class Solution {
    func countAndSay(_ n: Int) -&gt; String {
        return a[n]
    }
    let a = ["", "1", "11", "21", "1211", "111221", "312211", ... ] //31 elements
}
</code></pre>

<p>This hack clocks at 8ms.</p>
    </div>