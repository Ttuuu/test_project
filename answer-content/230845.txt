<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Overall, I think the code looks good.  Here are a few sugestions that may help you improve your code.</p>

<h2>Check for overflow</h2>

<p>As you know, terms of the Fibonacci sequence get very big very quickly.  For this reason, it's easy to overflow the numerical range.  I'd suggest addressing this by throwing an exception in <code>iterator&amp; operator++()</code>:</p>

<pre><code>if (b_ &lt; a_) {
  throw std::overflow_error("Exceeded range of underlying type");
}
</code></pre>

<h2>Use an unsigned type</h2>

<p>None of the terms of the Fibonacci sequence are negative, so I'd suggest that perhaps <code>unsigned</code> or even <code>unsigned long</code> might be more appropriate base types.  </p>

<h2>Use a template</h2>

<p>It may make sense to turn this into a templated function to allow different types to be used as the base type.  This would be one way to extend the range, such as with the <a href="http://gmplib.org/" rel="nofollow noreferrer">GNU Multiple Precision Arithmetic Library</a>.</p>

<h2>Consider a different <code>operator++</code> implementation</h2>

<p>The current implementation of the <code>operator++</code> is this:</p>

<pre><code>iterator&amp; operator++() {
  ++i_;
  b_ = b_ + a_;
  a_ = b_ - a_;
  return *this;
}
</code></pre>

<p>I would suggest, especially if you decide to implement templates, that this might be more efficient:</p>

<pre><code>iterator&amp; operator++() {
  ++i_;
  std::swap(a_, b_);
  b_ += a_;
  if (b_ &lt; a_) {
      throw std::overflow_error("Exceeded range of underlying type");
  }
  return *this;
}
</code></pre>
    </div>