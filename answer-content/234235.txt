<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You can improve the testability of your code by:</p>

<ul>
<li>Refactoring SplitMultiHostConnectionString() into it's own class</li>
<li>Passing in the connection strings instead of accessing ConfigurationManager (thus removing the dependency on ConfigurationManager)</li>
<li>This will make your class no longer static, but you can make it a singleton via the DI framework</li>
<li>moving the logic around mySqlConnection.Open(); into it's own function, since that call makes the entire thing untestable</li>
</ul>

<p>Quality issues:</p>

<ul>
<li>Do not throw or catch System.Exception. In your case in particular, you need to be able to distinguish if any error is retryable. For example, you'll fail ungracefully if the connection string is malformed. Better: Review what exceptions are going to be thrown by the called code.</li>
<li>Code is not thread safe. You also update LastTimeConnectionWasUsed only after opening the connection, giving other threads an large window to use that same connection. Better: Use ConcurrentQueue</li>
<li>I would not set LastTimeConnectionWasUsed five minutes into the future. This will make the code harder to maintain and debug. Better: Put broken connections into a standby list instead of implicitly bringing them back into rotation.</li>
</ul>

<p>I think it's a tricky thing to get 100% right. I'd load balance with an external load balancer like <a href="https://docs.nginx.com/nginx/admin-guide/load-balancer/tcp-udp-load-balancer/" rel="nofollow noreferrer">nginx</a>.</p>
    </div>