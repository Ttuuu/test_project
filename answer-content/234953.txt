<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think implementing a game is a good way to learn a new programming
language. If you are up for it, you could try coding a graphical
version of Minesweeper using a game library such as
<a href="https://www.pygame.org/news" rel="nofollow noreferrer">Pygame</a> or
<a href="http://arcade.academy/" rel="nofollow noreferrer">Arcade</a> to learn even more about the
language.</p>

<p>Below are my suggestions for improvements, in no particular order:</p>

<h3>Comments</h3>

<p>When I review code, I read the code and the comments in tandem. The
comments should help me understand what the code does. But for this
code I don't think they do, because they are on a quite low
level. Comments that tells me essentially the same thing as the code
itself aren't very interesting. What the comments instead should
communicate is the <em>intent</em> of the code. The <em>why</em> not the <em>how</em>.</p>

<p>I suggest instead of putting comments on individual lines, delete them
all and replace them with a big comment on top of the module where you
describe the architecture of the <code>Minesweeper</code> class:</p>

<pre><code>import random

# Minesweeper
# -----------
# Minesweeper is a solitaire game in which the goal is to reveal all
# mines on a board. The Minesweeper class implements the game. It has
# the following attributes:
#
# * width: width of board
# ...
# * table: board representation
#
# This example shows how the class should be used:
#
#     ms = Minesweeper()
#     while True:
#         ms.game_create()
#         ...
</code></pre>

<p>It gives the reader an overview of what the code is all about.</p>

<h3>Yes/no prompts</h3>

<p>A convention expressed in <a href="https://stackoverflow.com/a/3041990/189247">this Stackoverflow
answer</a> is to let the
default choice in a yes/no prompt be capitalized. So if the prompt is</p>

<pre><code>Play default size? [Y/n]:
</code></pre>

<p>the user knows that by just pressing return, the default size is
choosen. Yes, I know it is a "small detail" but to make great software
you have to consider these little things.</p>

<h3>Integer prompt function</h3>

<p>If the user does not want to use the default size, he or she is
prompted for the width, height and the number of mines. Consider
making a function encapsulating the prompting code:</p>

<pre><code>def prompt_int(name, lo, hi):
    while True:
        s = input(f'Enter {name} [{lo}..{hi}]: ')
        try:
            v = int(s)
        except ValueError:
            print('ERROR: Try again, number only')
            continue
        if not (lo &lt;= v &lt;= hi):
            print('ERROR: Allowed range %d..%d' % (lo, hi))
            continue
        return v
</code></pre>

<h3>Unused return values</h3>

<p>The return value of the <code>game_create</code>, <code>user_input</code> and
<code>mines_generator</code> methods are unused.</p>

<h3>Only initialize attributes in one place</h3>

<p>The attributes <code>table</code>, <code>width</code>, <code>height</code> and <code>mine_numbers</code> are
initialized both in the constructor and in the <code>game_create</code>
method. Better to put the <code>game_create</code> code in the constructor so
that the initialization only happens once. After all, it is a
constructor so it makes sense that the game is created in it.</p>

<h3>Avoid magic numbers</h3>

<p>It looks like if a cell contains 9 it is a mine. It is better to avoid
magic numbers and to use constants instead. Declare</p>

<pre><code>class Minesweeper:
    CLEAR = 0
    MINE = 9
</code></pre>

<p>and then to check if a cell contains a mine write</p>

<pre><code>self.table[i][j] == Minesweeper.MINE
</code></pre>

<h3>Board representation</h3>

<p>It is unclear to me why the board representation (<code>table</code>) is
initialized as a one-dimensional array and then changed to a
two-dimensional one. Why not make it two-dimensional from the start?</p>

<h3>Counting mines with <code>min</code> and <code>max</code></h3>

<p>Use <code>min</code> and <code>max</code> to count mines in the following way:</p>

<pre><code>def complete_table(self):
    width, height, table = self.width, self.height, self.table
    for i in range(height):
        for j in range(width):
            if table[i][j] == Minesweeper.MINE:
                continue
            table[i][j] = 0
            for i2 in range(max(0, i - 1), min(i + 2, height)):
                for j2 in range(max(0, j -1), min(j + 2, width)):
                    if table[i2][j2] == Minesweeper.MINE:
                        table[i][j] += 1
</code></pre>

<p>This usage of <code>min</code> and <code>max</code> for bounds-checking is a common
pattern. The first line is just to make the code shorter - so that
<code>self</code> doesn't have to be repeated everywhere.</p>

<h3>Perfer storing data in a machine friendly format</h3>

<p>If some input has to be converted in some way to become usable by the
computer, then it should be stored in the converted format. That way,
the conversion doesn't have to be repeated each time the data is used.</p>

<p>For example, <code>user_column</code> and <code>user_row</code> are inputted using 1-based
indexing. Which is fine because that makes sense for humans. But for
Python, 0-based indexing is more convenient so the values should be
converted as soon as they are read from the user. The conversion
simply means subtracting 1 from them.</p>

<p>The same goes for the <code>user_reveal</code> attribute. It stores a sequence
like this:</p>

<pre><code>['0101', '0201', '0404']
</code></pre>

<p>but it should be stored in a Python-friendly format, like this:</p>

<pre><code>[(0, 0), (1, 0), (3, 3)]
</code></pre>

<h3>Don't store data twice</h3>

<p><code>user_row</code> and <code>user_column</code> are after the first turn the same as the
last element of the <code>user_reveal</code> list. This allows us to remove the
<code>user_row</code> and <code>user_column</code> attributes and instead get the same data
by referring to <code>user_reveal[-1]</code>.</p>

<h3>Don't delay returns</h3>

<p>In <code>end_game</code> there is the following:</p>

<pre><code>if ...:
    end_game = True
    ...
elif ...:
    end_game = True
    ...
else:
    end_game = False
</code></pre>

<p>It is better to express it as follows</p>

<pre><code>if ...:
    ...
    return True
if ...:
    ...
    return True
return False
</code></pre>

<p>because it makes the code flow "straighter."</p>

<h3>Avoid nested functions</h3>

<p>Nested functions have their uses, but they also makes the code harder
to follow. IMO, they should be avoided.</p>

<h3>Names</h3>

<p>Last but not least, the names of many objects can be improved. For
methods and functions, it is preferable to include a verb to make the
name "active." Here are the renames I suggest:</p>

<ul>
<li><code>first_turn =&gt; run_first_turn</code></li>
<li><code>print_table =&gt; print_minefield</code></li>
<li><code>mines_generator =&gt; place_mines</code></li>
<li><code>mine_numbers =&gt; mine_count</code></li>
<li><code>user_input =&gt; read_location</code></li>
<li><code>end_game =&gt; is_game_over</code></li>
<li><code>user_reveal =&gt; revealed_locations</code> (for collection types, you want
the name to end with an S)</li>
<li><code>adjacent_zero =&gt; reveal_safe_locations</code></li>
<li><code>reveal_mine =&gt; reveal_all_mines</code></li>
<li><code>complete_table =&gt; place_mine_counts</code></li>
<li><code>table =&gt; minefield</code></li>
</ul>

<h3>Final code</h3>

<pre><code>import itertools
import random

# Minesweeper
# -----------
# Minesweeper is a solitaire game in which the goal is to reveal all
# mines on a board. The Minesweeper class implements the game. It has
# the following attributes:
#
# * width: width of board
# ...
# * minefield: board representation
#
# This example shows how the class should be used:
#
#     ms = Minesweeper()
#     while True:
#         ms.game_create()
#         ...

def prompt_int(name, lo, hi):
    while True:
        s = input(f'Enter {name} [{lo}..{hi}]: ')
        try:
            v = int(s)
        except ValueError:
            print('ERROR: Try again, number only')
            continue
        if not (lo &lt;= v &lt;= hi):
            print('ERROR: Allowed range %d..%d' % (lo, hi))
            continue
        return v

class Minesweeper:
    CLEAR = 0
    MINE = 9
    def __init__(self, width = 9, height = 10, mine_count = 12):
        self.revealed_locations = []
        print(f'Default size is {width}*{height}, {mine_count} mines')
        default_size = input('Play default size? [Y/n]: ')
        if default_size.lower() == 'n':
            self.width = prompt_int('width', 0, 99)
            self.height = prompt_int('height', 0, 99)
            self.mine_count = prompt_int('number of mines',
                                           0, self.width * self.height - 1)
        else:
            self.width = width
            self.height = height
            self.mine_count = mine_count
        self.minefield = [[Minesweeper.CLEAR] * self.width
                      for _ in range(self.height)]

    def read_location(self):
        while True:
            s = input('Enter {[column][row]} in 4 digits eg. 0105: ')
            if len(s) != 4:
                print('ERROR: Only 4 digits allowed')
                continue
            try:
                row = int(s[2:]) - 1
                column = int(s[:2]) - 1
            except ValueError:
                print('ERROR: Try again, number only')
                continue
            if not (0 &lt;= row &lt; self.height):
                print('ERROR: Row out of range')
            elif not (0 &lt;= column &lt; self.width):
                print('ERROR: Column of range')
            elif (row, column) in self.revealed_locations:
                print('ERROR: Already revealed')
            else:
                break
        self.revealed_locations.append((row, column))

    def place_mines(self):
        locs = set(itertools.product(range(self.height), range(self.width)))
        locs -= {self.revealed_locations[-1]}
        locs = random.sample(locs, self.mine_count)
        for row, column in locs:
            self.minefield[row][column] = Minesweeper.MINE

    def place_mine_counts(self):
        width, height, minefield = self.width, self.height, self.minefield
        for i in range(height):
            for j in range(width):
                if minefield[i][j] == Minesweeper.MINE:
                    continue
                minefield[i][j] = Minesweeper.CLEAR
                for i2 in range(max(0, i - 1), min(i + 2, height)):
                    for j2 in range(max(0, j -1), min(j + 2, width)):
                        if minefield[i2][j2] == Minesweeper.MINE:
                            minefield[i][j] += 1

    def reveal_safe_locations(self, row, column):
        width, height, minefield = self.width, self.height, self.minefield
        if minefield[row][column] == Minesweeper.CLEAR:
            for i in range(max(0, row - 1), min(row + 2, height)):
                for j in range(max(0, column - 1), min(column + 2, width)):
                    if (i, j) not in self.revealed_locations:
                        self.revealed_locations.append((i, j))
                        if minefield[i][j] == Minesweeper.CLEAR:
                            self.reveal_safe_locations(i, j)

    def run_first_turn(self):
        self.read_location()
        self.place_mines()
        self.place_mine_counts()
        row, column = self.revealed_locations[-1]
        self.reveal_safe_locations(row, column)

    def print_minefield(self):
        print('\n'*10)
        for row in range(self.height + 1):
            cell = '|'
            for column in range(self.width + 1):
                if row == 0 and column == 0:
                    cell += ' .|'
                elif row == 0:
                    cell += f'{column:2}|'
                elif column == 0:
                    cell += f'{row:2}|'
                elif (row - 1, column - 1) in self.revealed_locations:
                    cell += f'{self.minefield[row-1][column-1]:2}|'
                else:
                    cell += '{:&gt;3}'.format('|')
            print(cell)

    def reveal_all_mine(self):
        for i in range(self.height):
            for j in range(self.width):
                if self.minefield[i][j] == Minesweeper.MINE:
                    self.minefield[i][j] = 'XX'
                    if (i, j) not in self.revealed_locations:
                        self.minefield[i][j] = '**'
                        self.revealed_locations.append((i, j))

    def is_game_over(self):
        row, column = self.revealed_locations[-1]
        if self.minefield[row][column] == Minesweeper.MINE:
            self.reveal_all_mines()
            self.print_minefield()
            print('YOU LOSE!')
            return True
        unmined_locations_count = self.width * self.height - self.mine_count
        if len(self.revealed_locations) == unmined_locations_count:
            self.reveal_all_mines()
            self.print_minefield()
            print('YOU WIN!')
            return True
        return False

    def restart_game(self):
        restart = input('Restart? [y/N]: ')
        return restart.lower() == 'y'

def main():
    while True:
        ms = Minesweeper()
        ms.print_minefield()
        ms.run_first_turn()
        while not ms.is_game_over():
            ms.print_minefield()
            ms.read_location()
            row, column = ms.revealed_locations[-1]
            ms.reveal_safe_locations(row, column)
        if not ms.restart_game():
            break

if __name__ == '__main__':
    main()
</code></pre>
    </div>