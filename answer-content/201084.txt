<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In parameters for your script, you usually want a <code>[switch]</code> instead of <code>[bool]</code>. It's more convenient to use when launching the script and works the same way in the script.</p>

<p>Since your script doesn't work without a <code>repositoryDirectory</code>, you should make this a <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_functions_advanced_parameters?view=powershell-3.0" rel="nofollow noreferrer">mandatory parameter</a>. PowerShell provides a lot of convenient error handling out of the box if you annotate your parameters properly.</p>

<pre><code>param(
    [parameter(Mandatory=$true)] [string] $RepositoryDirectory,
    [switch] $IsProduction
)

PS&gt; .\Deploy-SF.ps1 'Repository' -IsProduction
</code></pre>

<p><code>Write-Host</code> is generally frowned upon. It keeps the text out of the standard stream and is strictly for display in the console. You can't capture this text in a log file for example, by redirecting the script output. Here you use it for colored text, which is a reason. But if you can get by without the green text, you can simply put your string as a statement on a line. It will get end up in the output stream automatically. And PowerShell expands variables automatically inside of double quotes.</p>

<pre><code># instead of
Write-Host "Tests passed: " $testRatio "% | Tests remaining: " $testsRemaining
# use
"Tests passed: $testRatio% | Tests remaining: $testsRemaining"
# wrap complex expressions in $()
"Time = $($Some.Object.Duration()) Hours"
</code></pre>

<p>If you want to do fancy tricks with overwriting the same line repeatedly, you can do as you did or read and write <code>$Host.UI.RawUI.CursorPosition</code>.</p>

<p>You can display a progress bar and some additional info using <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/write-progress?view=powershell-3.0" rel="nofollow noreferrer"><code>Write-Progress</code></a>.</p>

<p>Don't use red text for errors. Use <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_throw?view=powershell-3.0" rel="nofollow noreferrer"><code>Write-Warning</code></a>, <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_throw?view=powershell-3.0" rel="nofollow noreferrer"><code>Write-Error</code></a> or <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_throw?view=powershell-3.0" rel="nofollow noreferrer"><code>throw</code></a> accordingly (depending on if you want a terminating error or not).</p>

<p>Use PowerShell commandlets instead of .NET classes whenever possible. It's easier to read, parameters are easily discoverable etc.</p>

<pre><code># instead of
[System.IO.File]::Exists($path)
[System.IO.Path]::Combine($srcDirectory,"package.xml")
# use
Test-Path $path
Join-Path $srcDirectory "package.xml"
</code></pre>
    </div>