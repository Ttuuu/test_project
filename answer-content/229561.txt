<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review and welcome back to C++!  Here's my two cents:</p>

<ul>
<li><p>Use <code>&lt;cmath&gt;</code> instead of the deprecated <code>&lt;math.h&gt;</code>.</p></li>
<li><p>Sort the <code>#include</code> directives according to alphabetical order.</p></li>
<li><p>This is not true:</p>

<blockquote>
<pre><code>namespace { // anonymous namespace, things in here are "private" to wu_manber namespace
</code></pre>
</blockquote>

<p>Everything inside this anonymous namespace is effectively placed in the enclosing namespace (with internal linkage), so <code>wu_manber::fastmod</code> becomes an ODR time bomb.</p></li>
<li><p>Instead of trying to defeat the compiler with the <code>fastmod</code> function, just turn on the optimizations and let the compiler decide.  The compiler can usually do better.</p></li>
<li><p>Since you use <code>std::basic_string&lt;CharType&gt;</code>, you should also have a <code>CharTraits</code> template parameter for user-defined character types to work.</p></li>
<li><p><code>unsigned short</code> is not semantic.</p></li>
<li><p>Instead of trying to manually handle memory management inside an otherwise irrelevant class and ending up with exception unsafe code (the first <code>new</code> is leaked if the second <code>new</code> throws), use standard facilities like <code>std::unique_ptr</code> or <code>std::vector</code> instead.</p></li>
<li><p>Consistently use member initializer clauses in the constructor, rather than mixing them with assignments.</p></li>
<li><p>Do not use <code>pow</code> for integer exponentiation.  Use <code>&lt;&lt;</code> instead.  If you need readability, write a function: (with proper SFINAE treatment)</p>

<pre><code>template &lt;class T&gt;
constexpr T power2(T n)
{
    assert(n &lt; static_cast&lt;T&gt;(std::numeric_limits&lt;T&gt;::digits));
    return 1 &lt;&lt; n;
}
</code></pre></li>
<li><p>In C++, a byte is not guaranteed to be 8 bits.  The number of bits in a byte is <code>CHAR_BIT</code>.</p></li>
<li><p>Use <code>std::size_t</code> indexes to traverse an array, not <code>int</code>.</p></li>
<li><p>Use <code>static_cast</code> instead of C style casts.</p></li>
<li><p>Do not use <code>std::function</code> if you do not want type erasure (which is expensive).  Use a template parameter, call with <code>std::invoke</code>, and SFINAE with <code>std::is_invocable</code> instead.</p></li>
<li><p>The functions are way too long.  They should be separated into different functions.  I am not familiar with the algorithm, but at least this should be in a separate function:</p>

<pre><code>// hash value for HASH table
unsigned int hashValue;
hashValue = text[idx];
hashValue &lt;&lt;= HBITS_;
hashValue += text[idx - 1];
hashValue &lt;&lt;= HBITS_;
hashValue += text[idx - 2];
hashValue = fastmod(hashValue, tableSize_);
</code></pre></li>
<li><p>It's <code>std::size_t</code>, not <code>size_t</code>, and you forgot to <code>#include &lt;cstddef&gt;</code>.</p></li>
<li><p><code>B_</code> can (and should) be <code>static constexpr</code>.</p></li>
</ul>
    </div>