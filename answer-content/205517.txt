<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>    while found_last_factor == False:
</code></pre>
</blockquote>

<p>Style is subjective, but I know I'm not the only develop who considers comparisons to Boolean literals to be bad style. <code>while not found_last_factor:</code> is an alternative which I consider preferable.</p>

<hr>

<p>There are various inefficiencies in this code:</p>

<blockquote>
<pre><code>    while found_last_factor == False:
        for f in range(2, int(n/2+1)):
            if n % f == 0 and is_prime(f):
                n /= f
                factors.append(f)
                if is_prime(n): 
                    factors.append(n)
                    found_last_factor = True
                    break
    return sorted(factors)
</code></pre>
</blockquote>

<ol>
<li>If it were modified to handle repeated prime factors in an inner loop rather than in the outmost loop then

<ol>
<li>The test <code>is_prime(f)</code> would be unnecessary, because <code>n % f == 0</code> would already imply the primality of <code>f</code>.</li>
<li>Primes would be discovered in order, removing the need to call <code>sorted</code>.</li>
<li>A <em>lot</em> of unnecessary iterations of <code>f</code> would be saved. You rebutted AJNeufeld's observation on this subject, so consider an alternative perspective: add a line <code>print(f)</code> at the top of the <code>for f</code> loop, and then call <code>prime_factors(1024)</code>.</li>
</ol></li>
<li>The call to <code>is_prime(n)</code> tests primality by trial division, and is called from a loop which is factoring <code>n</code> by trial division. That's duplication of both code and run time.</li>
</ol>

<hr>

<p><code>/=</code> does floating point division. Use <code>//=</code> for integer division. Similarly <code>int(n/2+1)</code> could be <code>n//2 + 1</code>.</p>
    </div>