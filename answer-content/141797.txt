<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You should change <code>Animal</code> to be a child of <code>AnimalData</code>, or just not exist.
This allows you to remove all the <code>animal_data</code> boilerplate from say <code>animal.animal_data.kingdom</code>.</p>

<p>After this lets say that you can output the following data structure:</p>

<pre><code>{
    "Animalia": {
        "Mammalia": {
            "Bovidae": [
                "Bos taurus"
            ]
        }
    }
}
</code></pre>

<p>I know you can't. But using that we could simplify all your code.
It'd simply become:</p>

<pre><code>kingdoms = {}
kingdom = kingdoms.getdefault(animal.kingdom, {})
animal_class = kingdom.getdefault(animal.animal_class, {})
family = animal_class.getdefault(animal.family, [])
family.append(animal.species)
</code></pre>

<p>Or, a less ugly way:</p>

<pre><code>kingdoms = {}
(kingdoms
    .getdefault(animal.kingdom, {})
    .getdefault(animal.animal_class, {})
    .getdefault(animal.family, [])
    .append(animal.species))
</code></pre>

<p>And so I'd either suggest that you change the data from the one that I've shown above to the one that you need.
Or make your own <code>getdefault</code>, that will allow you to do roughly the same.
In this you want to filter the list to get the first, and hopefully only, item with that key in the list.
If it doesn't exist, you want to make it your self, and for it to follow the structure you need.
To get a 'one to one' transform of <code>get_default</code> can lead to:</p>

<pre><code>def get_default(list, key, value):
    v = next((i for i in list if i['name'] == key), None)
    if v is None:
        v = {
            'name': key,
            'value': value
        }
        list.append(v)
    return v['value']
</code></pre>

<p>However you don't really need to add the default <code>value</code>, so you can just set it to <code>[]</code>. And you need to change the <code>'value'</code> to something you can pass in.
Making these changes to the above can allow you to get:</p>

<pre><code>def get_default(list, key, value):
    v = next((i for i in list if i['name'] == key), None)
    if v is None:
        v = {
            'name': key,
            value: []
        }
        list.append(v)
    return v[value]
</code></pre>

<p>And then you'd need to run this function.</p>

<pre><code>kingdoms = []
kingdom = get_default(kingdoms, animal.kingdom, 'classes')
animal_class = get_default(kingdom, animal.animal_class, 'families')
family = get_default(animal_class, animal.family, 'species')
family.append({'name': animal.species})
</code></pre>

<p><em>But</em> this isn't exactly what you want, and so we'd need to loop through each animal, and change the output to be correct.</p>

<pre><code>def structure_animals(animals):
    kingdoms = []
    for animal in animals:
        kingdom = get_default(kingdoms, animal.kingdom, 'classes')
        animal_class = get_default(kingdom, animal.animal_class, 'families')
        family = get_default(animal_class, animal.family, 'species')
        family.append({'name': animal.species})
    return {'kingdoms': kingdoms}
</code></pre>

<hr>

<p>The entire code changes I made:</p>

<pre><code>import json

class AnimalData:
    def __init__(self, kingdom, animal_class, family, species):
        super().__init__()
        self.kingdom = kingdom
        self.animal_class = animal_class
        self.family = family
        self.species = species

    def __str__(self, *args, **kwargs):
        return "Kingdom=%s, Class=%s, Family=%s, Species=%s" % (
            self.kingdom, self.animal_class, self.family, self.species)


class Animal(AnimalData):
    pass


def get_default(list, key, value):
    v = next((i for i in list if i['name'] == key), None)
    if v is None:
        v = {
            'name': key,
            value: []
        }
        list.append(v)
    return v[value]


def structure_animals(animals):
    kingdoms = []
    for animal in animals:
        kingdom = get_default(kingdoms, animal.kingdom, 'classes')
        animal_class = get_default(kingdom, animal.animal_class, 'families')
        family = get_default(animal_class, animal.family, 'species')
        family.append({'name': animal.species})
    return {'kingdoms': kingdoms}


cow = Animal("Animalia", "Mammalia", "Bovidae", "Bos taurus")
sheep = Animal("Animalia", "Mammalia", "Bovidae", "Bovis aries")
orangutan = Animal("Animalia", "Mammalia", "Hominidae", "Pongo pygmaeus")
animals = [cow, sheep, orangutan]

print(json.dumps(structure_animals(animals), sort_keys=True, indent=2))
</code></pre>
    </div>