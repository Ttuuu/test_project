<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>DRY review</h1>
<ul>
<li><p>You don't need to wrap <code>try</code> <code>catch</code> around <code>async function</code> or <code>promise</code>. The errors will all get passed onto the final <code>promise.catch</code>. So can remove all 5 try catches.</p>
</li>
<li><p>The function <code>readFile</code> is just wrapping a promise and is completely redundant.</p>
</li>
<li><p>The two functions <code>getAttachment</code> and <code>getFileName</code> are almost identical apart from the final return.</p>
</li>
<li><p>The two file loads are of the same file that need only be done once.</p>
</li>
<li><p><code>filePath</code> as a string is defined twice, again only once is best.</p>
</li>
<li><p>All you want is <code>attachments[0]</code> of the one email. So you don't need to store <code>file</code> and <code>email</code>.</p>
</li>
<li><p>You use <code>util.promisify</code> and <code>fs.readFile</code> only once so no need to hold a reference for either.</p>
</li>
<li><p>Assigning the variables <code>attachment</code> and <code>filename</code> can be done via destructuring saving another token.</p>
</li>
<li><p>You are creating a module so keep variable names short, use the context to infer meaning.</p>
</li>
</ul>
<p>The end result is</p>
<pre><code>const reader = require("util").promisify(require("fs").readFile);
const parser = require('mailparser').simpleParser;

async function main(file) {
    const atts = (await parser(await reader(file))).attachments[0];
    const [attachment, filename] = [atts.content.toString(), atts.filename.toString()];
    console.log(filename);
}
main("./mock-data/google-report.email").catch(err =&gt; /*do something with error*/ );
</code></pre>
    </div>