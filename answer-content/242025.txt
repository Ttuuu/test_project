<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>PHP 7 features</h1>

<p>I don't know exactly your PHP version. 7 is unfortunately not enough specific. A lot of useful thing were added in minor releases. But anyway you should use all those typehints and other stuff where it makes sense. In my code snippets I'll just write using 7.4.</p>

<h1>Rendering inline HTML</h1>

<p>If it is at least PHP 7.3, you can use indented heredoc for the inline HTML.</p>

<pre><code>  public function render(): string
  {
    return &lt;&lt;&lt;HTML
    &lt;div&gt;the indent before this div is not in the output since PHP 7.3&lt;/div&gt;
      &lt;div&gt;but only as long as the terminator has the same indent level&lt;/div&gt;
      &lt;div&gt;these two divs will be indented on output&lt;/div&gt;
    &lt;div&gt;You can also even show some $var or {$this-&gt;var} like in double quoted string literal.&lt;/div&gt;
    &lt;div&gt;but remember you still have to escape it&lt;/div&gt;
    &lt;div&gt;The HTML delimiter can be anything, but it must be same on start and end&lt;div&gt;
    &lt;div&gt;so after all a templating system might be better&lt;/div&gt;
    &lt;&lt;&lt;HTML
  }
</code></pre>

<p>Feel free to abstract yourself from this problem for now with this php package I wrote for that exact reason.
<a href="https://packagist.org/packages/slepic/php-template" rel="nofollow noreferrer">https://packagist.org/packages/slepic/php-template</a></p>

<p>(sry for the promo :))</p>

<h1>Polymorphism</h1>

<p>The input class has a different behaviour if it is a checkbox, and different for all other cases (It probably does not fit select input and some others too).
You should model this as polymorphism, in other words as separate classes with the same interface (or base class if you wish).</p>

<p>You may even want a separate class for modal box, and a form.</p>

<p>Let me show you some structure. I will assume we have imported the php-template library and use its TemplateInterface which looks like this:</p>

<pre><code>interface TemplateInterface
{
    public function render(array $data): string;
}
</code></pre>

<p>We use it to separate the HTML rendering away from those classes. Making it generic, unaware of BS4 backing it up, and agnostic of any template engine used (the package includes a pure php "no template engine" template interface implementation called OutputBufferTemplate)</p>

<p>Lets define common interface for things that can be rendered.</p>

<pre><code>interface Component
{
  public function render(): string;
}
</code></pre>

<p>Lets define modal box component which should show another component in a modal box.</p>

<pre><code>class ModalBoxComponent implements Component
{
  private TemplateInterface $template;
  private IComponent $content;
  private int $width;
  private int $height;

  public function __construct(TemplateInterface $template, Component $content, int $width, int $height)
  {
    $this-&gt;template = $template;
    $this-&gt;content = $content;
    $this-&gt;width = $width;
    $this-&gt;height = $height;
  }

  public function render(): string
  {
    return $this-&gt;template-&gt;render([
      'content' =&gt; $this-&gt;content-&gt;render(),
      'width' =&gt; $this-&gt;width,
      'height' =&gt; $this-&gt;height,
    ]);
  }
}
</code></pre>

<p>Lets define form component that holds mutiple input components nad has action, method, etc...</p>

<pre><code>class FormComponent implements Component
{
  private TemplateInterface $template;
  private string $action;
  private array $inputs;
  // ...

  /**
   * @param Component[] $inputs
   */
  public function __construct(TemplateInterface $template, string $action, array $inputs)
  {
    $this-&gt;template = $template;
    $this-&gt;action = $action;
    $this-&gt;inputs = $inputs;
  }

  public function render(): string
  {
    return $this-&gt;template-&gt;render([
      'inputs' =&gt; \array_map(fn($input) =&gt; $input-&gt;render(), $this-&gt;inputs),
      'action' =&gt; $this-&gt;action,
      ... 
    ]);
  }
}
</code></pre>

<p>Some component for common inputs</p>

<pre><code>class InputComponent implements Component
{
  private string $title;
  private string $type;
  private string $id;

  // constructor, template, other stf.., etc.
}
</code></pre>

<p>checkbox maybe extra, or maybe it just needs different template?</p>

<pre><code>class CheckboxComponent implements Component
{
  // ... and so on
}
</code></pre>

<p>Something to create templates for the form and inputs.</p>

<pre><code>interface FormTemplateAbstractFactory
{
  public function createNumberTemplate(): TemplateInterface;
  public function createCheckboxTemplate(): TemplateInterface;
  public function createFormTemplate(): TemplateInterface;
}

class BS4FormTemplates implements FormTemplateAbstractFactory
{
  public function createNumberTemplate(): TemplateInterface
  {
    return new OutputBufferTemplate($this-&gt;templatesDir . '/bs4input.php');
  }

  public function createCheckboxTemplate(): TemplateInterface
  {
    return new OutputBufferTemplate($this-&gt;templatesDir . '/bs4checkbox.php');
  }

  public function createFormTemplate(): TemplateInterface
  {
    return new OutputBufferTemplate($this-&gt;templatesDir . '/bs4form.php');
  }
}
</code></pre>

<p>now something to simplify putting those things together</p>

<pre><code>class FormBuilder
{
  private FormTemplateAbstractFactory $templates;

  public function __construct(FormTemplateAbstractFactory $templates)
  {
    $this-&gt;templates = $templates;
  }

  public function addNumber(string $name, ?string $label = null): void
  {
    $this-&gt;inputs[$name] = new InputComponent(
      $this-&gt;templates-&gt;createNumberTemaplte(),
      'number',
      $name,
      $label,
      // ...
    );
  }

  public function addCheckbox(string $name, ?string $label = null): void
  {
    // here Im showing the variant where checkbox is just input with different template, it is not a separate class (depends what you want from it)
    $this-&gt;inputs[$name] = new InputComponent(
      $this-&gt;templates-&gt;createCheckboTemaplte(),
      'checkbox',
      $name,
      $label,
      // ...
    );     
  }

  // passwords, texts, textareas, selectboxes, and more...

  public function buildForm(): FormComponent
  {
    return new FormCompoennt(
      $this-&gt;templates-&gt;createFormTemaplte(),
      $this-&gt;inputs,
    );
  }
}

</code></pre>

<p>And we are ready to create a form</p>

<pre><code>$builder = new FormBuilder(new BS4FormTemplates());
$builder-&gt;addText('name', "Your name");
$builder-&gt;addNumber('age', "Your age");
$builder-&gt;addPassword('password', "Your secret");
$form = $builder-&gt;buildForm();

</code></pre>

<p>Put it in a modal box.</p>

<pre><code>$modal = new ModalBoxComponent(
  new OutputBufferTemplate($myModalBoxTemplateFilePath),
  $form
);
</code></pre>

<p>And show it</p>

<pre><code>echo $modal-&gt;render();
</code></pre>

<p>Now OutputBufferTemplate will execute an external php file and gather its output and so it can be good old plain html with inserted php pieces.
some_template.php:</p>

<pre><code>&lt;div&gt;
  &lt;div class="title"&gt;&lt;?= htmlspecialchars($title) ?&gt;&lt;/div&gt;
  &lt;div&gt;&lt;?= $content ?&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>and render it with</p>

<pre><code>$temaplte = new OutputBufferTemplate('some_template.php');
echo $template-&gt;render(['content' =&gt; '&lt;div&gt;abc&lt;/div&gt;', 'title' =&gt; 'a&lt;b']);
</code></pre>

<p>I'm sorry my will to write things properly gradully decreased as I wrote this, because it's already after midnight here :D So I went from writing complete code to only showing the basic structure, I hope it helps nevertheless :) I'll try to stop by to improve it..</p>
    </div>