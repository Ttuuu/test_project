<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The question indeed deserves clarification. That being said...</p>

<p>Do you realize that by having an empty <code>catch</code> you are silently swallowing exceptions that may occur, thus making your code hard to debug ? Either remove all those <code>catch</code> or add some code that actually handles the exception. One catch for the whole procedure should suffice anyway.</p>

<p>As for this loop:</p>

<pre><code>For i As Integer = 1 To 10
    Try
        Dim txtRemove As TextBox = CType(Me.Controls("txtDrawR" &amp; i.ToString), TextBox)
        txtRemove.Clear()
    Catch ex As Exception
    End Try
Next
</code></pre>

<p>It could be expressed like this (a simple loop on the form's child controls):</p>

<pre><code>    For Each ctl As Control In Me.Controls
        If TypeOf ctl Is TextBox Then
            ' optionally
            If ctl.Name.StartsWith("txtDrawR") Then
                DirectCast(ctl, TextBox).Clear()
            End If
        End If
    Next
</code></pre>

<p>This is more flexible and will work regardless of how many <code>txtDrawR</code> textboxes there are in your form (even if there is none).</p>

<p>The <code>case</code> statement can surely be simplified by a loop, list or something similar.</p>

<p>Progress bar Value and Maximum should be integer values eg. <code>ProgressBar1.Value = 0</code> instead of: <code>ProgressBar1.Value = ("0")</code>. Likewise: <code>ProgressBar1.Maximum = Convert.ToInt32(TxtCheckL.Text)</code> instead of: <code>ProgressBar1.Maximum = TxtCheckL.Text</code>
<em>provided that you have validated TxtCheckL contains digits only</em> or an exception will occur. Instead of a textbox you could use a <a href="https://docs.microsoft.com/en-us/dotnet/framework/winforms/controls/numericupdown-control-overview-windows-forms" rel="nofollow noreferrer">spinner</a> or a similar control that will directly return an integer value based on user selection and requires less validation.</p>

<p>This is pretty bad:</p>

<pre><code>Dim tmp(10000) As String
</code></pre>

<p>Rather than working with large arrays you can instead use a <code>StringBuilder</code>, or perhaps a <code>List (Of String)</code>. But it's not clear to me why you are even doing this, why you have 10000 (how was that value chosen ?) lines to put in <code>TxtMReadOnly</code>, and then split the string. It doesn't look good in terms of performance.</p>

<p>Note that if you want to iterate lines in a multi-line textbox you can simply do:</p>

<pre><code>For Each s As String In Me.TextBox1.Lines  
     ' do something
     console.writeline(s)
Next 
</code></pre>

<p>No need to do splitting once more.</p>

<p>There is a lot that can be improved, but if you could explain the general purpose we may be able to help further.</p>
    </div>