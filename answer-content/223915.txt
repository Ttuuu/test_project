<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>It might be overkill for just the task at hand, but I've found it useful to write an overload of <code>operator&gt;&gt;</code> to read and match a string literal:</p>

<pre><code>std::istream &amp;operator&gt;&gt;(std::istream &amp;is, char const *s) { 
    while (*s &amp;&amp; *s == is.peek()) {
        ++s;
        is.ignore(1);
    }
    if (*s != '\0')
        is.setstate(std::ios_base::failbit);
    return is;
}
</code></pre>

<p>With this, reading in your data becomes much simpler, and (at least IMO) the intent becomes much more apparent:</p>

<pre><code>int yy;
int mm;
int dd;

std::cin &gt;&gt; yy &gt;&gt; ":" &gt;&gt; mm &gt;&gt; ":" &gt;&gt; dd;
</code></pre>

<p>Depending on what you want/need, you can make this a bit more elaborate. For one example, it can be useful to have the literals act a little like scanf format strings, so any white space in the string matches an arbitrary amount of white space in the stream. You might also want to turn that behavior on/off, depending on whether the stream's <code>skipws</code> flag is set.</p>
    </div>