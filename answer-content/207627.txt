<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have a container that can store anything</p>

<pre><code>template&lt;typename Type&gt;
class max_heap
</code></pre>

<p>but your underlying storage is this</p>

<pre><code>std::vector&lt;int&gt; rep;
</code></pre>

<p>I'm somewhat shocked that you didn't notice this. Did you only test it on integers?</p>

<hr>

<p>You define everything out-of-line but this makes the overall implementation quite a bit larger than it needs to be, while also making the code a little less pleasant to read. If you want to add or remove a function, you have to do it twice.</p>

<p>In the class, you have a forward declaration</p>

<pre><code>iterator begin();
</code></pre>

<p>...then you have the implementation later.</p>

<pre><code>template&lt;typename Type&gt;
typename max_heap&lt;Type&gt;::iterator
max_heap&lt;Type&gt;::begin() { return rep.begin(); }
</code></pre>

<p>You could just do this</p>

<pre><code>iterator begin() { return rep.begin(); }
</code></pre>

<hr>

<p>In the <code>sort</code> function, you have this</p>

<pre><code>std::swap(*begin(), *iter);
</code></pre>

<p>When swapping two objects and you don't know what their type is, you should allow ADL to find custom swap functions. This pattern is very common in generic code. The standard library does this as well.</p>

<pre><code>using std::swap;
swap(*begin(), *iter);
</code></pre>

<p>If you have a class with its own swap function like this</p>

<pre><code>namespace my {

class swappable_thing {};

void swap(swappable_thing &amp;, swappable_thing &amp;) {
  std::cout &lt;&lt; "Custom swap\n";
}

}
</code></pre>

<p>This following code does not call the custom swap function</p>

<pre><code>my::swappable_thing a, b;
std::swap(a, b);
</code></pre>

<p>but this does</p>

<pre><code>my::swappable_thing a, b;
using std::swap;
swap(a, b);
</code></pre>

<hr>

<p>C++ has <a href="https://en.cppreference.com/w/cpp/algorithm#Heap_operations" rel="noreferrer">algorithms devoted to dealing with heaps</a>. You're not using them. If there is a standard algorithm that does what you need it to do, use it. Your code becomes much simpler when you use standard algorithms.</p>
    </div>