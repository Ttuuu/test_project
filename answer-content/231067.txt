<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have no familiarity with any of the libraries used here, so I can't comment on their usage.</p>

<p>What I will mention though is the giant chunk of <code>profile.set_preference</code> calls in the middle of the script. It would be much cleaner and less repetitive to save the string/bool pairs of options as a dictionary (or another "paired" structure), then  just iterate over it. Example (partial):</p>

<pre><code># Just so we can help prevent bad data entry into the dictionary
from typing import Dict, Any

# The \ is just so I can stick {} on the next line for neatness
profile_settings: Dict[str, Any] = \
    {'extensions.allowPrivateBrowsingByDefault': True,
     'browser.privatebrowsing.autostart': True,

     'media.peerconnection.turn.disable': True,
     'media.peerconnection.use_document_iceservers': False

     # And the rest of pairs 
     }

for setting_name, setting_value in profile_settings.items():
    profile.set_preference(setting_name, setting_value)
</code></pre>

<p>Now you don't need to copy and paste <code>profile.set_preference</code> a hundred times. This also allows you to easily save <code>profile_settings</code> into a config file so you can edit settings without needing to edit the code. When needed, you can just read the settings and iterate over them.</p>

<p>And to clarify why I'm specifying <code>profile_settings</code> as being of type <code>Dict[str, Any]</code> using <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hints</a>: telling the IDE what type your variable is can help it catch mistakes you make. Let's say you have a dictionary of strings to ints, and you accidentally pass it the wrong piece of data:</p>

<pre><code>the_data_I_want = 1
the_data_I_dont_want = "some stuff"

d: Dict[str, int] = {"a": the_data_I_dont_want}  # Whoops
</code></pre>

<p>The last line will raise a warning</p>

<blockquote>
  <p>Expected type Dict[str, int], got Dict[str, str] instead.</p>
</blockquote>

<p>With how you currently have it, it's unlikely that you'd accidentally give it a key of a type other than a string. If you start reading that data from elsewhere though, or begin pulling keys from variables, it's nice to have the IDE able to catch you when you've made a typo (like a bad auto-complete).</p>

<hr>

<p>You also have at the bottom</p>

<pre><code>except Exception:
    print(traceback.print_exc())
</code></pre>

<p>It's good that you're printing out a stack trace so at least you aren't muting any useful debugging information, but I don't see why you're catching in the first place. </p>

<p>If you just want to use the <code>finally</code>, you don't need to specify an <code>except</code>:</p>

<pre><code>try:
    . . .

finally:
    browser.quit()
    rmtree(addons_path)
</code></pre>
    </div>