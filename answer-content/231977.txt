<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Instead of putting comments above smaller blocks of code, convert those smaller blocks to private methods (we will change this later, for now keep them private methods of the same class to allow focus on other things). </p>

<p>But I would suggest you first familiarize yourself with IoC and DI as it will help you write much better code. And SOLID principles could also do you good.</p>

<p>Then anyway, to identify good blocks to replace by methods, you can: </p>

<p>1) look if some blocks look same or similar to some other blocks, like this:</p>

<pre><code>if (isset($params['comms_matrix_id'])) {
  $params['comms_matrix_id_exemptions'] = $params['comms_matrix_id'];
  unset($params['comms_matrix_id']);
}
</code></pre>

<p>or here:</p>

<pre><code>$sql = "SELECT id FROM ".DBUSER.".service_domains WHERE TRIM(name) = :name";
$binds = [':name' =&gt; [$service_domain,50,SQLT_CHR]];
$service_domain_id = $db-&gt;executeToSingleCell($sql,$binds);
</code></pre>

<p>Another thing to look for is a piece of code starting where a new variable is introduced and ending where that variable is no longer used.
Maybe like here:</p>

<pre><code>$sysprivusers = new SysPrivUsers();

                if ($sysprivusers-&gt;isSystemUser($user-&gt;getUsername())) {
                    $isMemberOrUploaded = $user-&gt;isMemberOrUploaded((int) $comms_matrix_id);
                    if ($isMemberOrUploaded['uploaded_by'] === null &amp;&amp; $isMemberOrUploaded['member_of'] === null) {
                        $response['error'] = true;
                        $response['message'] = 'You are not authorised';
                        $this-&gt;log-&gt;error($isMemberOrUploaded);
                        $this-&gt;log-&gt;error($user-&gt;getUsername());
                        foreach ($response as $key =&gt; $value) {
                            $this-&gt;{$key} = $value;
                            unset($response[$key]);
                        }

                        return $this;
                    }
                }
</code></pre>

<p>Bodies of for/foreach/while are also good candidates for separate functions.</p>

<p>When you have split the method into multiple ones. It is now time to separate them by domain. You use a lot of in-place instantiation of service classes. Put them into the class's properties and instantiate them in constructor. When you do this it will help you identify methods that are related or have the same dependency. Although this is not necesary to be able to separate them by domain, it might help a little and it is a good idea nevertheless.</p>

<p>When you are clear about which functions are related to which other functions, they will form clusters. Each of those clusters can be moved to a separate class and then have the main class depend on those instead. If some of those clusters have too much dependencies (lets say 4 or more) it may be sign that their methods could be split better and you basicaly repeat the process, until pretty much every class has one and only responsibility (or one could say one purpose, one reason to change). Good sign of that is that number of private/protected methods is going down, while number of classes and public methods is going up (but number of methods per class is also going down). And btw if you start having classes that are mutualy dependent you are probably doing something wrong.</p>

<p>During the process, you may find some optimizations for some of the smaller blocks. You may figure that something can be done in a different way. Or get confident enough to put some methods to their own class right away.</p>

<p>Try to avoid reusing of variables. Use good names for variables and classes and methods, so in the end you can read the code just as easy as you read a book.</p>

<p>And that would be about it. There's definitely more you could do but I'm not sure you are ready for that just now... Take it one step at a time...</p>

<p>EDIT:
As pointed out by Iiridayn, it is definitely not necesary to reach the final state as I described it. What I described is kind of utopia, a state of perfection... Something you should try to reach but never completely will. Anything between the current state and the state of perfection is going to be better then the current state. At some point you might want to stop and consider the changes made so far enough for the time being.
I would object though that the final state would yield a ton of classes, I'd say more like a dozen or two at most :)</p>

<p>Another thought related to this is that when you are looking for reusable blocks to move to separate functions, you might also want to consider other parts of your code that you didnt show us in your question. Like other controllers. Chances are high that there are some pieces that are the same across multiple controllers (or generaly across multiple objects of the same type/pattern). These pieces are good candidates for methods that should be separated from your main class, whereas methods that have no similarities with any other pieces of your application might be those that you may want to keep in the main class for now...</p>

<p>And yet one more note:
The process I described cannot be seemed as an algorithm you can follow without thinking and reach the desired goal. It will need a lot of thinking about what you are doing and deciding when to apply some of the rules I mentioned and when not. It might need a lot of creativity and invention. You will find your own rules to apply. The only rule of thumb is, that no rule can be followed in all cases.</p>
    </div>