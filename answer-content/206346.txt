<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'll go through this, type by type:</p>

<h1>Product</h1>

<h2>price</h2>

<p>I'm not a fan of <code>String</code> price. It's rather see an <code>priceCents: Int</code> or <code>price: Decimal</code>, with a <code>formattedPrice: String</code> computed property, that uses a currency formatter.</p>

<h2>snack</h2>

<p>What's a product.snack?</p>

<h2>requirement</h2>

<p>Poorly named IMO. It's not clear what requirement it is. I would suggest something like <code>productionRequirements</code>.</p>

<h2>region</h2>

<p>What region is it? The region it's produced in? The region it's currently stored in? The region it can be shipped/sold to? Not clear.</p>

<h1>Region</h1>

<p>I need some more details on what exactly a region models.</p>

<h1>StoreType</h1>

<p>This is a good, idea to use an enum for a finite set of cases. However, if many of the behaviours of <code>Store</code> vary depending on its <code>type</code>, it's better to make a <code>Store</code> protocol, and <code>Store</code> structs that conform to it, implementing the methods in their correct ways. Perhaps even a <code>Store</code> superclass and <code>NormalStore</code> and <code>SuperStore</code> subclasses.</p>

<p>Something like <code>capableEmployeeTypes</code> would be better.</p>

<h1>Store</h1>

<p>I don't like that the initial value of <code>products</code> can't be specified in the intitializer. If <code>[]</code> is a sensbile default (and I'm not sure that it is), I would rather see:</p>

<pre><code>var products: [Product]

init(id: String, type: StoreType, initialProducts products: [Product]) {
    self.type = type
    self.id = id
    self.products = products
}
</code></pre>

<h1>Requirement</h1>

<p>What kind of requirement is it? It's not clear. I would suggest something like <code>ProductionRequirements</code>.</p>

<h2>skillLevel</h2>

<p>Some parts of this code make no sense in isolation:</p>

<pre><code>print(someRequirement.skillLevel) // =&gt; [.manager]
</code></pre>

<p>Wat?</p>

<h2>device</h2>

<p>You have a variable called <code>neededTime</code> (rather than <code>time</code>), but also <code>device</code> (rather than <code>neededDevice</code>). Decide either <em>prefix</em> everything with <code>needed</code>, or nothing. If you choose to add it everything, then you should probably stay consistent with the type name <code>Requirement</code>, and say <code>requiredTime</code>, <code>requiredDevices</code>, rather than <code>needed*</code>.</p>

<h1>Devices</h1>

<p>Shouldn't be an <code>OptionSet</code>. It lets you write funky code like <code>device.type = [.expressoMaker, .mixer]</code>. How can it be both? P.s. It's "espresso", not "expresso" </p>

<h1>Employees</h1>

<p>And <code>Employees</code> sounds like it would be some sort of <code>Collection</code> of <code>Employee</code> objects. I think it would be better to name it something like <code>EmployeeTypes</code>. One of the issues I see here is that it's not clear if these values are mutually exclusive values or not. The fact that it's an <code>OptionSet</code> suggests that mutually exclusivity isn't required. But then you can get weird things like <code>employee.type = [.junior, .senior]</code>. wat?</p>

<h1>ResourceAllocation</h1>

<p>Perhaps a better name would be <code>QuantifiedResource</code>? I don't like <code>ResoruceAllocation</code>, because when I see that, I would expect an object that can tell me about what the resource is, how much of it is allocated, and <strong><em>how it is allocated</em></strong>.</p>

<h2>style:</h2>

<p>This comment applies to all the code: conventional Swift style has a space before every <code>{</code>, and no space before <code>:</code>:</p>

<pre><code>struct ResourceAllocation {
    let resource: Resource
    let amount: Int
}
</code></pre>

<h1>MenuHandlerType</h1>

<p>I see why you put <code>Type</code> in the end, to distinguish the protocol from its concrete implementations. However, if you're going to go down this Hungarian notation route anyway, I would rather you at least be precise, and call it <code>MenuHandlerProtocol</code>.</p>

<p>... More coming soon (i'll be back later)</p>
    </div>