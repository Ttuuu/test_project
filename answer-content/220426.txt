<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your program.</p>

<h2>Use consistent formatting</h2>

<p>It appears that your code uses tabs in some places and spaces in others, making the code appear badly formatted unless the settings in the reader's editor are set exactly the same as in yours.  To prevent this, I recommend using spaces everywhere.  It's a habit that may even <a href="https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/">earn you more money</a>!</p>

<h2>Fix the bug</h2>

<p>There is a subtle bug in the code.  If the user crashes into the left wall, it's no longer possible to restart the game. </p>

<h2>Don't store data unnecessary data</h2>

<p>In the <code>Board</code> class, there is not any need to have the <code>mRandomDevice</code> stored as a member.  Instead, initialize <code>mGenerator</code> like this:</p>

<pre><code>mGenerator{ std::random_device{}() },
</code></pre>

<p>This creates, uses, and discards a <code>std::random_device</code> instance.</p>

<h2>Carefully consider the use of data structures</h2>

<p>In the <code>Board</code> class, the internal representation is a vector of vectors.  However, since these are fixed size, it seems that perhaps <code>std::array</code> of <code>std::array</code> would be more appropriate.  Alternatively, a single <code>std::array</code> could be used with helper routines to convert from, say, your <code>Point</code> class to the appropriate location in the data structure.</p>

<h2>Avoid convoluted control flows</h2>

<p>The <code>placeFood()</code> routine is currently like this:</p>

<pre><code>void Board::placeFood()
{
    for (;;) {
        auto x = mWidthDistribution(mGenerator);
        auto y = mHeightDistribution(mGenerator);

        if(mFields.at(y).at(x) == FieldType::empty){
            mFields.at(y).at(x) = FieldType::food;
            return;
        }
    }
}
</code></pre>

<p>I think it could be made easier to read and understand if it's written like this:</p>

<pre><code>void Board::placeFood()
{
    auto [x, y] = randomEmptyLocation(); 
    mFields.at(y).at(x) = FieldType::food;
}
</code></pre>

<p>Note that this is using the C++17 <a href="https://en.cppreference.com/w/cpp/language/structured_binding" rel="nofollow noreferrer">structured binding declaration</a> for convenience.  This also uses two helper functions:</p>

<pre><code>std::tuple&lt;std::size_t, std::size_t&gt; Board::randomLocation() {
    return { mWidthDistribution(mGenerator), 
             mHeightDistribution(mGenerator)};
}

std::tuple&lt;std::size_t, std::size_t&gt; Board::randomEmptyLocation() {
    auto [x, y] = randomLocation(); 
    while (fieldTypeAt(x, y) != FieldType::empty) {
        std::tie(x, y) = randomLocation();
    }
    return {x, y};
}
</code></pre>

<p>Also, of course, <code>#include &lt;tuple&gt;</code> is required to use this.  Alternatively, instead of using individual <code>x</code> and <code>y</code>, the interface could be redesigned to more fully use the existing <code>Point</code> struct.</p>

<h2>Avoid wasteful copies</h2>

<p>The <code>Snake::getBody()</code> function duplicates and returns an entire vector.  This is not really necessary since most places that call this function are only doing so to get the position of the head.  For that reason, a better approach would be to provide <code>headloc()</code> function that would return the location of the head as either a <code>Point</code> or as a <code>std::tuple</code> as shown above.</p>

<h2>Think about more efficient algorithms</h2>

<p>The <code>updateSnakePosition()</code> code is not very efficient.  As mentioned above, it makes a duplicate of the entire snake, but then it erases the entire snake from the board and then adds it back again in the new position.  This is wholly unnecessary because the only updates required are the head, the segment just behind the head and the tail.  It's not critical here, but it's useful to get into the habit of writing efficient code.</p>

<h2>Think carefully about the user interface</h2>

<p>Is there a purpose to the gradient on the field?  It seems to me to be solely a distraction because it doesn't convey anything to the user and is, in my humble opinion, not aesthetically pleasing.  </p>

<h2>Use <code>const</code> where practical</h2>

<p>Several of the functions could be <code>const</code> but are not, such as <code>SnakeBoard::squareHeight</code> and <code>Board::fieldTypeAt</code>.  It would be better to declare them <code>const</code>.</p>
    </div>