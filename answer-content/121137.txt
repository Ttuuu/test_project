<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think it is a great example for an article. Vector-like classes are probably the second most reimplemented library containers, probably only losing for string classes.</p>

<h3>My comments</h3>

<p>Even though this is example code for your post, you might consider giving the class a longer name. <code>V</code> confuses itself with a template parameter, so much that you've made a typo in here:</p>

<blockquote>
<pre><code>for(int loop = 0; loop &lt; length; ++loop)
{
    try {
        buffer[loop].~V();
    }
    catch(...) {} // catch and discard exceptions.
}
</code></pre>
</blockquote>

<p>It was supposed to be <code>~T()</code>, but that's not a problem, the compiler will remind you <code>;)</code></p>

<hr>

<blockquote>
<pre><code>void validateIndex(std::size_t size)
{
    if (size &gt;= length)
    {
        std::stringstream message;
        message &lt;&lt; "V: out of range: " &lt;&lt; size &lt;&lt; " is larger than: " &lt;&lt; length;
        throw std::out_of_range(message.str());
    }
}
</code></pre>
</blockquote>

<p>A few things about this method:</p>

<ul>
<li><p>Using a <code>stringstream</code> seems overcomplicating in this case. You could do with a simple <code>std::string</code> and <code>std::to_string()</code>. That would import less dependencies into the code, which might be important for frequently used stuff like vectors.</p></li>
<li><p>The method itself should be <code>const</code>. Right now the code will not compile if I try to call <code>at()</code> on a const vector, because it will select the const overload which attempts to call non-const <code>validateIndex()</code>. Alternatively, you could also make it a <code>static</code> method and explicitly pass the <code>length</code> that is supposed to be validated against.</p></li>
<li><p>Minor nitpicking, but <code>validateIndex(size)</code> seems a bit off. You're validating an index, so why is the param called <code>size</code>?</p></li>
</ul>

<hr>

<p>Don't know your thoughts, but I'm not a huge fan of using the global raw <code>new</code>
directly. It is just so verbose and prone to typing errors, forgetting the <code>sizeof</code>, etc.</p>

<blockquote>
<pre><code>static_cast&lt;T*&gt;(::operator new(sizeof(T) * capacity))
</code></pre>
</blockquote>

<p>You could wrap that into a private static helper that just takes a number of <code>T</code> elements and handles the rest in a cleaner way:</p>

<pre><code>static T* allocate(std::size_t numOfElements)
{
    return static_cast&lt;T*&gt;(::operator new(sizeof(T) * numOfElements));
}
</code></pre>

<h3>Miscellaneous</h3>

<ul>
<li><p>Still missing all the <code>size/capacity/empty</code> accessors. <code>front/back</code> might also
be interesting. If you have lots of free time, why not also go for some iterators?</p></li>
<li><p>As far as I know, <code>delete</code> is always noexcept, so this should be pointless:</p>

<blockquote>
<pre><code>try {
    ::operator delete(buffer);
} catch(...) {}
</code></pre>
</blockquote></li>
<li><p>BTW, I also agree that catching an exception from the user destructor is dangerous. Could hide more serious problems. You might consider just letting the program terminate or call <code>std::terminate/std::abort</code> directly to trap right there and then.</p></li>
</ul>

<p>Other than what was already said in Deduplicator's answer, it looks quite good.</p>
    </div>