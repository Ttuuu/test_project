<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see some things that may help you improve your code.</p>

<h2>Eliminate unused variables</h2>

<p>Unused variables are a sign of poor quality code, and you don't want to write poor quality code. In this code, <code>line</code> and <code>longest</code> are unused -- their values are set but then never referenced again.  Your compiler is smart enough to tell you about this if you ask it nicely.</p>

<h2>Think carefully about variable use</h2>

<p>After the first line is read, the variable <code>i</code> isn't really needed.  The way it is now, it could instead simply increment <code>max</code> directly.</p>

<h2>Think carefully about the task</h2>

<p>If you need to save the longest line, you can't overwrite it every time.  The difference between yours and the K&amp;R version is that yours prints multiple times and only the last time it prints is actually the longest line.</p>

<h2>Check for unusual inputs</h2>

<p>What happens if the file consists of a single long line?   The existing code will fail because the code that reads the first line fails to stop at the end of the file.  Also none of the code checks for lines that are too long.</p>

<h2>Break up the code into smaller functions</h2>

<p>The <code>main()</code> function does a series of identifiable steps.  Rather than having everything in one long function, it would be easier to read and maintain if each discrete step were its own function.</p>

<h2>Don't repeat yourself</h2>

<p>There's really no need to handle the first line any differently than any other line.  Instead, you could simply run the main loop.</p>

<h2>Minimize work</h2>

<p>There's no reason to clear the entire <code>line</code> array.  Instead of the <code>memset</code>, your code could simply do this:</p>

<pre><code>help[0] = '\0';
</code></pre>

<h2>Choose better variable names</h2>

<p>The name <code>help</code> is not at all appropriate to its actual function.  I'd recommend using <code>line</code> for everywhere that <code>help</code> is currently used.</p>

<h2>Use modern syntax</h2>

<p>The old K&amp;R style was to declare all variables at the top of the function, but that's not any longer either required or desired.  Instead, current practice is to declare variables near their first use and to keep their scope small.</p>

<h2>Use modern C idioms</h2>

<p>Right now the code contains these lines:</p>

<pre><code>help[j]=ch;
++j;
</code></pre>

<p>However, that's more idiomatically written like this:</p>

<pre><code>help[j++] = ch;
</code></pre>

<h2>Fix your formatting</h2>

<p>There are inconsistent spaces in variable declarations, and inconsistent indentation. Being consistent helps others read and understand your code.</p>

<h2>Use more whitespace</h2>

<p>Instead of writing a line like this:</p>

<pre><code>while ((ch=getchar())!=EOF){
</code></pre>

<p>use a bit more whitespace and write it like this:</p>

<pre><code>while ((ch = getchar()) != EOF) {
</code></pre>

<p>Doing so will make it easier to read and understand your program.</p>

<h2>Eliminate <code>return 0</code> at the end of <code>main</code></h2>

<p>Since C99, the compiler automatically generates the code corresponding to <code>return 0</code> at the end of <code>main</code> so there is no need to explicitly write it.</p>
    </div>