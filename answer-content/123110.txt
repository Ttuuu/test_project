<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Design</strong></p>

<p>First of all, it would be nice to split the contents of <code>main</code> into two static methods:</p>

<ul>
<li><strong><code>askUserForStickLengths()</code></strong>: uses a <strong><code>Scanner</code></strong> to load a list of integers representing the stick lengths.</li>
<li><strong><code>cutSticks</code></strong>: doing the actual cutting.</li>
</ul>

<p><strong>Efficiency</strong></p>

<p>You sort the sticks into <strong>ascending</strong> order and you remove always the first stick first. The problem with that is that your list will have to shift all the elements one position towards the beginning of the list: so, if you have \$n\$ sticks, taking out the first will take \$\Theta(n)\$ time.</p>

<p>Instead, you could sort the sticks into <strong>descending</strong> order and keep removing the last stick (which is \$\Theta(1)\$ per stick).</p>

<p>However, note that the above are rather minor optimisations that cannot improve the overall running time. The worst-case running time of my and your algorithms is still \$\Theta(n^2)\$.</p>

<p><strong>Summa summarum</strong></p>

<p>All in all, I had this in mind:</p>

<pre><code>import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class CutSticks {

    public static List&lt;Integer&gt; askUserForStickLengths() {
        Scanner scanner = new Scanner(System.in);
        int size = scanner.nextInt();
        List&lt;Integer&gt; list = new ArrayList&lt;&gt;(size);

        for (int i = 0; i &lt; size; ++i) {
            int length = scanner.nextInt();

            if (length &lt; 0) {
                throw new IllegalArgumentException(
                        "Sticks of negative length are not allowed. Received " +
                        "a stick length " + length + ".");
            }

            list.add(length);
        }

        list.removeAll(Collections.&lt;Integer&gt;singleton(0));
        return list;
    }

    public static List&lt;Integer&gt; cutSticks(List&lt;Integer&gt; stickLengthList) {
        List&lt;Integer&gt; ret = new ArrayList&lt;&gt;(stickLengthList.size());

        // Sort the stick lengths into DESCENDING order.
        Collections.&lt;Integer&gt;sort(stickLengthList, 
                                  (a, b) -&gt; { return b - a; });

        while (!stickLengthList.isEmpty()) {
            int listSize = stickLengthList.size();
            int smallestStickLength = stickLengthList.get(listSize - 1);

            for (int i = 0; i &lt; listSize; ++i) {
                int currentStickLength = stickLengthList.get(i);
                stickLengthList.set(i, 
                                    currentStickLength - smallestStickLength);
            }

            ret.add(listSize);
            prune(stickLengthList);
        }

        return ret;
    }

    // Assumes that the input list is in descending order. We start removing the
    // "zero sticks" from the end of the list. As soon as we get to a non-zero
    // entry, we can return as the invariant guarantees there is no other 
    // zero length sticks.
    private static void prune(List&lt;Integer&gt; stickLengthList) {
        for (int i = stickLengthList.size() - 1; i &gt;= 0; --i) {
            if (stickLengthList.get(i) == 0) {
                stickLengthList.remove(i);
            } else {
                return;
            }
        }
    }

    public static void main(String[] args) {
        System.out.println(cutSticks(askUserForStickLengths()));
    }
}
</code></pre>
    </div>