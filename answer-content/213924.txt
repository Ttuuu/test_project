<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You may be a little confused about how a binary search operates. Your doc comment seems to suggest you understand and my cursory look at your code didn't reveal any bugs (but then again, I didn't look too hard). But, this function doesn't really make logical sense.</p>

<p>The purpose of a binary search is to find an item in <code>O(log(n))</code> time instead of doing a full scan of a linear datastructure (or at least scanning until you find the item, which worst case is <code>O(n)</code>). This of course requires the datastructure to already be sorted. Your comment indicates you understand this. But what you end up doing with <code>pred</code> makes it seem like you confused yourself.</p>

<p>Why? Well if <code>pred</code> is not a constant time operation, then your binary search is no longer <code>O(log(n))</code> (I suspect this is the case, because instead of passing <code>lst[mid]</code> to <code>pred</code> you pass the entire <code>lst</code> and index <code>mid</code>). Let's say <code>pred</code> is <code>O(n)</code>. Now the total runtime of <code>xbinsearch</code> is <code>O(n*log(n))</code>, which is significantly worse. In this case, a linear search may be better.</p>

<p>Now, let's just assume <code>pred</code> is a constant time function. Now the overall runtime remains <code>O(log(n))</code>, but the return value of <code>pred</code> still doesn't make sense. Why is this? Well, the list must already be sorted by some ordering. If <code>pred</code> is constant time, it can only make decisions about the value at <code>mid</code> (and maybe a few surrounding values), but it can't scan <code>lst</code> to make decisions. So this means there must be some sort of dependency between the return value of <code>pred</code> and the sort order of <code>lst</code>. If there wasn't, your search probably wouldn't work (if say <code>lst</code> was sorted by ascending value but <code>pred</code> negated the values before comparing them, it would throw out the wrong half of the list).</p>

<p>So now we assume that <code>pred</code> is a constant time function that has some dependency on the sort order of <code>lst</code>. We've shown previously that if either of these doesn't hold, your algorithm is either inefficient or breaks. We now arrive at the last issue. <code>pred</code>'s comparison criteria must be monotone over the sorted list. That is just a fancy way of saying that when <code>lst</code> is sorted then <code>pred</code>'s comparison criteria must also be sorted. In which case, there isn't a purpose for <code>pred</code>, since the value of the item itself (which <code>lst</code> is sorted by this item value) is a proxy for the <code>pred</code> comparison criteria.</p>

<p>If you didn't follow all of that, don't be too worried. The important point is that you're probably misusing a binary search here. If you want to find the smallest value satisfying a predicate in a list you can just do: <code>min(lst, key=pred)</code>.</p>

<p>For example:</p>

<pre><code>people = [
    # (name, age)
    ('Doe Jane', 52),
    ('John Doe', 33),
    ('Jane Doe', 42),
]

# Min tuple from people by age
youngest_person = min(people, key=lambda p: p[1])
</code></pre>

<p>Note that with <code>namedtuple</code> this example becomes even more clear:</p>

<pre><code>from collections import namedtuple

Person = namedtuple('Person', 'name age')

people = [
    # (name, age)
    Person('Doe Jane', 52),
    Person('John Doe', 33),
    Person('Jane Doe', 42),
]

youngest_person = min(people, key=lambda p: p.age)
</code></pre>

<p>Now you may notice <code>people</code> is not sorted. You could pass in a sorted list though, but it doesn't make much sense to sort the list, because it's not like you can perform multiple of these operations. <code>min</code> of a list (that you don't modify) will always be the same. If you change <code>key</code> then you'd need to resort the list. If you wanted both the min and max, use <code>min</code> and <code>max</code>. If performance is of concern (which is unlikely), you could optimize this by having one function that scans over the entire list and keeps track of both the min and max values. If you want to modify the list, then you're probably better off using a heap, which remains sorted with inserts and removals.</p>

<p>Some extraneous issues:</p>

<p><code>default=None</code> isn't a very common pattern in Python. Sure you see it with <code>dict.get</code> (and less commonly with <code>iter</code>), but those are the two places where I can think of. These places have appropriate uses of allowing a default value. For your function a default value doesn't make much sense. Since it returns an index, what use would a "default index" be? I see two options:</p>

<ol>
<li><code>return None</code> (and only <code>None</code>). This simplifies the interface you provide. Allowing for a default value makes it hard for a user of your function to understand what's going on (it's just one more thing to wrap your head around). This way you can explain the function in a sentence: "Returns the minimum or maximum index of the item satisfying a predicate in a sorted list, or None"</li>
<li>Raise an exception (say <code>ValueError</code>) if no items satisfy the predicate. This is a very common approach in Python: <code>dict</code>s raise <code>KeyError</code> if a key doesn't exist (instead of returning <code>None</code>), <code>list</code>s raise <code>IndexError</code> if an index is out of bounds (instead of returning <code>None</code>). This is probably the right choice for you, because a predicate not being satisfied by anything in the list provided is probably an exceptional case that needs to be handled differently (eg. if you were to return <code>None</code> you couldn't treat it like a number if you wanted to do indexing with it).</li>
</ol>

<p>Your use of string constants to indicate the mode (<code>type="min"</code>) while common in numpy is a dangerous pattern IMO. You do no <code>assert type in ('min', 'max')</code>, so what if someone passes in <code>type="median"</code>? What if they make a typo: <code>type="mIn"</code>? Both of these appear to lead to behavior you don't want. Worst case (although your code doesn't appear to do this), this could cause an error inside your function. How frustrating would that be for a user of your function to see an error inside your function? This forces them to understand its internals to see if this is a bug in your function or a bug in their use of it. At the least, prefer an <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer"><code>Enum</code></a> so that if they choose an invalid type they get a <code>AttributeError</code> (if they tried to do <code>type=SearchMode.PENULTIMATE</code>, for example).</p>

<p>PEP8 your code. Your spacing needs work. Also wrap to 79 chars, it's really annoying to need to scroll right to read the docs. They're almost surely indented too far.</p>

<p>Instead of doing <code>p[0]</code> and <code>p[1]</code>, consider tuple unpacking to give those values more descriptive names:</p>

<pre><code>predicate_satisfied, direction = pred(mid, lst)
</code></pre>

<p>You should probably use required kwargs for <code>type</code> and <code>default</code>, otherwise, the function call site becomes unclear. Eg. is it <code>xbinsearch(my_pred, 'min', 1)</code> or <code>xbinsearch(my_pred, 1, 'min')</code>. Much clearer: <code>xbinsearch(my_pred, type='min', default=1)</code>:</p>

<pre><code>def xbinsearch(pred, lst, *, type='min', default=None):
    # ...
</code></pre>
    </div>