<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Some actions I go through are asynchronous, so I have to wait for them to completely finish before passing to a new one.</p>
</blockquote>

<p>That's right. However, your interpretation of that statement is wrong.</p>

<p>The actions need to be serialized, but only on a per file basis.</p>

<pre><code>const buffer = await file.buffer();
return await this.bufferIsImageFile(buffer);
</code></pre>

<h1>Concurrency</h1>

<p>You can further proceed with <code>Promise.all</code> as you did, but it has a few caveats.</p>

<ul>
<li>Since any file that is not image means you should return false, not caring about the others. And so you should be able to cancel all the other file scans once you find the first file that is not image. Native promises are not cancelable but I am sure there are user land implementations.</li>
<li>You have no control about the number of files consumers will ask for. If they ask for a lot of files, you start a lot of async tasks and this may consume a lot of memory. You may want to only start a limited amount of tasks at a time and add more once some finishes.</li>
</ul>

<p>The latter can be solved using <code>Promise.race</code>, but the actual implementation is not that trivial and so I will not write this for you :)</p>

<p>Maybe this SO question might be of help here:
<a href="https://stackoverflow.com/questions/42896456/get-which-promise-completed-in-promise-race">https://stackoverflow.com/questions/42896456/get-which-promise-completed-in-promise-race</a></p>

<p>Or you may want to use some promises wrapper like bluebird which also provides cancellation mechanism (<a href="http://bluebirdjs.com" rel="nofollow noreferrer">http://bluebirdjs.com</a>)</p>

<h1>Filtering</h1>

<p>The <code>filteredFiles</code> list seems to me too hard coded (but it all seems like you pulled it together just for this review, in which case you may consider this irrelevant). </p>

<p>It should be injected to the method somehow, your options include:</p>

<ul>
<li>method argument (thats awkward tho)</li>
<li>class property injected through constructor</li>
<li>decorator pattern (<a href="https://lmgtfy.com/?q=decorator+pattern+nodejs" rel="nofollow noreferrer">https://lmgtfy.com/?q=decorator+pattern+nodejs</a>)</li>
</ul>
    </div>