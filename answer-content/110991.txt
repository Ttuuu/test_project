<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>public static byte[] EncryptMessage( KeyParameter sharedKey, byte[] nonSecretMessage, byte[] secretMessage ) {  
</code></pre>
</blockquote>

<p>the spaces after and before the opening and closing <code>()</code> are looking strange and you aren't consistent with that style.  </p>

<blockquote>
<pre><code>if( nonSecretMessage != null &amp;&amp; nonSecretMessage.Length &gt; 255 ) throw new Exception( "Non Secret Message Too Long!" );  
</code></pre>
</blockquote>

<p>not using braces <code>{}</code> although they might be optional can lead to error prone code.  </p>

<blockquote>
<pre><code>byte nonSecretLength = nonSecretMessage == null ? (byte)0 : (byte)nonSecretMessage.Length;
</code></pre>
</blockquote>

<p>I don't really like having first a <code>if</code> condition checking a variable and then having a ternary which is checking the same variable again. Sometimes the good ole <code>if..else</code> is doing just fine.  </p>

<blockquote>
<pre><code>//Generate Cipher Text With Auth Tag
</code></pre>
</blockquote>

<p>instead of having this comment, why don't you just extract these lines to a method <code>GenerateCipherTextWithAuthTag(GcmBlockCipher, byte[])</code> ?  </p>

<blockquote>
<pre><code>var len = cipher.ProcessBytes(secretMessage, 0, secretMessage.Length, cipherText, 0);
</code></pre>
</blockquote>

<p>I consider this as misusing the <code>var</code> type. It is not obvious what the right hand side of the assignment returns.</p>

<blockquote>
<pre><code> using (var combinedStream = new MemoryStream())
   {
       using (var binaryWriter = new BinaryWriter(combinedStream))
       {
           //Prepend Authenticated Payload
           binaryWriter.Write(nonSecretLength);
           binaryWriter.Write(nonSecretMessage);

          //Prepend Nonce
           binaryWriter.Write(nonce);
           //Write Cipher Text
           binaryWriter.Write(cipherText);
       }
       return combinedStream.ToArray();
   }
</code></pre>
</blockquote>

<p>Here you should stack the <code>using</code> blocks in the same way you did in the <code>DecryptMessage()</code> method which saves you some horizontal spacing.  </p>

<p>By using <code>ToArray()</code> with a <code>MemoryStream</code> you are creating a new array which can be avoided if you use the <a href="https://msdn.microsoft.com/en-us/library/system.io.memorystream.getbuffer%28v=vs.110%29.aspx#" rel="nofollow"><code>GetBuffer()</code></a> method.</p>

<hr>

<p><strong>DecryptMessage</strong>  </p>

<blockquote>
<pre><code>try
{
    var len = cipher.ProcessBytes(cipherText, 0, cipherText.Length, plainText, 0);
    cipher.DoFinal(plainText, len);
}
catch (InvalidCipherTextException)
{
    //Return null if it doesn't authenticate
    return null;
}

return plainText;  
</code></pre>
</blockquote>

<p>You only return <code>null</code> for an <code>InvalidCipherTextException</code> but you let any other exception bubble up the call tree. That can be ok, but should be explained by a comment <strong>why</strong> this is done. Comments which are telling <strong>what</strong> is done are only noise to the code and should be removed.  </p>

<hr>

<p><strong><code>GetBytes()</code> and <code>GetString()</code></strong>  </p>

<p>You should use the <code>private</code> access modifiers for this methods to make it more clear. Having <code>public</code> modifiers but missing <code>private</code> makes it harder to grasp the code at first glance.  </p>

<p>Both of this methods already exists and are called in this methods if the passed in arguments <code>!= null</code>. This seems to be methods which shouldn't throw an exception for a given invalid input.  </p>

<p>I would like to suggest to use the <code>TryGetXXX()</code> pattern to make the intent of these methods more clear.  </p>

<pre><code>private static bool TryGetBytes(string str, out byte[] result)
{
    if(str == null) 
    { 
        result = null;
        return false; 
    }

    result = System.Text.Encoding.Unicode.GetBytes(str);
    return true;
}
</code></pre>
    </div>