<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Use a constructor to initialize class variables</h2>

<p>Your function <code>buildMenu()</code> looks like it is just initializing all the members of a class <code>menu</code>. That is normally the task of a constructor. So why not write:</p>

<pre><code>class menu
{
    public:
    ...
    menu(std::string name, menu *prev, menu* up, menu* down, menu* right):
            name(name), prev(prev), right(right), down(down), up(up) {}
};
</code></pre>

<p>Note that since this is a simple POD class, you can also use brace initialization without having to write a constructor yourself, like so:</p>

<pre><code>menu m = {"foo", nullptr, nullptr, nullptr, nullptr};
</code></pre>

<p>However, there is an even better way:</p>

<h2>You only need to link <code>menu</code> items to their parent</h2>

<p>Manually specifying all four pointers is cumbersome, and it is easy to confuse the four directions. It is also not necessary to store four pointers, there is quite a bit of redundancy in them. It is better to write a constructor that just takes one pointer called <code>parent</code>, and have the class <code>menu</code> have a vector of pointers to child menus, like so:</p>

<pre><code>class menu {
    std::vector&lt;menu *&gt; children;

    public:
    const string name;

    menu(const std::string &amp;name, menu *parent = nullptr): name(name) {
        if (parent) {
            parent-&gt;children.push_back(this);
        }
    }

    menu *getChild(int i) {
        return children[i];
    }
};
</code></pre>

<p>This makes constructing a menu hierarchy much easier:</p>

<pre><code>menu mainMenu("Main");
menu   toolMenu("Tools", &amp;mainMenu);
menu   notesMenu("Notes", &amp;mainMenu);
menu     subjectsMenu("Subjects", &amp;notesMenu);
menu       mathMenu("Math", &amp;subjectsMenu);
menu       sciencesMenu("Sciences", &amp;subjectsMenu);
menu       humanMenu("Humanities", &amp;subjectsMenu);
menu   flashCardsMenu("Flash Cards", &amp;mainMenu);
</code></pre>

<p>Of course, now navigating the menu becomes more tricky, but you should just need two variables:</p>

<pre><code>std::stack&lt;menu *&gt; menuStack;
int menuItem;
</code></pre>

<p>The <code>menuStack</code> is to keep track of which (sub)menu you are in, and <code>menuItem</code> tells you which item in the current menu is selected. Navigating them becomes a matter of incrementing/decrementing menuItem to go up and down the currently selected menu, and pushing/popping menus to the stack to go deeper or going out of menus.</p>

<p>(Instead of storing a vector of children, you can still use four pointers. Your constructor still only needs to take a pointer to the parent menu, but now you need to spend more effort in the constructor to derive the four direction pointers based on the parent pointer.)</p>

<h2>Further improvements</h2>

<p>With the above, you still need to manually specify parent pointers.
You could instead add a member function to the class that creates a submenu:</p>

<pre><code>class menu {
    ...
    private:
    menu(const std::string &amp;name, menu *parent): name(name) {
            parent-&gt;children.push_back(this);
    }

    public:
    menu(const std::string &amp;name): name(name) {}
    menu subMenu(const std::string &amp;name) {
        return menu(name, this);
    }
};
</code></pre>

<p>This way, you can create your menu hierarchy like this:</p>

<pre><code>menu mainMenu("Main");
menu   toolMenu = mainMenu.subMenu("Tools");
menu   notesMenu = mainMenu.subMenu("Notes");
menu     subjectsMenu = notesMenu.subMenu("Subjects");
menu       mathMenu = subjectsMenu.subMenu("Math");
menu       sciencesMenu = subjectsMenu.subMenu("Sciences");
menu       humanMenu = subjectsMenu.subMenu("Humanities");
menu   flashCardsMenu = mainMenu.subMenu("Flash Cards");
</code></pre>

<p>Now your <code>main()</code> function doesn't have to deal with pointers anymore.</p>

<h2>Start thinking about ownership</h2>

<p>Currently, you are creating a number of <code>menu</code> variables, and they are linked together using pointers. Regardless of how nice you make the interface of linking them together, this can still create a problem if there is the possibility for some of the <code>menu</code> variables to go out of scope, and you get dangling pointers. There are several solutions:</p>

<ul>
<li><p>Create a destructor that removes itself from its parent's <code>children</code> vector. To do this, you will also need to store a <code>menu *parent</code> pointer.</p></li>
<li><p>Use <a href="https://en.cppreference.com/w/cpp/memory/shared_ptr%20%60std::shared_ptr%60" rel="noreferrer"><code>std::shared_ptr&lt;&gt;</code></a> to manage links between menu items. This requires that you remove the public constructors, and add a static member function that will do <code>new menu(...)</code> and returns the result as a <code>shared_ptr&lt;menu&gt;</code>.</p></li>
<li><p>Store submenus directly inside a regular menu. For example:</p>

<pre><code>class menu {
    vector&lt;menu&gt; children;
    ...
    public:
    menu &amp;subMenu(const std::string &amp;name) {
        return children.emplace_back(name);
    }
};
</code></pre></li>
</ul>

<h2>Create a cursor class for navigating the menu</h2>

<p>Think of a cursor as a more advanced iterator. In this case, it's an iterator that can move both up and down inside a menu, and left and right to different menus. It should look like:</p>

<pre><code>class menuCursor {
    menu &amp;rootMenu;
    ...

    public:
    menuCursor(menu &amp;rootMenu): rootMenu(rootMenu) {
        ...
    }

    bool prev();
    bool next();
    bool up();
    bool down();

    menu &amp;operator *() {
        // return a reference to currently selected item
    }

    menu *operator -&gt;() {
        // return a pointer to the currently selected item
    }
};
</code></pre>

<p>The functions <code>prev()</code>, <code>next()</code> and so on handle navigating the menu. Each should also check wether the action is correct, and return an error if not (here I recommend using a <code>bool</code> to signal success). Like a regular iterator, you can overload <code>operator *</code> to return the current menu item the cursor points to. The implementation depends on how you implement your <code>menu</code> class: if you have four pointers, then follow those. If you use my suggested method, then keep a stack and an int around to keep track of where you are. Then in your <code>main()</code>, you can do:</p>

<pre><code>menu mainMenu("Main");
menuCursor cursor(mainMenu);
...

while(...get input...) {
    cursor-&gt;displayMenu();

    switch(input) {
        case '0':
            cursor.prev();
            break;
        case '1':
            cursor.up();
            break;
        ...
    }
}
</code></pre>

<h2>Move <code>displayMenu()</code> out of <code>class menu</code></h2>

<p>The function <code>displayMenu()</code> is displaying the possible options for <em>navigating</em> the menu. It makes more sense to have it be a member function of <code>class menuCursor</code>, since the latter should know more about which navigation options are valid.</p>

<h2>Use <code>const</code> where appropriate</h2>

<p>When passing pointers or references to variables to a function that should not modify those variables, you should make those parameters <code>const</code>. It is quite common to pass strings as const references, like so:</p>

<pre><code>menu(const std::string &amp;name, ...);
</code></pre>

<p>This avoids the caller having to make a copy of the string.</p>

<p>Class member variables that are only set at initialization time, and will never change, can also be made const. In your case, if you know you will never change the name of a menu entry after having created it, make it const:</p>

<pre><code>class menu {
    ...
    const std::string name;
    ...
};
</code></pre>

<h2>Consider a different way of navigating the menus</h2>

<p>Instead of offering four options (prev, next, up, down), you could instead show all possible options in the current menu, plus an option to exit the current (sub)menu. Something like:</p>

<pre><code>std::stack&lt;menu *&gt; menuStack;
menuStack.push(&amp;mainMenu);

while (!menuStack.empty()) {
    menu *currentMenu = menuStack.top();

    // Print current menu
    std::cout &lt;&lt; currentMenu-&gt;name &lt;&lt; ":\n";
    int i = 0;
    for (auto &amp;submenu: currentMenu-&gt;children) {
         std::cout &lt;&lt; i++ &lt;&lt; ". " &lt;&lt; submenu.name &lt;&lt; "\n";
    }
    std::cout &lt;&lt; "X. Exit current menu\n";

    // Get input
    std::string input;
    std::cin &gt;&gt; input;

    // Navigate based on the input
    if (input == "X") {
        menuStack.pop();
        continue;
    } else {
        int item = std::stoi(input);
        // Add error checking here to ensure item is valid
        menuStack.push(&amp;currentMenu-&gt;children[item]);
    }
}
</code></pre>

<p>This should show you something like:</p>

<pre class="lang-none prettyprint-override"><code>Main:
0. Tools
1. Notes
2. Subjects
X. Exit current menu
</code></pre>

<p>And when you enter 2, it should show:</p>

<pre class="lang-none prettyprint-override"><code>Subjects:
0. Math
1. Sciences
2. Humanities
X. Exit current menu
</code></pre>
    </div>