<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First of all, have you looked at <code>LooseVersion</code> and/or <code>StrictVersion</code> from <a href="https://docs.python.org/3.7/distutils/apiref.html#module-distutils.version" rel="nofollow noreferrer"><code>distutils.version</code></a>?  They might already provide you with exactly what you need.</p>

<hr>

<p>General “PEP-8” Comments:</p>

<p>You should have a blank line after your import, after <code>class Version</code>, and after the <code>def __repr__(self)</code> method.  The blank-lines inside of <code>__lt__</code> and <code>__gt__</code> functions before the <code>else:</code> clause are inconsistent.</p>

<p>Your class and methods could benefit from <code>"""doc strings"""</code>.</p>

<p>The class members <code>Major</code>, <code>Minor</code>, <code>Patch</code> and <code>Build</code> should all be lower case.  Only class names should begin with capital letters.  Since the members should be private to the class, they should also be prefixed with an underscore.</p>

<hr>

<p>The constructor will silently fail if <code>type(ver_str) != 'string'</code> is ever <code>False</code>, and then the instance becomes useless, as the members which are required in every other method of the class become reference errors.  There is no need to check if <code>ver_str</code> is a string; just try to split it, and convert the parts to integers.  If you haven’t passed in a string, the split or conversion to integers will cause an exception.  (You could add a check that the split produces exactly 4 parts, to reject a version such as "1.2.3.4.5.6".)</p>

<p>Fortunately (as noted by @200_success in the comments), <code>type(ver_str)</code> will never equal <code>'string'</code>, because <code>type(...)</code> doesn't return strings; it returns types.  The code only works because the test inverts the condition, and reads <code>!=</code> when the intention is for the type to <code>==</code> a string.  The correct test would be closer to <code>if isinstance(ver_str, str):</code>, but again explicit type checking is an anti-pattern.</p>

<p>Without the explicit type checking, and using a more functional approach, the constructor could be written as a one line method.  As a side-effect of the deconstruction assignment, the version string must contain exactly 4 parts or an exception will be raised.</p>

<pre><code>def __init__(self, ver_str):
    self.Major, self.Minor, self.Patch, self.Build = map(int, ver_str.split('.'))
</code></pre>

<hr>

<p><code>printme()</code> is unused and could be deleted.  If you don’t wish to delete it, at least name it using snake_case to make it more readable: <code>print_me()</code>.  You could write the function as simply <code>print(repr(self))</code> to avoid duplicating code.</p>

<hr>

<p><code>__repr__(self)</code> should actually return a string like <code>Version("1.2.3.4")</code>, not the string <code>"1.2.3.4"</code> to conform to the <code>repr()</code> contract.  What you have written would make a great <code>__str__(self)</code> method though, and you could then implement <code>__repr__(self)</code> using the <code>str()</code> method.</p>

<hr>

<p>Inside <code>def main(...):</code>, you are using <code>argv</code>.  This is a different <code>argv</code>, shadowing the one you import from <code>sys</code> using <code>from sys import argv</code>.</p>

<p>You should avoid shadowing the imported name, by using:</p>

<pre><code>import sys

# ....

if __name__ == '__main__':
    main(sys.argv)
</code></pre>

<hr>

<p>There is no need to <code>exit(-1)</code> from <code>main()</code>, since the program will terminate anyway immediately.  <code>exit()</code> will terminate the Python interpreter, which can be unexpected, and can cause resources to not be properly closed.  A unit test framework will abruptly terminate, preventing recording of the test results, and preventing other unit tests from running.  In short, don’t ever use <code>exit()</code>.  Ever.</p>

<hr>

<p>Since you are explicitly writing for Python 3.7.0, you can use f-strings.  This means you can replace many of your <code>.format(...)</code> calls with a more compact, readable representation where the substitution location and value are combined.  Ie:</p>

<pre><code>    print("{} &lt; {}: {}".format(ver_1, ver_2, ver_1 &lt; ver_2))
</code></pre>

<p>could become simply:</p>

<pre><code>    print(f"{ver_1} &lt; {ver_2}: {ver_1 &lt; ver_2}")
</code></pre>
    </div>