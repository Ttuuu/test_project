<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some ideas that may help you improve your code.</p>

<h2>Use functions</h2>

<p>Right now this code is all one big block of code in <code>main</code>.  This makes it more difficult to read and understand than if functions were used.</p>

<h2>Simplify your code</h2>

<p>Consider this sequence of code to read two integers:</p>

<pre><code>std::string first;
std::getline(std::cin, first);
std::istringstream iss(first);
std::vector&lt;int&gt; tokens1;
std::copy(std::istream_iterator&lt;int&gt; (iss),
             std::istream_iterator&lt;int&gt;(),
             std::back_inserter(tokens1));

int n = tokens1[0], q=tokens1[1];
</code></pre>

<p>Now consider this version:</p>

<pre><code>int n, q;
std::cin &gt;&gt; n &gt;&gt; q;
</code></pre>

<p>Which is easier to read and understand?  It's true they don't do the exact same thing, but I suspect the differences don't much matter in this case.</p>

<h2>Eliminate unused variables</h2>

<p>Unused variables are a sign of poor quality code, and you don't want to write poor quality code. In this code, <code>source</code> is unused.  Your compiler may be smart enough to tell you about this if you ask it nicely.</p>

<h2>Don't <code>#include</code> headers that aren't needed</h2>

<p>This code includes <code>&lt;cmath&gt;</code> and <code>&lt;cstdio&gt;</code> but neither are actually used.  Those lines should be deleted.</p>

<h2>Use appropriate data structures</h2>

<p>The <code>tagKey</code> variable is a <code>std::string</code> and keeps the current tag stack as a <code>'.'</code> separated string.  However this gets messy and complex because "popping" a tag from the end means looking for that delimiter and then erasing just that bit.  I'd be inclined to create a class for that to encapsulate this complexity.  Here's one way to do that:</p>

<pre><code>class StringStack : public std::deque&lt;std::string&gt; {
public:
    std::string asString() const {
        auto it{cbegin()};
        std::string str{*it};
        for (++it; it != cend(); ++it) {
            str += "." + *it;
        }
        return str;
    }
};
</code></pre>

<h2>Use a state machine</h2>

<p>The logic of this code could be expressed as a state machine.  If that were done, one could process the stream "on the fly" character at a time with little difficulty.</p>

<h2>Prefer <code>unordered_map</code> to <code>map</code></h2>

<p>There's not really any reason that this code needs a <code>map</code> instead of an <code>unordered_map</code> and one generally gets a performance increase using the unordered version.</p>

<h2>An example</h2>

<p>Using the suggestions above, my rewritten version of <code>main</code> looks like this:</p>

<pre><code>int main() {
    constexpr std::size_t maxlinelen{200};

    int n, q;
    std::cin &gt;&gt; n &gt;&gt; q;
    std::cin.ignore(maxlinelen, '\n');

    auto tagValue{fetchTags(std::cin, n)};

    for(std::string query; q &gt; 0 &amp;&amp; std::getline(std::cin, query); --q) {
        auto search = tagValue.find(query);
        if (search == tagValue.end()) {
            std::cout &lt;&lt; "Not Found!\n";
        } else {
            std::cout &lt;&lt; search-&gt;second &lt;&lt; '\n';
        }
    }
}
</code></pre>

<p>I implemented a <code>fetchTags()</code> routine using a state machine and returning a <code>std::unordered_map&lt;std::string, std::string&gt;</code> but rather than spoil the fun, I'll leave it to you to implement your own.</p>
    </div>