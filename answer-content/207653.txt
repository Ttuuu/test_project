<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Let me just express the first thing that came to mind when I read this question's title:</p>

<blockquote>
  <p>Not another Singleton question.</p>
</blockquote>

<p>Let's ignore in the following that Singletons are an anti-pattern in Object-Oriented Programming.</p>

<p>Look. I get it. Singletons are nice and easy.<br>
Everything about them makes things easier to think about.<br>
The whole point of a singleton is that only one instance of it ever exists.<br>
It's by definition the single source of truth. </p>

<p>What your code does is subtly, but completely undermine that assumption.</p>

<p>Consider the following sequence:</p>

<pre><code>AuthManager authSingleton = AuthManager.getNewInstance();
SingletonUtils.removeInstance(AuthManager.class),
AuthManager anotherSingleton = AuthManager.getNewInstance();
</code></pre>

<p>Those don't need to be in the same thread, the same class or the same anything. As long as they run in the same JVM, <code>authSingleton == anotherSingleton</code> will be <strong>false</strong>. And this is a complete and utter breakage of the semantics of a Singleton.</p>

<p>What you tried to do with that class is not something that you want. You're centrally controlling the lifetime of singletons. But you're not correctly enforcing the semantics of these singletons.</p>

<p>This code is something like an ObjectPool. Implying that it has anything to do with singletons is incorrect though.</p>

<p>Do not make singletons complicated:</p>

<pre><code>public final class AuthManager {
    private static final AuthManager INSTANCE = new AuthManager();
    public static AuthManager get() {
        return INSTANCE;
    }

    private AuthManager() {
    }
}
</code></pre>

<p>^^ This is a complete, threadsafe and lazily initialized Singleton. In 99.9999% of the use-cases of a singleton, this is enough. But 90% of all Singleton uses are just flat out <em>wrong</em>. </p>

<p>There is no useful reason for an "AuthManager" to be a Singleton. Don't cargo-cult.</p>
    </div>