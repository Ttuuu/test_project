<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>The algorithm</h3>

<p>Let's first have a look at your implementation of Dijkstra's algorithm in the</p>

<pre><code>func shortestPath(source: Int, destination: Int, graph: Graph) -&gt; Int
</code></pre>

<p>function:</p>

<ul>
<li><p>The <code>visited</code> property of a node is updated, but nowhere tested. As a consequence, the distance of <em>all</em> neighbors of a node is updated, not only the distance of unvisited neighbors. This does not lead to wrong results (as far as I can see) but causes unnecessary comparisons.</p></li>
<li><p>It is unclear to me what this is for: </p>

<pre><code>        if (connectedEdge.to.visited == true) {
            connectedEdge.to.visited = false
        }
</code></pre>

<p>The  Dijkstra algorithm does not mark nodes as unvisited, and I cannot see when the condition should be true at all.</p></li>
<li><p>The algorithm does not work if start node and destination node are identical. This can be fixed by computing the next current node (and comparing it with the destination) at the beginning of the main loop, not at the end. This also removes the necessity to check <code>if !toVisit.isEmpty</code> twice (as the loop condition and again inside the loop).</p></li>
<li><p>The <code>distance</code> of the initial node is set to zero twice.</p></li>
</ul>

<p>Here is a possible implementation which fixes the above issues:</p>

<pre><code>func shortestPath(source: Int, destination: Int, graph: Graph) -&gt; Int {

    let startNode = graph.nodes.first{ $0.identifier == source }!
    startNode.distance = 0
    var toVisit = [startNode]

    while (!toVisit.isEmpty) {
        // Select node with smallest distance.
        let currentNode = toVisit.min(by: { (a, b) -&gt; Bool in
            return a.distance &lt; b.distance
        })!

        // Destination reached?
        if currentNode.identifier == destination {
            return currentNode.distance
        }

        // Mark as visited.
        currentNode.visited = true
        toVisit = toVisit.filter { $0.identifier != currentNode.identifier }

        // Update unvisited neighbors.
        for edge in currentNode.edges where !edge.to.visited {
            let neighbor = edge.to
            toVisit.append(neighbor)
            let dist = currentNode.distance + edge.weight
            if (dist &lt; neighbor.distance) {
                neighbor.distance = dist
            }
        }

    }

    // Destination not reachable.
    return -1
}
</code></pre>

<p>There is one more issue: The <code>toVisit</code> array (which is build “on the fly” while traversing the graph) can contain duplicate elements. A possible fix is to use a <em>set</em> instead of an array. This would required the <code>Node</code> class to be <code>Hashable</code> – see below.</p>

<h3>Code and design improvements</h3>

<ul>
<li><p>Your function returns <code>-1</code> if there is no path from the start to the destination node. The Swift way of returning a value or failure is to return an <em>optional,</em> where <code>nil</code> means “no result.”</p></li>
<li><p>All properties of <code>class Edge</code> are never mutated after object creation, they should be declared as <em>constants</em> (with <code>let</code>).</p></li>
<li><p>The <code>Node</code> initializer needs only the <code>identifier</code> – and that should be a constant property.</p></li>
<li><p>It is not possible to compute the <code>shortestPath()</code> function multiple times (with different parameters) because it relies on the <code>visited</code> and <code>distance</code> property to be initialized.</p></li>
<li><p>I would replace the function</p>

<pre><code>func setupGraphwith(edges: [[Int]]) -&gt; Graph
</code></pre>

<p>by an initalizer of the <code>Graph</code> class, and</p>

<pre><code>func shortestPath(source: Int, destination: Int, graph: Graph) -&gt; Int
</code></pre>

<p>by a method of that class:</p>

<pre><code> class Graph {

    init(edgeList: [[Int]]) 
    func distance(from: Int, to: Int) -&gt; Int?
}
</code></pre>

<p>The usage would then be</p>

<pre><code>let graph = Graph(edgeList: ...)
let distance = graph.distance(from: 1, to: 6)
</code></pre></li>
<li><p>The optional bindings in <code>setupGraphwith(edges:)</code> </p>

<pre><code>if let fromNode = graph.nodes.first(where: { $0.identifier == edge[0] }) 
if let toNode = graph.nodes.first(where: { $0.identifier == edge[1] })
</code></pre>

<p>cannot fail because those nodes were all created before. Therefore a forced unwrap would be appropriate:</p>

<pre><code>let fromNode = graph.nodes.first(where: { $0.identifier == edge[0] })!
let toNode = graph.nodes.first(where: { $0.identifier == edge[1] })!
</code></pre>

<p>An alternative would be to have a “find or create” method in the <code>Graph</code> class.</p></li>
</ul>

<h3>Performance improvements</h3>

<p>At various points, <em>arrays</em> are used to store, locate, and remove nodes. Each lookup requires a traversal of the array. Using <em>sets</em> would be more efficient. That requires the <code>Node</code> class to be <code>Hashable</code>. I would base equality (and consequently, the hash value) on <em>object identity</em> instead of the numerical identifier.</p>

<p>A <em>priority queue</em> would be more efficient to determine the node with the currently minimum distance.</p>

<h3>Putting it all together</h3>

<p>Summarizing the above suggestions (with the exception of the priority queue) the code code look like this. I have only omitted the <code>CustomStringConvertible</code> conformance for brevity.</p>

<pre><code>class Node {

    let identifier: Int
    var distance = Int.max
    var edges = [Edge]()
    var visited = false

    init(identifier: Int) {
        self.identifier = identifier
    }
}

extension Node: Hashable {
    static func == (lhs: Node, rhs: Node) -&gt; Bool {
        return lhs === rhs
    }

    func hash(into hasher: inout Hasher) {
        hasher.combine(ObjectIdentifier(self).hashValue)
    }
}

class Edge {
    let from: Node
    let to: Node
    let weight: Int

    init(to: Node, from: Node, weight: Int) {
        self.to = to
        self.from = from
        self.weight = weight
    }
}

class Graph {
    var nodes: Set&lt;Node&gt;

    // Find or create node with the given identifier
    func node(identifier: Int) -&gt; Node {
        if let node = nodes.first(where: { $0.identifier == identifier }) {
            return node
        } else {
            let node = Node(identifier: identifier)
            nodes.insert(node)
            return node
        }
    }

    init(edgeList: [[Int]]) {
        nodes = []
        for edgeDescription in edgeList {
            let fromNode = node(identifier: edgeDescription[0])
            let toNode = node(identifier: edgeDescription[1])
            let edge = Edge(to: toNode, from: fromNode, weight: edgeDescription[2])
            fromNode.edges.append(edge)
        }
    }

    func distance(from: Int, to: Int) -&gt; Int? {
        guard let fromNode = nodes.first(where: { $0.identifier == from }) else {
            return nil
        }
        guard let toNode = nodes.first(where: { $0.identifier == to }) else {
            return nil
        }

        if fromNode == toNode { return 0 }

        for node in nodes {
            node.visited = false
            node.distance = Int.max
        }

        fromNode.distance = 0
        var toVisit = Set([fromNode])

        while !toVisit.isEmpty {
            // Select node with smallest distance.
            let currentNode = toVisit.min(by: { (a, b) -&gt; Bool in
                return a.distance &lt; b.distance
            })!

            // Destination reached?
            if currentNode == toNode { return currentNode.distance }

            // Mark as visited.
            currentNode.visited = true
            toVisit.remove(currentNode)

            // Update unvisited neighbors.
            for edge in currentNode.edges where !edge.to.visited {
                let neighbor = edge.to
                toVisit.insert(neighbor)
                let dist = currentNode.distance + edge.weight
                if (dist &lt; neighbor.distance) {
                    neighbor.distance = dist
                }
            }
        }

        return nil
    }
}
</code></pre>
    </div>