<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Time complexity</strong></p>

<p>Yes, your solution has a <code>O(n^2)</code> time complexity. As the output is <code>n^2</code> where the input is <code>n</code>, achieving a better time complexity is impossible.</p>

<p>Look at the following code + output:</p>

<pre><code>for i in range(1, 51):
    string = "a" * i
    permutations = list(palindrome_substrings("a"*i))
    print(len(string), len(permutations), len(permutations) /  float(len(string)))
</code></pre>

<hr>

<pre><code>(1, 1, 1.0)
(2, 3, 1.5)
(3, 6, 2.0)
(4, 10, 2.5)
(5, 15, 3.0)
(6, 21, 3.5)
(7, 28, 4.0)
(8, 36, 4.5)
(9, 45, 5.0)
(10, 55, 5.5)
(11, 66, 6.0)
(12, 78, 6.5)
(13, 91, 7.0)
(14, 105, 7.5)
(15, 120, 8.0)
(16, 136, 8.5)
(17, 153, 9.0)
(18, 171, 9.5)
(19, 190, 10.0)
(20, 210, 10.5)
(21, 231, 11.0)
(22, 253, 11.5)
(23, 276, 12.0)
(24, 300, 12.5)
(25, 325, 13.0)
(26, 351, 13.5)
(27, 378, 14.0)
(28, 406, 14.5)
(29, 435, 15.0)
(30, 465, 15.5)
(31, 496, 16.0)
(32, 528, 16.5)
(33, 561, 17.0)
(34, 595, 17.5)
(35, 630, 18.0)
(36, 666, 18.5)
(37, 703, 19.0)
(38, 741, 19.5)
(39, 780, 20.0)
(40, 820, 20.5)
(41, 861, 21.0)
(42, 903, 21.5)
(43, 946, 22.0)
(44, 990, 22.5)
(45, 1035, 23.0)
(46, 1081, 23.5)
(47, 1128, 24.0)
(48, 1176, 24.5)
(49, 1225, 25.0)
(50, 1275, 25.5)
</code></pre>

<p>As you can see, not only the output size grows with the input, <strong>the ratio between output size and input size grows</strong> too. This means that the time complexity is quadratic.</p>

<p><strong>Generators and <code>all</code></strong></p>

<p>As far as the code is concerned, it is not Pythonic, it looks like C as it does not make use of generator expressions and built-ins like <code>any</code> or <code>all</code>.</p>

<pre><code>def is_palindrome(word):
    return all(word[i] == word[-1*(i+1)] for i in xrange(len(word)//2))
</code></pre>

<p>I kept your way of looping and multiplying by <code>-1</code>, but now the code reads at a higher level: all the <code>i-th</code> chars must equal the <code>(-1 * (i+1)) - th  chars</code>. And the efficiency is the same as <code>all</code> short-circuites (aborts the computation as soon as it finds a counterexample.)</p>

<p><strong>Separation of concerns</strong></p>

<p>Getting the substrings of a string is interesting in its own right.Why am I forced to get only the palindrome ones? Make <code>substrings</code> a separate function.</p>

<p><strong>Going one level deeper</strong></p>

<p>You can actually nest the loops in the generator expression, getting the substrings of a string may be written as:</p>

<pre><code>def substrings(string):
    return (string[i:j+1] for i in range(len(string)) for j in range(i, len(string)))
</code></pre>

<p>Or in a more imperative-looking (but equivalent) manner:</p>

<pre><code>def substrings(string):
    for i in range(len(string)):
        for j in range(i, len(string))):
            yield string[i:j+1]
</code></pre>

<p><strong>The final function</strong></p>

<p>And getting the palindrome substrings is now very easy:</p>

<pre><code>def palindrome_substrings(string):
    return (i for i in substrings(string) if is_palindrome(i))
</code></pre>

<p><strong>Side note about names</strong></p>

<p>Use long descriptive names, over cryptic abbreviations:</p>

<ul>
<li><p><code>check_palin</code> -&gt; <code>check_palindrome</code> or following the <code>is_</code> convention (boolean-returning functions should have a name starting with <code>is_</code>) <code>is_palindrome</code></p></li>
<li><p><code>all_palindromes</code>: What does <code>all</code> stand for? It stands for substrings so just write it like  that: -&gt; <code>palindrome_substrings</code></p></li>
</ul>

<p><strong>Bug fix</strong></p>

<p><code>a</code> is a palindrome, in general all single char strings are palindromes, so your code not returning them means it has a bug. My code rightly returns single char palindromes.</p>
    </div>