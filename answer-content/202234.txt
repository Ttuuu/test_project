<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Feedback</h2>

<p>Overall it looks like a nice start. The UI looks nice and the game functions just like other paddle games I have played before. </p>

<p>For the most part the code is well-organized. It is nice that everything is contained in an IIFE, strict equality comparisons are used and strict mode is enabled. There are just a couple simplifications that I found (see the <strong>Suggestions</strong> section below). </p>

<h2>Suggestions</h2>

<ol>
<li>use <code>const</code> for block-scope variables not re-assigned - this includes arrays where elements are merely pushed and popped</li>
<li>Move <code>settings</code> and perhaps other objects outside <code>main()</code></li>
<li><code>updatePosition</code> (and some others) could be an arrow function, just like the one used in <code>render()</code> to add each element in <code>lights</code> to the <code>scene</code>.</li>
<li><p>The <code>for</code> loop in <code>render</code> that iterates over the visible bricks can be simplified using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some" rel="nofollow noreferrer"><code>Array.prototype.some()</code></a> and not storing the object from <code>selectedObject</code> in a variable (since it is only used once for the following line).</p>

<pre><code>visibleBricks.some(function(visibleBrick, i) {
  return resolveBallBlockCollision(ball, visibleBrick, brick, function() {        
    scene.remove(scene.getObjectByName(visibleBrick.name));
    visibleBricks.splice(i, 1);
  });
});
</code></pre>

<p>Bearing in mind that each iteration would require an extra function call (as is the case with functional programming approaches), this approach would be slower so one must decide if code length/clarity or optimization is a priority.</p></li>
<li><p>The conditionals in function returned by <code>makeKeyUpCallback()</code> can be combined into single <code>if</code> statement with OR (i.e. <code>||</code>), since the two expression blocks are identical</p></li>
<li>The 1st and 2nd, as well as the 3rd and 4th conditional blocks in <code>resolveBallBlockCollision()</code> could possibly be abstracted to a separate function, or else just combined to avoid duplicated code in the expression block.</li>
<li>Some function parameters are excessive - for example: <code>resolveBallBlockCollision()</code> seems to accept 4 parameters but the 1st is always <code>ball</code>, so I would declare that at the start of the code with <code>let</code>, assign it in <code>main</code> and then have that function reference it from the variable outside.</li>
<li>For future code changes: will <code>createFullScreenRenderer()</code> (or <code>main()</code>) be called multiple times? For example, once all bricks are removed, will the game reset? If so, I would cache the DOM lookup by id for the canvas element (as well as any other elements) in a (<code>const</code>) variable.</li>
</ol>

<h2>Updated code</h2>

<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>(function() {
  "use strict";

  const paddleStates = {
    MOVING_LEFT: 0,
    MOVING_RIGHT: 1,
    STATIONARY: 2
  };
  // Hard-coded "settings"
  const settings = {
    backgroundColor: 0x008888,
    paddleSpeed: 0.3,
    ballSpeed: 0.2
  };

  const levelBounds = {
    top: -35.0,
    right: 17.0,
    left: -17.0,
    bottom: 0.0
  };

  const bricks = {
    rows: 11,
    columns: 11,
    distanceFromEdges: 1.0,
    distanceFromTop: 13.0,
    spacing: 0.2,
    color: 0xff00ff,
    depth: 1.0
  };
  let paddle, ball;

  function createMeshAtPosition(meshProperties, position) {
    const mesh = new THREE.Mesh(meshProperties.geometry, meshProperties.material);
    mesh.position.copy(position);
    return mesh;
  }

  function createFullScreenRenderer(elementId, settings) {
    const renderer = new THREE.WebGLRenderer({
      canvas: document.getElementById(elementId)
    });
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(settings.backgroundColor);
    return renderer;
  }

  function createCamera() {
    const camera = new THREE.PerspectiveCamera(
      90,
      window.innerWidth / window.innerHeight,
      0.1,
      3000);
    camera.position.set(0.0, 10.0, 0.0);
    camera.lookAt(0.0, 0.0, -10.0);
    return camera;
  }

  function makeResizeCallback(camera, renderer) {
    return function() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };
  }

  function makeKeyDownCallback(paddle, speed) {
    return function(event) {
      if (paddle.state === paddleStates.STATIONARY) {
        if (event.key === "ArrowLeft") {
          paddle.velocity.x = -speed;
          paddle.state = paddleStates.MOVING_LEFT;
        } else if (event.key === "ArrowRight") {
          paddle.velocity.x = speed;
          paddle.state = paddleStates.MOVING_RIGHT;
        }
      }
    };
  }

  function makeKeyUpCallback(paddle) {
    return function(event) {
      if (paddle.state === paddleStates.MOVING_LEFT &amp;&amp; event.key === "ArrowLeft" ||
        paddle.state === paddleStates.MOVING_RIGHT &amp;&amp; event.key === "ArrowRight") {
        paddle.velocity.x = 0.0;
        paddle.state = paddleStates.STATIONARY;
      }
    };
  }
  const updatePosition = gameObject =&gt; gameObject.mesh.position.add(gameObject.velocity);

  function resolveBallBlockCollision(blockMesh, blockProperties, callback) {
    if (ShouldFlipBallZDirection(blockMesh, blockProperties)) {
      ball.velocity.z *= -1.0;
      callback();
      return true;
    }

    if (ShouldFlipBallXDirection(blockMesh, blockProperties)) {
      ball.velocity.x *= -1.0;
      callback();
      return true;
    }

    return false;
  }
  //better name likely exists for this - ballAtTopOrBottom ?
  function ShouldFlipBallZDirection(blockMesh, blockProperties) {
    return ((ball.mesh.position.z + ball.radius &gt; blockMesh.position.z - blockProperties.height / 2 &amp;&amp;
          (ball.mesh.position.z &lt; blockMesh.position.z)) &amp;&amp;
        (ball.mesh.position.x &gt; blockMesh.position.x - blockProperties.width / 2) &amp;&amp;
        (ball.mesh.position.x &lt; blockMesh.position.x + blockProperties.width / 2) &amp;&amp;
        (ball.velocity.z &gt; 0.0)) ||
      ((ball.mesh.position.z - ball.radius &lt; blockMesh.position.z + blockProperties.height / 2 &amp;&amp;
          (ball.mesh.position.z &gt; blockMesh.position.z)) &amp;&amp;
        (ball.mesh.position.x &gt; blockMesh.position.x - blockProperties.width / 2) &amp;&amp;
        (ball.mesh.position.x &lt; blockMesh.position.x + blockProperties.width / 2) &amp;&amp;
        (ball.velocity.z &lt; 0.0));
  }
  //better name likely exists for this - ballAtSide ?
  function ShouldFlipBallXDirection(blockMesh, blockProperties) {
    return ((ball.mesh.position.x + ball.radius &gt; blockMesh.position.x - blockProperties.width / 2 &amp;&amp;
          (ball.mesh.position.x &lt; blockMesh.position.x)) &amp;&amp;
        (ball.mesh.position.z &gt; blockMesh.position.z - blockProperties.height / 2) &amp;&amp;
        (ball.mesh.position.z &lt; blockMesh.position.z + blockProperties.height / 2) &amp;&amp;
        (ball.velocity.x &gt; 0.0)) ||
      ((ball.mesh.position.x - ball.radius &lt; blockMesh.position.x + blockProperties.width / 2 &amp;&amp;
          (ball.mesh.position.x &gt; blockMesh.position.x)) &amp;&amp;
        (ball.mesh.position.z &gt; blockMesh.position.z - blockProperties.height / 2) &amp;&amp;
        (ball.mesh.position.z &lt; blockMesh.position.z + blockProperties.height / 2) &amp;&amp;
        (ball.velocity.x &lt; 0.0));
  }

  function main() {
    paddle = {
      width: 4,
      height: 1,
      depth: 1,
      color: 0xffffff,
      velocity: new THREE.Vector3(0.0, 0.0, 0.0),
      state: paddleStates.STATIONARY,
      startPosition: new THREE.Vector3(0.0, 0.0, -4.0)
    };

    ball = {
      radius: 0.5,
      color: 0xffff00,
      velocity: new THREE.Vector3(settings.ballSpeed, 0.0, -settings.ballSpeed),
      startPosition: new THREE.Vector3(0.0, 0.0, -9.0),
      segments: {
        width: 16,
        height: 16
      }
    };

    const lights = [
      new THREE.AmbientLight(0xffffff, 0.5),
      new THREE.PointLight(0xffffff, 0.5)
    ];

    // Game
    const renderer = createFullScreenRenderer("game-window", settings);

    const scene = new THREE.Scene();
    const camera = createCamera();
    scene.add(camera);

    paddle.mesh = createMeshAtPosition({
      geometry: new THREE.BoxGeometry(paddle.width, paddle.depth, paddle.height),
      material: new THREE.MeshLambertMaterial({
        color: paddle.color
      })
    }, paddle.startPosition);
    scene.add(paddle.mesh);

    ball.mesh = createMeshAtPosition({
      geometry: new THREE.SphereGeometry(ball.radius, ball.segments.width, ball.segments.height),
      material: new THREE.MeshLambertMaterial({
        color: ball.color
      })
    }, ball.startPosition);
    scene.add(ball.mesh);

    lights.forEach(light =&gt; scene.add(light));

    const levelWidth = levelBounds.right - levelBounds.left;
    const brick = {
      width: (levelWidth - 2 * bricks.distanceFromEdges + bricks.spacing * (1 - bricks.columns)) / bricks.columns,
      height: (bricks.distanceFromTop - bricks.distanceFromEdges) / bricks.rows,
      depth: bricks.depth
    };

    const visibleBricks = [];
    for (let row = 0; row &lt; bricks.rows; row += 1) {
      for (let column = 0; column &lt; bricks.columns; column += 1) {
        let position = new THREE.Vector3(
          levelBounds.left + bricks.distanceFromEdges + column * (brick.width + bricks.spacing) + 0.5 * brick.width,
          0.0,
          levelBounds.top + bricks.distanceFromEdges + row * (brick.height + bricks.spacing) + 0.5 * brick.height);
        const mesh = createMeshAtPosition({
          geometry: new THREE.BoxGeometry(brick.width, brick.depth, brick.height),
          material: new THREE.MeshLambertMaterial({
            color: bricks.color
          })
        }, position);
        const name = `${row},${column}`;
        mesh.name = name;
        scene.add(mesh);
        visibleBricks.push({
          position: position,
          name: name
        });
      }
    }

    requestAnimationFrame(render);

    function render() {
      // update paddle position
      // ball-level collision
      if ((ball.mesh.position.z - ball.radius &lt; levelBounds.top &amp;&amp; ball.velocity.z &lt; 0.0) ||
        (ball.mesh.position.z + ball.radius &gt; levelBounds.bottom &amp;&amp; ball.velocity.z &gt; 0.0)) {
        ball.velocity.z *= -1.0;
      }

      if ((ball.mesh.position.x + ball.radius &gt; levelBounds.right &amp;&amp; ball.velocity.x &gt; 0.0) ||
        (ball.mesh.position.x - ball.radius &lt; levelBounds.left &amp;&amp; ball.velocity.x &lt; 0.0)) {
        ball.velocity.x *= -1.0;
      }

      resolveBallBlockCollision(paddle.mesh, paddle, function() {});

      // ball-brick collision
      visibleBricks.some(function(visibleBrick, i) {
        return resolveBallBlockCollision(visibleBrick, brick, function() {
          scene.remove(scene.getObjectByName(visibleBrick.name));
          visibleBricks.splice(i, 1);
        });
      });

      updatePosition(paddle);
      updatePosition(ball);
      renderer.render(scene, camera);
      requestAnimationFrame(render);
    }

    window.addEventListener("resize", makeResizeCallback(camera, renderer), false);
    window.addEventListener("keydown", makeKeyDownCallback(paddle, settings.paddleSpeed), false);
    window.addEventListener("keyup", makeKeyUpCallback(paddle), false);
  }

  window.addEventListener("load", main, false);
})();</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
  padding: 0px;
  margin: 0px;
  overflow: hidden;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/95/three.js"&gt;&lt;/script&gt;
&lt;canvas id="game-window"&gt;&lt;/canvas&gt;</code></pre>
</div>
</div>

    </div>