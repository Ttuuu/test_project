<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is quite a lot of code, so I'll point out the first few things that I notice.</p>

<ul>
<li>Naming: you have some constants all upper case which is good, but you also have constants that are lower case and one (<code>Score</code>) which is neither. I'd say stick to all upper case for constants.</li>
<li>A small typo (<code>Snaek</code>)</li>
<li><code>x</code> and <code>y</code> don't really say much, but you're using them as the old position of the snake, so maybe rename them to <code>orig_x</code> and <code>orig_y</code></li>
<li><code>pygame.key.set_repeat(10, 10)</code> is useless here, you can remove it.</li>
<li><code>get_food_pos</code> gets as arguments the width and height of the screen, but no need to name them the same way, which is actually quite misleading. Name them simply <code>width</code> and <code>height</code> and return <code>food_x</code> and <code>food_y</code>, not the same variables.</li>
</ul>

<p>Now for the implementation.</p>

<ul>
<li>Yes, the key press handler can be written with less code. You can have an array of key presses and use the values to determine where you're supposed to go.</li>
</ul>

<p>You can initialize it like this:</p>

<pre><code>(LEFT, RIGHT, UP, DOWN) = (0, 1, 2, 3)
pressed = [0, 1, 0, 0]
</code></pre>

<p>And in the main loop use it like this:</p>

<pre><code>for event in pygame.event.get():
    if event.type == QUIT:
        pygame.quit()
        sys.exit()
    elif event.type == pygame.KEYDOWN:          # check for key presses
        if event.key == pygame.K_LEFT and not pressed[RIGHT]:
            pressed = [-1, 0, 0, 0]
        elif event.key == pygame.K_RIGHT and not pressed[LEFT]:
            pressed = [0, 1, 0, 0]
        elif event.key == pygame.K_UP and not pressed[DOWN]:
            pressed = [0, 0, -1, 0]
        elif event.key == pygame.K_DOWN and not pressed[UP]:
            pressed = [0, 0, 0, 1]

snakex += speed * (pressed[LEFT] + pressed[RIGHT])
snakey += speed * (pressed[UP] + pressed[DOWN])
</code></pre>

<p>What happens here is that if one of the keys is pressed, the array will contain all zero values, except for the pressed key. The value there will be negative or positive depending on the direction, so you can simply sum and multiply the result by your speed.</p>

<p>The display menu can also be written differently.</p>

<ul>
<li>First of all I'd rather have that return a value and use that to determine if the users want to quit or not. Then I'd rename it to something like <code>get_menu_choice</code>.</li>
<li>There's no need to repaint continuously if you're not changing anything, so your drawing code can be outside of that <code>while</code> loop.</li>
<li>If you want to detect collisions between anything and a rectangle there's a specific method for that. You get your mouse position and check if it's collided with a rectangle.</li>
</ul>

<p>To sum up, something like this:</p>

<pre><code>def get_menu_choice():
    screen.fill(BLACK)
    font = pygame.font.Font(None, 30)
    play_game = font.render("Play Game", 1, WHITE)
    quit_game = font.render("Quit Game", 1, WHITE)

    screen.blit(play_game, (275, 185))
    screen.blit(quit_game, (275, 275))
    pygame.display.update()
    fpsClock.tick(FPS)

    while True:
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
        pos = pygame.mouse.get_pos()
        (mouse_clicked, _, __) = pygame.mouse.get_pressed()
        start_game_rect = pygame.Rect(275, 185, 110, 27)
        quit_game_rect = pygame.Rect(275, 275, 110, 27)
        if mouse_clicked:
            if start_game_rect.collidepoint(pos):
                return 1
            if quit_game_rect.collidepoint(pos):
                return 0

if get_menu_choice() == 0:
    pygame.quit()
    sys.exit()
</code></pre>
    </div>