<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>first, using <code>Parse</code> for user input it would be a bad practice, as you're parsing the input without any validation. thus, you'll need to use <code>TryParse</code> instead, which will validate the input to the specific type, if it's valid input that would be acceptable by the targeted type, then it would return <code>true</code> and output the parsed value.</p>

<p>Example direct parsing : </p>

<pre><code>// this would pass the value without validation 
int amountofcars = int.Parse(Console.ReadLine());
</code></pre>

<p>Example of validated parsing : </p>

<pre><code>// this validates the input value, then process :
bool isValid = int.TryParse(Console.ReadLine(), out int amountofcars);
// isValid == true, then it's an interger. 

if(isValid) // if it's a valid integer
{
    // process the amountofcars
}
</code></pre>

<p>you'll find a lot of System types that already has <code>TryParse</code> like <code>int.TryParse</code>, <code>double.TryParse</code> and so on. You should always use it when parsing user inputs. You can still use <code>Parse</code> but use it whenever you see that you're diffidently sure a hundred percent that the value will always be compatible with the targeted type.  </p>

<p>Since you have <code>cars</code>, <code>carprice</code> and <code>models</code> arrays, I assume you need one class model, that would hold car information. something like : </p>

<pre><code>public class Car
{
    public double Price { get; set; }

    public string Model { get; set; }
}
</code></pre>

<p>now you can initiate a car array : </p>

<pre><code>Car[] cars = new Car[amountofcars];
</code></pre>

<p>then inside your loop you can simply do this : </p>

<pre><code>for(int i = 0; i &lt; amountofcars; i++)
{
    Console.WriteLine("List the model of car #{0}", i + 1);
    string carmodels = Console.ReadLine();
    cars[i].Model = carmodels; 
    Console.WriteLine("Input car price");
    double price = double.Parse(Console.ReadLine()); // use TryParse instead;
    cars[i].Price = price;
}
</code></pre>

<p>doing this, would let you have and process one array which  hold the car information in each element. </p>

<p>I suggest you use <code>List</code> instead of array. It would make things easier for you to process like adding and removing and also you don't need to specify its length. Also, it has more functionality than a system array. </p>

<p>Here is a modified version with some comments that would help you throughout the code, if you feel you need a clarification just let me know. </p>

<pre><code>public class Car
{
    public double Price { get; set; }

    public string Model { get; set; }
}

public static class Program
{
    public static void Main(string[] args)
    {
        List&lt;Car&gt; cars = new List&lt;Car&gt;();

        int amountofcars = 0;

        do
        {
            // this should forced the user to input a valid integer 
            // it won't break this loop until it gets a valid integer.
            Console.WriteLine("How many cars are in the workshop?");
        }
        while (int.TryParse(Console.ReadLine(), out amountofcars) == false);

        // now we can process 
        for (int i = 0; i &lt; amountofcars; i++)
        {

            Console.WriteLine("List the model of car #{0}", i + 1);
            // since it's string, there is no need for type validation, unless you need to include business validation. 
            string carmodels = Console.ReadLine();

            // repeat the same validation : 
            double price = 0;
            do
            {
                // this should forced the user to input a valid integer 
                // it won't break this loop until it gets a valid integer.
                Console.WriteLine("Input car price");
            }
            while (double.TryParse(Console.ReadLine(), out price) == false);

            cars.Add(new Car { Model = carmodels, Price = price });
        }


        Console.WriteLine("Data stored");
        Console.WriteLine();
        Console.WriteLine("What do you want to do next?");
        Console.WriteLine("Type \"Search\" to start a new search or any key to leave program");
        string responce = Console.ReadLine();

        while (true)
        {
            //using StringComparison.InvariantCultureIgnoreCase 
            // this would make it case-insensitive
            if (responce.Equals("Search", StringComparison.InvariantCultureIgnoreCase))
            {
                Car found = null;

                Console.WriteLine("What car did you want to search for?");

                string modelsearch = Console.ReadLine();

                foreach (var car in cars)
                {
                    if (car.Model.Equals(modelsearch, StringComparison.InvariantCultureIgnoreCase))
                    {
                        found = car;
                    }
                }

                if (found != null)
                {
                    Console.WriteLine($"{found.Model} {found.Price}");
                    Console.WriteLine();
                }
                else
                {
                    Console.WriteLine($"Model {modelsearch} not found.");
                    Console.WriteLine();
                }

                Console.WriteLine("What do you want to do next?");
                Console.WriteLine("Search again? \"Y\" or any key to exit");


                // this line would break if it's not a char.
                //searchagain = char.Parse(Console.ReadLine());

                var whatnext = Console.ReadLine();

                if (whatnext.Equals("Y", StringComparison.InvariantCultureIgnoreCase) == false)
                {
                    // if user input anything else will break this loop.
                    break;
                }
            }
            else
            {
                // in case if pressed any key, it'll break this loop. 
                break;
            }

        } 

    }
}
</code></pre>
    </div>