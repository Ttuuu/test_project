<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is how <a href="https://github.com/ekmett" rel="nofollow noreferrer">Edward Kmett</a> implemented <code>traverse</code> in the <a href="https://hackage.haskell.org/package/comonad-4.0/docs/src/Data-Functor-Coproduct.html#Coproduct" rel="nofollow noreferrer">Data.Functor.Coproduct</a> package. </p>

<pre><code>instance (Traversable f, Traversable g) =&gt; Traversable (Coproduct f g) where
  traverse f = coproduct
    (fmap (Coproduct . Left) . traverse f)
    (fmap (Coproduct . Right) . traverse f)
</code></pre>

<p>While he writes in a points free style and uses <code>Either</code> under the hood instead of your bespoke Coproduct instance, the result is still the same.  Apply the supplied function to either the left or right branch and wrap the result back in the constructor.</p>

<p>I do not see a better way to than the implementation given unless Î·-conversion to points-free is appealing for some reason.</p>
    </div>