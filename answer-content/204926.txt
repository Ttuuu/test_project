<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's a lot that can be improved in your code, especially if you are using C++. The more advanced features of C++ actually help you organize your code better, help you write less code to do what you want, and remove a lot of tedium that you find in C-style code.</p>

<h2>Use proper names for variables and functions</h2>

<p>Names should accurately reflect what the purpose is of a variable or a function. Of course, names should be concise, but apart from some well established conventions such as using <code>i</code> for a loop index, or <code>x</code> and <code>y</code> for coordinates, don't abbreviate names.
Here are some suggestions for improvements in your code:</p>

<ul>
<li>Instead of <code>circle()</code>, name the function <code>draw_circles()</code>.</li>
<li>Instead of <code>square()</code>, name the function <code>print_result()</code>.</li>
<li>Instead of <code>comp</code>, name the variable <code>angle</code>, or perhaps <code>phi</code>.</li>
</ul>

<h2>Use <code>'\n'</code> instead of <code>std::endl</code></h2>

<p><code>std::endl</code> is in fact equivalent to <code>'\n'</code>, but in addition it also forces a flush of the output stream, which will slow down the output if it is used a lot.</p>

<h2>Don't store unnecessary data</h2>

<p>You have added a member variable <code>circ</code> to <code>struct vec2</code>. First of all, it is rather strange to name something <code>vec2</code> when it contains 3 elements. But it is also unnecessary to store the radius of the circle in that struct at all.</p>

<h2>Avoid using global variables</h2>

<p>As already mentioned in the comments, don't use global variables if you can easily avoid them. Keep the array <code>v</code> inside <code>main()</code>, and pass it as a parameter to the other functions. It does not seem like a big deal now, but once your code grows you will appreciate keeping the global namespace tidy, and by passing references/pointers to your data to functions, you make those functions more reusable.</p>

<h2>Stick to radians when possible</h2>

<p>All trigonometric functions in <code>&lt;cmath&gt;</code> use radians, and any calculations done involving angles are usually simpler when done in radians than in degrees. Instead of:</p>

<pre><code>int comp = j*30;
double rad = comp * (pi / 180);
</code></pre>

<p>Write this:</p>

<pre><code>double angle = j * (2 * pi / 12);
</code></pre>

<h2>Use a proper value for π</h2>

<p>If your <code>&lt;cmath&gt;</code> library provides it, use <code>M_PI</code> for the value of π, or if not, write <code>double pi = std::acos(-1)</code> (<a href="https://stackoverflow.com/questions/9912151/math-constant-pi-value-in-c" title="Math constant pi value in C">see this question</a>). Just don't make unnecessary approximations; it costs you nothing to do it properly, and you never know when an approximation might actually cause you problems.</p>

<h2>Store the image, not the coordinates of the X'es.</h2>

<p>Building a list of coordinates of where the X'es are, and then checking for each position in the output whether it matches the coordinates of one of the X'es is not efficient. This algorithm scales with O(width * height * number_of_Xes). You either want to write the X'es directly to the screen at the right position, or keep an array of width * height characters in memory, write the X'es to that array, and then at the end print the contents of that character array. Let's use the latter method, which brings us to:</p>

<h2>Use a class to represent the output image</h2>

<p>You are using C++, so make use of its features! Make a class that manages an ASCII-art image for you, like so:</p>

<pre><code>#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

class Image {
    std::vector&lt;char&gt; pixels;

    public:
    const unsigned int width;
    const unsigned int height;

    // Create a w * h image, fill it with spaces
    Image(unsigned int w, unsigned int h):
            width(w), height(h), pixels(w * h, ' ') {}

    // Return a reference to the character at coordinates x, y
    char &amp;at(unsigned int x, unsigned int y) {
        assert(x &lt; width &amp;&amp; y &lt; height);
        return pixels[y * width + x];
    }

    // Print the image
    void print(std::ostream &amp;out) {
        for (unsigned int y = 0; y &lt; height; y++) {
            for (unsigned int x = 0; x &lt; width; x++)
                out &lt;&lt; at(x, y);
            out &lt;&lt; '\n';
        }
    }
};
</code></pre>

<p>This class will store the characters that make up the image in a <code>std::vector</code>, which acts mostly like an array, but it has the nice property that it also allocates and cleans up memory for you behind the scenes.</p>

<p>The function <code>at()</code> will return a reference to the character in the vector at the given coordinates. You can use this to both read and write to that character.</p>

<p>The function <code>print()</code> takes a <code>std::ostream</code> reference as an argument, so you can have it print to any stream you want.</p>

<p>Using this class you can create an ASCII-art image, draw to it, and then print it like so:</p>

<pre><code>int main() {
    // Create a 10x10 character image
    Image image(10, 10);

    // Draw a diagonal line
    for (int i = 0; i &lt; 10; ++i)
        image.at(i, i) = '\\';

    // Print the results to the standard output
    image.print(std::cout);
}
</code></pre>

<p>Now you can rewrite your <code>circle()</code> function to write to a <code>class Image</code>, like so:</p>

<pre><code>void draw_circle(Image &amp;image, double radius, int steps) {
    static const double pi = std::acos(-1);

    for (int i = 0; i &lt; steps; ++i) {
        double phi = i * (2 * pi / steps);
        double x = image.width / 2 + radius * cos(phi);
        double y = image.height / 2 + radius * sin(phi);
        image.at(x, y) = 'X';
    }
}
</code></pre>

<p>And then you can draw 3 circles with increasing radii like so:</p>

<pre><code>int main() {
    Image image(40, 40);

    for (auto radius: {8, 12, 16})
        draw_circle(image, radius, 12);

    image.print(std::cout);
}
</code></pre>

<p>Of course, this will look like an ellipse on the screen, so you will have to find some way to correct the aspect ratio. You could create a <code>draw_ellipse()</code> function which takes two parameters for the radius, one for the horizontal direction and another for the vertical.</p>
    </div>