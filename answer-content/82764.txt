<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A question is hard to answer when the correct answer is, that <strong>it is good as it is</strong>.</p>

<p>Indeed the typical unit test framework implementation uses the <code>__FILE__</code> and the <code>__LINE__</code> macros.</p>

<p>In Qt it is implemented a very similar way as you did:</p>

<pre><code>#define QVERIFY(statement) \
do {\
    if (!QTest::qVerify((statement), #statement, "", __FILE__, __LINE__))\
        return;\
} while (0)
</code></pre>

<p>In Boost Test it is a little more complex, but the concept is the same:</p>

<pre><code>#define BOOST_TEST_PASSPOINT()                              \
::boost::unit_test::unit_test_log.set_checkpoint(           \
    BOOST_TEST_L(__FILE__),                                 \
    static_cast&lt;std::size_t&gt;(__LINE__) )                    \

#define BOOST_CHECK_IMPL( P, check_descr, TL, CT )                  \
do {                                                                \
    BOOST_TEST_PASSPOINT();                                         \
    BOOST_TEST_TOOL_IMPL( check_impl, P, check_descr, TL, CT ), 0 );\
} while( ::boost::test_tools::dummy_cond )                          \

#define BOOST_CHECK( P ) \
BOOST_CHECK_IMPL( (P), BOOST_TEST_STRINGIZE( P ), CHECK, CHECK_PRED )
</code></pre>

<p>No matter how hard I think about it, I always get to the conclusion, that if you want to do it without these macros you will need some kind of <strong>stack trace</strong> (<a href="https://msdn.microsoft.com/en-us/library/system.environment.stacktrace%28v=vs.110%29.aspx" rel="nofollow noreferrer">like in C#</a>). But as C++ does not support reflections using these macros is your only option.</p>

<p>The one thing I would change in your code is adding the <code>do { ... } while (0)</code> guard around your macro (<a href="https://stackoverflow.com/questions/923822/whats-the-use-of-do-while0-when-we-define-a-macro">here is why</a>).</p>
    </div>