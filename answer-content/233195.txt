<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could condense the code using <em>or-eing</em> conditions that match the same credit gain:</p>

<pre><code>    if (diceRoll1 == 6 &amp;&amp; diceRoll2 == 6 &amp;&amp; diceRoll3 == 6) {
        printf("Congratulations! You won 90 credits.\n");
    }

    if ((diceRoll1 == 5 &amp;&amp; diceRoll2 == 5 &amp;&amp; diceRoll3 == 5) || 
        (diceRoll1 == 4 &amp;&amp; diceRoll2 == 4 &amp;&amp; diceRoll3 == 4) || 
        (diceRoll1 == 3 &amp;&amp; diceRoll2 == 3 &amp;&amp; diceRoll3 == 3) ||
        (diceRoll1 == 2 &amp;&amp; diceRoll2 == 2 &amp;&amp; diceRoll3 == 2) ||
        (diceRoll1 == 1 &amp;&amp; diceRoll2 == 1 &amp;&amp; diceRoll3 == 1)) {
        printf("Congratulations! You won 40 credits.\n");
    }
</code></pre>

<blockquote>
  <p>I have not implemented all of the rules and the ones I have done can probably be done in a better way?</p>
</blockquote>

<p>You could also make this code more flexible and extendible using function pointers and an array of these:</p>

<pre><code>typedef int (*fn_gamerule(int,int,int));

int gamerule1(int,int,int);
int gamerule2(int,int,int);

// ...

fn_gamerule gamerules[] = { gamerule1, gamerule2, NULL };

// ...
int credits = 0;
for(fn_gamerule rule = gamerules; rule != NULL; ++rule) {
    credits = rule(diceRoll1m,diceRoll2,diceRoll3);
    if(credits  &gt; 0) {
        printf("Congratulations! You won %d credits.\n",credits);
    }
}

// ...

int gamerule1(int dr1,int dr2,int dr3) {
    if(dr1 == 6 &amp;&amp; dr2 == 6 &amp;&amp; dr3 == 6) {
       return 90;
    }
    return 0;
}

int gamerule2(int dr1,int dr2,int dr3) {
    if ((dr1 == dr2 &amp;&amp; dr2 == dr3) &amp;&amp;
        (dr1 &gt;= 1 &amp;&amp; dr1 &lt; 6)) {
         return 40;
    }
    return 0;
}
</code></pre>

<p>Designing your code in that way will also help you to keep track of the <em>credits</em> in repeated iterations of the dice roll.</p>

<pre><code>int rolldice_rule(int,int,int);
int allsame_rule(int,int,int);

// ...

fn_gamerule gamerules[] = { rolldice_rule, allsame_rule, NULL };

int total_credits = 0;
do {
    printf("\nDo you want to play? (y/n): ");
    scanf_s("%c", &amp;yn);
    // getchar(); &lt;= confusing user ecperience, not necessary

    if (yn == 'n') {
       printf("Coward!");
       // getchar(); &lt;= confusing user ecperience, not necessary
       return 0;
    }

    diceRoll1 = (rand() % 6) + 1;
    diceRoll2 = (rand() % 6) + 1;
    diceRoll3 = (rand() % 6) + 1;

    printf("Your dices are %d %d %d \n", diceRoll1, diceRoll2, diceRoll3);

    int credits = 0;
    for(fn_gamerule rule = gamerules; rule != NULL; ++rule) {
        credits = rule(diceRoll1m,diceRoll2,diceRoll3);
        if(credits  &gt; 0) {
            printf("Congratulations! You won %d credits.\n",credits);
        } 
        total_credits += credits;
    }
} while (yn != 'n');

// ...

int rolldice_rule(int dr1,int dr2,int dr3) {
    return -10;
}

int allsame_rule(int,int,int) {
    if (diceRoll1 == diceRoll2 == diceRoll3) {
        switch(diceRoll1) {
            case 6:
                return 90;
            default:
                return 40;
        }
    }
    return 0;
}
</code></pre>
    </div>