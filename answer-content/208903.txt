<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Short circuit!</h2>

<p>Check the lengths first. In the case that they aren't the same, you don't need to incur a linear pass for an equality check.</p>

<h2>Don't check the hashmap for an entry!</h2>

<p>It's good that you know <code>m(c)</code> can throw if there's a missing key; luckily, 
 you can use <code>Map#getOrElse</code> and provide a default -- in this case, it makes sense to provide a 0 default since you haven't seen the character.</p>

<h2>Compare the counts from each string directly!</h2>

<p>I find the subtracting of the counts to be very confusing. You'll need to remove keys from the counter if any of the values go to 0, which lowers the signal to noise ratio of the code. It's better to just build a second counter.</p>

<hr>

<p>If you decide to build two counters and compare them, you'll need to do the same fold logic twice. This is really messy to write, so you won't want to do this twice. You may want to <a href="https://danielasfregola.com/2015/06/08/pimp-my-library/" rel="nofollow noreferrer">pimp out the String class</a>. You can do this in the following way:</p>

<pre><code>implicit class Counter(s: String) {
  def countCharacters: Map[Char, Int] = 
    s.foldLeft(Map.empty[Char, Int])({ case (acc, c) =&gt;
      acc + (c -&gt; (acc.getOrElse(c, 0) + 1))
    })
}
</code></pre>

<p>You can see it in action here:</p>

<pre><code>scala&gt; "hello".countCharacters
res0: Map[Char,Int] = Map(h -&gt; 1, e -&gt; 1, l -&gt; 2, o -&gt; 1)
</code></pre>

<p>So now you can compare the counts with a clean, non-repeated API.</p>

<p>Pulling this all together, you can write:</p>

<pre><code>object ValidAnagram extends App {

  // when I see a string, implicitly construct a `Counter` instance
  implicit class Counter(s: String) {
    // this will be "added" to the String API via an implicit class construction
    def countCharacters: Map[Char, Int] = 
      s.foldLeft(Map.empty[Char, Int])({ case (acc, c) =&gt;
        acc + (c -&gt; (acc.getOrElse(c, 0) + 1))
      })
  }

  def validAnagram(s1: String, s2: String): Boolean =
    if (s1.length != s2.length) false
    else if (s1 == s2) true
    else s1.countCharacters == s2.countCharacters


  println(validAnagram(args(0), args(1)))
}
</code></pre>
    </div>