<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Easy to use correctly, hard to use incorrectly</h2>

<p>People who read my reviews probably got fed up with my suggestions about usability, but this one looks easy to fix. Current <em>correct usage:</em></p>

<ol>
<li><p>Start timer where I want</p></li>
<li><p>Stop timer where I want (do I want to?)</p></li>
</ol>

<p>What I (personally) would expect:</p>

<ol>
<li>Start timer where I want and let destructor handle it</li>
</ol>

<h2>Fix</h2>

<p>Implement something like <code>std::lock_guard</code>:</p>

<pre><code>template &lt;typename Timer&gt;
requires /*if you have extremely new compiler, check for lockability*/
class timer_guard {
    Timer&amp; instance;
public:
    timer_guard(Timer&amp; instance, std::string_view function_name):
           instance(instance)
    {
        instance.start(function_name);
    }

    ~timer_guard() {
        instance.stop();
    }
}
</code></pre>

<h2>Code Review:</h2>

<h2>Use aggregate initialization if types don't repeat often</h2>

<pre><code>ExecTimeData newSection;
newSection.SectionName = sectionName;
newSection.TokenID = _sectionNumber++;
newSection.SectionStartTime = std::chrono::high_resolution_clock::now();
</code></pre>

<p>This piece could use aggregate initialization:</p>

<pre><code>ExecTimeData newSection{/*values...*/};
</code></pre>

<h2>Use better library for string formatting</h2>

<p>I didn't count exactly, but it looks like 20-25 lines just for the output. And they don't look pretty. </p>

<h2>Use <code>const std::string&amp;</code> or <code>std::string_view</code> for read-only view into string</h2>

<p>Although not equivalent, before C++17 const reference is the only way to go.</p>

<h2>Use default values</h2>

<p>In the log summary, it looks like using something along the lines of <code>std::ostream&amp; os = std::cout</code> would be better, as it makes it harder to use incorrectly.</p>

<h2>Don't perform lossy conversions unless required</h2>

<pre><code>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;
</code></pre>

<p>It is better to give user default resolution and let them choose in other cases. Performing lossy conversions is like throwing away part of the data.</p>

<h2>Consider reading more about problem that the code solves</h2>

<p>Microbenchmarks are usually guarded by some mechanism which makes the start and end execution points observable (e.g. puts the timed code in sort of a barrier). Benchmarks of more sophisticated functionality usually don't care about such nuances. Benchmarks are often comparative, e.g. one solution/implementation is compared to other(s). Algorithms that process some data are usually fed with varying sizes and distributions. Some benchmarks might want better timing resolution, e.g. <code>std::nanoseconds</code>. There are plethora of other usage contexts.</p>
    </div>