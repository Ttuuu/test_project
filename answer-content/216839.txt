<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p>You don't check for the password in the <code>login</code> member function. This is the least secure user credential system I've ever seen :)</p></li>
<li><p>You have some unnecessarily verbose comments in your code, e.g.</p>

<pre><code>//Include Statements
//Class Body
//Constructor
//Class Functions
user.clear(); //basically null
</code></pre>

<p>Just remove them. Comments are hard to maintain and should be used with care, i.e., only when a piece of code is too hard to understand from the code structure and naming of variables, types and functions. </p></li>
<li><p>You define the constructor <code>Bank::Bank()</code> inside the class definition, but all other member functions outside of the class. Not that this is a severe issue, but I don't think there is a reason for treating the special member function differently with this regard, so consider unifying this.</p></li>
<li><p>Use in-class member initializers, this is an approach that works consistently across constructor overloads and is blessed by the core guidelines <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c48-prefer-in-class-initializers-to-member-initializers-in-constructors-for-constant-initializers" rel="noreferrer">C.48</a>.</p>

<pre><code>class Bank {
    int attempts = 0;
    bool lockedOut = false;

    // ...
};
</code></pre>

<p>Definitely don't assign them in the constructor body, see also Item 4 in Scott Meyer's Effective C++ ("Make sure that objects are initialized before they're used").</p></li>
<li><p>Try to avoid the use of getter member functions like <code>getCurrentUser()</code> if possible. If you do need one, prefer <code>const</code>-qualified member functions that return a <code>const</code> reference or something similar to avoid unnecessary copies. If C++17 is available, e.g.</p>

<pre><code>std::string_view getCurrentUser() const;
</code></pre></li>
<li><p>The state that no user is currently logged in is represented by an empty user name, you hence rely on some <code>null</code>-like state of a type. This is possible, but consider replacing it with something more expressive, e.g.</p>

<pre><code>bool hasCurrentUser() const;
</code></pre>

<p>or (again, with C++17)</p>

<pre><code>std::optional&lt;std::string_view&gt; getCurrentUser() const;
</code></pre></li>
<li><p>You also have unnecessary copies here:</p>

<pre><code>bool login(std::string username, std::string password);
</code></pre>

<p>Pass <code>const std::string&amp;</code> or <code>std::string_view</code> instead.</p></li>
<li><p>Prefer returning early from a function if you need to check a precondition at the top of it:</p>

<pre><code>bool Bank::login(std::string username, std::string password) {
    if(lockedOut)
       return;

    // The rest...
}
</code></pre>

<p>This is more readable and requires less indentation.</p></li>
<li><p>Consider replacing <code>attempts += 1;</code> by <code>++attemps;</code>. This is clearly not a severe issue, but it's a good attitude to minimize the number of magic numbers in your code (<code>1</code> isn't that magic, but still...).</p></li>
<li><p>This definitely comes closer to a magic number:</p>

<pre><code>if(attempts == 3)
</code></pre>

<p>Prefer adding a <code>static constexpr maxLoginAttempts = 3;</code> to your class. In addition, <code>if (attempts &gt; maxLoginAttempts)</code> seems a bit more robust to me if you change some implementation details afterwards.</p></li>
<li><p>Avoid too many level of nested branches, in my opinion, this is already too much:</p>

<pre><code>if(!lockedOut) {
    if(user.empty()) {
        for(int i = 0; i &lt; usernames.size(); i++)
           // ...

        // ...
    }

    // ...
}
</code></pre>

<p>You can easily fix this by moving parts of a member function into a new member function.</p></li>
<li><p>Use standard <code>&lt;algorithm&gt;</code>s when appropriate. Looking for a <code>std::string</code> in a <code>std::vector&lt;std::string&gt;</code> is a prime example for when it's appropriate:</p>

<pre><code>if (std::find(usernames.cbegin(), usernames.cend(), username) != usernames.cend()) {
   user = username;
   return true;
}
</code></pre></li>
<li><p>Only one user is able to login to your bank at a time, and the only way to add new users that are able to login is to modify the internals of the <code>Bank</code> class. Also, passwords are stored in plain text, and if the number of users grow, a <code>std::vector</code> might not be the best choice for looking up hash-able user identification tokens (like the username). I am aware that this is an exercise, just as a hint where you could go from here.</p></li>
</ul>
    </div>