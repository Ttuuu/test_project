<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Answers to your questions</h1>
<blockquote>
<p>What can I improve about this code in order to be production-ready? I'm not worried about security but about errors that could occur.</p>
</blockquote>
<p>So make a list of errors that you expect could occur, and think about what should happen in each case. For example, just looking at <code>main()</code>, I can think of:</p>
<ul>
<li>Loading clients fails</li>
<li>Loading movements fails</li>
<li>Creating the movement report file fails</li>
<li>Sending the email fails</li>
</ul>
<p>Is it important to know why something fails exactly? If so make it more specific. For example:</p>
<ul>
<li>Loading client fails:
<ul>
<li>Could not connect to the database</li>
<li>Could not run the query</li>
</ul>
</li>
</ul>
<p>What should happen if any of those errors occur in production? If you know the network is flaky, you could for example retry connecting to the database a few times before giving up. But if the query fails there is most likely not much you can do.</p>
<blockquote>
<p>What exceptions should I catch? I feel overwhelmed about exceptions because I feel that there are a lot of exceptions that one can consider.</p>
</blockquote>
<p>There are many places where exceptions can be thrown, and besides exceptions there are also function that do not throw an exception but just return a value that indicates that an error occurred. The advantage of exceptions is that if you don't catch them, the program will abort instead of doing something unexpected.</p>
<p>As the name implies, exceptions are normally used to signal that something unexpected has happened. If the system runs out of memory, or it fails to open a file that you expect to exist, there is most likely not much you can do at that point, and letting the program abort is the right thing to do. However, there are situations where you can do better than that. It is up to you to decide what exceptions would be beneficial to catch.</p>
<p>Another nice thing about exceptions is that you do not have to catch them in the same function as the exception is generated. So you don't necessarily have to add exception handling all over the place, but you can defer it to a function higher up the call stack.</p>
<p>The code you showed looks like it does a one-off operation, loading some data, and generating a single email based on the data. You could decide to just not handle exceptions at all, and then if any error occurred, the email would just not be sent. But you could do a bit better than that: handle exceptions from all database access and file loading, and in the exception handler send an email notifying the recipient that an error occurred and that there is no list of pallet movements available today due to an error. Alternatively, you could send a notification to a technician so they can investigate why the code failed. Handling this would look like so:</p>
<pre><code>def main():
    try:
        yesterday = date.today() - timedelta(days=1)
        yesterday = yesterday.strftime(f'%d-%m-%Y')
        local_folder = os.path.dirname(os.path.abspath(__file__))
        clients = load_clients()
        movements = load_movements(clients)
        filename = load_file(movements, yesterday, local_folder)
    except:
        send_error_email()
        raise # Causes the program to abort anyway

    send_email(filename, yesterday, local_folder)
</code></pre>
<p>I think that's more useful than just printing the exception and exitting the program normally. For example, if your program is run as a cron job, then handling the exception in <code>send_email()</code> like you did would just hide errors.</p>
<blockquote>
<p>What else should I do? Should I do unit testing for this?</p>
</blockquote>
<p>Yes, you should test your code, regardless of whether you handle exceptions or not. Your test cases should test whether the code performs as required in all the scenarios you expect can happen. It's perfectly fine to not handle exceptions if the requirement is that your code just aborts in case of any error.</p>
<h1>Give <code>load_file()</code> a better name</h1>
<p>The function <code>load_file()</code> does not load a file like its name implies, but rather creates a new file. The name <code>create_file()</code> would already be better. But it is still quite generic. What kind of file does it generate? Maybe <code>create_movement_report()</code> would be even better.</p>
    </div>