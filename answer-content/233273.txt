<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some things that may help you improve your code.  I'll start with some details and then move on to the larger design issues.</p>

<h2>Make sure all paths return a value</h2>

<p>The <code>Citizen::setRating()</code> and <code>Citizen::postIdea()</code> and many other functions claim to return <code>bool</code> but don't return anything.</p>

<h2>Don't abuse <code>using namespace std</code></h2>

<p>Especially in a very simple program like this, there's little reason to use that line.  Putting <code>using namespace std</code> at the top of every program is <a href="http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice">a bad habit</a> that you'd do well to avoid.  </p>

<h2>Keep internal class details <code>private</code></h2>

<p>It's best to keep the internals of a class private to reduce linkage among objects to only what they need.  This simplifies the interface and therefore the maintenance.  Right now, for example, one could easily bypass the <code>Manifesto::addIdea()</code> function and add 300 ideas directly to the structure.  That's poor encapsulation.</p>

<h2>Avoid using pointers</h2>

<p>Modern C++ doesn't really need pointers very often.  It's usually better to either use a smart pointer, such as <a href="http://en.cppreference.com/w/cpp/memory/unique_ptr" rel="nofollow noreferrer"><code>std::unique_ptr</code></a> or simply use objects or object references.  For this code, which is used depends very much on the class design which is the subject of some suggestions below.</p>

<h2>Avoid <code>new</code> and <code>delete</code></h2>

<p>If you don't use pointers, you have much less reason to use <code>new</code> and <code>delete</code>.  But if you do use <code>new</code>, each instance of <code>new</code> must be matched to a corresponding <code>delete</code> or your code will leak memory.  Often the best way to make sure no memory is leaked is to put <code>delete</code> in a destructor.</p>

<h2>Rethink your class design</h2>

<p>One way to approach class design is to begin with a written description.  Examining the description, <em>nouns</em> suggest objects and <em>verbs</em> suggest methods.  You have already identified <code>Citizen</code>, <code>Idea</code>, <code>Manifesto</code> and <code>Election</code> as potential classes and <code>Candidate</code> as a potential class.  Each of the suggestions below will discuss a specific way to approach the class design.  </p>

<h2>Decide what the code should do</h2>

<p>It seems to me that the first thing to decide is how you want to use this code.  Given the title of the question, I would expect that everything should happen in the context of an <code>Election</code> which suggests to me that rather than directly manipulating <code>Idea</code> or <code>Citizen</code> objects, <code>main()</code> should only have a single <code>Election</code> object and do everything within that context.  That leads directly to the next suggestion.</p>

<h2>Decide what each object needs to do</h2>

<p>It is odd to me that an <code>Election</code> object doesn't actually seem to include voting but does seem to include sending mail.  Perhaps this is only intended to represent a particular phase of the election which involves nominations of candidates and the dissemination of ideas.  Because of the particular features of the class, I'm going to infer that it's intended to run a <em>simulation</em> of that particular phase of an election rather than being software that is used for an actual election.  This is an important distinction because it suggests a very different pattern of use.  I'm going to assume that it's a simulation for all of the suggestions below, but the general approach is applicable either way.</p>

<h2>Decide on sequence and responsibility</h2>

<p>The written description includes sentences like this one:</p>

<blockquote>
  <p>Contenders can post at most 3 ideas in their manifesto and low quality contenders are dropped from the election (ie if they have at least 1 idea which has rating 5 from more than 3 people).</p>
</blockquote>

<p>We can glean many useful things from this particular sentence.  First, only a <strong>contender</strong> can post an <strong>idea</strong> to their own <strong>manifesto</strong>.  This seems to imply that the <code>Manifesto</code> should be publicly visible, but only managed by a contender, suggesting a <code>private</code> class with read-only <code>public</code> access.  Second it says that a <strong>contender</strong> might be dropped from the <strong>election</strong> based on <strong>idea</strong> ratings.  This implies a sequence but fails to spell out what that sequence is.  That is, clearly the ideas must be rated before contenders are culled, and that ideas must be posted before they can be rated.  We also know from the description that contenders must be nominated before they are changed from <strong>citizens</strong> to <strong>candidates</strong>.  This fuzziness about sequence is why this code is not yet well designed.  Are there distinct phases such as nomination, manifesto generation, voting, culling?  Or can any action be taken at any time?  Further what happens to the already rated ideas if a candidate is culled from the election and loses contender status?  Also, it is not explicitly stated <em>which entity</em> does the culling of candidates.  In general passive verbs are a sign of a vague or incomplete description.</p>

<h2>Start from the public interface</h2>

<p>After the sequence and responsibilities are clarified, it is often useful to start with a public interface for a class.  For example, I would say that if we're trying to run a simulation, what do we want from that simulation?  What are we trying to learn or see?  Do we want to, say, derive an equation that predicts the number of emails sent given the size of the election and number of candidates?  Or maybe we just want the detailed chronology to do a more open ended investigation.  It's good practice to define the minimally sufficient public interface for the main class or classes before working on the details of implementation.</p>

<h2>Don't let technology drive the solution</h2>

<p>The very first sentence in the description is this:</p>

<blockquote>
  <p>I am trying to build an OOP design for an election system.</p>
</blockquote>

<p>It seems to me that there are some potential problems with that.  First, is the goal to create "an OOP design" or actual working code?  Second, it's not necessarily true that OOP is the right approach for every problem.  It seems to me that the problem definition is still too vague to assume that.  Third, "an election system" is ambiguous as noted above because it actually seems that perhaps it's a real election, or maybe it's a simulation and that it's apparently only a particular subset of election activities.  I'm sure that seems overly picky about one sentence, but I find that the greater clarity one can achieve for a succinct problem statement, the better the subsequent design and code.  It's worthwhile trying to clarify before investing a lot of time in design or coding.</p>

<h2>Focus on the user</h2>

<p>Instead of starting with a code-centric approach, think of the <em>user</em> instead.  "Who will be using the software and what will they want from it?" is much more likely to guide a successful design and implementation than thinking about code.</p>
    </div>