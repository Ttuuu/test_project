<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd suggest that the most important things to test are the constructor, and the <code>update()</code> function. These functions do more complicated things, and have some (currently hidden) requirements that we need to be careful with. </p>

<p>The other functions are mainly setter / getter functions (which we could arguably skip testing entirely), or only easily testable by visual inspection (<code>setPosition()</code>, <code>draw()</code>).</p>

<hr>

<p>When testing the constructor, we should think about the following:</p>

<ul>
<li><p>The label string: is an empty string ok? Is there a max string size? Do we need to do something special with the text (cut it off, scale it down, or just render the whole thing?).</p>

<p>Assuming the constructor already does what we want, we don't actually need to touch the constructor code. However, adding a test case with an empty string and a test case with a long string is a good idea. This documents the behavior, and proves that it works.</p></li>
<li><p><code>numUpgrades</code> is used in calculations in the constructor. If it's zero, we'll divide by zero! Also, should there be an upper limit (e.g. a global <code>max_upgrades</code>)?</p>

<p>We can at least guard against a zero argument in the constructor code by throwing an exception, <code>assert</code>ing, terminating the program, or breaking to the debugger. And we should then add a test case to document the behavior. (GTest has <code>ASSERT_DEATH</code> / <code>EXPECT_DEATH</code> and <code>ASSERT_THROW</code> / <code>EXPECT_THROW</code> for such things).</p></li>
</ul>

<hr>

<p>The <code>input</code> test looks fine, but to be comprehensive we should also test with both parameters resulting in a negative result, i.e.:</p>

<pre><code>ASSERT_FALSE(button.input(sf::Vector2f(500.F, 900.F), false));
</code></pre>

<hr>

<p>For <code>setPosition()</code> there's not a whole lot else we can test. Checking the position of the label and indicators would just be typing that same code again, which isn't very helpful.</p>

<hr>

<p>We can definitely test the <code>update()</code> function. Looking at each parameter in turn:</p>

<ul>
<li><p>For <code>mousePos</code>, any valid float is ok (checking for NaN / infinity is probably overkill). So we just need to test the logic that uses it (i.e. cases where the mouse is inside and outside of the button).</p></li>
<li><p>For <code>currentLevel</code>, we need to establish valid bounds. What if it's zero? What if it's equal to <code>indicatorSize</code>? What if it's greater than indicator size (doing <code>indicators[currentLevel]</code> seems like a bad idea...)? So it looks like we need to add some <code>assert</code>s to the code, and test these cases.</p></li>
<li><p>For <code>canAfford</code>, we just need to test the logic.</p></li>
</ul>

<p>To check the logic, we need access to the results, so we might add a <code>std::vector&lt;sf::RectangleShape&gt; const&amp; getIndicators() const;</code> function.</p>

<p>It would also be useful to define constants for the colors, e.g. <code>current_affordable_upgrade_color</code> <code>current_unaffordable_upgrade_color</code>, etc.</p>

<hr>
    </div>