<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Data Structure</h2>

<p>You don't have a <em>Tree</em> of nodes; you have a <em>List</em> of nodes which describes a tree-like structure in a serialized format.  This is fine for storing the tree of nodes in a flat database table, but it is not a <em>Tree</em>.</p>

<p>Traversing a <em>Tree</em> can be done in <span class="math-container">\$O(N)\$</span> time.  Your Depth-First-Search traversal of the <em>List</em> of nodes requires searching the list of nodes repeatedly, once for every node in the list.  This makes the algorithm <span class="math-container">\$O(N^2)\$</span>.</p>

<p>To properly make your tree, you'd need each node to have its own (possibly empty) list of child nodes:</p>

<pre><code>class Node {
    Node parent = null;
    List&lt;Node&gt; children = new ArrayList&lt;&gt;();
}
</code></pre>

<p>A depth first search of this tree could then be performed in <span class="math-container">\$O(N)\$</span> time.</p>

<h2>Code Review</h2>

<p><code>tree1</code> and <code>newTree</code> don't reflect a consistent naming strategy.  <code>tree1</code> and <code>tree2</code>, or <code>oldTree</code> and <code>newTree</code> would be better.</p>

<p>You use <code>tree1.get(0)</code> four times, to get the root node of the tree.  Why not store the root node in a variable?</p>

<pre><code>Node root = tree1.get(0);
</code></pre>

<p>Is <code>tree1.get(0)</code> the root node?  Always?  It looks like you make no assumptions of the order of the nodes in the <code>List&lt;Node&gt;</code> structure.  You should probably search for the node with the <code>null</code> parent identifier:</p>

<pre><code>Node root = tree1.stream()
                 .filter(node -&gt; node.parentId == null)
                 .findFirst()
                 .get();
</code></pre>

<p>Will the tree always have a root node?  If your processing removes all node, and then you call <code>.get(0)</code> on the resulting list, you'll get an <code>IndexOutOfBoundsException</code>.</p>

<p>You repeat this code:</p>

<pre><code>    if(tree1.get(0).rank != 1 || tree1.get(0).getNumberOfValidSubtrees() != 0) {
        newTree.add(tree1.get(0));
</code></pre>

<p>here:</p>

<pre><code>        if(child.rank != 1 || child.getNumberOfValidSubtrees() != 0) {
            // ...
            newTree.add(child);
</code></pre>

<p>If your <code>traverse()</code> method actually operated on <code>parent</code> instead of the parent's <code>children</code>, you wouldn't need to duplicate code.</p>

<p>Also, if the <code>traverse()</code> method operated on the <code>parent</code>, it could maintain a count of the subtrees, and you wouldn't need to pollute the <code>Node</code> class with <code>numberOfValidSubtrees</code>.</p>

<hr>

<p>Moving on to <code>class Node</code>:</p>

<p>Why is the <code>numberOfValidateSubtrees</code> member <code>private</code>, but none of the other members (<code>id</code>, <code>parentId</code>, <code>rank</code>) are?</p>

<p>Should <code>id</code> and <code>parentId</code> be <code>final</code>?  How about <code>rank</code>?</p>

<p>Inconsistent <code>this.</code> usage: You do not need it in <code>getNumberOfValidSubtrees()</code> and in <code>incrementValidSubtree()</code> methods.  <em><strong>OR</strong></em>, you should also use it in <code>getId()</code> and <code>toString()</code>.</p>

<p>You can remove the <code>this.numberOfValidSubtrees = 0;</code> initialization by providing the initial value in the declaration:</p>

<pre><code>private int numberOfValidSubtrees = 0;
</code></pre>

<h2>Suggestions</h2>

<p>Will it always be <code>rank == 1</code> nodes with no subtrees that are deleted?  A more elegant solution would be to allow a <code>Predicate&lt;Node&gt;</code> argument which would return <code>true</code> if a node was to be deleted.</p>

<pre><code>static boolean isRank1WithNoSubtree(Node node) {
    return node.rank == 1  &amp;&amp;  node.children.isEmpty();
}

static void removeDFS(Predicate&lt;Node&gt; predicate) {
    // ...
}

public static void main(String[] args) {
    // ...
    removeDFS(Main::isRank1WithNoSubtree);
    // ...
}
</code></pre>

<p>But there are multiple ways of traversing a tree.  Perhaps you would be better with defining methods which traverse the tree, each which take a <code>Consumer&lt;Iterator&lt;Node&gt;&gt; action</code> argument, to call on each tree node as it is visited.</p>

<pre><code>static void removeIfRank1(Iterator&lt;Node&gt; iter) {
    Node node = iter.next();
    if (node.rank == 1  &amp;&amp;  node.children.isEmpty())
        iter.remove();
}

static void traverseDFS(Consumer&lt;Iterator&lt;Node&gt;&gt; action) {
    // ...
}

public static void main(String[] args) {
    // ...
    traverseDFS(Main::removeIfRank1);
    // ...
}
</code></pre>

<h2>Node -vs- Tree</h2>

<p>Personally, I like to draw a distinction between a Node and a Tree.  A tree may be a collection of nodes, each node optionally containing more child nodes.  But the root node is <strong>NOT</strong> the tree.  The Tree itself can contain additional information about itself, such as the number of nodes it contains.  The Tree class would have methods for adding nodes, removing nodes, traversal, filtering, etc., instead of having to tack those methods on to either the <code>Node</code> class or the <code>Main</code> class.  Eg):</p>

<pre><code>class Tree&lt;E&gt; {

    class Node&lt;E&gt; {
        Node&lt;E&gt; parent = null;
        List&lt;E&gt; children = new ArrayList&lt;E&gt;();
        E data;

        Node(E e) {
            data = e;
        }
    }

    Node&lt;E&gt; root = null;
    int numNodes = 0;

    void traverseDFS(Consumer&lt;Iterator&lt;Node&gt;&gt; action) {
        // ...
    }
}
</code></pre>
    </div>