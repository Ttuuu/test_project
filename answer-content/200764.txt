<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>The Big Issue</h2>

<p>One of the biggest things about smart pointers is that they guarantee deletion of the pointer. <strong>EVEN</strong> when exceptions happen. My main problem here is that your constructor may leak the pointer if it fails to initialize correctly.</p>

<pre><code>template &lt;class T&gt;
SmartPtr&lt;T&gt;::SmartPtr(T* iObject):
    _refCount(new RefCount()),       // This can throw.
    _ptr(iObject)
{   
    this-&gt;_refCount-&gt;AddRef();
}
</code></pre>

<p>If the creation of the <code>_refCount</code> object fails you will leak the pointer. You need to guarantee that the pointer does not leak:</p>

<pre><code>SmartPtr&lt;T&gt;::SmartPtr(T* iObject)
try                               // Add a try block
    :_refCount(new RefCount())
    ,_ptr(iObject)
{   
    this-&gt;_refCount-&gt;AddRef();
}
catch(...)
{
    delete iObject;    // If there is an exception make sure the object is deleted.
    throw;             // Then re-throw the exception.
}
</code></pre>

<h2>Minor Missing Functions</h2>

<p>The main missing things I see are:</p>

<pre><code> T*  get();            // Sometimes its nice to just get the pointer.
 operator bool();      // Nice when you want to simply check the smart
                       // pointer has something in a boolean context.

 SmartPtr&lt;Stuff&gt;  data = getSmartPointer();
 if (data) {
     data-&gt;doWork();   // Need to check there is a pointer in the
 }                     // object before calling doWork().
</code></pre>

<h2>Constructor Problems</h2>

<h3>Explicit</h3>

<p>Your one parameter constructor should be <code>explicit</code>. Think of this situation.</p>

<pre><code> void doStuff(SmartPtr&lt;Stuff&gt; work)
 {
      if (work) {
          work-&gt;doWork();
      }
 }
</code></pre>

<p>Looks simple enough. When you call the function you get another reference counted version of the pointer and thus it is simple and safe to use.</p>

<p>But what happens when I do this:</p>

<pre><code>int main()
{
    Stuff*  work = new Stuff;
    doStuff(work);
    work-&gt;moreActions();
    delete work;
}
</code></pre>

<p>This code compiles. But the call to <code>doStuff()</code> results in delete being called on the <code>work</code> object. Even though you though it was safe to call (as you are making a copy of smart pointer).</p>

<p>The trouble is that the compiler has converted the Stuff* to a SmartPtr which is deleted in this scope.</p>

<h3>What About nullptr</h3>

<p>Your object does not accept a nullptr!</p>

<pre><code> SmartPtr&lt;Stuff&gt;  value = nullptr;  // fails to compile.
</code></pre>

<p>It does not look like a major problem. But when you start using templatized code where things are initialized and your type can be swapped in then it becomes an issue as your type can not be used.</p>

<h3>What About Derived Types.</h3>

<p>On of the major things about C++ is derived types with more functionality.</p>

<pre><code>Derived*    x = new Derived;
Base*       y = x;
</code></pre>

<p>The same should work with smart pointers.</p>

<pre><code>SmartPtr&lt;Derived&gt;  x = new Derived;
SmartPtr&lt;Base&gt;     y = x;           // fails to compile.
</code></pre>

<p>This will be a common in most C++ code (not exactly like this). But this functionality is really needed.</p>

<h2>Make Shared</h2>

<p>One of the things the standard builders found was that each shared pointer required the allocation of <strong>TWO</strong> objects. One for the thing and one for the counter.</p>

<p>They remedied this by introducing <code>std::make_shared&lt;T&gt;()</code>. This does one allocation that allocates the object and the counter inside the same space thus reducing the overall overhead of the object.</p>

<h2>Further Reading</h2>

<p>I cover a lot of these details and more in some articles I wrote:</p>

<p><a href="http://lokiastari.com/series/" rel="noreferrer">Series</a><br>
<a href="http://lokiastari.com/blog/2014/12/30/c-plus-plus-by-example-smart-pointer/index.html" rel="noreferrer">Smart-Pointer - Unique Pointer</a><br>
<a href="http://lokiastari.com/blog/2015/01/15/c-plus-plus-by-example-smart-pointer-part-ii/index.html" rel="noreferrer">Smart-Pointer - Shared Pointer</a><br>
<a href="http://lokiastari.com/blog/2015/01/23/c-plus-plus-by-example-smart-pointer-part-iii/index.html" rel="noreferrer">Smart-Pointer - Constructors</a>   </p>
    </div>