<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Paradigm shift: <a href="https://stackoverflow.com/questions/105311/what-are-table-driven-methods">Table-driven methods</a></h1>
<p>Once logic becomes complex enough, you may find it easier to manage the rules from a data structure than from code. Here's how I picture that working for you here.</p>
<p><em>Disclaimer: I made some assumptions about your business processes that may not be correct. Definitely review this code for correctness, and maybe rewrite it so that it makes more sense to <strong>you</strong>.</em></p>

<pre><code>// For each data field we care about, at what level do various
// conditions on that field become available?
const LEVEL_REQUIREMENTS = [
    ({description}) =&gt; {
        if (description.length &gt;= 80) return 5; // or maybe Infinity?
        if (description.length &gt;= 50) return 4;
        if (description.length &gt;= 30) return 3;
        if (description) return 2;
        return 0;
    },
    ({certifications}) =&gt; {
        if (certifications.length &gt; 5) return 5;
        if (certifications.length &gt; 3) return 4;
        if (certifications.length &gt; 0) return 3;
        return 0;
    },
    ({teaser}) =&gt; teaser ? 3 : 0,
    ({social}) =&gt; social.length &gt; 0 ? 3 : 0,
    ({locationLat}) =&gt; locationLat ? 2 : 0,
    ({locationLong}) =&gt; locationLong ? 2 : 0,
    ({workingHourEnd}) =&gt; workingHourEnd ? 2 : 0,
    ({workingHourStart}) =&gt; workingHourStart ? 2 : 0,
];

function validate(data) {
    return LEVEL_REQUIREMENTS.every(levelRequirement =&gt; data.level &gt;= levelRequirement(data));
}

...

providerSchema.pre('save', function(next) {
    if (validate(this)) {
        next();
    } else {
        next(new Error('your current plan does not have this feature'));
    }
});
</code></pre>
<p>Here, <code>LEVEL_REQUIREMENTS</code> is an array of functions (ES6 arrow functions with parameter destructuring, because I think they look nice - feel free to refactor if you disagree, or if you are restricted to ES5). All of the logic for whether a given data blob is allowed at a given plan level is contained within this array.</p>
<p>That reduces the validation function to a simple "Is your level at or above the plan level required to use each feature?"</p>
<p>You may wish to structure the data differently, to make it easier to tell <em>why</em> a given save request was rejected.</p>
<p><em>Hopefully</em> this looks similar to how the rest of the business thinks about this feature; the more closely your code matches their conceptions, the easier it will be for them to communicate requirements to you, for you to respond to their requirements, for those requirements to change, and so on.</p>
    </div>