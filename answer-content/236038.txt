<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have modified yours, (not tested), but I want to share it just to give you some insights, not the best design, but I felt I need to share it. </p>

<pre><code>//singleton class
public sealed class HttpRequestClient
{
    internal enum MethodType
    {
        GET, POST, PUT, DELETE
    }

    internal enum RequestContentType { JSON, XML, x_www_form_urlencoded }

    private string Url;
    // for concurrent requests
    private static HttpWebRequest _request;

    private static HttpRequestClient _client;

    private HttpRequestHeaderBuilder HeaderBuilder;

    private HttpRequestMethodBuilder MethodBuilder;

    //body
    private StringBuilder _stringBuilder;

    public HttpRequestClient(string url)
    {
        if(string.IsNullOrEmpty(url)) { throw new ArgumentNullException(nameof(url)); }

        _client = _client ?? (_client = new HttpRequestClient(url));

        _request = _request = WebRequest.CreateHttp(new Uri(url)); // this will call the main method CreateHttp(Uri url) directly.

        _stringBuilder = new StringBuilder();
    }

    internal struct HttpRequestHeaderBuilder
    {
        internal HttpRequestHeaderBuilder Accepts(string accept) // Set the "Accept" header.
        {
            // do the same for the other methods, always validate the value beofre assign it.
            if (string.IsNullOrEmpty(accept)) { throw new ArgumentNullException(nameof(accept)); }

            _request.Accept = accept;

            return this;
        }

        internal HttpRequestHeaderBuilder ContentType(RequestContentType contentType) // Set the "Content-Type" header.
        {
            switch (contentType)
            {
                case RequestContentType.x_www_form_urlencoded:
                    _request.ContentType = "application/x-www-form-urlencoded";
                    break;
                case RequestContentType.XML:
                    _request.ContentType = "text/xml";
                    break;
                case RequestContentType.JSON:
                    _request.ContentType = "application/json";
                    break;
                default:
                    _request.ContentType = "application/x-www-form-urlencoded";
                    break;
            }

            return this;
        }

        internal HttpRequestHeaderBuilder Cookies(CookieContainer container) // Set a cookie container.
        {
            _request.CookieContainer = container;
            return this;
        }

        internal HttpRequestHeaderBuilder AutoRedirect(bool allow) // Set AllowAutoRedirect
        {
            _request.AllowAutoRedirect = allow;
            return this;
        }

        internal HttpRequestHeaderBuilder Referer(string referer) // Set referer.
        {
            _request.Referer = referer;
            return this;
        }

        internal HttpRequestHeaderBuilder UserAgent(string agent) // Set referer.
        {
            _request.UserAgent = agent;
            return this;
        }

        internal HttpRequestHeaderBuilder Custom(string name, string value) // Set referer.
        {
            _request.Headers.Add(name, value);
            return this;
        }



        internal HttpRequestClient AddBody(IDictionary&lt;string, string&gt; values) =&gt; _client.AddBody(values);

        internal HttpRequestHeaderBuilder AddHeader() =&gt; _client.AddHeader();

        internal async Task&lt;HttpRequestClient&gt; SendAsAsync(MethodType method) =&gt; await _client.MethodBuilder.SendAsync(method);

    }

    private struct HttpRequestMethodBuilder
    {

        internal async Task&lt;HttpRequestClient&gt; SendAsync(MethodType method)
        {
            switch (method)
            {
                case MethodType.GET:
                    return await GetAsync().ConfigureAwait(false);
                case MethodType.POST:
                    return await PostAsync().ConfigureAwait(false);
                default:
                    return await GetAsync().ConfigureAwait(false);
            }
        }

        private async Task&lt;HttpRequestClient&gt; PostAsync() // Takes an object of WebRequestBodyBuilder (which just makes a string like "param1=value1&amp;param2=value2&amp;...."
        {
            byte[] buffer = Encoding.UTF8.GetBytes(_client._stringBuilder.ToString());

            using (var reqStrm = await _request.GetRequestStreamAsync().ConfigureAwait(false)) // Write the body in the request stream.
            {
                reqStrm.Write(buffer, 0, buffer.Length);
            }

            return _client;
        }

        private async Task&lt;HttpRequestClient&gt; GetAsync()
        {
            await _request.GetResponseAsync().ConfigureAwait(false);
            return _client;
        }
    }

    // Not sure why you're treating the body as QueryString, instead of object or plain string as a body could be attach in the url or the request body and both are totally different!
    // Consider serializations from (JSON, XML specifically)
    // you must have at least an overload of object or string to pass the serialized body. 
    internal HttpRequestClient AddBody(IDictionary&lt;string, string&gt; values)
    {
        if (values is null) { throw new ArgumentNullException($"Argument {nameof(values)} can't be null"); }

        var _stringBuilder = new StringBuilder();

        foreach (var pair in values)
        {
            _stringBuilder
                .Append(WebUtility.UrlEncode(pair.Key))
                .Append('=')
                .Append(WebUtility.UrlEncode(pair.Value))
                .Append("&amp;");
        }

        _stringBuilder.Remove(_stringBuilder.ToString().Length - 1, 1); // remove the last &amp;

        return this;
    }

    internal HttpRequestHeaderBuilder AddHeader() =&gt; HeaderBuilder;

    internal async Task&lt;HttpRequestClient&gt; SendAsAsync(MethodType method) =&gt; await MethodBuilder.SendAsync(method).ConfigureAwait(false);



}
</code></pre>

<p>Usage : </p>

<pre><code>var body = new Dictionary&lt;string, string&gt;
{
    {"SomeHeader","SomeValue" }
};

var request = new HttpRequestClient("")
    .AddHeader()
    .ContentType(HttpRequestClient.RequestContentType.x_www_form_urlencoded)
    .Accepts("text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
    .Referer(@"https://website.com/login")
    .AutoRedirect(false)
    .AddBody(body)
    .SendAsAsync(HttpRequestClient.MethodType.POST);
</code></pre>

<p>The <code>SendAsAsync</code> I made it as final call, so when you call it you can't add any header or body. The things that need to be add is to check the existing headers, and body, as you don't want to override the body twice ! you need only one body, so prevent that from happening. While the header is a dictionary, so the keys are unique, if any duplicates, will throw an error by default, so handle that as well. </p>

<p>I used <code>Enum</code> to avoid rewriting the same strings (like content type). </p>

<p>I'm sure there a lot of needed work on it, but as I said, it's just to give you some insights. </p>
    </div>