<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload" rel="nofollow noreferrer">According to MDN</a> and the <a href="https://html.spec.whatwg.org/multipage/browsing-the-web.html#beforeunloadevent" rel="nofollow noreferrer">HTML Living Standard</a>, the most reliable way to write a <code>beforeunload</code> event handler is something like this:</p>

<pre><code>window.onbeforeunload = function (event) {
    if (formmodified) {
       event.preventDefault();  // standard method to trigger prompt
       return event.returnValue = "Are you sure you want to leave this page?";  // compat
    }
};
</code></pre>

<p>or, using <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" rel="nofollow noreferrer"><code>addEventListener()</code></a>:</p>

<pre><code>window.addEventListener('beforeunload', function (event) {
    if (formmodified) {
       event.preventDefault();  // standard method to trigger prompt
       return event.returnValue = "Are you sure you want to leave this page?";  // compat
    }
});
</code></pre>

<p><sup>(Note that, for security reasons, basically all modern browsers will ignore the returned prompt text, and will show a fixed generic prompt instead.  Still, providing a meaningful prompt may be useful, just in case any tries to use your page on Internet Explorer or some other old browser that still shows the custom prompt.)</sup></p>

<p>Also, <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event" rel="nofollow noreferrer">as noted here on MDN</a>, having a <code>beforeunload</code> event handler active can reduce performance by forcing browsers to actually unload and reload the page instead of just suspending it and storing its state in a cache.  Because of this, it's a good idea to avoid setting such handlers unless necessary, and remove them once they're no longer needed.</p>

<p>In particular, instead of having a global <code>formmodified</code> flag that tells your event handler whether to actually do something or not, I'd recommend just installing the event handler when the user modifies the form, and uninstalling it once the form is submitted:</p>

<pre><code>function confirmUnload (event) {
   event.preventDefault();  // standard method to trigger prompt
   return event.returnValue = "Are you sure you want to leave this page?";  // compat
};

const submitButtonSelector = 'input[name=ModifyRecord], input[name=DeleteRecord], input[name=DeleteChecked]'; 

$('form').on('change', function () {
    window.addEventListener('beforeunload', confirmUnload);
}).on('click', submitButtonSelector, function () {
    window.removeEventListener('beforeunload', confirmUnload);
});
</code></pre>

<p>BTW, assuming that you're actually sending the form data to a server via Ajax, you might also consider only removing the <code>beforeunload</code> event listener when the call actually returns successfully.  That way, if the user clicks the submit button and then tries to immediately leave the page before the data has actually been sent (e.g. because their WiFi connection just happened to drop for a moment), they'll still get prompted.</p>

<p>(Also, note that the code above assumes that you only have one form on the page.  If you might have several, you'd have to keep track of which of them contain unsaved changes, and add or remove the <code>beforeunload</code> event handler accordingly.)</p>
    </div>