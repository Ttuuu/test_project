<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p><code>\(col, row) -&gt; (take 10000 $ randomRs (-1.0, 1.0) generator)!!(col * row)</code></p>
</blockquote>

<p>Oh man you got me going "no no no no no no" like I long haven't :D. <code>take 10000</code> does nothing here. <code>col * row</code> is going to come out to the same when you switch <code>row</code> and <code>col</code>, perhaps you want <code>col + inputSize * row</code>? <code>randomRs</code> is going to be recalculated for each <code>(col,row)</code> pair - <code>fromList</code> fixes that. Calling the line's result <code>weights</code> is little more than a comment. <code>MonadRandom</code> can avert the generator passery, and also stop you generating the same random values for each call to randomWeights.</p>

<pre><code>activate :: [Double] -&gt; [Matrix Double] -&gt; Matrix Double
activate i = foldl squash (fromLists [i]) where
  squash inputs weights = fmap leakyRelu $ multStd2 inputs weights
  leakyRelu a
    | a &gt; 0.0 = a
    | otherwise = 0.01 * a

randomWeights :: Int -&gt; Int -&gt; IO (Matrix Double)
randomWeights rows cols = fromList rows cols &lt;$&gt; getRandomRs (-1.0, 1.0)

main :: IO ()
main = do
  let inputs = [0, 1]

  inputWeights &lt;- randomWeights (length inputs) 3
  hiddenWeights &lt;- randomWeights 3 1
  outputWeights &lt;- randomWeights 1 1

  let outputs = activate inputs [inputWeights, hiddenWeights, outputWeights]

  print inputs
  print outputs
</code></pre>
    </div>