<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Feedback in mostly top-down order</p>

<hr>

<p><code>"""Doc strings"""</code>.  You should get in the habit of adding these at the top of your file, the top of every class, and the top of every (public) function.</p>

<hr>

<p><code>class Queue</code>.  I'm certain you know that Python comes with everything including the kitchen sink, so it should come as no surprise that there exists a <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>deque</code></a> already builtin.  I'll assume you implemented your own for practice.  ;-)</p>

<hr>

<p><code>self.list</code> The <code>list</code> member should not be accessed outside of the <code>Queue</code> class; it is an internal private detail.  To indicate this, you should name the member with a leading underscore, referencing it as <code>self._list</code>.  Python does not enforce public/private semantics, but many code-review tools (such as <code>pylint</code>) will check for and complain about these violations.  Also, leading underscores can "hide" members from autogenerated documentation.</p>

<p>You actually do reference it outside the <code>Queue</code> class, to print the queue's contents.  You should instead implement the method which converts the object to a string, for printing.  It is called <code>__str__</code>, and you could implement it like:</p>

<pre><code>class Queue:
    # ... your other methods here

    def __str__(self):
        return str(self._list)
</code></pre>

<p>Then instead of <code>.format(q.list)</code>, you could write <code>.format(q)</code>.</p>

<hr>

<pre><code>    def dequeue(self):
        temp = self.list[0]
        del self.list[0]
        return temp
</code></pre>

<p>This is verbose code to retrieve an item from the start of a <code>list</code>, remove the item from the <code>list</code>, and return the item.  The <code>list</code> has a builtin method to do this: <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer"><code>pop(0)</code></a>.</p>

<pre><code>    def dequeue(self):
        return self.list.pop(0)
</code></pre>

<hr>

<pre><code>    maze = []
    for row in range(n):
        row = []
        ...
        maze.append(row)
</code></pre>

<p>The variable <code>row</code> is created in the <code>for</code> loop, and assigned the value <code>0</code> (an integer).  Then, the next statement reassigns <code>row</code> to <code>[]</code> (a list).  Fortunately, when the loop returns for the next value, it doesn't try to add 1 to <code>row</code>, but rather retrieves the next value from the <code>range(n)</code>, and the loop works properly.  But this is still poor coding.  <code>pylint</code> will complain that the type of <code>row</code> (not that python has typed variables) changes between an <code>int</code> and a <code>list</code>.</p>

<p>Better would be to use a different variable names, or since the <code>int</code> value of <code>row</code> is never used, to use no variable name at all.  A single underscore is by convention the "throwaway" variable, used when you need a variable but will never use it.</p>

<pre><code>    maze = []
    for _ in range(n):
        row = []
        ...
        maze.append(row)
</code></pre>

<hr>

<pre><code>row.append(0)
row.append(1)
maze[n-1][n-1] = 2
maze[row][col] = 3
</code></pre>

<p><strong>Magic numbers</strong>!  What is <code>0</code>?  What is <code>1</code>?  What is <code>2</code>?  What is <code>3</code>?</p>

<p>Help maintain the code by giving names to these numbers.  For example, you could add:</p>

<pre><code>EMPTY = 0
BLOCKED = 1
GOAL = 2
VISITED = 3
</code></pre>

<p>at the top of your program, and then use:</p>

<pre><code>maze[n-1][n-1] = GOAL
</code></pre>

<p>Readers/maintainers of your program will understand more quickly what is meant by <code>GOAL</code> than by <code>2</code>. </p>

<p>But, just assigning values to variable names is slightly dangerous.  They are <em>variables</em> can therefore can be changed.  Better would be to create an <a href="https://docs.python.org/3/library/enum.html#module-enum" rel="nofollow noreferrer"><code>Enum</code></a>:</p>

<pre><code>from enum import Enum
class Position(Enum):
    EMPTY = 0
    BLOCKED = 1
    GOAL = 2
    VISITED = 3
</code></pre>

<p>Then you can write:</p>

<pre><code>maze[n-1][n-1] = Position.GOAL
</code></pre>

<p>And the value of <code>Position.GOAL</code> cannot be changed.</p>

<hr>

<pre><code>def is_valid_pos(tup):
    (col, row) = tup
    if col &lt; 0 or row &lt; 0 or col &gt;= MAZE_SIZE  or row &gt;= MAZE_SIZE :
        return False
    return maze[row][col] == 0 or maze[row][col] == 2
</code></pre>

<p>You always call <code>is_valid_pos((..., ...))</code>, constructing a tuple to pass to the function, which immediately unpacks the tuple into <code>col</code> and <code>row</code>.  Why not simply use <code>col</code> and <code>row</code> as parameters?</p>

<p>The tests for whether <code>row</code> and <code>col</code> are within the valid range is more complex than it needs to be.  Python allows for chained comparisons.  The compound test:</p>

<pre><code>if 0 &lt;= row  and  row &lt; MAZE_SIZE:
</code></pre>

<p>can be written as:</p>

<pre><code>if 0 &lt;= row &lt; MAZE_SIZE:
</code></pre>

<p>Python evaluates <code>0 &lt;= row</code>, then <code>row &lt; MAZE_SIZE</code>, then the <code>and</code> of the two values.  So the function may be rewritten as:</p>

<pre><code>def is_valid_pos(col, row):
    if  0 &lt;= col &lt; MAZE_SIZE  and  0 &lt;= row &lt; MAZE_SIZE:
        return (maze[row][col] == Position.EMPTY  or  
                maze[row][col] == Position.GOAL)
    return False
</code></pre>

<hr>

<p>As of Python 3.6, we have "f-strings".  This means instead of:</p>

<pre><code>print('Enqueueing ({},{})'.format(col,row))
</code></pre>

<p>where you need to match the <code>format()</code> arguments to the correct <code>{}</code> codes positions, we can write:</p>

<pre><code>print(f'Enqueueing ({col},{row})')
</code></pre>

<p>which is shorter and may be simpler to understand.</p>

<hr>

<pre><code>    if is_valid_pos((col+1, row)): q.enqueue((col+1, row)) 
    if is_valid_pos((col, row+1)): q.enqueue((col, row+1))
    if is_valid_pos((col-1, row)): q.enqueue((col-1, row))
    if is_valid_pos((col, row-1)): q.enqueue((col, row-1))
</code></pre>

<p>This code style is error prone.  You probably copied the first line, and pasted it 3 times, and then changed the +1's to -1's, and moved them from <code>col</code> to <code>row</code>.  Did you make the same change to corresponding the <code>is_valid_pos()</code> and <code>q.enqueue()</code> calls?</p>

<p>Better might be:</p>

<pre><code>    enqueue_if_valid(q, col+1, row)
    enqueue_if_valid(q, col, row+1)
    enqueue_if_valid(q, col-1, row)
    enqueue_if_valid(q, col, row-1)
</code></pre>

<p>and write an <code>enqueue_if_valid()</code> function:</p>

<pre><code>def enqueue_if_valid(q, col, row):
    if is_valid_pos(col, row):
        q.enqueue((col, row))
</code></pre>

<blockquote>
  <p>I notice that there are duplicate values in the Queue. I understand that I should avoid visiting already visited positions. However the queue contains only "prospective" positions which are yet to be visited. Should I modify the algorithm to not enqueue positions which it already contains?</p>
</blockquote>

<p>Since we have moved the 4 enqueue operations into a call to one function, it would now become easier to implement this improvement.  One way would be to search the queue for the tuple you are about to add, but an easier way would be to mark <code>maze[col][row]</code> with <code>Position.ENQUEUED</code>, if it was <code>Position.EMPTY</code>.  Then the next time you are about to enqueue that position, instead of that position being valid, it would return invalid and not be enqueued a second time.</p>

<hr>

<p>What is <code>maze</code>?  Is it a local variable, and passed to <code>solve(maze, ...)</code> and <code>print_maze(maze)</code>?  Or is it a global variable that <code>is_valid_pos()</code> automatically knows about?</p>

<p>Pick one.</p>

<hr>

<p><code>MAZE_SIZE</code> is also a global.  Do you need it?  Or could you just use <code>len(maze)</code> when it is required?</p>
    </div>