<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is no common base type for numeric types, unfortunately.</p>

<p>You could still reduce the repetitiveness of your code though, by encapsulating the common structure in a single function:</p>

<pre><code>    private static string AddThousandsSeparator(Object numeric, int numberOfDecimalPlaces)
    {
        // note this would crash when passed a non-numeric object.
        // that's why it's private, and it's the class's responsibility
        // to limit the entry points to this function to numeric types only
        return String.Format("{0:N" + Math.Max(0, numberOfDecimalPlaces) + "}", numeric);
    }

    public static string WithThousandsSeparator(this decimal value, int numberOfDecimalPlaces)
    {
        return AddThousandsSeparator(value, numberOfDecimalPlaces);
    }

    public static string WithThousandsSeparator(this int value, int numberOfDecimalPlaces)
    {
        return AddThousandsSeparator(value, numberOfDecimalPlaces);
    }

    public static string WithThousandsSeparator(this double value, int numberOfDecimalPlaces)
    {
        return AddThousandsSeparator(value, numberOfDecimalPlaces);
    }

    public static string WithThousandsSeparator(this long value, int numberOfDecimalPlaces)
    {
        return AddThousandsSeparator(value, numberOfDecimalPlaces);
    }
</code></pre>

<p>A few side remarks:</p>

<ul>
<li><p>There is no point in calling <code>ToString()</code> on the result of <code>String.Format</code>. <code>String.Format</code> already returns a <code>string</code>.</p></li>
<li><p><code>Math.Max</code> is a more concise alternative for the conditional reassignment. (For what it's worth, Kotlin provides readable extension functions as syntax sugar for this sort of thing, eg.  <code>someNumber.coerceAtLeast(0)</code> - trivially easy to reimplement them in C# for readability).</p></li>
<li><p>I also corrected the naming slightly. It's "thousands" separator (plural), plus I think <code>With...</code> makes it clearer what the function does. The <code>ToSomething</code> phrase conventionally means a value is getting converted to Something, as if you were converting the number <em>to the thousands separator itself</em> - obviously nonsensical - rather than just adding it to the formatting.</p></li>
</ul>
    </div>