<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I have the following remarks:</p>

<p>I hope that this example was not a part of the challenge: </p>

<pre><code>&lt;OpeningTag&gt;&lt;AnotherOpeningTag&gt;Information&lt;/AnotherClosingTag&gt;&lt;/ClosingTag&gt;
</code></pre>

<p>because it is actually not xml and should not be caught by your algorithm. A proper xml element has the same text in the start and end tags: </p>

<pre><code>&lt;OuterTag&gt;&lt;InnerTag&gt;Information&lt;/InnerTag&gt;&lt;/OuterTag&gt;
</code></pre>

<hr>

<p>Collecting results into one string is not very useful, because you then have to split that string when/if you want to use the result. So instead of:</p>

<pre><code>txtXml += text + "\n";
</code></pre>

<p>... it would be better to collect each xml item in a collection of some sort:</p>

<pre><code>List&lt;string&gt; result = new List&lt;string&gt;();

...
result.Add(text);
</code></pre>

<hr>

<p>This condition:</p>

<pre><code>if (text.StartsWith("&lt;") &amp;&amp; text.EndsWith("&gt;")) { ... }
</code></pre>

<p>... will not only find:</p>

<pre><code>"&lt;OuterTag&gt;&lt;InnerTag&gt;Information&lt;/InnerTag&gt;&lt;/OuterTag&gt;"
</code></pre>

<p>but also:</p>

<pre><code>"&lt;OuterTag&gt;&lt;InnerTag&gt;Information&lt;/InnerTag&gt;&lt;/OuterTag&gt;XXXX&lt;OuterTag&gt;&lt;InnerTag&gt;Information&lt;/InnerTag&gt;&lt;/OuterTag&gt;"
</code></pre>

<p>and that IMO should not be the case, because <code>"XXXX"</code> is not part of any tag. The same applies to your Regex pattern.</p>

<hr>

<p>None of your ways to find xml verifies that it actually is well formed xml, but that maybe was not part of the challenge?</p>

<hr>

<p>You could use the .NET namespace <code>System.Xml</code> to do the things like:</p>

<pre><code>IEnumerable&lt;string&gt; ExtractXml(string text)
{
  string candidate = $"&lt;doc&gt;{text}&lt;/doc&gt;";
  XmlDocument xDoc = new XmlDocument();
  xDoc.LoadXml(candidate);
  return xDoc.FirstChild.Cast&lt;XmlNode&gt;().Where(n =&gt; n is XmlElement).Select(e =&gt; e.OuterXml);
}

IEnumerable&lt;string&gt; ExtractXml(IEnumerable&lt;string&gt; data)
{
  return data.SelectMany(line =&gt; ExtractXml(line));
}
</code></pre>

<p>Here I wrap the original text in an outer xml-element (<code>&lt;doc&gt;&lt;/doc&gt;</code>) which causes text outside xml-tags to be interpreted as <code>XmlText</code> elements that should be filtered out. By using the xml-library you can verify the xml at the same time as extracting it, because the xml-parser will throw on invalid format.</p>
    </div>