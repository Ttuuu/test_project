<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Syntax</h2>

<p>There are no hard rules on this, but I would change a couple things in your syntax:</p>

<ul>
<li>avoid <code>'</code> in identifiers. Especially in that case, you can use <code>tree</code> instead of <code>tree'</code> (there is no collision with the type name).</li>
<li>usually there's a space before constructor arguments, like <code>Node (left, nodeValue, right)</code> (really up to convention, but I'd say it's more common).</li>
<li>parentheses around function application are not necessary, so it's more idiomatic to write <code>Node (deleteNode left value, nodeValue, right)</code>. You can also extract a binding: <code>let newLeft = deleteNode left value in Node (newLeft, nodeValue, right)</code></li>
<li>camel case is rare is ocaml (I know, that's weird!). For example the standard library uses names like <code>print_endline</code> etc. So, I'd use <code>node_value</code>, etc.</li>
</ul>

<h2>Replace conditionals with guards</h2>

<p>Every time a <code>if</code> is in a pattern matching branch, you can extract it into a guard. The syntax is <code>| pattern when condition -&gt;</code>.</p>

<p>By applying this to the first <code>if</code>s, we can arrive to this state:</p>

<pre><code>let rec deleteNode tree' value = 
  match tree' with 
  | Empty -&gt; Empty
  | Node (left, nodeValue, right) when value &lt; nodeValue -&gt;
        Node((deleteNode left value), nodeValue, right)
  | Node (left, nodeValue, right) when value &gt; nodeValue -&gt;
        Node(left, nodeValue, (deleteNode right value))
  | Node (left, nodeValue, right) -&gt; 
      if left = Empty &amp;&amp; right = Empty then 
        Empty
      else if left = Empty then 
        right
      else if right = Empty then
        left
      else 
        let newValue = minValue right in
        Node(left, newValue, (deleteNode right newValue))
</code></pre>

<h2>Use deep pattern matching</h2>

<p>You can replace the <code>x = Empty</code> tests by pattern matching. In other words, patterns can contain patterns. By applying this to all the conditionals, we get:</p>

<pre><code>let rec deleteNode tree' value = 
  match tree' with 
  | Empty -&gt; Empty
  | Node (left, nodeValue, right) when value &lt; nodeValue -&gt;
        Node((deleteNode left value), nodeValue, right)
  | Node (left, nodeValue, right) when value &gt; nodeValue -&gt;
        Node(left, nodeValue, (deleteNode right value))
  | Node (Empty, nodeValue, Empty) -&gt; 
        Empty
  | Node (Empty, nodeValue, right) -&gt; 
        right
  | Node (left, nodeValue, Empty) -&gt; 
        left
  | Node (left, nodeValue, right) -&gt; 
        let newValue = minValue right in
        Node(left, newValue, (deleteNode right newValue))
</code></pre>

<h2> Remove redundant cases</h2>

<p>That's more obvious with pattern matching, but the <code>Node (Empty, nodeValue, right)</code> cases also applies when <code>right = Empty</code>, so we can delete the more specific <code>Node (Empty, nodeValue, Empty)</code> case.</p>

<p>That's about it! Have a nice journey exploring OCaml.</p>
    </div>