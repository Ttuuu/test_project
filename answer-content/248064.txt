<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Private Function connectionSuccessful() As Boolean</h2>
<p>The name suggest that you are testing to see if the Connection has already been opened when in fact it is used to opening the Connection and test if it was successful.</p>
<blockquote>
<pre><code>Private Function OpenConnection() As Boolean   
</code></pre>
</blockquote>
<p>This name tells you that you are opening a Connection.  Since the return type is Boolean, it is natural to assume that the function will return True only if the Connection was successful.</p>
<p>Having the error handler escape errors and print a message to the Immediate Window is counter productive.  As a developer I don't instinctively look to the Immediate Window for error messages.  As a user I will notify the developer of the error message that was raised down the line and not at the point of impact.   Considering that your code uses callback procedures, there is no guarantee that an error will ever be raised.  The only thing that is certain is that there are going to be problems somewhere down the line.</p>
<p>You should definitely raise a custom error it the <code>mConnectionString</code> is not set.  A custom error message for the failed connection is not necessary (if you remove the error handler) because an ADODB error will be thrown at the point where this procedure was called.</p>
<h2>Public Sub AsyncExecute()</h2>
<p>Consider raising an error if the callback procedure is not set.</p>
<h2>Private Sub Class_Terminate()</h2>
<p>This method should be used to close the connection.</p>
<h2>mConn, mASyncConn, and mSyncConn</h2>
<p>There is no need to use three different Connection variable.  You are doing more work and obfuscating the code.  Using a variable such as <code>AsyncMode As Boolean</code> will give you the same feedback and simplify the code making it easier to read.</p>
<h2>Naming Conventions</h2>
<p>Having <code>value</code> and <code>execute</code> lower case changes the case for all other variables and properties with the same names.  For this reason, I use Pascal Case for all my variables that do not have some sort of prefix.</p>
<p>Mathieu Guindon's <a href="https://rubberduckvba.wordpress.com/2018/04/24/factories-parameterized-object-initialization/" rel="nofollow noreferrer">Factories: Parameterized Object Initialization</a></p>
<h2>Other possible improvements</h2>
<p>A public event would allow you to use <code>cQueryable</code> in other custom classes.</p>
<blockquote>
<pre><code>Public Event AsyncExecuteComplete(pRecordset As Recordset)
</code></pre>
</blockquote>
<p>The ability to chain queries together seems like a natural fit.</p>
<blockquote>
<pre><code>Public Function NextQuery(Queryable AS cQueryable) AS cQueryable
   Set NextQuery = Queryable 
   Set mQueryable = Queryable 
End Function
</code></pre>
</blockquote>
<p>This will allow you to run multiple queries in order without the need of multiple callback.</p>
<blockquote>
<pre><code>CreateTempQuery.NextQuery(FillTempTableQuery).NextQuery(UpdateEmployeesTableQuery)
</code></pre>
</blockquote>
    </div>