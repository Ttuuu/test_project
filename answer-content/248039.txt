<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Do conversions once</h1>
<p>As written, with the example input, <code>str(binary_value)</code> will be called 22 times, with the same input value, and returning the same value each time.  This is very inefficient; it is wasted work.  It would be better to call it once, and store the result, and use this stored value:</p>
<pre><code>def binary_to_decimal_converter(binary_value):
    binary_value = str(binary_value)
    # ... rest of function, without any more str(binary_value) calls
</code></pre>
<p>But ...</p>
<h1>Representing Binary Numbers</h1>
<p>As pointed out by <a href="https://codereview.stackexchange.com/users/36018/harold">harold</a> in the comments, the literal <code>1111101100</code> is an integer value slightly larger than one billion in Python.  You should use a string to represent a binary number to be converted.</p>
<pre><code># Calling the function
binary_to_decimal_converter("1111101100")
</code></pre>
<p>Since we're passing a string to the function, all of the calls to <code>str(binary_value)</code> are now completely unnecessary.</p>
<h1>String Constants</h1>
<pre><code>        if str(binary_value)[loop_var] == str(1):
</code></pre>
<p>Again, using the example value, the expression <code>str(1)</code> will be evaluated ten times; once for each digit of the input.  This will convert the numerical value one into the string <code>"1"</code>, which will be discarded immediately after use, only to be recreated on the next iteration.  Why not just use the literal <code>"1"</code>?  Not only is it more efficient; it is 3 characters shorter.</p>
<h1>Loop like a Native</h1>
<p>See <a href="https://youtu.be/EnSu9hHGq5o" rel="nofollow noreferrer">"Loop like a Native" by Ned Batchelder</a> on YouTube for more details, motivation, etc.</p>
<h2>Part 1</h2>
<p>Our modified code now looks like this:</p>
<pre><code>    loop_var = 0
    while loop_var &lt; len(binary_value):
        # ...
        loop_var += 1
</code></pre>
<p><code>len(binary_value)</code> is computed once for each iteration through the loop; 11 times, including the last pass where the condition evaluates to <code>False</code> and the loop terminates.  Since the string doesn't change inside the loop, the length won't change either, so this value is a constant.</p>
<pre><code>    loop_var = 0
    limit = len(binary_value)
    while loop_var &lt; limit:
        # ...
        loop_var += 1
</code></pre>
<p>Now that we've recognized that <code>limit</code> is fixed, we can see this is actually a <code>for</code> loop, that starts at zero, counts up by 1, and stops when it reaches <code>limit</code>.  Instead of manually adjusting the <code>loop_var</code> by 1, and manually doing the comparison, we should simply use the <code>for</code> loop, over the required <code>range</code>, which is much more efficient:</p>
<pre><code>    for loop_var in range(len(binary_value)):
        # ...
</code></pre>
<h2>Part 2</h2>
<p>Our loop now looks like:</p>
<pre><code>    for loop_var in range(len(binary_value)):
        if binary_value[loop_var] == "1":
            # ...
        # ...
</code></pre>
<p>Indexing is expensive in Python.  Anytime you see a <code>for</code> loop, using a <code>range(len(thing))</code>, and the loop variable is only used as a index into the <code>thing</code> which the range is looping over, <code>thing[loop_var]</code>, then we want to let Python do the indexing for us in the <code>for</code> statement:</p>
<pre><code>    for digit in binary_value:
        if digit == "1":
            # ...
        # ...
</code></pre>
<h1>Return Value</h1>
<pre><code>    return print(f"Decimal: {decimal_value}")
</code></pre>
<p>Is this function returning a value, or is it printing the result?  Currently, it is taking the value which is returned by the <code>print()</code> function, and returning that.  Ie)</p>
<pre><code>    temporary = print(f"Decimal: {decimal_value}")
    return temporary
</code></pre>
<p>But <code>print()</code> returns <code>None</code>, so this is effectively:</p>
<pre><code>    print(f"Decimal: {decimal_value}")
    return None
</code></pre>
<p>And if the function ends without a return statement, it automatically returns <code>None</code> anyway.  So the <code>return</code> can simply be omitted.</p>
<p>Note: It is better to return results from a function that does a calculation, without printing anything inside the function, and have the caller do the printing.  This will create more flexible code in the future.  Left to student.</p>
<h1>Improved code</h1>
<pre><code>def binary_to_decimal_converter(binary_value):
    print(f"Binary: {binary_value}")
    decimal_value = 0

    # power is power of number 2
    # power must be less than string length because computer starts counting from 0th index
    power = len(binary_value) - 1

    for digit in binary_value:
        if digit == "1":
            decimal_value += 2 ** power
        power -= 1

    print(f"Decimal: {decimal_value}")


# Calling the function
binary_to_decimal_converter("1111101100")
</code></pre>
    </div>