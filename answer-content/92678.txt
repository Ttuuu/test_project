<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Your code seems fine, though I'm only looking at the interface, not the implementation. Since you haven't got any architectural or DX related answers yet, I'll mention a few things I believe could be improve in this code.</p>

<ul>
<li><p>A header file is no place for this:</p>

<blockquote>
<pre><code>#ifdef _MSC_VER
    #pragma comment(lib, "d3d11.lib")
    #pragma comment(lib, "dxgi.lib")
    #pragma comment(lib, "XINPUT9_1_0.lib")
    #pragma comment(lib, "DXWindow.lib")
#endif
</code></pre>
</blockquote>

<p>That would be much better suited in a source (<code>.cpp</code>) file, since it is an implementation detail. The set of linked libraries is not relevant to the code including your header file, not to mention that this is a compiler specific feature that people not familiar with VS might not even know what it means, thus only causing distraction.</p></li>
<li><p>Your <code>enum</code>s are already sequential and starting from zero. No need to explicitly supply the values. That's only maintenance overhead when other values must be added.</p></li>
<li><p>A very important thing: <code>MessageCallback</code> is an abstract base class, however, it is <strong>missing a virtual destructor</strong>! If anyone were to <code>delete</code> an instance of a derived class thru a <code>MessageCallback</code> pointer, it would invoke undefined behavior, due the lack of a virtual destructor. See <a href="https://stackoverflow.com/questions/461203/when-to-use-virtual-destructors"><em>When to use virtual destructors?</em></a></p></li>
<li><p>In <code>DXWindowFactory</code>, you have provided methods that operate on raw pointers and overloads that operate on smart pointers (<code>CComPtr</code>). My advice would be to disallow operations on raw pointers. Keep the smart pointer versions only, to avoid unsafe uses of your class.</p></li>
<li><p>I see a few instances of <code>NULL</code> here and there, but your code is clearly C++11, so why not use the much superior <a href="http://en.cppreference.com/w/cpp/language/nullptr" rel="nofollow noreferrer"><code>nullptr</code></a>?</p></li>
</ul>
    </div>