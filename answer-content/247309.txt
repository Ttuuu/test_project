<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to Code Review!</p>
<ol>
<li><p>Having a <code>class</code> for player seems over complicated. A simple <a href="https://devdocs.io/python%7E3.8/library/collections#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a> would be enough.</p>
</li>
<li><p>The <code>main()</code> function is doing most of the heavy lifting. You can have a <code>Game</code> class, which takes the <code>players</code> list (or individual objects) as init parameters, and then implements the game logic.</p>
</li>
<li><p>You can reuse the <code>get_player_input</code> when asking for <strong>another game</strong> from the user.</p>
</li>
<li><p>When working with <code>random</code> library, it is generally a good practice to <a href="https://devdocs.io/python%7E3.8/library/random#random.seed" rel="nofollow noreferrer"><code>seed</code></a> it at the beginning.</p>
</li>
<li><p>The <code>Board.display</code> cam be made a 1-liner:</p>
<pre><code> print("\n".join(" ".join(row) for row in self._board))
</code></pre>
</li>
<li><p>Instead of having a <code>Board.display</code> method, override <code>__str__</code>, and simply <code>print(board)</code>.</p>
</li>
<li><p>Alternative implementation of <code>is_full</code>:</p>
<pre><code> def is_full(self):
     return "-" not in set(chain(*self._board))
</code></pre>
<p>where <a href="https://devdocs.io/python%7E3.8/library/itertools#itertools.chain" rel="nofollow noreferrer"><code>chain</code> is from <code>itertools</code></a>.</p>
</li>
</ol>
    </div>