<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, it's workable. There are just a few things:</p>

<ol>
<li><p>You mark most of your functions unconditionally <code>noexcept</code>. Woe befall anyone passing a callable which might throw. Or if comparing does so. Yes, fixing that is tedious if you don't use an evil macro.</p></li>
<li><p>You should be aware that predicates are generally allowed to return anything they want, as long as it can be contextually converted to <code>bool</code>. Unless you like brittle code, when you don't use a construct doing that contextual conversion, do an explicit cast.</p></li>
<li><p>One uses <code>decltype(t)</code> for forwarding in lambdas for a simple reason: The argument-type doesn't have a known name yet. If it has a simple name, that's doing things the hard way.</p></li>
<li><p>You don't leverage your own functions to implement the rest. Some examples for inspiration:</p>

<pre><code>template &lt;typename Predicate, typename Tuple&gt;
constexpr bool none_of(Predicate&amp;&amp; pred, Tuple&amp;&amp; t) noexcept {
    return all_of(std::not_fn(std::ref(pred)), std::forward&lt;Tuple&gt;(t));
}

template &lt;typename Predicate, typename Tuple&gt;
constexpr bool any_of(Predicate&amp;&amp; pred, Tuple&amp;&amp; t) noexcept {
    return !none_of(pred, std::forward&lt;Tuple&gt;(t));
}

template &lt;typename Predicate, typename Tuple&gt;
constexpr std::size_t count_if(Predicate&amp;&amp; pred, Tuple&amp;&amp; t) noexcept {
    std::size_t r = 0;
    for_each(
        [&amp;](auto&amp;&amp; x){ r += (bool)pred(std::forward&lt;decltype(x)&gt;(x)); },
        std::forward&lt;Tuple&gt;(t)
    );
}

template &lt;typename Tuple, typename T&gt;
constexpr std::size_t count(Tuple&amp;&amp; t, const T&amp; value) noexcept {
    return count_if([&amp;](auto&amp;&amp; x){ return value == x; }, std::forward&lt;Tuple&gt;(t));
}
</code></pre></li>
<li><p>Consider rewriting your <code>for_each_n()</code> in terms of a generic <code>static_for()</code>.</p></li>
<li><p>Anyway, <code>for_each_n()</code> should either more closely follow the standard-library, by making <code>n</code> a runtime-argument (then best implement in terms of <code>all_of()</code>), or get a different name, like <code>for_first_n()</code>.</p></li>
<li><p><code>mismatch()</code> and <code>find()</code> have completely separate implementations for using a predicate and not using one. Why?<br>
The case without predicate is trivially implemented by cooking up the appropriate predicate and delegating.</p></li>
<li><p>Why does <code>mismatch()</code> expect the first tuple to not be longer than the second?<br>
That restriction is baffling, and will be vexing for any user.</p></li>
<li><p><code>mismatch()</code> can also be easily implemented in terms of <code>static_for()</code>. Though should you maybe skip elements which cannot be compared?</p></li>
<li><p><code>find()</code> is unusable if any tuple-member is not comparable to your needle / cannot be fed to your lambda. Shouldn't those members just be skipped?</p></li>
<li><p><code>find_if_not()</code> should delegate to <code>find_if()</code> using <code>std::not_fn()</code>.</p></li>
<li><p>As you wanted to get around the need for helper-functions, let me emphasize yet again that leveraging all the related functions you build and the standard-library helps there.</p></li>
</ol>
    </div>