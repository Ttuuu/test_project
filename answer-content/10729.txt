<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My $0.02. Your solution is quite good as it stands. Just putting my thing down too.</p>

<p>I'm a fan of interface-based development with factory methods, so I extracted out an interface for the <code>Person</code> class called <code>IPerson</code>:</p>

<pre><code>public interface IPerson
{
    string Name { get; }

    DateTime BirthDate { get; }
}
</code></pre>

<p>and then implemented <code>Person</code> as a <code>sealed</code> immutable class (using <code>readonly</code> and a parametrized <code>private</code> constructor) which has a factory method:</p>

<pre><code>public sealed class Person : IPerson
{
    private readonly string name;

    private readonly DateTime birthDate;

    private Person(string name, DateTime birthDate)
    {
        this.name = name;
        this.birthDate = birthDate;
    }

    public string Name { get { return this.name; } }

    public DateTime BirthDate { get { return this.birthDate; } }

    public static IPerson Create(string name, DateTime birthDate)
    {
        return new Person(name, birthDate);
    }
}
</code></pre>

<p>I did similarly with the class you called <code>Pair</code>, but I called it <code>PersonBirthdayDifference</code> (I'll freely admit I can't think up a useful name at all). Also note the static <code>Empty</code> property which I put to use in the <code>Finder</code> algorithm rather than just <code>new</code>ing up one with no properties set.</p>

<pre><code>public interface IPersonBirthdayDifference
{
    IPerson YoungerPerson { get; }

    IPerson ElderPerson { get; }

    TimeSpan AgeDifference { get; }
}
</code></pre>

<p>and</p>

<pre><code>public sealed class PersonBirthdayDifference : IPersonBirthdayDifference
{
    private static readonly IPersonBirthdayDifference empty = Create(null, null);

    private readonly IPerson youngerPerson;

    private readonly IPerson elderPerson;

    private readonly TimeSpan ageDifference;

    private PersonBirthdayDifference(IPerson youngerPerson, IPerson elderPerson)
    {
        this.youngerPerson = youngerPerson;
        this.elderPerson = elderPerson;
        this.ageDifference = (youngerPerson == null) || (elderPerson == null)
            ? default(TimeSpan)
            : elderPerson.BirthDate - youngerPerson.BirthDate;
    }

    public static IPersonBirthdayDifference Empty { get { return empty; } }

    public IPerson YoungerPerson { get { return this.youngerPerson; } }

    public IPerson ElderPerson { get { return this.elderPerson; } }

    public TimeSpan AgeDifference { get { return this.ageDifference; } }

    public static IPersonBirthdayDifference Create(IPerson p1, IPerson p2)
    {
        return new PersonBirthdayDifference(p1, p2);
    }
}
</code></pre>

<p>Finally, I update the <code>Finder</code> class by some of the same methods as above, plus introduce a couple more helper classes called <code>GreaterThanComparer</code> and <code>LessThanComparer</code> (not posting that code, it's rather trivial) to keep the <code>switch</code> from executing every iteration of the loop. There's also a healthy dose of LINQ to help declare intent where I can:</p>

<pre><code>public sealed class Finder : IFinder
{
    private readonly IList&lt;IPerson&gt; people;

    private Finder(IEnumerable&lt;IPerson&gt; people)
    {
        this.people = people.ToList();
    }

    public static IFinder Create(IEnumerable&lt;IPerson&gt; people)
    {
        return new Finder(people);
    }

    public IPersonBirthdayDifference Find(FinderType finderType)
    {
        var peopleInOrder = this.PopulateListInOrder();

        return peopleInOrder.Any() ? GetAnswer(peopleInOrder, finderType) : PersonBirthdayDifference.Empty;
    }

    private static IPersonBirthdayDifference GetAnswer(
        IEnumerable&lt;IPersonBirthdayDifference&gt; peopleInOrder,
        FinderType finderType)
    {
        IPersonDifferenceComparer comparer;

        switch (finderType)
        {
            case FinderType.LessThan:
                comparer = LessThanComparer.Create();
                break;
            case FinderType.GreaterThan:
                comparer = GreaterThanComparer.Create();
                break;
            default:
                return PersonBirthdayDifference.Empty;
        }

        var answer = peopleInOrder.First();

        foreach (var person in peopleInOrder)
        {
            if (comparer.Compare(person.AgeDifference, answer.AgeDifference))
            {
                answer = person;
            }
        }

        return answer;
    }

    private IEnumerable&lt;IPersonBirthdayDifference&gt; PopulateListInOrder()
    {
        IList&lt;IPersonBirthdayDifference&gt; peopleInOrder = new List&lt;IPersonBirthdayDifference&gt;();

        for (var i = 0; i &lt; this.people.Count - 1; i++)
        {
            for (var j = i + 1; j &lt; this.people.Count; j++)
            {
                var isYounger = this.people[i].BirthDate &lt; this.people[j].BirthDate;
                var youngerPerson = isYounger ? this.people[i] : this.people[j];
                var elderPerson = isYounger ? this.people[j] : this.people[i];

                peopleInOrder.Add(PersonBirthdayDifference.Create(youngerPerson, elderPerson));
            }
        }

        return peopleInOrder;
    }
}
</code></pre>
    </div>