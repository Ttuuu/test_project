<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is an improvement on <a href="https://codereview.stackexchange.com/questions/203486/morgan-and-a-string-hackerrank-challenge/203529#203529">@Toby's answer</a></p>
<ol>
<li><p>Instead of <code>str += char</code> which allocates a new string you can yield the result and <code>"".join()</code> it later on</p>
</li>
<li><p>Here's the problem: consider <code>"BAB"</code>, <code>"BAC"</code>. One would think to compare the two strings, see that <code>BA-&gt;B</code> is more minimal than <code>BA-&gt;C</code>. or you see that <code>BA-&gt;B</code>(end of string) is shorter than <code>BA-&gt;(jump to other string)BA</code>. Both of these are wrong, because we end up with <code>BABBAC</code>, instead of <code>BABABC</code>, which is more minimal (<code>BABA &lt; BABB</code>).</p>
<p>The z fixes things because it fixes the issue where we incorrectly choose <code>BA-&gt;B\0</code> over <code>BA(first stack)-&gt;(other stack)BA</code>. <code>BA-&gt;BA &lt; BA-&gt;Bz</code>. Realistically what we should do during tiebreakers is jump to the other stack when one ends so we are comparing against <code>BABB</code> instead of <code>BABz</code>, but the z solution is faster.</p>
</li>
<li><p>Normally with the <code>"z"</code> fix you need to remove them from the end result, but because <em>any</em> uppercase char is lower then the lowercase <code>"z"</code> we know after <code>len(a) + len(b) - 2</code> iterations only the 2 <code>"z"</code> strings remain in the resulting string. thus we only need to loop <code>len(a) + len(b) - 2</code> times</p>
</li>
</ol>
<h1>Improved code</h1>
<pre><code>def morgan(a, b):
    a += "z"
    b += "z"
    for _ in range(len(a) + len(b) - 2):
        if a &lt; b:
            yield a[0]
            a = a[1:]
        else:
            yield b[0]
            b = b[1:]

def morgan_and_string(a, b):
    """
    Return the lexicographically smallest string formed from the input strings, keeping each string
    in order in the result.

    Same length
    &gt;&gt;&gt; morgan_and_string("ACEG", "BDFH")
    'ABCDEFGH'
    &gt;&gt;&gt; morgan_and_string("ABCD", "ABCD")
    'AABBCCDD'

    Empty input
    &gt;&gt;&gt; morgan_and_string("ABCD", "")
    'ABCD'
    &gt;&gt;&gt; morgan_and_string("", "ABCD")
    'ABCD'

    Different length
    &gt;&gt;&gt; morgan_and_string("Z", "ABCD")
    'ABCDZ'
    &gt;&gt;&gt; morgan_and_string("ABCD", "Z")
    'ABCDZ'

    Descending strings
    &gt;&gt;&gt; morgan_and_string("BA", "BA")
    'BABA'

    &gt;&gt;&gt; morgan_and_string("ZAX", "ZAY")
    'ZAXZAY'
    &gt;&gt;&gt; morgan_and_string("ZAY", "ZAX")
    'ZAXZAY'

    Proper prefix
    &gt;&gt;&gt; morgan_and_string("BABC", "BA")
    'BABABC'
    &gt;&gt;&gt; morgan_and_string("CABC", "CA")
    'CABCAC'
    &gt;&gt;&gt; morgan_and_string("BAAC", "BA")
    'BAABAC'
    """
    return "".join(morgan(a, b))

if __name__ == '__main__':
    import doctest
    doctest.testmod()
</code></pre>
    </div>