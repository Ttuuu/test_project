<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Usefulness</h1>

<p>Looks useful, although you could achieve something similar with a debugger, which in the end is much more powerful. See <a href="https://stackoverflow.com/questions/9233095/memory-dump-formatted-like-xxd-from-gdb">this post</a> about making GDB give similar output.</p>

<h1>Make a C++20 version</h1>

<p>Because the code would be much cleaner if you could use <code>std::format()</code>. You can make it backwards compatible by detecting if C++20 support is present, otherwise falling back to <a href="https://github.com/fmtlib/fmt" rel="nofollow noreferrer">fmtlib</a>.</p>

<h1>Consider making <code>hd()</code> take a reference</h1>

<p>I think it would be much cleaner if <code>hd()</code> took a reference, and have the size default to the size of the type:</p>

<pre><code>template&lt;typename T&gt;
hd(const T &amp;buf, std::size_t bufsz = sizeof(T)): buffer{...}, bufsize{...} {}
</code></pre>

<p>And then you could use it like:</p>

<pre><code>auto d1 = Dummy{};
std::cout &lt;&lt; hd(d1) &lt;&lt; '\n';
</code></pre>

<p>Of course, it gets a bit harder to use if you want to dump arbitrary memory, but it's a trade-off. I think it would benefit beginners, who may not know the size of types, or might easily make mistakes like writing <code>hd(some_pointer, sizeof(some_pointer))</code>. Maybe have two distinct classes, or have a version that takes only a reference and no size, and one that takes a void pointer and a size.</p>

<h1>Avoid <code>void *</code> where possible</h1>

<p>I think it's best if you cast to <code>unsigned char *</code> as soon as possible (in <code>hd</code>'s constructor), and stick with it. This avoids some casts in other parts of your code. The only time you want to cast it again is when printing the value of a pointer in <code>print_ptr()</code>.</p>

<p>Even better, use <code>std::byte *</code>, and only convert a <code>std::byte</code> to <code>char</code> when needing to print it as a character directly.</p>

<h1>Organizing the code</h1>

<p>The function <code>hex_dump()</code> is a bit messy. It would be nicer if it was split into more functions, delegating more work to <code>print_*()</code> functions. In particular, have <code>print_bytes()</code> take a length so it prints a range of bytes in one go. Add a <code>print_ascii()</code> that prints a range of bytes as printable ASCII characters.</p>

<p>You could move the handling of the pre- and post-buffer area to the <code>print_*()</code> functions, avoiding the special-casing in <code>hex_dump()</code> itself. For example:</p>

<pre><code>constexpr std::size_t linesize{16};
auto buf{buffer};
size_t pre = reinterpret_cast&lt;size_t&gt;(buffer) % maxline; // Size of pre-buffer area
buf -= pre; // Align buf and bufsize to start of pre-buffer area
bufsize += pre;

while (bufsize) {
    // Calculate the length of the post-buffer area on this line
    size_t post = bufsize &lt; linesize ? linesize - bufsize : 0;

    // Print the line
    print_ptr(os, buf);
    os &lt;&lt; ": ";
    print_bytes(os, buf, linesize, pre, post);
    os &lt;&lt; " | ";
    print_ascii(os, buf, linesize, pre, post);
    os &lt;&lt; "\n";

    buf += linesize;
    bufsize -= linesize - post; // Advance to next line, avoiding wrapping
    pre = 0;                    // No pre-buffer area after first line
}
</code></pre>

<h1>About printing pointers</h1>

<p>I can think of use cases where you'd want to see the pointers as decimal values, possibly even just offsets from the start of the data instead of absolute values. Perhaps this could be made configurable?</p>

<h1>Make <code>bufsize_</code> <code>const</code></h1>

<p>Just as <code>buffer_</code> is <code>const</code>, you can make <code>bufsize_</code> <code>const</code> as well.</p>

<h1>Implications of using a class instead of a function</h1>

<p>Using a class that has an <code>operator&lt;&lt;()</code> overload is a way to get relatively optimized output to an <code>std::ostream</code>, but there are some consequences. First, the class holds references to the data that is to be printed, and there is no guarantee that the data will be valid at the time you actually print it. For example, I could write:</p>

<pre><code>hd bad_hd() {
    int i = 0xbad;
    return hd(&amp;i, sizeof i);
}
...
std::cout &lt;&lt; bad_hd(); // UB
</code></pre>

<p>This is a similar to how <code>std::span</code> behaves. While in the above it is rather obvious you are taking a reference of a local variable, it is harder to see if you have an overload that takes a reference of an arbitrary type. If you would use a function instead (basically <code>hex_dump()</code>, possibly with overloads), you would not have this issue.</p>

<p>The second issue, which is very minor but might surprise someone, is that you can't use <code>hd()</code> to print an instance of itself using the reference template overload:</p>

<pre><code>int foo = 0xf00;
auto foo_hd = hd(foo);
std::cout &lt;&lt; foo_hd; // OK
std::cout &lt;&lt; hd(foo_hd); // Prints a copy of the above
std::cout &lt;&lt; hd(&amp;foo_hd, sizeof foo_hd); // Works
</code></pre>
    </div>