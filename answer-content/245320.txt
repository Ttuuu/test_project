<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Indentation</h2>
<p>Yours is highly inconsistent. It's best to use an autoformatter to ensure that this remains sane and consistent.</p>
<h2>Property boilerplate</h2>
<p>This:</p>
<pre><code>            private int productId;
            public int ProductId
            {
                get
                {
                    return productId;
                }
                set
                {
                    productId = value;
                }
            }
    
</code></pre>
<p>is both very Java and unnecessary given the syntactic sugar that C# has supported for several years:</p>
<pre><code>public int ProductId { get; set; }
</code></pre>
<h2>Factory?</h2>
<blockquote>
<p>How can I avoid instantiating PackingSlip here</p>
</blockquote>
<p>Why do you want to avoid instantiating it? Is it because <code>PhysicalProduct</code> is supposed to be an abstract class as well? If so, you are correct to want to avoid assigning an instance in the abstract class, since your assignment in the <code>BookProduct</code> constructor will overwrite this value.</p>
<p>There are several approaches you can follow. One is to make the top-level constructor accept an instance of <code>IPayment</code>, and to pass a new instance via <code>base()</code>.</p>
<p>Another approach is to make the abstract base class a generic, where the generic type is forced to implement <code>IPayment</code>. The abstract class would not need to accept a new instance, and would be able to construct its own instance so long as the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/new-constraint" rel="nofollow noreferrer">new constraint</a> is imposed.</p>
<h2>Redundant base call</h2>
<p>This:</p>
<pre><code>    public BookProduct():base()
</code></pre>
<p>should not need to explicitly call <code>base</code>.</p>
<h2>MakePayment</h2>
<p>One of two things has happened here. Either you've omitted a bunch of code, which would technically make this section of the question off-topic; or <code>MakePayment</code> is both misnamed and mischaracterized as a function. If the latter, make it a get-only property and rename it to something like <code>Description</code>.</p>
    </div>