<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I am not too happy about the variable name <code>currSum</code>, it is hard to see the meaning of this variable from the name alone.</p>

<p>Consider <code>takenValue</code> or something similar as a variable name.</p>

<p>Note that</p>

<p><code>a[start] + (sum - currSum - a[start])</code></p>

<p>Simplifies to </p>

<p><code>sum - currSum</code></p>

<p>And similarily for the other cases so;</p>

<pre><code>    int v1 = a[start] + (sum - currSum - a[start]) - 
    maxPlayer1(a, currSum + a[start], sum, start + 1, a.length);

    int v2 = a[start] + a[start+1] + (sum - currSum - a[start] - a[start+1]) - 
    maxPlayer1(a, currSum + a[start] + a[start+1], sum, start + 2, a.length);

    int v3 = a[start] + a[start+1] + a[start+2] + (sum - currSum - a[start] - a[start+1] - a[start+2]) - 
    maxPlayer1(a, currSum + a[start] + a[start+1] + a[start+2], sum, start + 3, a.length);
</code></pre>

<p>simplifies to</p>

<pre><code>    int v1 = sum - currSum - 
    maxPlayer1(a, currSum + a[start], sum, start + 1, a.length);

    int v2 = sum - currSum - 
    maxPlayer1(a, currSum + a[start] + a[start+1], sum, start + 2, a.length);

    int v3 = sum - currSum -  
    maxPlayer1(a, currSum + a[start] + a[start+1] + a[start+2], sum, start + 3, a.length);
</code></pre>

<p>We should also try to capture the meaning of <code>a[start]+...a[start+n]</code>, we can do this by introducing a new variable <code>takenInCurrentStep</code></p>

<p>Also</p>

<pre><code>  int val = 0;
  for (int i=start; i&lt;len; i++) {
    val += a[i];
  }
  return val;
</code></pre>

<p>Is needlessly complicated. We can write this as :</p>

<pre><code>  return sum-currSum;
</code></pre>

<p>Bringing this all together :</p>

<pre><code>  public static int maxPlayer1(int[] a, int takenValue, int sum, int start, int len) {
    if (len-start &lt;=3) {
      return sum-takenValue;
    }

    int valueTakenInCurrentStep = 0;
    int lasttokensTakenInCurrentStep = start;
    int valueTakenInCurrentStep = a[lasttokensTakenInCurrentStep];

    int v1 = sum - takenValue -
    maxPlayer1(a, takenValue+ valueTakenInCurrentStep, sum, lasttokensTakenInCurrentStep+1  , a.length);

    int lasttokensTakenInCurrentStep ++;
    int valueTakenInCurrentStep = valueTakenInCurrentStep + a[lasttokensTakenInCurrentStep ];

    int v2 = sum - takenValue -
    maxPlayer1(a, takenValue+ valueTakenInCurrentStep, sum, lasttokensTakenInCurrentStep+1  , a.length);

    int lasttokensTakenInCurrentStep ++;
    int valueTakenInCurrentStep = valueTakenInCurrentStep + a[lasttokensTakenInCurrentStep ];
    int v3 = sum - takenValue - 
    maxPlayer1(a, takenValue+ valueTakenInCurrentStep, sum, lasttokensTakenInCurrentStep+1  , a.length);

    return Math.max(v1, Math.max(v2, v3));
  }
}
</code></pre>

<p>The algorithm can be described as;</p>

<p>We have a method that calculates the maximum that the current player can get from the remaining of the game.  The method takes the value of all the tokens, the value of the tokens that are no longer available, the value of all tokens, the index of the first currently available token, and the total number of tokens.</p>

<p>It works by if there are 3 or less tokens left return the value of the remaining tokens, which is equal to the value of all tokens minus the value of the tokens already taken.
If there are more than 3 tokens return the maximum of the value of remaining tokens minus the amount that the other player gets if current player takes 1,2 or 3 tokens.  </p>

<p>This is a correct algorithm, and we can prove this by incursion.</p>
    </div>