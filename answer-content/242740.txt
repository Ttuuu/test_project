<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I see two main problems in this approach</p>

<ol>
<li>Creating a thread for each timer is extremely wasteful</li>
<li>Running the callback synchronously with the timer can lead to all sorts of problems as you mention.</li>
</ol>

<p>The usual design for a high-performance timer is to have a single thread that waits for the next timer to fire and queues the callback to some work-queue. The examples would be boost::asio::deadline_timer or windows' timerQueueTimer</p>

<p>Your time calculation of course would not work, there is no way you can expect a clock time to match exactly with any constant and you are going to get negative values. </p>
    </div>