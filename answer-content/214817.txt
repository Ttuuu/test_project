<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>I would like to know how professionals rate my code</p>
</blockquote>

<p>Sorry to disappoint you :P But maybe some thinks that are in my mind will help you some day. This review is in addition to <a href="https://codereview.stackexchange.com/users/145549/ralf-kleberhoff">@Ralf Kleberhoff</a></p>

<hr>

<h1>Maybe a Bug</h1>

<p>When I run </p>

<pre class="lang-java prettyprint-override"><code>public static void main(String[] args) {
    TextConfuser textConfuser = new TextConfuser("Excellent Sir");
    textConfuser.parse();
    textConfuser.confuse();
    System.out.println(textConfuser.getConfusedText());
}
</code></pre>

<p>The last word is lost..</p>

<pre class="lang-bsh prettyprint-override"><code>Elenxeclt 
</code></pre>

<h1><a href="https://www.oracle.com/technetwork/articles/java/juneau-generics-2255374.html" rel="nofollow noreferrer">Diamond Operator</a></h1>

<blockquote>
  <p>Instead of specifying the types for the object twice, the diamond operator, &lt;&gt;, can be specified as long as the compiler can infer the types from the context. As such, the diamond operator can be used when instantiating the object</p>
</blockquote>

<p>In your code base you have </p>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>this.words = new ArrayList&lt;String&gt;()
</code></pre>
  
  <pre class="lang-java prettyprint-override"><code>words = new ArrayList&lt;String&gt;();
</code></pre>
</blockquote>

<p>If you are useing Java 7+ you can simply write <code>new ArrayList&lt;&gt;()</code>.</p>

<hr>

<h1>Object Creation</h1>

<blockquote>
  <pre class="lang-java prettyprint-override"><code>while (!chars.isEmpty()) {
   Random random = new Random();
   // ..
}
</code></pre>
</blockquote>

<p>This while-loop creates for each element in <code>chars</code> a new instance of <code>Random</code>. Better would be to hoist the initialization above the while loop to initialize it only once.</p>

<pre class="lang-java prettyprint-override"><code>Random random = new Random();
while (!chars.isEmpty()) {
    // ..
}
</code></pre>

<hr>

<h1>Comments</h1>

<p>Robert C. Martin, who wrote the book "Clean Code" and many more, sad</p>

<blockquote>
  <p><a href="https://www.goodreads.com/author/quotes/45372.Robert_C_Martin?page=2" rel="nofollow noreferrer">Donâ€™t Use a Comment When You Can Use a Function or a Variable</a></p>
</blockquote>

<p>You did a good job with your comments and group them to logical units but we can extract these logical units into their own methods</p>

<pre class="lang-java prettyprint-override"><code>public void confuse() {
    parse();
    for (String word : words) {
        if (word.length() &gt; 3) {
            char firstChar = extractFirstCharacter(word);
            char lastChar = extractLastCharacter(word);
            List&lt;Character&gt; chars = extractCharactersBetweenFirstAndLastCharacter(word);
            StringBuilder confusedWord = constructConfusedWordBy(chars);
            confusedText.append(confusedWord);
        } else {
            confusedText.append(word);
        }
    }
}
</code></pre>

<hr>

<h1><a href="http://wiki.c2.com/?PrimitiveObsession" rel="nofollow noreferrer">Primitive Obsession</a>, <a href="http://wiki.c2.com/?FeatureEnvySmell" rel="nofollow noreferrer">Feature Envy</a> &amp; <a href="https://en.wikipedia.org/wiki/Value_object" rel="nofollow noreferrer">Value Object</a></h1>

<blockquote>
  <p>Primitive Obsession is using primitive data types to represent domain ideas. For example, we use a String to represent a message [...]</p>
</blockquote>

<p>Our Primitive Obsession is <code>word</code>. It is from type <code>String</code> and we can easily create a new class <code>Word</code>, which would be a Value Object.</p>

<blockquote>
  <p>The whole point of objects is that they are a technique to package data with the processes used on that data. A classic [code] smell is a method that seems more interested in a class other than the one it is in.</p>
</blockquote>

<p>This quote means in our case that <code>TextConfuser</code> is more busy with manipulating a <code>word</code> that to confuse hole sentence.</p>

<pre class="lang-java prettyprint-override"><code>public void confuse() {
    parse();
    for (Word word : words) {
        Word confused = word.randomizeReadable();
        confusedText.append(confused.get())    
    }
}
</code></pre>

<p>The method <code>randomizeReadable</code> on <code>Word</code> has the hole logic how to manipulate a string.</p>
    </div>