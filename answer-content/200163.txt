<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>initialState</code> and <code>randomState</code> together create two <code>RandomT</code> layers.</p>

<pre><code>import Data.NumInstances

data Point = Point
  { pointR :: Int
  , pointFill :: Colour
  , pointStroke :: Colour
  , pointXY :: (Int, Int)
  }

randomState :: MonadIO m =&gt; m KmeansState
randomState = (seedFromTime &gt;&gt;=) $ runRandomT $ do
  nClusters &lt;- randomR (2, 5)
  nCentroids &lt;- randomR (2, 5)
  fmap assignClusters $ KmeansState
    &lt;$&gt; (initialClusters nClusters =&lt;&lt; randomR (400, 1200))
    &lt;*&gt; (mapM randomCentroid $ take nCentroids
          [Red, Green, Orange, Blue, Purple, Teal])

initialClusters :: MonadIO m =&gt; Int -&gt; Int -&gt; RandomT m [Point]
initialClusters numClusters totalPoints = do
  centers &lt;- replicateM numClusters randomPoint
  sequence $ take totalPoints $
    concatMap (generateCluster (totalPoints `div` (numClusters + 2) - 1)) centers
    ++ repeat randomPoint

generateCluster :: MonadIO m =&gt; Int -&gt; Point -&gt; [RandomT m Point]
generateCluster numPoints pt = (pt:) $ replicate numPoints $ 
  fmap (Point 2 Red None) $ (,) &lt;$&gt; randomR xR &lt;*&gt; randomR yR where
    (originX, originY) = pointXY pt
    (spreadX, spreadY) = (width, height) `div` numPoints * 3
    xR = (max 1 $ originX - spreadX, min width  $ originX + spreadX)
    yR = (max 1 $ originY - spreadY, min height $ originY + spreadY)

randomPoint :: MonadIO m =&gt; RandomT m Point
randomPoint = fmap (Point 2 None None) $ (,)
  &lt;$&gt; randomR (centreX - offsetX, centreX + offsetX)
  &lt;*&gt; randomR (centreY - offsetY, centreY + offsetY)
</code></pre>

<p><a href="http://hackage.haskell.org/package/random-1.1/docs/System-Random.html" rel="nofollow noreferrer"><code>RandomT</code></a> already exists.</p>
    </div>