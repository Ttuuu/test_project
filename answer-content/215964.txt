<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>API and Reusability</h2>

<p><code>solveMaze</code> takes both a <code>Maze maze</code> and <code>Node start</code>, even though <code>Maze</code> defines a <code>start</code> position already.</p>

<p>The use of the static <code>q</code> Stack means it is not reusable: if a solution is found, then it will remain populated, and interfere with the next run. You can also not reuse <code>Maze</code>s, because <code>solveMaze</code> replaces the empty spaces with <code>-1</code>: it would be much nicer if it did not modify the <code>Maze</code> it is given or, at the very least, reset the <code>Maze</code> once it has finished.</p>

<p>Given you don't use <code>q</code> outside of <code>solveMaze</code>, there is no sense in making it a member of the class, when it could be a local variable, created on demand. It would be nice to see the maze-solving logic in its own class, rather than mixed up with the calling code.</p>

<h2>Magic numbers</h2>

<p><code>0</code>, <code>9</code>, <code>8</code>, <code>-1</code>... these are all meaningless to anyone who might be trying to use your classes and methods without having first inspected your code. They are a maintainability concern, because changing a <code>9</code> in one place has no effect in any of the others, and a find-and-replace for <code>9</code> is a nightmare waiting to happen. Much better to use meaningful constant values:</p>

<pre><code>public static final int EmptyCell = 0;
public static final int StartCell = 8;
public static final int EndCell = 9;
public static final int VisitedCell = -1;
</code></pre>

<p>You could also hide the implementation details as best as possible. <code>isFree</code>, for example, could be a member of <code>maze</code>. <code>setVisited</code> could be added as a member, so that you can do away with <code>maze.getMaze2D()[p.x][p.y] = -1;</code>.</p>

<h2><code>try ... catch</code></h2>

<p>The <code>try ... catch</code> in <code>main</code> pretty much swallows any exception that might occur while reading the file, and then proceeds to allow the rest of the code to run, as though nothing has gone wrong. I'd prefer that this code printed the exception and stack-trace and then exited cleanly; otherwise, the code that follows after it is likely to fail on the invalid input it will receive, and the original source of the problem will be less apparent.</p>

<p>You should also close the <code>BufferedReader</code> in a <code>finally</code> block, to ensure this unmanaged resource is freed as soon as possible; or, better, use a try-with-resources statement, which make it difficult to misuse the <code>BufferedReader</code> (e.g. by forgetting to close it, or by using it when it has already been closed)</p>

<p>The <code>try ... catch</code> in <code>printMazeResult</code> is rather concerning: it seems that it's purpose is to deal with the case where <code>p</code> is <code>null</code> because <code>solveMaze</code> returned <code>null</code>. This, however, is wholly unclear from the code itself, and the <code>try ... catch</code> is liable to obscure bugs inside the code which are unrelated to whether the maze was or was note solved. You should use an explicit check to determine whether the maze was solved:</p>

<pre><code>Boolean mazeIsSolved = p != null
</code></pre>

<p>(this is a better name than <code>mazeState</code>, which sounds like a transient concern)</p>

<h2>Wrapping</h2>

<p>The 'wrapping' code looks needlessly complicated. I'd be strongly inclined to remove it completely, and instead perform 'wrapping' in the NESW checks (see below).</p>

<p>The wrapping code itself would be much nicer if <code>maze</code> exposed the width and height of the <code>maze</code>, as the code is currently dotted with <code>maze.getMaze2D()[maze.getMaze2D().length - 1]</code>, which is just a distraction from its real purpose. Many other places in the code would benefit from such methods also.</p>

<p>I don't think <code>isWrappingBorder</code> is a very good name, since it does a lot more than determine whether it is a wrapping border. It's comment (which would ideally be <a href="https://en.wikipedia.org/wiki/Javadoc" rel="nofollow noreferrer">JavaDoc</a>) also fails to mention that it will return <code>null</code> if it is not a wrapping Border. More importantly, I think it is deficient in the cases where you are against both borders, as it can only return a single value.</p>

<p>The <code>return nextNode = ...</code> theme is confusing: you assign a local variable only to return it immediately. There is no value in the local variable, and you can safely remove it.</p>

<h2>NESW movement</h2>

<p>Your have basically the same piece of code here four times, just with a different <code>+/- 1</code>: put this in a method, so that there is one reusable version to maintain, and it is easier to follow the logic in <code>solveMaze</code> without worrying about the details. Something like this would work:</p>

<pre><code>static void tryMove(Maze maze, Node p, Stack&lt;Node&gt; q, int dx, int dy) {
    // offset and wrap
    int x = (p.x + dx + maze.getWidth()) % maze.getWidth();
    int y = (p.x + dy + maze.getHeight()) % maze.getHeight();

    if (isFree(maze, x, y)) {
        maze.getMaze2D()[p.x][p.y] = -1;
        Node nextP = new Node(x, y, p);
        q.push(nextP);
    }
}
</code></pre>

<p>Using it is then just a case of:</p>

<pre><code>tryMove(maze, p, q, -1, 0);
tryMove(maze, p, q, +1, 0);
tryMove(maze, p, q, 0, -1);
tryMove(maze, p, q, 0, +1);
</code></pre>

<p>The following line appears once for each direction; it should presumably be run even if no move can be made, and doesn't need to be run for each in turn.</p>

<pre><code>maze.getMaze2D()[p.x][p.y] = -1;
</code></pre>

<h2>Naming</h2>

<p>Your naming could be better. <code>q</code>, for example, is pretty meaningless. I guess that <code>Node p</code> stands for 'point'. It's also odd to see <code>x</code> and <code>y</code> as the <code>row</code> and <code>column</code> indices, rather than the other way round (e.g. normally the x-axis is east-west, not north-south).</p>

<p>In some places you use <code>i</code> and <code>j</code> as loop variables, in other <code>i</code> and <code>n</code>: <code>n</code> <em>usually</em> means a count, <code>j</code> is a better choice; however, <code>i</code> and <code>j</code> do not convey all that much; <code>(r)ow</code> and <code>(c)ol</code> would be more meaningful.</p>

<h2><code>Maze</code> constructor</h2>

<p>The parameter <code>ArrayList&lt;String&gt; mazeString</code> is not a <code>String</code>, but rather a collection of lines. You might also consider taking the abstract <code>List&lt;String&gt;</code>, rather than requiring the particular derived typed, so that your interface is easier to use.</p>

<p>The following is pretty unreadable, and the line-break is not in a very nice place:</p>

<pre><code>this.maze2D = new int[(Integer.valueOf(mazeString.get(0).split(" ")[1]))][(Integer
    .valueOf(mazeString.get(0).split(" ")[0]))];
</code></pre>

<p>Instead of trying to squeeze all of that onto one line, break it up:</p>

<pre><code>string[] dimensionData = mazeString.get(0).split(" ");
int width = Integer.valueOf(dimensionData[0]);
int height = Integer.valueOf(dimensionData[1]);

this.maze2D = new int[width][height];
</code></pre>

<p>Now it is instantly recognisable what the code is meant to do, and the details are laid out plainly, and without repetition (repeated code is a maintainability concern, as all instances have to kept consistent).</p>

<p>Performance shouldn't be an issue here, but little things like re-splitting whole lines of input for each entry should be avoided, as they can (as in this instance) turn a simple quadratic-complexity operation into a cubic cost, potentially creating problems in seemingly unlikely places:</p>

<pre><code>for (int i = 0; i &lt; this.maze2D.length; i++) {
    String[] lineData = mazeString.get(i + 3).split(" "); // i + 3 to offset first 3 lines of text file.

    for (int j = 0; j &lt; this.maze2D[i].length; j++) {
        this.maze2D[i][j] = Integer.valueOf(lineData[j]);
    }
}
</code></pre>

<h2>More <code>Maze</code></h2>

<p><code>toString</code> should <em>not</em> be writing out to standard output!</p>

<pre><code>@Override
public String toString() {
    System.out.println(Arrays.deepToString(this.maze2D)); // no!
    return (this.maze2D.toString());
}
</code></pre>

<p>Your <code>setMaze</code> method doesn't make much sense, as it could well disagree with the <code>start</code> and <code>end</code> fields, <em>hopefully</em> leading to a crash down-the-line, but just as likely leading to incorrect operation of the class and a meaningless result.</p>

<p>I also don't like <code>maze2D = maze2d</code>: it's far too easy get wrong. You are also inconsistent with your use of <code>this.maze2D</code>, which would be a better solution here.</p>

<h2>Accessibility</h2>

<p>You specify <code>private</code> accessors in some places and not in others; generally it's nice to see them everywhere, because it is then unambiguous to the reader that this was the intention (as opposed to 'forgetting' the access modifier, and leaving it as the default), and is nice for people who may not use the language every-day, or may use many languages with different defaults (I, for example - coming from C# - had forgotten the default field accessibility was <code>package</code> (or whatever it is) and not <code>private</code>, which is a very important difference, e.g. in <code>Node</code>...).</p>

<h2><code>Node</code></h2>

<p><code>x</code>, <code>y</code>, and <code>parent</code> are not <code>private</code>: indeed, you depend on being able to access <code>x</code> and <code>y</code> from outside the class, while you provide a public getter for <code>parent</code>. I would be strongly inclined to make <code>Node</code> immutable, by making all of these fields <code>final</code>. Then you can choose whether to keep <code>x</code> and <code>y</code> as (genuinely) <code>public</code> fields, or make them <code>private</code> (like <code>parent</code> should be) and provide an appropriate getter.</p>

<p>I don't like the repurposing of <code>Node</code> as a <code>Point</code> or <code>Coordinates</code> structure; it's carrying around a <code>null</code> Parent everywhere, which is completely meaningless.</p>

<p>Why does <code>Node()</code> have a default constructor? It is never used, and doesn't look like it produces a meaningful node: I would remove it.</p>

<h2>Misc</h2>

<ul>
<li><p>Why all the empty-lines in <code>Node</code>?</p></li>
<li><p>Why are <code>returnStart</code> and <code>returnEnd</code> not called <code>getStart</code> and <code>getEnd</code>?</p></li>
<li><p>Why is <code>results</code> a parameter to <code>printMazeResult</code> instead of creating it itself?</p></li>
<li><p>I have no idea what <code>isSparse</code> is meant to achieve.</p></li>
</ul>
    </div>