<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Feedback</h1>

<p>The diverse colors and UI controls look good- nice work! And good work chaining the animation calls for the slide-up/down text (i.e. <code>#text3</code>).</p>

<h1>Suggestions</h1>

<h2>Javascript/jQuery</h2>

<h3>Cache DOM references</h3>

<p>Instead of looking up the DOM elements every time they are used, they can be stored in a variable and the variable can be referenced. Use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const" rel="nofollow noreferrer">const</a> unless <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const#Browser_compatibility" rel="nofollow noreferrer">Browser compatibility</a> is an issue - then use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var" rel="nofollow noreferrer">var</a>.</p>

<pre><code>$(document).ready(function(){
    const text1Element = $("text1");
    $("#button1").click(function(){
        text1Element.toggle();
    });
</code></pre>

<p>One can consolidate the DOM-ready callbacks (I.e. <code>$(document).ready(function(){ });</code>) into one, instead of one for each UI initialization call. </p>

<pre><code>$(document).ready(function(){
    $('[data-toggle="tooltip"]').tooltip();
    //button 1
    $("#button1").click(function(){
        $("#text1").toggle();
    });

    //button 2
    $("#button2").click(function(){
        $("#text2").fadeToggle();
    });

    //button 3
    $("#button3").click(function(){

    //Had to break this line into 2 so I could post this, wouldn't let me indent/space right
    $("#text3").fadeIn().slideUp(500).slideDown(500)
    .slideUp(500).slideDown(500).fadeOut();
});
</code></pre>

<h3>Event delegate</h3>

<p>An <a href="https://learn.jquery.com/events/event-delegation/" rel="nofollow noreferrer">event delegate</a> could be used instead of adding a click handler to each button element. That way additional elements could be added without needing to add event listeners to each one- this becomes especially advantageous if elements are added and removed from the DOM throughout the event lifecycle of the page (otherwise memory issues could result if event listeners aren't removed from elements after they are removed from the DOM).</p>

<pre><code>$(document).ready(function() {
  var text1 = $("#text1");
  var text2 = $("#text2");
  var text3 = $("#text3");

  $(this).click(function(clickEvent) {
    switch ($(clickEvent.target).attr("id")) {
      case "button1":
        text1.toggle();
        break;
      case "button2":
        text2.fadeToggle();
        break;
      case "button3":
        text3.fadeIn().slideUp(500).slideDown(500)
            .slideUp(500).slideDown(500).fadeOut();
        break;
    }
  });
</code></pre>

<h3>DOM-ready callback syntax</h3>

<p>And while that syntax of <code>$(document).ready()</code> still works with the latest version (i.e. 3.2.1 at the time of typing), the recommended syntax is simply <code>$(function() {})</code><sup><a href="http://api.jquery.com/ready/" rel="nofollow noreferrer">1</a></sup>.</p>

<h2>CSS</h2>

<p>The <em>height</em> and <em>margin</em> styles could be removed from the <code>#main_foot</code> selector if that selector is combined with the selector for <code>#main_head</code>:</p>

<pre><code>#main_head,
#main_food {
    height: 150px;
    margin: 0;
}

#main_foot {
    background-color:#3333ff;
    position: absolute;
    left: 0;
    right: 0;
}
</code></pre>

<p>The same applies to the text selectors (i.e. <code>#text1, #text2, #text3</code> could also just use one class for all three)- the styles could be consolidated:</p>

<pre><code>#text1,
#text2,
#text3 {
    padding-left: 10px;
    padding-top: 10px;
    display:none;
}
</code></pre>

<hr>

<p><sup>1</sup><sub><a href="http://api.jquery.com/ready/" rel="nofollow noreferrer">http://api.jquery.com/ready/</a></sub></p>
    </div>