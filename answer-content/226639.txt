<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Comments on your approach</h2>

<p>The most obvious thing to me is that you're already inserting all of your data into the temp table; why not just join to it? You can dynamically pivot into a better, strongly-typed table instead (<a href="https://stackoverflow.com/a/159803/3076272">see this post</a>), and then you don't need to muck around with the parameter stuff.</p>

<p>I also think I think you're overcomplicating this by a lot. Ultimately, the best way to write dynamic SQL is to:</p>

<ol>
<li>Trust no user inputs</li>
<li>Validate all user inputs </li>
<li>Validate all inputs, even if they come out of a table/procedure you control. You never know how a different attack vector could affect you indirectly.</li>
<li>Limit the scope of what a user can input</li>
</ol>

<p>Do you actually <em>really</em> need to let anyone run any filter on any column on any table? I suspect that you don't actually need that much freedom.</p>

<p>If I'm correct, then you can likely make this much safer by maintaining a list of valid table/column combinations that can be filtered (still verify per #3 above), and immediately throw out junk and identify someone trying to do something that isn't kosher. You could even create a stored procedure per-table that has strongly typed input variables, and then you have parameterized SQL all the way down with almost no dynamic SQL required.</p>

<hr>

<h2>Coding style</h2>

<p>Here are just a few things I think could be handled with better style:</p>

<pre><code>SELECT @stableName = o.name,
       @stableId = o.object_id
  FROM sys.objects o
  WHERE o.name = @TableName
    AND OBJECT_SCHEMA_NAME( o.object_id ) = @SchemaName;
</code></pre>

<p>This is cleaner with <code>sys.tables</code> and <code>SCHEMA_ID</code></p>

<pre><code>SELECT @sTableName = tables.name,
       @sTableId = tables.object_id
  FROM sys.tables 
  WHERE tables.name = @TableName
    AND tables.schema_id = SCHEMA_ID( @SchemaName );        
</code></pre>

<p>Exists checks can often be replaced with joins, which are easier to read</p>

<pre><code>IF EXISTS ( SELECT NULL
              FROM #RawData d
              WHERE NOT EXISTS ( SELECT NULL
                                   FROM sys.columns c
                                   WHERE c.object_id = @stableId
                                     AND c.name = d.ParameterName ))


IF EXISTS( SELECT 1
             FROM #RawData RD
               LEFT OUTER JOIN sys.columns columns
                 ON columns.object_id = @sTableId
                    AND columns.name = RD.ParameterName 
             WHERE columns.object_id IS NULL )
</code></pre>

<p>I also think you would benefit from breaking this up more; for example, you could make this into a table valued function. Also, since you're using <code>SELECT INTO</code> you can use the <a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/identity-function-transact-sql?view=sql-server-2017" rel="nofollow noreferrer"><code>IDENTITY</code></a> function instead of <code>ROW_NUMBER</code></p>

<pre><code>SELECT ROW_NUMBER() OVER ( ORDER BY ( SELECT NULL )) Id,
       c.name ColumnName,
       d.ParameterValue ParameterValue,
       c.user_type_id DataTypeId,
       t.name DataTypeName,
       c.max_length MaxLength,
       c.precision Precision,
       c.scale Scale,
       dbo.ufnGetFormattedDataType( t.name, c.precision, c.scale, c.max_length ) ParameterDataType
  INTO #ParameterData
  FROM #RawData d
    INNER JOIN sys.columns c
      ON d.ParameterName = c.name
    INNER JOIN sys.types t
      ON c.user_type_id = t.user_type_id
  WHERE c.object_id = @stableId;
</code></pre>

<p>I don't really like the syntax of</p>

<pre><code>SET @variable = ( SELECT &lt;&lt;whatever&gt;&gt; )
</code></pre>

<p>Instead I prefer</p>

<pre><code>SELECT TOP( 1 )
       @variable = &lt;&lt;whatever&gt;&gt;
  ...
  ORDER BY ( SELECT NULL );
</code></pre>

<p>If you <code>PIVOT</code> here you can even do it all in one table access.</p>
    </div>