<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think what you want can be done by using <code>groupby</code> correctly.</p>

<p>First, let's generate some sample data:</p>

<pre><code>def to_seconds(t):
    return (t.hour * 60 + t.minute) * 60 + t.second

labels = ["night", "morning", "afternoon", "evening"]
bins = to_seconds(pd.to_datetime(["00:00:00", "06:00:00", "12:00:00", "18:00:00", "23:59:59"]))

date = pd.date_range("2020-02-01 00:00:00", "2020-02-03 23:59:59", freq="H")
df = pd.DataFrame({"date": date, "steps": np.random.randint(0, 100, len(date))})
df["day_segment"] = pd.cut(to_seconds(df.date.dt), bins, labels=labels, right=False)
#                   date  steps day_segment
# 0  2020-02-01 00:00:00      8       night
# 1  2020-02-01 01:00:00     43       night
# 2  2020-02-01 02:00:00     23       night
# 3  2020-02-01 03:00:00     84       night
# 4  2020-02-01 04:00:00     32       night
# ..                 ...    ...         ...
# 67 2020-02-03 19:00:00     36     evening
# 68 2020-02-03 20:00:00     76     evening
# 69 2020-02-03 21:00:00     51     evening
# 70 2020-02-03 22:00:00     99     evening
# 71 2020-02-03 23:00:00      4     evening
</code></pre>

<p>And then you just need to group by <code>(date, day_segment)</code>:</p>

<pre><code>df.groupby([date.date, "day_segment"]).steps.agg(["sum", "max", "min", "std", "mean"])
#                         sum  max  min        std       mean
#            day_segment                                     
# 2020-02-01 night        263   84    8  29.403515  43.833333
#            morning      243   91    1  39.943710  40.500000
#            afternoon    364   88   28  26.919633  60.666667
#            evening      247   99    0  32.021347  41.166667
# 2020-02-02 night        300   90    1  33.148152  50.000000
#            morning      278   96    1  37.011710  46.333333
#            afternoon    340   97   25  28.465183  56.666667
#            evening      418   95    9  33.773757  69.666667
# 2020-02-03 night        458   92   60  13.894843  76.333333
#            morning      211   68   15  21.949184  35.166667
#            afternoon    426   95   36  21.042814  71.000000
#            evening      281   99    4  36.207274  46.833333
</code></pre>

<p>The list of aggregation functions can be built from the user input via some dictionary translation and the writing to file can be done by filtering on the day_segment:</p>

<pre><code>stats.reset_index(level=0).loc["evening"]
#                 level_0  sum  max  min        std       mean
# day_segment                                                 
# evening      2020-02-01  247   99    0  32.021347  41.166667
# evening      2020-02-02  418   95    9  33.773757  69.666667
# evening      2020-02-03  281   99    4  36.207274  46.833333
</code></pre>
    </div>