<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Through clever usage of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" rel="nofollow noreferrer">destructuring</a> and using objects to store possible events, you can do this.</p>
<pre><code>function focus(key){
  const {activeElement:{[key]: elementSibling} = {}} = document;
  if(elementSibling){
    elementSibling.focus();
  }
}

const ACTIONS = {
  ArrowDown: () =&gt; focus('nextElementSibling'),
  ArrowUp: () =&gt; focus('previousElementSibling'),
  Enter: (e) =&gt; myCustomEvent(e)
}

function handleKeyDown (e) {
  const handler = ACTIONS[e.key];
  if(handler) {
    e.preventDefault();
    handler(e);
  }
}
</code></pre>
<p>Here is a working example:</p>
<p></p><div class="snippet" data-lang="js" data-hide="true" data-console="true" data-babel="false">
<div class="snippet-code snippet-currently-hidden">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function focus(key){
  const {activeElement:{[key]: elementSibling} = {}} = document;
  if(elementSibling){
    elementSibling.focus();
  }
}

const ACTIONS = {
  ArrowDown: () =&gt; focus('nextElementSibling'),
  ArrowUp: () =&gt; focus('previousElementSibling'),
  Enter: (e) =&gt; myCustomEvent(e)
}

function handleKeyDown (e) {
  console.log(e.key, e.target);
  const handler = ACTIONS[e.key];
  if(handler) {
    e.preventDefault();
    handler(e);
  }
}

// simulating an event
window.addEventListener('keyup', handleKeyDown);</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;h3&gt;Click on an element then press ArrowUp or ArrowDown&lt;/h3&gt;
&lt;input type="text"/&gt;
&lt;input type="text"/&gt;
&lt;input type="text"/&gt;
&lt;input type="text"/&gt;</code></pre>
</div>
</div>

    </div>