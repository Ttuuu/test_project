<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ul>
<li><p><code>from ... import *</code> is discouraged by a large amount of people.</p>

<p>Currently it's easy to see what comes from <code>Filters</code>, as you only have one. But if you have two or more than it just becomes impossible to understand.</p></li>
<li><p>Your code doesn't look Pythonic, unfortunately this is because <code>Spotfire</code> has violated <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> making anything that uses it look, to my eyes, ugly.</p>

<p>Whilst I'm not a fan of the style you are using, I would like to congratulate you on sticking to one style. Well done.</p></li>
<li><p>If the comments help you then keep them. However if you wrote them to help us then I would recommend that you remove them.</p></li>
<li>You have lots of un-needed variables; <code>page</code>, <code>theFilter</code>, <code>theFilterPT</code>.</li>
<li>Functions are the bread and butter of programming. And your code is in some dire need of functions.</li>
</ul>

<p>In your code we see that you have the following definitions:</p>

<blockquote>
  <pre class="lang-py prettyprint-override"><code>#get information for the first filter
theFilter = filterPanel.TableGroups[0].GetFilter("Reason")
lbFilter = theFilter.FilterReference.As[ListBoxFilter]()
#get information for the second filter
theFilter2 = filterPanel.TableGroups[1].GetFilter("Reason")
lb2Filter = theFilter2.FilterReference.As[ListBoxFilter]()
</code></pre>
  
  <pre class="lang-py prettyprint-override"><code>theFilterPT = filterPanel.TableGroups[0].GetFilter("Type")
lbFilterPT = theFilterPT.FilterReference.As[ListBoxFilter]()

theFilter2PT = filterPanel.TableGroups[1].GetFilter("Type")
lb2FilterPT = theFilter2PT.FilterReference.As[ListBoxFilter]()
</code></pre>
</blockquote>

<p>We can see clearly that only two things change between them; <code>[0]</code> and <code>[1]</code>, and "Reason" and "Type".
I personally think <code>filterPanel.TableGroups[0]</code> shouldn't be in the function and we can just pass the filter in the function. This can result in:</p>

<pre class="lang-py prettyprint-override"><code>def getGroup(tableGroup, filter):
    return (
        tableGroup
            .getFilter(filter)
            .FilterReference
            .As[Filters.ListBoxFilter]()
    )
</code></pre>

<p>After this we can see you've written something else twice too.</p>

<blockquote>
  <pre class="lang-py prettyprint-override"><code>n = []
for value in lbFilter.SelectedValues:
    n.append(value)
if len(n)&gt;0:
    lb2Filter.IncludeAllValues = False
    lb2Filter.SetSelection(lbFilter.SelectedValues)
#if no selections are made, reset the second filter
else:
    lb2Filter.Reset()
</code></pre>
</blockquote>

<p>Firstly creating <code>n</code> can be simplified simply as <code>list(lbFilter.SelectedValues)</code>.
You don't need to use <code>len(n)&gt;0</code> as just <code>if n:</code> does that check, with a list, for you.
Finally I find it easier to have the smaller code block first, and so flipped the if.</p>

<pre class="lang-py prettyprint-override"><code>def filterGroups(tableGroups, filter):
    group1 = getGroup(tableGroups[0], filter)
    group2 = getGroup(tableGroups[1], filter)

    if not list(group1.SelectedValues):
        group2.Reset()
    else:
        group2.IncludeAllValues = False
        group2.SetSelection(group1.SelectedValues)
</code></pre>

<p>Finally I would wrap everything in a <code>main</code> function and you'd get the following:</p>

<pre class="lang-py prettyprint-override"><code>import System
from Spotfire.Dxp.Application import Filters, Visuals


def getGroup(tableGroup, filter):
    return (
        tableGroup
            .getFilter(filter)
            .FilterReference
            .As[Filters.ListBoxFilter]()
    )


def filterGroups(tableGroups, filter):
    group1 = getGroup(tableGroups[0], filter)
    group2 = getGroup(tableGroups[1], filter)

    if not list(group1.SelectedValues):
        group2.Reset()
    else:
        group2.IncludeAllValues = False
        group2.SetSelection(group1.SelectedValues)


def main():
    tableGroups = (
        Filters
            .Application
            .Document
            .ActivePageReference
            .FilterPanel
            .TableGroups
    )
    filterGroups(tableGroups, "Reason")
    filterGroups(tableGroups, "Type")


if __name__ == '__main__':
    main()
</code></pre>
    </div>