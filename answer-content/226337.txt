<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
<pre><code>        if (k &gt; 0 &amp;&amp; head != null) {
            ...
            return RotatedList;

        }

        return head;
</code></pre>
</blockquote>

<p>would be clearer (and more consistent with the other special case) as</p>

<pre><code>        if (k &lt;= 0 || head == null) {
            return head;
        }

        ...
        return RotatedList;
</code></pre>

<p>(although really if <code>k &lt; 0</code> I think it should <code>throw new ArgumentOutOfRangeException(nameof(k))</code>).</p>

<hr>

<blockquote>
<pre><code>            ListNode tail = head,
            RotatedList = null,
            kthnode = head,
            kthPrevNode = head;
</code></pre>
</blockquote>

<p>Most of these don't need to be declared so early. Declaring variables as late as possible (and, more generally, in the narrowest scope possible) helps to reduce cognitive load when maintaining the code.</p>

<hr>

<blockquote>
<pre><code>            int listLength = 0;
            while (tail != null) {
                listLength += 1;
                tail = tail.next;
            }
</code></pre>
</blockquote>

<p>This would be worth factoring out as a separate method <code>Length(ListNode head)</code>.</p>

<hr>

<blockquote>
<pre><code>            k = k % listLength;
            if (k == 0 || listLength == 0) {
                return head;
            }
</code></pre>
</blockquote>

<p>This is sort-of buggy. If <code>listLength == 0</code> then <code>k % listLength</code> will throw an <code>ArithmeticException</code>. <em>However</em>, you can never reach here in that case, because <code>listLength == 0</code> is equivalent to <code>head == null</code>, and that was already handled in the first special case. To remove confusion, delete <code>|| listLength == 0</code>. If you want to validate that condition, insert <code>System.Diagnostics.Debug.Assert(listLength &gt; 0);</code> <em>before</em> the <code>%</code> line.</p>

<hr>

<blockquote>
<pre><code>            for (int i = 0; i &lt; listLength - k; i++) {

                kthPrevNode = kthnode;

                kthnode = kthnode.next;

            }
</code></pre>
</blockquote>

<p>It's not actually necessary to track two nodes here. The invariant is that <code>kthPrevNode.next == kthnode</code>, so it suffices to track <code>kthPrevNode</code>.</p>

<p>Also, the blank lines seem excessive to me.</p>

<hr>

<blockquote>
<pre><code>            RotatedList = kthnode;
</code></pre>
</blockquote>

<p>It's conventional in C# that local variable names start with a lower case letter, so to avoid confusion I would rename <code>RotatedList</code> to <code>rotatedList</code> (or perhaps <code>rotatedHead</code>).</p>

<hr>

<p>There are only two things where I can see that the efficiency can be improved: one is eliminating <code>kthnode</code> in the loop, as commented above; the other would be to hang on to the last node when finding the length, so that you don't need to find it a second time in the last few lines. (That would imply changing the factored out method to return an <code>(int, ListNode)</code> tuple).</p>

<p>As for time complexity, it's already optimal: linear time. Good job!</p>
    </div>