<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>If this was my task and there were no case-sensitivity issues to mitigate, then I wouldn't use <code>preg_replace()</code> or <code>str_replace()</code> to perform the desired "<strong>str</strong>ing <strong>tr</strong>anslations".</p>
<p>A possible concern with these functions -- though probably not a large threat for this case -- is that these tools will potentially replace replaced substrings.  Tinfoil hats on please...</p>
<pre><code>echo str_replace(
        ['{one}', '{two}'],
        ['{two}', 'boo'],
        'I got a {one}-{two}'
    );
// I got a boo-boo
// not: I got a {two}-boo
</code></pre>
<p>This risk is eliminated by calling upon <code>strtr()</code>. It will seek the longest replacement candidate as it traverses the string.</p>
<p>It can take your url as the first parameter and an associative array as the second parameter.</p>
<p>As for how do you allow your script to better scale... Using an associative array of placeholders and replacement values will go far to improve scalability / maintainability.</p>
<p>Not only will an associative array mean that your function/methods will not suffer from excessively long lists of parameters, the array can be very easily extended, merged with another array, or reduced using native calls.</p>
<pre><code>$translations = [
    '{one}' =&gt; '{two}',
    '{two}' =&gt; 'boo',
];
echo strtr('I got a {one}-{two}', $translations);
// I got a {two}-boo
</code></pre>
<p>This is definitely how I would do it in my project -- very clean, very readable, very easy to maintain, very flexible, very reliable.</p>
    </div>