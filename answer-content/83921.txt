<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>When it comes to multidimensional vectors I usually suggest two approaches.</p>
<h2>1. vector/array (C++11 and later)</h2>
<p>This only works, when the inner dimensions are fixed and only the outer is runtime dynamic. In the end it comes down to something like this:</p>
<pre><code>std::vector&lt;std::array&lt;T, N&gt;&gt; field;
</code></pre>
<p>In your case a Vector3d would either derive from std::array&lt;double, 3&gt; or contain one.</p>
<h2>2. simple vector</h2>
<p>This approach simply creates a one dimensional vector with <code>X * Y</code> size.
The element <code>(x, y)</code> can then be addressed with <code>vec[y * X + x]</code>. This works also with the older C++ standard. Although I think this solution might not work in your setup.</p>
<h3>Bonus</h3>
<p>I just want to highlight @Yakk's comment. Your Vector3d could look like this:</p>
<pre><code>class Vector3d
{
public:
    // stuff
    // ...
private:
    double components_[3];
};
</code></pre>
<p>This way the memory would also be contigous.</p>
    </div>