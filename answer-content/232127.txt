<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In addition to the <a href="https://codereview.stackexchange.com/a/232123/15863">great answer</a> already provided by <a href="https://codereview.stackexchange.com/users/716/l0b0">l0b0</a>, a few comments.</p>

<h2>1. code structure</h2>

<p>Some blocks could be extracted to functions. For instance, the following block inside <code>encrypt</code>:</p>

<pre><code>    new_key_thing = []
    new_key_thing.append(i[0])
    new_key_thing.append(i[1:3])
    new_key_thing.append(i[3:])
    new_key.append(new_key_thing)
</code></pre>

<p>Could be refactored to:</p>

<pre><code>new_key.append(do_transformation(i))
</code></pre>

<p>Re-iterating on the new code, you could use Python's <code>map</code> operation, which is very handy, or you could use Python's cool feature of <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list comprehension</a>. Here's an example of refactoring (note that I also renamed from <code>i</code>, which is more used to be an index number to <code>k</code>, which indicates it's a key):</p>

<pre><code>newkey = [do_transformation(k) for k in key_list]
</code></pre>

<h2>2. Magic numbers</h2>

<p>In some places the code includes magic numbers like 3, 5 and more. Instead of using those numbers as are, try to give them meaningful names.</p>

<p>For instance, dealing with magic number 5 (I hope I got the intention correctly, but even if that's not the case, you can see what the general idea is):</p>

<pre><code>CHUNK_SIZE = 4 

while not key == '':
    key_list.append(key[:(CHUNK_SIZE + 1)])
    key = key[(CHUNK_SIZE + 1):]
</code></pre>
    </div>