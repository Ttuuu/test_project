<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd say in general, it is quite decent code. Nothing written too complicated, variables are named so that I understand it and 'stuff' which belongs together is mostly separated within classes.</p>
<h3>Some java coding conventions:</h3>
<ul>
<li>spaces after commas (e.g. Demo, creation of Combatant), in front of opening curly brackets, ...</li>
<li>interfaces: Do not need public modifier in methods, they are public per se</li>
<li>else is on the same line as the closing curly bracket</li>
<li>best you check the code conventions, usually IDE's do have a formatter template (-&gt; always format your code)</li>
</ul>
<h3>Comments</h3>
<ul>
<li>Comments do not end with '//'.</li>
<li>Comments such as 'instance variables' or 'methods' are considered "clutter". There are conventions and guidelines on how order your code.</li>
</ul>
<h3>Combatant</h3>
<ul>
<li>maxHealth is always 10 and never gets changed, so you might want to declare that as a constant.</li>
<li>The <code>takeTurn</code> method calls <code>performAction</code>. I personally prefer smaller methods over one large and therefore complicated methods, but I also prefer one small method over two small methods. And since <code>performAction</code> is only called by <code>takeTurn</code>, I don't see any reason why not call <code>battleAction</code> within the <code>takeTurn</code> method.</li>
<li>decreaseHealth / increaseHealth: Formatting ...</li>
</ul>
<h3>Actions</h3>
<ul>
<li>toString is already a method in the <code>Object</code> class. It is either not needed, if you want to call toString, but I usually prefer a separate method.</li>
<li>The Actions are displaying text and I don't think that's their job. Just think about not having a console client, or let's say, a window ui <em>and</em> console client and how you'd solve the displaying of data in that case.</li>
<li>The <code>execute</code> method have two <code>Combatant</code> parameters. But a self-heal doesn't work like that. So you basically have to pass a target in the <code>HealAction</code>, but you don't use it. I think in that case, it is better to pass the needed parameters to the constructor of the actions. And also maybe there will be a 'group attack' action, the interface therefore cannot do that, since it needs n targets.</li>
</ul>
<h3>BattleHelper</h3>
<ul>
<li>The do while is a bit complicated to understand. I think, first of all, I'd rename <code>i</code> to <code>action</code>. And then, move the reading of said action to a separate method. Then you just have your sysos, something like <code>readAction</code>, and then the if/else</li>
<li>Instead of if/else, you can do a switch-case, so you end up with a default...</li>
<li>Also, assume you have 100 possible actions, you will have 100 else-if's. You might want to think about how to solve that problem.</li>
</ul>
    </div>