<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, hello. I was getting a bit bored today, so thank you for giving me a nice little exercise to work on. I edited the code, removing unnecessary lines and editing things here and there.</p>

<p>Since you specified that you don't yet know much about OOP I made sure not to take the easier approach, which in my mind is a vector of pointers to a virtual class named and then using it to fit in other higher derived classes in them. This is a hobby for me so I have no clue if I'm correctly communicating the concepts I'm trying to talk about, but I tried.</p>

<p>Part of the question was if there was a better way to reduce the number of if statements in the code that are needed by the UI to test the user's input and make selections based on them. The best way of doing that than I ever thought about is by using a map with the selections already in it as keys and having function pointers as values that can be called with a key.</p>

<p>There are suggestions I have for you, with a very shallow and not at all comprehensive explanation:</p>

<ul>
<li>Avoid <code>using namespace std;</code>; bad practice</li>
<li>Learn OOP; It would have been more than beneficial in this case</li>
<li><em>(Personal Opinion)</em> Start using the c io functions <code>printf()</code> and <code>scanf()</code>; format strings make code so much neater(It's a beautiful thing)</li>
<li>Try to make your program as simple as you possibly can; it makes things easier to read, edit and understand(You didn't need to have all those function declarations in the header file, and there were some unneeded <code>std::shared_ptr</code>s)</li>
<li><em>(Personal Opinion)</em> Make a <strong>main.cpp</strong> file for <code>main()</code>; putting it in a random file is unconventional</li>
<li>Use the header guards; the errors that come with not using them are bothersome</li>
<li>Usually, C++ header files are given the extension <strong>.hpp</strong>; I 99% sure it helps the compiler distinguish between C headers and C++ headers, but I'm doubting myself a little on this one.</li>
<li><em>(For this program specifically)</em> If you intend on using it to a degree, you should probably get write a function that can pass out the information and another to read it in; Who wants to Sign-Up to a service every time to Sign-In</li>
<li>Get in the habit of writing lists of things you can improve on.</li>
</ul>

<p>Don't worry, when I started off I got banned from stack overflow because of my cluelessness(Feel free to check out the questions I used to ask, they're fun to laugh at). I'm still banned to this day. Everyone has things they can work on. For me, it would be getting unbanned.</p>

<p>Anyways, the insertion code is incomplete because I got bored, so you can't actually insert any information, but I gave you a starting point for your UI and I can't do everything for you(Basically I'm too lazy to finish, but you get to learn something and I get to relax, so it's a win-win). I might get bored of relaxing and come back and finish this, but this should sufficiently help you for now.</p>

<p>Here's the code:</p>

<p><strong>main.cpp</strong></p>

<pre><code>#include "ems.hpp"

int main(){
    runEducationalManagementSystemProject();
    return 0;
}
</code></pre>

<p><strong>ems.hpp</strong></p>

<pre><code>#ifndef ems_hpp
#define ems_hpp

#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;memory&gt;

// Main data
struct Person
{
    int id;
    std::string username;
    std::string fullName;
    std::string email;
    std::string password;


};

struct Assignment;
struct AssignmentSolution
{
    bool isMarked = false;
    std::string solution;
    int mark;
    std::string comment = "There is no comment";
    std::shared_ptr &lt;Assignment&gt; assignment;
    std::shared_ptr &lt;Person&gt; student;
};

struct Course;
struct Assignment
{
    std::string content;
    int maxMark;
    std::shared_ptr &lt;Course&gt; course;
    std::vector &lt;std::shared_ptr &lt;AssignmentSolution&gt;&gt; assignmentSolutions;
};

struct Course
{
    std::string code;
    std::string title;
    std::shared_ptr &lt;Person&gt; lecturer;
    std::shared_ptr &lt;Person&gt; assistant;
    std::vector &lt;std::shared_ptr &lt;Person&gt;&gt; registeredStudents;
    std::vector &lt;std::shared_ptr &lt;Assignment&gt;&gt; assignments;
};


// Data
extern std::vector &lt;Person&gt; doctors;
extern std::vector &lt;Person&gt; teachers;
extern std::vector &lt;Person&gt; students;
extern std::vector &lt;std::shared_ptr &lt;Course&gt;&gt; courses;

// Current user
extern std::string currentUser;

// Functions
void runEducationalManagementSystemProject();

#endif /* ems_hpp */
</code></pre>

<p><strong>ems.cpp</strong></p>

<pre><code>#include "ems.hpp"
// Externs
std::vector &lt;Person&gt; doctors;
std::vector &lt;Person&gt; teachers;
std::vector &lt;Person&gt; students;

std::string currentUser;

#include &lt;cstdio&gt;
#include &lt;map&gt;
#include &lt;string.h&gt;

bool exists(std::string uName){
    printf("Checking if \"%s\" exitsts", uName.c_str());
    for (int i = 0; i &lt; doctors.size(); i++) {
        if (strcmp(doctors.at(i).username.c_str(),uName.c_str())) {
            return true;
        }
    }

    for (int i = 0; i &lt; teachers.size(); i++) {
        if (strcmp(teachers.at(i).username.c_str(),uName.c_str())) {
            return true;
        }
    }

    for (int i = 0; i &lt; students.size(); i++) {
        if (strcmp(students.at(i).username.c_str(),uName.c_str())) {
            return true;
        }
    }
    return false;
}

bool correctPassword(std::string uName, std::string password){
    for (int i = 0; i &lt; doctors.size(); i++) {
        if (strcmp(doctors.at(i).username.c_str(),uName.c_str())) {
            if (strcmp(doctors.at(i).password.c_str(), password.c_str())) {
                return true;
            } else {
                return false;
            }
        }
    }

    for (int i = 0; i &lt; teachers.size(); i++) {
        if (strcmp(teachers.at(i).username.c_str(),uName.c_str())) {
            if (strcmp(teachers.at(i).password.c_str(), password.c_str())) {
                return true;
            } else {
                return false;
            }
        }
    }

    for (int i = 0; i &lt; students.size(); i++) {
        if (strcmp(students.at(i).username.c_str(),uName.c_str())) {
            if (strcmp(students.at(i).password.c_str(), password.c_str())) {
                return true;
            } else {
                return false;
            }
        }
    }

    exit(1); // No user exists even though exits returned true, stop the program from running in needless perpetual loop
    return false;
}

struct MainMenu {
    static std::string display;
    static std::map&lt;unsigned int, void (*)()&gt; options;
};
std::string MainMenu::display;
std::map&lt;unsigned int, void (*)()&gt; MainMenu::options;

void mainMenu(){
    while (true) {
        printf("%s",MainMenu::display.c_str());
        int option = 0;
        scanf("%d", &amp;option);
        MainMenu::options[option](); // Calls the function that has been connected to the key int the setup
    }
}

void signUp() {
    Person newUser;

    char* buffer;

    printf("\nPlease enter the following information:\n");

    printf("Full Name: ");
    scanf("%s", buffer);
    newUser.fullName = std::string(buffer);

    printf("E-mail: ");
    scanf("%s", buffer);
    newUser.email = std::string(buffer);

    printf("Username: ");
    scanf("%s", buffer);
    newUser.username = std::string(buffer);
    while (exists(newUser.username)) {
        printf("The username %s is already taken\n", newUser.username.c_str());
        printf("Username: ");
        scanf("%s", buffer);
        newUser.username = std::string(buffer);
    }

    printf("Password: ");
    scanf("%s", buffer);
    newUser.password = std::string(buffer);

    students.push_back(std::move(newUser));
}

void signIn() {

    printf("\nPlease enter Sign-In details: \n\tUsername: ");
    char* buffer;
    scanf("%s", buffer);

    std::string newSignIn(buffer);

    int chances = 3;
    tryAgain:
    printf("\tPassword: ");
    scanf("%s", buffer);

    std::string password(buffer);

    if (exists(newSignIn)) {
        // Check if the password given matches that users password
        if (correctPassword(newSignIn, password)) {
            currentUser = newSignIn;
        } else {
            printf("Incorrect Password try again(%d)\n", chances);
            chances--;
            if (chances == 0) {
                printf("Sorry, you've used up all your chances\n");
                return;
            }
            goto tryAgain;
        }
    } else {
        printf("User does not exits, did not sign-in\n");
    }
}

void quit(){
    exit(0);
}

void setup(){
    // Main Menu setup
    MainMenu::display = "\nPlease enter a choice: \n\t[1] Sign-In\n\t[2] Sign-Up\n\t[0] Quit\n";
    MainMenu::options.insert(std::make_pair(1, &amp;signIn));
    MainMenu::options.insert(std::make_pair(2, &amp;signUp));
    MainMenu::options.insert(std::make_pair(0, &amp;quit));
}

void runEducationalManagementSystemProject() {
    setup();
    mainMenu();
}
</code></pre>
    </div>