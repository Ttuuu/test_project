<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Probably not the right forum.</p>

<p>In java <code>f(x)</code> the method <code>f</code> will never change the variable <code>x</code> to another value; it cannot be make it null or true or whatever. (A rule to prevent a category of errors.)</p>

<p>So you want a result:</p>

<pre><code>public static class Decision {
    String destination;
    boolean conditionFound;
}
</code></pre>

<p>As in java null's should in normal code not be valid, I did not test them.
A test however would not need:</p>

<pre><code>if (null != decisionTree) { // Typical C style.
</code></pre>

<p>but can be</p>

<pre><code>if (decisionTree != null) {
</code></pre>

<p>As the following is not legal java:</p>

<pre><code>if (decisionTree = null) { // *** Illegal java. // Run-time error in C (assignment).
</code></pre>

<p>Searching the <code>code</code> entry result results in an <code>Optional&lt;Decision&gt;</code>.</p>

<pre><code>public static Optional&lt;Decision&gt; doAction(List&lt;Map&lt;String, String&gt;&gt; decisionTree,
            String code) {
    decisionTree.stream()
        .findAny(decisionMap -&gt; code.equalsIgnoreCase(decisionMap.get("code")))
        .map(decisionMap -&gt; {
            Decision decision = new Decision();

            String success = decisionMap.get("is_success");
            String action = decisionMap.get("action");
            BiPredicate&lt;String, String&gt; isApplicable = (s, a) -&gt;
                    "N".equalsIgnoreCase(s) &amp;&amp; "Z".equalsIgnoreCase(a);

            if (isApplicable.test(success, action)) {
                decision.destination = decisionMap.get("destination");
                decision.conditionFound = true;
            }
            return decision
        });
}

Optional&lt;Decision&gt; optionalDecision = doAction(decisionTree, code);
optionalDecision.ifPresent(decision -&gt; {
    if (decision.conditionFound) {
        System.out.println(destination);
    }
});
</code></pre>

<p>A BiPredicate is not really needed, but not bad.</p>

<p>Instead of a result object, one could also pass an in-out parameter:</p>

<pre><code>public static class DecisionParameter {
    boolean decisionFound;
    StringBuilder destination;
    boolean conditionFound;
}
</code></pre>
    </div>