<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>First off it'd be good to run the code through <a href="http://jslint.org" rel="nofollow">jslint</a> or <a href="http://jshint.org" rel="nofollow">jshint</a>. It identifies a few issues, such as an extra comma in the default options list; that'll break the code in older IE versions. Also, it flags some things like the block-less <code>if</code>, which - while allowed - it's best to avoid for the sake of consistency and maintainability.</p>

<p>As for the code itself, here are the things I noticed:</p>

<ul>
<li>jQuery objects should be cached whenever possible</li>
<li>The code only handles unordered lists (<code>UL</code>s), not ordered lists (<code>OL</code>) although it might as well</li>
<li>The event handling is added document-wide every time the code is run. If you use the plugin twice in a document, the first tree gets double event handlers. That spells trouble.</li>
<li>The <code>setFocus</code> function might misbehave if the tree list is itself inside a list element, as it loops through <em>all</em> list-type parents up to the document root.</li>
<li>The <code>classPrefix</code> option is confusing: It's not used for the expand/contract classes, only for the toggle button's "main" class. But since that's the only one, why not just let the user define that as well? Basically, if a prefix is used only once, it's not necessary.</li>
<li>Comparing against <code>undefined</code> is a no-no. <code>undefined</code> is not a reserved word, and can (in some runtimes) <em>be defined</em>. In this case, a simple boolean works just as well.</li>
</ul>

<p>Here's what I arrived at</p>

<pre><code>(function ($) {
  var methods = {
    init: function(options) {
      // Default Settings
      var settings = $.extend({
        expandIconClass:   'closed',
        contractIconClass: 'open',
        toggleButtonClass: 'toggle',
        setFocus:          false      // just use a boolean here
      }, options);

      return this.each(function() {
        var target = $(this);

        // walk the tree
        target.find('li').each(function() {
          var node = $(this),
              branches = node.children('ul, ol'),
              button;

          if(branches.length &gt; 0) {
            branches.hide();
            button = $('&lt;div /&gt;', {
              'class': settings.toggleButtonClass + " " + settings.expandIconClass,
              on: {
                click: function (event) {
                  // we already have the correct elements here
                  branches.toggle();
                  button.toggleClass(settings.expandIconClass + " " + settings.contractIconClass);
                }
              }
            });

            node.prepend(button);
          }
        });

        if(settings.setFocus === true) {
          target.goodtree('setFocus');
        }
      });
    },

    setFocus: function(element) {
      return this.each(function() {
        $(element).parents('ul, ol').each(function() {
          var ancestor = $(this);
          if( this.is(ancestor) ) { // better check
            return false; // stop the each-loop
          }
          ancestor.show();
        });
      });
    }
  };

  $.fn.goodtree = function(method) {
    if(typeof methods[method] === 'function') { // stronger conditional
      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if(typeof method === 'object' || !method) {
      return methods.init.apply(this, arguments);
    } else {
      $.error('Method ' +  method + ' does not exist on jQuery.goodtree');
    }
  };
}(jQuery));
</code></pre>

<p><a href="http://jsfiddle.net/Fh4eY/1/" rel="nofollow">Here's a demo</a> (I reused your demo markup and styling, minus the open/close icons)</p>
    </div>