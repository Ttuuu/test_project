<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li>BUG: Your main loop <code>for l in substrings(a): ...</code> will return the <strong>first</strong> palindrome it finds inside <code>a</code> (stepping the indices back from the end), not just the longest one. If there are multiple longest palindromes it won't return them all, only the first it finds. Your code is overly tailored to this one example. Use other examples to tickle it, e.g. <em>"zaba effeffe xyx"</em>. Your main function should yield all candidates of longest length (or else keep a list), only then can it finish.</li>
<li>Obfuscated loop variables:

<ul>
<li><code>l</code> is totally unnecessary, get rid of it</li>
<li>The variable you call <code>end</code> isn't an end. It's a length or span: <code>s[i: i+end]</code> instead of <code>s[i:end]</code>. And look at the acrobatics you pull with <code>for i in range(l-end+1): ...</code> that's really just a severely obfuscated way of writing nested loops with indices:</li>
</ul></li>
</ol>

<pre><code>    for i in range(l):
      for j in range(l, i, -1):
        # Now reference s[i:j]
</code></pre>

<ol start="3">
<li>But that iterator function <code>substrings()</code> is just a verbose way of doing what a generator expression or list comprehension could do in one line:</li>
</ol>

<p><code>s[i:j] for i in range(l) for j in range(l, i, -1)</code> </p>

<ol start="4">
<li>INEFFICIENCY: your loop only needs to run the <code>j/end</code> index as far back as <code>i</code>, not 0. Once j &lt; i, then <code>s[i:j]</code> will be empty-string, that's ~2x wasted iterations.</li>
</ol>
    </div>