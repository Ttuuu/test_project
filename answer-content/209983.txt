<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><code>0x00</code> can simply be written <code>0</code>; the hexadecimal notation doesn't buy you anything here.</p>

<p>In your function signatures such as</p>

<pre><code>int alloy_init_heap(void *addr, unsigned long int size);
</code></pre>

<p>you should rearrange your code so that you can use your <code>size_type</code> instead of rewriting <code>unsigned long int</code>.</p>

<p>For your structs (<code>allocation</code>, <code>header</code>, etc.) use <code>typedef</code> so that you don't have to re-write <code>struct</code> on instantiation.</p>

<p>In <code>alloy_memcpy</code>, rather than char-by-char copy, consider doing word-by-word copy. 64-bit copies will be much more efficient here.</p>

<p>This loop:</p>

<pre><code>for (;;) {
    sorted = single_bubblesort(header-&gt;allocations, header-&gt;allocation_count);
    if (!sorted) {
        break;
    }
}
</code></pre>

<p>can simply be</p>

<pre><code>while (single_bubblesort(header-&gt;allocations, header-&gt;allocation_count));
</code></pre>

<p>This:</p>

<pre><code>if ((next_addr + size) &lt;= allocation_addr) {
</code></pre>

<p>and this:</p>

<pre><code>if ((next_addr + size) &lt;= (((size_type) heap_addr) + header-&gt;heap_size)) {
</code></pre>

<p>do not need inner parens, due to operator precedence.</p>

<p>Rather than writing <code>unsigned char</code> everywhere, consider using <code>uint8_t</code> from <code>stdint.h</code>.</p>

<p>This:</p>

<pre><code>float space_efficiency = 0.0f;
space_efficiency += bytes_allocated;
space_efficiency /= heap_size;
space_efficiency *= 100.0f;
</code></pre>

<p>can simply be</p>

<pre><code>float space_efficiency = bytes_allocated*100. / heap_size;
</code></pre>

<p>This array:</p>

<pre><code>unsigned long int size_array[8] = {
    8,    16,  32,   64,
    128, 256, 512, 1024
};
</code></pre>

<p>doesn't need to be initialized literally. You can do:</p>

<pre><code>for (int i = 0; i &lt; 8; i++)
    size_array[i] = 8 &lt;&lt; i;
</code></pre>

<p>Whenever you write <code>0xffffffffffffffff</code>, you can replace it with <code>-1</code>.</p>

<p>In this function (and similar ones elsewhere):</p>

<pre><code>static struct allocation *create_allocation(void) {
</code></pre>

<p><code>(void)</code> is redundant. Just write <code>()</code>.</p>
    </div>