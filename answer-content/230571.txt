<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I suggest you check PEP0008 <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0008/</a> the official Python style guide and Flake8 <a href="http://flake8.pycqa.org/en/latest/" rel="nofollow noreferrer">http://flake8.pycqa.org/en/latest/</a> as a tool for style enforcement.</p>

<ul>
<li><strong>Docstrings:</strong> Python documentation strings or docstrings are a way of documenting your classes/function/modules and are usually accessed through <code>help()</code>. You should include docstrings to your functions indicating what they do and what they return.</li>
<li><p><strong>Type hints:</strong> Type Annotations are a new feature added in PEP 484 that allow for adding type hints to variables. They are used to inform someone reading the code what the type of a variable should be. As you're taking a list as input and will return a string, you should have some documentation indicating that. Use type hints.</p>

<p><strong>function should look like:</strong></p>

<pre><code>def get_remaining_letters(letters: list) -&gt; str:
    """Return lowercase alphabetic letters that are not present in letters."""
</code></pre></li>
<li><p><strong>Blank lines:</strong> instead of this <code># ----------------------------------------------------------- #</code> an empty line is sufficient and note that according to PEP0008 empty lines as well as comments should be used sparingly (when necessary) to separate logical sections as well as explain the not-so-obvious parts of the code.</p></li>
<li><p><strong><code>main</code> guard</strong>: use <code>if __name__ == '__main__':</code> guard at the end of the script to allow outside modules to import this module without running it as a whole. You will be calling your functions from there.</p>

<pre><code>if __name__ == '__main__':
    pre_defined_list = ['a', 'b', 'b']
    test = get_remaining_letters(pre_defined_list)
    print(test)
</code></pre></li>
<li><p><strong>Evaluation to empty list:</strong> In Python empty sequences evaluate to False.
instead of <code>if list_of_characters == []:</code> it is written: <code>if not list_of_characters:</code></p></li>
<li><p><strong>Adding to strings:</strong> Python strings are immutable which means that each time you're adding to a string like in <code>remaining_letters += char</code> a new string is created and assigned the new value which is inefficient and should be replaced with list comprehension syntax which is shorter and more efficient or Pythonic as you call it.</p>

<p><strong>An improved version of the code:</strong></p>

<pre><code>import string


def get_remaining_letters(letters: list) -&gt; str:
    """Return lowercase alphabetic letters not present in letters."""
    return ''.join(letter for letter in string.ascii_lowercase if letter not in letters)


if __name__ == '__main__':
    chosen = [letter for letter in 'sdfmmmsvvd']
    print(get_remaining_letters(chosen))
</code></pre></li>
</ul>
    </div>