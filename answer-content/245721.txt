<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Little things</h2>
<pre><code>class Contribution(object):
</code></pre>
<p>object is the implied parent of all classes. This can be written as <code>class Contribution:</code>.</p>
<pre><code>amount = [100, 200, 300, 400, 500]
t_amount = [1, 2, 3, 14, 15]
int_rate = [0.1, 0.05, 0.1, 0.04, 0.05, 0.2]
t_int_rate = [0, 2, 3, 4, 4.5, 10]
</code></pre>
<p>Having separate variables for time values and monetary / fractional values seems odd. The data would be reflected more accurately in your code if it were phrased together.</p>
<pre><code>contributions_data = [
    (1,100),
    (2,200),
    (3,300),
    (14,400),
    (15,500)
]
contributions = [
    Contribution(t, amount) 
    for t,amount in contributions_data
]
</code></pre>
<p>The constructor is a very important method, so it should be left as simple as possible.</p>
<pre><code>class InterestRate:
    periods = {
        'annual':1,
        'semi-annual':1/2,
        'quarter':1/4,
        'month':1/12
    }
    @staticmethod
    def get_period_length(period):
        if period in InterestRate.periods:
            return InterestRate.periods[period]
        return period
    
    def __init__(self, t, rate, period_desc, compound = True, discount = False):
        self.t = t
        self.rate = rate
        self.compound = compound
        self.discount = discount
        
        self.period_length = InterestRate.get_period_length(period_desc)
</code></pre>
<h2>Big Things</h2>
<p><code>accumulate()</code> has an insane amount of responsibility. The specific rules for applying interest rates should be moved elsewhere.</p>
<pre><code>class InterestRate:
    def apply(self,amount,delta):
        power = delta/self.period_length
        if self.discount:
            return amount*((1-self.rate)**(-power))
        if self.compound:
            return amount*((1+self.rate)**power)

        return amount*(1+(power*self.rate))

class Contribution:
    def rate_applies(self,interest_rate,t_end):
        return t_end &gt;= interest_rate.t &gt;= self.t
    def accumulate(self, t_end, interest_rates, sort = True):
        interest_rates = interest_rates[:]
        if sort:
            interest_rates = sorted(interest_rates, key = lambda x: x.t)

        applicable_rates = [
            rate for rate in interest_rates 
            if self.rate_applies(rate,t_end)
        ]

        with_interest = self.amount
        for i in range(len(applicable_rates)-1):
            delta = applicable_rates[i+1].t - max(self.t,applicable_rates[i].t)
            with_interest = applicable_rates[i].apply(with_interest,delta)
   
        if len(applicable_rates)&gt;0:
            delta = t_end - applicable_rates[-1].t
            with_interest = applicable_rates[-1].apply(with_interest,delta)

        return with_interest
</code></pre>
<p>Both <code>GrowthTL</code> and <code>Contribution</code> seem to be worried about selecting the valid interest for the timespan. Since <code>Contribution</code> already handles interest rate validation, <code>GrowthTL</code> can be simplified.</p>
<pre><code>class GrowthTL:

    def __init__(self, interval, contributions, interest_rates):
        self.t_start,self.t_end = interval

        self.contributions = sorted(contributions, key = lambda x: x.t)
        self.interest_rates = sorted(interest_rates, key = lambda x: x.t)
        
    def value_at_end(self):
        return sum([
            contribution.accumulate(self.t_end, self.interest_rates, sort = False)
            for contribution in self.contributions
        ])
</code></pre>
    </div>