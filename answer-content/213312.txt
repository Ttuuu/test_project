<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Constants</h3>

<blockquote>
<pre><code>#define TAB_SIZE 4
</code></pre>
</blockquote>

<p>This is the old way of doing things.  Modernly C uses the same syntax as C++:  </p>

<pre><code>const int TAB_SIZE = 4;
</code></pre>

<p>While both will still function, this has the added benefit of offering type safety.  The <code>#define</code> is just a search and replace used by the preprocessor.  I.e. it replaces <code>TAB_SIZE</code> with the character 4 in an intermediate copy of the file.  The <code>const</code> variable will be managed by the compiler.  </p>

<h3>Update assignments</h3>

<blockquote>
<pre><code>                character_count = character_count + whitespace_count;
</code></pre>
</blockquote>

<p>This is more idiomatically written </p>

<pre><code>                character_count += whitespace_count;
</code></pre>

<p>That form is exactly the same as the longer form.  It evaluates the left-hand side of the assignment, adds it to the right-hand side, and stores the result in the left-hand side.  But it is shorter and more easily recognizable.  </p>

<h3>Simplifying logic</h3>

<p>However, I wouldn't do either of these.  Instead, on each iteration of the loop, just increment <code>character_count</code>.  Then you never have to add <code>character_count</code> and <code>whitespace_count</code>.  This will work in your program because you never use <code>character_count</code> separately from <code>whitespace_count</code>.  So make this change and replace <code>character_count + whitespace_count</code> with just <code>character_count</code>.  </p>

<h3>Yoda conditions</h3>

<blockquote>
<pre><code>        if (c == ' ') {
</code></pre>
</blockquote>

<p>This is often written as </p>

<pre><code>        if (' ' == c) {
</code></pre>

<p>The reason is that if you accidentally leave off an equals sign <code>' ' = c</code> will generate a compiler error.  Meanwhile, <code>c = ' '</code> will silently do the wrong thing.  It wouldn't be so bad here, as it will be immediately obvious in the display.  But in a different kind of program, assigning to <code>c</code> might make a much more subtle bug.  </p>

<h3>Correct naming</h3>

<blockquote>
<pre><code>            //we encountered a non-whitespace char. Print all 'saved' whitespaces.
</code></pre>
</blockquote>

<p>This is incorrect.  A whitespace is any character that can produce indent.  It specifically includes tabs (and new lines).  But what you check is non-space characters.  This is easy enough to fix, just remove "white" both times here and rename <code>whitespace_count</code> to <code>space_count</code>.  </p>

<h3>Consistent naming style</h3>

<p>You have the camelCased <code>numberOfCharsToReachTabStop</code> and snake_cased <code>character_count</code> and <code>whitespace_count</code>.  Please pick one kind of casing per identifier type and stick to it.  If local variables are snake_cased, then <code>number_of_chars_to_reach_tab_stop</code>.  Or change them all to camelCase.  I personally prefer snake_case, which is easier for non-native English speakers, as it doesn't rely on an ability to differentiate between capital and lowercase letters.  But the most important thing is to be consistent so that people can see snake_case and realize that it is a local variable or one of the other things that use snake_case.  </p>

<p><code>TAB_SIZE</code> is a constant, so it is appropriate to use a different casing style (e.g. ALL_CAPS) for it.  </p>

<h3>Bugs</h3>

<p>As already noted, you don't print spaces at the end of a line.  But there is a more serious bug.  You treat tabs as single characters in the character count.  You should not.  Instead, tabs are <code>TAB_SIZE</code> characters.  Don't forget to adjust for the tab stop.  I.e. if you are currently one character past the tab stop, you'd only add three characters for the tab.  So if you adopt my previous suggestion of incrementing <code>character_count</code> on every iteration, you need something like </p>

<pre><code>if ('\t' == c) {
    /* update character_count appropriately */
} else {
    character_count++;
}
</code></pre>

<p>I'll leave the actual update to you, as that's the exercise that you're exploring.  </p>
    </div>