<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Euclidean distance is used to calcualte the cost from current node to goal</p>
</blockquote>

<p>The code implements Manhattan distance, so the comment is wrong, or perhaps the code is wrong, but in any case it doesn't match. You can use <a href="http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html" rel="noreferrer">this page</a> to review heuristics for grid worlds, I don't recommend Euclidean distance because it's either too optimistic (causing unnecessary node exploration) or even wrong (when the actual movement cost for a diagonal move is less than sqrt(2)).</p>

<blockquote>
  <p><code>pair&lt;int,int&gt;</code></p>
</blockquote>

<p>Not wrong but most of these are actually 2D coordinates, which has more meaning than just "pair", so you could make an alias or your own class.</p>

<blockquote>
  <p><code>vector&lt;pair&lt;int,int&gt; &gt;</code></p>
</blockquote>

<p>The <code>&gt;&gt;</code>-problem has been officially fixed since C++11 (compiler support predates the update of the standard) and you tagged this question C++14, so you don't need to do this. It's not wrong to continue doing it, just unnecessary.</p>

<p><strong><code>unordered_set&lt;..&gt; openList</code>:</strong> <code>unordered_set</code> does not support finding the minimum element in a reasonable way. You can get it out anyway, but it will happen by brute force. It is a bit tricky to do this efficiently, because finding the minimum element and finding a given element (or finding the element based on coordinates) back in order to change its parent and G and F, both need to be supported.</p>

<p>It can be done by maintaining a binary heap, and letting the nodes know their index in the heap, so that the node can be moved to its proper location in the heap after modifying its parent and G/F score. An unfortunate consequence of that construct is that it all needs to be manual, the standard library does have <code>pop_heap</code> and <code>push_heap</code> but those functions do not have any option to update some secondary data structure every time an element in the heap is moved to a different index.</p>

<p>That's all a bit complicated, a sneaky alternative is keeping <em>only</em> a heap, and just re-inserting a node when its G and parent are changed, so that it will be popped off the heap <em>before</em> the other version of that node that is already in the heap. It can happen then that you pop a node off the Open List and that node has actually been already closed, just skip it. The downside is filling up the Open List with dead weight, also if you implement an other suggestion from further down (to limit the use of nodes to only the open list) then the additional coordinates-to-index-in-the-heap map needs to exist anyway, which defeats the point of this dirty trick.</p>

<p>Repeatedly scanning the entire open list is a significant performance problem, easily leading to quadratic time complexity (in terms of number of nodes explored), though it depends on the actual exploration.</p>

<p><strong><code>motion_planner::Node</code> everywhere:</strong> in so many places that multiple independent copies of the same node are in circulation, which is brittle - there are multiple places in the code where you had to take the coordinate of a node and then look it up back in the grid, to ensure you were referring to the "right version" of a node. Various things don't need to be a full <code>Node</code>. For example in the closed list, all you care about are the coordinates, but a <code>Node</code> is used. That then causes <code>Node</code> to have a comparison and hash written solely for the application of "using <code>Node</code> in the closed list", with odd semantics as a result. That could have been avoided, for example:</p>

<ol>
<li>Make the closed list be in terms of coordinates, or</li>
<li>Put a boolean <code>closed</code> on the <code>Node</code> so you don't even need a closed list.</li>
</ol>

<p>But having a <code>vector&lt;vector&lt;motion_planner::Node&gt; &gt; grid</code> in the first place is a bit overkill. It meant you had to touch <em>every cell of the grid</em>, no matter how big the world or how small the area needed by the current query, so it does not scale well. That can be avoided:</p>

<ul>
<li>Let the node be a concept that only lives in the Open List.</li>
<li>Create nodes on-demand, when generating the neighbours of the current node.</li>
<li>Keep the parent-references in an <code>unordered_map&lt;coordinate, coordinate&gt;</code>, allowing them to outlive the nodes.</li>
<li>Rather than having nodes know their index-in-the-heap, maintain a separate map from coordinate to index-in-the-heap, which would be how a <code>Node</code> object is found back from a given coordinate.</li>
</ul>

<p><strong><code>vector&lt;vector&lt;..&gt; &gt;</code> for a grid:</strong> it gets the job done, but ideally there would be only one vector with everything in it, wrapped in a class that converts the indexing scheme. It's a bit of extra work compared to just letting nested vectors work it out, but you can save a level of indirection, and coalesce allocations, and also make the types more meaningful.</p>

<p><strong>Credit where it's due:</strong> no list of neighbours in the node, that's good. A common mistake I see that typically goes hand in hand with making a grid of nodes, is turning that grid into a graph with explicit edges. That involves lots of set-up work, potentially-fragile pointer manipulation, and needlessly balloons the memory consumption, so it's good that you avoided that.</p>
    </div>