<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Is this higher order function any use at all without relying on a side-effect?</p>
</blockquote>

<p>The answer to this question is obviously <em>no</em>, since the function returns always <code>nil</code>.</p>

<blockquote>
  <p>The general question I'm seeking to explore here is the purity or non-purity of higher order functions in practical use cases (and hence, how to use them well).</p>
</blockquote>

<p>I'm not sure to understand what you are looking for, but if you want an example of recursive higher order function on binary trees that <em>returns</em> something (without performing side effects), consider the following one, in which the function gets another parameter that “combine” the results of the visit (assuming that an empty tree is represented with <code>nil</code> and that the function should return <code>nil</code> when an empty tree is passed to it):</p>

<pre><code>(defun inorder-traverse (combine fn bin-tree)
  "in order traversal of a binary tree"
  (when bin-tree
    (funcall combine
             (inorder-traverse combine fn (node-l bin-tree))
             (funcall fn (node-elt bin-tree))
             (inorder-traverse combine fn (node-r bin-tree)))))
</code></pre>

<p>for instance:</p>

<pre><code>(defun flatten (bin-tree)
  (inorder-traverse (lambda (x y z) (append x (list y) z))
                    #'identity
                    bin-tree))
</code></pre>

<p>returns the list of the leaves of a binary tree in order from left to right; if the tree is a BST, the list is sorted;</p>

<pre><code>(defun reverse-flatten (bin-tree)
  (inorder-traverse (lambda (x y z) (append z (list y) x))
                    #'identity
                    bin-tree))
</code></pre>

<p>like the previous one, only in reverse order;</p>

<pre><code>(defun map-tree (fn bin-tree)
  (inorder-traverse (lambda (left el right) (mk-tree el left right))
                    fn
                    bin-tree))
</code></pre>

<p>returns a new tree, with the same structure of the input one, and with the elements transformed by the function <code>fn</code>;</p>

<pre><code>(defun my-copy-tree (bin-tree)
  (inorder-traverse (lambda (left el right) (mk-tree el left right))
                     #'identity
                     bin-tree))
</code></pre>

<p>makes a copy of a binary tree;</p>

<pre><code>(defun reverse-tree (bin-tree)
  (inorder-traverse (lambda (left el right) (mk-tree el right left))
                    #'identity
                    bin-tree))
</code></pre>

<p>a symmetrical copy of a binary tree;</p>

<p>etc.</p>
    </div>