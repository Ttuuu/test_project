<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The big performance hit probably comes in this block of code, where you don a bunch of array manipulations and looping:</p>

<pre><code>all_word = [letter_list[start:end+1] for start in xrange(l)
                                     for end in xrange(start, l)]
for array in all_word:
    if array[0] in vowel:
        person_b_words.append(array)
for array in all_word:
    if array[0] in consonants:
        person_a_words.append(array)
if len(person_a_words) == len(person_b_words):
    print 'Draw'
if len(person_a_words) &gt; len(person_b_words):
    print person_a_name, len(person_a_words)
if len(person_b_words) &gt; len(person_a_words):
    print person_b_name, len(person_b_words)
</code></pre>

<p></p>

<p>Appending to an array is a (relatively) expensive operation, as is looping over a list. I can see a number of optimisations here. <em>[<strong>Edit:</strong> I wrote these in the order I thought of them; the big performance gain comes on the last item. I'm leaving the remaining items because they're still instructive, even if not directly applicable here.]</em></p>

<ul>
<li><p><strong>Only loop over all_word once.</strong> You can check for starting with a consonant and vowel in the same iteration of the loop:</p>

<pre><code>for array in all_word:
    if array[0] in vowel:
        person_b_words.append(array)
    elif array[0] in consonants:
        person_a_words.append(array)
</code></pre>

<p>We've just cut out an iteration over all_word. If all_word is large, that will be a significant saving.</p></li>
<li><p><strong>Don't store the words in a list, just the count.</strong> All you care about is the relative number of words in each list; the words themselves don't matter. It's much easier to increment an integer than mutate a list, so consider the following:</p>

<pre><code>person_a_words = 0
person_b_words = 0
for array in all_word:
    if array[0] in vowel:
        person_b_words += 1
    elif array[0] in consonants:
        person_a_words += 1
</code></pre>

<p>and then you can compare the two integers at the end. That's bound to be a performance saving.</p></li>
<li><p><strong>Don't construct all_word as a list; use a generator.</strong> If you replace the square brackets with parens:</p>

<pre><code>all_word = (letter_list[start:end+1] for start in xrange(l)
                                     for end in xrange(start, l))
</code></pre>

<p>then this becomes a generator comprehension instead of a list comprehension. This means it only creates the elements as they're needed by the for loop; it doesn't create them all in memory before continuing.</p>

<p>Using generators instead of lists is a really good way to reduce occupancy and speed up programs.</p></li>
<li><p><strong>Do you even need to use all_word?</strong> For each value of start, the first letter of the resulting words will be the same, and this gives you <code>(l - start)</code> different words. You don't actually need to create the words; you just care about their initial letter, and how many distinct words they create.</p>

<p>You could just add the number of distinct words to each person's score directly:</p>

<pre><code>person_a_words = 0
person_b_words = 0
for idx, letter in enumerate(letter_list):
    if letter in vowel:
        person_b_words += len(letter_list) - idx
    else:
        person_a_words += len(letter_list) - idx
</code></pre>

<p>That is substantially faster: I just ran this with a 1.5m character string, and it finished in ~1.5s.</p></li>
</ul>

<p>Other non-performance related comments:</p>

<ul>
<li>Don't use <code>str</code> as a variable name; overriding builtins is bad practice.</li>
<li>You've imported the string, sys and itertools modules, but you never use any of them. Why?</li>
<li>PEP 8 requires a space after commas in a list; you should add this in <code>vowel</code> and <code>consonants</code>.</li>
<li><p>You can get the individual letters of a string by calling <code>list()</code> on it. These calls are equivalent:</p>

<pre><code>letter_list = [a for a in my_string]
letter_list = list(my_string)
</code></pre>

<p>although in this case, you don't need to coerce to a list first – you can iterate over the characters of a string directly.</p></li>
<li>There's no need to assign the length of <code>letter_list</code> to a variable, especially not one with as undescriptive a name as <code>l</code>. It just makes your code harder to read.</li>
<li>The name of your function isn't particularly helpful. Ideally it should give me some idea of what the function does. There should also be a docstring to explain the result.</li>
<li>I would rename the <code>person_a*</code> and <code>person_b*</code> variables to be <code>consonant*</code> and <code>vowel*</code>, respectively – that will make the code easier to read. A and B don't really mean anything (and as evidence, I got them the wrong way round when I first wrote that sentence).</li>
<li><p>Your function is doing some work (finding out whether there are more vowel sub-words or consonant subwords) and printing to screen (the result). It would be better to separate this into two functions: one that does the work, the other does the result.</p>

<p>That makes it easier to reuse the work of vowels vs. consonants.</p></li>
<li><p>To aid readability, I'd keep the same order of variables when you do the comparison at the end. i.e.</p>

<pre><code>if vowel_count &gt; consonant_count:
    print("Vowels victorious!")
elif vowel_count &lt; consonant_count:
    print("Consonants champion!")
else:
    print("Draw!")
</code></pre></li>
</ul>
    </div>