<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using objects is not the same as doing object-oriented programming. Your code is very procedural and does not take advantage of the inherent flexibility of object-oriented design. The main concept you should be applying here is that you should encapsulate what varies. There are two approaches to accomplishing this that you could take: decoration or injection.</p>

<hr>

<h2>Decoration</h2>

<p>We can approach this by looking at this from a decoration viewpoint. We have a base object that we are then layering on additional behavior to. A great pattern to use to layer additional behavior onto a base object is the <a href="https://sourcemaking.com/design_patterns/decorator">Decorator Pattern</a>. We can break each concept down and encapsulate it into an object representing that concept. (My C# may not be completely idiomatic, but it should work and exemplify the concept). First, we need a product:</p>

<pre><code>public class Product
{
    public string Name { get; private set; }
    protected decimal Price { get; private set; }

    public Product(string name, decimal price) {
        Name = name;
        Price = price;
    }

    public decimal GetPrice() {
      return Price;
    }

    // Since we are taxing things, we probably would want the original price too.
    public decimal GetBasePrice() {
        return Price;
    }
}
</code></pre>

<p>Now to use the Decorator pattern, we need to extract an interface:</p>

<pre><code>public class IProduct
{
    string Name { get; }
    decimal GetPrice();
    decimal GetBasePrice();
}
</code></pre>

<p>We add the interface to the <code>Product</code> class:</p>

<pre><code>class Product : IProduct { ...
</code></pre>

<p>We now have encapsulated the idea of a product. We have left out anything to do with taxes or import fees because those are completely separate concepts that vary independently. Since we are encapsulating what varies, we know they should be separated. Now, let's create a decorator for a <code>Product</code> that is subject to tax:</p>

<pre><code>class TaxableProduct : IProduct
{
    const decimal TAX_RATE = 0.10m;

    public string Name { get { return BaseProduct.Name; } }
    private IProduct BaseProduct { get; set; }

    public TaxableProduct(IProduct baseProduct) {
        BaseProduct = baseProduct;
    }

    public decimal GetPrice() {
        return BaseProduct.GetPrice() + BaseProduct.GetBasePrice() * TAX_RATE;
    }

    public decimal GetBasePrice() {
        return BaseProduct.GetBasePrice();
    }
}
</code></pre>

<p>We can do the same to create the <code>ImportedProduct</code>:</p>

<pre><code>class ImportedProduct : IProduct
{
    const IMPORT_FEE = 0.05m;

    public string Name { get { BaseProduct.Name } }
    private IProduct BaseProduct { get; set; }

    public ImportedProduct(IProduct baseProduct) {
        BaseProduct = baseProduct;
    }

    public decimal GetPrice() {
        return BaseProduct.getPrice() + BaseProduct.GetBasePrice() * IMPORT_FEE);
    }

    public decimal GetBasePrice() {
        return BaseProduct.GetBasePrice();
    }
}
</code></pre>

<p>Now we can create an untaxed, unimported product:</p>

<pre><code>new Product("Milk", 2.50m);
</code></pre>

<p>A new taxed, unimported product:</p>

<pre><code>new TaxedProduct(new Product("Wrench", 8.00m));
</code></pre>

<p>A new imported, untaxed product:</p>

<pre><code>new ImportedProduct(new Product("French cheese", 25.00m));
</code></pre>

<p>A new taxed, imported product:</p>

<pre><code>new ImportedProduct(new TaxedProduct(new Product("Ferrari", 250000.00m)));
</code></pre>

<p>We are able to compose together the product with its tax and import fee calculations at runtime, while making it transparent through the <code>IProduct</code> interface. We have encapsulated the varying behavior of taxability and import-status into their own objects, and they can vary independently. If another type of fee comes along, we can just add a new decorator to encapsulate it. (BTW, there is duplication in this code that can easily be factored out.)</p>

<hr>

<h2>Injection</h2>

<p>We can approach this by looking at this from an injection viewpoint. We have an object with some behavior, and we want to push more behavior into it. We can use <a href="http://en.wikipedia.org/wiki/Dependency_injection">Dependency Injection</a> to push that behavior into the object. We can break each concept down and encapsulate it into an object representing that concept (My C# may not be completely idiomatic, but it should work and exemplify the concept). First, we need a product:</p>

<pre><code>class Product
{
    public string Name { get; private set; }
    private decimal Price { get; set; }

    public Product(string name, decimal price) {
        Name = name;
        Price = price;
    }

    public decimal GetPrice() {
        return Price;
    }
}
</code></pre>

<p>Now a tax and an import fee are both fees on a product, so let's create an interface to encapsulate the concept of a fee:</p>

<pre><code>interface IFee
{
    decimal CalculateFee(decimal price);
}
</code></pre>

<p>Now let's create our two fee implementations, <code>TaxFee</code>:</p>

<pre><code>class TaxFee : IFee
{
    const decimal TAX_RATE = 0.10m;

    public decimal CalculateFee(decimal price) {
        return price * TAX_RATE;
    }
}
</code></pre>

<p>And <code>ImportFee</code>:</p>

<pre><code>class ImportFee : IFee
{
    const decimal IMPORT_FEE = 0.05m;

    public decimal CalculateFee(decimal price) {
        return price * IMPORT_FEE;
    }
}
</code></pre>

<p>We want to inject our behavior into the product class, and the easiest way to do this is to pass parameters via the constructor. Since we want to pass an arbitrary number of fees, we can pass an <code>IEnumerable&lt;IFee&gt;</code>:</p>

<pre><code>class Product
{
    public string Name { get; private set; }
    private decimal Price { get; set; }
    private IEnumerable&lt;IFee&gt; Fees { get; set; }

    public Product(string name, decimal price) : this(name, price, new List&lt;IFee&gt;()) {
    }

    public Product(string name, decimal price, IEnumerable&lt;IFee&gt; fees) {
        Name = name;
        Price = price;
        Fees = fees;
    }

    public decimal GetPrice() {
        decimal fullPrice = Price;

        foreach(IFee fee in Fees) {
            fullPrice += fee.CalculateFee(Price);
        }

        return fullPrice;
    }
}
</code></pre>

<p>Now we can create an untaxed, unimported product:</p>

<pre><code>new Product("Milk", 2.50m);
</code></pre>

<p>A new taxed, unimported product:</p>

<pre><code>List&lt;IFee&gt; fees = new List&lt;IFee&gt;();
fees.Add(new TaxFee());
new Product("Wrench", 8.00m, fees);
</code></pre>

<p>A new imported, untaxed product:</p>

<pre><code>List&lt;IFee&gt; fees = new List&lt;IFee&gt;();
fees.Add(new ImportFee());
new Product("French cheese", 25.00m, fees);
</code></pre>

<p>A new taxed, imported product:</p>

<pre><code>List&lt;IFee&gt; fees = new List&lt;IFee&gt;();
fees.Add(new TaxFee());
fees.Add(new ImportFee());
new Product("Ferrari", 250000.00m, fees);
</code></pre>

<p>We are able to compose together the product with its tax and import fee calculations at runtime, while making it transparent through the <code>IFee</code> interface. We have encapsulated the varying behavior of taxability and import-status into their own objects, and they can vary independently. If another type of fee comes along, we can just add a new <code>IFee</code> to encapsulate it. (BTW, there is duplication in this code that can easily be factored out.)</p>
    </div>