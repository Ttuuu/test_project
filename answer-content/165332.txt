<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I happened to reduce the time to a great ~2 seconds. ( ~1,90sec a lot of times ).
So heres what I did to increase the performance:</p>

<ol>
<li><p>I changed the creation of the summaries to one function that does all instead of creating each summary when I noticed one is needed.</p>

<pre><code>private Map&lt;String, Downtime&gt; createSummaries( StringBuilder summaryTql ) throws CustomException
{
Map&lt;String, Downtime&gt; result = new HashMap&lt;&gt;();

Connection connection = tsdbService.connect( getDataSourceName() );
TQLResult queryTQL = connection.queryTQL( summaryTql.toString() );

for ( Object[] row : queryTQL.getData() )
{
  BigDecimal downtimeSummary = BigDecimal.valueOf( Long.parseLong( row[0].toString() ) / 60000.0 ); // downtime of that day in minutes
  ZonedDateTime summaryTime = StringUtils.convertString2ZonedDateTime( row[2].toString() ); // timestamp of the day the summary is for
  ZonedDateTime summaryEnd = summaryTime.plusDays( 1 ); // simply the end :D
  Percent availability = downtimeCalculationService.getAvailability( summaryTime, summaryEnd, row ); // percentage of day without an active downtime
  Downtime summaryDowntime = new Downtime( availability, downtimeSummary, summaryTime, summaryEnd );
  summaryDowntime.setSummary( true );
  result.put( StringUtils.convertZonedDateTimeToISO8601String( summaryTime.truncatedTo( ChronoUnit.DAYS ) ), summaryDowntime );
}
return result;
</code></pre>

<p>}</p></li>
<li><p>Changed the logic inside the function <code>createDowntimes</code> like this:</p>

<pre><code>  if ( downtimeFrom.equals( previousDateTime ) ) // same downtime, only add specification
  {
    log.trace( "found specification for the same downtime {0}", previousDateTime );
    savedDowntime.addSpecifications( new JassDowntimeSpecDTO( row, paperMachine, convertedCleaning, false ) );
  }
  else
  {
    result.add( savedDowntime );
    if ( downtime.getDowntimeFrom().truncatedTo( ChronoUnit.DAYS ).isAfter( savedDowntime.getDowntimeFrom().truncatedTo( ChronoUnit.DAYS ) ) ) // simply check if the day changed. Ignore the time for now
    {
      if ( !dayChanged ) // did the day change without adding the previous detected day change? ( Happens if multiple days between downtimes )
      {
        dayChanged = true;
        summaryKey = StringUtils.convertZonedDateTimeToISO8601String( savedDowntime.getDowntimeFrom().truncatedTo( ChronoUnit.DAYS ) );
      }
      else
      {
        addSummary( summaries, result, savedDowntime, summaryKey, downtime );
        dayChanged = false;
        summaryKey = StringUtils.convertZonedDateTimeToISO8601String( savedDowntime.getDowntimeFrom().truncatedTo( ChronoUnit.DAYS ) );
      }
    }
    if ( summaries.containsKey( summaryKey ) &amp;&amp; dayChanged &amp;&amp; downtime.getDowntimeFrom().getHour() &gt;= 6
        || publishSummary( StringUtils.convertISO8601StringToZonedDateTime( summaryKey ), downtime.getDowntimeFrom() ) ) // finally check if it is the time to add the summary
    {
      addSummary( summaries, result, savedDowntime, summaryKey, downtime );
      dayChanged = false;
    }
    log.trace( "adding finished downtime {0} to the result", savedDowntime );
    previousDateTime = downtimeFrom;
    savedDowntime = downtime;
  }
</code></pre></li>
</ol>

<p>In combination with some other changes at places I am not responsible for and just use I was finally able to get down to my wished ~2 seconds. Now the only thing that would be nice to have is having far less <code>if-else</code> in the function <code>createDowntimes</code> but I guess that will not be answered here unless I provide more information of what data comes in and how the POJO looks like. Something that is not possible for me to do. </p>

<p>Hope this helps someone one day.</p>
    </div>