<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>List Comprehension</h1>

<p>Instead of</p>

<blockquote>
<pre><code>roll = []
for x in range(0, dice):
    roll.append(roll_die())
</code></pre>
</blockquote>

<p>do this</p>

<pre><code>roll = [roll_die() for _ in range(0, dice)]
</code></pre>

<p>The result is the same, it requires less code, and more pythonic. This also utilizes the <code>_</code>. The underscore is meant to show that the variable in the loop isn't used. This applies to other places in your code as well.</p>

<h1>Ternary Operator</h1>

<p>Instead of</p>

<blockquote>
<pre><code>if (ability &lt; 0):
    keep = 'lowest'
else:
    keep = 'highest'
</code></pre>
</blockquote>

<p>do this</p>

<pre><code>keep = 'lowest' if ability &lt; 0 else 'highest'
</code></pre>

<p>Using a ternary operator can keep you from writing more code, and looks a lot nicer. In this case, it converts four lines into one, which is a big plus.</p>

<h1>Direct Returns</h1>

<p>You don't have to assign a value inside a function before returning it. In this case, you don't need a <code>dice</code> variable inside <code>roll_die()</code>. You can simply return the call to <code>random.randint</code>. Take a look:</p>

<pre><code>def roll_die(sides=10):
    return random.randint(1, sides)
</code></pre>

<h1>Using <code>sum</code></h1>

<p>Instead of</p>

<blockquote>
<pre><code>sum = 0
for d in outcome:
    sum += d
</code></pre>
</blockquote>

<p>use pythons built-in <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> function</p>

<pre><code>dice_sum = sum(outcome)
</code></pre>

<p>The <code>sum</code> functions returns the sum of all the numbers in an iterable. So, you can pass the list used in the loop to that function. It does the same thing you do, but it's already written.</p>
    </div>