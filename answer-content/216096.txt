<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Addressing the immediate question</h2>

<p>I cannot comment on the coding itself, not being fluent in C#. </p>

<p>The old code makes it difficult to directly extract suitable method because the value of the hand is intrinsically tied into the class <code>PokerHands</code> (for which we cannot see the code). Note that I said "... the value ..." instead of "... the calculation of the value ..." - this is an important distinction.</p>

<p>To do what you want (and to make it easier to maintain later in life), the PokerHands class should be restructured to return a value instead of a Boolean. In other words, it should, as currently used in your diagram, be an enum. But, running with the concept of a class:</p>

<p>e.g  <code>playerHandValue = PokerHands.HandValue(pPlayerHand)</code> where <code>HandValue</code> returns an enum that is ordered in the order of outcomes (e.g. pair, triple ... royal flush).</p>

<p>This small change will mean the above code only checks if <code>playerHandValue</code> &gt; <code>computerHandValue</code> or similar. If the two values are the same, then you can have some other method that checks ranking (e.g. doubles base don pair value, or flushes based on suit etc.)</p>

<p>This line of thinking leads to a stronger restructure - that is a <code>Hand</code> Class that encapsulates the above thinking, where the properties returned are:</p>

<ul>
<li>Combination value</li>
<li>High card value for a given combination</li>
<li>High suit value for a given combination</li>
</ul>

<p>Your <code>CompareHands</code> method then doesn't have to worry about calculating any of the values, it only has to compare them - falling more in line with the SOLID OOP principles.</p>

<h2>Addressing the underlying concern</h2>

<p>Now that I have had a closer look at your class diagram, I can see that you will have continued problems trying to re-work this program. </p>

<ul>
<li>The breakdown of cards into different classes by suit will create
problem of repetition (DRY) and cross checking.</li>
<li>The lack of a "Hand" as an object to me worked with is creating the
problem you are trying to address above.</li>
<li>The lack of a "Deck" (card set is the closest) as an object will
create further problems.</li>
</ul>

<p>I recommend that any early work focusses on the structure, this may help prevent any other problems as you work your way through.</p>
    </div>