<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong><em>Ways of improving/optimizations:</em></strong></p>

<p>What <code>fixApostrophes</code> and <code>fixDashes</code> functions actually try to do is replacing a specific punctuation chars with respective HTML entities.<br>
Instead of those numerous horrifying <code>while</code> loops - a more optimized, concise and extendable approach would be to:</p>

<ul>
<li><p>compose a predefined <em>replacement map</em> (where keys are <em>search patterns</em> and values - respective <em>entities values</em>):</p>

<pre><code>const replaceMap = {"``": "&amp;ldquo;", "''": "&amp;rdquo;", "`": "&amp;lsquo;",
                    "'": "&amp;rsquo;", "---": "&amp;mdash;", "--": "&amp;ndash;"};
</code></pre></li>
<li><p>perform all the replacements at once
with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace" rel="nofollow noreferrer"><code>String.replace</code></a> function based on combined regex pattern:</p>

<pre><code>input = input.replace(new RegExp(Object.keys(replaceMap).join('|'), 'g'), function(m){
    return replaceMap[m] || m;
});  
</code></pre>

<p>where <code>Object.keys(replaceMap).join('|')</code> is used to compose <em>regex alternation group</em> from <code>replaceMap</code> keys like <code>''|'|---|--</code></p></li>
<li><p>the former 2 functions can be conceptually combined into a single function called, say <strong><code>punctToEntities</code></strong> (<em>"punctuations to entities"</em>)</p></li>
</ul>

<p>Eventually, the <code>Finaliser</code> class would look as:</p>

<pre><code>const replaceMap = {"``": "&amp;ldquo;", "''": "&amp;rdquo;", "`": "&amp;lsquo;",
                    "'": "&amp;rsquo;", "---": "&amp;mdash;", "--": "&amp;ndash;"};

class Finaliser
{
    constructor()
    {

    }

    static punctToEntities(input) {
    /** Converts punctuation chars to respective HTML entities **/
        input = input.replace(new RegExp(Object.keys(replaceMap).join('|'), 'g'), function(m){
            return replaceMap[m] || m;
        });  

        return input;
    }

    // Render, and deliver the page to the browser.
    protoRender(req, res, view, properties) {
        var date = new Date();

        properties.footstamp = date.toISOString();
        res.render(view, properties, function(err, html){
            if (html === undefined) {
                res.render(view, properties);
            } else {
                html = Finaliser.punctToEntities(html);
                res.send(html);
            }
        });
    }
}
</code></pre>
    </div>