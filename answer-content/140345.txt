<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>template &lt;typename V&gt;
class LinkedList {
    // ...
    template &lt;typename V&gt;
    void insertAt(int index, const V&amp; _data) {
</code></pre>

<p>The declaration <code>typename V</code> for <code>insertAt</code> shadows the declaration of <code>typename V</code> for <code>LinkedList</code>.  The C++ Standard says this behavior isn't allowed.</p>

<blockquote>
  <p><strong>14.6.1 Locally declared names [temp.local]</strong></p>
  
  <p>\$^6\$ A <em>template-parameter</em> shall not be redeclared within its scope (including nested scopes). A <em>template-parameter</em> shall not have the same name as the template name.</p>
</blockquote>

<hr>

<p>Compile with warnings enabled (<code>-Wall -Wextra</code>).  If your goal is to write code intended for other platforms, enable pedantic warnings as well (<code>-pedantic</code>).</p>

<pre><code>gcc -stdlib=libc++ -O3 -march=native -std=c++1z -Wall -Wextra -pedantic
</code></pre>

<p>Two warnings are generated in <code>LinkedList</code>:</p>

<blockquote>
  <p>warning: field <code>next</code> will be initialized after field <code>data</code> [-Wreorder]</p>
</blockquote>

<p>Define and initialize member variables in the order of member declaration. Member variables are always initialized in the order they are declared in the class definition, so write them in that order in the constructor initialization list. Writing them in a different order in the constructor initialization list just makes the code confusing because it won't run in the order you see, which makes it difficult to find order-dependent bugs.</p>

<blockquote>
  <p>warning: comparison of integers of different signs: <code>int</code> and <code>unsigned long</code> [-Wsign-compare]</p>
</blockquote>

<p>If you deal with values at the extreme ends of the value range, sign mismatch comparisons can end up biting you.  If you know as a fact your code will never approach those extreme ends, then you can safely cast to discard the warning.  If your code has the possibility of working in those extreme ends, then use the same type.</p>

<hr>

<p>Assume you create a list of one million elements.</p>

<pre><code>const auto elements_expected = 1000000;
auto list = std::make_unique&lt;Nyo::Util::LinkedList&lt;int&gt;&gt;();

for (int i = 0; i &lt; elements_expected; ++i) {
    list-&gt;add(i);
}

// do something to ensure the list isn't optimized away.
</code></pre>

<p>Your program, when run, will ultimately return </p>

<blockquote>
  <p>Segmentation fault</p>
</blockquote>

<p>RAII containers are designed to call the destructor at the end of scope.  In this use-case, that destruction call cascades down the list adding each call to the stack.  If the list is deep enough, you will overflow the stack and the result is a segmentation fault.  You'll need a destructor that iteratively destructs the list, which will also require that you satisfy the <a href="http://en.cppreference.com/w/cpp/language/rule_of_three" rel="nofollow">rule of five</a>.</p>

<blockquote>
  <p>You are perfectly right about the segmentation fault, how do I actually fix that? I have no clue at the moment</p>
</blockquote>

<p>The simplest way is to pop off the first the element until you have an empty list.</p>

<pre><code>~LinkedList() {
    while (head) {
        head = std::move(head-&gt;getNext());
    }
}
</code></pre>
    </div>