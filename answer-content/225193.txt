<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2><code>return</code> type</h2>

<p><code>char</code> should only be user for characters, as it's name says.  <code>unsigned char</code> for characters or for aliasing other types.  For everything else, use anything else.</p>

<p>If you want <code>(u)int8_t</code>, use <code>&lt;stdint.h&gt;</code>, and if you don't have that header, feel free to write your own <code>typedef</code> (enclosed in an <code>#if</code>).</p>

<p>But for error codes, the best is to use good old <code>int</code>.  Everybody uses <code>int</code> for error codes, so you won't mess with their brains when they wonder why you did use <code>char</code> :)</p>

<hr>

<h2>Function return values and names (source: <a href="https://www.kernel.org/doc/html/v4.10/process/coding-style.html#function-return-values-and-names" rel="nofollow noreferrer">Linux Kernel Coding Style</a>)</h2>

<p>Functions can return values of many different kinds, and one of the most common is a value indicating whether the function succeeded or failed. Such a value can be represented as an error-code integer (-Exxx = failure, 0 = success) or a succeeded boolean (0 = failure, non-zero = success).</p>

<p>Mixing up these two sorts of representations is a fertile source of difficult-to-find bugs. If the C language included a strong distinction between integers and booleans then the compiler would find these mistakes for us... but it doesn’t. To help prevent such bugs, always follow this convention:</p>

<pre><code>If the name of a function is an action or an
 imperative command, the function should
 return an error-code integer. If the name is a
 predicate, the function should return a
 "succeeded" boolean. 
</code></pre>

<p>For example, <code>add work</code> is a command, and the <code>add_work()</code> function returns 0 for success or <code>-EBUSY</code> for failure. In the same way, <code>PCI device present</code> is a predicate, and the <code>pci_dev_present()</code> function returns <code>true</code> if it succeeds in finding a matching device or <code>false</code> if it doesn’t.</p>

<hr>

<h2><code>no_error</code></h2>

<p>The variable <code>no_error</code> is misleading: it can hold an error code.  Probably the origin of the name was the inverted error return codes.  With non-zero error codes better names are: <code>error</code> or <code>status</code>.</p>

<hr>

<h2><code>copy_board</code></h2>

<p>The name of the parameter <code>copy_board</code> is misleading, given that it's not a copy, but a pointer to the original board.</p>

<hr>

<h2>function names short</h2>

<p>For making function names shorter, you can omit prepositions in them (when they are obvious).  For example, <code>store_all_moves_of_pawn()</code> -&gt; <code>store_moves_pawn()</code></p>

<hr>

<h2><code>#pragma once</code></h2>

<p>Although it has its own problems (only if your build configuration is completely broken, actually), it is less error-prone than typical <code>#ifndef</code>&amp;<code>#define</code> include guards.</p>

<p>It's not standard, but most compilers accept it.</p>

<p>Just write this line at the beginning of the header:</p>

<pre><code>#pragma once
</code></pre>

<p><a href="https://stackoverflow.com/q/1143936/6872717">#pragma once vs include guards</a></p>

<hr>

<h2>Names and Order of Includes (source: <a href="https://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes" rel="nofollow noreferrer">Google C++ Style Guide</a>)</h2>

<p>Use standard order for readability and to avoid hidden dependencies: Related header, C library, C++ library, other libraries' .h, your project's .h.</p>

<p>All of a project's header files should be listed as descendants of the project's source directory without use of UNIX directory shortcuts <code>.</code> (the current directory) or <code>..</code> (the parent directory). For example, <code>google-awesome-project/src/base/logging.h</code> should be included as:</p>

<pre><code>#include "base/logging.h" 
</code></pre>

<p>In <code>dir/foo.cc</code> or <code>dir/foo_test.cc</code>, whose main purpose is to implement or test the stuff in <code>dir2/foo2.h</code>, order your includes as follows:</p>

<p>dir2/foo2.h.</p>

<p>A blank line</p>

<p>C system files.</p>

<p>C++ system files.</p>

<p>A blank line</p>

<p>Other libraries' .h files.</p>

<p>Your project's .h files.</p>

<p>Note that any adjacent blank lines should be collapsed.</p>

<p>With the preferred ordering, if <code>dir2/foo2.h</code> omits any necessary includes, the build of <code>dir/foo.cc</code> or <code>dir/foo_test.cc</code> will break. Thus, this rule ensures that build breaks show up first for the people working on these files, not for innocent people in other packages.</p>

<p><code>dir/foo.cc</code> and <code>dir2/foo2.h</code> are usually in the same directory (e.g. <code>base/basictypes_test.cc</code> and <code>base/basictypes.h</code>), but may sometimes be in different directories too.</p>

<p>Within each section the includes should be ordered alphabetically.</p>

<ul>
<li>In your case this would mean this order of includes:</li>
</ul>

<pre><code>#include "chess.h"

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

#include "odinutilities.h"
</code></pre>

<hr>

<h2>unnecessary casts</h2>

<p>Most (if not all) the casts you use are unnecessary.  Casts usually lead to bugs, remove them all if there's not a good reason for them to be.</p>

<hr>

<h2><code>ptrdiff_t</code></h2>

<p>The proper type for pointer arithmetics is <code>ptrdiff_t</code>, not <code>char</code> nor <code>int</code>.</p>

<p>Variables such as <code>to_y</code> should be declared of this type.</p>

<p>You will need <code>#include &lt;stddef.h&gt;</code></p>
    </div>