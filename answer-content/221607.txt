<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Since the original answer is quite long, I will add some of my further thoughts as a second answer. </p>

<hr>

<h1>The classes (continued)</h1>

<h2><code>ChessPiece</code></h2>

<p><code>ChessPiece</code> could also need a thought or two.</p>

<p>The idea of having a common base for all chess pieces which is then specialized for each type of piece is a reasonable approach. The way you chose to implement it partly violates the principles of "specialization". For example, <code>set_id()</code> needs to know that there is a subclass called <code>Knight</code> that has to be handled differently from the other pieces. A better approach would be to implement a generic version of <code>set_id</code> (maybe also <code>_set_id</code> to mark it as "private"), which is then overridden in the <code>Knight</code> class, or any other class that might need a special representation. No need to touch the base class for this.</p>

<p>There are other aspects of the class that might need a little touch to get going, e.g. you should definitely use an enum for the color to save yourself some headache.</p>

<pre class="lang-py prettyprint-override"><code>import enum

class Color(enum.Enum):
    BLACK = 0
    WHITE = 1
</code></pre>

<p>I don't know if there is an acutal use-case for uncolored chess pieces, but if you find the need to have them, you could simply add that to the <code>Color</code> class. Using the enum class will help you to stay away from code like</p>

<pre><code>if self.color.lower() in ('black', 'white', 'b', 'w'):
    self.pieceid = self.color.lower()[0] + self.pieceid
    if self.color.lower() == 'b':
        self.color = 'Black'
    elif self.color.lower() == 'w':
        self.color = 'White'
</code></pre>

<p>and work with</p>

<pre><code>short_color = "b" if self.color == Color.BLACK else "w"
self.pieceid = short_color + self.pieceid
</code></pre>

<p>The change using an enum also sets the journey towards separating the actual object and its properties from the presentation of said object. At the moment chess pieces are represented on the board using their piece ID. You could also simply put the piece instances themselves on the board (empty positions would be filled with <code>None</code> instead of <code>'___'</code> and use their string representation just in case you want to print the board. You already have <a href="https://stackoverflow.com/a/2626364/5682996"><code>__str__</code> and <code>__repr__</code></a> for your pieces, so that step would be a no-brainer. You could also move the <code>BLACK_PIECES</code>/<code>WHITE_PIECES</code> dicts away from the board and store the symbol in each (sub)class. I'm not 100% sure which of these approaches I'ld prefer.</p>

<p>I would also recommend to think about the separation of concerns between the board, the pieces, and a (yet to come - maybe?) chess game (controller). At the moment the pieces are closely linked to the board and use the global board in several places. The rules of the game are implemented in <code>possible_moves()</code> which also sometimes needs to know the board situation, to implement moves like en passant and castling. From what I can see from your question and the code you seem to be aware of this. Also things like creation, teleportation, and capturing are more a game-thing than a piece thing I would think.
I'm not claiming to be an expert in this area, so take this with a grain of salt.</p>

<hr>

<p>The second answer is way less detailed than the first answer. I nevertheless hope you will find some helpful hints that may help to improve your code to your satisfaction.</p>
    </div>