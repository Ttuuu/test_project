<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>After a few days in use, I discovered a few mistakes and would like to share them to you. I also fixed a compile error in clang, because the MultiSkipList functions weren't disabled in a correct way.</p>

<p>I still would like to receive some opinions about style, usability and correctness.</p>

<pre><code>#pragma once

#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;iterator&gt;

namespace detail
{
    template &lt;class T, bool UniqueElements, class Compare = std::less&lt;&gt;, class Container = std::vector&lt;T&gt;&gt;
    class BaseSkipList
    {
    public:
        using container_type = Container;
        using value_type = typename Container::value_type;
        using size_type = typename Container::size_type;
        using iterator = typename Container::iterator;
        using reverse_iterator = typename Container::reverse_iterator;
        using const_iterator = typename Container::const_iterator;
        using const_reverse_iterator = typename Container::const_reverse_iterator;

        BaseSkipList() = default;

        explicit BaseSkipList(Compare _compare) :
            m_Compare(std::move(_compare))
        {
        }

        explicit BaseSkipList(Container _container, Compare _compare = Compare()) :
            m_Container(std::move(_container)),
            m_Compare(std::move(_compare))
        {
            std::sort(std::begin(m_Container), std::end(m_Container), m_Compare);
        }

        ~BaseSkipList() = default;

        BaseSkipList(const BaseSkipList&amp;) = default;
        BaseSkipList(BaseSkipList&amp;&amp;) noexcept = default;

        BaseSkipList&amp; operator =(const BaseSkipList&amp;) = default;
        BaseSkipList&amp; operator =(BaseSkipList&amp;&amp;) noexcept = default;

        bool empty() const
        {
            return std::empty(m_Container);
        }

        size_type size() const
        {
            return std::size(m_Container);
        }

        void clear()
        {
            m_Container.clear();
        }

        void reserve(size_type _new_cap)
        {
            m_Container.reserve(_new_cap);
        }

        size_type capacity() const noexcept
        {
            return m_Container.capacity();
        }

        void shrink_to_fit()
        {
            return m_Container.shrink_to_fit();
        }

        template &lt;class TValueType&gt;
        std::pair&lt;iterator, bool&gt; insert(TValueType&amp;&amp; _value)
        {
            return _insert(std::forward&lt;TValueType&gt;(_value));
        }

        template &lt;class TIterator&gt;
        void insert(TIterator _itr, const TIterator&amp; _end)
        {
            for (; _itr != _end; ++_itr)
            {
                _insert(*_itr);
            }
        }

        void insert(std::initializer_list&lt;value_type&gt; _ilist)
        {
            insert(std::begin(_ilist), std::end(_ilist));
        }

        iterator erase(const_iterator _itr)
        {
            return m_Container.erase(_itr);
        }

        iterator erase(const_iterator _first, const_iterator _last)
        {
            return m_Container.erase(_first, _last);
        }

        template &lt;class TComparable&gt;
        iterator erase(const TComparable&amp; _value)
        {
            auto itr = std::lower_bound(std::begin(m_Container), std::end(m_Container), _value, m_Compare);
            if (itr != end())
            {
                return m_Container.erase(itr);
            }
            return end();
        }

        template &lt;class TComparable&gt;
        iterator find(const TComparable&amp; _value)
        {
            return _find(m_Container, m_Compare, _value);
        }

        template &lt;class TComparable&gt;
        const_iterator find(const TComparable&amp; _value) const
        {
            return _find(m_Container, m_Compare, _value);
        }

        template &lt;class TComparable&gt;
        iterator lower_bound(const TComparable&amp; _value)
        {
            return _lower_bound(m_Container, m_Compare, _value);
        }

        template &lt;class TComparable&gt;
        const_iterator lower_bound(const TComparable&amp; _value) const
        {
            return _lower_bound(m_Container, m_Compare, _value);
        }

        template &lt;class TComparable&gt;
        iterator upper_bound(const TComparable&amp; _value)
        {
            return _upper_bound(m_Container, m_Compare, _value);
        }

        template &lt;class TComparable&gt;
        const_iterator upper_bound(const TComparable&amp; _value) const
        {
            return _upper_bound(m_Container, m_Compare, _value);
        }

        template &lt;class TComparable&gt;
        bool contains(const TComparable&amp; _value) const
        {
            return find(_value) != end();
        }

        /*#####
        # multi element stuff
        #####*/
        template &lt;class TComparable, bool Unique = UniqueElements, typename = std::enable_if_t&lt;!Unique&gt;&gt;
        std::pair&lt;iterator, iterator&gt; equal_range(const TComparable&amp; _value)
        {
            return _equal_range(m_Container, m_Compare, _value);
        }

        template &lt;class TComparable, bool Unique = UniqueElements, typename = std::enable_if_t&lt;!Unique&gt;&gt;
        std::pair&lt;const_iterator, const_iterator&gt; equal_range(const TComparable&amp; _value) const
        {
            return _equal_range(m_Container, m_Compare, _value);
        }

        template &lt;class TComparable, bool Unique = UniqueElements, typename = std::enable_if_t&lt;!Unique&gt;&gt;
        iterator find_last(const TComparable&amp; _value)
        {
            return _find_last(m_Container, m_Compare, _value);
        }

        template &lt;class TComparable, bool Unique = UniqueElements, typename = std::enable_if_t&lt;!Unique&gt;&gt;
        const_iterator find_last(const TComparable&amp; _value) const
        {
            return _find_last(m_Container, m_Compare, _value);
        }

        template &lt;class TComparable, bool Unique = UniqueElements, typename = std::enable_if_t&lt;!Unique&gt;&gt;
        iterator erase_all_of(const TComparable&amp; _value)
        {
            auto range = _equal_range(m_Container, m_Compare, _value);
            return m_Container.erase(range.first, range.second);
        }

        template &lt;class TComparable, bool Unique = UniqueElements, typename = std::enable_if_t&lt;!Unique&gt;&gt;
        size_type count(const TComparable&amp; _value) const
        {
            auto range = _equal_range(m_Container, m_Compare, _value);
            return std::distance(range.first, range.second);
        }

        template &lt;bool Unique = UniqueElements, typename = std::enable_if_t&lt;!Unique&gt;&gt;
        void unique()
        {
            m_Container.erase(std::unique(std::begin(m_Container), std::end(m_Container),
                                          [&amp;compare = m_Compare](const auto&amp; _lhs, const auto&amp; _rhs)
                                          {
                                              return !compare(_lhs, _rhs) &amp;&amp; !compare(_rhs, _lhs);
                                          }), end());
        }

        /*#####
        # comparison stuff
        #####*/
        bool operator ==(const BaseSkipList&amp; _other) const
        {
            return std::equal(begin(), end(), std::begin(_other), std::end(_other),
                              [&amp;compare = m_Compare](const auto&amp; _elLhs, const auto&amp; _elRhs)
                              {
                                  return !compare(_elLhs, _elRhs) &amp;&amp; !compare(_elRhs, _elLhs);
                              });
        }

        friend bool operator !=(const BaseSkipList&amp; _lhs, const BaseSkipList&amp; _rhs)
        {
            return !(_lhs == _rhs);
        }

        bool operator &lt;(const BaseSkipList&amp; _other) const
        {
            return std::lexicographical_compare(begin(), end(), std::begin(_other), std::end(_other), m_Compare);
        }

        friend bool operator &gt;=(const BaseSkipList&amp; _lhs, const BaseSkipList&amp; _rhs)
        {
            return !(_lhs &lt; _rhs);
        }

        friend bool operator &gt;(const BaseSkipList&amp; _lhs, const BaseSkipList&amp; _rhs)
        {
            return _rhs &lt; _lhs;
        }

        friend bool operator &lt;=(const BaseSkipList&amp; _lhs, const BaseSkipList&amp; _rhs)
        {
            return !(_lhs &gt; _rhs);
        }

        /*#####
        # Iterator stuff
        #####*/
        iterator begin() noexcept
        {
            return std::begin(m_Container);
        }

        const_iterator begin() const noexcept
        {
            return std::begin(m_Container);
        }

        const_iterator cbegin() const noexcept
        {
            return std::cbegin(m_Container);
        }

        iterator end() noexcept
        {
            return std::end(m_Container);
        }

        const_iterator end() const noexcept
        {
            return std::end(m_Container);
        }

        const_iterator cend() const noexcept
        {
            return std::cend(m_Container);
        }

        iterator rbegin() noexcept
        {
            return std::rbegin(m_Container);
        }

        const_reverse_iterator rbegin() const noexcept
        {
            return std::rbegin(m_Container);
        }

        const_reverse_iterator crbegin() const noexcept
        {
            return std::crbegin(m_Container);
        }

        iterator rend() noexcept
        {
            return std::rend(m_Container);
        }

        const_reverse_iterator rend() const noexcept
        {
            return std::rend(m_Container);
        }

        const_reverse_iterator crend() const noexcept
        {
            return std::crend(m_Container);
        }

    private:
        Container m_Container;

        Compare m_Compare;

        template &lt;class TValueType&gt;
        std::pair&lt;iterator, bool&gt; _insert(TValueType&amp;&amp; _value)
        {
            auto itr = _lower_bound(m_Container, m_Compare, _value);
            if constexpr (UniqueElements)
            {
                if (itr == end() || m_Compare(_value, *itr))
                {
                    m_Container.insert(itr, std::forward&lt;TValueType&gt;(_value));
                    return {itr, true};
                }
            }
            else
            {
                m_Container.insert(itr, std::forward&lt;TValueType&gt;(_value));
                return {itr, true};
            }
            return {itr, false};
        }

        template &lt;class TContainer, class TCompare, class TComparable&gt;
        static auto _find(TContainer&amp;&amp; _container, TCompare&amp;&amp; _compare, const TComparable&amp; _value)
        {
            auto itr = _lower_bound(_container, _compare, _value);
            if (itr != std::end(_container) &amp;&amp; !_compare(_value, *itr))
            {
                return itr;
            }
            return std::end(_container);
        }

        template &lt;class TContainer, class TCompare, class TComparable&gt;
        static auto _find_last(TContainer&amp;&amp; _container, TCompare&amp;&amp; _compare, const TComparable&amp; _value)
        {
            auto [begin, end] = _equal_range(_container, _compare, _value);
            auto dist         = std::distance(begin, end);
            if (0 &lt; dist)
            {
                std::advance(begin, dist - 1);
                return begin;
            }
            return std::end(_container);
        }

        template &lt;class TContainer, class TCompare, class TComparable&gt;
        static auto _lower_bound(TContainer&amp;&amp; _container, TCompare&amp;&amp; _compare, const TComparable&amp; _value)
        {
            return std::lower_bound(std::begin(_container), std::end(_container), _value, _compare);
        }

        template &lt;class TContainer, class TCompare, class TComparable&gt;
        static auto _upper_bound(TContainer&amp;&amp; _container, TCompare&amp;&amp; _compare, const TComparable&amp; _value)
        {
            return std::upper_bound(std::begin(_container), std::end(_container), _value, _compare);
        }

        template &lt;class TContainer, class TCompare, class TComparable&gt;
        static auto _equal_range(TContainer&amp;&amp; _container, TCompare&amp;&amp; _compare, const TComparable&amp; _value)
        {
            return std::equal_range(std::begin(_container), std::end(_container), _value, _compare);
        }
    };
} // namespace detail

template &lt;class T, class Compare = std::less&lt;&gt;, class Container = std::vector&lt;T&gt;&gt;
using SkipList = detail::BaseSkipList&lt;T, true, Compare, Container&gt;;
template &lt;class T, class Compare = std::less&lt;&gt;, class Container = std::vector&lt;T&gt;&gt;
using MultiSkipList = detail::BaseSkipList&lt;T, false, Compare, Container&gt;;
</code></pre>
    </div>