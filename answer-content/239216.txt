<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think the nicest thing to do is to split your task into three bits, essentially you want to see if a row, column or diagonal has all the entries the same.</p>

<p>A row, column or diagonal can all be thought of just as a (1D) array.</p>

<p>In fact, these things are all the 'lines' (pictorially) that you can find in a 2D array (which span the whole array).</p>

<p>Now given a 2D array A, there's several ways to define a line, for instance the line which corresponds to the second row we can say is the pairs <code>(i, j)</code> such that <code>i === 1</code> (and j can be anything). Similarly the left diagonal is the pairs <code>(i, j)</code> such that <code>i === j</code>.</p>

<p>Ok so I want to think of a line as a function, for instance I will think of the second row as the function</p>

<p><code>(i, j) =&gt; i === 1</code></p>

<p>OK, now given a line (which we represent as a function), I want to extract the elements of A which lie on that line, so I should traverse A, and for each element (i, j) I check if that element is in my line (i.e. if my function returns true for it) and if so include it in my result.</p>

<p>How to do this? Well I /want/ to be able to loop through a 2D array gracefully, sadly we can't do that in JS, so I'll just look at each row in turn, determine which elements of that row are in my line and keep them, something like.</p>

<pre><code>function getSectionOf2DArray(arr, lineFunc) {
    return arr.map((row, i) =&gt; row.filter((_, j) =&gt; lineFunc(i, j)));
}
</code></pre>

<p>So now I have a 2D array still, the element at position i of the array is an array consisting of the things in row i which are in my line. If I flatten it I'll have the array of things in my line. I'm not sure if you're using node or are in the browser, so I'll write a flatten to be safe.</p>

<pre><code>function getSectionOf2DArray(arr, sectionFunc) {
    return Array.prototype.concat.apply(
        [],
        arr.map((row, i) =&gt; row.filter((_, j) =&gt; sectionFunc(i, j)))
    );
}
</code></pre>

<p>Nearly there now, let me define the lines of a 2D array.</p>

<p>First the rows, well given a 2D array A, these are just the things <code>(i, j) =&gt; i === k</code> for k up to the length of the array.</p>

<pre><code>const rowLines = array =&gt;
    Array(array.length)
        .fill(0)
        .map((_, k) =&gt; (i, j) =&gt; i === k);
</code></pre>

<p>Now the columns, similar story just with a slight reversal, now it's <code>(i, j) =&gt; j === k</code></p>

<pre><code>const colLines = array =&gt;
    Array(array.length)
        .fill(0)
        .map((_, k) =&gt; (i, j) =&gt; j === k);
</code></pre>

<p>Finally the diagonals, the left diagonal (i.e. starting in the top left) is <code>(i, j) =&gt; i === j</code>, while the right diagonal is <code>(i, j) =&gt; i + j === A.length - 1</code></p>

<pre><code>const leftDiag = array =&gt; (i, j) =&gt; i === j;
const rightDiag = array =&gt; (i, j) =&gt; i + j === array.length - 1;
</code></pre>

<p>(I have made leftDiag continue to be a function defined in terms of array just for consistency, it will make our life nicer later).</p>

<p>Great, so now if we do</p>

<pre><code>const ourLines = array =&gt;
    rowLines(array)
        .concat(colLines(array))
        .concat(leftDiag(array))
        .concat(rightDiag(array));
</code></pre>

<p>Then ourLines is a function which takes an array and returns an array of lines (aka functions).</p>

<p>Now we just need to define a function which says whether an 'evaluated' (as in I have the actual elements rather than the function) line corresponds to a win, this is easy, it's just if all the elements are the same and not equal to undefined. If all the elements are the same then when we turn the array into a set it will have just one element</p>

<pre><code>const win = evalLine =&gt; new Set(evalLine).size === 1 &amp;&amp; evalLine [0] !== undefined;
</code></pre>

<p>OK, now we should just go through our lines, get the actual array of elements in A they correspond to, and check if any is a win.</p>

<pre><code>const winResults = array =&gt;
    ourLines(array).map(line =&gt; win(getSectionOf2DArray(array, line)));

const isThereAWin = array =&gt; winResults(array).includes(true);
</code></pre>

<p>In summary, </p>

<pre><code>const winChecker = squares =&gt; {
    const getSectionOf2DArray = (arr, sectionFunc) =&gt;
        Array.prototype.concat.apply(
            [],
            arr.map((row, i) =&gt; row.filter((_, j) =&gt; sectionFunc(i, j)))
        );

    const rowLines = array =&gt; Array(array.length).fill(0).map((_, k) =&gt; (i, j) =&gt; i === k);

    const colLines = array =&gt; Array(array.length).fill(0).map((_, k) =&gt; (i, j) =&gt; j === k);

    const leftDiag = array =&gt; (i, j) =&gt; i === j;
    const rightDiag = array =&gt; (i, j) =&gt; i + j === array.length - 1;

    const ourLines = array =&gt;
        rowLines(array)
           .concat(colLines(array))
           .concat(leftDiag(array))
           .concat(rightDiag(array));

    const win = evalLine =&gt; new Set(evalLine).size === 1 &amp;&amp; evalLine[0] !== undefined;

    const winResults = array =&gt; ourLines(array).map(line =&gt; win(getSectionOf2DArray(array, line)));

    const isThereAWin = array =&gt; winResults(array).includes(true);

    return isThereAWin(squares);
};
</code></pre>

<p>I hope you agree this pattern is nice. There are ways to write more concise things for your specific use case but this is simple and extendable.</p>
    </div>