<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A few things to mention:</p>

<p>As has been mentioned, you're using 1-based indexing instead of 0-based indexing.  0-based is much more intuitive, since most implementations, of indexing in most programming languages, use 0-based indexing.</p>

<p>You're using the <code>Arrays.asList</code> twice for each iteration of the loop. This increases the inefficiency.</p>

<p>Calling <code>indexOf</code> inside the loop is basically creating another loop and doesn't gain anything a <code>for</code> loop wouldn't give you.</p>

<p>I think the name of your method could be better.  <code>search</code> indicates all you want is the value.  However you're returning the indexes.  Therefore <code>indexesOf</code> might be more appropriate, and more in fitting with similar methods in other collections.</p>

<p>Your method is hard coded for <code>int</code>.  This isn't very extensible.  A generic version would probably be more fitting.</p>

<p>You're returning an <code>int[]</code>.  This doesn't really tell anyone what this is supposed to represent.  I would suggest a class(<code>Indexes</code>) to hold the indexes would allow you to represent them with a name that will immediately let the user know what it represents.</p>

<p>You haven't made any provision to handle failed searches.</p>

<p>It looks to me that the 2D array is basically a matrix.  Therefore I would suggest labeling the indexes as such(row,column).</p>

<p>The <code>Indexes</code> class would look like this:</p>

<pre><code>public class Indexes {
    int row = 0;
    int col = 0;

    public Indexes(int row, int col) {
        this.row = row;
        this.col = col;
    }

    public Indexes() {
    }

    public int getRow() {
        return row;
    }

    public void setRow(int row) {
        this.row = row;
    }

    public int getCol() {
        return col;
    }

    public void setCol(int col) {
        this.col = col;
    }
    @Override
    public String toString(){
        return String.format("[%d, %d]",row,col);
    }
}
</code></pre>

<p>A generified version with the points I mentioned could look something like this:</p>

<pre><code>public static&lt;T&gt; Indexes indexesOf(T[][] arr, T value){
    for(int row = 0; row &lt; arr.length; ++row){
        for(int col = 0; col &lt; arr[row].length; ++col){
            if(arr[row][col].equals(value)){
                return new Indexes(row,col);
            }
        }
    }
    return new Indexes(-1,-1);
}
</code></pre>

<h2>EDIT Alternative code based on OP's comments</h2>

<pre><code>static final int DEFAULT_RETURN_VALUE = -1;
public static&lt;T&gt; Indexes indexesOf(T[][] arr, T value){
    for(int row = 0; row &lt; arr.length; ++row){
            int col = indexOf(arr[row],value);
            if(col &gt; DEFAULT_RETURN_VALUE){
                return new Indexes(row,col);
            }
    }
    return new Indexes(DEFAULT_RETURN_VALUE,DEFAULT_RETURN_VALUE);
}
public static&lt;T&gt; int indexOf(T[] arr, T value){
    for(int i = 0; i &lt; arr.length; ++i){
        if(arr[i].equals(value)){
            return i;
        }
    }
    return DEFAULT_RETURN_VALUE;
}
</code></pre>
    </div>