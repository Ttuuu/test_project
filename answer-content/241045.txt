<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think, I can comprehend your main idea, "to create a specialized class for mathematical N-dimensional vectors" but there are few problems by doing it using inheritance in your case. You should use a truly specialized class for that, think of it, <code>std::vector</code> is a <code>stl</code> container, it is supposed to handle data as a data structure, any class which extends from it, should handle data.</p>

<p>From a design perspective it would be better to create a class which either adapts <code>std::vector</code> as a member (is composed by) or one which has a vector of objects (commonly numerical types, but in extension mathematical objects too).</p>

<pre class="lang-cpp prettyprint-override"><code>/*using google c++ style guide (only for naming purposes)*/
template &lt;typename MathObject&gt;
class Vector
{
private:
    //allows to handle a runtime determined size vector
    //could be implemented using std::unique_ptr
    //(define a default constructor in the case that MathObject be a class)
    MathObject *vector_;

    size_t dimension_; //allows you to check the dimension of a vector
public:
    Vector(MathObject* const&amp; vector, size_t dimension) :
        vector_(vector), dimension_(dimension)
    {
    }

    ~Vector()
    {
        delete[] vector_;
    }
    //...
};
</code></pre>

<p>Many thanks to <a href="https://codereview.stackexchange.com/users/308/konrad-rudolph">Konrad Rudolph</a> who has mentioned the mistakes on your implementation.</p>
    </div>