<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Swift 4</h3>

<p>i would use the new swift 4 <code>init(grouping:by:)</code></p>

<p>since you create always new <code>Department</code>s then the following code is possible. </p>

<p>if you have an existing <code>[Department]</code> then the code not fit your request.</p>

<pre><code>enum Job {
    case developer
    case programmer
    case coder
}

struct Person {
    let id: Int
    let job: Job    
}

struct Department {
    let job: Job
    var staff: [Person]

    mutating func addStaff(_ person: Person) {
        staff.append(person)
    }
}

let initial = [
    Person(id: 0, job: .developer),
    Person(id: 1, job: .developer),
    Person(id: 2, job: .programmer),
    Person(id: 3, job: .programmer),
    Person(id: 4, job: .coder)
]

let grouped = Dictionary(grouping: initial, by: { $0.job })
let departments = grouped.map{ key, value in Department( job: key, staff: value )}
</code></pre>

<p><em>( <strong>NOTE:</strong> i don't tested it in playground - just from head to the answer)</em></p>

<h3>Swift 3</h3>

<p>in Swift 3 you can use an extension to the array to resolve this grouping</p>

<pre><code>public extension Sequence {
    func group&lt;U: Hashable&gt;(by key: (Iterator.Element) -&gt; U) -&gt; [U:[Iterator.Element]] {
        var categories: [U: [Iterator.Element]] = [:]
        for element in self {
            let key = key(element)
            if case nil = categories[key]?.append(element) {
                categories[key] = [element]
            }
        }
        return categories
    }
}
</code></pre>

<p><em>the extension is from here <a href="https://stackoverflow.com/a/31220067/1930509">https://stackoverflow.com/a/31220067/1930509</a> and when you need a more performat grouping you can find it at the link</em></p>
    </div>