<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here is a list of found issues, in order of occurrence:</p>

<ul>
<li>importing from your custom <code>can_convert</code> is fine. You should stick to modularization like that for bigger projects. However, here, it actually seems to be in the way of things. It checks if the string can be converted, but does not actually do any conversion. We later have to do the conversion again anyway. This can be combined.</li>
<li>Currently, the welcome message and actual <code>random</code> range can deviate. You already know what <code>f</code>-strings are, so they should be used to keep that in line.</li>
<li>Use <code>randint</code> to include both bounds, as opposed to <code>randrange</code>, which would stop one short of <code>upper_bound</code>, as you already noted.</li>
<li><code>input</code> will already return a string, no need to convert via <code>str</code>.</li>
<li>By inverting the logic in checking for <code>"pass"</code>, a whole block of indentation can be spared. Just check if <code>user_inp == "pass"</code> and <code>break</code> if <code>True</code>. All following code can be one level less indented, since no <code>else</code> statement is required.</li>
<li><p>Now for the main logic. The <code>try</code> block has moved here, away from the import. Notice that the logic is still the same. However, we assign to <code>number</code> immediately without checking first. If this fails, the <code>except</code> block is triggered.</p>

<ul>
<li>Note that <code>int("2.2")</code> will also be a <code>ValueError</code> despite <code>"2.2"</code>, to humans, clearly being a number. So the error message should specify <code>whole</code> numbers to be more precise.</li>
<li>The added <code>else</code> block is run if no <code>exception</code> was raised, so in the normal game.</li>
<li><code>number</code> is now available, so no need to call <code>int</code> conversion repeatedly.</li>
</ul>

<p>Keep <code>try</code> blocks short and concise and never leave an <code>except</code> statement bare. You did this fine! Lastly, try to not nest <code>try/except</code> blocks.</p></li>
<li>There was a typo for <code>attempts</code>.</li>
</ul>

<pre class="lang-py prettyprint-override"><code>import random

upper_bound = 100
lower_bound = 1

welcome_msg = f"""Welcome to GuessTheNumber Game!
I'm thinking of a number between {lower_bound} and {upper_bound}.
Can you guess this number?

[?] Type 'pass' to exit game.
"""
print(welcome_msg)

number_to_guess = random.randint(lower_bound, upper_bound)
attempts = 0

while True:
    user_inp = input("Your choice: ")
    if user_inp == "pass":
        break
    try:
        number = int(user_inp)
    except ValueError:
        print('Enter whole numbers only!')
    else:  # no exception occurred
        attempts += 1
        if number &lt; number_to_guess:
            print("Your guess is too small.")
        elif number &gt; number_to_guess:
            print("Your guess is too high.")
        else:
            print("Correct! You won the game!")
            print(f"Attempts: {attempts}")
            break
</code></pre>
    </div>