<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Regarding</p>

<pre><code>&lt;body style="background: pink"&gt;
  &lt;p id="word" style="color: black"&gt;Bubble sort: visualization&lt;/p&gt;
  &lt;button onclick=CreateBarPlot()&gt;Generate data&lt;/button&gt;
  &lt;button onclick=bubble_sort()&gt;Sort&lt;/button&gt;
</code></pre>

<p>It's not a good idea to use inline event handlers in modern Javascript, because they require global pollution and can have some <a href="https://stackoverflow.com/a/59539045">very strange behavior</a>. Leave the HTML markup to be the <em>actual content</em> of the site - keep the styling and Javascript to their own self-contained sections instead, preferably. To attach event listeners to an element, use <code>addEventListener</code>.</p>

<p>In the Javascript, you have some places where you assign to different <code>.style</code> properties of an element. Consider adding CSS rules instead. Here, the bars are children of the <code>#bar_plot</code>, so all you need is the <code>#bar_plot &gt; div</code> selector - you don't even need to add a class to the elements. Of course, when the property you want is dynamically calculated in the JS, like <code>div.style.width = (value * 10) + 'px'</code>, you need to use JS, but otherwise, better to use CSS rules.</p>

<p>You use <code>div.innerHTML = value;</code>. Unless you're <em>deliberately</em> inserting HTML markup, it's faster, safer, and more predictable if you use the <code>textContent</code> property instead, if you want to put text inside an element. (Even if <em>you're</em> already sure <code>value</code> is plain text, and doesn't contain HTML markup, other readers of the code may not be as sure as you on casual inspection, which may cause worries and double-checks) Same thing for when retrieving element content - unless you need to retrieve HTML markup, use <code>textContent</code>.</p>

<p>You declare a bar element with:</p>

<pre><code>const div = document.createElement("div");
</code></pre>

<p><code>const</code> is ES2015 syntax. ES2015 syntax is <em>great</em> - it often makes code more readable and concise. I'd highly recommend using it everywhere. If you need compatibility with completely obsolete browsers (like IE), the professional thing to do is to use <a href="https://babeljs.io/" rel="nofollow noreferrer">Babel</a> to transpile your clean ES2015+ code into ES5 syntax.</p>

<p>But whatever you decide, make sure to have a consistent style. If you really want to write in ES5 for some reason, then best to do so everywhere - otherwise, use ES2015+. (Don't mix <code>var</code> and <code>const</code> / <code>let</code>).</p>

<p>Either way, also make sure to declare your variables before using them - your <code>numbers</code> variable (and <code>bar1_value</code>, and <code>bar1_width</code>, and more) are not declared, which means that when you assign to it, you're implicitly creating a global variable. Or, if you use strict mode (which you should, it turns potential bugs like these into early errors), an error will be thrown.</p>

<p>Elements with IDs automatically become global variables with the name of the ID. This is weird and can cause bugs and confusion. I'd prefer to avoid IDs when possible, or at least minimize their usage to only <em>absolutely unique</em> elements. Dynamic numeric-indexed IDs <em>definitely</em> should be avoided (especially since they aren't being referenced anywhere else anyway).</p>

<p>The overwhelming majority of professional Javascript uses <code>camelCase</code> for nearly all variable names (including functions). <code>PascalCase</code> is generally reserved for classes and constructor functions, which you aren't using here. You can consider whether you want to conform to the de-facto standard.</p>

<p>You're sometimes putting semicolons at the end of statements, and sometimes you aren't. Omitting semicolons can <a href="https://stackoverflow.com/questions/2846283/what-are-the-rules-for-javascripts-automatic-semicolon-insertion-asi">occasionally result in bugs</a>, especially if you're a beginner - even if you know the rules of ASI, it's best to be consistent with a code style. Consider using a linter like ESLint to automatically prompt you to fix these sorts of inconsistencies and potential bugs.</p>

<p><code>BARS_DATA</code> is a confusing name. It's declared as an array, and it sounds like it holds <em>data</em>, which I would intuitively think would be the numeric data points, but it actually holds <em>elements</em>. Maybe call it <code>barElements</code> instead. Or, even better, you can avoid the global array there entirely by selecting the rows from the DOM when needed instead.</p>

<p>With bubble sort, after a full initial iteration through the array, the value at the last index will be completely sorted (the final value there). After the second full iteration, the second-last value will be completely sorted, and so on. You can improve your logic by iterating one less element each time, and perhaps make the logic clearer by giving these completely-sorted elements a style change.</p>

<p>Rather than <code>bubbleSort</code> recursively calling itself with index and <code>changed</code> arguments, I think the logic might be clearer if it only ran <em>once</em> instead, and added delays by <code>await</code>ing a Promise that resolves after a couple seconds.</p>

<p>It's possible to click the <code>sort</code> button more than once, resulting in multiple sorts occurring simultaneously, which doesn't make sense. Perhaps disable the buttons while sorting.</p>

<p>Put it all together, and you get something like:</p>

<p></p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>'use strict';

// you could also put the whole script into an IIFE to avoid globals

function generateNumbers(count = 15) {
  const numbers = [];
  for (let i = 0; i &lt; count; i++) {
    numbers.push(Math.floor(Math.random() * (70 - 1)) + 1);
  }
  return numbers;
}

function createBar(index, value) {
  const div = document.createElement("div");
  div.textContent = value;
  div.style.width = (value * 10) + 'px';
  return div;
}

function createBarPlot() {
  const existingPlot = document.querySelector('.bar-plot');
  if (existingPlot) {
    existingPlot.remove();
  }
  const barPlot = document.body.appendChild(document.createElement("p"));
  barPlot.className = 'bar-plot';
  const numbers = generateNumbers();
  for (let i = 0; i &lt; numbers.length; i++) {
    barPlot.appendChild(createBar(i, numbers[i]));
  }
}

const delay = ms =&gt; new Promise(resolve =&gt; setTimeout(resolve, ms));
async function bubbleSort() {
  const barElements = [...document.querySelectorAll('.bar-plot &gt; div')];

  // Some helper functions first:
  const getNum = i =&gt; Number(barElements[i].textContent);
  const switchBars = (i) =&gt; {
    barElements[i].insertAdjacentElement('afterend', barElements[i - 1]);
    // Swap the positions of the bars in the array of elements:
    [barElements[i], barElements[i - 1]] = [barElements[i - 1], barElements[i]];
  };

  for (let cyclesToGo = barElements.length - 1; cyclesToGo &gt;= 0; cyclesToGo--) {
    // Add active class to first element:
    barElements[0].classList.add('active');
    for (let i = 1; i &lt;= cyclesToGo; i++) {
      // Add active class to next element:
      barElements[i].classList.add('active');
      if (getNum(i - 1) &gt; getNum(i)) {
        switchBars(i);
      }
      await delay(50);
      // Remove active class from last element:
      barElements[i - 1].classList.remove('active');
    }
    // Cycle complete; last one iterated over is in its final position
    barElements[cyclesToGo].className = 'done';
  }
  generateBtn.disabled = false;
}

const buttons = document.querySelectorAll('button');
const [generateBtn, sortBtn] = buttons;
const setDisabled = newDisabled =&gt; {
  for (const button of buttons) {
    button.disabled = newDisabled;
  }
};
generateBtn.addEventListener('click', () =&gt; {
  setDisabled(false);
  createBarPlot();
});
sortBtn.addEventListener('click', () =&gt; {
  setDisabled(true);
  bubbleSort();
});</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>body {
  background: pink;
}
.bar-plot &gt; div {
  color: black;
  text-align: right;
  background: lightblue;
  padding: 2.5px;
  margin: 1px;
}
.bar-plot &gt; div.active {
  background: red;
}
.bar-plot &gt; div.done {
  background: yellow;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;p&gt;Bubble sort: visualization&lt;/p&gt;
&lt;button&gt;Generate data&lt;/button&gt;
&lt;button&gt;Sort&lt;/button&gt;</code></pre>
</div>
</div>

    </div>