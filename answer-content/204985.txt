<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>Inconsistent use of <code>var</code></h3>

<p>I love <code>var</code>, I use it pretty much everywhere. IMO <em>not</em> using it makes C# read like Java, and that can't be good. But that's just my opinion, and given a code base that doesn't use it, I'll conform to the style in place and keep its [non-]usage consistent - because whether you choose to use it or not, what matters is <em>consistency</em>. With that in mind, this is rather disturbing:</p>

<pre><code>        var serializer = new XmlSerializer(objectInstance.GetType());
        StringBuilder sb = new StringBuilder();
</code></pre>

<p>Syntactically, the two statements are essentially the same. Yet one uses <code>var</code>, and the other doesn't, for no apparent reason. Since that's the only place <code>var</code> is used, I'd change <code>var serializer</code> to <code>XmlSerializer serializer</code> and move on.</p>

<h3>++thing | thing++</h3>

<p>Seeing <code>++i</code> is disturbing. It makes you stop and think "wait what's the reason for pre-[in|de]crementing here?", for no reason at all, because there's no reason at all to do <code>++i</code> in a <code>for</code> loop, besides coding style perhaps (makes no difference because the increment's returned value isn't used anyway). That's why some will see it as a subjective nitpick, but IMO if typing <code>for</code> and hitting <kbd>TAB</kbd> in Visual Studio makes a default auto-template that does <code>i++</code>, then it's reasonable to consider <code>i++</code> in a <code>for</code> loop as the least surprising "style"... now that said you're consistent about using <em>prefix</em> in situations that make no difference, so I'll give you that. But I would have no difficulty believing <em>postfix</em> is the prevalent and expected "style".</p>

<p>If you're using <code>++i</code> because of some misguided micro-performance optimization concern, I encourage you to read <a href="https://stackoverflow.com/a/3346729/1188513">Eric Lippert's excellent SO answer</a> describing how prefix and postfix works.</p>

<hr>

<blockquote>
<pre><code>public static Orientation GetOrientation(this int n)
</code></pre>
</blockquote>

<p>I don't think this is a good extension method to have. Especially since <code>Orientation</code> is an enum, which <em>already</em> readily casts to/from <code>int</code>... and I would expect the <code>default</code> case to throw, not return some arbitrary value. But <code>switch</code> is typically seen switching on enums, not on integers. It's ...weird, and likely not needed at all.</p>

<p>The name is wrong, too. <code>ToOrientation</code> would be more appropriate. "Get" sounds like you're <em>fetching</em> something; "To" is commonly used to convey a type conversion that involves copying or transforming the data: <code>ToArray</code>, <code>ToString</code>. Then again, <code>(Orientation)value</code> is much more straightforward.</p>

<hr>

<blockquote>
<pre><code>public enum SquareType
{
    Foggy,
    Water,
    Undamaged,
    Damaged,
    Sunk
}
</code></pre>
</blockquote>

<p>The terminology isn't completely unambiguous: the enums could use a <code>&lt;summary&gt;</code> xml-doc comment to enhance IntelliSense when using them.</p>

<pre><code>/// &lt;summary&gt;The state of a single grid position.&lt;/summary&gt;
public enum SquareType
{
    /// &lt;summary&gt;Unknown state.&lt;/summary&gt;
    Foggy,
    /// &lt;summary&gt;Grid position was previously attacked, and revealed water.&lt;/summary&gt;
    Water,
    /// &lt;summary&gt;Grid position contains a ship.&lt;/summary&gt;
    Undamaged,
    /// &lt;summary&gt;Grid position was previously attacked, and revealed a ship.&lt;/summary&gt;
    Damaged,
    /// &lt;summary&gt;Grid position was previously attacked, and the ship was sunken.&lt;/summary&gt;
    Sunk
}
</code></pre>

<p>Unless I'm misunderstanding what each value stands for, I think the enum is mixing concerns a bit: <code>Sunk</code> isn't a grid position state, it's a <em>ship</em> state: as far as the game grid is concerned, whether the ship there is sunken or just hit makes no difference: there's a red pin at that position. I believe more descriptive names could be used, that would make the xml-doc less necessary:</p>

<pre><code>public enum GridState
{
    Unknown,
    ShipPosition,
    PreviousMiss,
    PreviousHit,
}
</code></pre>

<p>The <code>Orientation</code> enum is fine, but IMO could be simplified to <code>Horizontal</code> and <code>Vertical</code> - whether it's pointing left or pointing right doesn't make any difference, unless your UI wants to make that difference... but then again, game-wise, it changes nothing and I'd concentrate on getting a solid model first, and <em>then</em> augment it with bells &amp; whistles like game state serialization and 4-directional ships.</p>

<hr>

<h3>GridSquare</h3>

<p>IMO the class is superfluous, and knows way too many things about its world: a grid cell should be just that: a <em>grid cell</em>, i.e. a <code>SquareType</code> (/<code>GridState</code>) value. It's not its job to know or care about what specific ship might occupy that space, even less to know that ships are indexed, and that a specific index corresponds to a particular ship. A <code>GridSquare</code> class would be something I'd write at the UI layer, with information such as <code>PixelSize</code>, <code>BorderColor</code>, some <code>Click</code>, <code>DoubleClick</code>, and <code>Hover</code> handlers: it has nothing to do in the model!</p>

<h3>Grid</h3>

<p>I find the grid class rather anemic, ..and IMO the grid size should be constant: Battleship is played on a 10x10 grid in every variant that involves 5 ships with sizes 5-4-3-3-2. If you want a parameterized grid size, then you'll want configurable fleet setups, ...but at this point it's scope-creep: keep it stupid simple (KISS).</p>

<p>Your grid is essentially a 2D array of grid state values: it might as well <em>be</em> a 2D array of grid state values.</p>

<h3>Ship</h3>

<blockquote>
<pre><code>public class Ship
{
    public ShipType ShipType { get; set; }
    public Orientation Orientation { get; set; }
    public int Health { get; set; }
</code></pre>
</blockquote>

<p>Why would a ship's <code>ShipType</code> or <code>Orientation</code> need to ever change after it's created? These should be get-only, immutable values assigned in the constructor. And if <code>Health</code> is meant to be assigned through <code>Hit</code> and <code>Repair</code> methods, then the setter shouldn't be <code>public</code>.</p>

<pre><code>public Ship(ShipType shipType, Orientation orientation)
{
    ShipType = shipType;
    Orientation = orientation;
}

public ShipType ShipType { get; }
public Orientation Orientation { get; }
public int Health { get; private set; }
</code></pre>

<p>I like the simplicity of modeling ship damage as "hit points", however the "health" alone doesn't tell us anything about the state of the ship (i.e. <em>where</em> is it hit?), which means our API needs to get the <em>state of the ship</em>... from <em>not-the-ship</em>.</p>

<pre><code>private bool[] _state;
</code></pre>

<p>With an internal array of <code>bool</code> values, we can track the ship's health <em>and</em> know where it's hit, <em>in one place</em>. Then the <code>Health</code> can be get-only as well:</p>

<pre><code>public int Health =&gt; _state.Count(e =&gt; e); // counts the 'true' elements in _state
</code></pre>

<h3>Player</h3>

<p>Again, mutability is problematic here; <code>Grid</code> and <code>Ships</code> should have private setters, if at all:</p>

<pre><code>    public Grid Grid { get; set; }
    public List&lt;Ship&gt; Ships { get; set; }
</code></pre>

<p>I agree with a player owning a grid, but as I said above I would have made the grid own the ships.</p>
    </div>