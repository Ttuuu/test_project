<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Design</h2>

<p>If you are going to do this the C++ way then you should be using standard algorithms. A tree is a type of container; so you should be able to get an iterator to logically pass over each element in the container.</p>

<p>As a result I would expect the code to look like this:</p>

<pre><code>    Tree    one;
    Tree    two;
    // Add data to one and two here.


    std::vector&lt;int&gt; result;
    result.reserve(one.size() + two.size());

    // There is a standard algorithm to combine two sorted containers.
    // So I would expect you to use that. Which means your
    // Tree structure should support an iterator concept.
    std::merge(std::begin(one), std::end(one),
               std::begin(two), std::end(two),
               std::back_inserter(result));
</code></pre>

<p>So looking at your code I see</p>

<pre><code>struct Node
{
  Node* left;
  Node* right;
  int val;
};
</code></pre>

<p>What I would actually expect to see is:</p>

<pre><code>class Tree
{
    struct Node
    {
        Node*   left;
        Node*   right;
        int     val;
    };
    class Iterator
    {
        public:
            using   value_type      = int;
            using   pointer         = int*;
            using   reference       = int&amp;;
            using   difference_type = std::ptrdiff_t;
            using   iterator_category = std::forward_iterator_tag;

            Iterator();       // end()
            Iterator(Node*);  // begin()

            int const&amp; operator*();
            Iterator operator++();
            Iterator operator++(int);

            bool operator==(Iterator const&amp; rhs) const;
            bool operator!=(Iterator const&amp; rhs) const;
    };
    Node*        root;
    std::size_t  size;

    public:
        Tree();
        void insert(int val);

        using iterator       = void;      // can't modify a BST
        using const_iterator = Iterator;

        const_iterator begin()  const {return Iterator(root);}
        const_iterator cbegin() const {return Iterator(root);}
        const_iterator end()    const {return Iterator();}
        const_iterator cend()   const {return Iterator();}

        bool         empty() const;
        std::size_t  size()  const;
};
</code></pre>

<h2>Code Review</h2>

<p>Now that I have shown what I would expect, let's have a look at what you wrote.</p>

<h3>Don't use the <code>using namespace X</code> expression.</h3>

<p>Doing this is bad practice. You are asking for trouble in the long run. For details see: <a href="https://stackoverflow.com/q/1452721/14065">Why is “using namespace std” considered bad practice?</a></p>

<pre><code>using namespace std;
</code></pre>

<p>Even doing the below can be dangerous (though less than above). If you are going to do this don't do it at file scope: try and restrict the scope by doing it inside a function.</p>

<pre><code>using boost::irange;
using boost::variant;
</code></pre>

<p>Both of these are bad habits. So, even for small projects, you should resist doing this. Habits are hard to break and you may do it accidentally when it actually matters.</p>

<p>The reason the "Standard" namespace is called "std" is so that the prefix <code>std::</code> did not impose a large burden.</p>

<h3>Constructor Using brace list</h3>

<p>In this type of simple case:</p>

<pre><code>struct Node
{
  Node(Node* l, Node* r, int v):left(l), right(r), val(v)
  {

  }
  Node* left;
  Node* right;
  int val;
};
</code></pre>

<p>You don't actually need to define a constructor. You can use brace initialization to initialize all the members (without needing a constructor).</p>

<pre><code>Node x = new Node {nullptr, nullptr, 3};
</code></pre>

<h3>User Defined Types</h3>

<p>Its normal to use an initial capitol letter to define "User Defined Types" (while functions and variables have an initial lower case letter).</p>

<p>Now this is a common convention, but not universal (so you can take it or leave it). But using this convention does help. One of the big things about C++ is the type information. Being able to distinguish types from objects is really useful (so its a convention I follow).</p>

<pre><code>typedef variant&lt;Node*, int&gt; stkElemT; // I would use StkElemT (see next rule)
typedef stack&lt;stkElemT&gt; bstStkT;      // I would use BstStkT  (see next rule)
</code></pre>

<h3>Self Documenting Code</h3>

<p>Writing self documenting code is critical to writing maintainable code. This basically means writing function and type names that explain exactly what they do.</p>

<pre><code>typedef variant&lt;Node*, int&gt; stkElemT; // I would use StackElement
typedef stack&lt;stkElemT&gt; bstStkT;      // I would use SearchTreeStack
</code></pre>

<h3>Comments</h3>

<p>I actually like your comments (I usually hate people's comments). These are actually useful. So keep this up.</p>

<pre><code>//from variant extract the pointer if valid otherwise NULL
struct stkElemVisitorNode : public boost::static_visitor&lt;Node*&gt;

//from variant extract the integer value if valid otherwise -1
struct stkElemVisitorInt : public boost::static_visitor&lt;int&gt;

//expand left most path of top node. 
void fillPathStkRecurse(bstStkT&amp; bstStk)
{
}
</code></pre>

<h3>BST and Balanced BST</h3>

<p>A BST (binary search tree) does not need to be balanced. You go to extensive lengths to make sure the tree you build is balanced. I think this is overkill. A simple BST is easier to build.</p>

<pre><code>Node* create_tree(vector&lt;int&gt;&amp; vals, int start, int end) //end excluded
</code></pre>

<h3>Begin/End</h3>

<p>In C++ it is more traditional for the <code>end</code> iterator to be one past the end. Your code it marks the actual last element.</p>

<p>Its a valid choice. But not traditional C++ (so you should mention it in the comment. You try but I am not sure its clear). I would also encourage you to try it using the traditional method; in my opinion it will make the code easier.</p>

<pre><code>Node* create_tree(vector&lt;int&gt;&amp; vals, int start, int end) //end excluded
</code></pre>

<h3>Prefer nullptr over NULL</h3>

<pre><code>    return new Node(NULL, NULL, vals[start]);
</code></pre>

<p>In C++11 we introduced <code>nullptr</code> which is a type safe <code>NULL</code>.</p>
    </div>