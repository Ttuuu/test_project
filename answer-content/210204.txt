<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>PEP 8</h1>

<p>There is a generally accepted style for Python known as <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a>. Most notably <code>camelCase</code> functions/methods should become <code>snake_case</code>. There are some other issues with stylistic conventions, I would give the document I linked to an overview.</p>

<h1>Main Function</h1>

<p>I would advise you add <a href="https://stackoverflow.com/a/20158605/667648">a main function to your program.</a> The main reason being: If I want to use the functions from your script, when I import your script I probably don't want to actually run your program, just use <code>generateSolution</code> and <code>isSafe</code>. So:</p>

<pre><code>N = int(input())
startCol = 0
board = [[0 for i in range(N)] for j in range(N)]
# print(board)

if generateSolution(board, startCol) == False:
    print("No Solution Exists")
else:
    print("Solution exists")
    print(board)
</code></pre>

<p>Becomes:</p>

<pre><code>def main():
    N = int(input())
    startCol = 0
    board = [[0 for i in range(N)] for j in range(N)]

    if generateSolution(board, startCol) == False:
        print("No Solution Exists")
    else:
        print("Solution exists")
        print(board)

if __name__ == '__main__':
    main()
</code></pre>

<h1>Avoid global</h1>

<p>You should almost always not use the <code>global</code> keyword. In this case: just pass <code>N</code> into your <code>generateSolution</code> function, i.e. <code>generate_solution(board, col, N)</code>.</p>

<h1>Naming</h1>

<p>I am not entirely sure how your code works (I am, ashamedly, unfamiliar with the N-Queen problem). I assume <code>N</code> refers to the number of queens? I would recommend that you call it <code>queen_count</code> or something of the sort. In addition, <code>generate_solution</code> is rather unspecific. I would call it (possibly) <code>n_queen_solvable</code>.</p>

<h1>Does <code>generate_solution</code> actually do that?</h1>

<p>I mentioned changing it to the name <code>n_queen_solvable</code> because you have return a truth value. I would expect a function like that to actually give me a configuration, not answer whether a solution exists or not. You may want to refactor this into two functions: <code>n_queen_solvable</code> and <code>gen_queen_config</code> or something of the sort.</p>

<h1>Default parameters</h1>

<p>You seem to want to start at the zeroith column. Makes sense. Instead of explicitly passing the <code>startCol</code> explicitly, I would just make <code>col</code> <a href="https://docs.python.org/3/tutorial/controlflow.html#default-argument-values" rel="nofollow noreferrer">default to 0</a>. This is done by changing:</p>

<pre><code>def generateSolution(board, col):
</code></pre>

<p>to </p>

<pre><code>def generateSolution(board, col=0):
</code></pre>
    </div>