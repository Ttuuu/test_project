<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Like Pieter Witvoet I don't quite understand which problem this code is trying to solve. There is an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.objectmodel.observablecollection-1?view=netframework-4.8" rel="nofollow noreferrer">ObservableCollection Class</a> that partly does the same. Together with validation logic in properties and possibly the implementation of <code>INotifyPropertyChanged</code>, this comes close to your solution.</p>

<p>Apart from this, your code has problems and can be improved.</p>

<ul>
<li><p>It does not compile, because interface members in <code>IConnectable</code> are declared as public. Interface members are always public (C# 8 will change this, but we are not quite there yet). You should always post compilable code on Code Review.</p></li>
<li><p><code>ChainLinkNew&lt;N&gt;</code> allows to add elements of another type to the collection. The purpose of generics is to provide type safety while allowing you to create type variants at design time. With this construct you are losing type safety, as the type of added elements in the set will be determined at run time. Use the class' type parameter <code>T</code> instead. If you need to add items of different types, create a <code>ConstrainableSet&lt;object&gt;</code> or use a base type common to all elements. Like this, at least your constrainable set is consistent and type safe, even if the data is not. Otherwise none of them will be.</p></li>
<li><p>The interface <code>IConstrainableSet&lt;T&gt;</code> depends on its own implementation! As explained <a href="https://stackoverflow.com/a/9112750/880990">here</a>,</p>

<blockquote>
  <p>The point of the interfaces is to have something that is common to all implementations. By trying to do this you destroy the whole reason why interfaces exist.</p>
</blockquote>

<p>Change the interface to (and adapt the implementation) </p>

<pre><code>public interface IConstrainableSet&lt;T&gt;
{
    ...
    IConstrainableSet&lt;T&gt; ChainLinkClone();
    IConstrainableSet&lt;T&gt; ChainLinkNew(Predicate&lt;T&gt; CheckBeforeSet = null,
       Func&lt;T, T&gt; ModifyBeforeSet = null, Action&lt;IConstrainableSet&lt;T&gt;&gt; FailAction = null,
       Action&lt;IConstrainableSet&lt;T&gt;&gt; SuccessAction = null);
    ...
}
</code></pre></li>
<li><p>The <code>IConnectable</code> interface should be generic.</p>

<pre><code>public interface IConnectable&lt;T&gt;
{
    T Root { get; set; }
    T Next { get; set; }
    T Parent { get; set; }
}
</code></pre></li>
<li><p>The <code>Connectable</code> class can be <code>abstract</code> and must implement <code>IConnectable&lt;T&gt;</code>. <code>Connectable</code> by itself does not contain data and does not seem to be useful other than as base class. If it contained a <code>Data</code> field it would make sense to instantiate a <code>Connectable</code>. As it is now, you could only create a doubly linked list containing empty nodes.</p>

<pre><code>public abstract class Connectable&lt;T&gt; : IConnectable&lt;T&gt;
</code></pre></li>
<li><p>These improvements require some changes in the implementation but also allow some simplifications. E.g. in <code>ChainLinkClone</code></p>

<pre><code>var newpo = new ConstrainableSet&lt;T&gt;(_checkBeforeSet, _modifyBeforeSet, _failAction,
    _successAction);
if (Next != default) {
    ConstrainableSet&lt;T&gt; Iterator = Next;
    while (Iterator.Next != default) {
        Iterator = Iterator.Next;
    }
...
} else {
    ...
}
</code></pre>

<ul>
<li>Use <code>var</code> in the <code>new</code> statement to avoid rewriting the lengthy type name.</li>
<li>Move <code>Iterator</code> inside <code>if</code> and use an initializer.</li>
<li>We can drop some casts.</li>
</ul></li>
</ul>
    </div>