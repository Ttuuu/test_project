<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Exception Handling</h1>

<p>What are you doing in the exceptional case?</p>

<p>Printing an error message (ugly stack trace, actually) and returning <code>null</code>.  Now the caller has to handle the problem of the function returning <code>null</code>.</p>

<p>You've said:</p>

<blockquote>
  <p>I don't need error-handling except that I know I provided the wrong path.</p>
</blockquote>

<p>Well, want is the caller doing when it gets the <code>null</code>?  Does it say, "I couldn't open that file, please enter a different filename"?  That too is error handling, and you've have it in two places: the <code>try ... catch</code> here, and the <code>if (list == null)</code> by the caller.</p>

<p>Better is to ignore the exception here, and let the caller handle it, or the caller's caller.</p>

<pre><code>public static List&lt;Integer[]&gt; edges_from_path(final String filePath) throws IOException {
    //captures only lines that consist of two positive integer numbers separated by whitespace (each line encodes an edge)
    final String LINE_DATA_FORMAT = "\\d+\\s+\\d+";
    final String SEPARATOR = "\\s+";
    return Files.lines(Paths.get(filePath))
                .filter(str -&gt; str.matches(LINE_DATA_FORMAT))
                .map(str -&gt; Arrays.stream(str.split(SEPARATOR)).map(Integer::parseInt).toArray(Integer[]::new))
                .collect(toList());
}
</code></pre>

<blockquote>
  <p>My method doesn't return a graph because I want to be able to create graphs from different sources, and a list of integer-pairs is the interface the constructor for graphs is supposed to use.</p>
</blockquote>

<p>This is even more reason not to catch the error and return <code>null</code>; the other sources would need to have the same behaviour.  They could fail in different and diverse ways; the exception will provide more details about the failure than <code>null</code> return value will.</p>

<h1>List of Integer-Pairs</h1>

<p>To say I almost threw-up when I saw <code>List&lt;Integer[]&gt;</code> would be an exaggeration, but only slightly.  Mixing collections and raw arrays is cringe worthy.  But a list of a raw arrays of a boxed type???  Yikes!</p>

<p>The raison d'Ãªtre for "boxed types" is so they can be placed into the various <a href="https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Collection.html" rel="noreferrer"><code>Collection&lt;E&gt;</code></a> containers, which require objects instead of raw types.  But here, you're not putting the integers into a <code>Collection&lt;E&gt;</code>; you're putting them into an array (<code>[]</code>), so they don't actually need to be boxed.</p>

<p>To see how wrong this is, each element of the <code>List&lt;&gt;</code> is an object <code>Integer[]</code>, which holds two references to two <code>Integer</code> objects.  That is 3 objects allocated in the heap (ignoring interning) for every edge in the list.</p>

<p>If instead you used <code>List&lt;int[]&gt;</code>, then element of the <code>List&lt;&gt;</code> would be an <code>int[]</code> object, which directly contains the two integers, instead of references.  No extra objects need to be allocated.  Less memory is required, and the data is faster to access because an extra level of memory indirection has been removed.</p>

<p>Still, we eschew lists of raw arrays.  They are inconsistent; you need different access methods to get to the data at different levels, such as <code>list.get(idx1)[idx2]</code>.  The array of integers doesn't convey any requirement on the number of values; you could be given a lists of lengths other than two.  It would be better to wrap the edge information into a POD (plain old data) object:</p>

<pre><code>class Edge {
    public final int from;
    public final int to;
    Edge(int _from, int _to) {
        from = _from;
        to = _to;
    }
}
</code></pre>

<p>And then you could return a <code>List&lt;Edge&gt;</code>.  Change your graph constructor from taking a list of arrays of boxed integers of arbitrary lengths to taking a list of edges.  That is a much clearer interface contract.</p>
    </div>