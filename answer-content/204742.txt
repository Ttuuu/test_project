<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Well, it seems to do what you want. But, we can do better.</p>

<h3>Review:</h3>

<ol>
<li><p>Avoid dynamic allocation where possible.</p>

<pre><code>string backToBackDelim;
backToBackDelim += delimiter;
backToBackDelim += delimiter;
auto res2 = rawInput.find(backToBackDelim)
</code></pre>

<p>becomes</p>

<pre><code>const char backToBackDelim[] = {delimiter, delimiter};
auto res2 = rawInput.find(backToBackDelim, 0, 2)
</code></pre></li>
<li><p>Don't pass <code>std::string</code> by constant reference unless you depend on the terminator. Pass a view by value instead, specifically C++17 <a href="https://en.cppreference.com/w/cpp/string/basic_string_view" rel="nofollow noreferrer"><code>std::string_view</code></a>. It is more flexible and tends to be more efficient.</p></li>
<li><p>An empty line directly after the prototype is curious. Either remove it, or move the opening brace <code>{</code> for the function there.</p></li>
<li><p>Define your variables in the smallest scope you can, and invest in good names. What is <code>res</code> / <code>res2</code>, and why do you initialize it all the way up there, and only use it the once down here?<br>
You know what, eliminate it completely, it's bloat.</p></li>
<li><p>Choosing good names should also be applied to the function itself. Yours seems to be a placeholder.</p></li>
<li><p>Consider marking things <code>const</code> to ease comprehension. No Need to search for possible sites of modification then. That is, if having that extra-variable actually pays for itself with clarity.</p></li>
<li><p>You have a bunch of conditions under which you error out. The curious Thing is that you manually duplicated the handling block. Consider merging the conditions so you only need it once.</p></li>
<li><p>Don't use <code>else</code> if control-flow doesn't resume after the code-block anyway. Less indentation is better.</p></li>
<li><p>You know <code>.substr()</code> will adjust the second argument, if provided, to not leave the string? So, don't try so hard in your last call.</p></li>
</ol>

<h3>Re-Design:</h3>

<p>Mull over your spec. And now try to simplify it. Doing so leads to a simpler, more efficient design, which is optimized for legal input:</p>

<ol>
<li>Too large or empty =&gt; illegal.</li>
<li>Tokenize.</li>
<li>Empty token =&gt; illegal.</li>
</ol>

<h3>Rewrite:</h3>

<pre><code>bool GcodeParser::tokenize_input_refactored(std::string_view s) {
    // Consider adding here: tokensVec.clear();
    if (auto pos = size(s); pos &amp;&amp; pos &lt;= maxCharAmount) {
        while ((pos = s.find(delimiter))) {
            tokensVec.push_back(s.substr(0, pos));
            if (pos == std::string_view::npos)
                return true;
            s = s.substr(pos + 1);
        }
        tokensVec.clear();
    }
    tokensVec.push_back("INVALID_COMMAND!");
    return false;
}
</code></pre>
    </div>