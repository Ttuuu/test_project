<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There is a lot of room for improvement in your code.</p>
<p>First, I'd like to address an unusual request you made:</p>
<blockquote>
<p>Please don't recomend using functions.</p>
</blockquote>
<p>Why not? They are a fundamental notion in programming, and can't really be avoided. Glossing over the fact that you already use a bunch of functions like <code>print</code>, <code>input</code>, <code>append</code>, etc., and assuming you are referring to functions that you define yourself in the code, it is still a puzzling request. Functions can make your code cleaner, easier to read, easier to maintain and more reusable, so why would you want to avoid them?</p>
<p>Take for example the part of the code where you ask for user input: the same code is copied and pasted twice. There are improvements to be made to that snippet. Implementing <em>one</em> these improvements would mean changing the code in <em>two</em> places. If it were encapsulated in a function, you would need to make that change only once, reducing the risk for errors.</p>
<p>Also, when reviewing your code, or when re-reading it yourself for further reference, encountering a properly named function is likely to be easier to process than what would effectively be the body of the function. I could see something like <code>ask_for_input(player1)</code> and focus on how the game move in handled, and then check out how you approach asking the user for input, independently from the previous logic. You could potentially reuse your <code>ask_for_input</code> function as is in future projects. Finally, you could then trivially replace the <code>ask_for_input</code> function with some sort of computer player if you want to expand this program.</p>
<hr>
<p>As for the rest of the code, I won't provide a functional code, as there are already <a href="https://codereview.stackexchange.com/questions/tagged/rock-paper-scissors+python">a lot of reviews on the site</a> for "rock-paper-scissors" programs in Python. I'm sure you can find good, clean code that fits the bill.</p>
<p>However, I'll address a few design choices you made that can be improved upon, in no particular order.</p>
<h2>Naming conventions</h2>
<p>The <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8 Style Guide for Python Code</a> recommends naming variables in lowercase <code>snake_case</code>, and constants in <code>ALL_CAPS</code>. Your variables and constants names are a mix of <code>snake_case</code> and <code>CamelCase</code>. While you may chose not to adhere to PEP 8 (although it's good practice to keep your code consistent with what is expected), at least pick a convention and stick with it.</p>
<p>PEP 8 is also a comprehensive style guide, and include cases that you may not even have thought about (like using a different style for constants, making the identifiable at first glance), so it is at the very least an interesting read.</p>
<h2>Main loop</h2>
<p>Most of your logic is enclosed in a <code>while</code> loop:</p>
<pre><code>while True:
    ply_round += 1
    # ...
    if ply_round == 5:
        break
</code></pre>
<p>A <code>while</code> loop is clearly not the best fit here, as you effectively iterate over an incrementing index. A <code>for</code> loop would be functionally the same, while eliminating some overhead:</p>
<pre><code>for ply_round in range(1, 6):
    # ...
</code></pre>
<p>Or better yet, use a named constant or a variable to specify how many rounds are played, so that you can see at first glance what the number means.</p>
<h2><code>enumerate</code></h2>
<p>You use <code>enumerate</code> a lot in your <code>for</code> loops. <code>enumerate</code> returns a tuple of <code>(index, value)</code>, and you usually just use one of them. Instead of using enumerate, use <code>for item in list</code> if you only need the item, or <code>for i in range(len(list))</code> if you only need the index.</p>
<p>Some times (although it is not your case here), you can't avoid using a throwaway variable. It is common practice to use <code>_</code> in these cases, clearly showing that you don't need that variable.</p>
<h2>Sanitizing inputs</h2>
<p>When getting user input, you should check if the inputted value matches what the program expects. In your case, the program expects on of the values <code>r</code>, <code>p</code>, or <code>s</code>. If the user enters anything else, the program continues on and gives no output, while still incrementing the round counter.</p>
<p>This is made even worse because the prompts first ask for <code>R</code>, <code>P</code> or <code>S</code>, then for <code>Rock</code>, <code>Paper</code> or <code>Scissors</code>. The user has no way to know what the expected input is.</p>
<p>At the very least, you should change the prompts to ask for the correct value, and use <code>.lower()</code> on the inputs, so that the case doesn't matter. Then, if the value isn't what is expected, discard the value and ask again, instead of silently accepting wrong inputs.</p>
<p>At this point, you should <em>really</em> put the input code into a function, or else your program will get absolutely unreadable.</p>
<h2>Backwards logic</h2>
<p>Consider this piece of code:</p>
<pre><code>for j, v in enumerate(choice):
    if choice[j] in ply_1:
        print(f'you choose {choice[j]}')
</code></pre>
<p>Ignoring the <code>enumerate</code> issue addressed earlier, what happens here is:</p>
<ol>
<li>you loop over accepted inputs</li>
<li>check if the accepted input is in the actual input (which should be 1 character long)</li>
</ol>
<p>It makes much more sense to do this the other way (check if the actual input is in the accepted range), and it's simpler too:</p>
<pre><code>if ply_1 in choice:
    # do something
</code></pre>
<h2>Winner determining logic</h2>
<p>To determine which player wins, you basically check every possible case individually. That is a lot of code for a rather simple task. In fact, is is about on fourth of your code, and you only handle the most basic case of 2 players and 3 weapons. What if you wanted to improve your game to allow for more players or more weapons (think "rock-paper-scissors-lizard-spock")? Then it would become absurdly long.</p>
<p>Possible solutions can include a lookup table, a dictionary associating each weapon to the weapon it beats, implementing a <code>Weapon</code> class with comparison operators, or maybe other things.</p>
<p>At the very least, you can check for ties with <code>if user_Ply[0] == user_Ply[1]</code> instead of comparing both to multiple common values.</p>
<h2>Using a list instead of multiple variables</h2>
<p>I feel like two variables, named for example <code>player_1_move</code> and <code>player_2_move</code>, would be more readable and more suited than putting them both in a list.</p>
<h2>Anti-cheat measures</h2>
<p>Player 2 can see what move player 1 made, making it trivial for him to win every round.</p>
<p>I'm aware that this is a programming exercise and no-one wants to actually play rock-paper-scissors on a terminal, but clearing the console would simply make sense to me.</p>
    </div>