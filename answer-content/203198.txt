<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>The algorithm:</h3>

<ol>
<li><p>Well, <code>findFactors</code> is far too inefficient. Better do a prime-factoring, and then create the list of all factors from that.</p></li>
<li><p>If you need to do enough prime-factorings, consider pre-calculating all candidate primes, be it during or before compilation or before use.</p></li>
<li><p>Only use a list if you have to: Using and when needed <code>realloc</code>-ing a dynamically-allocated array is far more efficient and simpler in most cases. And it allows you to rely on <code>qsort()</code> for sorting.</p></li>
</ol>

<h3>Your code:</h3>

<ol>
<li><p>Avoid over-long lines, as horizontal scrolling kills readability. Yes, your IDE might allow for longer lines without scrolling or auto-wrapping, but it still makes things difficult. Even if everyone used an IDE on a big screen and gave the code-window the full screen-width, it slows reading considerably.</p></li>
<li><p>If you use the preprocessor for configuration, allow overriding by pre-defining.<br>
This:</p>

<pre><code>#define DEBUG 1
</code></pre>

<p>becomes</p>

<pre><code>#ifndef DEBUG
#define DEBUG 1
#endif
</code></pre></li>
<li><p>You might want to upgrade to C99, then you will have a true boolean type. If you don't, stay with an integer. Emulating a true boolean type with an enum instead is painful.</p></li>
<li><p>If you want to introduce a typedef-name for a struct- / enum-name, consider merging that:</p>

<pre><code>typedef struct ListElem ListElem;
struct ListElem {
    int value;
    ListElem* next;
};
</code></pre>

<p>becomes:</p>

<pre><code>typedef struct ListElem {
    int value;
    struct ListElem* next;
} ListElem;
</code></pre></li>
<li><p>Anyway, the customary name for a <code>ListElem</code> is <code>ListNode</code>, which though the same length avoids curious abbreviations.</p></li>
<li><p><a href="https://stackoverflow.com/questions/605845/do-i-cast-the-result-of-malloc">"<em>Do I cast the result of malloc?</em>"</a> <strong>No, we are writing C here.</strong></p></li>
<li><p>Getting any resource, even memory, can fail. Handle it, don't ignore it.</p></li>
<li><p>Also, prefer <code>sizeof expr</code> over <code>sizeof(TYPE)</code>, doing so couples size requested and the use of the memory, making errors less likely, whether at first writing or after re-factoring.</p></li>
<li><p><code>listAppend()</code> is mis-named, it should be <code>listPrepend()</code>. I also wonder why it returns the new node, which the caller probably doesn't care about, and can easily and efficiently get anyways.</p></li>
<li><p><code>listPrint()</code> has Undefined Behaviour for an empty list. <code>findDeficients()</code> for example can result in an empty list.</p></li>
<li><p><code>listSort()</code> doesn't really have to re-order the nodes to sort the values. Not doing so allows for some simplification.</p></li>
<li><p>There is no reason to use the lists size to iterate over the whole list. That way, your code gets simpler and more efficient:</p>

<pre><code>bool isInList(List* l, int v) {
    for (ListElem* p = l-&gt;head; p; p = p-&gt;next)
        if (p-&gt;value == v)
            return true;
    return false;
}
</code></pre>

<p>The same holds for <code>calculateSum()</code>.</p></li>
<li><p>If you have to choose one of two expressions, you should remember that's what the conditional operator <code>cond ? true_exp : false_exp</code> excells at.</p></li>
<li><p>Consider marking all internal functions <code>static</code> to avoid exporting the symbol and encourage inlining.</p></li>
<li><p>Please output diagnostic messages to <code>stderr</code> instead of <code>stdout</code>, so the caller can separate them easily.</p></li>
<li><p>The error-message for wrong use should explain proper use. <code>argv[0]</code> contains the program-name for that. Try to follow convention with your text.</p></li>
</ol>

<h3>Some comments about the challenge:</h3>

<ol>
<li>The second level is only harder than the first if you take advantage of efficiencies of scale, as you should.</li>
<li>The last level is only harder if you insist on sorted output, and didn't use any container earlier.</li>
</ol>
    </div>