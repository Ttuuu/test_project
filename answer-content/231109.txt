<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>PEP-0008</h2>

<p>Follow <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-0008</a> guidelines.  Use an automated checker (pylint, pyflakes, ...) to check your code for violations.</p>

<p>Issues include:</p>

<ul>
<li>Variable, function, and method names should be <code>snake_case</code>.  For example <code>newBG</code> should be <code>new_background</code>, <code>mainLoop</code> should be <code>main_loop</code>, and <code>drawButton</code> should be <code>draw_button</code>.</li>
<li>No space between a function/method name and the opening parentheses.  <code>set_mode (</code> should be <code>set_mode(</code>.</li>
<li>No spaces before commas, and no spaces between adjacent parenthesis, or after opening parenthesis or before closing parenthesis. <code>set_mode ( (event.w, event.h) , pygame.RESIZABLE )</code> should be <code>set_mode((event.w, event.h), pygame.RESIZABLE)</code>.</li>
<li>Class names should begin with uppercase letters.  So <code>Button</code> instead of <code>button</code>.</li>
</ul>

<p>to name a few.  Run a checker to see all of them.</p>

<h2>Import *</h2>

<pre><code>import pygame, sys
from pygame import *
</code></pre>

<p>Are you importing <code>pygame</code>, or are you importing everything from inside <code>pygame</code>?  Do one or the other, preferably the former, but definitely not both!</p>

<h2>Global variables are Global</h2>

<pre><code>global newBG
newBG = False
</code></pre>

<p><code>newBG</code> is being defined in the global scope.  <code>global newBG</code> is not needed, and is useless.</p>

<h2>Type Consistency</h2>

<p>What is the type of <code>backGround</code>?  Is it an image?  If so, then explain:</p>

<pre><code>    backGround = 0
</code></pre>

<p>It looks like you are trying to assign an integer to something which normally holds an image.  But wait!  It is a local variable, and is not used anywhere.</p>

<h2>While is not If</h2>

<p>Is this a loop or an if statement?</p>

<pre><code>    while newBG:
        drawBackground()
        newBG = False
</code></pre>

<p>It can never execute more than once, because it sets the loop condition to <code>False</code>.  The following is clearer:</p>

<pre><code>    if newBG:
        drawBackground()
        newBG = False
</code></pre>

<h2>Integer Arithmetic</h2>

<p>If you don't want floating point values, don't divided by two.  Instead <em>integer-divide</em> by two!</p>

<p>Instead of this:</p>

<pre><code>uiX = (int((newW - uiW)/2))
uiY = (int((newH - uiH)/2))
</code></pre>

<p>write this:</p>

<pre><code>uiX = (newW - uiW) // 2
uiY = (newH - uiH) // 2
</code></pre>

<h2>Persistance</h2>

<p>Your main loop reads roughly:</p>

<pre><code>while run:

    currentScreen()

    # Handle events

    pygame.display.update()
</code></pre>

<p><code>currentScreen()</code> either calls <code>mainMenu()</code> or <code>secondMenu()</code>:</p>

<pre><code>def mainMenu():
    # load 4 images
    # create 3 button objects in a list
    # draw button objects

def secondMenu():
    # load 4 images
    # create 3 button objects in a list
    # draw button objects
</code></pre>

<p>So ... every iteration of your main event loop (say, 30 to 60 times a second), you are:</p>

<ul>
<li><strong>LOADING MULTIPLE IMAGES</strong></li>
<li><strong>CREATING UI ELEMENTS</strong></li>
<li>drawing some stuff</li>
<li><strong>DISCARDING THE IMAGES AND UI ELEMENTS</strong></li>
</ul>

<p>Forgive the above screaming.  You don't want to waste time while painting your UI doing repetitive, redundant file I/O.  Load the images once, at startup or the first time they are used.  Create your buttons once, or at the very most, create them only when you swap to the new screen.  Populate the button list when switching to this new screen.  As this button list must maintain its value across multiple iterations of the event loop, you'll want this as a global variable, or ...</p>

<h2>Stop Using Global Variables</h2>

<p>Create a main class for your application, and store your "global" information as main class <code>self</code> members.</p>

<p>Create a screen class, and create two instances of it: one for your main menu screen, the other for your second menu.  The screen class would hold:</p>

<ul>
<li>the button list for that screen.</li>
<li>the background image for that screen.</li>
<li>a scaled copy of the background image (so you don't have to rescale it each iteration of the event loop!)</li>
</ul>

<p>If the application detects <code>VIDEORESIZE</code>, and when changing screens, it would tell the screen object, so the screen object can re-layout its objects and rescale the background image.</p>

<h2>Single-Coat Paint</h2>

<p>What does this do?</p>

<pre><code>    win.blit(ButtonPic, (self.bx, self.by))
    if ...:
        win.blit(ButtonHoverPic, (self.bx, self.by))
        if ...:
            win.blit(ButtonPressPic, (self.bx, self.by))
</code></pre>

<p>Unless <code>ButtonPic</code>, <code>ButtonHoverPic</code> and <code>ButtonPressPic</code> are not all the same size, or if <code>ButtonHoverPic</code> or <code>ButtonPressPic</code> have transparent areas, the above code can paint the button only to immediately repaint the button, and perhaps immediately repaint it a third time.  Given that Premium One-Coat Guaranteed Paintâ„¢ is likely being used, this is doubling or tripling the cost of painting for no gain.</p>

<p>Instead, I'd recommend something more like:</p>

<pre><code>    image = self._image
    if ...:
        if ...:
            image = self._press_image
        else:
            image = self._hover_image
    win.blit(image, (self.bx, self.by)
</code></pre>
    </div>