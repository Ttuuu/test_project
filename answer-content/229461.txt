<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Welcome to C++!  This code review focuses on writing idiomatic C++ code.</p>

<blockquote>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstdlib&gt;
#include&lt;ctime&gt;
#include&lt;cmath&gt;
#include &lt;tgmath.h&gt;
</code></pre>
</blockquote>

<p>Don't <code>#include &lt;tgmath.h&gt;</code> because it is deprecated.  It just includes <code>#include &lt;complex&gt;</code> and <code>#include &lt;cmath&gt;</code>.  In this case, you do not use complex numbers, and you have <code>#include &lt;cmath&gt;</code>.</p>

<p>It is common practice to place a space after <code>#include</code> to improve readability.  Also, sorting the <code>#include</code> directives makes them easier to navigate:</p>

<pre><code>#include &lt;cmath&gt;
#include &lt;cstdlib&gt;
#include &lt;ctime&gt;
#include &lt;iostream&gt;
</code></pre>

<blockquote>
<pre><code>using namespace std;
</code></pre>
</blockquote>

<p>Well, no.  <code>using namespace std;</code> is considered bad practice in C++ because it potentially introduces name clashes.  See <a href="https://stackoverflow.com/q/1452721">Why is <code>using namespace std;</code> considered bad practice?</a>.</p>

<p>Instead, explicitly qualify the names with <code>std::</code>.  This won't be a lot of effort once you get used to it, but it really helps to avoid subtle problems.</p>

<blockquote>
<pre><code>const int MAXRANGE = 1000;
</code></pre>
</blockquote>

<p>Constants are indicated with <code>constexpr</code> in C++.  In general, <code>constexpr</code> allows the constant to be used in more loci than <code>const</code> does.</p>

<p>ALL CAPS names are usually reserved for macros.  They are not commonly used for constants.</p>

<blockquote>
<pre><code>int randint(int low, int high){
    return rand() % (high - low) + low;

    }
</code></pre>
</blockquote>

<p>The indentation is a bit irregular.  There is usually a line break or space before the <code>{</code>.</p>

<p><code>rand</code> is infamous for being a low-quality random number generator.  Use <code>&lt;random&gt;</code> instead.  See <a href="https://stackoverflow.com/q/53040940">Why is the new random library better than <code>std::rand()</code>?</a>.  Time is also not always considered a good seed.  <code>std::random_device</code> is better.  The function can be rewritten like this:</p>

<pre><code>int randint(int low, int high)
{
    static std::mt19937 engine{std::random_device{}()};

    assert(low &lt;= high);    
    std::uniform_int_distribution&lt;int&gt; dist{low, high};
    return dist(engine);
}
</code></pre>

<p>Note that I used <code>assert</code> (defined in header <code>&lt;cassert&gt;</code>) to express the pre-condition.</p>

<blockquote>
<pre><code>void generate_vector(float vec[],int dimension){
    for (int i = 0; i &lt; dimension; i++){
        vec[i] = randint(-MAXRANGE,MAXRANGE);
        }

    // We need to ensure that the last entry doesn't equal to zero

    if (vec[dimension-1] == 0){
        while (vec[dimension-1] == 0){
            vec[dimension-1] = randint(-MAXRANGE,MAXRANGE);

        }
    }


}
</code></pre>
</blockquote>

<p>Several problems:</p>

<ul>
<li><p>Containers from the standard library are generally preferred over raw C arrays.  Use <code>std::vector</code> instead.</p></li>
<li><p>You should really be generating <code>float</code> values instead of <code>int</code> values.</p></li>
<li><p>Using out-parameters is less idiomatic than using the return value.</p></li>
<li><p>Retrying is not a good strategy to ensure that the last entry is non-zero.  Generating a number in <code>[-maxrange, 0)</code> and then having a 50% chance of negating the sign is probably better.</p></li>
<li><p>You can use standard algorithms (available in header <code>&lt;algorithm&gt;</code>) to simplify the code.</p></li>
</ul>

<p>Here's how I would fix these problems (without using <code>randint</code>).  I have added some comments to help you understand.</p>

<pre><code>constexpr float maxrange = 1000.0f;

std::mt19937 engine{std::random_device{}()};

std::vector&lt;float&gt; generate_vector(int dimension)
{
    assert(dimension &gt; 0);

    // generate the first (n - 1) elements
    std::vector&lt;float&gt; result(dimension);
    std::uniform_real_distribution&lt;float&gt; dist{-maxrange, maxrange};
    std::generate(result.begin(), result.end() - 1, []{ return dist(engine); });

    // generate the last element
    dist.param({-maxrange, 0});
    result.back() = dist(engine);
    // negate the sign with a 50% possibility
    if (std::bernoulli_distribution bdist{0.5}; bdist(engine))
        result.back() = -result.back();

    // NRVO, no copying, no performance degradation
    return result;
}
</code></pre>

<p>Also, <code>double</code> is generally used instead of <code>float</code> in C++ unless you have a good reason.</p>

<hr>

<blockquote>
<pre><code>void generate_orthogonal (float *vector, float orthogonal_vector[], int dimension){
    float last_entry;
    float dot_product = 0;
    for (int i = 0; i &lt; dimension -1; i++){
        orthogonal_vector[i] = randint(-MAXRANGE,MAXRANGE);
    }
    for (int i = 0; i &lt; dimension -1; i++){
        dot_product = dot_product + (vector[i] * orthogonal_vector[i]);
    }
    last_entry = -(dot_product/vector[dimension-1]);
    orthogonal_vector[dimension-1] = last_entry;
}
</code></pre>
</blockquote>

<p>Some problems, in addition to the aforementioned ones:</p>

<ul>
<li><p>Use <code>++i</code>, not <code>i++</code>, in the <code>for</code> statement.  See <a href="https://stackoverflow.com/q/484462">Difference between pre-increment and post-increment in a loop?</a>.</p></li>
<li><p>You have the dot product function later, you can use it.</p></li>
<li><p>The elements of <code>vector</code> should be <code>const</code>.</p></li>
<li><p>The <code>last_entry</code> variable is not necessary; just assign the result of the calculation directly to <code>orthogonal_vector[dimension - 1]</code>.  It should be obvious that we are referring to the last entry if <code>.back()</code> is used.</p></li>
</ul>

<p>Note that dot product is available in the standard library as <code>std::inner_product</code> (available in header <code>&lt;numeric&gt;</code>), so no need to roll out your own.</p>

<pre><code>std::vector&lt;float&gt; generate_orthogonal(const std::vector&lt;float&gt;&amp; vector)
{
    // at least one dimension
    assert(!vector.empty());

    // same
    std::vector&lt;float&gt; result(dimension);
    std::uniform_real_distribution&lt;float&gt; dist{-maxrange, maxrange};
    std::generate(result.begin(), result.end() - 1, []{ return dist(engine); });

    // generate the last element
    auto dot_product = std::inner_product(vector.begin(), vector.end() - 1, result.begin());
    result.back() = -dot_product / vector.back();

    // same
    return result;
}
</code></pre>

<blockquote>
<pre><code>float dot_product(float *vector1, float vector2[],int dimension){
    float sum = 0;
    for (int i = 0; i &lt; dimension; i++){
        sum += (vector1[i])*(vector2[i]);
    }
    return sum;
}
</code></pre>
</blockquote>

<p>As I said before, this function is available in the standard library as <code>std::inner_product</code>.</p>

<blockquote>
<pre><code>void print_vector(float *A,int dim){
    cout &lt;&lt; "(";
    for (int i = 0; i &lt; dim; i++){
        if (i == dim -1){
            cout &lt;&lt; A[i];
        }
        else{
            cout &lt;&lt; A[i] &lt;&lt; ",";}
    }
    cout &lt;&lt; ")^T" &lt;&lt; endl;
}
</code></pre>
</blockquote>

<p><a href="https://stackoverflow.com/q/213907">Don't use <code>std::endl</code> without a reason.</a>  Use <code>\n</code> instead.</p>

<p>You can simplify the code by printing the first element first:</p>

<pre><code>void print_vector(const std::vector&lt;float&gt;&amp; vector)
{
    assert(!vector.empty());

    std::cout &lt;&lt; '(' &lt;&lt; vector[0];
    for (auto it = vector.begin() + 1; it != vector.end(); ++it) {
        std::cout &lt;&lt; ", " &lt;&lt; *it;
    }
    std::cout &lt;&lt; ")^T\n";
}
</code></pre>

<hr>

<p>You may noticed that <code>assert(!vector.empty())</code> appeared several times in the code.  Maybe write a class for that.</p>
    </div>