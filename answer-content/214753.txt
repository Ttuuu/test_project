<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'm not entirely convinced of the need for this class - in my experience, using extension methods for enum classes which need more than the basic functionality is sufficient. Also this lacks some things which native enums have, in particular an equivalent of <code>[Flags]</code> (which is useful in parsing and <code>ToString</code>).</p>

<hr>

<blockquote>
<pre><code>    public static TEnumeration ParseName&lt;TEnumeration&gt;(string name)
        where TEnumeration : Enumeration
    {
        return EnumerationCacheProvider&lt;TEnumeration&gt;.Get().Names[name];
    }
</code></pre>
</blockquote>

<p>(and similar methods). What exceptions can this throw? Are they what someone who is switching over from <code>Enum.Parse</code> would expect?</p>

<hr>

<blockquote>
<pre><code>    // Lack of inference from the compiler, cannot write
    // public static TEnumeration ParseValue&lt;TEnumeration, TValue&gt;(TValue value)
    //     where TEnumeration : Enumeration
    public static TEnumeration ParseValue&lt;TEnumeration&gt;(object value)
        where TEnumeration : Enumeration
</code></pre>
</blockquote>

<p>What you <em>can</em> write is</p>

<pre><code>    public static TEnumeration ParseValue&lt;TEnumeration, TValue&gt;(TValue value)
        where TEnumeration : Enumeration&lt;TValue&gt;
</code></pre>

<p>It's not clear from the comment whether you are aware of this and have rejected it, or whether you overlooked it.</p>

<hr>

<blockquote>
<pre><code>        foreach (var item in list)
        {
            // First definitions found are subsequently overriden
            if (!names.ContainsKey(item.Name))
            {
                names[item.Name] = item;
            }
            if (!values.ContainsKey(item.Value))
            {
                values[item.Value] = item;
            }
        }
</code></pre>
</blockquote>

<p>The comment says the complete opposite of what the code actually does.</p>

<p>Would it not be more robust to throw an exception if the same name or value occurs twice? I can't tell, for example, whether it's an error that the <code>Card</code> example defines two different cards with the same value, but I think it probably is and should be caught as early as possible.</p>

<hr>

<p>The existence of <code>EnumerationCacheFactory&lt;TEnumeration&gt;</code> and <code>EnumerationCacheProvider&lt;TEnumeration&gt;</code> seems to me to be an "architecture astronaut" tendency. I see no reason why their fragments of code couldn't be included in <code>EnumerationCache</code>, and as a bonus <code>EnumerationCache</code>'s constructor could be made private.</p>

<hr>

<blockquote>
<pre><code>        var nameValues = enumerationType
            .GetFields(BindingFlags.Public | BindingFlags.Static | BindingFlags.DeclaredOnly)
</code></pre>
</blockquote>

<p>Why <code>Public</code>? In my opinion you're missing an opportunity here.</p>

<hr>

<blockquote>
<pre><code>    public static EnumerationCache&lt;TEnumeration&gt; Get()
    {
        return EnumerationCache.Value;
    }
</code></pre>
</blockquote>

<p>I would be tempted to replace this with some transparent properties</p>

<pre><code>    public static IReadOnlyDictionary&lt;string, TEnumeration&gt; Names =&gt; EnumerationCache.Value.Names
</code></pre>

<p>etc.</p>

<hr>

<blockquote>
<pre><code>    public override bool Equals(object other)
    {
        if (!(other is Enumeration otherValue))
        {
            return false;
        }

        var typeMatches = GetType() == other.GetType();
        var valueMatches = Value.Equals(otherValue.Value);

        return typeMatches &amp;&amp; valueMatches;
    }
</code></pre>
</blockquote>

<p>Why not simplify to</p>

<pre><code>    public override bool Equals(object other)
    {
        if (ReferenceEquals(other, null) || GetType() != other.GetType())
        {
            return false;
        }

        return Value.Equals(((TEnumeration)otherValue).Value);
    }
</code></pre>

<p>Also, the constructor doesn't require <code>value</code> to be non-null, so either that or various other methods are buggy.</p>

<hr>

<p>Why does <code>Enumeration&lt;TValue&gt;</code> override <code>Enumeration.Equals</code>, <code>Enumeration.GetHashCode</code>, etc? The overrides don't change the behaviour at all.</p>
    </div>