<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I can't find much to critisize here. You could use <code>static import</code> (e.g. for <code>Objects.requirenNonNull</code>) and <code>String.format</code>.</p>

<p>I find it a little bit strange to have no graph type which holds both nodes and edges, just nodes and the weight function. It would be easy to get "out of sync" between nodes and weights in your demo (e.g. when making a copy-and-paste error).</p>

<p><strong>Edit</strong>
Here is my take:</p>

<p>DefaultKShortestPathFinder</p>

<pre><code>import java.util.*;

import static java.util.Objects.requireNonNull;

public class DefaultKShortestPathFinder&lt;V&gt; implements AbstractKShortestPathFinder&lt;V&gt; {

    @Override
    public List&lt;Path&lt;V&gt;&gt; findShortestPaths(V source, V target, Graph&lt;V&gt; graph, int k) {
        requireNonNull(source, "The source node is null.");
        requireNonNull(target, "The target node is null.");
        requireNonNull(graph, "The graph is null.");
        checkK(k);

        List&lt;Path&lt;V&gt;&gt; paths = new ArrayList&lt;&gt;(k);
        Map&lt;V, Integer&gt; countMap = new HashMap&lt;&gt;();
        Queue&lt;Path&lt;V&gt;&gt; HEAP = new PriorityQueue&lt;&gt;(
                Comparator.comparingDouble(Path::pathCost));

        HEAP.add(new Path&lt;&gt;(source));

        while (!HEAP.isEmpty() &amp;&amp; countMap.getOrDefault(target, 0) &lt; k) {
            Path&lt;V&gt; currentPath = HEAP.remove();
            V endNode = currentPath.getEndNode();

            countMap.put(endNode, countMap.getOrDefault(endNode, 0) + 1);

            if (endNode.equals(target)) {
                paths.add(currentPath);
            }

            if (countMap.get(endNode) &lt;= k) {
                for (Edge&lt;V&gt; edge : graph.get(endNode)) {
                    Path&lt;V&gt; path = currentPath.append(edge);
                    HEAP.add(path);
                }
            }
        }

        return paths;
    }
}
</code></pre>

<p>AbstractKShortestPathFinder</p>

<pre><code>import java.util.List;


public interface AbstractKShortestPathFinder&lt;V&gt; {

    List&lt;Path&lt;V&gt;&gt; findShortestPaths(V source, V target, Graph&lt;V&gt; graph, int k);

    default void checkK(int k) {
        if (k &lt; 1) {
            throw new IllegalArgumentException(
                    String.format("The value of k is too small: %d, should be at least 1.", k));
        }
    }
}
</code></pre>

<p>Edge</p>

<pre><code>public class Edge&lt;V&gt; {

    public final V from;
    public final V to;
    public final double weight;


    public Edge(V from, V to, double weight) {
        this.from = from;
        this.to = to;
        this.weight = weight;
        if (Double.isNaN(weight)) {
            throw new IllegalArgumentException("The weight is NaN.");
        }
        if (weight &lt; 0.0) {
            throw new IllegalArgumentException("The weight is negative.");
        }
    }

}
</code></pre>

<p>Path</p>

<pre><code>import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Objects;

import static java.lang.String.format;

public class Path&lt;V&gt; {

    private final V node;
    private final double totalCost;

    public Path(V source) {
        Objects.requireNonNull(source, "The input source node is null.");
        node = source;
        totalCost = 0.0;
    }

    private Path(V node, double totalCost) {
        this.node = node;
        this.totalCost = totalCost;
    }


    public Path&lt;V&gt; append(Edge&lt;V&gt; edge) {
        if (!node.equals(edge.from)) {
            throw new IllegalArgumentException(format("The edge %s doesn't extend the path %s", edge, this.getNodeList()));
        }

        return new NonEmptyPath&lt;&gt;(this, edge);
    }

    public V getEndNode() {
        return node;
    }

    public List&lt;V&gt; getNodeList() {
        return new ArrayList&lt;&gt;();
    }

    public double pathCost() {
        return totalCost;
    }

    private static class NonEmptyPath&lt;V&gt; extends Path&lt;V&gt; {
        private final Path&lt;V&gt; predecessor;

        public NonEmptyPath(Path&lt;V&gt; path, Edge&lt;V&gt; edge) {
            super(edge.to, path.totalCost + edge.weight);
            predecessor = path;

        }

        @Override
        public List&lt;V&gt; getNodeList() {
            LinkedList&lt;V&gt; result = new LinkedList&lt;&gt;();
            Path&lt;V&gt; path = this;
            while(path instanceof NonEmptyPath) {
                result.addFirst(path.node);
                path = ((NonEmptyPath&lt;V&gt;) path).predecessor;
            }
            result.addFirst(path.node);
            return result;
        }
    }

}
</code></pre>

<p>Graph</p>

<pre><code>import java.util.*;

import static java.lang.String.*;

public class Graph&lt;V&gt; {

    //could be replaced by http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Table.html
    private Map&lt;V,Map&lt;V,Edge&lt;V&gt;&gt;&gt; vertexEdgeMap = new HashMap&lt;&gt;();

    @SafeVarargs
    public Graph(Edge&lt;V&gt; ... edges) {
        for (Edge&lt;V&gt; edge : edges) {
            addEdge(edge);
        }
    }

    private void addEdge(Edge&lt;V&gt; edge) {
        vertexEdgeMap.putIfAbsent(edge.from, new HashMap&lt;&gt;());
        Map&lt;V, Edge&lt;V&gt;&gt; fromMap = vertexEdgeMap.get(edge.from);
        if(fromMap.containsKey(edge.to)) {
            throw new IllegalArgumentException(format("Edge between %s and %s was added twice", edge.from, edge.to));
        }
        fromMap.put(edge.to, edge);
    }

    public Edge&lt;V&gt; get(V from, V to) {
        return vertexEdgeMap.get(from).get(to);
    }

    public Collection&lt;Edge&lt;V&gt;&gt; get(V from) {
        return vertexEdgeMap.getOrDefault(from, Collections.emptyMap()).values();
    }

}
</code></pre>

<p>Demo</p>

<pre><code>import java.util.List;

public class Demo {

    public static void main(String[] args) {
        demo1();
    }

    private static void demo1() {
        //    b    e
        //  /  \  / \
        // a    d    g
        //  \  / \  /
        //   c    f


        // The edges above the line a - g have weight of 1.0.
        // The edges below the line a - g have weight of 2.0

        Graph&lt;Character&gt; graph = new Graph&lt;&gt;(
                new Edge&lt;&gt;('a', 'b', 1.0),
                new Edge&lt;&gt;('a', 'c', 2.0),
                new Edge&lt;&gt;('b', 'd', 1.0),
                new Edge&lt;&gt;('c', 'd', 2.0),

                new Edge&lt;&gt;('d', 'e', 1.0),
                new Edge&lt;&gt;('d', 'f', 2.0),
                new Edge&lt;&gt;('e', 'g', 1.0),
                new Edge&lt;&gt;('e', 'f', 2.0)
        );

        List&lt;Path&lt;Character&gt;&gt; paths = new DefaultKShortestPathFinder&lt;Character&gt;()
                .findShortestPaths('a', 'g', graph, 3);

        for (Path&lt;Character&gt; path : paths) {
            System.out.println(path.getNodeList() + " " + path.pathCost());
        }
    }
}
</code></pre>
    </div>