<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><strong>Think separation of concerns</strong></p>

<blockquote>
  <p>I ended up with a kind of circular dependency between SalaryCalculatorFactory and specific calculators</p>
</blockquote>

<p>The SalaryCalculator design conflates its proper functions with the using/client code. That is why you have that dependency problem. Think of objects as doing a discrete thing and then separately think about the code using it.</p>

<hr>

<p><strong>Factory</strong></p>

<p>Keeping a factory reference in the class it creates doesn't make sense. A factory builds stuff, that's all. It should not keep anything on behalf of what it creates. Just like after a car rolls off the assembly line, the factory has nothing to do with it. There <s>are</s> will be other entities for that.</p>

<p>Tell the factory what to build and have that returned; done. If a collection class holding all the instantiated calculators is needed then make one, don't use the factory for that - it's not a warehouse.</p>

<hr>

<p><strong><code>enum</code> is your friend</strong></p>

<p>Use <code>enum</code> to define employee groups. It avoids all the problems using strings.  <code>enum</code> is type safe, and best of all it shows up in intellisense. Typos are caught at compile time. <code>enum</code> has a very documenting quality. Here, you're declaring all employee groups that exist, named "EmployeeGroup", and very significantly <em>in one place.</em></p>

<hr>

<p><strong>Zombie <code>interface</code>s</strong></p>

<p>The code smells:</p>

<ul>
<li>The fact that there are specific custom calculators tells me that all those ("capital I") interfaces are not used effectively. </li>
<li>a general/abstract "calculate" method is not defined anywhere. </li>
<li>object reference variables are not of the interface types.</li>
</ul>

<p>My Spidey Sense â„¢ tells me you are thinking you must use interfaces and this imperative is over-powering coherent, sensible design. The principle <em>code to interfaces not implementation</em> does not mean only "capital I" <code>interface</code>.  "interface" can mean an <code>interface</code>, <code>abstract class</code>, delegates and even, I do dare say, a concrete class. </p>

<p><code>interface</code> is not needed in the calculator design. Get rid of them. </p>

<hr>

<p>Do not imbed implementation details in variable names. Do.not.do.this. Do not use type either - no "intSalary", "objEmployee", etc - you don't do that, I'm just saying.  Good class names and use-variable names give plenty of context. client code should not know and does not care about these things. </p>

<pre><code>CalculateSalariesSumAsync();   // no
CalculateSalaries();             // much better
</code></pre>

<hr>

<p><strong>Calculator Design</strong></p>

<p>Insight: Calculators are all the same, they all <code>CalcSalary()</code>. Only one class needed. We just need a way to insert the one thing that does change - the calculating algorithm code. </p>

<p>Insight: Don't try to design everything all at once. The basic calculator here, I'll worry about the factory next. I'll think about how to get calculators and employee lists [do not imply any specific implementation] together later.</p>

<p>Insight: You will modify classes as design progresses. Don't worry about it.</p>

<p>So I'm picturing this:</p>

<pre><code>  SalaryFactory salaryGenerator = new SalaryFactory();
  SalaryCalculator employeeCalculator = salaryGenerator.Create( EmployeeGroup.Employee );
  SalaryCalculator managerCalculator = salaryGenerator.Create( EmployeeGroup.Manager );
  SalaryCalculator salesmanCalculator = salaryGenerator.Create( EmployeeGroup.Salesman ); 
</code></pre>

<p>And a couple possibilities for SalaryCalculator class:</p>

<p>Oh, Look Mo! A concrete class as interface.</p>

<pre><code>public class SalaryCalculator {
    public SalaryCalculator(Func&lt;decimal&gt; algorithm){
       SalaryAlgorithm = algorithm;
    }
    public Func&lt;decimal&gt; CalcSalary ( ) { return SalaryAlgorithm(); }

    protected Func&lt;decimal&gt; SalaryAlgorithm;   // the factory supplies this
}
</code></pre>

<p>I like abstract classes a lot:</p>

<pre><code>public abstract class SalaryCalculator {

    abstract public Func&lt;decimal&gt; CalcSalary ( ) { ... }  // the factory supplies this
}
</code></pre>

<hr>

<p><strong><code>interface</code>, <code>abstract class</code>, concrete <code>class</code></strong></p>

<p>First, it all depends on overall design. Nothing is absolute.</p>

<p>Generally an <code>interface</code> is for giving unrelated classes common behavior. With inheritance an <code>abstract class</code> is my first choice. A concrete <code>class</code> is a valid choice because we can still use composition, that's what constructors are for.</p>

<p><code>abstract class</code> allows for both base implementation and "placeholder" declarations a-la <code>interface</code>.  Mixing these two features in the code flow/logic is called a Template Pattern (google it). </p>

<p>Using <code>interface</code> and then hoping every class implements base functionality the same is delusional. </p>

<hr>

<p><strong>group salaries</strong></p>

<p>Group functionality is distinct from individual employee functionality and should be a separate class, even if group salary is the only group function (for now).</p>

<p>The goal is a general <code>Employees</code> class that can participate in a composition to calculate manager salaries. </p>

<hr>

<p><strong>single responsibility</strong></p>

<ul>
<li>A factory should only create objects.</li>
<li>A employee class should be only about and directly about an individual employee.</li>
<li>A calculator should only calculate salary and not care who, what, where, why it's calculate function was called.</li>
<li>Group functionality uses a collection of these "individual" objects and are their own classes.</li>
</ul>

<p>Uh-oh! Bob is suggesting more classes. Yes. Yes I am. This is the nature good OO design. You end up with classes doing higher level/complex things which are compositions of more basic classes, every class lazer focused on doing it's own thing. </p>

<hr>

<p><strong>Employees</strong></p>

<p>I see a general <code>Employees</code> class that contains a <code>List&lt;Employee&gt;</code> with functionality like this:</p>

<pre><code>public class Employees {
   // List may or may not be the ideal choice for the collection. It depends.   
   protected List&lt;Employee&gt; Employees {get; set;}

   public decimal GroupSalary() {
       var decimal groupSalary = 0;

       forEach(var employee in this.Employees) {
           groupSalary += employee.Salary();
       }
       return groupSalary;
   }

  // all other group functionality as needed.
}
</code></pre>

<p>I did not create a <code>GroupSalary</code> property, private or otherwise. A calculated value should always be re-calculated when used/called. I guarantee future problems if you don't.</p>

<p>Pending further design analysis I don't see a need for a GroupSalaryCalculator. </p>

<hr>

<p><strong>static</strong></p>

<p>Given overall single responsibility application consider making the factory and generated calculators <code>static</code>.</p>

<p><code>static</code> objects should not hold state for external objects.</p>
    </div>