<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I want to expand on the idea that <code>tuple</code>s are a bad way to organize data. Programming languages have decades of history of making better ways to describe data that is more readable and easier to understand. <code>tuple</code> does away with those decades of work and makes code way more confusing and harder to understand. For example, let's look at your data types:</p>

<pre><code>typedef std::map&lt;int, std::string&gt; CountryList; // int country_code, country_name
typedef std::tuple&lt;long, long, CountryList, long&gt; Container; // long price, long compain_id, CountryList, long id
typedef std::multimap&lt;long, Container, std::greater&lt;long&gt;&gt; ContainerList;
typedef std::pair&lt;long, Container&gt; ContainerValue;
typedef ContainerList::const_iterator Iterator;
typedef std::map&lt;long, Iterator&gt; ResultList;
</code></pre>

<p>If you have to add a comment to explain something, you probably haven't written it clearly in the first place. What's easier to use? Your definition of <code>Container</code> or a <code>struct</code> or <code>class</code> that names the elements like this:</p>

<pre><code>struct Container {
    long price;
    long campaign_id;
    CountryList countries;
    long id;
};
</code></pre>

<p>When you use the <code>struct</code>, you go from writing lines like this:</p>

<pre><code>std::get&lt;1&gt;((*i).second)
</code></pre>

<p>to writing readable statements like this:</p>

<pre><code>i-&gt;second.campaign_id;
</code></pre>

<p>The <code>i-&gt;second</code> is still annoying because you can't infer what value <code>second</code> refers to, but that's due to the design of <code>std::map</code> and not something you can change. But seeing the member name <code>campaign_id</code> is far clearer than figuring out what <code>std::get&lt;1&gt;()</code> gets.</p>

<p>Even when you're forced to use a <code>tuple</code> or <code>pair</code> by the standard library, you can do better than you have. For example, you have:</p>

<pre><code>typedef std::map&lt;int, std::string&gt; CountryList; // int country_code, country_name
</code></pre>

<p>You could remove the need for the comment by making named data types:</p>

<pre><code>using country_code = int;
using country_name = std::string;
typedef std::map&lt;country_code, country_name&gt; CountryList;
</code></pre>

<p>Now you don't need the comment and it's clear what the types are.</p>

<p>You also named something that's not a list a list. I would expect <code>CountryList</code> to be a <code>std::list</code>, or maybe a <code>std::vector</code> or <code>std::array</code>. I would probably remove the type from the name and just call it <code>Countries</code>.</p>

<p>What is this loop attempting to do?</p>

<pre><code>  for (auto &amp; filter : filters)
  {
     result |= filter(container);
     if (!result)
        break;
  }
</code></pre>

<p>Looking at it, if the first item in <code>filters</code> returns <code>true</code> it will iterate all the filters in the list of filters. But if the first item returns false, it will only iterate the first one. Is that the intent?</p>
    </div>