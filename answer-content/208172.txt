<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Using <code>sudo</code> can be problematic within scripts.  It's really designed to be used interactively, and may request a password (which won't work very well if its standard input isn't a terminal).  The alternative is to require the script to be run as a suitably privileged user, and I can see that you want to minimise the amount of privileged code.</p>

<p>I couldn't initially find an unprivileged way to do what <code>dmidecode</code> - it inspects <code>/sys/firmware/dmi/tables/DMI</code> which is unreadable by ordinary users <s>and I don't see the same information anywhere else in sysfs</s>.  However, <code>lshw</code> can produce a total RAM summary without privilege (but can't see the individual DIMMs).  After a bit of tracing, it seems that it reads from <code>/sys/devices/system/memory</code> - multiply the contents of <code>block_size_bytes</code> (in hexadecimal) by the total of <code>*/online</code> to get the total RAM size in bytes:</p>

<pre><code>printf '%c' /sys/devices/system/memory/memory*/online | wc -c |
    dc -e '16i' -f /sys/devices/system/memory/block_size_bytes -e 'Ai ? *p'
</code></pre>

<p>If <code>coreutils</code> is available (almost all Linux systems, I think; certainly as likely as <code>sed</code> or <code>awk</code> and much more so than <code>dmidecode</code>), then we can use the <code>numfmt</code> utility to convert that number to a friendly human form:</p>

<pre><code>numfmt --to=iec-i --format='%.1f%f' --suffix B
</code></pre>

<p>(see the man page to understand the options, and adjust to taste).</p>

<hr>

<h1>Full working alternative</h1>

<pre><code>#!/bin/sh

printf 'Total RAM installed = '
printf '%c' /sys/devices/system/memory/memory*/online | wc -c |
    dc -e '?16i' -f /sys/devices/system/memory/block_size_bytes -e '*p' |
    numfmt --to=iec-i --suffix B 
</code></pre>

<p>As a bonus, this is much faster than using <code>dmidecode</code> (which seems to gather all its information even when printing only a small subset).</p>

<hr>

<h1>Other points:</h1>

<ul>
<li><p>I recommend setting <a href="http://pubs.opengroup.org/onlinepubs/007904975/utilities/set.html" rel="nofollow noreferrer"><code>-e</code></a> and <a href="http://pubs.opengroup.org/onlinepubs/007904975/utilities/set.html" rel="nofollow noreferrer"><code>-u</code></a> in all shell scripts (both are specified in POSIX):</p>

<pre><code>set -eu
</code></pre></li>
<li><p>Don't pipe through <code>grep</code> and <code>awk</code> - since the latter does regexp matching, just add a pattern to the <code>awk</code> program:</p>

<pre><code>dmidecode --type 17 | awk '/^[[:space:]]*Size: [0-9]/ { print $2 }'
</code></pre>

<p>Including a digit in the pattern eliminates the empty slots neatly at that stage, so obviating <code>is_number</code>.</p></li>
<li><p>Counting using <code>sprintf|wc</code> is a little safer if you use <code>%c</code> or <code>%.1s</code> conversion; that uses just the first letter, so you can count using <code>wc -c</code> and avoid double-counting strings with embedded newlines (for example, see my worked code).  You won't get the problem lines here, but it's a technique worth knowing.</p></li>
<li><p>Instead of iterating through the indices of <code>$ram_entries</code> and repeatedly invoking <code>sed</code> to extract individual lines, it's better to check that it's safe to expand without quotes (we know this to be true, since we've ensured it contains only decimal numbers), and then simply <code>for ram_entry in $ram_entries</code>.</p>

<p>Even better, instead of capturing and assigning to a variable, we could pipe into a <code>while read</code> loop to process each line.  Be careful to make the loop be in the main shell, not a sub-shell, though, or make it communicate the result out.</p></li>
</ul>
    </div>