<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">


<p>When you are collecting the unique integer values to a sorted list from the values of the original <code>Map&lt;String, Integer&gt;</code>, you are doing work that has already been done, namely the elimination of duplicates by calling <code>distinct()</code> on the stream. You have already filtered out the duplicates when you populated the <code>Multimap&lt;Integer, String&gt;</code>, so instead of collecting the values of the <code>Map&lt;String, Integer&gt;</code>, you could instead collect the keys of the <code>Multimap&lt;Integer, String&gt;</code>.</p>

<p>Also, you are creating a <code>HashMultimap</code>, which stores its values in <code>HashSet</code>s (so it's like a <code>HashMap&lt;Integer, HashSet&lt;String&gt;&gt;</code>). This creates unneeded overhead, because the <code>HashSet&lt;String&gt;</code>s containing the values of the multimap eliminate duplicates. But in this case, the multimap can never contain duplicate values in the first place, since its values are obtained from the key set of the original <code>Map&lt;String, Integer&gt;</code>. It would therefore suffice to configure the multimap to store its values in <code>ArrayList</code>s instead of <code>HashSet</code>s. By the way, the documentation says that the <code>create</code> methods of the individual <code>Multimap</code> implementations will be deprecated in the future, and that <code>MultimapBuilder</code> should be used instead.</p>

<p>Apart from that, you can omit the <code>List&lt;Integer&gt;</code> entirely by configuring the multimap to behave like a <code>TreeMap</code> instead of a <code>HashMap</code>. This might also save a bit of performance, because you have two functionalities implemented in one data structure, as opposed to using a <code>Multimap</code> for associating each integer with one or more Strings, and an additional <code>List</code> for sorting the integers. Of course, a <code>TreeMap</code> does not index its keys, so you would have to maintain a counter yourself when you iterate over the keys of the multimap.</p>

<p>Finally, the overall structure of your code sample is strange. Unit tests are meant to test whether some code works correctly. But your method <code>mappingTest()</code> not only performs the tests, it also contains the code to be tested. Of course, there's nothing wrong with placing assertions in code to test it. But what you wrote is not a unit test, because it doesn't test any defined unit (for example a method). It just executes some code and then uses assertions to check whether the code did what you thought it would do.</p>

<p>Instead, I suggest that you first write a method that accepts a <code>Map&lt;K, Integer&gt;</code> (or any <code>Map&lt;K, V&gt;</code> where <code>&lt;V extends Comparable&lt;? super V&gt;&gt;</code>) as a parameter and returns a "compressed" version of this map:</p>

<pre class="lang-java prettyprint-override"><code>public static &lt;K, V extends Comparable&lt;? super V&gt;&gt; Map&lt;K, Integer&gt; compress(Map&lt;K, V&gt; map) {
    //...
}
</code></pre>

<p>Then, you write a separate method that tests that method by constructing a map like you did in <code>mappingTest()</code>, passing this map to <code>compress(Map)</code> and then inspecting the returned <code>Map</code>. This would be a unit test, because you are testing the functionality of a unit, i.e. the method <code>compress(Map)</code>.</p>
    </div>