<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Aside from optional arguments that may or may not be used, fluent API is very useful when it comes to open arguments, and it's also easy to expand and maintain.</p>
<p>Your approach is very good. You might need to add some restrictions though, in order to protect your class accessibility. Currently, <code>Name</code> can be changed from outside the <code>NameBuilder</code> which makes your design vulnerable for unwanted exceptions.</p>
<p>What you need is to disclose <code>Name</code> inside the class, and use it internally, it doesn't need to be exposed, and restrict its access to only used through <code>NameBuilder</code> class.</p>
<p>Your current API is fine if it won't have much functionalities to add, but if you have some other requirements (other than adding names), I would suggest to wrap current work inside an internal class (inside the <code>NameBuilder</code>) which would handle the required functionalities. For instance, you might implement a class to handle adding new names, and another to process some actions such as formatting. All of which would be under the main class which would be the container to contain and navigate between them.</p>
<p><code>GetListAsString()</code> <strong>why not <code>ToString()</code>?</strong></p>
<p>since you've already defaulted your properties to <code>string.Empty</code> you can override <code>ToString()</code> on <code>Name</code> class to have this :</p>
<pre><code>public override string ToString()
{
    return $"{Rank}{FirstName}{MiddleName}{NickName}{Surname}{Suffix}".Trim();
}
</code></pre>
<p>then in your <code>NameBuilder</code> class do this :</p>
<pre><code>private string Add(string text)
{
    return $"{text} ";
}

public NamesBuilder SetRank(string rank)
{
    _current.Rank = Add(rank);
    return this;
}

public override string ToString()
{
    return string.Join(Environment.NewLine, Names);        
}
</code></pre>
<p>Now, just call <code>ToString()</code> to get the concatenated string.</p>
<p>the <code>Add(string text)</code> would just add a tailing space.</p>
<p>Lastly, there is no single <code>validation</code> used. You should validate each string, and make sure it fits your requirement before assign it.</p>
    </div>