<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>A binary sum (any sum, really) only needs four things:</p>

<ul>
<li>The left operand</li>
<li>The right operand</li>
<li>A variable to store the carry value (bit)</li>
<li>A variable to store the output value</li>
</ul>

<p>You can greatly simplify this problem by moving from right to left—after all, that is how numbers are traditionally summed in any number system (decimal, octal, hex, binary, anything).</p>

<p>Let's start with some of the problems in your code and then look at a better approach:</p>

<h3>Variable naming</h3>

<p>Some of your variable names don't make sense. For example:</p>

<ul>
<li><code>value = 0</code> (what value?)</li>
<li><code>amount = 0 #amount carried over</code> (why not call this <code>carry</code>?)</li>
<li><code>binaryLength = [] #list of all args length</code> (I'm still not quite sure what this means)</li>
</ul>

<p>There's also the issue of using <code>x</code> in your loops. Is it possible to understand what it represents? Sure. But you use too many <code>x</code>s, <code>i</code>s, and <code>j</code>s. It's all too much to keep track of. Consider renaming <code>x</code> to <code>arg</code>: <code>for arg in args</code>. There—it certainly reads better.</p>

<h3>Functions and their length</h3>

<p>Your <code>binary_sum</code> function is monstrous—it's too long and is doing lots of things at once. Years down the line, if you revisit your code, are you sure you will be able to follow what it's doing? I'm personally having trouble following along.</p>

<p>So where do you start? I suggest running through all of your comments and classifying them:</p>

<ul>
<li><p>Good comments: state why you're doing something and don't explain <em>what</em> you're doing.</p></li>
<li><p>Bad comments: the code itself is difficult to understand; the comment is there to basically tell the reader <em>what</em> you're doing.</p></li>
</ul>

<p>You have a lot of bad comments. Consider splitting <code>binary_sum</code> into different function calls, using informative names that tell the reader what those functions are doing. The outer <code>for</code> and <code>while</code> loops look like good candidates, at first glance.</p>

<h3>A simpler approach</h3>

<p>Let's take a step back and consider one issue at a time:</p>

<ol>
<li>We're given two input lists. Okay, but what if they're not of the same length? You seem to have already recognized this. At this point, you should consider writing a generic function that, given a list and a desired length, will pad that list with zeros at the front until the list is of the desired length (assuming the number isn't negative—does the problem state anything about this or two's complement?):</li>
</ol>

<pre><code>def padWithZeros(num, desiredLength):
   zerosNeeded = desiredLength - len(num)
   return [0] * zerosNeeded + num
</code></pre>

<p>If negative numbers do need to be accounted for, then it's just a matter of using <code>[num[0]] * bitsNeeded</code> instead of the hardcoded <code>0</code> in <code>[0] * zerosNeeded</code>.</p>

<ol start="2">
<li>Okay, one problem down. Now let's get the numbers from the command line. Don't throw this into the <code>binary_sum</code> function. Instead, the <code>binary_sum</code> function should take two numbers to add. We'll pass along those numbers from <code>main</code>. Consider using the <code>sys</code> library.</li>
</ol>

<pre><code>import sys
...
def main():
   num1 = sys.argv[1]
   num2 = sys.argv[2]
   print("{} + {} = {}".format(num1, num2, binary_sum(num1, num2))
</code></pre>

<p><strong>Edit</strong>: Oversight on my part. This doesn't work because the <code>sys.argv</code> tokens will ignore the list elements.</p>

<p>There. Short and sweet, and it's clear what we're doing. This will be the entry point for the program.</p>

<ol start="3">
<li>Now let's get to the <code>binary_sum</code> method. We need to pad the shorter number:</li>
</ol>

<pre><code>def binary_sum(num1, num2):
   if len(num1) &lt; len(num2):
      num1 = padWithZeros(num1, len(num2))
   elif len(num2) &lt; len(num1):
      num2 = padWithZeros(num2, len(num1))
</code></pre>

<p><strong>Edit</strong>: we can make this (and <code>padWithZeros</code>) even simpler by considering just the difference <code>len(num1) - len(num2)</code>. If it's negative, then <code>num1</code> is shorter than <code>num2</code>, so pad <code>num1</code> with the negative of that difference. If it's positive, then <code>num1</code> is longer than <code>num2</code>, so pad <code>num2</code> with that difference.</p>

<p>What do we do next? Now that we have two lists of equal length, we can begin traversing them using a single iterator/index. Let's express an algorithm: Moving right to left, take the digit from num1 and add it to the digit from num2, plus the carry, and then determine what the corresponding result bit should be as well as what the new carry should be. Repeat until we process the leftmost bit.</p>

<p>We have these possibilities (the last bit is the carry in these computations):</p>

<p>1 + 1 + 1 = 3 (011) = 1 carry 1</p>

<p>1 + 1 + 0 = 2 (10) = 0 carry 1</p>

<p>1 + 0 + 0 = 1 (01) = 1 carry 0</p>

<p>1 + 0 + 1 = 2 (10) = 0 carry 1</p>

<p>0 + 0 + 0 = 0 (00) = 0 carry 0</p>

<p>0 + 0 + 1 = 1 (01) = 1 carry 0</p>

<p>There are two approaches:</p>

<ul>
<li><p>Straightforward approach: Use a series of <code>if/elif</code> to evaluate the decimal results: <code>0</code>, <code>1</code>, <code>2</code>, or <code>3</code>.</p></li>
<li><p>Math trick: the result bit is by definition always the sum modulo 2. The carry bit is always the sum divided by 2.</p></li>
</ul>

<p>Of course, you also have to decide if there's going to be any overflow/cutoff. If the carry bit at the very end is a <code>1</code>, then you should either add a <code>01</code> to the front of the result (no overflow) or simply do nothing (overflow, result is inaccurate).</p>
    </div>