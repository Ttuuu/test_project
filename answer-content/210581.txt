<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a quite a bit later than this question's post date, but perhaps this review can be useful to others. Note this review relatively surface-level; it doesn't delve into a complete dissection of how the program actually functions, but it does contain useful advice about general program structure. If the code was revised to incorporate the below feedback and asked as a new question, then further substantive critiques would be easier to make.</p>

<ul>
<li>Having docstrings is a nice touch, and generally a sign of a well-documented module. However, your docstrings are not very descriptive of what the classes are intended for, or what the various attributes represent. <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">PEP 257</a> is recommended reading for how to write descriptive (and standardized) docstrings.</li>
<li>If you're using Python 3.x (which happens to be true, because you're using the <code>print</code> function without an import from <code>__future__</code>), classes with no superclass implicitly inherit from <code>object</code>, so there's never a need to have <code>object</code> as the superclass</li>
<li>As @13ros27 mentions in comments, <code>Dye</code> should be <code>Die</code></li>
<li>Having an empty <code>__init__()</code> in <code>Die</code> is unnecessary because <code>__init__()</code> is empty by default.</li>
<li>If you're using Python 3.7 or later (which was not released at the time of this question's asking), you can utilize <a href="https://docs.python.org/library/dataclasses.html" rel="nofollow noreferrer"><code>dataclasses</code></a> for less boilerplate <code>__init__()</code> attribute code and descriptive object representation. If you're using Python 3.6, there's also <a href="https://pypi.org/project/dataclasses/" rel="nofollow noreferrer">a backport</a>.</li>
<li>It would be slightly easier to read the closing <code>]</code> for <code>Game.Board</code> if it were on a separate line.</li>
<li>If you have a condition that should always be false, don't do <code>elif True==False:</code>; just do <code>elif False:</code>. Generally you should just avoid absolute conditionals and leave a <code>TODO</code> comment there to add remind yourself to add it in later.</li>
</ul>

<h2>Code smell: don't redefine class attributes as if they're instance attributes</h2>

<p>It's really bad form to declare class attributes in <code>Board</code>'s <code>__init__</code> method because class attribute definitions only need to run once. There's no benefit to having such code in <code>__init__</code>. Sure, you might not instantiate <code>Board</code> multiple times <em>now</em>, but if you ever do later, there's no reason to have the code run twice. More importantly, it ruins the values of these attributes if you ever end up instantiating multiple <code>Board</code> objects in the same program.</p>

<p>In your case though, it seems like the attributes are intended to be instance attributes, and they should use <code>self</code> instead of the class's name. This antipattern is present throughout the code for <code>Board</code>: just <strong>don't do it!</strong> Class attributes that are reassigned should probably just be instance attributes.</p>

<p>The dictionaries in <code>__init__</code> can also be simplified. Instead of:</p>

<pre><code>        Game.setup_menu = {}
        Game.setup_menu['1'] = "Add Player." 
        Game.setup_menu['2'] = "Start Game."

        Game.player_menu = {}
        Game.player_menu['1'] = "Roll Dice."
        Game.player_menu['2'] = "Display Owned Properties."

        Game.unowned_property_menu = {}
        Game.unowned_property_menu['1'] = "Buy Property"
        Game.unowned_property_menu['2'] = "Do Not Buy Property"
</code></pre>

<p>Just do this (with the names appropriate to the context):</p>

<pre><code>        setup_menu = {'1': "Add Player." , '2': "Start Game."}
        player_menu = {'1': "Roll Dice.", '2': "Display Owned Properties."}
        unowned_property_menu = {'1': "Buy Property", '2': "Do Not Buy Property"}
</code></pre>

<p>Speaking of <code>Board</code>'s <code>__init__</code> method...</p>

<h2>Limit the amount of code in <code>__init__</code></h2>

<p>You shouldn't have code that starts a game in <code>__init__</code>. <code>__init__</code> should contain just the bare minimum necessities to declare the object. The reason for this is <a href="https://en.wikipedia.org/wiki/Separation_of_concerns" rel="nofollow noreferrer">separation of concerns</a>. As it currently stands, most of the code in <code>__init__</code> should be moved into a separate <code>setup_game()</code> and <code>play_game()</code> methods. At the very least, you should have to explicitly run a <code>play_game()</code> to start the game, not just instantiate a <code>Board</code> object.</p>
    </div>