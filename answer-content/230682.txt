<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Q1</h1>

<p><code>uintptr_t</code> is used for representing pointers numerically, so it's not suitable even if the underlying representation is identical to that of <code>size_t</code>, the same can be said for <code>ptrdiff_t</code>. </p>

<p>On the other hand, it's common knowledge that the set of finite ordinals is isomorphic to the set of finite cardinals, so <code>size_t</code> can be your friend here. What's more, the loop condition may be improved by adding a cast to <code>size_t</code> to <code>len</code> to ensure the loop always ends even when the original type of <code>len</code> has greater width than <code>size_t</code> although one should always ensure <code>len</code> has a sane value. Also, the cast would be necessarily present had you actually implement <code>ERASE_STATES</code> as a function. </p>

<p>So use <code>size_t</code>. </p>

<h1>Q2</h1>

<p>If you're really concerned that assigning the literal <code>0</code> to a <code>char</code> would get you a "negative zero" in one's complement or signed magnitude representation, then use <code>unsigned char</code> (which is just the same intermediate type used when the standard defined <code>memset</code>). Otherwise, the a world proliferous of two's complement signed integers, a plain <code>char</code> offers better clarity when the value is non-negative. </p>

<p>Also, there's guarantee that <code>char[]</code> is gap-free (unlike <code>uint8_t</code>). </p>

<h1>Q3</h1>

<p>Since it's a macro and not a function, <code>buf</code> and <code>len</code> will be evaluated multiple times during the loop. This limits its usage to lvalues and constant expressions. </p>

<p>Unless you assign arguments to temporary variables. </p>

<h1>Improved Code</h1>

<pre class="lang-c prettyprint-override"><code>#define ERASE_STATES(buf, len)          \
    do {                                \
        char *ba = (void *)buf;         \
        size_t l = (size_t)len;         \
        for(size_t i=0; i&lt;l; i++)       \
            ba[i] = 0;                  \
    } while(0)
</code></pre>
    </div>