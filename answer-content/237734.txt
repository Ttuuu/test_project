<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Code review</h1>

<p>In general, the code looks nice and follows consistent styles.  Some small observations:</p>

<ul>
<li><p>Missing <code>#include &lt;string&gt;</code>.</p></li>
<li><p>Avoid <code>std::endl</code> when <code>\n</code> suffices.  <code>std::endl</code> flushes the buffer, while <code>\n</code> does not.  Unnecessary flushing can cause performance degradation.  See <a href="https://stackoverflow.com/q/213907/9716597"><code>std::endl</code> vs <code>\n</code></a>.  Use</p>

<pre><code>std::cout &lt;&lt; "YES\n";
</code></pre>

<p>instead of</p>

<pre><code>std::cout &lt;&lt; "YES" &lt;&lt; std::endl;
</code></pre>

<p>unless flushing is a requirement from the website (I hope not).</p></li>
<li><p>Since we are depending on lowercase letters being continuously encoded anyway, <code>'B' - 'A'</code> is just <code>1</code>.  And <code>A[i] += 1</code> becomes <code>++A[i]</code>.</p></li>
</ul>

<h1>Better algorithm</h1>

<p>That said, the logic of the code is overly convoluted.  The many levels of nested control statements make it hard to follow the code.  There is a much simpler algorithm to do it: to determine whether <code>A</code> is transformable into <code>B</code>,</p>

<ul>
<li><p>take the differences between the corresponding positions <code>B[i] - A[i]</code>;</p></li>
<li><p>form a sequence out of these differences;</p></li>
<li><p>append the sequence by 0 (to prevent cases like <code>bbbbb =&gt; aaaaa</code>);</p></li>
<li><p>test if this sequence is sorted in non-ascending order.</p></li>
</ul>

<p>For example:</p>

<ul>
<li><p>for <code>A = "abcde"</code>, <code>B = "ccdde"</code>, the sequence of differences is <code>21100</code>, so the transformation is possible (<code>abcde =&gt; bcdde =&gt; ccdde</code>);</p></li>
<li><p>for <code>A = "abcde"</code>, <code>B = "bbcce"</code>, the sequence of differences is <code>10010</code>, so the transformation is impossible (try it).</p></li>
</ul>

<p>Here's (roughly) how I would put everything together:</p>

<pre><code>#include &lt;algorithm&gt;
#include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;string_view&gt;
#include &lt;vector&gt;

bool transformable(std::string_view a, std::string_view b)
{
    if (a.size() != b.size()) {
        return false;
    }
    std::vector&lt;int&gt; diff_sequence(a.size() + 1);
    std::transform(b.begin(), b.end(), a.begin(), diff_sequence.begin(), std::minus&lt;&gt;{});
    diff_sequence.back() = 0;
    return std::is_sorted(diff_sequence.begin(), diff_sequence.end(), std::greater&lt;&gt;{});
}

int main()
{
    std::string A;
    std::string B;

    std::cin &gt;&gt; A &gt;&gt; B;

    if (transformable(A, B)) {
        std::cout &lt;&lt; "YES\n";
    } else {
        std::cout &lt;&lt; "NO\n";
    }
}
</code></pre>

<p>(<a href="https://wandbox.org/permlink/vFagC0QSsVQHprIc" rel="noreferrer">live demo</a>)</p>

<p>(Replace <code>std::string_view</code> with <code>const std::string&amp;</code> and remove the <code>#include &lt;string_view&gt;</code> if C++17 is not available, which IIRC is the case with competitive programming sites.)</p>

<p>The <code>transformable</code> function can be simplified with the <a href="https://ericniebler.github.io/range-v3/index.html" rel="noreferrer">range-v3 library</a>:</p>

<pre><code>namespace views = ranges::views;

bool transformable(std::string_view a, std::string_view b)
{
    return ranges::is_sorted(
        views::concat(
            views::transform(b, a, std::minus&lt;&gt;{}),
            views::single(0)
        ), std::greater&lt;&gt;{});
}
</code></pre>

<p>(<a href="https://wandbox.org/permlink/GlfRzk9f32hinqnq" rel="noreferrer">live demo</a>)</p>
    </div>