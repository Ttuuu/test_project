<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>There's good news and bad news. The good news is that it looks fairly complete. The bad news is that it's overly long, hard to read, lacking in consistency, and doesn't make sense in a lot of places.</p>

<p>I don't know what guideline you're using with regards to newlines, but this looks like you're using way too much of it:</p>

<pre><code>makeBanner();

int lineLength = getLineLength();

int lineLengthDifference = lineLength - title.size();

int leftSpacing, rightSpacing;

leftSpacing = rightSpacing = lineLengthDifference / 2;
</code></pre>

<p>Those really don't need an extra line between them.</p>

<pre><code>TextBox mainMenu = buildMainMenu();

TextBox continueMenu = buildContinueMenu();

TextBox thankYou = buildThankYouBox();

bool continueGame = true;

bool continueInputIsValid = false;

int playerAttack = 0;

int aiAttack = 0;

int result = 0;

int playerContinue = 0;

std::string playerAttackText = "";

std::string aiAttackText = "";

std::string resultText = "";
</code></pre>

<p>Those definitely don't need blank lines between them. No wonder your code is 502 lines. If you have two different blocks, I can understand why you'd separate them with a new line. After all, they're cheap and easily used as a separator. But you're not using them as a separator.</p>

<p>The following alternative for your last block would still use much whitespace, but it would at least make more sense:</p>

<pre><code>TextBox mainMenu = buildMainMenu();
TextBox continueMenu = buildContinueMenu();
TextBox thankYou = buildThankYouBox();

bool continueGame = true;
bool continueInputIsValid = false;

int playerAttack = 0;
int aiAttack = 0;
int result = 0;
int playerContinue = 0;

std::string playerAttackText = "";
std::string aiAttackText = "";
std::string resultText = "";
</code></pre>

<p>See? Extra newlines can be useful, but use them too much and your code will look like a tangled mess.</p>

<p>You keep talking about an AI in your code. There is no AI. An AI is a form of intelligence, something capable of learning or problem solving. Something vaguely resembling human behaviour. Rock-Paper-Scissors is simply too simple to qualify for that. Especially if you're looking at how your program determines its move:</p>

<pre><code>int getAiAttack ()
{
    std::srand(std::time(0));
    int attack = std::rand() % 3;
    return attack;
}
</code></pre>

<p>It's a pseudo-random attack. No perception, no learning, no intelligence. By the way, you shouldn't be re-seeding the <code>srand</code> function here. Do that once, at the start of your program. While it may look to you that the current solution will increase the randomness, it will actually decrease it. Try playing 3 sets of 3 (restart the program after every set) with your current solution and with the seed moved and notice the difference.</p>

<p>You got a good start with your textboxes, but their current usage is cumbersome.</p>

<p>Your logic boils down to:</p>

<pre><code>do 
{
    //menu &amp; user input
    //validate user input
    //calculate winner
    //set texts
    //more text

    do
    {
        //more user input
        //validate more user input

        //convert validation result

    } while (!continueInputIsValid);
    //reset
} while (continueGame);
</code></pre>

<p>Also rather cumbersome, but not bad for a beginner. Your choice of how to set-up menus is impacting your programming style though. Try to rebuild the functions so, that lines like</p>

<pre><code>    continueMenu.addLine("You " + resultText + "!");
    continueMenu.addLine("You chose " + playerAttackText + ".");
    continueMenu.addLine("Your opponent chose " + aiAttackText + ".");
</code></pre>

<p>are either taken care of by the functions returning those values (so no intermediate variables are required), or handled by a new function handling it all at once. Perhaps that function is going to need other functions (in OO design: methods), but it doesn't belong here immediately in the loop.</p>

<p>You also have a lot of odd text-to-string conversions going on:</p>

<pre><code>//player rock : ai scissors = win
(playerAttack == 0 &amp;&amp; aiAttack == 2)

result = 1;

    case 0:
        text = "rock";

    case 0:
        text = "tied";
</code></pre>

<p>Have you considered using <a href="https://stackoverflow.com/a/32536024/1014587">Enums</a> instead? That would improve the readability and ease-of-programming a lot.</p>

<p>Your code is at this in-between stage, between straight programming and object-oriented. Create a Game class, a Player class (with a Player1 and Computer or Player1 and Player2 instance) and you can almost copy piece by piece from your current program to your new program. Yet it would look a lot cleaner, especially since this allows you to easily split-up your code. <code>Player.h</code>, <code>Player.c</code>, <code>Textbox.h</code>, <code>Textbox.c</code>, <code>Game.h</code>, <code>Game.c</code> and a main file to combine it all in.</p>

<p>Once you've done that, you'll notice it's also easier to modify the current code to any other simple game. Number guessing, hangman, perhaps even tic-tac-toe.</p>

<p>Oh, as a side-note: there's a typo in your comment here:</p>

<pre><code>//player chose not to play agian
                             ^
</code></pre>
    </div>