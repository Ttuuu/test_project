<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I know you don't want to create a single class, but this seems exactly what is needed. I would create a new class and favor composition. Call the whole ball of wax a <code>PropertyBag</code> since that declares its intent a bit clearer. I also am a fan of interfaced-based development, so I extracted a couple of them. Note one constructor overload takes a non-generic <code>IDictionary</code> so you can create one of these from any existing dictionary (generic or not). Commentary welcome.</p>

<pre><code>public interface ITypedKey&lt;T&gt;
{
    string Name { get; }
}

public class TypedKey&lt;T&gt; : ITypedKey&lt;T&gt;
{
    public TypedKey(string name) =&gt; this.Name = name ?? throw new ArgumentNullException(nameof(name));

    public string Name { get; }
}

public interface IPropertyBag
{
    T Get&lt;T&gt;(ITypedKey&lt;T&gt; key);

    bool TryGet&lt;T&gt;(ITypedKey&lt;T&gt; key, out T value);

    void Set&lt;T&gt;(ITypedKey&lt;T&gt; key, T value);

    void Remove&lt;T&gt;(ITypedKey&lt;T&gt; key);
}

public class PropertyBag : IPropertyBag
{
    private readonly IDictionary&lt;string, object&gt; _bag;

    public PropertyBag() =&gt; this._bag = new Dictionary&lt;string, object&gt;();

    public PropertyBag(IDictionary dict)
    {
        if (dict == null)
        {
            throw new ArgumentNullException(nameof(dict));
        }

        this._bag = new Dictionary&lt;string, object&gt;(dict.Count);
        foreach (DictionaryEntry kvp in dict)
        {
            this._bag.Add(new KeyValuePair&lt;string, object&gt;(kvp.Key.ToString(), kvp.Value));
        }
    }

    public T Get&lt;T&gt;(ITypedKey&lt;T&gt; key)
    {
        if (key == null)
        {
            throw new ArgumentNullException(nameof(key));
        }

        return (T)this._bag[key.Name];
    }

    public bool TryGet&lt;T&gt;(ITypedKey&lt;T&gt; key, out T value)
    {
        if (this._bag.TryGetValue(key.Name, out object result) &amp;&amp; result is T typedValue)
        {
            value = typedValue;
            return true;
        }

        value = default(T);
        return false;
    }

    public void Set&lt;T&gt;(ITypedKey&lt;T&gt; key, T value)
    {
        if (key == null)
        {
            throw new ArgumentNullException(nameof(key));
        }

        this._bag[key.Name] = value;
    }

    public void Remove&lt;T&gt;(ITypedKey&lt;T&gt; key)
    {
        if (key == null)
        {
            throw new ArgumentNullException(nameof(key));
        }

        this._bag.Remove(key.Name);
    }
}
</code></pre>
    </div>