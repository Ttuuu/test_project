<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<blockquote>
  <p>Don't be afraid to trash me or offend me.</p>
</blockquote>

<p>Ok, I'll bite ;-)</p>

<p>But this isn't about <em>you</em>, it's all about <em>the code</em>. It's always about the code. Reviewers are not here to judge, they're here to help you grow, and improve your programming!</p>

<blockquote>
  <p>I obviously am new to this, and there has to be a better way to do it</p>
</blockquote>

<p>Oh, yes, absolutely. But first, I need to know what it does. So I glance at the code, and see a <code>Workbook.Open</code> handler - the macro runs every time <code>ThisWorkbook</code> (i.e. the host Excel document) is opened, which - <em>in my opinion</em> - isn't a terrific user experience. I personally prefer opening the workbook on an empty sheet that hides gridlines, row/column headings, and the formula bar; on it you'd find a number of formatted <em>shapes</em>/buttons, each assigned to a <code>Public Sub</code> procedure that lives in a <em>standard module</em>. That way the macro runs as a result of a user action beyond just opening the workbook.</p>

<p>But let's just go with "well it runs on open, they wanted it that way".</p>

<p>So the first thing we see is a <em>string</em> of chained declarations:</p>

<blockquote>
<pre><code>Dim CYR As Variant, PYR As Integer, InputError As Integer, SourceFolder As String, NewYearFolder As String, NewYearFiles As String, oFSO As Object, oNewYearFolder As Object, oNewYearFiles As Object, filename As Variant
</code></pre>
</blockquote>

<p>That's great, variables are being declared! Only problem is, <code>Option Explicit</code> is obviously missing at the top of the module, because it wouldn't compile otherwise: <code>NewFileName</code> isn't declared.</p>

<p>One problem with declaring a bunch of variables at the top of a procedure scope like this (ignoring the outrageous horizontal scrolling), is that it makes them look like <em>checking a box</em> off some list of things that need to be done ("declare variables: check!") - and the string of variables becomes essentially <em>noise</em>; code that needs to be there, but code that is systematically ignored/skipped, because what do we care about a variable that's used 200 lines below, when we're reading around the top of the procedure?</p>

<p>Compare to declaring variables <em>as close as possible to their first use</em>:</p>

<pre><code>Dim CYR As Variant
CYR = InputBox("Input New Year in 4 Digit Format. XXXX")
On Error GoTo ErrorCheck

Dim PYR As Integer
PYR = CYR - 1
</code></pre>

<p>Now the wall/string/chain of declarations is gone, and we see variables' declarations exactly where they are relevant.</p>

<p>But we need to stop right here and talk about <em>separation of concerns</em>. Procedures should be simple. Like, <em>stupid</em> simple. This <code>Workbook.Open</code> handler has a <em>cyclomatic complexity</em> of 6, which is a little high. What's that? It's an objective metric that can be used to identify potentially problematic areas in source code. Essentially, <em>how many possible execution paths are there?</em> And the answer here is "too many!". In a dream world, an event handler should look like this:</p>

<pre><code>Private Sub SomeObject_SomeEvent()
    DoSomething
End Sub
</code></pre>

<p>That's right - a <em>high abstraction</em> one-liner! What happens when <code>SomeEvent</code> is fired? We <code>DoSomething</code>! In this case, we might be abstracting the logic behind a procedure named <code>CreateMonthlyReportingBook</code>, and so we would be looking at <code>Workbook_Open</code> and when asked "what happens when the workbook opens?" we could say "we create a monthly reporting book", and that would be enough information for anyone that doesn't need every little bit of detail of <em>how that's done</em>.</p>

<p>So what would <code>CreateMonthlyReportingBook</code> do? Two or three closely related things:</p>

<pre><code>Private Sub CreateMonthlyReportingBook()
    Dim yearToProcess As Long
    If Not PromptForYearToProcess(yearToProcess) Then Exit Sub
    If Not CreateYearFolder(yearToProcess) Then Exit Sub
    ProcessYearFiles yearToProcess
End Sub
</code></pre>

<p>Note how pulling the <code>InputBox</code> and input validation into its own function, we instantly get the desired functionality (bail out on invalid input) without needing to track some "input error" variable that's actually used... pretty much 200 lines below where it's relevant.</p>

<p>Here <code>PromptForYearToProcess</code> would take the <code>yearToProcess</code> value as a <code>ByRef</code> argument - the function might look like this:</p>

<pre><code>Private Function PromptForYearToProcess(ByRef outYear As Long) As Boolean
    'prompt for what year to process...
    'validate user input...
    'assign outYear parameter with the validated user input...
    'return true if everything went well and outYear is valid.
End Function
</code></pre>

<p>The job of <code>CreateYearFolder</code> is to create the folder for the new year and prepare it for processing. If it can't do that (e.g. year folder already exists, or some I/O error is otherwise preventing successful completion), the rest of the procedure bails out.</p>

<p><code>ProcessYearFiles</code> would be where we iterate the folder for the specified year, and start iterating the workbooks to work with - but the "real work" would be in another procedure, one that takes a <code>Workbook</code> parameter; perhaps something like <code>ConfigureYearBook</code> - a procedure that's given a workbook and proceeds to do what needs to be done with it: it knows nothing of the bigger picture, all it cares about is that there's a workbook that needs processing, and it knows what that processing needs to be.</p>

<p>And inside this <code>ConfigureYearBook</code> procedure, there would be a call to another procedure - <code>ConfigureMonthSheet</code>, which would be given a <code>Worksheet</code> (and the <code>PYR</code> value), and be responsible for setting up the worksheet for that particular month.</p>

<p>So this copy-pasta repeated chunk...</p>

<blockquote>
<pre><code>Workbooks("Create New Year").Worksheets("January").Range("A7:AFH46").Copy _
    Destination:=Workbooks(NewYearFiles).Worksheets("January").Range("A7:AFH46")

Workbooks(NewYearFiles).Worksheets("January").Range("A1:AFH7").Replace What:=PYR, Replacement:=CYR
Workbooks(NewYearFiles).Worksheets("January").Range("ADZ7:AFH7").Replace What:="PYear", Replacement:=PYR
Workbooks(NewYearFiles).Worksheets("January").Range("A2:AFH46").Replace What:="qqq", Replacement:="="
</code></pre>
</blockquote>

<p>...could actually look like this:</p>

<pre><code>Private Sub ConfigureMonthSheet(ByVal sheet As Worksheet, ByVal previousYear As Long)
    ThisWorkbook.Worksheets(sheet.Name).Range("A7:AFH46").Copy _
        Destination:=sheet.Range("A7:AFH46")
    sheet.Range("ADZ7:AFH7").Replace "PYear", prevousYear
    sheet.Range("A2:AFH46").Replace "qqq", "="
End Sub
</code></pre>

<p>So <code>ConfigureYearBook</code> would be iterating an array of month/sheet names, and invoking <code>ConfigureMonthSheet</code> for each destination sheet.</p>

<p>A note about this:</p>

<blockquote>
<pre><code>Workbooks.Open (NewYearFolder &amp; "\" &amp; NewYearFiles)
</code></pre>
</blockquote>

<p>You're discarding the <code>Workbook</code> reference returned by the <code>Workbooks.Open</code> function. Declare a variable...</p>

<pre><code>Dim targetBook As Workbook
Set targetBook = Workbooks.Open(NewYearFolder &amp; "\" &amp; NewYearFiles)
</code></pre>

<p>And now you can use that object reference instead of repeatedly dereferencing it from the <code>Workbooks</code> collection every time you need it:</p>

<blockquote>
<pre><code>    Workbooks(NewYearFiles).Sheets(PYR &amp; " YTD").Select
    Workbooks(NewYearFiles).Sheets(PYR &amp; " YTD").Name = CYR &amp; " YTD"
    Workbooks(NewYearFiles).Worksheets("2019 Actual").Select
    Workbooks(NewYearFiles).Worksheets(PYR &amp; " Actual").Copy Before:=Workbooks(NewYearFiles).Worksheets(CYR &amp; " YTD")
    Workbooks(NewYearFiles).Worksheets(PYR &amp; " Actual (2)").Select
    Workbooks(NewYearFiles).Worksheets(PYR &amp; " Actual (2)").Name = CYR &amp; " Actual"
    Workbooks(NewYearFiles).Worksheets(PYR &amp; " Actual").Select
    Workbooks(NewYearFiles).Worksheets(PYR &amp; " Actual").Cells.Select
    Selection.Copy
    Workbooks(NewYearFiles).Worksheets(PYR &amp; " Actual").Range("A1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
</code></pre>
</blockquote>

<p>Line continuations are useful, but please avoid using them in weird places (the macro recorder likes putting them in stupid arbitrary locations), like between a named argument's name and that named argument's value:</p>

<blockquote>
<pre><code>    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
</code></pre>
</blockquote>

<p><code>SkipBlanks</code> is the named argument, <code>:=</code> is the operator that makes VBA understand it as such, and <code>False</code> is the argument's value; try to keep named arguments together with their values, seeing the <code>:=</code> operator at the beginning of a line of code means the reader's eyes need to drift upwards and right to find what argument that value is for, and that's ojectively bad.</p>

<blockquote>
<pre><code>    Workbooks(NewYearFiles).Worksheets(PYR &amp; " Actual").Copy Before:=Workbooks(NewYearFiles).Worksheets(CYR &amp; " YTD")
    Workbooks(NewYearFiles).Worksheets(PYR &amp; " Actual (2)").Select
</code></pre>
</blockquote>

<p>The <code>Copy</code> should be automatically activating the new sheet, so that <code>.Select</code> is entirely redundant; <code>" Actual (2)"</code> is <em>already</em> the <code>ActiveSheet</code> at that point, so the subsequent lines should do something along the lines of...</p>

<pre><code>targetBook.Worksheets(PYR &amp; " Actual").Copy _
    Before:=targetBook.Worksheets(CYR &amp; " YTD")

Dim sheet As Worksheet
Set sheet = ActiveSheet

sheet.Name = CYR &amp; " Actual"
sheet.Cells.Copy
sheet.Range("A1").PasteSpecial _
    Paste:=xlPasteValues, _
    Operation:=xlNone, _
    SkipBlanks:=False, _
    Transpose:=False
</code></pre>

<p>But, there's no need to involve the clipboard here:</p>

<pre><code>'overwrite formulas with their values:
sheet.UsedRange.Value = sheet.UsedRange.Value
</code></pre>

<p>Note that doing this with <code>sheet.Cells</code> instead of <code>sheet.UsedRange</code> would very likely result in an "out of memory" error - sending <em>every single cell in the worksheet</em> into the clipboard is MASSIVELY inefficient: we're talking 16K columns times over a <em>million</em> rows, i.e. well over a <em>billion</em> cells - most of which empty.</p>

<hr>

<p>There's <em>a lot</em> to say about this code, and many ways it can be improved. Performance-wise, there is quite a bit of I/O work involved (opening files, saving them, closing them) that has very little room for any performance gains. However removing the <code>Select</code>/<code>Activate</code> stuff, minimizing clipboard use, reducing redundant object dereferencing, will all contribute to improve the overall performance.</p>

<p>But before tweaking for performance, my advice would be to tweak for readability and maintainability first. Increase the <em>level of abstraction</em> by extracting "this chunk of code does XYZ" instructions into their own procedure scopes, then split these further into smaller, more specialized procedures that do what they need to do and nothing else; use meaningful, fully spelled-out identifier names; if <code>CYR</code> stands for <code>currentYear</code>, then name it that; if <code>PYR</code> stands for <code>previousYear</code>, then name it that; name procedures with a verb, keep nouns for variables.</p>

<p>What you absolutely want to avoid, is looking at a single "god procedure" that does everything, knows everything, controls everything. Split. Things. Up. A procedure that's 5-10 lines long can only go wrong in a limited number of ways. A 200-liner procedure has many, many more reasons to fail, and that makes it much more complicated.</p>

<p>A <em>User Experience</em> (UX) note about this:</p>

<blockquote>
<pre><code>MsgBox "New Year Files Renamed"
MsgBox "The Next Step Will Take a Few Moments"
</code></pre>
</blockquote>

<p>Avoid obnoxious user prompts like that. One <code>MsgBox</code> is annoying, two back-to-back is <em>irritating</em> (arguably the two messages could be merged into one). Since this is obviously a long-running process that needs to go through a number of files, consider using a <a href="https://rubberduckvba.wordpress.com/2018/01/12/progress-indicator/" rel="nofollow noreferrer">Progress Indicator</a> to let the user know what's going on, instead of message boxes.</p>
    </div>