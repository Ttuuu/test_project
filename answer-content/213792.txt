<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>    char String[30];
    char choice;
    int Nvowels,Nconsonant;
</code></pre>

<p>Don't define a variable before it is needed. Doing so increases the cognitive load on readers that trace through your code and keep mental records of every variable, their possible values, and whether they've even been set. This artifact from older languages also encourages lazy reuse of variables beyond their original intent. Define variables as you need them and keep the scope of each variable as narrow as required.</p>

<p>Use descriptive names. The larger the scope in which a variable exists, the more important it is to give that variable a name that indicates to the reader what it represents. <code>String</code> <span class="math-container">\$\rightarrow\$</span> <code>input_sentence</code>. <code>Nvowels</code> <span class="math-container">\$\rightarrow\$</span> <code>vowel_count</code>.</p>

<hr>

<pre><code>    cin.getline(String ,30);
</code></pre>

<p>If a user inputs 30 or more characters, <a href="https://en.cppreference.com/w/cpp/io/basic_istream/getline" rel="nofollow noreferrer"><code>std::istream::getline</code></a> will set the <code>failbit</code>. If <em>end-of-file</em> is reached before the delimiter is encountered, <code>std::istream::getline</code> will set the <code>eofbit</code>. You should check if <code>std::cin</code> is in a readable state and reset the state if it's not, otherwise you'll have an infinite loop when an error is encountered.</p>

<hr>

<pre><code>    cout&lt;&lt;"\nMENU"&lt;&lt;endl;
    cout&lt;&lt;" (A) Count the number of vowels in the string"&lt;&lt;endl;
    cout&lt;&lt;" (B) Count the number of Consonants in the string"&lt;&lt;endl;
    cout&lt;&lt;" (C) Count both the vowels and consonants in the string"&lt;&lt;endl;
    cout&lt;&lt;" (D) Enter another string"&lt;&lt;endl;
    cout&lt;&lt;" (E) Exit program"&lt;&lt;endl;
</code></pre>

<p>Whitespace is great for readability as they help separate operators and language constructs.</p>

<p>Avoid <code>std::endl</code>. If you need to explicitly flush the cache, then explicitly stream the manipulator <a href="https://en.cppreference.com/w/cpp/io/manip/flush" rel="nofollow noreferrer"><code>std::flush</code></a> and comment why a flush is necessary. If you simply need a <em>end-of-line</em> character, prefer '\n' or "\n".</p>

<p>Edward covered string concatenation via the compiler, but I'd like to also point out that C++11 introduced <a href="https://en.cppreference.com/w/cpp/language/string_literal" rel="nofollow noreferrer">raw string literals</a>.</p>

<pre><code>    std::cout &lt;&lt; R"(
MENU
 (A) Count the number of vowels in the string
 (B) Count the number of Consonants in the string
 (C) Count both the vowels and consonants in the string
 (D) Enter another string
 (E) Exit program
Enter Choice
");
</code></pre>

<hr>

<pre><code>    cin&gt;&gt;choice;
</code></pre>

<p>As with <code>std::istream::getline</code>, <a href="https://en.cppreference.com/w/cpp/io/basic_istream/operator_gtgt" rel="nofollow noreferrer"><code>std::istream::operator&gt;&gt;</code></a> needs to be checked to ensure a read was successful. If extraction failed, you should probably notify the user and attempt to recover.</p>

<hr>

<pre><code>    case 'A':
    //Function call to get number of Vowels
    case 'B':
    //Function call to get number of consonants
    //Outputting number of Consonants
    case 'C':
    //Function call to get number of Vowels
</code></pre>

<p>Keep comments crisp. Everything I need to know as far as what is being done is already there in the form of code to be compiled. Comments should be reserved for explaining why the code was written the way it was (the intent). Adding verbosity slows down understanding.</p>

<p>To assist with the readability, consider mapping the character inputs to enumerations. You can read up on enum serialization, but just to give you an idea of how it can help readability:</p>

<pre><code>enum class Selected {
    count_vowels = 'A',
    count_consonants,
    count_both,
    reset_sentence,
    exit
};

std::istream&amp; operator&gt;&gt;(std::istream&amp; in, Selected op) {
    // exercise for the reader. 
}

int main() {
    // ...
        Selected user_choice;
        std::cout &lt;&lt; "Enter choice: ";
        std::cin &gt;&gt; user_choice;

        switch (user_choice) {
        case Selected::count_vowels:
            // ...
        case Selected::count_consonants:
            // ...
        case Selected::count_both:
            // ...
        case Selected::reset_sentence:
            // ...
        case Selected::exit:
            // ...
        case default:
            // Handle user-input error (out of range, end of file)
</code></pre>

<hr>

<pre><code>            fflush(stdin);
</code></pre>

<p>Using <a href="https://en.cppreference.com/w/cpp/io/c/fflush" rel="nofollow noreferrer"><code>std::fflush</code></a> on an input stream is <a href="https://en.cppreference.com/w/cpp/language/ub" rel="nofollow noreferrer"><strong><em>undefined behavior</em></strong></a>. If you were trying to reset the buffer of <code>std::cin</code>, see <a href="https://en.cppreference.com/w/cpp/io/basic_istream/ignore" rel="nofollow noreferrer"><code>std::cin::ignore</code></a>.</p>

<hr>

<pre><code>        case 'E': 
            exit(0);
            break;
        }
    } while (choice != 'E');

    system("pause");
</code></pre>

<p>Once the the program encounters <code>exit(0)</code>, all of the remaining code (<code>break;</code> <span class="math-container">\$\rightarrow\$</span> <code>while (choice != 'E')</code> <span class="math-container">\$\rightarrow\$</span> <code>system("pause");</code>) is unreachable. If you intend to immediately return from a function (or in this case exit the program), you don't need to loop until <code>choice</code> is <span class="math-container">\$E\$</span>. This is one of those times where <code>while (true)</code> is actually appropriate if you didn't have the restriction.</p>

<p><code>system("pause")</code> is slow, platform-dependent, and insecure.  Consider re-evaluating your development environment, from having permanent access to a console or utilizing the breakpoint of a debugger.</p>

<hr>

<pre><code>int Consonant_count(char *str) {
    // ...
        if (*str != 'a' &amp;&amp; *str != 'e' &amp;&amp; *str != 'i' &amp;&amp; *str != 'o' &amp;&amp; *str != 'u')
              count++;
            str++;
</code></pre>

<p>Prefer scoping your single-line statement blocks with braces. Adding code in a hurry </p>

<pre><code>if (condition)
    statement;
  statementIntendedToBeScoped???
</code></pre>

<p>or commenting</p>

<pre><code>if (condition)
    // statement
statementThatIsNowScopedToCondition
</code></pre>

<p>can lead to errors. Scoping with braces addresses this issue.</p>

<pre><code>if (condition) {
    statement
}
statementDefinitelyNotScoped

if (condition) {
    // statement
}
statementDefinitelyNotScoped
</code></pre>

<hr>

<pre><code>if (*str != 'a' &amp;&amp; *str != 'e' &amp;&amp; *str != 'i' &amp;&amp; *str != 'o' &amp;&amp; *str != 'u')
</code></pre>

<p>Keep in mind the various possible values a type can represent. A character (<code>char</code>) can represent the set of consonants and vowels (A-Z, a-z). It can also represent digits, punctuation, control characters, whitespace, etc. The conditional in <code>Consonant_count</code> is returning true or false if the current character is any ASCII character (not any alphabetic character) that is not any of <code>aeiou</code>. Clearly control structures, punctuation, and whitespaces are not consonants.</p>

<p>In both of your functions, how do you handle uppercase vowel inputs?</p>

<p>Rather than check each individual vowel, consider a lookup technique.  You could create a table (one for vowel, one for consonant) that maps each character to true or false.  There is also a bit mapping alternative that builds on the lookup table approach, where you exploit the layout of the ascii table to do very fast lookups via bit shifts and masks.</p>

<pre><code>bool is_vowel(char ch) {
    auto lowercase_pos = (ch | 0x20) - 96;
    if (static_cast&lt;unsigned char&gt;(lowercase_pos) &gt; 31) {
       return false;
    }
    constexpr std::uint32_t vowel_mask = (1 &lt;&lt; 1) | (1 &lt;&lt; 5) | (1 &lt;&lt; 9) | (1 &lt;&lt; 15) | (1 &lt;&lt; 21);
    return (vowel_mask &amp; (std::uint32_t{1} &lt;&lt; lowercase_pos)) != 0;
}
</code></pre>

<hr>

<pre><code>specific_count(range)
    count = 0
    for each element in the range
        if element is what we're looking for
            count = count + 1
    return count
</code></pre>

<p>Learn the various <a href="https://en.cppreference.com/w/cpp/algorithm" rel="nofollow noreferrer"><code>&lt;algorithm&gt;</code>s</a>.  You'll notice that both your functions have the same structure as the pseudocode above.  It turns out, this is a common algorithm in C++ (<a href="https://en.cppreference.com/w/cpp/algorithm/count" rel="nofollow noreferrer"><code>std::count_if</code></a>).  You should be aware of this library as you learn more about functions and specifically lambdas (objects that behave like functions and can be passed around into functions as arguments).</p>
    </div>