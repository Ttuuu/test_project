<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I'd use a format string instead.  Any seasoned programmer will not find anything hard to read when using format strings.  Though if you have multiple arguments for a multiple argument string (e.g., localization strings), it <em>might</em> be confusing with their orders or how much it requires, but they should be sufficiently documented anyway.  It's a shame that the formatting features weren't a lot like python's.  If you'd prefer not to use this approach for whatever reason, then I'm afraid you're catering to the wrong crowd for the wrong reasons IMHO.</p>

<p>Alternatively, I know you said that you'd prefer not to use this but using <code>String.Concat()</code> would most likely be the fastest and most efficient of these approaches.  There isn't anything to parse nor are there any intermediate strings you need to work with.  You get your complete string in one shot.  Now I've gotta admit, it isn't the prettiest of syntaxes and I too avoid them at times but there are ways to make it a bit more attractive.  But at least the arguments should be immediately identifiable as they'd typically not be string constants but variables (which are highlighted differently in any decent IDE).</p>

<p>First and foremost, your variable should <em>always</em> have the appropriate and descriptive names.  This should be a given.  Nothing kills readability as much as having crappy variable names, especially when you have a lot of them.</p>

<p>And when dealing with large bodies of text, nothing's stopping you from moving that text into a separate method to encapsulate it.  That way you can give your parameters better names when needed, you'd find the string all in one place and it isn't mixed in with your code as much.  These could easily be tied in with your resource files to make it that much better.  This also applies to with using the format strings as well.</p>

<p>e.g.,</p>

<pre><code>static string EmailText(string toName, string fromName)
{
    return @"Dear " + toName + @":&lt;br /&gt;
             &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec aliquam blandit risus, quis imperdiet nibh congue quis.&lt;/p&gt;
             &lt;p&gt;Pellentesque ullamcorper malesuada ante, ac auctor felis feugiat id. Etiam id eros convallis nisi feugiat tincidunt. Phasellus fringilla erat eu tortor egestas volutpat. Vestibulum in odio lorem, quis fringilla sapien.&lt;/p&gt;
             &lt;p&gt;Sincerely,&lt;/p&gt;
             &lt;p class='sig'&gt;" + fromName + @"&lt;/p&gt;";
}

// then when you need it:
return EmailText(toName: "Bob", fromName: "Bill");  // named parameters optional but useful
</code></pre>
    </div>