<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>function computerPlay() {
    let choices = ['rock', 'paper', 'scissors'];
    return choices[Math.floor(Math.random() * choices.length)];
}
</code></pre>

<p>In the above function, you create the <code>choices</code> array again and again. This is a waste of time and memory. It's better to create the choices once and for all:</p>

<pre><code>const choices = ['rock', 'paper', 'scissors'];

function computerPlay() {
    return choices[Math.floor(Math.random() * choices.length)];
}
</code></pre>

<p>On the other hand, the JavaScript compiler may be able to prove that creating this array each time is not necessary. In that case the code might stay as it is. I don't know how advanced the optimization techniques for JavaScript compilers are in 2020. You would have to measure this using a memory profiler.</p>

<p>The <code>playRound</code> function is quite big, and having all these inner functions does not increase the readability. Especially since you are inconsistent: The message for a tie is in the lower half while the two other messages are in the upper half. All these messages belong together, therefore they should be written in the same area of the code.</p>

<pre><code>function playRound(playerSelection, computerSelection) {
    const capitalize = word =&gt; { return word.charAt(0).toUpperCase() + word.slice(1); }
    const winStatement = (winner, loser) =&gt; { return `You Win! ${capitalize(winner)} beats ${capitalize(loser)}`; }
    const loseStatement = (winner, loser) =&gt; { return `You Lose! ${capitalize(winner)} beats ${capitalize(loser)}`; }
    const winningChoice = {'rock': 'paper', 'paper': 'scissors', 'scissors': 'rock'};
</code></pre>

<p>In all these inner functions, you can remove the <code>{ return</code> at the beginning and the <code>}</code> at the end. This makes them shorter and easier to understand since they now look more similar to the mathematical concept of a function, which is written as <span class="math-container">\$f\colon A \to B\$</span>, and not <span class="math-container">\$f\colon A \to \left\{ \mathop{\text{return}} B \right\}\$</span>.</p>

<p>The <code>winningChoice</code> should be moved outside of this function, just like the <code>choices</code> in <code>computerPlay</code>.</p>

<pre><code>    playerSelection = playerSelection.toLowerCase();
</code></pre>

<p>Having to deal with uppercase and lowercase words makes this function more complicated than necessary. Normalizing the user input should be done somewhere else. This way, the <code>playRound</code> function can focus on its single purpose, which is deciding the outcome of the game.</p>

<pre><code>    if(playerSelection === computerSelection) return "Oh! It's a tie";
    else if(playerSelection === winningChoice[computerSelection]) return winStatement(playerSelection, computerSelection);
    else return loseStatement(computerSelection, playerSelection);
}
</code></pre>

<p>This code looks quite condensed. The usual style is to write <code>if (</code>, with a space.</p>

<p>A general guideline is that your code should not require horizontal scrollbars. Therefore you should place all the <code>return</code> statements into separate lines, like this:</p>

<pre><code>    if (playerSelection === computerSelection)
        return "Oh! It's a tie";
    else if (playerSelection === winningChoice[computerSelection])
        return winStatement(playerSelection, computerSelection);
    else
        return loseStatement(computerSelection, playerSelection);
</code></pre>

<p>This way you can clearly see the structure of the code by reading only the leftmost word of each line: if return else return else return.</p>

<p>When I copied your code duringthe review, I made some other changes, and this is the final result:</p>

<pre><code>const choices = ['rock', 'paper', 'scissors'];
const beats = {'rock': 'paper', 'paper': 'scissors', 'scissors': 'rock'};
const upper = {'rock': 'Rock', 'paper': 'Paper', 'scissors': 'Scissors'};

function computerPlay() {
    return choices[Math.floor(Math.random() * choices.length)];
}

function playRound(human, computer) {
    return human === computer
        ? `Oh! It's a tie`
        : human === beats[computer]
        ? `You win! ${upper[human]} beats ${computer}`
        : `You lose! ${upper[computer]} beats ${human}`;
}

const playerSelection = choices[0];
const computerSelection = computerPlay();
console.log(playRound(playerSelection, computerSelection));
</code></pre>

<p>As you can see, I decided to only capitalize one of the words, and I also created a fixed translation table instead of capitalizing the words on-the-fly. Again, I did this to avoid unnecessary object creation. This kind of performance optimization is not necessary for a simple Rock Paper Scissors game, but I tried to be consistent in the code. Oh well, except that the <code>You win</code> and <code>You lose</code> strings are still templates that have to be created dynamically.</p>

<p>I also made the variable names a bit shorter: <code>human</code> instead of <code>playerSelection</code>. I removed the <code>selection</code> since that was not an essential part of the name. I renamed the variable from <code>player</code> to <code>human</code> since both the human and the computer are <em>players</em> of the game, which makes the variable name <code>player</code> ambiguous.</p>

<p>In <code>playRound</code> it's a stylistic choice whether to use the <code>?:</code> operator or an <code>if else</code> chain. At first I used an <code>if (human === computer) return 'tie'</code> combined with a <code>?:</code> operator for deciding between <code>you win</code> and <code>you lose</code>. I didn't like this mixture because it felt inconsistent. I had to settle on either using the <code>?:</code> operator throughout or the <code>if else</code> chain. I chose the <code>?:</code> operator because it is shorter. On the other hand, the <code>if else</code> chain would have probably been clearer.</p>
    </div>