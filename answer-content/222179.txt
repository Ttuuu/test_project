<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You could use a few tricks to implement the two sequences more efficiently, but the short version of my answer is that most significant performance improvements you could make involve some relatively advanced math, and the smaller improvements do more to improve your code's readability than its performance.</p>

<hr>

<h1>Useful improvements to <code>prime</code></h1>

<p>If you keep a list of the primes you find, you only need to check if those divide the new numbers you are checking, rather than checking every number up to the number you are looking at.</p>

<p>You could also skip over even numbers in the outer loop (use <code>range(3, max, 2)</code>), thus avoiding checking even numbers that you can be sure aren't prime (you would need to add a special case for 2).</p>

<p>The inner loop (<code>j</code>) can stop at <code>i/2</code>, because no number can be evenly divided by a number more than half its size. Similarly, you can stop the loop at when you pass the square root of <code>n</code>, but you would have to implement that by squaring the factors because <code>sqrt</code> is limited by the inaccuracy of floating-point numbers.</p>

<p>Using all of these suggestions, the code might look a little like this:</p>

<pre><code>def nth_prime(n):
    if n == 1:
        return 2
    primes = [2]
    for candidate_prime in range(3, MAX, 2):
        for p in primes:
            if (p ** 2 &gt; candidate_prime):
                break # candidate is prime
            if (candidate_prime % p == 0)
                break # p divides candidate; candidate is not prime
        if no primes divided candidate_prime:
            primes.append(candidate_prime)
            if len(primes) == n:
                return candidate_prime
</code></pre>

<p>Additional optimizations for determining whether a number is prime are discussed on <a href="https://en.wikipedia.org/wiki/Primality_test" rel="nofollow noreferrer">the Wikipedia page on the subject</a>.</p>

<p>These improvements will only start to have noticeable effects when you start looking at very large primes, so you might also want to use <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>itertools.count</code></a> to look at all numbers instead of stopping at 100.</p>

<p>(If you really want to stop at 100, you could also just make a list of the prime numbers up to 100 and index that for maximum efficiency.)</p>

<hr>

<h1>Links to mathematical solutions</h1>

<p>To really improve efficiency, <a href="https://stackoverflow.com/a/14661740/7389264">this answer</a> suggests the solution in <a href="http://fusharblog.com/solving-linear-recurrence-for-programming-contest/" rel="nofollow noreferrer">this blog post</a>, but this is probably overkill unless you really want to be able to calculate very large fibonacci numbers very fast (I can't tell that there's a delay in your function until somewhere far above <code>n=10000</code>).</p>

<p><a href="https://stackoverflow.com/questions/9625663/calculating-and-printing-the-nth-prime-number/9704912#9704912">This question</a> goes into depth about how to find the nth prime number, but the final point is important to note:</p>

<blockquote>
  <p><strong>tl;dr:</strong> Finding the nth prime can be efficiently done, but the more efficient you want it, the more mathematics is involved.</p>
</blockquote>

<hr>

<h1>Other suggestions</h1>

<p>The following suggestions aren't really about efficiency (if they change the efficiency of your code, the difference will be immeasurably small), but they might make your code a little cleaner.</p>

<ol>
<li><p>In the loop you're using for the Fibonacci sequence, you can just write <code>t1, t2 = t2, t1 + t2</code> to update both values in one line.</p></li>
<li><p>When creating the nth Fibonacci number, you can just loop over <code>range(n)</code>; there's no need to adjust the ends of the loop. And if you're not using the index <code>i</code> in that loop, Python convention is call it <code>_</code>, so you end up with <code>for _ in range(n)</code>.</p></li>
<li><p>Using Python's less-than-well-known <code>for</code>/<code>else</code> feature might let you eliminate the flag variable. If you put an <code>else</code> block after a loop in Python, it will run only if you do <em>not</em> <code>break</code> out of the loop, which allows you to avoid flag variables.</p>

<pre><code>for i in some_list:
    if condition(i):
        break
else:
   do_this_if_condition_was_never_true()
</code></pre></li>
</ol>
    </div>