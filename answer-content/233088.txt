<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>The entire question essentially spins around and calls for a good <em>"Retry/MaxRetry nextwork requests"</em> strategy.</p>

<p>And just for this we have a flexible and reach <em>Retry</em> configuration - <a href="https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html#urllib3.util.Retry" rel="nofollow noreferrer"><code>urllib3.util.Retry</code></a>, which in combination with well-known <a href="https://2.python-requests.org/en/master/" rel="nofollow noreferrer"><code>requests</code></a> lib provides granular control over the conditions under which we retry a request.</p>

<p>Among a bunch of options it provides:</p>

<blockquote>
  <p>class <strong><em>urllib3.util.Retry</em></strong>(total=10, connect=None, read=None,
  redirect=None, status=None, method_whitelist=frozenset(['HEAD',
  'TRACE', 'GET', 'PUT', 'OPTIONS', 'DELETE']), status_forcelist=None,
  backoff_factor=0, raise_on_redirect=True, raise_on_status=True,
  history=None, respect_retry_after_header=True,
  remove_headers_on_redirect=frozenset(['Authorization']))</p>
</blockquote>

<p>I'll mention just some crucial ones:</p>

<ul>
<li><code>total</code>. Total number of retries to allow.</li>
<li><code>status_forcelist(iterable)</code>. A set of integer <em>HTTP</em> status codes that we should force a retry on. <br>In my sample scheme below I used all error HTTP codes to be considered here. But you can restrict that iterable by passing the argument with selected codes like <code>status_forcelist=(500, 502, 503, 504)</code>.</li>
<li><p><code>backoff_factor</code>. A backoff factor to apply between attempts after the second try (most errors are resolved immediately by a second try without a delay). <code>urllib3</code> will sleep for:</p>

<pre><code>{backoff factor} * (2 ** ({number of total retries} - 1))
</code></pre>

<p>seconds. If the backoff_factor is <code>0.1</code>, then <code>sleep()</code> will sleep for <code>[0.0s, 0.2s, 0.4s, â€¦]</code> between retries. It will never be longer than <code>Retry.BACKOFF_MAX</code>. <br>This would be a more "thought-out" alternative to a constant delay.</p></li>
</ul>

<hr>

<p>To establish the above Retry/MaxRetry strategy we run through the following steps:</p>

<ul>
<li>creating instance of <code>Retry</code> component with the needed options</li>
<li>creating <a href="https://2.python-requests.org//en/latest/api/#requests.adapters.HTTPAdapter" rel="nofollow noreferrer"><code>requests.adapters.HTTPAdapter</code></a> adapter instance with passing in created <code>Retry</code> component as its <code>max_retries</code> parameter: <code>HTTPAdapter(max_retries=self._retry)</code></li>
<li>creating requests session with <code>self.session = requests.Session()</code> and mounting it to a base url (<code>self.session.mount(self.base_url, self._adapter)</code>). You can mount session to multiple base urls/prefixes.</li>
</ul>

<p>Since you posted an instance method <code>def getRequest(self, ...</code> I assume that that's the context of some API client/wrapper.
Below is a generic sample scheme of using the described strategy. So you can easily adjust/extend your API client class appropriately (and get rid of loops or recursion in "Retry" intention).</p>

<pre><code>import requests
from requests.adapters import HTTPAdapter
from requests.exceptions import RetryError
from urllib3.exceptions import MaxRetryError
from urllib3.util.retry import Retry
import datetime


# .... your constants/variables

class MyAPIClient:
    ERROR_CODES = tuple(code for code in requests.status_codes._codes if code &gt;= 400)

    def __init__(self, base_url, max_retries=5, backoff_factor=0.2):
        self.base_url = base_url
        self._max_retries = max_retries
        self._retry = Retry(total=max_retries,
                           backoff_factor=backoff_factor,
                           status_forcelist=MyAPIClient.ERROR_CODES)
        self._adapter = HTTPAdapter(max_retries=self._retry)

        self.session = requests.Session()
        self.session.mount(self.base_url, self._adapter)

    def get_request(self, endpoint):
        url = self.base_url + endpoint

        if self.expirationT &lt;= datetime.datetime.now():
            self.token, self.expirationT = self.auth(client_id, client_secret)

        try:
            response = self.session.get(url, auth=BearerAuth(self.token))
        except (MaxRetryError, RetryError) as ex:
            # optional actions/logging here. Otherwise - try/except can be just eliminated
            raise
        return response
</code></pre>
    </div>