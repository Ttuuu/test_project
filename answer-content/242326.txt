<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Duplicate logic</h2>

<pre><code>if (token.IsCancellationRequested)
{
    try
    {
        token.ThrowIfCancellationRequested();
    }
    catch (OperationCanceledException)
    {
        SocketClient.UnsubscribeAll();
        Console.WriteLine("Task canceled.");
    }
}
</code></pre>

<p>This code is weird. You first check if a cancellation is requested, then you ask for an exception to be throw if a cancellation is requested (which you already know it is), and then you immediately catch that exception. It seems like you've conflated two ways of doing the same thing. You could instead use <em>either</em>:</p>

<pre><code>try
{
    token.ThrowIfCancellationRequested();
}
catch (OperationCanceledException)
{
    SocketClient.UnsubscribeAll();
    Console.WriteLine("Task canceled.");
}
</code></pre>

<p>OR</p>

<pre><code>if (token.IsCancellationRequested)
{
    SocketClient.UnsubscribeAll();
    Console.WriteLine("Task canceled.");
}
</code></pre>

<p>Which approach you use depends on whether it's meaningful to throw an exception, and it doesn't seem meaningful here (though you have actually omitted the surrounding code so I can't give you a guarantee). </p>

<p>Throwing an exception is an expensive operation, and its main purpose is to bubble an exception up through multiple layers without requiring manual handling at every step. Since you're throwing and catching at the same layer, the cost of the expensive throw is not worth the benefit.</p>

<p>Based on what I see, a simple <code>if</code> suffices here.</p>

<hr>

<h2>Tuples</h2>

<p>I don't like tuples (in this particular scenario, at least). They're a honeytrap. </p>

<p>At first sight, they look really easy by allowing you to skip creating a custom class, but then you are stuck using unreadable <code>Item1</code>, <code>Item2</code>, ... properties which have no meaning. In any reasonably sized codebase, I'd have to look up which item is stored in which slot several times during the development cycle.</p>

<p>I suggest replacing this with a custom class just so you can keep the property names relevant:</p>

<pre><code>public class BotTask
{
    public Task Task { get; private set; }
    public CancellationTokenSource CancellationTokenSource { get; private set; }

    public BotTask (Task task, CancellationTokenSource cancellationTokenSource)
    {
        this.Task = task;
        this.CancellationTokenSource = cancellationTokenSource;
    }
}
</code></pre>

<p>It's a few lines extra, but it significantly improves readability in the code that uses these objects, e.g.:</p>

<pre><code>// Previously

CancellationTokenSource cts = bot.Value.Item2;
cts.Cancel();

// Now

bot.Value.CancellationTokenSource.Cancel();
</code></pre>

<p>The increased readability and somewhat shortened line count in the usage generally outweighs the effort of writing a simple DTO class.</p>

<hr>

<h2>Contains</h2>

<p>It seems to me that you're conflating the <code>Dictionary.ContainsKey</code> and <code>String.Contains</code> methods:</p>

<pre><code>public void Stop(string botName)
{
    foreach (var bot in _bots)
    {
        if (bot.Key.Contains(botName))
        {
            // ...
        }
    }
}
</code></pre>

<p>If you have a list of botTasks with names <code>Alice, Bob, Cindy</code> and you ask to stop the both with name <code>ind</code>, then you should come up dry since no bot with that exact name exists. However, in your current logic, that is not the case, since <code>"Cindy".Contains("ind")</code> returns <code>true</code>!</p>

<p>What you presumably want is to check if the dictionary contains the key <code>"ind"</code> (exactly), instead of whether the dictionary contains any key which contains <code>"ind"</code> in part of the key. That can be achieved like so:</p>

<pre><code>public void Stop(string botName)
{
    if(_bots.ContainsKey(botName))
    {
        var bot = _bots[botName];

        // ...
    }
}
</code></pre>

<p>Or alternatively:</p>

<pre><code>public void Stop(string botName)
{
    if(_bots.TryGetValue(botName, out bot))
    {
        // ...
    }
}
</code></pre>

<hr>

<h2>Thread.Sleep</h2>

<pre><code>Thread.Sleep(2500);
</code></pre>

<p>Since you're using async in your code, it seems counterproductive to then use <code>Thread.Sleep</code> instead of the asynchronous ´Task.Delay´, i.e.:</p>

<pre><code>await Task.Delay(2500);
</code></pre>

<p>This is a tiny aside, because I'll omit this delay in the next section, but it's still important to point out in case a delay was actually needed here.</p>

<hr>

<h2>Manual disposing</h2>

<p>I think you can skip the "sleep and dispose" logic here.</p>

<p>It's good to see that you are managing your resources responsibly, but in this particular case the management is causing an undesirable blocking of the thread for 2.5 seconds. That's not good. Even if you use an <code>await Task.Delay</code> instead, I'm still not convinced that it's necessary to manually handle this.</p>

<p>When nothing references the cancellation token source anymore, the garbage collector will eventually pick this up and dispose of the object itself. There are cases where you don't have the luxury of waiting on the garbage collector to kick into action, but in such cases blocking the thread for 2.5 seconds would still be a bigger evil.</p>

<p>You can simplify the logic:</p>

<pre><code>public void Stop(string botName)
{
    if(_bots.ContainsKey(botName))
    {
        var bot = _bots[botName];

        bot.Value.CancellationTokenSource.Cancel();

        _bots.TryRemove(botName, out _);
    }
}
</code></pre>

<p>Instead of waiting for the task to cancel itself, your code instead entrusts that the task will eventually end itself, and your code only focuses on getting its own affairs in order, i.e. removing the task from your dictionary.</p>

<hr>

<h2>Static ConcurrentDictionary</h2>

<p><em>This is more of an educated guess than a guarantee.</em></p>

<p>Your static <code>ConcurrentDictionary</code> comes across as a red flag to me, where you're misusing statics.</p>

<p>It seems to me like you're intending to spawn multiple <code>BotWrapper</code> instances which you expect to share the same static botlist, but that's a flawed approach. It would be better if you instead pass the same <code>BotWrapper</code> instance around in your codebase (whether through DI containers or manually, I don't know how your architecture is set up), and then keep the botlist as a non-static property of that instance.</p>

<p>The benefits of managing a single instance are a minor memory improvement (since you don't need multiple instances anymore), and it allows you to scale out your codebase in case you ever need to manage two different lists of bottasks. Using statics, it's impossible to have more than one. While it may not be necessary right now to maintain different lists, <em>never say never</em>, and it's good practice to allow for maximum reusability down the line.</p>

<p>However, you didn't actually provide enough code for me to make a final decision on this. This is just an educated guess based on the code as it is presented.</p>
    </div>