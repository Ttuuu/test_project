<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>This is a really interesting project, and looks pretty solid. I'm just 
going to go through and give you some ruby style tips as I see them. 
I've annotated all of the files with my thoughts.</p>

<p>First of all, you use lists in a couple places. Because of that, I'd 
suggest that you create a generic list method right above your #language 
method:</p>

<pre><code>def list(*options, retry_msg: '')
  options = Array(options).flatten.map(&amp;:to_s).uniq
  invalid_opts = (0..options.length).map(&amp;:to_s)
  throw "You cannot pass a number as an option" if options.any? { |opt| invalid_opts.include?(opt) }
  loop do
    puts options.map.with_index { |opt, i| "#{i}. #{opt}" }
    selection = gets.chomp
    system "clear" or system "cls"
    if (0..options.length-1).map(&amp;:to_s).include? selection
      return options[selection.to_i]
    else
      selection = options.select { |opt| opt.downcase == selection.downcase }.first
      return selection unless selection.nil?
    end
    puts retry_msg
  end
end
</code></pre>

<p>Side note: Since this would remove your lists throughout, I just wanted 
to add some code style tips in case you decided to leave the list in. 
Here are my comments on the list in your #language method:</p>

<pre><code>def language
  # I would simplify the listing of languages (and make it more extensible)
  # by having an array of languages you support.
  puts "Choose your language:"
  # I've created the array using the %w literal, which creates an array
  # of words split on the spaces.
  languages = %w[Català English Castellano]
  # puts "1. Català"
  # puts "2. English"
  # puts "3. Castellano"
  # And then print them out: (puts automatically adds newlines
  # between the array elements)
  puts languages.map.with_index { |lang, index| "#{index}. #{lang}" } 
  idiom = gets.chomp.to_s
  # Here, you can convert the idiom to lowercase so you don't need
  # to have different capitalizations in your when statements
  case idiom.downcase
  when "1", "català"#, "Català", "CATALÀ"
    system "clear" or system "cls"
    menu_principal_cat
  when "2", "english"#, "English", "ENGLISH"
    system "clear" or system "cls"
    main_menu
  when "3", "castellano"#, "Castellano", "CASTELLANO"
    system "clear" or system "cls"
    menu_principal_cast
  else
    system "clear" or system "cls"
    puts "You have to choose a language in the list."
    puts '-'*53 # You can use multiplication instead of typing the char so many times
    language
  end
end
</code></pre>

<p>Anyways, here's an actual review of your main file:</p>

<pre><code>require 'hirb'
require 'yomu'
require 'fileutils'

require_relative "languages/english/forbidden_list_modify_eng.rb"
require_relative "languages/english/core.rb"

# The addition of the list method means that all this code doesn't need
# to be wrapped in a language method
# def language
  puts "Choose your language:"
  # puts "1. Català"
  # puts "2. English"
  # puts "3. Castellano"
  # idiom = gets.chomp.to_s
  retry_msg  = "You have to choose a language in the list.\n"
  retry_msg += '-'*53
  case list(%w[Català English Castellano], retry_msg: retry_msg)
  when "Català"
    menu_principal_cat
  when "English"
    main_menu
  when "Castellano"
    menu_principal_cast
  end
# end

# language()
</code></pre>

<p>And, for the second file:</p>

<pre><code>def tutorial
  # If this is really long, it might be a good idea to put
  # the contents of the tutorial in a text file and instead
  # use puts File.read("path/to/file")
  puts "The program works like that... (blah blah blah)"
end

def main_menu
  # I've renamed the variable to be forbidden_words (from retrieve_forbidden_words) because the variable is the forbidden words, not the action of retrieving them.
  forbidden_words = File.read('languages/english/english_list.txt')
  english_list = forbidden_words.split("\n")
  # Here we can use the magic list method
  puts "Choose what you want to do by writing its number:"
  # puts "1: Analyze a document."
  # puts "2: Modify the list of forbidden words."
  # puts "3: Help me to use this program."
  # puts "4: Exit the program."
  # main_choice = gets.chomp.to_s
  # case main_choice
  options = []
  options &lt;&lt; 'Analyze a document.'
  options &lt;&lt; 'Modify the list of forbidden words.'
  options &lt;&lt; 'Help me to use this program.'
  options &lt;&lt; 'Exit the program.'
  case list(options)
  when 'Analyze a document.'
    english(english_list)
  when 'Modify the list of forbidden words.'
    modification_menu
  when 'Help me to use this program.'
    tutorial
  when 'Exit the program.'
    exit
  end
end

def english(received_list)
  puts "Drag in here the document you want to analyze:"
  provided_path = gets.chomp.to_s.tr("'", "").rstrip
  execution(provided_path, received_list)
end

def execution (provided_path, forbidden_list)
  data = File.read provided_path
  doc = Yomu.read :text, data

  text_listed = doc.to_s.downcase.gsub(/\p{^Alnum}/, " ").split(" ")
  pruned_text = text_listed - forbidden_list

  frequency = Hash.new 0
  pruned_text.each { |word| frequency[word] += 1 }
  sorted_frequency = Hash[frequency.sort_by{ | word, times | -times }[0..20]]
  toptimes = sorted_frequency.values
  topwords = sorted_frequency.keys

  puts Hirb::Helpers::AutoTable.render(sorted_frequency, headers: {0 =&gt; 'Word', 1 =&gt; 'Times'}, description: false)
  puts "-----------------------------------------------------"
  main_menu

end
</code></pre>

<p>And, the final file:</p>

<pre><code>def remove_words(list_to_remove)
  puts "Write the words you want to remove from the list. If there are more than one, divide them by commas."
  remove_propose = gets.chomp.tr(" ", "").to_s.split(",")
  new_list = list_to_remove - remove_propose

  File.new("languages/english/english_backup.txt", "w")
  File.open("languages/english/english_backup.txt", "w+") do |f|
  f.puts(list_to_remove)
  end

  File.open("languages/english/english_list.txt", "w+") do |f|
  f.puts(new_list)
  end

  puts "The words have been removed. Do you want to see the new list? [Yes/No]"
  showit = gets.chomp.tr(" ", "").to_s
  case showit
  when "Yes", "yes", "Y", "y"
    system "clear" or system "cls"
    print new_list
    puts "-----------------------------------------------------"
    modification_menu
  when "No", "no", "N", "n"
    system "clear" or system "cls"
    modification_menu
  end
end

def add_words(list_to_add)
  puts "Write the words you want to add to the list. If there are more than one, divide them by commas."
  add_propose = gets.chomp.tr(" ", "").to_s.split(",")
  new_list = list_to_add + add_propose

  File.new("languages/english/english_backup.txt", "w")
  File.open("languages/english/english_backup.txt", "w+") do |f|
  f.puts(list_to_add)
  end
  File.open("languages/english/english_list.txt", "w+") do |f|
  f.puts(new_list)
  end

  puts "The words have been added. Do you want to see the new list? [Yes/No]"
  showit = gets.chomp.tr(" ", "").to_s
  case showit
  when "Yes", "yes", "Y", "y"
    system "clear" or system "cls"
    print new_list
    puts "-----------------------------------------------------"
    modification_menu
  when "No", "no", "N", "n"
    puts "-----------------------------------------------------"
    modification_menu
  end
end

def modification_menu
retrieve_forbidden_words = File.read('languages/english/english_list.txt')
original_list = retrieve_forbidden_words.split("\n")

puts "This list contains all the words that are automatically removed from the document you want to analyze. The words in it are widely-used words with no special meaning like connectors or prepositions. However, you can modify the list as you want."
puts "1: Show all the words of the list."
puts "2: Remove words."
puts "3: Add words."
puts "4: Save the new list for other sessions."
puts "5: Return to the main menu."
list_choice = gets.chomp.to_s
case list_choice
when "1"
  system "clear" or system "cls"
  print original_list
  puts ""
  puts "-----------------------------------------------------"
  modification_menu
when "2"
  system "clear" or system "cls"
  remove_words(original_list)
when "3"
  system "clear" or system "cls"
  add_words(original_list)
when "4"
  backup_existence = File.file?('languages/english/english_backup.txt')
  if backup_existence == TRUE
    File.delete('languages/english/english_backup.txt')
    system "clear" or system "cls"
    puts "Changes has been succesfully saved."
    puts "-----------------------------------------------------"
    modification_menu
  end
  if backup_existence == FALSE
    system "clear" or system "cls"
    puts "The list hasn't been modified, so it's nothing to save."
    puts "-----------------------------------------------------"
    modification_menu
  end
when "5"
  system "clear" or system "cls"
  main_menu
else
  system "clear" or system "cls"
  modification_menu
end
end
</code></pre>

<hr>

<p>Side note: My apologies for taking so long to get back to this, I just got busy IRL and couldn't finish.</p>
    </div>