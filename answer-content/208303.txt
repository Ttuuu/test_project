<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I would call the actual String property <code>Value</code> instead of <code>String</code>, it will improve readability.</p>

<hr>

<p>Maybe you want to mark it as <code>serializable</code>?</p>

<hr>

<p>The String property should be immutable: <code>public string Value { get; }</code></p>

<hr>

<blockquote>
<pre><code>public IEnumerator&lt;char&gt; GetEnumerator() =&gt; ((IEnumerable&lt;char&gt;)String?.ToCharArray()).GetEnumerator();  // HH: Why ?.ToCharArray()
</code></pre>
</blockquote>

<p>Why do you call <code>ToCharArray()</code>?</p>

<p>Why not just:</p>

<pre><code>public IEnumerator&lt;char&gt; GetEnumerator() =&gt; String?.GetEnumerator(); 
</code></pre>

<hr>

<blockquote>
<pre><code>protected override string ErrorRequirement =&gt; "contain only alphabetical (a-z) characters";
</code></pre>
</blockquote>

<p>I'm not a fan of this <code>ErrorRequirement</code>. It is IMO only useful when debugging, and it's hard (read: impossible) to localize. A specialized <code>Exception</code> would be better (ex: <code>InvalidEmailFormatException</code>)</p>

<hr>

<p>Here I'm just thinking loud:</p>

<p>Maybe I would not make the <code>base class</code> <code>abstract</code> and inject a validator interface and/or delegate into the constructor in a way like this:</p>

<pre><code>  public interface IStringValidator
  {
    string Validate(string value);
  }

  public class ValidatedString
    : IEnumerable&lt;char&gt; /* etc. */
  {
    public ValidatedString(string value, IStringValidator validator)
    {
      Value = validator.Validate(value);
    }

    public ValidatedString(string value, Func&lt;string, string&gt; validator)
    {
      Value = validator(value);
    }

    public string Value { get; }
    public int Length =&gt; Value.Length;
    public char this[int index] =&gt; Value[index];

    public IEnumerator&lt;char&gt; GetEnumerator()
    {
      return Value?.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
      return GetEnumerator();
    }
  }
</code></pre>

<p>Notice that here it's the responsibility of the derived class to react on invalidity in the validator. It makes it possible for the derived class to make the string value valid before sending it back to base class or throw an exception (dedicated).</p>

<p>In the above, you're still free to derive from it, but also use it more freely in more rare places where a specialized subclass is overkill. </p>

<p>The danger with all these sub classes is that over time you forget about them and invent them once and again.</p>

<hr>

<p>Example of subclass:</p>

<pre><code>  public class EmailValidator : IStringValidator
  {
    public string Validate(string value)
    {

      if (!Regex.IsMatch(value, @"^.+@.+\..+$"))
        throw new ArgumentException("invalid email format");

      return value;
    }
  }


  public class EmailString : ValidatedString
  {
    public EmailString(string value) : base(value, new EmailValidator())
    {

    }

    public static implicit operator EmailString(string email)
    {
      return new EmailString(email);
    }
  }


  SendEmail("email@example.com");

  void SendEmail(EmailString email)
  {
    Console.WriteLine(email);
  }
</code></pre>

<hr>

<p>Just another idea:</p>

<p>You could easily make a generic super class to <code>ValidatedString</code>:</p>

<pre><code>  public abstract class ValidatedValue&lt;TValue&gt;
  {
    public ValidatedValue()
    {

    }

    public ValidatedValue(TValue value)
    {

    }

    protected abstract string ErrorRequirement { get; }
    protected Exception Exception =&gt; new ArgumentException($"The value must {ErrorRequirement}");

    private TValue Validate(TValue value) =&gt; IsValid(value) ? value : throw Exception;

    protected abstract bool IsValid(TValue value);

    public TValue Value { get; }
  }
</code></pre>

<p>And let <code>ValidatedString</code> inherit from that.</p>

<p>That would make it possible to create validated objects from every possible type like <code>DateTime</code>:</p>

<pre><code>  public class HistoryTime : ValidatedValue&lt;DateTime&gt;
  {
    public HistoryTime(DateTime value) : base(value)
    {

    }

    protected override string ErrorRequirement =&gt; "be in the past";

    protected override bool IsValid(DateTime value)
    {
       return value &lt; DateTime.Now;
    }
  }
</code></pre>
    </div>