<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>In your constructor, you can construct <code>_table</code> with just <code>_table(capacity)</code>.</p>

<p>In <code>_expand_and_rehash</code>, you're making copies of vectors you don't need to make.  First, you can move <code>table</code> to <code>temporary</code> using <code>table_t temporary = std::move(table);</code>.  When copying the data to the new table, you're creating copies of the lists.  Use a rerefences in those loop:  <code>for (const bucket_t &amp;bucket : temporary)</code> and <code>for (const pair_t &amp;entry : bucket)</code>.  Then replace <code>new_bucket.push_back</code> with <code>new_bucket.emplace_back</code>, which will avoid another potential copy.</p>

<p>You might be able to defer the check for a rehash which is made in <code>insert</code> to the next insert.  (i.e., check for if a rehash is necessary at the start of <code>insert</code>, rather than at the end.)  The downside is that you wouldn't be able to insert an object already in the HashTable.  Which brings up an important point:  you currently allow duplicates.  If you insert the same thing twice, you'll get two copies of that key in the HashTable.  Is that what you want?  (<code>erase</code> will delete the first one it finds if there is more than one.)</p>

<p>There's no need to check <code>bucket.empty()</code> after your various calls to <code>find_if</code>, since if the bucket is empty the <code>find_if</code> won't find what you're looking for and will return <code>bucket.end()</code> (which you're already checking for).</p>

<p>In <code>insert</code>, you can remove the local <code>value</code> variable, which is unused.  There's no real reason to have <code>key</code> in there, either, since it is only used once.</p>
    </div>