<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Requests makes things easy</h2>

<pre><code>session_base.get(urllib.parse.urljoin(link, "?__a=1"))
</code></pre>

<p>should be</p>

<pre><code>session_base.get(link, params={__a: 1})
</code></pre>

<h2>Exception types</h2>

<pre><code>    raise Exception("[!] Account is private")
</code></pre>

<p>The use of the base <code>Exception</code> should be replaced by a custom exception of yours. They're easy to make, and using them makes it so that upstream code can more meaningfully handle exceptions.</p>

<h2>Some things need to exist</h2>

<p>In these two cases:</p>

<pre><code>            video_url = log_pages.get("node").get("video_url")
            VIDEO.append(video_url)


            image = log_pages.get("node").get("display_url")
            PICTURES.append(image)
</code></pre>

<p>the dictionary value is mandatory, so you shouldn't <code>get</code> it; you should use regular bracket indexing. This will allow failures to be caught earlier, instead of leaking <code>None</code> into your data.</p>

<h2>Nomenclature</h2>

<pre><code>self.HttpBase = requests.Session()
</code></pre>

<p>Member variables should be lower_snake_case, i.e. <code>http_base</code>.</p>

<h2>Don't repeat yourself</h2>

<pre><code>"https://www.instagram.com/{name}/".format(name=self.search_name)
</code></pre>

<p>should be put in a temporary variable.</p>

<h2>Packed-tuple argument?</h2>

<p>This:</p>

<pre><code>def _images_download(self, new_pictures):
    number, link = new_pictures
</code></pre>

<p>is <strike>a little odd</strike> probably necessary due to your use of <code>map</code>, so never mind.</p>

<h2>List creation</h2>

<pre><code>[i for i in enumerate(new_pictures)]
</code></pre>

<p>should just be</p>

<pre><code>list(enumerate(new_pictures))
</code></pre>

<p>but since you are only iterating through it once, don't even materialize it to a list; simply leave it as</p>

<pre><code>picture_data = enumerate(new_pictures)
</code></pre>

<h2>Globals</h2>

<p>These:</p>

<pre><code>LINKS = []
PICTURES = []
VIDEO = []
</code></pre>

<p>are a problem. They're assigned in global scope, and then both written to and read from a class instance. The easy, and vaguely correct, thing to do is to move all of them to members of <code>InstagramPV</code>. <code>fetch_url</code> would then need to either:</p>

<ol>
<li>return new video and picture lists; or</li>
<li>move to being a method on <code>InstagramPV</code> and populate the members there.</li>
</ol>

<p>I think I'd vote for the second, although this is bordering on making an uber-class without meaningful separation. One way to split this up is to make a class for Instagram data (links, pictures, videos) and a class for Instagram scraping (session, authentication, etc.); but I could be convinced that there are other sensible approaches.</p>

<h2>Session use</h2>

<p>Why isn't this:</p>

<pre><code>@staticmethod
def content_of_url(url):
    req = requests.get(url)
    return req.content
</code></pre>

<p>using your session? It's surprising that it does the right thing without a cookie jar.</p>
    </div>