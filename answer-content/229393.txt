<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>

<p>Python comes with an "official" <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">Style Guide for Python Code</a> (often just called PEP8). Among others, it lists conventions regarding function documentation. In Python they're usually called <a href="https://www.python.org/dev/peps/pep-0008/#documentation-strings" rel="nofollow noreferrer">docstrings</a> (further detailed in <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">PEP257</a>) and written in <code>"""triple quotes"""</code> <em>after</em> the function definition with <code>def</code>. For example:</p>

<pre><code>def ewma(self, alpha: float, this: float, last: float) -&gt; float:
    """Calculate single EWMA element

    Calculate EWMA with alpha being the filter coefficient, this the current
    input sample, and last the previous output value
    """
</code></pre>

<p>Of course this is only, if you don't have other conventions to follow. Seems like your code has some kind of doxygen-like syntax, but IIRC doxygen support for Python is not terribly well. If you're looking for a more structured approach that is better supported, <a href="https://numpydoc.readthedocs.io/en/latest/format.html" rel="nofollow noreferrer">numpydoc</a> in conjunction with Sphinx might be an option to consider. The same example using numpydoc:</p>

<pre><code>def ewma(self, alpha: float, this: float, last: float) -&gt; float:
    """Calculate single EWMA element

    Parameters
    ----------
    alpha : float
        filter coefficient
    this : float
        current sample
    last : float
        the previous sample

    Returns
    -------
    ewma_result : float
        the result of the EMWA computation
    """
</code></pre>

<p>This combination is especially used in the "scientific Python stack" (numpy, scipy, ...).</p>

<h1>The code itself</h1>

<p>Use <strike><a href="https://numpy.org/" rel="nofollow noreferrer">numpy</a></strike> (seems like you don't want to AND <a href="https://codereview.stackexchange.com/users/25834/">@Reinderien</a> has beaten me ;-))! It would make your code a lot easier to read, and is also likely faster. But let's focus on what you have already written:</p>

<p>Also you're doing a lot of work repeatedly. Python is a little bit "dumb", i.e. it will happily compute whatever you write (very likely) without realizing that the same computation happened just a few lines ago. An example of this would be <code>(Fs/2*math.pi) in</code>get_cutoff`. Compute it once, put it into a variable and reuse it.</p>

<p>Python also has some tricks up its sleeves that make working with lists a little bit easier, e.g. where you have:</p>

<pre><code>def apply_to_data(self, data: list) -&gt; list:
    output = []
    for d in data:
        output.append(self.calculate(d))
    return output
</code></pre>

<p>You could instead write</p>

<pre><code>def apply_to_data(self, data: list) -&gt; list:
    return [self.calculate(d) for d in data]
</code></pre>

<p>Depending on the actual implementation, list comprehensions <a href="https://stackoverflow.com/a/30245465/5682996">might also be faster than manually appending</a>.</p>

<p>Lists can also be built by "multiplication" which allows you to write something like <code>self.states = [value] * 7</code>.</p>

<p>Using <code>try: ... catch: ...</code> without specifying an exception will likely give you some headache, because it will simply catch all exceptions, including that triggered by pressing Ctrl+C. So you will never know for sure whether the error was something that you expected or not.</p>
    </div>