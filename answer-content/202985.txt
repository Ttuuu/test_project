<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<ol>
<li><p>The code in the post uses the <code>chardet</code> library to determine the encoding of the file, but then the only use it makes of that information is to decide whether or not to try transcoding the file. The detected encoding should also be used to decode the content, using <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow noreferrer"><code>bytes.decode</code></a>:</p>

<pre><code>with open(filename, 'rb') as f:
    content_bytes = f.read()
detected = chardet.detect(content_bytes)
encoding = detected['encoding']
print(f"{filename}: detected as {encoding}.")
content_text = content_bytes.decode(encoding)
with open(filename, 'w', 'utf-8') as f:
    f.write(content_text)
</code></pre>

<p>Notice that in this version the file only needs to be read once.</p></li>
<li><p>There ought to be some check against the confidence value returned by <code>chardet</code>, to reduce the risk of making nonsense out of files where the encoding is detected wrongly. For example, you could have a global constant:</p>

<pre><code>CONFIDENCE_THRESHOLD = 0.8 # minimum confidence to transcode the file
</code></pre>

<p>and then skip files where the detected confidence is below the threshold:</p>

<pre><code>confidence = detected['confidence']
print(f"{filename}: detected as {encoding} with confidence {confidence}.")
if confidence &lt; CONFIDENCE_THRESHOLD:
    print(f"{filename}: skipped.")
    continue
</code></pre></li>
<li><p>Editing a file by reading it and then writing back to the same file is an anti-pattern.</p>

<pre><code>with codecs.open(filename, 'r') as file_for_conversion:
    read_file_for_conversion = file_for_conversion.read()
with codecs.open(filename, 'w', 'utf-8') as converted_file:
    # what if there is an exception here?
    converted_file.write(read_file_for_conversion)
</code></pre>

<p>The problem with this approach is that there might be an exception after the file is opened for writing and before it is closed. For example, the user might type control-C. If this happens, then the content of the file might be lost.</p>

<p>To make the code robust against this risk, you need to write the output to a temporary file, and then rename the temporary file using <a href="https://docs.python.org/3/library/os.html#os.replace" rel="nofollow noreferrer"><code>os.replace</code></a>. The Python documentation guarantees that </p>

<blockquote>
  <p>the renaming will be an atomic operation</p>
</blockquote>

<p>where "atomic" means that it either succeeds completely (meaning that the file is converted) or fails completely (leaving the original file unchanged), with no other possibilities. So what you need is something like this, using <a href="https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile" rel="nofollow noreferrer"><code>tempfile.NamedTemporaryFile</code></a> to create the temporary file:</p>

<pre><code>with open(filename, 'rb') as f:
    content_bytes = f.read()
detected = chardet.detect(content_bytes)
encoding = detected['encoding']
confidence = detected['confidence']
print(f"{filename}: detected as {encoding} with confidence {confidence}.")
if confidence &lt; CONFIDENCE_THRESHOLD:
    print(f"{filename} skipped.")
    continue
content_text = content_bytes.decode(encoding)
with tempfile.NamedTemporaryFile(mode='w', dir=os.path.dirname(filename),
                                 encoding='utf-8', delete=False) as f:
    f.write(content_text)
os.replace(f.name, filename)
</code></pre></li>
</ol>
    </div>