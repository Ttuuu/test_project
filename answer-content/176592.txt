<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Style is always in the eyes of the beholder</h2>

<p>For a lot of cases you will get differing answers, for the problem at hand, parsing a file to produce an instance of a class representing the information there are a lot of different ways some coming down to -taste-. To help deciding between some of them it's always good to look at how it will be used. This review is somewhat affected by how I have done similar things in the past, take it as guidelines and points to think about rather than a categorical 'this is the way it should be done'. </p>

<h2>Missing Unit tests</h2>

<p>Unit tests not only help actually testing your functionality, they will also guide you to a better api by exercising your existing api.</p>

<h2>Exceptions in the constructor</h2>

<p>The way you wrote your constructor makes it hard to use the configparser class, the constructor might throw but there is no accessor to the config data that was parsed with the filename in the constructor. Which means you force the user to do all the processing in the <code>try/catch</code> clause. <em>But</em> if you consider an ill-formed <code>.ini</code> file a unlikely condition that should abort execution (that is a valid point of view), this means you want to see a failure as soon as possible this is a valid pattern. </p>

<pre><code>ConfigParser parser("./config.ini"); // Should be correct, abort when not
// Use parser here ... 
</code></pre>

<p>Otherwise this pattern is necessary </p>

<pre><code>try {
    ConfigParser parser("./config.ini");
    // Use parser here ...
}
catch (std::exception e) {
    // Handle errors
}
// Can't get to parser here ... it's outside of the scope 
// of the try/catch and there is no parser.getConfig() call
// to copy the config in the try part
</code></pre>

<h2>Possible overuse of exceptions</h2>

<p>There are a lot of exceptions that might be thrown from your code, ones that you generate and others that are cause by some of the functions that you call e.g. <code>std::map.at()</code> will except on a key that doesn't exist. Considering how you have to deal with exceptions or what happens when an exception occurs should all of these really be exceptions or just failures or even just return empty results. That is dependent on what you are trying to achieve. For example the wikipedia page for <code>.ini</code> talks about variables outside of the scope of a section, yet you decide to throw an exception when that occurs. I can't say whether it's right or wrong to do that. you need to look at how you, or someone else might use your code and decide whats right or wrong. </p>

<h2>Catch failures of library calls</h2>

<p>Goes a little bit hand in hand with the previous case, you're not catching any of the possible errors of any of the containers and library calls that you make. This will probably produce error messages that might be hard to debug. If you actually do let the program fail report errors in terms of the operation of the program like you do when you create the custom exceptions.</p>

<h2>Wrong abstraction</h2>

<p>You access the configuration through the parser object. I'd like to see access to the configuration through the configuration object. By just using typedef you expose the implementation of parser, none of the public functions in the parser have to do with <strong>parsing</strong> they are all about accessing the configuration, the should be on the configuration object</p>

<h2>Assumptions are ok</h2>

<p>With regard to the note that you posted at the beginning of your post, it is ok to make assumptions, this is code private to the class, if the order that you determine is</p>

<ul>
<li>check for comment</li>
<li>check for section</li>
<li>check for variable </li>
</ul>

<p>Then it is perfectly ok to assume in the following checks that you already checked for a comment. Commenting your code to reflect this is ok. If you have other requirements later on then refactor and improve. </p>

<h2>Prefer <code>struct</code> over <code>std::pair</code></h2>

<p>There are no benefits to using <code>std::pair</code> in your case a struct will be much more readable. <code>.first</code> and <code>.second</code> don't mean anything to the reader of your code. <code>.variableName</code> <code>.value</code> actually do mean something</p>

<h2>Beware of the whitespace</h2>

<p>Handwritten files contain whitespaces in unexpected places, it might be easier for you to just deal with those rather than relying for things to be at the beginning or at the end of lines. e.g. <code>isComment()</code>, <code>isSectionHeading()</code> </p>

<h2>Passing a member variable</h2>

<p>I am not too hot on what you are doing in some of the <code>ConfigParser</code> functions, passing <code>Config&amp; sections</code> which is defacto a member variable of the parser, you might as well operate on the member itself rather than passing it all the time, you use <code>mCurrentSection</code> without passing it ... if you wrote the parser all by using free functions (which you could) then this would be appropriate. </p>

<h2>Alternative Interface</h2>

<p>So this is how I might do this, but remember this is independent of <strong>your</strong> requirements. The parser would use the public interface to write to the config data, using the same api you could set defaults in the code, in cases where there might not be a config file. The parse is started via a free function, the user doesn't even need to see the <code>ConfigParser</code> class. The parser still throws exceptions on read errors, the apropriate level would be up to you. The Config interface lets the parser decide wether to be permissive with duplicated pieces or disallow them. I.e. use <code>hasXXX</code> and throw, or just overwrite, or overwrite and warn rather than fail. You could use the empty section as a catchall for values outside of sections. </p>

<pre><code>Config parseConfigFile(const std::string&amp; filename, const Config&amp; default = Config())
{
    Config result(default);
    try {
        Configparser parser(filename, result);
        result = parser.getConfig();
    }
    catch (std::exception e)
    {
        // Handle errors according to specs
    }
    return result;
}

Config {

    // Sets a variable, will create a section, will create the variable, will overwrite the 
    // current value of the variable
    bool setValue(const std::string&amp; section, const std::string&amp; name, const std::string&amp; value);

    // return true if variable exists
    bool hasValue(const std::string&amp; section, const std::string&amp; name);

    // return value of variable, returns "" if the variable doesn't exist
    std::string getValue(const std::string&amp; section, const std::string&amp; name);

    // alternative... 
    // return false if variable doesn't exist, otherwise return true and write to value
    bool tryGetValue(const std::string&amp; section, const std::string&amp; name, std::string* value);

    // return true if section exists
    bool hasSection(const std::string&amp; section);

    // return list of sections in the configuration
    std::vector&lt;std::string&gt; getSections();
}

class ConfigParser {
public:
    ConfigParser(const std::string&amp; filename, const Config&amp; defaults = Config());
    Config getConfig();
}
</code></pre>
    </div>