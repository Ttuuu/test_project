<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Here are some code comments for you</p>

<p>For your constructor  here are some changes I'd suggest and the reasoning behind them</p>

<pre><code>public transient String activities {get;set;}
public static final String CONTACT = 'Contact';
public MTX_MatrixDetailViewController(){

    String candidateId =  ApexPages.currentPage().getParameters().get('id'); // change this type to an Id not a String.        
    //change to this and delete the filters declaration. Also, check if candidateId is not null.. maybe the id was not passed 
    if (String.isNotBlank(candidateId)){
        List&lt;LightningActivity&gt; actList = LightningActivityAccessor.getLightningActivitiesByType(
            CONTACT, 
            candidateId,  
            new Map&lt;String, String&gt;() , 
            0); 

        //sort activities
        actList = LightningActivityAccessor.sort(actList,'date','DESC');
        activities = JSON.serialize(actList);

    }
}
</code></pre>

<p>Here are some comments on the fetchCandidateDetails. Note, that I'm suggesting a couple of things - error checking and some stylistic stuff. This looks great otherwise!</p>

<pre><code>@AuraEnabled 
public static MTX_MatrixWrapper fetchCandidateDetails(String candidateId, String matrixId){

    // you ought to check to make sure this data is valid. If you're doing this in the caller already, you can disregard.
    if(String.isBlank(candidateId) || String.isBlank(matrixId)){
        throw new MTX_Exception('Insuffinent Canditate Details'); 
    }

    MTX_MatrixWrapper wrapper = new MTX_MatrixWrapper();

    wrapper.candidateRecord = MTX_MatrixAccessor.getCandidatesById(new List&lt;String&gt;{candidateId})[0];

    wrapper.matrixCandidate = MTX_MatrixAccessor.getMatrixCandidatesById(new List&lt;String&gt;{matrixId})[0];

    wrapper.currentMatrix = String.isNotBlank(wrapper.matrixCandidate.Matrix__c) ? 
        MTX_MatrixAccessor.getMatrixById(wrapper.matrixCandidate.Matrix__c) : 
        new MTX_Matrix__c( Name = Label.MTX_Candidates_Shared_with_Me );  // moved to different lines. easier to read

    wrapper.preferredMobile = MTX_MatrixAccessor.getPreferedMobileForCandidate(wrapper.candidateRecord.Master_People__c);

    wrapper.candidates = MTX_MatrixAccessor.getMatrixCandidatesById(new List&lt;String&gt;{matrixId});

   List&lt;Matrix_User_Setting__c&gt; userSettings = MTX_MatrixAccessor.getSettingsForCurrentUser(UserInfo.getUserId());

    wrapper.userSettings = userSettings.isEmpty() == false ? 
        userSettings[0] : 
        MTX_MatrixService.createMatrixUserSetting(UserInfo.getUserId());  // moved to different lines. easier to read

    /*** XEngine ***/
    XEngineUtils.postMatrixCandidatesEvent(wrapper.candidates, XEngineUtils.MTX_CAND_CANDIDATE_DETAILS);
    /*** XEngine ***/

    return wrapper;
} 
</code></pre>

<p>The rest of your code looks good. Your Test code has some concerns. You're running tests for code coverage but you're not asserting anything. Also, you're only testing the happy path from what I gather. </p>

<p>For assertions - assert behavior that you expect to happen for your test set up.</p>

<p>For happy paths, test for other paths - negative, bulk, and boundary...So, for example you have a method <code>getNewMatrixNote(candidateId)</code> and your test case method is <code>gettingnewNote()</code>. What if I had a candidateId that was bad? That's why you need to have negative and boundary tests. </p>
    </div>