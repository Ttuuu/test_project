<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>My initial impression is that this is a really bad way to have threads interacting.  There's no real reason why either thread can't print out the next number.  Assuming this is some kind of learning exercise and putting this issue to the side, I'd introduce a new mutex.</p>

<p>At the moment, both of your threads share a single mutex which means that when one is done processing it unlocks the mutex which results in a thread being released.  The thread released may be the second thread which is already waiting on the mutex, or it could be that the current thread manages to process the rest of the while loop and reacquire the lock.  If you change it so that you have two mutexes, you can have the following pattern:</p>

<blockquote>
  <p>Thread1 - Wait on Mutex 1<br>
  Thread1 - Print Current value (Always Odd)<br>
  Thread1 - Unlock Mutex 2</p>
  
  <p>Thread2 - Wait on Mutex 2<br>
  Thread2 - Print Current Value (Always even)<br>
  Thread2 - Unlock Mutex 1</p>
</blockquote>

<p>This way, by each thread having its own mutex, threads are only ever allowed into the area when they have something to do.</p>
    </div>