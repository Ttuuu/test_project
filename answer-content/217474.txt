<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I think this is a bit overkill. You basically have three requirements, either the user can choose from an iterable of allowed choices, has to enter something that can be interpreted as some specific type or be in some range.</p>

<pre><code>EXIT = {"quit", "exit", "leave"}

def ask_user(message, type_=str, validator=None, invalid="Not valid"):
    if validator is None:
        validator = lambda x: True
    while True:
        user_input = input(message)
        if user_input in EXIT:
            raise SystemExit
        try:
            x = type_(user_input)
            if validator(x):
                return x
            else:
                if isinstance(invalid, Exception):
                    raise invalid
                else:
                    print(invalid)
        except (ValueError, TypeError):
            print("Please pass a", type_)
</code></pre>

<p>Your other functions are just special cases of this, no need to repeat everything:</p>

<pre><code>def get_choice(message, choices):
    if isinstance(choices, dict):
        message += "\n" + "\n".join(f"{k}) {v}" for k, v in choices.items()) + "\n"
    else:
        message += "\n" + "\n".join(choices) + "\n"
        choices = set(choices)
    validator = lambda x: x in choices
    user_input = ask_user(message, validator=validator)
    if isinstance(choices, dict):
        return choices[user_input]
    else:
        return user_input

def get_yes_no(message):
    return get_choice(message, ["yes", "no"])

def get_true_false(message):
    return get_choice(message, ["t", "f"]) == "t"

def get_number(message, start=None, stop=None, data_type=float, invalid=None):
    if start is not None and stop is not None:
        validator = lambda x: start &lt;= x &lt; stop
    elif start is not None:
        validator = lambda x: start &lt;= x
    elif stop is not None:
        validator = lambda x: x &lt; stop
    else:
        validator = None
    if invalid is None:
        invalid = "Please pick a number."
    return ask_user(message, data_type, validator, invalid)

def get_number_in_range(message, start, stop, data_type=int):
    message += f"\n(min = {start}, max = {stop - 1})"
    invalid = f"Please pick a number between {start} and {stop - 1}."
    return get_number(message, start, stop, data_type, invalid)
</code></pre>

<p>Note that Python has an official style-guide, <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP8</a>, which recommends using <code>lower_case</code> for variables and functions and only use <code>PascalCase</code> for classes.</p>

<p>In addition, functions return <code>None</code> by default, you don't need to explicitly return it. (An argument can be made if you have different possible returns and in the case you do reach the end of the function you need it for clarity. But that is not the case here.)</p>

<p>It does not make sense to <code>except</code> an exception and then just re-raise it without doing anything with it. At the minimum you would want to add some more information for the user.</p>

<p>Silently truncating user input from an entered float to an int seems like a bad idea to me.</p>

<p>Your tests read a bit like reverse polish notation, there is no harm done if you save the result of the user input in a variable first.</p>

<p>In Python 3.6, a new way to format strings was introduced, the <code>f-string</code>. But even before you did not need the positional index in <code>str.format</code>, by default it will align to the order of the passed input.</p>

<pre><code>def _demonstrate_get_number():
    print("""
    Demonstration of get_number and get_number_in_range
    """)

    user_input = get_number("Step right up and pick a number, any number!")
    print(f"Returns {user_input}\n")

    user_input = get_number("Only integers this time. Pick any integer!", data_type=int)
    print(f"Returns {user_input}\n")

    user_input = get_number_in_range("Now only an integer in the range below!", 1, 11)
    print(f"Returns {user_input}\n")

    user_input = get_number("Now pick a float! (root beer not allowed)")
    print(f"Returns {user_input}\n")

    user_input = get_number_in_range("And finally, a float in the given range:",
                                     1, 51, data_type=float)
    print(f"Returns {user_input}\n")


def _demonstrate_get_string_choice():
    print("""
    Demonstration of get_choice()
    """)

    user_input = get_choice("What does your mother smell of?", ["elderberries", "hamster"])
    print(f"Returns {user_input}\n")

    user_input = get_choice("MCU or DCEU?", {"m": "MCU", "d": "DCEU"})
    print(f"Returns {user_input}\n")

    user_input = get_yes_no("That was just a little humor. Did you enjoy it?")
    print(f"Returns {user_input}\n")

    user_input = get_true_false("Is it true that an African swallow could carry a coconut?")
    print(f"Returns {user_input}\n")

if __name__ == "__main__":
    _demonstrate_get_number()
    _demonstrate_get_string_choice()
</code></pre>
    </div>