<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>I've collected a few thoughts about possible refactors you could consider below.</p>

<h3>Your <code>if</code> chain isn't the most efficient way</h3>

<p>As you've written it, your code will only work for titles between one and four words long. This isn't a disaster, and it will probably work for most titles, but we can rewrite your code to be shorter <em>and</em> handle any length of title. A win-win!</p>

<ul>
<li><p>We can use Iterator::skip() to throw away the executable name, as we don't care about it anyway. See <a href="https://doc.rust-lang.org/core/iter/trait.Iterator.html#method.skip" rel="nofollow noreferrer"><code>skip()</code></a> in the documentation.</p>

<pre><code>let args: Vec&lt;String&gt; = env::args().skip(1).collect();
</code></pre></li>
<li><p>It'd be a good idea to check that we've been given enough arguments before continuing.</p>

<pre><code>let arg_len: usize = args.len();
if arg_len &lt; 2 {
    panic!("At least two arguments must be supplied!");
}
</code></pre></li>
<li><p>Now, we can be a bit clever and avoid your <code>if</code> chain all together. Using a <a href="https://doc.rust-lang.org/std/ops/struct.Range.html" rel="nofollow noreferrer">range</a> we can get a <a href="https://doc.rust-lang.org/std/primitive.slice.html" rel="nofollow noreferrer">slice</a> of our <code>args</code> vector corresponding to all but the last element. We can then use <a href="https://doc.rust-lang.org/std/slice/trait.SliceConcatExt.html#tymethod.join" rel="nofollow noreferrer"><code>join()</code></a> to turn that slice back into a <code>String</code>. For example, if we started with <code>vec!["Song", "of", "Solomon", "2:2-4"]</code> in <code>args</code>, we would take a slice to get <code>["Song", "of", "Solomon"]</code> and rejoin them with <code>" "</code> in the middle to get <code>"Song of Solomon"</code>.</p>

<pre><code>let book = args[0..(arg_len - 1)].join(" ");
</code></pre></li>
</ul>

<h3>Try to avoid <code>clone()</code> unless necessary</h3>

<p>The first thing I noticed when I took a look at your code was that you've used <code>clone()</code> in quite a few places. We've already got rid of a lot of them with the tweak above, and you should try to avoid them all together as allocating when you don't need to is a waste of time and memory. If you <em>can</em> use an <code>&amp;str</code>, do that instead of insisting on all strings being <code>String</code>. As an aside, there is rarely any point bothering with <code>&amp;String</code> â€” just use <code>&amp;str</code> there.</p>

<ul>
<li><p>Putting the above into action, we can let <code>reference</code> be an <code>&amp;str</code> and avoid a clone.</p>

<pre><code>let reference: &amp;str = &amp;args[args.len() - 1];
</code></pre></li>
<li><p>Let's also change <code>get_book</code>'s method signature as suggested above.</p>

<pre><code>fn get_file(book: &amp;str) -&gt; &amp;str {
</code></pre></li>
<li><p>Now we can get rid of the unnecessary <code>to_string()</code> below.</p>

<pre><code>books_to_files.get::&lt;str&gt;(&amp;book.to_string()).unwrap()
</code></pre></li>
<li><p>And tweak this line in <code>main()</code> to accept an <code>&amp;str</code>.</p>

<pre><code>let file: &amp;str = get_file(&amp;book);
</code></pre></li>
</ul>

<h3>Avoiding unwrap</h3>

<p>Ideally, <code>get_book</code> ought to return an <code>Option</code> instead, so the caller can choose how they want to handle the error. As it is fatal anyway, unwrapping makes little difference, but it's worth bearing in mind as a future improvement.</p>

<h3><a href="https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6465127c91bfaca0daf0bfbaf322336c" rel="nofollow noreferrer">Try it Online</a></h3>
    </div>