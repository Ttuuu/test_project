<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Random item from array</h2>

<p>You don't need the for loop to select a random item from an array.</p>

<p>Just get an index using <code>Math.floor(Math.random() * array.length)</code></p>

<pre><code>function getRandomQuote(array) {
    return array[Math.floor(Math.random() * array.length)];
}
</code></pre>

<p>Or as an arrow function, and you don't need the <code>get</code> part of the function name that is implied.</p>

<pre><code>const randomQuote = array =&gt; array[Math.floor(Math.random() * array.length)];
</code></pre>

<p>You can also use bitwise or zero <code>| 0</code> in place of the <code>Math.floor</code> function</p>

<pre><code>const randomQuote = array =&gt; array[Math.random() * array.length | 0];
</code></pre>

<h2>Random pick from array</h2>

<p>If you wish to ensure each quote is randomly selected and not repeating until all have been randomly selected you can create a copy of the array, and pick items from that using <code>Array.splice</code> until empty, then copy the source array again.</p>

<p>For example the function encapsulates <code>array</code> and <code>source</code> You must first call the function with an array, then any other calls will return a random item that does not repeat until all items have been picked.</p>

<pre><code>const randomQuote = (() =&gt; {
    const picked = []; // to hold picked items
    var source;   // array of items to pick from 
    return srcArray =&gt; {
        if (srcArray) {
            source = srcArray;
            picked.length = 0;
        } else {
            if (!picked.length) { picked.push(...source) }
            return picked.splice(Math.random() * picked.length | 0, 1)[0];
        }
    }
})();

randomQuote(["a","b","c","d","e","f"]); // set up the source array
console.log(randomQuote()); // display random quote in console.
</code></pre>

<p>At any time you can reset the source array by calling the function with an array.</p>

<h2>Random and the array, common functions</h2>

<p>Here is a set of common functions that use random to access arrays. Rather than have functions rely on each other, each function is written to be entirely stand alone. If you use many of them it will pay to encapsulate them all in an object.</p>

<pre><code>const randItem = arr =&gt; arr[Math.random() * arr.length | 0];
const randPick = arr =&gt; arr.splice(Math.random() * arr.length | 0, 1)[0];
const randPut = (arr, item) =&gt; arr.splice(Math.random() * (arr.length + 1) | 0, 0, item);
const randShuffle = arr =&gt; { 
    var len = arr.length
    while (len) { 
        arr.push(arr.splice(Math.random() * (len--) | 0, 1)[0]); 
    }
    return arr;
}   
const randPlay = (arr, repeat) {
    var item;
    repeat = repeat &gt; arr.length ? arr.length : repeat
    arr.push(item = arr.splice(Math.random() * repeat | 0, 1)[0]);
    return item;
}
</code></pre>

<p>What they do.   </p>

<ul>
<li><code>randItem(array)</code>  return a random item but does not remove it</li>
<li><code>randPick(array)</code>  returns a random item removing it from the array</li>
<li><code>randPut(array, item)</code> randomly inserts the item into the array</li>
<li><code>randShuffle(array)</code> Shuffles the array in place (does not make a copy)</li>
<li><code>randPlay(array, number)</code> A variation on the no repeat, selects random items from the bottom <code>number</code> items. Good for play lists when you dont want to repeat the same track. Use with <code>randShuffle</code> on the array before you call <code>randPlay</code>. The same item will not play again until another <code>array.length - number</code> items have played.</li>
</ul>
    </div>