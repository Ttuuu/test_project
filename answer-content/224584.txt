<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Data Corruption</h2>

<p>Your class is not thread-safe. Using the <em>volatile</em> keyword could cause data corruption because of this. Without this keyword, optimizations might occur that read the field only once in a given scope.</p>

<p>Let's have a look at <code>Dequeue</code>. The <code>_headNode</code> is read 3 times into memory, since it's volatile. What if <code>_headNode</code> is not null the 1st read, but gets nullified by another thread before the 2nd read? Exactly, you'll get a <code>NullReferenceException</code> on <code>_headNode.GetValue();</code> Remove the volatile keyword and gain performance. Your implementation isn't thread-safe anyway.</p>

<blockquote>
<pre><code>public T Dequeue()
{
    // atomic read of _headNode 
    if(_headNode == null)
    {
        throw new QueueEmptyException();
    }

    // atomic read of _headNode
    T value = _headNode.GetValue();

    // atomic read of _headNode
    _headNode = _headNode.GetNextNode();

    _length--;

    return value;
}
</code></pre>
</blockquote>

<h2>Collection Compliance</h2>

<p>You have provided a custom property <code>Length</code>. It's better to implement <code>ICollection&lt;T&gt;</code> and provide <code>Count</code>. This way, your class is way more reusable.</p>
    </div>