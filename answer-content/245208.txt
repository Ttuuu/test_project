<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Style</h1>
<p>We all have our own 'what is the best' style. However even if you do something that others don't agree with, if you're consistent about it then that's all that matters.</p>
<p><a href="https://i.stack.imgur.com/PjYlh.png" rel="noreferrer"><img src="https://i.stack.imgur.com/PjYlh.png" alt=""></a></p>
<p>From here you have some inconsistencies in your code.</p>
<ul>
<li><p>Indent style. You don't have a fixed style, and you've mixed two styles together to make something I think both sides can agree is not right.</p>
<ul>
<li><p>With opening delimiter:</p>
<blockquote>
<pre class="lang-py prettyprint-override"><code>return [lst + [x] for x in·
        range(lst[-1]+1, length)]
</code></pre>
</blockquote>
</li>
<li><p>Hanging indent:</p>
<blockquote>
<pre class="lang-py prettyprint-override"><code>result = [
    ''.join(symbols[s] for s in el)
    for el in result
]
</code></pre>
</blockquote>
</li>
<li><p>Both:</p>
<blockquote>
<pre class="lang-py prettyprint-override"><code>result = [ item for sublist in result
    for item in sublist
]
</code></pre>
</blockquote>
</li>
</ul>
</li>
<li><p>You're not consistent in your newlines in comprehensions.</p>
<ul>
<li><p>Item and <code>for _ in</code> on first line:</p>
<blockquote>
<pre class="lang-py prettyprint-override"><code>return [lst + [x] for x in·
        range(lst[-1]+1, length)]
</code></pre>
</blockquote>
</li>
<li><p>Item and entire <code>for _ in ...</code> on first line:</p>
<blockquote>
<pre class="lang-py prettyprint-override"><code>result = [ item for sublist in result
    for item in sublist
]
</code></pre>
</blockquote>
</li>
<li><p>Item on first line:</p>
<blockquote>
<pre class="lang-py prettyprint-override"><code>result = [
    ''.join(symbols[s] for s in el)
    for el in result
]
</code></pre>
</blockquote>
</li>
</ul>
</li>
</ul>
<p>We can fix these by just having a consistent style.</p>
<pre class="lang-py prettyprint-override"><code>return [
    lst + [x]
    for x in range(lst[-1]+1, length)
]
</code></pre>
<pre class="lang-py prettyprint-override"><code>result = [
    item
    for sublist in result
    for item in sublist
]
</code></pre>
<pre class="lang-py prettyprint-override"><code>result = [
    ''.join(symbols[s] for s in el)
    for el in result
]
</code></pre>
<h1>Improvements</h1>
<ul>
<li><p>Your last two comprehensions that build <em>two</em> lists are wasteful when you can just merge the comprehensions together. This will also improve readability.</p>
<pre class="lang-py prettyprint-override"><code>return [
    ''.join(symbols[s] for s in item)
    for sublist in result
    for item in sublist
]
</code></pre>
</li>
<li><p>Your code is not very readable. I can't tell that you're effectively calling <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="noreferrer"><code>itertools.combinations</code></a> <code>len(symbols)</code> times.</p>
<p>Whilst combinatorics are not very pleasant to read, your code doesn't show the most basic part clearly.</p>
<pre class="lang-py prettyprint-override"><code>def solution(symbols):
    for i in range(1, 1 + len(symbols)):
        yield from itertools.combinations(symbols, i)
</code></pre>
</li>
</ul>
<h1>Overall</h1>
<p>You should get a consistent style and your code has some improvements to be made.
However your code is pretty good on the combinations front.
The <code>range</code> aspect is smart, maybe too smart, but if you used a docstring to explain the input and output then the implementation details can be guessed at fairly easily from your code.</p>
    </div>