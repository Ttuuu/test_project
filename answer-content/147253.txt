<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Dec. 10, 2018</p>

<p>The simple answer is to use a 2-d segment tree.</p>

<hr>

<p>Given that we have low value for dimension (i.e. two), an appropriate approach would be to use a 2-d segment tree. We use what is known as stabbing query or intersection query. Let list one be the list that is smaller. Store all rectangles from list one in such a tree. Query using rectangles from list two. Time to construct and query are <span class="math-container">\$O(n_1 \cdot \log^2(n_1))\$</span> and <span class="math-container">\$O(\log^2(n_1) \cdot k)\$</span>, respectively, s.t. <span class="math-container">\$k\$</span> is number of matches to report. If we use fractional cascading and interval tree, times become <span class="math-container">\$O(n_1 \cdot \log(n_1))\$</span> and <span class="math-container">\$O(\log(n_1) \cdot k)\$</span>, respectively. Assuming these better times, time for all queries is <span class="math-container">\$O(\textrm{max}(n_2, k_\textrm{overall}) \cdot \log(n_1))\$</span>. Overall time becomes <span class="math-container">\$O((\textrm{max}(n_2, k_\textrm{overall}) + n_1) \cdot \log(n_1))\$</span>. Given that <span class="math-container">\$k_\textrm{overall}\$</span> is in <span class="math-container">\$O(n_1 \cdot n_2)\$</span>, time could be loosely <span class="math-container">\$O((n_1 \cdot n_2) \cdot \log(n_1))\$</span>.</p>

<p>If rectangles are not axis-aligned, one might wish to have bounding boxes and then use a tree. In principle we then could use a segment tree again, but a natural alternative (though we usually do not have good guaranteed theoretical running time for it unless we use "look-ahead") could be an R-tree.</p>
    </div>