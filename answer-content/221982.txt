<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have some good answers already. My criticism comes from one word. "printf".</p>

<p>The problem for fault-finding is not just knowing what each part has reported, but also knowing in what order they happened. Any practical logging library is going to hit threads sooner or later, and at that point things go wrong.</p>

<p>For starters, we need to think about thread-safe printing. The behaviour of printf when called from two threads simultaneously is not defined, but typically you'll find one interrupts the other mid-print to print its own text, then the next one finishes. The result is not very readable.</p>

<p>And we also need to think about "Heisenbugs" where the test code changes the behaviour of the system so that your fault-finding is invalidated. printf is relatively slow, so by the time it's done, a second thread whose interaction caused the bug you're investigating would be in a completely different state.</p>

<p>And lastly, you might want your logging to in several different directions. Perhaps you want normal level messages to go to the screen, verbose to go to the main log file, and critical messages to go to a secure registry. You can't do that here.</p>

<p>I've built a logging library myself to sort these problems. (This was a few years ago, when the libraries available were less good.) There were several key features:-</p>

<ul>
<li>The function logging an error in a thread stored the log details.</li>
<li>The function then passed that atomically to a singleton log store which pushed the log details into a FIFO. (Actually a FIFO of pointers, because you don't want to waste time copying stuff.)</li>
<li>At regular intervals and at low priority, the log store popped a batch of FIFO entries and sent them to one or more registered log printers.</li>
<li>Each log printer had options for setting log levels it was interested in.Running in separate threads and again at low priority, each dumped details of those logs it was interested in to its chosen destination.</li>
</ul>

<p>So it became quite a complex structure, and the output side needed to be much more heavyweight, but the result was to make logging during execution almost unnoticeable. This allowed us to use our logging to accurately fault-find issues happening between threads in an application controlling hardware, databases, user interface, files, etc..</p>
    </div>