<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<pre><code>tup = input()[1:-1].split(',')
</code></pre>

<p>It's really bad style to require interactive input without the slightest hint about the expected format.</p>

<pre><code>x = input('Enter mapping to generate valid Sudoku eg. 3 for 9 x 9')
e = input('Enter 9 for 9 x 9 ...12 for 12 x 12')
f = input('Enter 3 if its a 9 x 9 and corresponding for n^2 x n^2')
</code></pre>

<p>These variable names are horrible. Do not use single-letter variable names unless you are using the exact names as they appear in a mathematical paper. And in that case, always provide a comment that links to the paper.</p>

<ul>
<li>Why and how did you choose the variable name <code>x</code>?</li>
<li>Why and how did you choose the variable name <code>e</code>?</li>
<li>Why and how did you choose the variable name <code>e</code>?</li>
<li>What is the difference between <code>x</code> and <code>f</code>? For a 9×9 sudoku, both should be 3.</li>
<li>Why do you make the user of the program enter the value anyway? If there's only one valid value, there is no reason to annoy the user with unnecessary questions.</li>
</ul>

<p>Continuing with your code:</p>

<pre><code>x = int(x)
e = int(e)
f = int(f)

squares = []

for index in range(len(tup)):
  tup.append(tup.pop(0))
  squares.append(tup.copy())
</code></pre>

<p>It's unexpected that the code modifies <code>tup</code> here. The code can be written in an alternative form that doesn't modify <code>tup</code>:</p>

<pre><code>for i in range(len(tup)):
    squares.append(tup[i:] + tup[:i])
</code></pre>

<p>To give the readers of the code some hints about the structure, you should define separate functions for the different tasks. In this case, these are:</p>

<ul>
<li>reading the parameters from the input</li>
<li>generating the square</li>
<li>printing the square</li>
</ul>

<p>By doing this, it becomes immediately clear which parameters are needed for generating the square, and which parameters are only needed for printing it. For example:</p>

<pre><code>def generate_square(symbols):
    square = []
    for i in range(len(symbols)):
        square.append(symbols[i:] + symbols[:i])
    return square
</code></pre>

<p>Or, a little shorter:</p>

<pre><code>def generate_square(symbols):
    return [symbols[i:] + symbols[:i] for i in range(len(symbols))]
</code></pre>

<p>I did a test run of your program:</p>

<pre><code>1,2,3,4,5,6,7,8,9
Enter mapping to generate valid Sudoku eg. 3 for 9 x 93
Enter 9 for 9 x 9 ...12 for 12 x 1211
Enter 3 if its a 9 x 9 and corresponding for n^2 x n^23
2345678Traceback (most recent call last):
  File "a.py", line 28, in &lt;module&gt;
    main()
  File "a.py", line 24, in main
    print(squares[si][li], end = '')
IndexError: list index out of range
</code></pre>

<p>Doing that I noticed:</p>

<ul>
<li>if I hadn't read the code before, I would not know what to type in the first line</li>
<li>in the second line, in <code>9 x 93</code>, it is not clearly visible what is the prompt and what is the input. The prompt should end with <code>3 for 9 x 9:</code>.</li>
<li>there is no input validation. As I said before, if there is only one valid input, the program should not ask for it.</li>
<li>because of the missing input validation, the program crashes.</li>
</ul>

<p>Next test run:</p>

<pre><code>1,2,3,4,5,6,7,8,9
Enter mapping to generate valid Sudoku eg. 3 for 9 x 93
Enter 9 for 9 x 9 ...12 for 12 x 129
Enter 3 if its a 9 x 9 and corresponding for n^2 x n^23
2345678
5678234
8234567
3456782
6782345
2345678
4567823
7823456
2345678
</code></pre>

<p>The program outputs 7×9 digits. That's not a sudoku. There is a bug in the printing part.  This bug is so obvious that it makes your question off-topic on this site. This site is only for code that is regarded as working.</p>
    </div>