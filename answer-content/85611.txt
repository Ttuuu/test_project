<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Try this simple one.</p>

<pre><code>var input="abcde";
var len=input.length;
var str = "";
var p=Math.pow(2,len);
var twoPower;
for(i = 0; i &lt; p; i++) 
{
    twoPower=p;
    for(j=0;j&lt;len;j++)
    {
        twoPower=twoPower/2;
        str+= (i &amp; twoPower ? input.charAt(j) : "");
    }
    str+="\n";
}
alert(str);
</code></pre>

<p>It's working method is so simple. 
What would you do if you have to find all binary numbers for a given a bit length?
Yes the 8 4 2 1 method.
if bit length is 3 then possible numbers are</p>

<h2>4 2 1</h2>

<p>0 0 0<br>
0 0 1<br>
0 1 0<br>
0 1 1<br>
1 0 0<br>
1 0 1<br>
1 1 0<br>
1 1 1       </p>

<p>These are the 8 possible values.
The same method is used here but for 1's here is a character and for 0's nothing. So, number of possible combinations is (2^n)-1.</p>
    </div>