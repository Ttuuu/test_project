<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>Avoid repeating yourself</h1>
<p>I see a few cases where you can avoid repeating type names. For example:</p>
<pre><code>I iter = I{};
</code></pre>
<p>This can be written as:</p>
<pre><code>I iter{};
</code></pre>
<p>And:</p>
<pre><code>Base64DecodeIterator operator++(int) {Base64DecodeIterator result(this); ++(*this); return result;}
</code></pre>
<p>Can be written as:</p>
<pre><code>Base64DecodeIterator operator++(int) {auto result{*this}; ++(*this); return result;}
</code></pre>
<h1>Avoid writing multiple statements on one line</h1>
<p>Since it is so customary in C and C++ to write one statement per line, when you combine multiple statements on one line, especially without whitespace between the statements, it can be confusing. Just split multi-statement one-liners into multiple lines, like:</p>
<pre><code>Base64DecodeIterator operator++(int) {
    auto result{*this};
    ++(*this);
    return result;
}
</code></pre>
<h1>Consider supporting different input and output types</h1>
<p>Consider a situation where you have a blob of binary data, to which you have a <code>char *</code> or <code>uint8_t *</code>, but you need to the base64-encoded string to use <code>wchar_t</code>. You could support this relatively easy by adding another template parameter to describe the output type, like so:</p>
<pre><code>template&lt;typename I, typename CharT = char&gt;
class Base64EncodeIterator
{
     ...
     using value_type = CharT;
     using pointer = CharT*;
     using reference = CharT&amp;;
     ...
     CharT operator*()
     {
         ...
     }
};
</code></pre>
<p>You would make the same change for <code>Base64DecodeIterator</code>. The <code>make_*</code> functions can look like:</p>
<pre><code>template&lt;typename CharT = char, typename I&gt;
Base64DecodeIterator&lt;I, CharT&gt; make_encode64(I iter)
{
    return Base64EncodeIterator&lt;I, CharT&gt;(iter);
}
</code></pre>
<p>Then you could use it like so:</p>
<pre><code>std::vector&lt;uint8_t&gt; original(...);

std::wstring message(make_encode64&lt;wchar_t&gt;(std::begin(original)), 
                     make_encode64&lt;wchar_t&gt;(std::end(original)));

std::vector&lt;uint8_t&gt; recovered(make_decode64&lt;uint8_t&gt;(std::begin(message)),
                               make_decode64&lt;uint8_t&gt;(std::end(message)));
</code></pre>
<h1>Consider <code>I::value_type</code> not being an 8 bit integer type during encoding</h1>
<p>Your code will accept the following:</p>
<pre><code>std::vector&lt;float&gt; data{1.1, 42, 9.9e99};
make_encode64(data.begin());
</code></pre>
<p>But what this will do is cast each element of the vector to an <code>unsigned char</code> before encoding it. That is not what you would expect. Use SFINAE or Concepts to limit the allowed iterators to those that have a <code>value_type</code> that is an 8-bit integer type.</p>
<p>When encoding you have the same problem if you allow the output type to be specified as mentioned in the previous point.</p>
<h1>Making it work with ranges</h1>
<p>The problem is that your classes do not implement a <a href="https://en.cppreference.com/w/cpp/ranges/range" rel="nofollow noreferrer"><code>std::ranges::range</code></a>. So you would need to introduce some class that provides both the begin and end iterator. But that could be as simple as:</p>
<pre><code>template&lt;typename I&gt;
class Base64Decoder {
    Base64DecodeIterator begin_it;
    Base64DecodeIterator end_it;

public:
    Base64Decoder(const I &amp;begin, const I &amp;end): begin_it(begin), end_it(end) {}

    template&lt;typename T&gt;
    Base64Decoder(T &amp;container): begin_it(std::begin(container)), end_it(std::end(container)) {}

    auto&amp; begin() {
        return begin_it;
    }
 
    auto&amp; end() {
        return end_it;
    }
};
</code></pre>
<p>And then you could write:</p>
<pre><code>std::string input = "SGVsbG8sIHdvcmxkIQo=";
Base64Decoder decoder(input);
for (auto c: input | std::ranges::views::take(5))
    std::cout &lt;&lt; c;
std::cout &lt;&lt; '\n';
</code></pre>
    </div>