<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h3>General comments:</h3>

<p>You are basically using the <code>groups</code> dict like a list.  Might as well just use a list.</p>

<p>An empty data structure (list, dict, set, tuple) is False in a boolean context, so <code>while len(points) &gt; 1:</code> can be simplified to <code>while points:</code></p>

<p>It is generally slower to pop from the front of a list than the back of a list, because after removing the first item all the rest of the items get moved up one spot.</p>

<p><code>points.pop()</code> actually changes the list passed in.  Make sure that's what you want.</p>

<p><code>filter(None, points)</code> filters out all "False" items.</p>

<p><code>[ ... ]</code> creates a list.  So, <code>list( [ ... ] )</code> is redundant.</p>

<p>You can just use <code>x1, y1 = ref</code>.</p>

<p>Put that all together and you get something like:</p>

<pre><code>def group_points(points):
    groups = []
    while points:
        far_points = []
        ref = points.pop()
        groups.append([ref])
        for point in points:
            d = get_distance(ref, point)
            if d &lt; 30:
                groups[-1].append(point)
            else:
                far_points.append(point)

        points = far_points

    # perform average operation on each group
    return [list(np.mean(x, axis=1).astype(int)) for x in groups]

def get_distance(ref, point):
    # print('ref: {} , point: {}'.format(ref, point))
    x1, y1 = ref
    x2, y2 = point
    return math.hypot(x2 - x1, y2 - y1)
</code></pre>

<p>You also might want to look at functions in <code>scipy.cluster</code>.</p>
    </div>