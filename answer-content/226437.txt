<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>You have difficulties getting rid of the repeated code because you're trying to force two different operations into one:</p>

<ul>
<li>parsing html</li>
<li>converting the result into <code>OLE</code> color</li>
</ul>

<p>Start with extracting the default value and make it a field:</p>

<pre><code>static readonly Color DefaultColor = Color.FromArgb(224, 224, 224);
</code></pre>

<p>Then create the main API and give it a name that clearly communicates that it does. Now that the parsing has been extrated, you can as simple ternary operators here:</p>

<pre><code>public Color ParseHtmlColorOrDefault(string value, Color defaultColor)
{   
    return     
        !string.IsNullOrWhiteSpace(value) &amp;&amp; TryParseHtmlColor(value, out var color)
            ? color
            : defaultColor;
}
</code></pre>

<p>The parsing with its <code>try/catch</code> as the <code>TrySomething</code> pattern:</p>

<pre><code>private static bool TryParseHtmlColor(string value, out Color color)
{
    try
    {           
        color = ColorTranslator.FromHtml(value);
        return true;
    }
    catch
    {
        color = Color.Empty;
        return false;
    }
}
</code></pre>

<p>Finally, create an extension for the final step of converting <code>Color</code> to <code>OLE</code> color:</p>

<pre><code>public static int ToOle(this Color color) =&gt; ColorTranslator.ToOle(color);
</code></pre>

<p>Use it like that:</p>

<pre><code>var oleColor = ParseHtmlColorOrDefault("#FFAABB", DefaultColor).ToOle();
</code></pre>
    </div>