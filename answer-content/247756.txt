<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h2>Comments</h2>
<p>While the code is mostly simple to follow, it would be good to add comments to document what decisions you made. Even if you are the only one maintaining this code your future self might not remember what considerations you had in the past. At least document the input, output and purpose of functions. Some style guides call for comments to be in certain formats - e.g. <a href="https://google.github.io/styleguide/jsguide.html#jsdoc" rel="nofollow noreferrer">JSDoc in Google style guide</a>.</p>
<h2>Nesting Levels</h2>
<p>The nesting levels gets a bit deep towards the end of logon.js- some might describe it a bit as “callback hell”. <a href="http://callbackhell.com/" rel="nofollow noreferrer">callbackhell.com</a> has some good tips for keeping code shallow- like naming anonymous functions so they can be moved out (also may allow for use in unit and/or feature tests), modularize (which is already done somewhat with logon.js), etc.</p>
<h2>Variable name format</h2>
<p>It would be best to use consistent formatting of variable names. I have worked on a PHP codebase that makes quite extensive use of hungarian notation but I am not fond of it and I haven't seen it used very often with JavaScript code. I happened to recently see <a href="https://stackoverflow.com/q/111933/1575353">this Stack Overflow question about Hungarian notation</a> and while it is marked as off-topic it does have many answers. The top voted answer contains a link to an article by Joel Spolsky, CEO and co-founder of Stack Overflow: <a href="http://www.joelonsoftware.com/articles/Wrong.html" rel="nofollow noreferrer"><em>Making Wrong Code Look Wrong</em></a>. I know realize that much of the code throughout that codebase is “Systems Hungarian”.</p>
<p>It appears there are two variables named using Hungarian notation (i.e. <code>oSrv</code> and <code>oSrvCli</code>) while most all other variables are all lowercase or camelCase. There seems to be one other outlier: <code>durl</code>- which seems to be the discovery URL. One could name that as <code>discoveryURL</code>, or take the server URL/host name out of it and make it a real constant - e.g. <code>const DISCOVERY_PATH = '/.well-known/openid-configuration';</code> , which can be appended to <code>process.env.srvurl</code> when used.</p>
<h2>Async functions</h2>
<p>As was mentioned in a comment, the <code>async</code> keyword has likely been applied to more functions that necessary. For example, only functions that contain the <code>await</code> keyword need to be declared as asynchronous- e.g. the function assigned to <code>module.exports</code>, the callback to <code>req.login()</code>).</p>
<h2>Error handling</h2>
<blockquote>
<p>By default, if authentication fails, Passport will respond with a 401 Unauthorized status, and any additional route handlers will not be invoked.<sup><a href="http://www.passportjs.org/docs/authenticate/" rel="nofollow noreferrer">1</a></sup></p>
</blockquote>
<blockquote>
<pre><code>passport.authenticate('oidc', async (err, user) =&gt; {
    if (err) {
        console.log(`Authentication failed: ${err}`);
        return next(err);
    }
</code></pre>
</blockquote>
<p>This error handling seems fine. Would it be helpful to log the <code>user</code> object in the callback to the call to <code>passport.authenticate()</code>? If so, consider sanitizing any sensitive information that may be attached. You could also consider an error logging service.</p>
<p>It appears your code follows the <em>Custom Callback</em> option for <a href="http://www.passportjs.org/docs/authenticate/" rel="nofollow noreferrer"><code>passport.authenticate()</code></a>. The sample under that section <strong>Custom Callback</strong> checks for <code>err</code> and when it is anything other than <code>false</code>-y it will return <code>next(err)</code></p>
<blockquote>
<p>If the built-in options are not sufficient for handling an authentication request, a custom callback can be provided to allow the application to handle success or failure.</p>
</blockquote>
<blockquote>
<pre><code>app.get('/login', function(req, res, next) {
  passport.authenticate('local', function(err, user, info) {
    if (err) { return next(err); }
</code></pre>
</blockquote>
<blockquote>
<p>If authentication failed, <code>user</code> will be set to false. If an exception occurred, <code>err</code> will be set. An optional <code>info</code> argument will be passed, containing additional details provided by the strategy's verify callback.</p>
</blockquote>
<p>It may be useful for you to read other reviews about <a href="https://codereview.stackexchange.com/search?tab=votes&amp;q=%5bnode.js%5d%20%20passport">nodeJS and passport</a> as well as <a href="https://codereview.stackexchange.com/questions/tagged/node.js+error-handling?tab=Votes">nodeJS and error-handling</a>. The posts below might also be helpful:</p>
<ul>
<li><a href="https://stackoverflow.com/q/15711127/1575353">Express Passport (node.js) error handling</a></li>
<li><a href="https://stackoverflow.com/q/35452844/1575353">How to show custom error messages using passport and express</a></li>
</ul>
<h2>Promisifying <code>passport.authenticate()</code></h2>
<p><a href="https://stackoverflow.com/q/42382498/1575353">This Stack overflow post</a> might be interesting if you want to use <code>await</code> with the call to <code>passport.authenticate()</code>:</p>
<blockquote>
<p>I've been failing to get passport.authenticate to work at all inside of an async/await or promise pattern. Here is an example I feel should work, but it fails to execute passport.authenticate().</p>
</blockquote>
<blockquote>
<pre><code>const passport = require("passport");
let user;
try {
   user = await __promisifiedPassportAuthentication();
   console.log("You'll never have this ", user);
} catch (err) {
   throw err;
}
function __promisifiedPassportAuthentication() {
    return new Promise((resolve, reject) =&gt; {
        console.log("I run");
        passport.authenticate('local', (err, user, info) =&gt; {
             if (err) reject(err);
             if (user) resolve(user);
         });
    });
}
</code></pre>
</blockquote>
<p>The <a href="https://stackoverflow.com/a/42383763/1575353">self-answer</a> claims that the OP needed to invoke the function returned by the call to <code>passport.authenticate()</code> passing <code>req</code> and <code>res</code>, which likely need to get passed to <code>__promisifiedPassportAuthentication()</code>.</p>
    </div>