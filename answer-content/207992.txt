<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<h1>General overview</h1>
<p>I found this hard to follow.  The logic is scattered across several coupled classes without a clear idea of a specific single responsibility for each class.</p>
<p>The class, function and variable names aren't as helpful as they could be - for example, <code>GetProcessedVoiceValue()</code> doesn't indicate what kind of processing was done; <code>ln2per12</code> only captures <em>how</em> it was computed, rather than what it's <em>for</em>, and <code>MyPlugin</code> looks like a generic temporary name.</p>
<h1>Specific issues</h1>
<p><code>BOUNDED()</code> is a dangerous macro - it expands its arguments more than once, meaning that any side-effects can be multiply executed, unlike the equivalent function call.  Prefer to use a function - either <code>std::clamp()</code> or your own version of it (if you need to build with old compilers).  Such a functions is generally a zero-cost abstraction in C++.</p>
<p>Variable-length arrays are not standard C++.  Fix this by making <code>voiceSize</code> and <code>bufferSize</code> <em>compile-time</em> constants, aka <code>constexpr</code> (rather than plain <code>const</code>).</p>
<p>Prefer initialisation to assignment.  In <code>Param</code>, for example, we could make <code>mMin</code>, <code>mMax</code> and <code>mRange</code> const if we initialize:</p>
<pre><code>    Param(double min, double max)
        : mMin{min},
          // mMax was never used, so don't store it
          mRange{max - min}
    {
    }

    // make them public, so we don't need `get_min()` etc.
    const double mMin, mRange;
</code></pre>
<p>The uninitialised <code>pModValues</code> pointer is especially dangerous here.</p>
<p>I don't understand why we're updating <code>left</code> and <code>right</code> identically.  We can get better special locality by writing just one of them, and (if we really need two identical buffers) using <code>std::copy()</code> to duplicate it afterwards.</p>
<p>In <code>Oscillator</code>, there's no need for <code>pGain</code>, <code>pOffset</code> and <code>pPitch</code> to be pointers.  Eliminate the memory allocation (and risk of leaks when one of them throws <code>std::bad_alloc</code>) by making them simple member variables - don't write Java code!</p>
<pre><code>Param pGain, pOffset, pPitch;

Oscillator()
    : pGain{0.0, 1.0},
      pOffset{-900.0, 900.0},
      pPitch{-48.0, 48.0}
{ /* ... */ }

// destructor is now defaulted
</code></pre>
<p>Some functions from <code>&lt;cmath&gt;</code> wrongly accessed in the global namespace (namely <code>std::sin()</code> and <code>std::exp()</code>); also <code>std::memset()</code> from <code>&lt;cstring&gt;</code>.  These should be correctly qualified for portable code.</p>
<p>Prefer <code>std::fill()</code> or <code>std::fill_n()</code> over <code>std::memset()</code> - the former takes care of conversions and constructors where necessary, and is equivalent to the latter in simple cases, so it's a good habit to acquire:</p>
<pre><code>    std::fill_n(bufferLeft, blockSize, 0);
    std::fill_n(bufferRight, blockSize, 0);
</code></pre>
<p>Declare <code>main()</code> with no arguments when not intending to process command-line options.</p>
<p>If you can, make sure your compiler targets the particular hardware you'll be using (for me the speed more than doubles when I add <code>-O3 -march=native</code> to my compilation command).</p>
    </div>