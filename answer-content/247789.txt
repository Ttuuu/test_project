<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Okay so I do not really understand the issue or why this should not be trivially linear. Note: I dont know python or those fancy shortcuts used in previous answers. Just using simple basic functions (Java style, translate to whatever floats your boat):</p>
<ol>
<li>Iteration through an array: O(n)</li>
<li>Array element access: O(1) it seems.. (<a href="https://stackoverflow.com/questions/37120776/accessing-elements-really-o1">https://stackoverflow.com/questions/37120776/accessing-elements-really-o1</a>)</li>
</ol>
<p>So..</p>
<pre class="lang-java prettyprint-override"><code>int[] numbers = [1,1,2,2,3,3,3];
int maxNumber = 0; //or maxNegative if you include negative

//find maxNumber by iterating once in O(n)
for(int i = 0; i &lt; numbers.length; i++){
     if(numbers[i]&gt;maxumber)
          maxNumber = numbers[i];
     }
}
 
//new array of length maxNumber
int[] numberOccurences = new int[maxNumber];

//initialize array in O(n)
for(int i = 0; i &lt; numberOccurences.length; i++){
    numberOccurences[i] = 0;
}
   
//count all number occurences in O(n)
for(int num : numbers){
    numberOccurences[num]++;
}

//get all numbers with odd occurences in O(n)
for(int i = 0; i &lt; numberOccurences.length; i++){
     if(numberOccurences[i]%2!=0){
           print(i)
     }
 }
</code></pre>
<p>So as far as I can see that solves it in 4x O(n) = O(n) with just simple loops. If you need negative numbers, just use 2 arrays, that wont change anything. If you have double values, multiply them by 10 to the power of maximum number of decimal places. Please correct me if I am wrong.</p>
    </div>