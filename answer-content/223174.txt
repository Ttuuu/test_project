<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Important notes:</p>

<ul>
<li>Proper indenting helps make code easier to read and maintain.</li>
<li>Always use <code>Option Explicit</code></li>
</ul>

<p>The first area of performance improvement is to use arrays, not keep referring to Excel objects. As an example - your first loop is:</p>

<blockquote>
<pre><code>LastLine = Sheets("MT950").Range("A1").End(xlDown).Row

count = 0
myend = 1

For line = 1 To LastLine

If Sheets("MT950").Cells(line, 1) Like "-}{5:*" Then

SearchString = Sheets("MT950").Range("A" &amp; line).Value

mypos = InStr(1, SearchString, swift, 1)
If mypos &lt;&gt; 0 Then
    count = count + 1
End If

End If
Next line
</code></pre>
</blockquote>

<p>Where as, it could be:</p>

<pre><code>LastLine = Sheets("MT950").Range("A1").End(xlDown).Row
Dim tempArray as Variant '&lt;-- this is where we hold the values.
tempArray = Sheets("MT950").range("A1:A" &amp; CStr(LastLine)).Value
count = 0
myend = 1

For line = LBound (tempArray, 1) to UBound(tempArray,1) ' Cycle through array
    If tempArray(line,1) Like "-}{5:*" Then
        mypos = InStr(1, tempArray(line,1), swift, 1)
        If mypos &lt;&gt; 0 Then
            count = count + 1
        End If
    End If
Next line
</code></pre>

<p>Your <code>k</code> loop does not appear to achieve anything, except repeat something without any variation [until deeper inspection, <code>myend</code> varies]. The performance of inner portion of that loop can also be improved by the use of arrays.</p>

<p>Looking at the code, this uses exactly the same array we used last time - so no need to even re-assign it!</p>

<blockquote>
<pre><code>For k = 1 To count

For line = myend To LastLine
If Sheets("MT950").Cells(line, 1) Like "-}{5:*" Then
    SearchString = Sheets("MT950").Range("A" &amp; line).Value

    mypos = InStr(1, SearchString, swift, 1)
    If mypos &lt;&gt; 0 Then

        mybegin = line
        For linebis = mybegin To LastLine
            If Sheets("MT950").Cells(linebis, 1) Like ":62F:*" Then
                SearchString = Sheets("MT950").Range("A" &amp; linebis).Value

                mypos = InStr(1, SearchString, mycurrency, 1)
                If mypos &lt;&gt; 0 Then
                    myend = linebis
                    test = 1
                End If
                Exit For
            End If
        Next linebis

        If test = 1 Then Exit For
    End If
End If
Next line
If test = 1 Then Exit For
Next k
</code></pre>
</blockquote>

<p>Can be like:</p>

<pre><code>For k = 1 To count
    For line = myend To LastLine
      If tempArray(line, 1) Like "-}{5:*" Then
          mypos = InStr(1, tempArray(line, 1), swift, 1)
          If mypos &lt;&gt; 0 Then
              mybegin = line
              For linebis = mybegin To LastLine
                  If tempArray(linebis , 1) Like ":62F:*" Then
                      mypos = InStr(1, tempArray(linebis , 1), mycurrency, 1)
                      If mypos &lt;&gt; 0 Then
                          myend = linebis
                          test = 1
                      End If
                   Exit For
                   End If
               Next linebis
           If test = 1 Then Exit For
       End If
    End If
    Next line
    If test = 1 Then Exit For
Next k
</code></pre>

<p>Notice that with these changes, we only touch the Excel model only once - to extract the array of values and this will greatly improve performance. With some re-thinking, you can have the required Range as a parameter - thus allowing this to be re-used or flexible (perhaps even as a UDF, depending on where you are getting your "swift" and "currency" values from!).</p>

<p>With these simple changes in place, you can look at your code logic and determine if other optimisations can be done. </p>
    </div>