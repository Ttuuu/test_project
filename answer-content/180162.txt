<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p><a href="https://codereview.stackexchange.com/users/6499/roland-illig">@Roland Illig</a> has a good point: the field names can be put into an array. Perhaps it would be best to use one array for the labels of the fields and then use that array to generate the field names.</p>

<pre><code>$fieldLabels = array("FName","LName","Street","City","Postcode","Country","E-mail","Phone");
</code></pre>

<p>To get the field name (e.g. when iterating over each label), a function can be applied to the label. For the case of the labels above, the name can simply be derived by removing the hyphen (i.e. <code>-</code>) and making the label lowercase. For those operations, <a href="http://php.net/str_replace" rel="nofollow noreferrer"><code>str_replace()</code></a> and <a href="http://php.net/strtolower" rel="nofollow noreferrer"><code>strtolower()</code></a> can be used. This logic could be abstracted into a function (or static method if a class was defined) and called when necessary: </p>

<pre><code>function GetFieldNameFromLabel($label) {
    return str_replace('-', '', strtolower($label));
}
</code></pre>

<p>Then when checking if all field have been completed, that function can be called. The labels can be iterated over, to check if there is a non-empty value in the POST data (i.e. <code>$_POST</code>) - if so, store such a value in an array (e.g. <code>$validValues</code>).</p>

<pre><code>$validValues = array();
foreach($fieldLabels as $fieldLabel) {
    $fieldName = GetFieldNameFromLabel($fieldLabel);
    if (!empty($_POST[$fieldName])) {
        $validValues[$fieldName] = $_POST[$fieldName];
    }
}
</code></pre>

<p>Then the condition for adding the entry in the XML can simply be whether the number of values in that array of valid values is the same as the number of labels:</p>

<pre><code>if (count($validValues) == count($fieldLabels)) {
    //store values from $validValues in XML
}
</code></pre>

<p>Then for generating the form, the fields can be iterated over, and the error message can be added conditionally. One could even conditionally add the error message container (i.e. <code>&lt;span class="error"&gt;</code>). Some may argue this logic should be separated from the HTML - that could be achieved using a template system (e.g. <a href="https://www.smarty.net/" rel="nofollow noreferrer">Smarty</a>, <a href="https://twig.symfony.com/" rel="nofollow noreferrer">Symfony Twig</a>, etc.) - that could also be used for the display of existing data.</p>

<pre><code>&lt;form action="" method="post"&gt;
    &lt;?php
    foreach($fieldLabels as $fieldLabel) {
        $fieldName = GetFieldNameFromLabel($fieldLabel);
        $error = '';
        if ($_SERVER["REQUEST_METHOD"] == "POST" &amp;&amp; !array_key_exists($fieldName, $validValues)) {
            $error = "Fill in ".$fieldName;
        }
        echo "&lt;p&gt;$fieldLabel:&lt;/p&gt;";
        echo '&lt;input type="text" name="'.$fieldName.'"/&gt;&lt;span class="error"&gt;'.$error.'&lt;/span&gt;';
    }
</code></pre>
    </div>