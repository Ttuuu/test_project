<div class="s-prose s-prose__disable-spoiler-hover js-post-body" itemprop="text">
<p>Slight modification to Berrly's answer. Gives alphanumberic with casing and makes sure there are no duplicates created. I'm going to start using this for access tokens that get emailed to the user &amp; text'd to log on to my system. This would be more secure than most of these systems today as they are more predictable as they are generally 6 characters long (fixed length) and numbers (limited set). Even though they all have a time limit on them why not go this extra mile as it's not that much harder.</p>

<p>Note: I remove similar looking characters to ease confusion when actually typing.</p>

<p>Side Rant: I believe with the advent of social login emailed/texted access tokens for granting access to other sites/apps will be the way to go. Nobody wants to remember all these passwords so they use the same one and we blame them, which is stupid because it's simply human nature. Then we make up password holders which you need a password to which is just 1 password holding all your other passwords and we think that's a good solution...The safest thing you can do is change passwords often and make them complicated but because we have to have so many nobody does this. We don't want to spend our lives changing passwords. Ideally we'd have the 1 password to say our email and everything goes through there for step 1 auth, then phone for step 2. People would be more willing to change their ONE password more often knowing it was just 1 and used to get access tokens that grant them access to all other apps/sites.</p>

<pre><code>//Rextester.Program.Main is the entry point for your code. Don't change it.
//Compiler version 4.0.30319.17929 for Microsoft (R) .NET Framework 4.5

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Text;

namespace Rextester
{
    public class Program
    {
        public static void Main(string[] args)
        {
            //Your code goes here
            Console.WriteLine("Hello, world!");

            var blackList = new List&lt;char&gt;{
                '[', ']', '`', '{', '}', '|', '\\', '/', '~', '^', '_', '-', ':', ';', '&lt;', '&gt;', '=', '?', '@', '0', 'o', 'l', 'I', '1'
            };

            var accessTokens = new List&lt;string&gt;();

            // test by creating a bunch of tokens
            for(int i = 0; i &lt; 100; i++)
            {
                // this makes sure we don't duplicate active access tokens
                var token = CouponGenerator(_random.Next(6, 12), blackList);
                while(accessTokens.Contains(token)){
                    token = CouponGenerator(_random.Next(6, 12), blackList);
                }

                accessTokens.Add(token);
            }

            // print tokens out
            accessTokens.ForEach(x =&gt; Console.WriteLine("Access Token: " + x));
        }

        public static string CouponGenerator(int length, List&lt;char&gt; exclusionList)
        {
            var sb = new StringBuilder();
            for (var i = 0; i &lt; length; i++)
            {
                var ch = Convert.ToChar(Convert.ToInt32(Math.Floor(62 * _random.NextDouble() + 48)));
                while(exclusionList.Contains(ch)){
                    ch = Convert.ToChar(Convert.ToInt32(Math.Floor(62 * _random.NextDouble() + 65)));
                }

                sb.Append(ch);
            }

            return sb.ToString();
        }
        private static readonly Random _random = new Random();
    }
}
</code></pre>
    </div>